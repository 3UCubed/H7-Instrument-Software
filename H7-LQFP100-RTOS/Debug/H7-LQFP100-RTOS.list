
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014f50  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  080151f0  080151f0  000251f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080155d0  080155d0  000255d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080155d8  080155d8  000255d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080155dc  080155dc  000255dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  24000000  080155e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000549c  24000100  080156e0  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400559c  080156e0  0003559c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 10 .debug_info   000327f1  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000548e  00000000  00000000  0006291f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002628  00000000  00000000  00067db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002430  00000000  00000000  0006a3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007aa8  00000000  00000000  0006c808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000309cb  00000000  00000000  000742b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194565  00000000  00000000  000a4c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002391e0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000abe4  00000000  00000000  00239230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080151d8 	.word	0x080151d8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	080151d8 	.word	0x080151d8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a13      	ldr	r2, [pc, #76]	; (800063c <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d106      	bne.n	8000602 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
	{
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2101      	movs	r1, #1
 80005fa:	4618      	mov	r0, r3
 80005fc:	f010 ffbe 	bl	801157c <osEventFlagsSet>
	}
	else
	{
		printf("Unknown Timer Interrupt\n");
	}
}
 8000600:	e018      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	else if (htim == &htim2)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2102      	movs	r1, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f010 ffb3 	bl	801157c <osEventFlagsSet>
}
 8000616:	e00d      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	else if (htim == &htim3)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2104      	movs	r1, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f010 ffa8 	bl	801157c <osEventFlagsSet>
}
 800062c:	e002      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
		printf("Unknown Timer Interrupt\n");
 800062e:	4807      	ldr	r0, [pc, #28]	; (800064c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000630:	f014 fa22 	bl	8014a78 <puts>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	240004e8 	.word	0x240004e8
 8000640:	24000b3c 	.word	0x24000b3c
 8000644:	24000534 	.word	0x24000534
 8000648:	24000580 	.word	0x24000580
 800064c:	08015240 	.word	0x08015240

08000650 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af02      	add	r7, sp, #8
 8000656:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	49f2      	ldr	r1, [pc, #968]	; (8000a24 <HAL_UART_RxCpltCallback+0x3d4>)
 800065c:	48f2      	ldr	r0, [pc, #968]	; (8000a28 <HAL_UART_RxCpltCallback+0x3d8>)
 800065e:	f00e fa81 	bl	800eb64 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000662:	4bf0      	ldr	r3, [pc, #960]	; (8000a24 <HAL_UART_RxCpltCallback+0x3d4>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	2be0      	cmp	r3, #224	; 0xe0
 800066c:	f200 83c8 	bhi.w	8000e00 <HAL_UART_RxCpltCallback+0x7b0>
 8000670:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <HAL_UART_RxCpltCallback+0x28>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	08000a11 	.word	0x08000a11
 800067c:	08000a4d 	.word	0x08000a4d
 8000680:	08000ad3 	.word	0x08000ad3
 8000684:	08000afd 	.word	0x08000afd
 8000688:	08000b25 	.word	0x08000b25
 800068c:	08000b4f 	.word	0x08000b4f
 8000690:	08000b7b 	.word	0x08000b7b
 8000694:	08000ba7 	.word	0x08000ba7
 8000698:	08000bd1 	.word	0x08000bd1
 800069c:	08000c03 	.word	0x08000c03
 80006a0:	08000c27 	.word	0x08000c27
 80006a4:	08000c43 	.word	0x08000c43
 80006a8:	08000c5f 	.word	0x08000c5f
 80006ac:	08000ca9 	.word	0x08000ca9
 80006b0:	08000da5 	.word	0x08000da5
 80006b4:	08000dd5 	.word	0x08000dd5
 80006b8:	080009fd 	.word	0x080009fd
 80006bc:	08000a39 	.word	0x08000a39
 80006c0:	08000abd 	.word	0x08000abd
 80006c4:	08000ae9 	.word	0x08000ae9
 80006c8:	08000b11 	.word	0x08000b11
 80006cc:	08000b39 	.word	0x08000b39
 80006d0:	08000b65 	.word	0x08000b65
 80006d4:	08000b91 	.word	0x08000b91
 80006d8:	08000bbd 	.word	0x08000bbd
 80006dc:	08000be5 	.word	0x08000be5
 80006e0:	08000c19 	.word	0x08000c19
 80006e4:	08000c35 	.word	0x08000c35
 80006e8:	08000c51 	.word	0x08000c51
 80006ec:	08000c6d 	.word	0x08000c6d
 80006f0:	08000ce5 	.word	0x08000ce5
 80006f4:	08000dcd 	.word	0x08000dcd
 80006f8:	08000e01 	.word	0x08000e01
 80006fc:	08000e01 	.word	0x08000e01
 8000700:	08000e01 	.word	0x08000e01
 8000704:	08000e01 	.word	0x08000e01
 8000708:	08000e01 	.word	0x08000e01
 800070c:	08000e01 	.word	0x08000e01
 8000710:	08000e01 	.word	0x08000e01
 8000714:	08000e01 	.word	0x08000e01
 8000718:	08000e01 	.word	0x08000e01
 800071c:	08000e01 	.word	0x08000e01
 8000720:	08000e01 	.word	0x08000e01
 8000724:	08000e01 	.word	0x08000e01
 8000728:	08000e01 	.word	0x08000e01
 800072c:	08000e01 	.word	0x08000e01
 8000730:	08000e01 	.word	0x08000e01
 8000734:	08000e01 	.word	0x08000e01
 8000738:	08000e01 	.word	0x08000e01
 800073c:	08000e01 	.word	0x08000e01
 8000740:	08000e01 	.word	0x08000e01
 8000744:	08000e01 	.word	0x08000e01
 8000748:	08000e01 	.word	0x08000e01
 800074c:	08000e01 	.word	0x08000e01
 8000750:	08000e01 	.word	0x08000e01
 8000754:	08000e01 	.word	0x08000e01
 8000758:	08000e01 	.word	0x08000e01
 800075c:	08000e01 	.word	0x08000e01
 8000760:	08000e01 	.word	0x08000e01
 8000764:	08000e01 	.word	0x08000e01
 8000768:	08000e01 	.word	0x08000e01
 800076c:	08000e01 	.word	0x08000e01
 8000770:	08000e01 	.word	0x08000e01
 8000774:	08000e01 	.word	0x08000e01
 8000778:	08000e01 	.word	0x08000e01
 800077c:	08000e01 	.word	0x08000e01
 8000780:	08000e01 	.word	0x08000e01
 8000784:	08000e01 	.word	0x08000e01
 8000788:	08000e01 	.word	0x08000e01
 800078c:	08000e01 	.word	0x08000e01
 8000790:	08000e01 	.word	0x08000e01
 8000794:	08000e01 	.word	0x08000e01
 8000798:	08000e01 	.word	0x08000e01
 800079c:	08000e01 	.word	0x08000e01
 80007a0:	08000e01 	.word	0x08000e01
 80007a4:	08000e01 	.word	0x08000e01
 80007a8:	08000e01 	.word	0x08000e01
 80007ac:	08000e01 	.word	0x08000e01
 80007b0:	08000e01 	.word	0x08000e01
 80007b4:	08000e01 	.word	0x08000e01
 80007b8:	08000e01 	.word	0x08000e01
 80007bc:	08000e01 	.word	0x08000e01
 80007c0:	08000e01 	.word	0x08000e01
 80007c4:	08000e01 	.word	0x08000e01
 80007c8:	08000e01 	.word	0x08000e01
 80007cc:	08000e01 	.word	0x08000e01
 80007d0:	08000e01 	.word	0x08000e01
 80007d4:	08000e01 	.word	0x08000e01
 80007d8:	08000e01 	.word	0x08000e01
 80007dc:	08000e01 	.word	0x08000e01
 80007e0:	08000e01 	.word	0x08000e01
 80007e4:	08000e01 	.word	0x08000e01
 80007e8:	08000e01 	.word	0x08000e01
 80007ec:	08000e01 	.word	0x08000e01
 80007f0:	08000e01 	.word	0x08000e01
 80007f4:	08000e01 	.word	0x08000e01
 80007f8:	08000e01 	.word	0x08000e01
 80007fc:	08000e01 	.word	0x08000e01
 8000800:	08000e01 	.word	0x08000e01
 8000804:	08000e01 	.word	0x08000e01
 8000808:	08000e01 	.word	0x08000e01
 800080c:	08000e01 	.word	0x08000e01
 8000810:	08000e01 	.word	0x08000e01
 8000814:	08000e01 	.word	0x08000e01
 8000818:	08000e01 	.word	0x08000e01
 800081c:	08000e01 	.word	0x08000e01
 8000820:	08000e01 	.word	0x08000e01
 8000824:	08000e01 	.word	0x08000e01
 8000828:	08000e01 	.word	0x08000e01
 800082c:	08000e01 	.word	0x08000e01
 8000830:	08000e01 	.word	0x08000e01
 8000834:	08000e01 	.word	0x08000e01
 8000838:	08000e01 	.word	0x08000e01
 800083c:	08000e01 	.word	0x08000e01
 8000840:	08000e01 	.word	0x08000e01
 8000844:	08000e01 	.word	0x08000e01
 8000848:	08000e01 	.word	0x08000e01
 800084c:	08000e01 	.word	0x08000e01
 8000850:	08000e01 	.word	0x08000e01
 8000854:	08000e01 	.word	0x08000e01
 8000858:	08000e01 	.word	0x08000e01
 800085c:	08000e01 	.word	0x08000e01
 8000860:	08000e01 	.word	0x08000e01
 8000864:	08000e01 	.word	0x08000e01
 8000868:	08000e01 	.word	0x08000e01
 800086c:	08000e01 	.word	0x08000e01
 8000870:	08000e01 	.word	0x08000e01
 8000874:	08000e01 	.word	0x08000e01
 8000878:	08000e01 	.word	0x08000e01
 800087c:	08000e01 	.word	0x08000e01
 8000880:	08000e01 	.word	0x08000e01
 8000884:	08000e01 	.word	0x08000e01
 8000888:	08000e01 	.word	0x08000e01
 800088c:	08000e01 	.word	0x08000e01
 8000890:	08000e01 	.word	0x08000e01
 8000894:	08000e01 	.word	0x08000e01
 8000898:	08000e01 	.word	0x08000e01
 800089c:	08000e01 	.word	0x08000e01
 80008a0:	08000e01 	.word	0x08000e01
 80008a4:	08000e01 	.word	0x08000e01
 80008a8:	08000e01 	.word	0x08000e01
 80008ac:	08000e01 	.word	0x08000e01
 80008b0:	08000e01 	.word	0x08000e01
 80008b4:	08000e01 	.word	0x08000e01
 80008b8:	08000e01 	.word	0x08000e01
 80008bc:	08000e01 	.word	0x08000e01
 80008c0:	08000e01 	.word	0x08000e01
 80008c4:	08000e01 	.word	0x08000e01
 80008c8:	08000e01 	.word	0x08000e01
 80008cc:	08000e01 	.word	0x08000e01
 80008d0:	08000e01 	.word	0x08000e01
 80008d4:	08000e01 	.word	0x08000e01
 80008d8:	08000e01 	.word	0x08000e01
 80008dc:	08000e01 	.word	0x08000e01
 80008e0:	08000e01 	.word	0x08000e01
 80008e4:	08000e01 	.word	0x08000e01
 80008e8:	08000e01 	.word	0x08000e01
 80008ec:	08000e01 	.word	0x08000e01
 80008f0:	08000e01 	.word	0x08000e01
 80008f4:	08000e01 	.word	0x08000e01
 80008f8:	08000e01 	.word	0x08000e01
 80008fc:	08000e01 	.word	0x08000e01
 8000900:	08000e01 	.word	0x08000e01
 8000904:	08000e01 	.word	0x08000e01
 8000908:	08000e01 	.word	0x08000e01
 800090c:	08000e01 	.word	0x08000e01
 8000910:	08000e01 	.word	0x08000e01
 8000914:	08000e01 	.word	0x08000e01
 8000918:	08000e01 	.word	0x08000e01
 800091c:	08000e01 	.word	0x08000e01
 8000920:	08000e01 	.word	0x08000e01
 8000924:	08000e01 	.word	0x08000e01
 8000928:	08000e01 	.word	0x08000e01
 800092c:	08000e01 	.word	0x08000e01
 8000930:	08000e01 	.word	0x08000e01
 8000934:	08000e01 	.word	0x08000e01
 8000938:	08000e01 	.word	0x08000e01
 800093c:	08000e01 	.word	0x08000e01
 8000940:	08000e01 	.word	0x08000e01
 8000944:	08000e01 	.word	0x08000e01
 8000948:	08000e01 	.word	0x08000e01
 800094c:	08000e01 	.word	0x08000e01
 8000950:	08000e01 	.word	0x08000e01
 8000954:	08000e01 	.word	0x08000e01
 8000958:	08000e01 	.word	0x08000e01
 800095c:	08000e01 	.word	0x08000e01
 8000960:	08000e01 	.word	0x08000e01
 8000964:	08000e01 	.word	0x08000e01
 8000968:	08000e01 	.word	0x08000e01
 800096c:	08000e01 	.word	0x08000e01
 8000970:	08000e01 	.word	0x08000e01
 8000974:	08000e01 	.word	0x08000e01
 8000978:	08000e01 	.word	0x08000e01
 800097c:	08000e01 	.word	0x08000e01
 8000980:	08000e01 	.word	0x08000e01
 8000984:	08000e01 	.word	0x08000e01
 8000988:	08000e01 	.word	0x08000e01
 800098c:	08000e01 	.word	0x08000e01
 8000990:	08000e01 	.word	0x08000e01
 8000994:	08000e01 	.word	0x08000e01
 8000998:	08000e01 	.word	0x08000e01
 800099c:	08000e01 	.word	0x08000e01
 80009a0:	08000e01 	.word	0x08000e01
 80009a4:	08000e01 	.word	0x08000e01
 80009a8:	08000e01 	.word	0x08000e01
 80009ac:	08000e01 	.word	0x08000e01
 80009b0:	08000e01 	.word	0x08000e01
 80009b4:	08000e01 	.word	0x08000e01
 80009b8:	08000def 	.word	0x08000def
 80009bc:	08000e01 	.word	0x08000e01
 80009c0:	08000e01 	.word	0x08000e01
 80009c4:	08000e01 	.word	0x08000e01
 80009c8:	08000e01 	.word	0x08000e01
 80009cc:	08000e01 	.word	0x08000e01
 80009d0:	08000e01 	.word	0x08000e01
 80009d4:	08000e01 	.word	0x08000e01
 80009d8:	08000e01 	.word	0x08000e01
 80009dc:	08000e01 	.word	0x08000e01
 80009e0:	08000e01 	.word	0x08000e01
 80009e4:	08000e01 	.word	0x08000e01
 80009e8:	08000e01 	.word	0x08000e01
 80009ec:	08000e01 	.word	0x08000e01
 80009f0:	08000e01 	.word	0x08000e01
 80009f4:	08000e01 	.word	0x08000e01
 80009f8:	08000ddd 	.word	0x08000ddd
	case 0x10: {
		printf("SDN1 ON\n");
 80009fc:	480b      	ldr	r0, [pc, #44]	; (8000a2c <HAL_UART_RxCpltCallback+0x3dc>)
 80009fe:	f014 f83b 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a04:	2104      	movs	r1, #4
 8000a06:	2201      	movs	r2, #1
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f007 ff05 	bl	8008818 <HAL_GPIO_WritePin>
		break;
 8000a0e:	e202      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a10:	4808      	ldr	r0, [pc, #32]	; (8000a34 <HAL_UART_RxCpltCallback+0x3e4>)
 8000a12:	f014 f831 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a18:	2104      	movs	r1, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f007 fefb 	bl	8008818 <HAL_GPIO_WritePin>
		break;
 8000a22:	e1f8      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
 8000a24:	24000b40 	.word	0x24000b40
 8000a28:	240005cc 	.word	0x240005cc
 8000a2c:	08015258 	.word	0x08015258
 8000a30:	58020400 	.word	0x58020400
 8000a34:	08015260 	.word	0x08015260
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a38:	48b5      	ldr	r0, [pc, #724]	; (8000d10 <HAL_UART_RxCpltCallback+0x6c0>)
 8000a3a:	f014 f81d 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a3e:	4bb5      	ldr	r3, [pc, #724]	; (8000d14 <HAL_UART_RxCpltCallback+0x6c4>)
 8000a40:	2120      	movs	r1, #32
 8000a42:	2201      	movs	r2, #1
 8000a44:	4618      	mov	r0, r3
 8000a46:	f007 fee7 	bl	8008818 <HAL_GPIO_WritePin>

		break;
 8000a4a:	e1e4      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a4c:	48b2      	ldr	r0, [pc, #712]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000a4e:	f014 f813 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a52:	4bb0      	ldr	r3, [pc, #704]	; (8000d14 <HAL_UART_RxCpltCallback+0x6c4>)
 8000a54:	2120      	movs	r1, #32
 8000a56:	2200      	movs	r2, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f007 fedd 	bl	8008818 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a5e:	4bad      	ldr	r3, [pc, #692]	; (8000d14 <HAL_UART_RxCpltCallback+0x6c4>)
 8000a60:	2140      	movs	r1, #64	; 0x40
 8000a62:	2200      	movs	r2, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f007 fed7 	bl	8008818 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000a6a:	4bac      	ldr	r3, [pc, #688]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000a6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a70:	2200      	movs	r2, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f007 fed0 	bl	8008818 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000a78:	4ba8      	ldr	r3, [pc, #672]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000a7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f007 fec9 	bl	8008818 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000a86:	4ba5      	ldr	r3, [pc, #660]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f007 fec2 	bl	8008818 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000a94:	4ba1      	ldr	r3, [pc, #644]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000a96:	2140      	movs	r1, #64	; 0x40
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f007 febc 	bl	8008818 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000aa0:	4b9e      	ldr	r3, [pc, #632]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000aa2:	2180      	movs	r1, #128	; 0x80
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f007 feb6 	bl	8008818 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000aac:	4b9b      	ldr	r3, [pc, #620]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f007 feaf 	bl	8008818 <HAL_GPIO_WritePin>

		break;
 8000aba:	e1ac      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000abc:	4898      	ldr	r0, [pc, #608]	; (8000d20 <HAL_UART_RxCpltCallback+0x6d0>)
 8000abe:	f013 ffdb 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000ac2:	4b96      	ldr	r3, [pc, #600]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000ac4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4618      	mov	r0, r3
 8000acc:	f007 fea4 	bl	8008818 <HAL_GPIO_WritePin>
		break;
 8000ad0:	e1a1      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000ad2:	4894      	ldr	r0, [pc, #592]	; (8000d24 <HAL_UART_RxCpltCallback+0x6d4>)
 8000ad4:	f013 ffd0 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000ad8:	4b90      	ldr	r3, [pc, #576]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000ada:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ade:	2200      	movs	r2, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f007 fe99 	bl	8008818 <HAL_GPIO_WritePin>
		break;
 8000ae6:	e196      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000ae8:	488f      	ldr	r0, [pc, #572]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000aea:	f013 ffc5 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000aee:	4b8b      	ldr	r3, [pc, #556]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	2201      	movs	r2, #1
 8000af4:	4618      	mov	r0, r3
 8000af6:	f007 fe8f 	bl	8008818 <HAL_GPIO_WritePin>
		break;
 8000afa:	e18c      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000afc:	488b      	ldr	r0, [pc, #556]	; (8000d2c <HAL_UART_RxCpltCallback+0x6dc>)
 8000afe:	f013 ffbb 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b02:	4b86      	ldr	r3, [pc, #536]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	2200      	movs	r2, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f007 fe85 	bl	8008818 <HAL_GPIO_WritePin>
		break;
 8000b0e:	e182      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b10:	4887      	ldr	r0, [pc, #540]	; (8000d30 <HAL_UART_RxCpltCallback+0x6e0>)
 8000b12:	f013 ffb1 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000b16:	4b81      	ldr	r3, [pc, #516]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b18:	2140      	movs	r1, #64	; 0x40
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f007 fe7b 	bl	8008818 <HAL_GPIO_WritePin>
		break;
 8000b22:	e178      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000b24:	4883      	ldr	r0, [pc, #524]	; (8000d34 <HAL_UART_RxCpltCallback+0x6e4>)
 8000b26:	f013 ffa7 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000b2a:	4b7c      	ldr	r3, [pc, #496]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b2c:	2140      	movs	r1, #64	; 0x40
 8000b2e:	2200      	movs	r2, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f007 fe71 	bl	8008818 <HAL_GPIO_WritePin>
		break;
 8000b36:	e16e      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000b38:	487f      	ldr	r0, [pc, #508]	; (8000d38 <HAL_UART_RxCpltCallback+0x6e8>)
 8000b3a:	f013 ff9d 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000b3e:	4b77      	ldr	r3, [pc, #476]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b44:	2201      	movs	r2, #1
 8000b46:	4618      	mov	r0, r3
 8000b48:	f007 fe66 	bl	8008818 <HAL_GPIO_WritePin>
		break;
 8000b4c:	e163      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000b4e:	487b      	ldr	r0, [pc, #492]	; (8000d3c <HAL_UART_RxCpltCallback+0x6ec>)
 8000b50:	f013 ff92 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b54:	4b71      	ldr	r3, [pc, #452]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f007 fe5b 	bl	8008818 <HAL_GPIO_WritePin>
		break;
 8000b62:	e158      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000b64:	4876      	ldr	r0, [pc, #472]	; (8000d40 <HAL_UART_RxCpltCallback+0x6f0>)
 8000b66:	f013 ff87 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000b6a:	4b6c      	ldr	r3, [pc, #432]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b70:	2201      	movs	r2, #1
 8000b72:	4618      	mov	r0, r3
 8000b74:	f007 fe50 	bl	8008818 <HAL_GPIO_WritePin>
		break;
 8000b78:	e14d      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000b7a:	4872      	ldr	r0, [pc, #456]	; (8000d44 <HAL_UART_RxCpltCallback+0x6f4>)
 8000b7c:	f013 ff7c 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000b80:	4b66      	ldr	r3, [pc, #408]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b86:	2200      	movs	r2, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f007 fe45 	bl	8008818 <HAL_GPIO_WritePin>
		break;
 8000b8e:	e142      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000b90:	486d      	ldr	r0, [pc, #436]	; (8000d48 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b92:	f013 ff71 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000b96:	4b61      	ldr	r3, [pc, #388]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f007 fe3a 	bl	8008818 <HAL_GPIO_WritePin>
		break;
 8000ba4:	e137      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000ba6:	4869      	ldr	r0, [pc, #420]	; (8000d4c <HAL_UART_RxCpltCallback+0x6fc>)
 8000ba8:	f013 ff66 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000bac:	4b5b      	ldr	r3, [pc, #364]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f007 fe2f 	bl	8008818 <HAL_GPIO_WritePin>
		break;
 8000bba:	e12c      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000bbc:	4864      	ldr	r0, [pc, #400]	; (8000d50 <HAL_UART_RxCpltCallback+0x700>)
 8000bbe:	f013 ff5b 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000bc2:	4b54      	ldr	r3, [pc, #336]	; (8000d14 <HAL_UART_RxCpltCallback+0x6c4>)
 8000bc4:	2140      	movs	r1, #64	; 0x40
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f007 fe25 	bl	8008818 <HAL_GPIO_WritePin>
		break;
 8000bce:	e122      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000bd0:	4860      	ldr	r0, [pc, #384]	; (8000d54 <HAL_UART_RxCpltCallback+0x704>)
 8000bd2:	f013 ff51 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000bd6:	4b4f      	ldr	r3, [pc, #316]	; (8000d14 <HAL_UART_RxCpltCallback+0x6c4>)
 8000bd8:	2140      	movs	r1, #64	; 0x40
 8000bda:	2200      	movs	r2, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f007 fe1b 	bl	8008818 <HAL_GPIO_WritePin>
		break;
 8000be2:	e118      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000be4:	485c      	ldr	r0, [pc, #368]	; (8000d58 <HAL_UART_RxCpltCallback+0x708>)
 8000be6:	f013 ff47 	bl	8014a78 <puts>
		HAL_TIM_Base_Start(&htim2);
 8000bea:	485c      	ldr	r0, [pc, #368]	; (8000d5c <HAL_UART_RxCpltCallback+0x70c>)
 8000bec:	f00c f99e 	bl	800cf2c <HAL_TIM_Base_Start>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	2320      	movs	r3, #32
 8000bf6:	4a5a      	ldr	r2, [pc, #360]	; (8000d60 <HAL_UART_RxCpltCallback+0x710>)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	485a      	ldr	r0, [pc, #360]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000bfc:	f004 fa7c 	bl	80050f8 <HAL_DAC_Start_DMA>
		break;
 8000c00:	e109      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000c02:	4859      	ldr	r0, [pc, #356]	; (8000d68 <HAL_UART_RxCpltCallback+0x718>)
 8000c04:	f013 ff38 	bl	8014a78 <puts>
		HAL_TIM_Base_Stop(&htim2);
 8000c08:	4854      	ldr	r0, [pc, #336]	; (8000d5c <HAL_UART_RxCpltCallback+0x70c>)
 8000c0a:	f00c f9ff 	bl	800d00c <HAL_TIM_Base_Stop>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4854      	ldr	r0, [pc, #336]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000c12:	f004 fb31 	bl	8005278 <HAL_DAC_Stop_DMA>
		break;
 8000c16:	e0fe      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000c18:	4854      	ldr	r0, [pc, #336]	; (8000d6c <HAL_UART_RxCpltCallback+0x71c>)
 8000c1a:	f013 ff2d 	bl	8014a78 <puts>
		ERPA_ON = 1;
 8000c1e:	4b54      	ldr	r3, [pc, #336]	; (8000d70 <HAL_UART_RxCpltCallback+0x720>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	701a      	strb	r2, [r3, #0]
		break;
 8000c24:	e0f7      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000c26:	4853      	ldr	r0, [pc, #332]	; (8000d74 <HAL_UART_RxCpltCallback+0x724>)
 8000c28:	f013 ff26 	bl	8014a78 <puts>
		ERPA_ON = 0;
 8000c2c:	4b50      	ldr	r3, [pc, #320]	; (8000d70 <HAL_UART_RxCpltCallback+0x720>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
		break;
 8000c32:	e0f0      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000c34:	4850      	ldr	r0, [pc, #320]	; (8000d78 <HAL_UART_RxCpltCallback+0x728>)
 8000c36:	f013 ff1f 	bl	8014a78 <puts>
		PMT_ON = 1;
 8000c3a:	4b50      	ldr	r3, [pc, #320]	; (8000d7c <HAL_UART_RxCpltCallback+0x72c>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
		break;
 8000c40:	e0e9      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000c42:	484f      	ldr	r0, [pc, #316]	; (8000d80 <HAL_UART_RxCpltCallback+0x730>)
 8000c44:	f013 ff18 	bl	8014a78 <puts>
		PMT_ON = 0;
 8000c48:	4b4c      	ldr	r3, [pc, #304]	; (8000d7c <HAL_UART_RxCpltCallback+0x72c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
		break;
 8000c4e:	e0e2      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000c50:	484c      	ldr	r0, [pc, #304]	; (8000d84 <HAL_UART_RxCpltCallback+0x734>)
 8000c52:	f013 ff11 	bl	8014a78 <puts>
		HK_ON = 1;
 8000c56:	4b4c      	ldr	r3, [pc, #304]	; (8000d88 <HAL_UART_RxCpltCallback+0x738>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	701a      	strb	r2, [r3, #0]
		break;
 8000c5c:	e0db      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000c5e:	484b      	ldr	r0, [pc, #300]	; (8000d8c <HAL_UART_RxCpltCallback+0x73c>)
 8000c60:	f013 ff0a 	bl	8014a78 <puts>
		HK_ON = 0;
 8000c64:	4b48      	ldr	r3, [pc, #288]	; (8000d88 <HAL_UART_RxCpltCallback+0x738>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	701a      	strb	r2, [r3, #0]
		break;
 8000c6a:	e0d4      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000c6c:	4848      	ldr	r0, [pc, #288]	; (8000d90 <HAL_UART_RxCpltCallback+0x740>)
 8000c6e:	f013 ff03 	bl	8014a78 <puts>
		if (step < 17) {
 8000c72:	4b48      	ldr	r3, [pc, #288]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b10      	cmp	r3, #16
 8000c78:	f200 80c6 	bhi.w	8000e08 <HAL_UART_RxCpltCallback+0x7b8>
			step+=2;
 8000c7c:	4b45      	ldr	r3, [pc, #276]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	3302      	adds	r3, #2
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	4b43      	ldr	r3, [pc, #268]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000c86:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000c88:	4b42      	ldr	r3, [pc, #264]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b34      	ldr	r3, [pc, #208]	; (8000d60 <HAL_UART_RxCpltCallback+0x710>)
 8000c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	4832      	ldr	r0, [pc, #200]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000c9a:	f004 fb90 	bl	80053be <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4830      	ldr	r0, [pc, #192]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000ca2:	f004 f9d1 	bl	8005048 <HAL_DAC_Start>
		}
		break;
 8000ca6:	e0af      	b.n	8000e08 <HAL_UART_RxCpltCallback+0x7b8>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000ca8:	483b      	ldr	r0, [pc, #236]	; (8000d98 <HAL_UART_RxCpltCallback+0x748>)
 8000caa:	f013 fee5 	bl	8014a78 <puts>
		if (step > 3) {
 8000cae:	4b39      	ldr	r3, [pc, #228]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	f240 80aa 	bls.w	8000e0c <HAL_UART_RxCpltCallback+0x7bc>
			step-=2;
 8000cb8:	4b36      	ldr	r3, [pc, #216]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	3b02      	subs	r3, #2
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	4b34      	ldr	r3, [pc, #208]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000cc2:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000cc4:	4b33      	ldr	r3, [pc, #204]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b25      	ldr	r3, [pc, #148]	; (8000d60 <HAL_UART_RxCpltCallback+0x710>)
 8000ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4823      	ldr	r0, [pc, #140]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000cd6:	f004 fb72 	bl	80053be <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4821      	ldr	r0, [pc, #132]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000cde:	f004 f9b3 	bl	8005048 <HAL_DAC_Start>
		}
		break;
 8000ce2:	e093      	b.n	8000e0c <HAL_UART_RxCpltCallback+0x7bc>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000ce4:	482d      	ldr	r0, [pc, #180]	; (8000d9c <HAL_UART_RxCpltCallback+0x74c>)
 8000ce6:	f013 fec7 	bl	8014a78 <puts>
		if (cadence <= 50000){
 8000cea:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <HAL_UART_RxCpltCallback+0x750>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	f200 808c 	bhi.w	8000e10 <HAL_UART_RxCpltCallback+0x7c0>
			cadence *= 2;
 8000cf8:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <HAL_UART_RxCpltCallback+0x750>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	4a28      	ldr	r2, [pc, #160]	; (8000da0 <HAL_UART_RxCpltCallback+0x750>)
 8000d00:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000d02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d06:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <HAL_UART_RxCpltCallback+0x750>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000d0c:	e080      	b.n	8000e10 <HAL_UART_RxCpltCallback+0x7c0>
 8000d0e:	bf00      	nop
 8000d10:	0801526c 	.word	0x0801526c
 8000d14:	58020400 	.word	0x58020400
 8000d18:	08015278 	.word	0x08015278
 8000d1c:	58020800 	.word	0x58020800
 8000d20:	08015284 	.word	0x08015284
 8000d24:	08015290 	.word	0x08015290
 8000d28:	080152a0 	.word	0x080152a0
 8000d2c:	080152ac 	.word	0x080152ac
 8000d30:	080152b8 	.word	0x080152b8
 8000d34:	080152c4 	.word	0x080152c4
 8000d38:	080152d4 	.word	0x080152d4
 8000d3c:	080152e0 	.word	0x080152e0
 8000d40:	080152ec 	.word	0x080152ec
 8000d44:	080152f8 	.word	0x080152f8
 8000d48:	08015304 	.word	0x08015304
 8000d4c:	08015314 	.word	0x08015314
 8000d50:	08015324 	.word	0x08015324
 8000d54:	08015330 	.word	0x08015330
 8000d58:	08015340 	.word	0x08015340
 8000d5c:	24000534 	.word	0x24000534
 8000d60:	24000008 	.word	0x24000008
 8000d64:	240002d4 	.word	0x240002d4
 8000d68:	08015350 	.word	0x08015350
 8000d6c:	08015360 	.word	0x08015360
 8000d70:	24000b37 	.word	0x24000b37
 8000d74:	08015368 	.word	0x08015368
 8000d78:	08015374 	.word	0x08015374
 8000d7c:	24000b36 	.word	0x24000b36
 8000d80:	0801537c 	.word	0x0801537c
 8000d84:	08015384 	.word	0x08015384
 8000d88:	24000b38 	.word	0x24000b38
 8000d8c:	0801538c 	.word	0x0801538c
 8000d90:	08015394 	.word	0x08015394
 8000d94:	24000004 	.word	0x24000004
 8000d98:	0801539c 	.word	0x0801539c
 8000d9c:	080153a8 	.word	0x080153a8
 8000da0:	24000000 	.word	0x24000000
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000da4:	481e      	ldr	r0, [pc, #120]	; (8000e20 <HAL_UART_RxCpltCallback+0x7d0>)
 8000da6:	f013 fe67 	bl	8014a78 <puts>
		if (cadence >= 6250){
 8000daa:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <HAL_UART_RxCpltCallback+0x7d4>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f641 0269 	movw	r2, #6249	; 0x1869
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d92e      	bls.n	8000e14 <HAL_UART_RxCpltCallback+0x7c4>
			cadence /= 2;
 8000db6:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <HAL_UART_RxCpltCallback+0x7d4>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	085b      	lsrs	r3, r3, #1
 8000dbc:	4a19      	ldr	r2, [pc, #100]	; (8000e24 <HAL_UART_RxCpltCallback+0x7d4>)
 8000dbe:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000dc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <HAL_UART_RxCpltCallback+0x7d4>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000dca:	e023      	b.n	8000e14 <HAL_UART_RxCpltCallback+0x7c4>
	}
	case 0x1F: {
		printf("Exit STOP mode\n");
 8000dcc:	4816      	ldr	r0, [pc, #88]	; (8000e28 <HAL_UART_RxCpltCallback+0x7d8>)
 8000dce:	f013 fe53 	bl	8014a78 <puts>
		// TODO: Exit stop mode
		break;
 8000dd2:	e020      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000dd4:	4815      	ldr	r0, [pc, #84]	; (8000e2c <HAL_UART_RxCpltCallback+0x7dc>)
 8000dd6:	f013 fe4f 	bl	8014a78 <puts>
		// TODO: Enter stop mode
		break;
 8000dda:	e01c      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000ddc:	4814      	ldr	r0, [pc, #80]	; (8000e30 <HAL_UART_RxCpltCallback+0x7e0>)
 8000dde:	f013 fe4b 	bl	8014a78 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <HAL_UART_RxCpltCallback+0x7e4>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f011 feb2 	bl	8012b50 <xTaskResumeFromISR>
		break;
 8000dec:	e013      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000dee:	4812      	ldr	r0, [pc, #72]	; (8000e38 <HAL_UART_RxCpltCallback+0x7e8>)
 8000df0:	f013 fe42 	bl	8014a78 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <HAL_UART_RxCpltCallback+0x7ec>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f011 fea9 	bl	8012b50 <xTaskResumeFromISR>
		break;
 8000dfe:	e00a      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	default:{
		printf("Unknown Command\n");
 8000e00:	480f      	ldr	r0, [pc, #60]	; (8000e40 <HAL_UART_RxCpltCallback+0x7f0>)
 8000e02:	f013 fe39 	bl	8014a78 <puts>
		break;
 8000e06:	e006      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
		break;
 8000e08:	bf00      	nop
 8000e0a:	e004      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
		break;
 8000e0c:	bf00      	nop
 8000e0e:	e002      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
		break;
 8000e10:	bf00      	nop
 8000e12:	e000      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
		break;
 8000e14:	bf00      	nop
	}
	}
}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	080153b4 	.word	0x080153b4
 8000e24:	24000000 	.word	0x24000000
 8000e28:	080153c0 	.word	0x080153c0
 8000e2c:	080153d0 	.word	0x080153d0
 8000e30:	080153e0 	.word	0x080153e0
 8000e34:	24000670 	.word	0x24000670
 8000e38:	080153ec 	.word	0x080153ec
 8000e3c:	240008d0 	.word	0x240008d0
 8000e40:	080153f8 	.word	0x080153f8

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e48:	f002 fb6a 	bl	8003520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4c:	f000 f89e 	bl	8000f8c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e50:	f000 f94e 	bl	80010f0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e54:	f000 fea0 	bl	8001b98 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e58:	f000 fe6e 	bl	8001b38 <MX_DMA_Init>
  MX_TIM3_Init();
 8000e5c:	f000 fdd2 	bl	8001a04 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000e60:	f000 fe1e 	bl	8001aa0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000e64:	f000 fb5a 	bl	800151c <MX_I2C1_Init>
  MX_SPI2_Init();
 8000e68:	f000 fc50 	bl	800170c <MX_SPI2_Init>
  MX_TIM2_Init();
 8000e6c:	f000 fd54 	bl	8001918 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000e70:	f000 fca4 	bl	80017bc <MX_TIM1_Init>
  MX_ADC3_Init();
 8000e74:	f000 fa8e 	bl	8001394 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000e78:	f000 f96a 	bl	8001150 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000e7c:	f000 fb1c 	bl	80014b8 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000e80:	f000 fbec 	bl	800165c <MX_SPI1_Init>
  MX_RTC_Init();
 8000e84:	f000 fb8c 	bl	80015a0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	if (!handshake())
 8000e88:	f000 ff00 	bl	8001c8c <handshake>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d101      	bne.n	8000e96 <main+0x52>
	{
		Error_Handler();
 8000e92:	f001 fc69 	bl	8002768 <Error_Handler>
	}


	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000e96:	2100      	movs	r1, #0
 8000e98:	4825      	ldr	r0, [pc, #148]	; (8000f30 <main+0xec>)
 8000e9a:	f00c f957 	bl	800d14c <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4824      	ldr	r0, [pc, #144]	; (8000f34 <main+0xf0>)
 8000ea2:	f00c f953 	bl	800d14c <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4823      	ldr	r0, [pc, #140]	; (8000f38 <main+0xf4>)
 8000eaa:	f00c f94f 	bl	800d14c <HAL_TIM_OC_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000eae:	f010 f9ed 	bl	801128c <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000eb2:	4a22      	ldr	r2, [pc, #136]	; (8000f3c <main+0xf8>)
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4822      	ldr	r0, [pc, #136]	; (8000f40 <main+0xfc>)
 8000eb8:	f010 fa32 	bl	8011320 <osThreadNew>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	4a21      	ldr	r2, [pc, #132]	; (8000f44 <main+0x100>)
 8000ec0:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000ec2:	4a21      	ldr	r2, [pc, #132]	; (8000f48 <main+0x104>)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4821      	ldr	r0, [pc, #132]	; (8000f4c <main+0x108>)
 8000ec8:	f010 fa2a 	bl	8011320 <osThreadNew>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	4a20      	ldr	r2, [pc, #128]	; (8000f50 <main+0x10c>)
 8000ed0:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000ed2:	4a20      	ldr	r2, [pc, #128]	; (8000f54 <main+0x110>)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4820      	ldr	r0, [pc, #128]	; (8000f58 <main+0x114>)
 8000ed8:	f010 fa22 	bl	8011320 <osThreadNew>
 8000edc:	4603      	mov	r3, r0
 8000ede:	4a1f      	ldr	r2, [pc, #124]	; (8000f5c <main+0x118>)
 8000ee0:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000ee2:	4a1f      	ldr	r2, [pc, #124]	; (8000f60 <main+0x11c>)
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	481f      	ldr	r0, [pc, #124]	; (8000f64 <main+0x120>)
 8000ee8:	f010 fa1a 	bl	8011320 <osThreadNew>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4a1e      	ldr	r2, [pc, #120]	; (8000f68 <main+0x124>)
 8000ef0:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8000ef2:	4a1e      	ldr	r2, [pc, #120]	; (8000f6c <main+0x128>)
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	481e      	ldr	r0, [pc, #120]	; (8000f70 <main+0x12c>)
 8000ef8:	f010 fa12 	bl	8011320 <osThreadNew>
 8000efc:	4603      	mov	r3, r0
 8000efe:	4a1d      	ldr	r2, [pc, #116]	; (8000f74 <main+0x130>)
 8000f00:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8000f02:	4a1d      	ldr	r2, [pc, #116]	; (8000f78 <main+0x134>)
 8000f04:	2100      	movs	r1, #0
 8000f06:	481d      	ldr	r0, [pc, #116]	; (8000f7c <main+0x138>)
 8000f08:	f010 fa0a 	bl	8011320 <osThreadNew>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4a1c      	ldr	r2, [pc, #112]	; (8000f80 <main+0x13c>)
 8000f10:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8000f12:	2000      	movs	r0, #0
 8000f14:	f010 faf2 	bl	80114fc <osEventFlagsNew>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a1a      	ldr	r2, [pc, #104]	; (8000f84 <main+0x140>)
 8000f1c:	6013      	str	r3, [r2, #0]
	system_setup();
 8000f1e:	f000 ff43 	bl	8001da8 <system_setup>
	printf("Starting kernal...\n");
 8000f22:	4819      	ldr	r0, [pc, #100]	; (8000f88 <main+0x144>)
 8000f24:	f013 fda8 	bl	8014a78 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f28:	f010 f9d4 	bl	80112d4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000f2c:	e7fe      	b.n	8000f2c <main+0xe8>
 8000f2e:	bf00      	nop
 8000f30:	240004e8 	.word	0x240004e8
 8000f34:	24000534 	.word	0x24000534
 8000f38:	24000580 	.word	0x24000580
 8000f3c:	08015454 	.word	0x08015454
 8000f40:	080024c1 	.word	0x080024c1
 8000f44:	24000660 	.word	0x24000660
 8000f48:	08015478 	.word	0x08015478
 8000f4c:	08002519 	.word	0x08002519
 8000f50:	24000664 	.word	0x24000664
 8000f54:	0801549c 	.word	0x0801549c
 8000f58:	08002575 	.word	0x08002575
 8000f5c:	24000668 	.word	0x24000668
 8000f60:	080154c0 	.word	0x080154c0
 8000f64:	080025d1 	.word	0x080025d1
 8000f68:	2400066c 	.word	0x2400066c
 8000f6c:	080154e4 	.word	0x080154e4
 8000f70:	080025f5 	.word	0x080025f5
 8000f74:	24000670 	.word	0x24000670
 8000f78:	08015508 	.word	0x08015508
 8000f7c:	0800269d 	.word	0x0800269d
 8000f80:	240008d0 	.word	0x240008d0
 8000f84:	24000b3c 	.word	0x24000b3c
 8000f88:	08015408 	.word	0x08015408

08000f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b09e      	sub	sp, #120	; 0x78
 8000f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f96:	224c      	movs	r2, #76	; 0x4c
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f013 fc16 	bl	80147cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	2220      	movs	r2, #32
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f013 fc0f 	bl	80147cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000fae:	2002      	movs	r0, #2
 8000fb0:	f007 fda4 	bl	8008afc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	4b4a      	ldr	r3, [pc, #296]	; (80010e4 <SystemClock_Config+0x158>)
 8000fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fbc:	4a49      	ldr	r2, [pc, #292]	; (80010e4 <SystemClock_Config+0x158>)
 8000fbe:	f023 0301 	bic.w	r3, r3, #1
 8000fc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000fc4:	4b47      	ldr	r3, [pc, #284]	; (80010e4 <SystemClock_Config+0x158>)
 8000fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	4b46      	ldr	r3, [pc, #280]	; (80010e8 <SystemClock_Config+0x15c>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	4a45      	ldr	r2, [pc, #276]	; (80010e8 <SystemClock_Config+0x15c>)
 8000fd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fd8:	6193      	str	r3, [r2, #24]
 8000fda:	4b43      	ldr	r3, [pc, #268]	; (80010e8 <SystemClock_Config+0x15c>)
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fe6:	bf00      	nop
 8000fe8:	4b3f      	ldr	r3, [pc, #252]	; (80010e8 <SystemClock_Config+0x15c>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ff4:	d1f8      	bne.n	8000fe8 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	4b3d      	ldr	r3, [pc, #244]	; (80010ec <SystemClock_Config+0x160>)
 8000ff8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ffc:	4a3b      	ldr	r2, [pc, #236]	; (80010ec <SystemClock_Config+0x160>)
 8000ffe:	f043 0302 	orr.w	r3, r3, #2
 8001002:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001006:	4b39      	ldr	r3, [pc, #228]	; (80010ec <SystemClock_Config+0x160>)
 8001008:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001014:	2300      	movs	r3, #0
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <SystemClock_Config+0x15c>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	4a32      	ldr	r2, [pc, #200]	; (80010e8 <SystemClock_Config+0x15c>)
 800101e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001022:	6193      	str	r3, [r2, #24]
 8001024:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <SystemClock_Config+0x15c>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	4b2d      	ldr	r3, [pc, #180]	; (80010e4 <SystemClock_Config+0x158>)
 8001030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001032:	4a2c      	ldr	r2, [pc, #176]	; (80010e4 <SystemClock_Config+0x158>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	62d3      	str	r3, [r2, #44]	; 0x2c
 800103a:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <SystemClock_Config+0x158>)
 800103c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001046:	bf00      	nop
 8001048:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <SystemClock_Config+0x15c>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001054:	d1f8      	bne.n	8001048 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001056:	230a      	movs	r3, #10
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800105a:	2301      	movs	r3, #1
 800105c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800105e:	2340      	movs	r3, #64	; 0x40
 8001060:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001062:	2301      	movs	r3, #1
 8001064:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001066:	2302      	movs	r3, #2
 8001068:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800106a:	2300      	movs	r3, #0
 800106c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800106e:	2304      	movs	r3, #4
 8001070:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001072:	233c      	movs	r3, #60	; 0x3c
 8001074:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001076:	2302      	movs	r3, #2
 8001078:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 800107a:	2314      	movs	r3, #20
 800107c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800107e:	2302      	movs	r3, #2
 8001080:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001082:	230c      	movs	r3, #12
 8001084:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001086:	2300      	movs	r3, #0
 8001088:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001092:	4618      	mov	r0, r3
 8001094:	f007 fd6c 	bl	8008b70 <HAL_RCC_OscConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0x116>
  {
    Error_Handler();
 800109e:	f001 fb63 	bl	8002768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a2:	233f      	movs	r3, #63	; 0x3f
 80010a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a6:	2303      	movs	r3, #3
 80010a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80010ae:	2308      	movs	r3, #8
 80010b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010b2:	2340      	movs	r3, #64	; 0x40
 80010b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010b6:	2340      	movs	r3, #64	; 0x40
 80010b8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010c0:	2340      	movs	r3, #64	; 0x40
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	2104      	movs	r1, #4
 80010ca:	4618      	mov	r0, r3
 80010cc:	f008 f9aa 	bl	8009424 <HAL_RCC_ClockConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0x14e>
  {
    Error_Handler();
 80010d6:	f001 fb47 	bl	8002768 <Error_Handler>
  }
}
 80010da:	bf00      	nop
 80010dc:	3778      	adds	r7, #120	; 0x78
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	58000400 	.word	0x58000400
 80010e8:	58024800 	.word	0x58024800
 80010ec:	58024400 	.word	0x58024400

080010f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b0b0      	sub	sp, #192	; 0xc0
 80010f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f6:	463b      	mov	r3, r7
 80010f8:	22c0      	movs	r2, #192	; 0xc0
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f013 fb65 	bl	80147cc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001102:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001106:	f04f 0300 	mov.w	r3, #0
 800110a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800110e:	2304      	movs	r3, #4
 8001110:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001112:	2309      	movs	r3, #9
 8001114:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001116:	2304      	movs	r3, #4
 8001118:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800111a:	2302      	movs	r3, #2
 800111c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800111e:	2302      	movs	r3, #2
 8001120:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001122:	23c0      	movs	r3, #192	; 0xc0
 8001124:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001126:	2320      	movs	r3, #32
 8001128:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 800112a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001130:	2300      	movs	r3, #0
 8001132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001136:	463b      	mov	r3, r7
 8001138:	4618      	mov	r0, r3
 800113a:	f008 fd41 	bl	8009bc0 <HAL_RCCEx_PeriphCLKConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001144:	f001 fb10 	bl	8002768 <Error_Handler>
  }
}
 8001148:	bf00      	nop
 800114a:	37c0      	adds	r7, #192	; 0xc0
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001162:	463b      	mov	r3, r7
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
 8001170:	615a      	str	r2, [r3, #20]
 8001172:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001174:	4b7a      	ldr	r3, [pc, #488]	; (8001360 <MX_ADC1_Init+0x210>)
 8001176:	4a7b      	ldr	r2, [pc, #492]	; (8001364 <MX_ADC1_Init+0x214>)
 8001178:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800117a:	4b79      	ldr	r3, [pc, #484]	; (8001360 <MX_ADC1_Init+0x210>)
 800117c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001180:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001182:	4b77      	ldr	r3, [pc, #476]	; (8001360 <MX_ADC1_Init+0x210>)
 8001184:	2208      	movs	r2, #8
 8001186:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001188:	4b75      	ldr	r3, [pc, #468]	; (8001360 <MX_ADC1_Init+0x210>)
 800118a:	2201      	movs	r2, #1
 800118c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800118e:	4b74      	ldr	r3, [pc, #464]	; (8001360 <MX_ADC1_Init+0x210>)
 8001190:	2204      	movs	r2, #4
 8001192:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001194:	4b72      	ldr	r3, [pc, #456]	; (8001360 <MX_ADC1_Init+0x210>)
 8001196:	2200      	movs	r2, #0
 8001198:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800119a:	4b71      	ldr	r3, [pc, #452]	; (8001360 <MX_ADC1_Init+0x210>)
 800119c:	2201      	movs	r2, #1
 800119e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 80011a0:	4b6f      	ldr	r3, [pc, #444]	; (8001360 <MX_ADC1_Init+0x210>)
 80011a2:	220b      	movs	r2, #11
 80011a4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011a6:	4b6e      	ldr	r3, [pc, #440]	; (8001360 <MX_ADC1_Init+0x210>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ac:	4b6c      	ldr	r3, [pc, #432]	; (8001360 <MX_ADC1_Init+0x210>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b2:	4b6b      	ldr	r3, [pc, #428]	; (8001360 <MX_ADC1_Init+0x210>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80011b8:	4b69      	ldr	r3, [pc, #420]	; (8001360 <MX_ADC1_Init+0x210>)
 80011ba:	2203      	movs	r2, #3
 80011bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011be:	4b68      	ldr	r3, [pc, #416]	; (8001360 <MX_ADC1_Init+0x210>)
 80011c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80011c6:	4b66      	ldr	r3, [pc, #408]	; (8001360 <MX_ADC1_Init+0x210>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011cc:	4b64      	ldr	r3, [pc, #400]	; (8001360 <MX_ADC1_Init+0x210>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d4:	4862      	ldr	r0, [pc, #392]	; (8001360 <MX_ADC1_Init+0x210>)
 80011d6:	f002 fc2f 	bl	8003a38 <HAL_ADC_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80011e0:	f001 fac2 	bl	8002768 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4619      	mov	r1, r3
 80011ee:	485c      	ldr	r0, [pc, #368]	; (8001360 <MX_ADC1_Init+0x210>)
 80011f0:	f003 fd4a 	bl	8004c88 <HAL_ADCEx_MultiModeConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80011fa:	f001 fab5 	bl	8002768 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011fe:	4b5a      	ldr	r3, [pc, #360]	; (8001368 <MX_ADC1_Init+0x218>)
 8001200:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001202:	2306      	movs	r3, #6
 8001204:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001206:	2307      	movs	r3, #7
 8001208:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800120a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800120e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001210:	2304      	movs	r3, #4
 8001212:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800121c:	463b      	mov	r3, r7
 800121e:	4619      	mov	r1, r3
 8001220:	484f      	ldr	r0, [pc, #316]	; (8001360 <MX_ADC1_Init+0x210>)
 8001222:	f002 fe8d 	bl	8003f40 <HAL_ADC_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800122c:	f001 fa9c 	bl	8002768 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001230:	4b4e      	ldr	r3, [pc, #312]	; (800136c <MX_ADC1_Init+0x21c>)
 8001232:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001234:	230c      	movs	r3, #12
 8001236:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	4619      	mov	r1, r3
 800123c:	4848      	ldr	r0, [pc, #288]	; (8001360 <MX_ADC1_Init+0x210>)
 800123e:	f002 fe7f 	bl	8003f40 <HAL_ADC_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001248:	f001 fa8e 	bl	8002768 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800124c:	4b48      	ldr	r3, [pc, #288]	; (8001370 <MX_ADC1_Init+0x220>)
 800124e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001250:	2312      	movs	r3, #18
 8001252:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001254:	463b      	mov	r3, r7
 8001256:	4619      	mov	r1, r3
 8001258:	4841      	ldr	r0, [pc, #260]	; (8001360 <MX_ADC1_Init+0x210>)
 800125a:	f002 fe71 	bl	8003f40 <HAL_ADC_ConfigChannel>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001264:	f001 fa80 	bl	8002768 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001268:	4b42      	ldr	r3, [pc, #264]	; (8001374 <MX_ADC1_Init+0x224>)
 800126a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800126c:	2318      	movs	r3, #24
 800126e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001270:	463b      	mov	r3, r7
 8001272:	4619      	mov	r1, r3
 8001274:	483a      	ldr	r0, [pc, #232]	; (8001360 <MX_ADC1_Init+0x210>)
 8001276:	f002 fe63 	bl	8003f40 <HAL_ADC_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001280:	f001 fa72 	bl	8002768 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001284:	4b3c      	ldr	r3, [pc, #240]	; (8001378 <MX_ADC1_Init+0x228>)
 8001286:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001288:	f44f 7380 	mov.w	r3, #256	; 0x100
 800128c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800128e:	463b      	mov	r3, r7
 8001290:	4619      	mov	r1, r3
 8001292:	4833      	ldr	r0, [pc, #204]	; (8001360 <MX_ADC1_Init+0x210>)
 8001294:	f002 fe54 	bl	8003f40 <HAL_ADC_ConfigChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 800129e:	f001 fa63 	bl	8002768 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012a2:	4b36      	ldr	r3, [pc, #216]	; (800137c <MX_ADC1_Init+0x22c>)
 80012a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80012a6:	f44f 7383 	mov.w	r3, #262	; 0x106
 80012aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ac:	463b      	mov	r3, r7
 80012ae:	4619      	mov	r1, r3
 80012b0:	482b      	ldr	r0, [pc, #172]	; (8001360 <MX_ADC1_Init+0x210>)
 80012b2:	f002 fe45 	bl	8003f40 <HAL_ADC_ConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80012bc:	f001 fa54 	bl	8002768 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012c0:	4b2f      	ldr	r3, [pc, #188]	; (8001380 <MX_ADC1_Init+0x230>)
 80012c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80012c4:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80012c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ca:	463b      	mov	r3, r7
 80012cc:	4619      	mov	r1, r3
 80012ce:	4824      	ldr	r0, [pc, #144]	; (8001360 <MX_ADC1_Init+0x210>)
 80012d0:	f002 fe36 	bl	8003f40 <HAL_ADC_ConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80012da:	f001 fa45 	bl	8002768 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012de:	4b29      	ldr	r3, [pc, #164]	; (8001384 <MX_ADC1_Init+0x234>)
 80012e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80012e2:	f44f 7389 	mov.w	r3, #274	; 0x112
 80012e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	4619      	mov	r1, r3
 80012ec:	481c      	ldr	r0, [pc, #112]	; (8001360 <MX_ADC1_Init+0x210>)
 80012ee:	f002 fe27 	bl	8003f40 <HAL_ADC_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 80012f8:	f001 fa36 	bl	8002768 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <MX_ADC1_Init+0x238>)
 80012fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001300:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001304:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001306:	463b      	mov	r3, r7
 8001308:	4619      	mov	r1, r3
 800130a:	4815      	ldr	r0, [pc, #84]	; (8001360 <MX_ADC1_Init+0x210>)
 800130c:	f002 fe18 	bl	8003f40 <HAL_ADC_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001316:	f001 fa27 	bl	8002768 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800131a:	4b1c      	ldr	r3, [pc, #112]	; (800138c <MX_ADC1_Init+0x23c>)
 800131c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800131e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001322:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001324:	463b      	mov	r3, r7
 8001326:	4619      	mov	r1, r3
 8001328:	480d      	ldr	r0, [pc, #52]	; (8001360 <MX_ADC1_Init+0x210>)
 800132a:	f002 fe09 	bl	8003f40 <HAL_ADC_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001334:	f001 fa18 	bl	8002768 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <MX_ADC1_Init+0x240>)
 800133a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800133c:	f240 2306 	movw	r3, #518	; 0x206
 8001340:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001342:	463b      	mov	r3, r7
 8001344:	4619      	mov	r1, r3
 8001346:	4806      	ldr	r0, [pc, #24]	; (8001360 <MX_ADC1_Init+0x210>)
 8001348:	f002 fdfa 	bl	8003f40 <HAL_ADC_ConfigChannel>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 8001352:	f001 fa09 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	3728      	adds	r7, #40	; 0x28
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2400011c 	.word	0x2400011c
 8001364:	40022000 	.word	0x40022000
 8001368:	0c900008 	.word	0x0c900008
 800136c:	10c00010 	.word	0x10c00010
 8001370:	14f00020 	.word	0x14f00020
 8001374:	1d500080 	.word	0x1d500080
 8001378:	21800100 	.word	0x21800100
 800137c:	25b00200 	.word	0x25b00200
 8001380:	2a000400 	.word	0x2a000400
 8001384:	2e300800 	.word	0x2e300800
 8001388:	3ac04000 	.word	0x3ac04000
 800138c:	3ef08000 	.word	0x3ef08000
 8001390:	47520000 	.word	0x47520000

08001394 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
 80013a8:	615a      	str	r2, [r3, #20]
 80013aa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013ac:	4b3d      	ldr	r3, [pc, #244]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013ae:	4a3e      	ldr	r2, [pc, #248]	; (80014a8 <MX_ADC3_Init+0x114>)
 80013b0:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013b2:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013b4:	2208      	movs	r2, #8
 80013b6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013b8:	4b3a      	ldr	r3, [pc, #232]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013be:	4b39      	ldr	r3, [pc, #228]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013c0:	2204      	movs	r2, #4
 80013c2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80013c4:	4b37      	ldr	r3, [pc, #220]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80013ca:	4b36      	ldr	r3, [pc, #216]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80013d0:	4b34      	ldr	r3, [pc, #208]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013d2:	2204      	movs	r2, #4
 80013d4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013d6:	4b33      	ldr	r3, [pc, #204]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013d8:	2200      	movs	r2, #0
 80013da:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013dc:	4b31      	ldr	r3, [pc, #196]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013de:	2200      	movs	r2, #0
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013e2:	4b30      	ldr	r3, [pc, #192]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80013e8:	4b2e      	ldr	r3, [pc, #184]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013ea:	2203      	movs	r2, #3
 80013ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013ee:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013f4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80013f6:	4b2b      	ldr	r3, [pc, #172]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80013fc:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001404:	4827      	ldr	r0, [pc, #156]	; (80014a4 <MX_ADC3_Init+0x110>)
 8001406:	f002 fb17 	bl	8003a38 <HAL_ADC_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001410:	f001 f9aa 	bl	8002768 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001414:	4b25      	ldr	r3, [pc, #148]	; (80014ac <MX_ADC3_Init+0x118>)
 8001416:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001418:	2306      	movs	r3, #6
 800141a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800141c:	2307      	movs	r3, #7
 800141e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001420:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001424:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001426:	2304      	movs	r3, #4
 8001428:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	4619      	mov	r1, r3
 8001436:	481b      	ldr	r0, [pc, #108]	; (80014a4 <MX_ADC3_Init+0x110>)
 8001438:	f002 fd82 	bl	8003f40 <HAL_ADC_ConfigChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001442:	f001 f991 	bl	8002768 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <MX_ADC3_Init+0x11c>)
 8001448:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800144a:	230c      	movs	r3, #12
 800144c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	4619      	mov	r1, r3
 8001452:	4814      	ldr	r0, [pc, #80]	; (80014a4 <MX_ADC3_Init+0x110>)
 8001454:	f002 fd74 	bl	8003f40 <HAL_ADC_ConfigChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800145e:	f001 f983 	bl	8002768 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001462:	2301      	movs	r3, #1
 8001464:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001466:	2312      	movs	r3, #18
 8001468:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	4619      	mov	r1, r3
 800146e:	480d      	ldr	r0, [pc, #52]	; (80014a4 <MX_ADC3_Init+0x110>)
 8001470:	f002 fd66 	bl	8003f40 <HAL_ADC_ConfigChannel>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800147a:	f001 f975 	bl	8002768 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <MX_ADC3_Init+0x120>)
 8001480:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001482:	2318      	movs	r3, #24
 8001484:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	4619      	mov	r1, r3
 800148a:	4806      	ldr	r0, [pc, #24]	; (80014a4 <MX_ADC3_Init+0x110>)
 800148c:	f002 fd58 	bl	8003f40 <HAL_ADC_ConfigChannel>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001496:	f001 f967 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	3720      	adds	r7, #32
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	24000180 	.word	0x24000180
 80014a8:	58026000 	.word	0x58026000
 80014ac:	cb840000 	.word	0xcb840000
 80014b0:	cfb80000 	.word	0xcfb80000
 80014b4:	04300002 	.word	0x04300002

080014b8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2224      	movs	r2, #36	; 0x24
 80014c2:	2100      	movs	r1, #0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f013 f981 	bl	80147cc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <MX_DAC1_Init+0x5c>)
 80014cc:	4a12      	ldr	r2, [pc, #72]	; (8001518 <MX_DAC1_Init+0x60>)
 80014ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014d0:	4810      	ldr	r0, [pc, #64]	; (8001514 <MX_DAC1_Init+0x5c>)
 80014d2:	f003 fd97 	bl	8005004 <HAL_DAC_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80014dc:	f001 f944 	bl	8002768 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80014e4:	230a      	movs	r3, #10
 80014e6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80014ec:	2301      	movs	r3, #1
 80014ee:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2200      	movs	r2, #0
 80014f8:	4619      	mov	r1, r3
 80014fa:	4806      	ldr	r0, [pc, #24]	; (8001514 <MX_DAC1_Init+0x5c>)
 80014fc:	f003 ffb2 	bl	8005464 <HAL_DAC_ConfigChannel>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001506:	f001 f92f 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	3728      	adds	r7, #40	; 0x28
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	240002d4 	.word	0x240002d4
 8001518:	40007400 	.word	0x40007400

0800151c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001520:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <MX_I2C1_Init+0x78>)
 8001522:	4a1d      	ldr	r2, [pc, #116]	; (8001598 <MX_I2C1_Init+0x7c>)
 8001524:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0050174F;
 8001526:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <MX_I2C1_Init+0x78>)
 8001528:	4a1c      	ldr	r2, [pc, #112]	; (800159c <MX_I2C1_Init+0x80>)
 800152a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <MX_I2C1_Init+0x78>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001532:	4b18      	ldr	r3, [pc, #96]	; (8001594 <MX_I2C1_Init+0x78>)
 8001534:	2201      	movs	r2, #1
 8001536:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001538:	4b16      	ldr	r3, [pc, #88]	; (8001594 <MX_I2C1_Init+0x78>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <MX_I2C1_Init+0x78>)
 8001540:	2200      	movs	r2, #0
 8001542:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001544:	4b13      	ldr	r3, [pc, #76]	; (8001594 <MX_I2C1_Init+0x78>)
 8001546:	2200      	movs	r2, #0
 8001548:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <MX_I2C1_Init+0x78>)
 800154c:	2200      	movs	r2, #0
 800154e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001550:	4b10      	ldr	r3, [pc, #64]	; (8001594 <MX_I2C1_Init+0x78>)
 8001552:	2200      	movs	r2, #0
 8001554:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001556:	480f      	ldr	r0, [pc, #60]	; (8001594 <MX_I2C1_Init+0x78>)
 8001558:	f007 f978 	bl	800884c <HAL_I2C_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001562:	f001 f901 	bl	8002768 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001566:	2100      	movs	r1, #0
 8001568:	480a      	ldr	r0, [pc, #40]	; (8001594 <MX_I2C1_Init+0x78>)
 800156a:	f007 fa0b 	bl	8008984 <HAL_I2CEx_ConfigAnalogFilter>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001574:	f001 f8f8 	bl	8002768 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001578:	2100      	movs	r1, #0
 800157a:	4806      	ldr	r0, [pc, #24]	; (8001594 <MX_I2C1_Init+0x78>)
 800157c:	f007 fa4d 	bl	8008a1a <HAL_I2CEx_ConfigDigitalFilter>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001586:	f001 f8ef 	bl	8002768 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800158a:	2001      	movs	r0, #1
 800158c:	f007 fa92 	bl	8008ab4 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	24000360 	.word	0x24000360
 8001598:	40005400 	.word	0x40005400
 800159c:	0050174f 	.word	0x0050174f

080015a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80015b4:	2300      	movs	r3, #0
 80015b6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015b8:	4b26      	ldr	r3, [pc, #152]	; (8001654 <MX_RTC_Init+0xb4>)
 80015ba:	4a27      	ldr	r2, [pc, #156]	; (8001658 <MX_RTC_Init+0xb8>)
 80015bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015be:	4b25      	ldr	r3, [pc, #148]	; (8001654 <MX_RTC_Init+0xb4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 32;
 80015c4:	4b23      	ldr	r3, [pc, #140]	; (8001654 <MX_RTC_Init+0xb4>)
 80015c6:	2220      	movs	r2, #32
 80015c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1000;
 80015ca:	4b22      	ldr	r3, [pc, #136]	; (8001654 <MX_RTC_Init+0xb4>)
 80015cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015d0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015d2:	4b20      	ldr	r3, [pc, #128]	; (8001654 <MX_RTC_Init+0xb4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015d8:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <MX_RTC_Init+0xb4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015de:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <MX_RTC_Init+0xb4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <MX_RTC_Init+0xb4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015ea:	481a      	ldr	r0, [pc, #104]	; (8001654 <MX_RTC_Init+0xb4>)
 80015ec:	f00a ffe6 	bl	800c5bc <HAL_RTC_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80015f6:	f001 f8b7 	bl	8002768 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80015fe:	2300      	movs	r3, #0
 8001600:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001602:	2300      	movs	r3, #0
 8001604:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	2201      	movs	r2, #1
 8001612:	4619      	mov	r1, r3
 8001614:	480f      	ldr	r0, [pc, #60]	; (8001654 <MX_RTC_Init+0xb4>)
 8001616:	f00b f853 	bl	800c6c0 <HAL_RTC_SetTime>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001620:	f001 f8a2 	bl	8002768 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001624:	2305      	movs	r3, #5
 8001626:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8001628:	2305      	movs	r3, #5
 800162a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x31;
 800162c:	2331      	movs	r3, #49	; 0x31
 800162e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8001630:	2324      	movs	r3, #36	; 0x24
 8001632:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001634:	463b      	mov	r3, r7
 8001636:	2201      	movs	r2, #1
 8001638:	4619      	mov	r1, r3
 800163a:	4806      	ldr	r0, [pc, #24]	; (8001654 <MX_RTC_Init+0xb4>)
 800163c:	f00b f93a 	bl	800c8b4 <HAL_RTC_SetDate>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001646:	f001 f88f 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	240003b4 	.word	0x240003b4
 8001658:	58004000 	.word	0x58004000

0800165c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001660:	4b28      	ldr	r3, [pc, #160]	; (8001704 <MX_SPI1_Init+0xa8>)
 8001662:	4a29      	ldr	r2, [pc, #164]	; (8001708 <MX_SPI1_Init+0xac>)
 8001664:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001666:	4b27      	ldr	r3, [pc, #156]	; (8001704 <MX_SPI1_Init+0xa8>)
 8001668:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800166c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800166e:	4b25      	ldr	r3, [pc, #148]	; (8001704 <MX_SPI1_Init+0xa8>)
 8001670:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001674:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001676:	4b23      	ldr	r3, [pc, #140]	; (8001704 <MX_SPI1_Init+0xa8>)
 8001678:	220f      	movs	r2, #15
 800167a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800167c:	4b21      	ldr	r3, [pc, #132]	; (8001704 <MX_SPI1_Init+0xa8>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <MX_SPI1_Init+0xa8>)
 8001684:	2200      	movs	r2, #0
 8001686:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001688:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <MX_SPI1_Init+0xa8>)
 800168a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800168e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001690:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <MX_SPI1_Init+0xa8>)
 8001692:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001696:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001698:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <MX_SPI1_Init+0xa8>)
 800169a:	2200      	movs	r2, #0
 800169c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800169e:	4b19      	ldr	r3, [pc, #100]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a4:	4b17      	ldr	r3, [pc, #92]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80016aa:	4b16      	ldr	r3, [pc, #88]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016b6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016f0:	f00b fa86 	bl	800cc00 <HAL_SPI_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80016fa:	f001 f835 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	240003d8 	.word	0x240003d8
 8001708:	40013000 	.word	0x40013000

0800170c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001710:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001712:	4a29      	ldr	r2, [pc, #164]	; (80017b8 <MX_SPI2_Init+0xac>)
 8001714:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001716:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001718:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800171c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800171e:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001720:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001724:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001728:	220f      	movs	r2, #15
 800172a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800172c:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <MX_SPI2_Init+0xa8>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001732:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001734:	2200      	movs	r2, #0
 8001736:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001738:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <MX_SPI2_Init+0xa8>)
 800173a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800173e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001740:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001742:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001746:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001748:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <MX_SPI2_Init+0xa8>)
 800174a:	2200      	movs	r2, #0
 800174c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800174e:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001750:	2200      	movs	r2, #0
 8001752:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001756:	2200      	movs	r2, #0
 8001758:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800175a:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <MX_SPI2_Init+0xa8>)
 800175c:	2200      	movs	r2, #0
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001762:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001766:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <MX_SPI2_Init+0xa8>)
 800176a:	2200      	movs	r2, #0
 800176c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001770:	2200      	movs	r2, #0
 8001772:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001776:	2200      	movs	r2, #0
 8001778:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_SPI2_Init+0xa8>)
 800177c:	2200      	movs	r2, #0
 800177e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001782:	2200      	movs	r2, #0
 8001784:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001788:	2200      	movs	r2, #0
 800178a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_SPI2_Init+0xa8>)
 800178e:	2200      	movs	r2, #0
 8001790:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001794:	2200      	movs	r2, #0
 8001796:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_SPI2_Init+0xa8>)
 800179a:	2200      	movs	r2, #0
 800179c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_SPI2_Init+0xa8>)
 80017a0:	f00b fa2e 	bl	800cc00 <HAL_SPI_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80017aa:	f000 ffdd 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	24000460 	.word	0x24000460
 80017b8:	40003800 	.word	0x40003800

080017bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b09a      	sub	sp, #104	; 0x68
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
 80017ec:	615a      	str	r2, [r3, #20]
 80017ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	222c      	movs	r2, #44	; 0x2c
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f012 ffe8 	bl	80147cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017fc:	4b44      	ldr	r3, [pc, #272]	; (8001910 <MX_TIM1_Init+0x154>)
 80017fe:	4a45      	ldr	r2, [pc, #276]	; (8001914 <MX_TIM1_Init+0x158>)
 8001800:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 8001802:	4b43      	ldr	r3, [pc, #268]	; (8001910 <MX_TIM1_Init+0x154>)
 8001804:	22ef      	movs	r2, #239	; 0xef
 8001806:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001808:	4b41      	ldr	r3, [pc, #260]	; (8001910 <MX_TIM1_Init+0x154>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800180e:	4b40      	ldr	r3, [pc, #256]	; (8001910 <MX_TIM1_Init+0x154>)
 8001810:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001814:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001816:	4b3e      	ldr	r3, [pc, #248]	; (8001910 <MX_TIM1_Init+0x154>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800181c:	4b3c      	ldr	r3, [pc, #240]	; (8001910 <MX_TIM1_Init+0x154>)
 800181e:	2200      	movs	r2, #0
 8001820:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001822:	4b3b      	ldr	r3, [pc, #236]	; (8001910 <MX_TIM1_Init+0x154>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001828:	4839      	ldr	r0, [pc, #228]	; (8001910 <MX_TIM1_Init+0x154>)
 800182a:	f00b fb28 	bl	800ce7e <HAL_TIM_Base_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001834:	f000 ff98 	bl	8002768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800183e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001842:	4619      	mov	r1, r3
 8001844:	4832      	ldr	r0, [pc, #200]	; (8001910 <MX_TIM1_Init+0x154>)
 8001846:	f00c f967 	bl	800db18 <HAL_TIM_ConfigClockSource>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001850:	f000 ff8a 	bl	8002768 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001854:	482e      	ldr	r0, [pc, #184]	; (8001910 <MX_TIM1_Init+0x154>)
 8001856:	f00b fdd3 	bl	800d400 <HAL_TIM_PWM_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001860:	f000 ff82 	bl	8002768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001864:	2300      	movs	r3, #0
 8001866:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001868:	2300      	movs	r3, #0
 800186a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186c:	2300      	movs	r3, #0
 800186e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001870:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001874:	4619      	mov	r1, r3
 8001876:	4826      	ldr	r0, [pc, #152]	; (8001910 <MX_TIM1_Init+0x154>)
 8001878:	f00c fea4 	bl	800e5c4 <HAL_TIMEx_MasterConfigSynchronization>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001882:	f000 ff71 	bl	8002768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001886:	2360      	movs	r3, #96	; 0x60
 8001888:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 800188a:	f240 13df 	movw	r3, #479	; 0x1df
 800188e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001890:	2300      	movs	r3, #0
 8001892:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001894:	2300      	movs	r3, #0
 8001896:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800189c:	2300      	movs	r3, #0
 800189e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018a0:	2300      	movs	r3, #0
 80018a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018a8:	2200      	movs	r2, #0
 80018aa:	4619      	mov	r1, r3
 80018ac:	4818      	ldr	r0, [pc, #96]	; (8001910 <MX_TIM1_Init+0x154>)
 80018ae:	f00c f81f 	bl	800d8f0 <HAL_TIM_PWM_ConfigChannel>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80018b8:	f000 ff56 	bl	8002768 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	4619      	mov	r1, r3
 80018f0:	4807      	ldr	r0, [pc, #28]	; (8001910 <MX_TIM1_Init+0x154>)
 80018f2:	f00c fef5 	bl	800e6e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80018fc:	f000 ff34 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001900:	4803      	ldr	r0, [pc, #12]	; (8001910 <MX_TIM1_Init+0x154>)
 8001902:	f001 fabf 	bl	8002e84 <HAL_TIM_MspPostInit>

}
 8001906:	bf00      	nop
 8001908:	3768      	adds	r7, #104	; 0x68
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	240004e8 	.word	0x240004e8
 8001914:	40010000 	.word	0x40010000

08001918 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08e      	sub	sp, #56	; 0x38
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800191e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001938:	463b      	mov	r3, r7
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
 8001944:	611a      	str	r2, [r3, #16]
 8001946:	615a      	str	r2, [r3, #20]
 8001948:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800194a:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <MX_TIM2_Init+0xe8>)
 800194c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001950:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8001952:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <MX_TIM2_Init+0xe8>)
 8001954:	22ef      	movs	r2, #239	; 0xef
 8001956:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001958:	4b29      	ldr	r3, [pc, #164]	; (8001a00 <MX_TIM2_Init+0xe8>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 800195e:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <MX_TIM2_Init+0xe8>)
 8001960:	f640 4234 	movw	r2, #3124	; 0xc34
 8001964:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001966:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <MX_TIM2_Init+0xe8>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800196c:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <MX_TIM2_Init+0xe8>)
 800196e:	2280      	movs	r2, #128	; 0x80
 8001970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001972:	4823      	ldr	r0, [pc, #140]	; (8001a00 <MX_TIM2_Init+0xe8>)
 8001974:	f00b fa83 	bl	800ce7e <HAL_TIM_Base_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800197e:	f000 fef3 	bl	8002768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001988:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800198c:	4619      	mov	r1, r3
 800198e:	481c      	ldr	r0, [pc, #112]	; (8001a00 <MX_TIM2_Init+0xe8>)
 8001990:	f00c f8c2 	bl	800db18 <HAL_TIM_ConfigClockSource>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800199a:	f000 fee5 	bl	8002768 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800199e:	4818      	ldr	r0, [pc, #96]	; (8001a00 <MX_TIM2_Init+0xe8>)
 80019a0:	f00b fd2e 	bl	800d400 <HAL_TIM_PWM_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019aa:	f000 fedd 	bl	8002768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019ae:	2320      	movs	r3, #32
 80019b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019b6:	f107 031c 	add.w	r3, r7, #28
 80019ba:	4619      	mov	r1, r3
 80019bc:	4810      	ldr	r0, [pc, #64]	; (8001a00 <MX_TIM2_Init+0xe8>)
 80019be:	f00c fe01 	bl	800e5c4 <HAL_TIMEx_MasterConfigSynchronization>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019c8:	f000 fece 	bl	8002768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019cc:	2360      	movs	r3, #96	; 0x60
 80019ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019dc:	463b      	mov	r3, r7
 80019de:	220c      	movs	r2, #12
 80019e0:	4619      	mov	r1, r3
 80019e2:	4807      	ldr	r0, [pc, #28]	; (8001a00 <MX_TIM2_Init+0xe8>)
 80019e4:	f00b ff84 	bl	800d8f0 <HAL_TIM_PWM_ConfigChannel>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80019ee:	f000 febb 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019f2:	4803      	ldr	r0, [pc, #12]	; (8001a00 <MX_TIM2_Init+0xe8>)
 80019f4:	f001 fa46 	bl	8002e84 <HAL_TIM_MspPostInit>

}
 80019f8:	bf00      	nop
 80019fa:	3738      	adds	r7, #56	; 0x38
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	24000534 	.word	0x24000534

08001a04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a0a:	f107 0310 	add.w	r3, r7, #16
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a22:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a24:	4a1d      	ldr	r2, [pc, #116]	; (8001a9c <MX_TIM3_Init+0x98>)
 8001a26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a2a:	22ef      	movs	r2, #239	; 0xef
 8001a2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001a34:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3c:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a48:	4813      	ldr	r0, [pc, #76]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a4a:	f00b fa18 	bl	800ce7e <HAL_TIM_Base_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a54:	f000 fe88 	bl	8002768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a5e:	f107 0310 	add.w	r3, r7, #16
 8001a62:	4619      	mov	r1, r3
 8001a64:	480c      	ldr	r0, [pc, #48]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a66:	f00c f857 	bl	800db18 <HAL_TIM_ConfigClockSource>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a70:	f000 fe7a 	bl	8002768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a74:	2300      	movs	r3, #0
 8001a76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a82:	f00c fd9f 	bl	800e5c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a8c:	f000 fe6c 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a90:	bf00      	nop
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	24000580 	.word	0x24000580
 8001a9c:	40000400 	.word	0x40000400

08001aa0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aa4:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001aa6:	4a23      	ldr	r2, [pc, #140]	; (8001b34 <MX_USART1_UART_Init+0x94>)
 8001aa8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001aaa:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001aac:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001ab0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ab8:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001abe:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aca:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad0:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ad6:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001adc:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ae8:	4811      	ldr	r0, [pc, #68]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001aea:	f00c fe95 	bl	800e818 <HAL_UART_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001af4:	f000 fe38 	bl	8002768 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001af8:	2100      	movs	r1, #0
 8001afa:	480d      	ldr	r0, [pc, #52]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001afc:	f00f fab7 	bl	801106e <HAL_UARTEx_SetTxFifoThreshold>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b06:	f000 fe2f 	bl	8002768 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4808      	ldr	r0, [pc, #32]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001b0e:	f00f faec 	bl	80110ea <HAL_UARTEx_SetRxFifoThreshold>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b18:	f000 fe26 	bl	8002768 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b1c:	4804      	ldr	r0, [pc, #16]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001b1e:	f00f fa6d 	bl	8010ffc <HAL_UARTEx_DisableFifoMode>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b28:	f000 fe1e 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	240005cc 	.word	0x240005cc
 8001b34:	40011000 	.word	0x40011000

08001b38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <MX_DMA_Init+0x5c>)
 8001b40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b44:	4a13      	ldr	r2, [pc, #76]	; (8001b94 <MX_DMA_Init+0x5c>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <MX_DMA_Init+0x5c>)
 8001b50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2105      	movs	r1, #5
 8001b60:	200b      	movs	r0, #11
 8001b62:	f003 fa27 	bl	8004fb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b66:	200b      	movs	r0, #11
 8001b68:	f003 fa3e 	bl	8004fe8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2105      	movs	r1, #5
 8001b70:	200c      	movs	r0, #12
 8001b72:	f003 fa1f 	bl	8004fb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b76:	200c      	movs	r0, #12
 8001b78:	f003 fa36 	bl	8004fe8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2105      	movs	r1, #5
 8001b80:	2010      	movs	r0, #16
 8001b82:	f003 fa17 	bl	8004fb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b86:	2010      	movs	r0, #16
 8001b88:	f003 fa2e 	bl	8004fe8 <HAL_NVIC_EnableIRQ>

}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	58024400 	.word	0x58024400

08001b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	60da      	str	r2, [r3, #12]
 8001bac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bae:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb4:	4a32      	ldr	r2, [pc, #200]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bb6:	f043 0304 	orr.w	r3, r3, #4
 8001bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bbe:	4b30      	ldr	r3, [pc, #192]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bcc:	4b2c      	ldr	r3, [pc, #176]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd2:	4a2b      	ldr	r2, [pc, #172]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bdc:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bea:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf0:	4a23      	ldr	r2, [pc, #140]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bfa:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c08:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0e:	4a1c      	ldr	r2, [pc, #112]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001c10:	f043 0302 	orr.w	r3, r3, #2
 8001c14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c26:	2200      	movs	r2, #0
 8001c28:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001c2c:	4815      	ldr	r0, [pc, #84]	; (8001c84 <MX_GPIO_Init+0xec>)
 8001c2e:	f006 fdf3 	bl	8008818 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2164      	movs	r1, #100	; 0x64
 8001c36:	4814      	ldr	r0, [pc, #80]	; (8001c88 <MX_GPIO_Init+0xf0>)
 8001c38:	f006 fdee 	bl	8008818 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c3c:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001c40:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c42:	2301      	movs	r3, #1
 8001c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4619      	mov	r1, r3
 8001c54:	480b      	ldr	r0, [pc, #44]	; (8001c84 <MX_GPIO_Init+0xec>)
 8001c56:	f006 fc17 	bl	8008488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001c5a:	2364      	movs	r3, #100	; 0x64
 8001c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4805      	ldr	r0, [pc, #20]	; (8001c88 <MX_GPIO_Init+0xf0>)
 8001c72:	f006 fc09 	bl	8008488 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c76:	bf00      	nop
 8001c78:	3728      	adds	r7, #40	; 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	58024400 	.word	0x58024400
 8001c84:	58020800 	.word	0x58020800
 8001c88:	58020400 	.word	0x58020400

08001c8c <handshake>:

// *********************************************************************************************************** HELPER FUNCTIONS


int handshake()
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b090      	sub	sp, #64	; 0x40
 8001c90:	af00      	add	r7, sp, #0
	uint8_t tx_buffer[5];
	uint8_t rx_buffer[9];
	uint8_t key;
	int allowed_tries = 10;
 8001c92:	230a      	movs	r3, #10
 8001c94:	63bb      	str	r3, [r7, #56]	; 0x38

	// Wait for 0xFF to be received
	do
	{
		HAL_UART_Receive(&huart1, rx_buffer, 9, 100);
 8001c96:	f107 011c 	add.w	r1, r7, #28
 8001c9a:	2364      	movs	r3, #100	; 0x64
 8001c9c:	2209      	movs	r2, #9
 8001c9e:	4840      	ldr	r0, [pc, #256]	; (8001da0 <handshake+0x114>)
 8001ca0:	f00c fe98 	bl	800e9d4 <HAL_UART_Receive>
		key = rx_buffer[0];
 8001ca4:	7f3b      	ldrb	r3, [r7, #28]
 8001ca6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}while(key != 0xFF);
 8001caa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001cae:	2bff      	cmp	r3, #255	; 0xff
 8001cb0:	d1f1      	bne.n	8001c96 <handshake+0xa>
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	uint8_t year = rx_buffer[1];
 8001cb2:	7f7b      	ldrb	r3, [r7, #29]
 8001cb4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t month = rx_buffer[2];
 8001cb8:	7fbb      	ldrb	r3, [r7, #30]
 8001cba:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t day = rx_buffer[3];
 8001cbe:	7ffb      	ldrb	r3, [r7, #31]
 8001cc0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hour = rx_buffer[4];
 8001cc4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cc8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t minute = rx_buffer[5];
 8001ccc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001cd0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t second = rx_buffer[6];
 8001cd4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001cd8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint16_t milliseconds = (rx_buffer[7] << 8) | rx_buffer[8]; // Combine MSB and LSB for milliseconds
 8001cdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ce0:	021b      	lsls	r3, r3, #8
 8001ce2:	b21a      	sxth	r2, r3
 8001ce4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ce8:	b21b      	sxth	r3, r3
 8001cea:	4313      	orrs	r3, r2
 8001cec:	b21b      	sxth	r3, r3
 8001cee:	85fb      	strh	r3, [r7, #46]	; 0x2e

	dateStruct.Year = year;
 8001cf0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001cf4:	76fb      	strb	r3, [r7, #27]
	dateStruct.Month = month;
 8001cf6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001cfa:	767b      	strb	r3, [r7, #25]
	dateStruct.Date = day;
 8001cfc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001d00:	76bb      	strb	r3, [r7, #26]

	timeStruct.Hours = hour;
 8001d02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d06:	713b      	strb	r3, [r7, #4]
	timeStruct.Minutes = minute;
 8001d08:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001d0c:	717b      	strb	r3, [r7, #5]
	timeStruct.Seconds = second;
 8001d0e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001d12:	71bb      	strb	r3, [r7, #6]
	timeStruct.SubSeconds = milliseconds; // Set the milliseconds (if supported by your RTC)
 8001d14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d16:	60bb      	str	r3, [r7, #8]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &dateStruct, RTC_FORMAT_BIN);
 8001d18:	f107 0318 	add.w	r3, r7, #24
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4820      	ldr	r0, [pc, #128]	; (8001da4 <handshake+0x118>)
 8001d22:	f00a fdc7 	bl	800c8b4 <HAL_RTC_SetDate>
 8001d26:	4603      	mov	r3, r0
 8001d28:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 8001d2c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <handshake+0xac>
	{
		Error_Handler();
 8001d34:	f000 fd18 	bl	8002768 <Error_Handler>
	}

	status = HAL_RTC_SetTime(&hrtc, &timeStruct, RTC_FORMAT_BIN);
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4819      	ldr	r0, [pc, #100]	; (8001da4 <handshake+0x118>)
 8001d40:	f00a fcbe 	bl	800c6c0 <HAL_RTC_SetTime>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 8001d4a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <handshake+0xca>
	{
		Error_Handler();
 8001d52:	f000 fd09 	bl	8002768 <Error_Handler>
	}

	tx_buffer[0] = 0xFA;
 8001d56:	23fa      	movs	r3, #250	; 0xfa
 8001d58:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tx_buffer[1] = 1;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	tx_buffer[2] = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	tx_buffer[3] = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	tx_buffer[4] = 2;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	for(int i = 0; i < allowed_tries; i++)
 8001d74:	2300      	movs	r3, #0
 8001d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d78:	e009      	b.n	8001d8e <handshake+0x102>
	{
		HAL_UART_Transmit(&huart1, tx_buffer, 5 * sizeof(uint8_t), 100);
 8001d7a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001d7e:	2364      	movs	r3, #100	; 0x64
 8001d80:	2205      	movs	r2, #5
 8001d82:	4807      	ldr	r0, [pc, #28]	; (8001da0 <handshake+0x114>)
 8001d84:	f00c fd98 	bl	800e8b8 <HAL_UART_Transmit>
	for(int i = 0; i < allowed_tries; i++)
 8001d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d92:	429a      	cmp	r2, r3
 8001d94:	dbf1      	blt.n	8001d7a <handshake+0xee>
	}

	return 1;
 8001d96:	2301      	movs	r3, #1
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3740      	adds	r7, #64	; 0x40
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	240005cc 	.word	0x240005cc
 8001da4:	240003b4 	.word	0x240003b4

08001da8 <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0

	TIM2->CCR4 = 312;
 8001dac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001db0:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001db4:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001db6:	210c      	movs	r1, #12
 8001db8:	4818      	ldr	r0, [pc, #96]	; (8001e1c <system_setup+0x74>)
 8001dba:	f00b fb83 	bl	800d4c4 <HAL_TIM_PWM_Start>

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8001dbe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001dc2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dc6:	4816      	ldr	r0, [pc, #88]	; (8001e20 <system_setup+0x78>)
 8001dc8:	f002 fefa 	bl	8004bc0 <HAL_ADCEx_Calibration_Start>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <system_setup+0x2e>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 8001dd2:	f000 fcc9 	bl	8002768 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8001dd6:	220b      	movs	r2, #11
 8001dd8:	4912      	ldr	r1, [pc, #72]	; (8001e24 <system_setup+0x7c>)
 8001dda:	4811      	ldr	r0, [pc, #68]	; (8001e20 <system_setup+0x78>)
 8001ddc:	f001 ffce 	bl	8003d7c <HAL_ADC_Start_DMA>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <system_setup+0x42>
			ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8001de6:	f000 fcbf 	bl	8002768 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8001dea:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001dee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001df2:	480d      	ldr	r0, [pc, #52]	; (8001e28 <system_setup+0x80>)
 8001df4:	f002 fee4 	bl	8004bc0 <HAL_ADCEx_Calibration_Start>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <system_setup+0x5a>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 8001dfe:	f000 fcb3 	bl	8002768 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8001e02:	2204      	movs	r2, #4
 8001e04:	4909      	ldr	r1, [pc, #36]	; (8001e2c <system_setup+0x84>)
 8001e06:	4808      	ldr	r0, [pc, #32]	; (8001e28 <system_setup+0x80>)
 8001e08:	f001 ffb8 	bl	8003d7c <HAL_ADC_Start_DMA>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <system_setup+0x6e>
			ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8001e12:	f000 fca9 	bl	8002768 <Error_Handler>
	}
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	24000534 	.word	0x24000534
 8001e20:	2400011c 	.word	0x2400011c
 8001e24:	24000bc0 	.word	0x24000bc0
 8001e28:	24000180 	.word	0x24000180
 8001e2c:	24000be0 	.word	0x24000be0

08001e30 <getTimestamp>:


void getTimestamp(uint8_t *buffer)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	; 0x28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8001e38:	f107 0310 	add.w	r3, r7, #16
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	4619      	mov	r1, r3
 8001e40:	481d      	ldr	r0, [pc, #116]	; (8001eb8 <getTimestamp+0x88>)
 8001e42:	f00a fcdb 	bl	800c7fc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8001e46:	f107 030c 	add.w	r3, r7, #12
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	481a      	ldr	r0, [pc, #104]	; (8001eb8 <getTimestamp+0x88>)
 8001e50:	f00a fdb8 	bl	800c9c4 <HAL_RTC_GetDate>
	uint32_t milliseconds = (1000 - (currentTime.SubSeconds * 1000) / hrtc.Init.SynchPrediv);
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e5a:	fb03 f202 	mul.w	r2, r3, r2
 8001e5e:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <getTimestamp+0x88>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e66:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24

	//uint32_t milliseconds = currentTime.SubSeconds;


	buffer[0] = currentDate.Year;		// 0-99
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	701a      	strb	r2, [r3, #0]
	buffer[1] = currentDate.Month;		// 1-12
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3301      	adds	r3, #1
 8001e76:	7b7a      	ldrb	r2, [r7, #13]
 8001e78:	701a      	strb	r2, [r3, #0]
	buffer[2] = currentDate.Date;		// 1-31
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	7bba      	ldrb	r2, [r7, #14]
 8001e80:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;		// 0-23
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3303      	adds	r3, #3
 8001e86:	7c3a      	ldrb	r2, [r7, #16]
 8001e88:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;	// 0-59
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	7c7a      	ldrb	r2, [r7, #17]
 8001e90:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;	// 0-59
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3305      	adds	r3, #5
 8001e96:	7cba      	ldrb	r2, [r7, #18]
 8001e98:	701a      	strb	r2, [r3, #0]
	buffer[6] = (milliseconds >> 8) & 0xFF;  // High byte of milliseconds
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	0a1a      	lsrs	r2, r3, #8
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3306      	adds	r3, #6
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	701a      	strb	r2, [r3, #0]
	buffer[7] = milliseconds & 0xFF;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3307      	adds	r3, #7
 8001eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	701a      	strb	r2, [r3, #0]

}
 8001eb0:	bf00      	nop
 8001eb2:	3728      	adds	r7, #40	; 0x28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	240003b4 	.word	0x240003b4

08001ebc <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8001ec2:	bf00      	nop
 8001ec4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ec8:	483c      	ldr	r0, [pc, #240]	; (8001fbc <sample_pmt+0x100>)
 8001eca:	f006 fc8d 	bl	80087e8 <HAL_GPIO_ReadPin>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f7      	bne.n	8001ec4 <sample_pmt+0x8>
	}
	uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001ed4:	200e      	movs	r0, #14
 8001ed6:	f012 fc5b 	bl	8014790 <malloc>
 8001eda:	4603      	mov	r3, r0
 8001edc:	60fb      	str	r3, [r7, #12]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8001ede:	2002      	movs	r0, #2
 8001ee0:	f012 fc56 	bl	8014790 <malloc>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	60bb      	str	r3, [r7, #8]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8001ee8:	2008      	movs	r0, #8
 8001eea:	f012 fc51 	bl	8014790 <malloc>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	607b      	str	r3, [r7, #4]
	getTimestamp(timestamp);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ff9c 	bl	8001e30 <getTimestamp>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	220e      	movs	r2, #14
 8001efc:	701a      	strb	r2, [r3, #0]
	pmt_spi[1] = 0xD;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	3301      	adds	r3, #1
 8001f02:	220d      	movs	r2, #13
 8001f04:	701a      	strb	r2, [r3, #0]
#else
	receive_pmt_spi(pmt_spi);
#endif

	buffer[0] = PMT_SYNC;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	22bb      	movs	r2, #187	; 0xbb
 8001f0a:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	22bb      	movs	r2, #187	; 0xbb
 8001f12:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8001f14:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <sample_pmt+0x104>)
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3302      	adds	r3, #2
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8001f24:	4b26      	ldr	r3, [pc, #152]	; (8001fc0 <sample_pmt+0x104>)
 8001f26:	881a      	ldrh	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3303      	adds	r3, #3
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	3304      	adds	r3, #4
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	7812      	ldrb	r2, [r2, #0]
 8001f38:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	3305      	adds	r3, #5
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	7852      	ldrb	r2, [r2, #1]
 8001f42:	701a      	strb	r2, [r3, #0]
	buffer[6] = timestamp[0];
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	3306      	adds	r3, #6
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	7812      	ldrb	r2, [r2, #0]
 8001f4c:	701a      	strb	r2, [r3, #0]
	buffer[7] = timestamp[1];
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	3307      	adds	r3, #7
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	7852      	ldrb	r2, [r2, #1]
 8001f56:	701a      	strb	r2, [r3, #0]
	buffer[8] = timestamp[2];
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3308      	adds	r3, #8
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	7892      	ldrb	r2, [r2, #2]
 8001f60:	701a      	strb	r2, [r3, #0]
	buffer[9] = timestamp[3];
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	3309      	adds	r3, #9
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	78d2      	ldrb	r2, [r2, #3]
 8001f6a:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[4];
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	330a      	adds	r3, #10
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	7912      	ldrb	r2, [r2, #4]
 8001f74:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[5];
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	330b      	adds	r3, #11
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	7952      	ldrb	r2, [r2, #5]
 8001f7e:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[6];
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	330c      	adds	r3, #12
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	7992      	ldrb	r2, [r2, #6]
 8001f88:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[7];
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	330d      	adds	r3, #13
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	79d2      	ldrb	r2, [r2, #7]
 8001f92:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 1);
 8001f94:	2301      	movs	r3, #1
 8001f96:	220e      	movs	r2, #14
 8001f98:	68f9      	ldr	r1, [r7, #12]
 8001f9a:	480a      	ldr	r0, [pc, #40]	; (8001fc4 <sample_pmt+0x108>)
 8001f9c:	f00c fc8c 	bl	800e8b8 <HAL_UART_Transmit>
	free(buffer);
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f012 fbfd 	bl	80147a0 <free>
	free(pmt_spi);
 8001fa6:	68b8      	ldr	r0, [r7, #8]
 8001fa8:	f012 fbfa 	bl	80147a0 <free>
	free(timestamp);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f012 fbf7 	bl	80147a0 <free>
}
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	58020000 	.word	0x58020000
 8001fc0:	24000b30 	.word	0x24000b30
 8001fc4:	240005cc 	.word	0x240005cc

08001fc8 <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8001fce:	bf00      	nop
 8001fd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fd4:	4852      	ldr	r0, [pc, #328]	; (8002120 <sample_erpa+0x158>)
 8001fd6:	f006 fc07 	bl	80087e8 <HAL_GPIO_ReadPin>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f7      	bne.n	8001fd0 <sample_erpa+0x8>
	}

	uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001fe0:	2012      	movs	r0, #18
 8001fe2:	f012 fbd5 	bl	8014790 <malloc>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	60fb      	str	r3, [r7, #12]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8001fea:	2002      	movs	r0, #2
 8001fec:	f012 fbd0 	bl	8014790 <malloc>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	60bb      	str	r3, [r7, #8]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 8001ff4:	2004      	movs	r0, #4
 8001ff6:	f012 fbcb 	bl	8014790 <malloc>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	607b      	str	r3, [r7, #4]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8001ffe:	2008      	movs	r0, #8
 8002000:	f012 fbc6 	bl	8014790 <malloc>
 8002004:	4603      	mov	r3, r0
 8002006:	603b      	str	r3, [r7, #0]
	getTimestamp(timestamp);
 8002008:	6838      	ldr	r0, [r7, #0]
 800200a:	f7ff ff11 	bl	8001e30 <getTimestamp>

#ifdef SIMULATE
	erpa_spi[0] = 0xE;
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	220e      	movs	r2, #14
 8002012:	701a      	strb	r2, [r3, #0]
	erpa_spi[1] = 0xD;
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	3301      	adds	r3, #1
 8002018:	220d      	movs	r2, #13
 800201a:	701a      	strb	r2, [r3, #0]

	erpa_adc[0] = 0xEE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	22ee      	movs	r2, #238	; 0xee
 8002020:	801a      	strh	r2, [r3, #0]
	erpa_adc[1] = 0xDD;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3302      	adds	r3, #2
 8002026:	22dd      	movs	r2, #221	; 0xdd
 8002028:	801a      	strh	r2, [r3, #0]
#else
	receive_erpa_spi(erpa_spi);
	receive_erpa_adc(erpa_adc);
#endif

	buffer[0] = ERPA_SYNC;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	22aa      	movs	r2, #170	; 0xaa
 800202e:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	3301      	adds	r3, #1
 8002034:	22aa      	movs	r2, #170	; 0xaa
 8002036:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 8002038:	4b3a      	ldr	r3, [pc, #232]	; (8002124 <sample_erpa+0x15c>)
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	0a1b      	lsrs	r3, r3, #8
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	3302      	adds	r3, #2
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8002048:	4b36      	ldr	r3, [pc, #216]	; (8002124 <sample_erpa+0x15c>)
 800204a:	881a      	ldrh	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	3303      	adds	r3, #3
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	b29a      	uxth	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	3304      	adds	r3, #4
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	881a      	ldrh	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	3305      	adds	r3, #5
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3302      	adds	r3, #2
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	0a1b      	lsrs	r3, r3, #8
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	3306      	adds	r3, #6
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3302      	adds	r3, #2
 8002086:	881a      	ldrh	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	3307      	adds	r3, #7
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	3308      	adds	r3, #8
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	7812      	ldrb	r2, [r2, #0]
 8002098:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	3309      	adds	r3, #9
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	7852      	ldrb	r2, [r2, #1]
 80020a2:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[0];
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	330a      	adds	r3, #10
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	7812      	ldrb	r2, [r2, #0]
 80020ac:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[1];
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	330b      	adds	r3, #11
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	7852      	ldrb	r2, [r2, #1]
 80020b6:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[2];
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	330c      	adds	r3, #12
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	7892      	ldrb	r2, [r2, #2]
 80020c0:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[3];
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	330d      	adds	r3, #13
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	78d2      	ldrb	r2, [r2, #3]
 80020ca:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[4];
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	330e      	adds	r3, #14
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	7912      	ldrb	r2, [r2, #4]
 80020d4:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[5];
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	330f      	adds	r3, #15
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	7952      	ldrb	r2, [r2, #5]
 80020de:	701a      	strb	r2, [r3, #0]
	buffer[16] = timestamp[6];
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	3310      	adds	r3, #16
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	7992      	ldrb	r2, [r2, #6]
 80020e8:	701a      	strb	r2, [r3, #0]
	buffer[17] = timestamp[7];
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	3311      	adds	r3, #17
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	79d2      	ldrb	r2, [r2, #7]
 80020f2:	701a      	strb	r2, [r3, #0]



	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 1);
 80020f4:	2301      	movs	r3, #1
 80020f6:	2212      	movs	r2, #18
 80020f8:	68f9      	ldr	r1, [r7, #12]
 80020fa:	480b      	ldr	r0, [pc, #44]	; (8002128 <sample_erpa+0x160>)
 80020fc:	f00c fbdc 	bl	800e8b8 <HAL_UART_Transmit>
	free(buffer);
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f012 fb4d 	bl	80147a0 <free>
	free(erpa_spi);
 8002106:	68b8      	ldr	r0, [r7, #8]
 8002108:	f012 fb4a 	bl	80147a0 <free>
	free(erpa_adc);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f012 fb47 	bl	80147a0 <free>
	free(timestamp);
 8002112:	6838      	ldr	r0, [r7, #0]
 8002114:	f012 fb44 	bl	80147a0 <free>
}
 8002118:	bf00      	nop
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	58020400 	.word	0x58020400
 8002124:	24000b32 	.word	0x24000b32
 8002128:	240005cc 	.word	0x240005cc

0800212c <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
	uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002132:	202e      	movs	r0, #46	; 0x2e
 8002134:	f012 fb2c 	bl	8014790 <malloc>
 8002138:	4603      	mov	r3, r0
 800213a:	617b      	str	r3, [r7, #20]

	int16_t* hk_i2c = (int16_t*)malloc(4 * sizeof(int16_t));
 800213c:	2008      	movs	r0, #8
 800213e:	f012 fb27 	bl	8014790 <malloc>
 8002142:	4603      	mov	r3, r0
 8002144:	613b      	str	r3, [r7, #16]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 8002146:	2012      	movs	r0, #18
 8002148:	f012 fb22 	bl	8014790 <malloc>
 800214c:	4603      	mov	r3, r0
 800214e:	60fb      	str	r3, [r7, #12]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 8002150:	2008      	movs	r0, #8
 8002152:	f012 fb1d 	bl	8014790 <malloc>
 8002156:	4603      	mov	r3, r0
 8002158:	60bb      	str	r3, [r7, #8]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 800215a:	2008      	movs	r0, #8
 800215c:	f012 fb18 	bl	8014790 <malloc>
 8002160:	4603      	mov	r3, r0
 8002162:	607b      	str	r3, [r7, #4]
	getTimestamp(timestamp);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff fe63 	bl	8001e30 <getTimestamp>

#ifdef SIMULATE
	hk_i2c[0] = 0x11;
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	2211      	movs	r2, #17
 800216e:	801a      	strh	r2, [r3, #0]
	hk_i2c[1] = 0x12;
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	3302      	adds	r3, #2
 8002174:	2212      	movs	r2, #18
 8002176:	801a      	strh	r2, [r3, #0]
	hk_i2c[2] = 0x13;
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	3304      	adds	r3, #4
 800217c:	2213      	movs	r2, #19
 800217e:	801a      	strh	r2, [r3, #0]
	hk_i2c[3] = 0x14;
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	3306      	adds	r3, #6
 8002184:	2214      	movs	r2, #20
 8002186:	801a      	strh	r2, [r3, #0]

	hk_adc1[0] = 0xA0;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	22a0      	movs	r2, #160	; 0xa0
 800218c:	801a      	strh	r2, [r3, #0]
	hk_adc1[1] = 0xA1;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	3302      	adds	r3, #2
 8002192:	22a1      	movs	r2, #161	; 0xa1
 8002194:	801a      	strh	r2, [r3, #0]
	hk_adc1[2] = 0xA2;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	3304      	adds	r3, #4
 800219a:	22a2      	movs	r2, #162	; 0xa2
 800219c:	801a      	strh	r2, [r3, #0]
	hk_adc1[3] = 0xA3;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	3306      	adds	r3, #6
 80021a2:	22a3      	movs	r2, #163	; 0xa3
 80021a4:	801a      	strh	r2, [r3, #0]
	hk_adc1[4] = 0xA4;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	3308      	adds	r3, #8
 80021aa:	22a4      	movs	r2, #164	; 0xa4
 80021ac:	801a      	strh	r2, [r3, #0]
	hk_adc1[5] = 0xA5;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	330a      	adds	r3, #10
 80021b2:	22a5      	movs	r2, #165	; 0xa5
 80021b4:	801a      	strh	r2, [r3, #0]
	hk_adc1[6] = 0xA6;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	330c      	adds	r3, #12
 80021ba:	22a6      	movs	r2, #166	; 0xa6
 80021bc:	801a      	strh	r2, [r3, #0]
	hk_adc1[7] = 0xA7;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	330e      	adds	r3, #14
 80021c2:	22a7      	movs	r2, #167	; 0xa7
 80021c4:	801a      	strh	r2, [r3, #0]
	hk_adc1[8] = 0xA8;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	3310      	adds	r3, #16
 80021ca:	22a8      	movs	r2, #168	; 0xa8
 80021cc:	801a      	strh	r2, [r3, #0]

	hk_adc3[0] = 0xB0;
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	22b0      	movs	r2, #176	; 0xb0
 80021d2:	801a      	strh	r2, [r3, #0]
	hk_adc3[1] = 0xB1;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	3302      	adds	r3, #2
 80021d8:	22b1      	movs	r2, #177	; 0xb1
 80021da:	801a      	strh	r2, [r3, #0]
	hk_adc3[2] = 0xB2;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	3304      	adds	r3, #4
 80021e0:	22b2      	movs	r2, #178	; 0xb2
 80021e2:	801a      	strh	r2, [r3, #0]
	hk_adc3[3] = 0xB3;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	3306      	adds	r3, #6
 80021e8:	22b3      	movs	r2, #179	; 0xb3
 80021ea:	801a      	strh	r2, [r3, #0]
	receive_hk_i2c(hk_i2c);
	receive_hk_adc1(hk_adc1);
	receive_hk_adc3(hk_adc3);
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	22cc      	movs	r2, #204	; 0xcc
 80021f0:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	3301      	adds	r3, #1
 80021f6:	22cc      	movs	r2, #204	; 0xcc
 80021f8:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 80021fa:	4ba6      	ldr	r3, [pc, #664]	; (8002494 <sample_hk+0x368>)
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	b29a      	uxth	r2, r3
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	3302      	adds	r3, #2
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 800220a:	4ba2      	ldr	r3, [pc, #648]	; (8002494 <sample_hk+0x368>)
 800220c:	881a      	ldrh	r2, [r3, #0]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	3303      	adds	r3, #3
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	3302      	adds	r3, #2
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	0a1b      	lsrs	r3, r3, #8
 800221e:	b29a      	uxth	r2, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	3304      	adds	r3, #4
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	3302      	adds	r3, #2
 800222c:	881a      	ldrh	r2, [r3, #0]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	3305      	adds	r3, #5
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	0a1b      	lsrs	r3, r3, #8
 800223c:	b29a      	uxth	r2, r3
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	3306      	adds	r3, #6
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	881a      	ldrh	r2, [r3, #0]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	3307      	adds	r3, #7
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002258:	121a      	asrs	r2, r3, #8
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	3308      	adds	r3, #8
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	3309      	adds	r3, #9
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	3302      	adds	r3, #2
 8002274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002278:	121a      	asrs	r2, r3, #8
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	330a      	adds	r3, #10
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	3302      	adds	r3, #2
 8002286:	f9b3 2000 	ldrsh.w	r2, [r3]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	330b      	adds	r3, #11
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	3304      	adds	r3, #4
 8002296:	f9b3 3000 	ldrsh.w	r3, [r3]
 800229a:	121a      	asrs	r2, r3, #8
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	330c      	adds	r3, #12
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	3304      	adds	r3, #4
 80022a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	330d      	adds	r3, #13
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	3306      	adds	r3, #6
 80022b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022bc:	121a      	asrs	r2, r3, #8
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	330e      	adds	r3, #14
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	3306      	adds	r3, #6
 80022ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	330f      	adds	r3, #15
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	b29a      	uxth	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	3310      	adds	r3, #16
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	881a      	ldrh	r2, [r3, #0]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	3311      	adds	r3, #17
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	3302      	adds	r3, #2
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	3312      	adds	r3, #18
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	3302      	adds	r3, #2
 8002308:	881a      	ldrh	r2, [r3, #0]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	3313      	adds	r3, #19
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	3304      	adds	r3, #4
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	0a1b      	lsrs	r3, r3, #8
 800231a:	b29a      	uxth	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	3314      	adds	r3, #20
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	3304      	adds	r3, #4
 8002328:	881a      	ldrh	r2, [r3, #0]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	3315      	adds	r3, #21
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc3[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	3306      	adds	r3, #6
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	0a1b      	lsrs	r3, r3, #8
 800233a:	b29a      	uxth	r2, r3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	3316      	adds	r3, #22
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc3[3] & 0xFF);			// HK 3v3mon LSB
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	3306      	adds	r3, #6
 8002348:	881a      	ldrh	r2, [r3, #0]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	3317      	adds	r3, #23
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	330c      	adds	r3, #12
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	0a1b      	lsrs	r3, r3, #8
 800235a:	b29a      	uxth	r2, r3
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	3318      	adds	r3, #24
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	330c      	adds	r3, #12
 8002368:	881a      	ldrh	r2, [r3, #0]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	3319      	adds	r3, #25
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	3306      	adds	r3, #6
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	0a1b      	lsrs	r3, r3, #8
 800237a:	b29a      	uxth	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	331a      	adds	r3, #26
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	3306      	adds	r3, #6
 8002388:	881a      	ldrh	r2, [r3, #0]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	331b      	adds	r3, #27
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc3[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	3304      	adds	r3, #4
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	b29a      	uxth	r2, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	331c      	adds	r3, #28
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc3[2] & 0xFF);			// HK n5vmon LSB
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	3304      	adds	r3, #4
 80023a8:	881a      	ldrh	r2, [r3, #0]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	331d      	adds	r3, #29
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	330e      	adds	r3, #14
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	0a1b      	lsrs	r3, r3, #8
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	331e      	adds	r3, #30
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	330e      	adds	r3, #14
 80023c8:	881a      	ldrh	r2, [r3, #0]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	331f      	adds	r3, #31
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3310      	adds	r3, #16
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	b29a      	uxth	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	3320      	adds	r3, #32
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	3310      	adds	r3, #16
 80023e8:	881a      	ldrh	r2, [r3, #0]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	3321      	adds	r3, #33	; 0x21
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	3308      	adds	r3, #8
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	0a1b      	lsrs	r3, r3, #8
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	3322      	adds	r3, #34	; 0x22
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	3308      	adds	r3, #8
 8002408:	881a      	ldrh	r2, [r3, #0]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	3323      	adds	r3, #35	; 0x23
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	330a      	adds	r3, #10
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	0a1b      	lsrs	r3, r3, #8
 800241a:	b29a      	uxth	r2, r3
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	3324      	adds	r3, #36	; 0x24
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	330a      	adds	r3, #10
 8002428:	881a      	ldrh	r2, [r3, #0]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	3325      	adds	r3, #37	; 0x25
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	3326      	adds	r3, #38	; 0x26
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	7812      	ldrb	r2, [r2, #0]
 800243a:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	3327      	adds	r3, #39	; 0x27
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	7852      	ldrb	r2, [r2, #1]
 8002444:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	3328      	adds	r3, #40	; 0x28
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	7892      	ldrb	r2, [r2, #2]
 800244e:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	3329      	adds	r3, #41	; 0x29
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	78d2      	ldrb	r2, [r2, #3]
 8002458:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	332a      	adds	r3, #42	; 0x2a
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	7912      	ldrb	r2, [r2, #4]
 8002462:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	332b      	adds	r3, #43	; 0x2b
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	7952      	ldrb	r2, [r2, #5]
 800246c:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	332c      	adds	r3, #44	; 0x2c
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	7992      	ldrb	r2, [r2, #6]
 8002476:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	332d      	adds	r3, #45	; 0x2d
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	79d2      	ldrb	r2, [r2, #7]
 8002480:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 1);
 8002482:	2301      	movs	r3, #1
 8002484:	222e      	movs	r2, #46	; 0x2e
 8002486:	6979      	ldr	r1, [r7, #20]
 8002488:	4803      	ldr	r0, [pc, #12]	; (8002498 <sample_hk+0x36c>)
 800248a:	f00c fa15 	bl	800e8b8 <HAL_UART_Transmit>
	free(buffer);
 800248e:	6978      	ldr	r0, [r7, #20]
 8002490:	e004      	b.n	800249c <sample_hk+0x370>
 8002492:	bf00      	nop
 8002494:	24000b34 	.word	0x24000b34
 8002498:	240005cc 	.word	0x240005cc
 800249c:	f012 f980 	bl	80147a0 <free>
	free(hk_i2c);
 80024a0:	6938      	ldr	r0, [r7, #16]
 80024a2:	f012 f97d 	bl	80147a0 <free>
	free(hk_adc1);
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f012 f97a 	bl	80147a0 <free>
	free(hk_adc3);
 80024ac:	68b8      	ldr	r0, [r7, #8]
 80024ae:	f012 f977 	bl	80147a0 <free>
	free(timestamp);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f012 f974 	bl	80147a0 <free>
}
 80024b8:	bf00      	nop
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80024c8:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <PMT_init+0x48>)
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024d0:	2200      	movs	r2, #0
 80024d2:	2101      	movs	r1, #1
 80024d4:	f00f f896 	bl	8011604 <osEventFlagsWait>
		if(PMT_ON){
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <PMT_init+0x4c>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d010      	beq.n	8002502 <PMT_init+0x42>
			sample_pmt();
 80024e0:	f7ff fcec 	bl	8001ebc <sample_pmt>
			pmt_seq++;
 80024e4:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <PMT_init+0x50>)
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	3301      	adds	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	4b08      	ldr	r3, [pc, #32]	; (8002510 <PMT_init+0x50>)
 80024ee:	801a      	strh	r2, [r3, #0]
#ifdef PMT_CAP
	if (pmt_seq >= PMT_CAP){
 80024f0:	4b07      	ldr	r3, [pc, #28]	; (8002510 <PMT_init+0x50>)
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	2b4f      	cmp	r3, #79	; 0x4f
 80024f6:	d904      	bls.n	8002502 <PMT_init+0x42>
		osThreadSuspend(PMT_taskHandle);
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <PMT_init+0x54>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f00e ffc1 	bl	8011484 <osThreadSuspend>
	}
#endif

		}
		osThreadYield();
 8002502:	f00e ff9f 	bl	8011444 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002506:	e7df      	b.n	80024c8 <PMT_init+0x8>
 8002508:	24000b3c 	.word	0x24000b3c
 800250c:	24000b36 	.word	0x24000b36
 8002510:	24000b30 	.word	0x24000b30
 8002514:	24000660 	.word	0x24000660

08002518 <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002520:	4b10      	ldr	r3, [pc, #64]	; (8002564 <ERPA_init+0x4c>)
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002528:	2200      	movs	r2, #0
 800252a:	2102      	movs	r1, #2
 800252c:	f00f f86a 	bl	8011604 <osEventFlagsWait>
		if (ERPA_ON)
 8002530:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <ERPA_init+0x50>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d012      	beq.n	800255e <ERPA_init+0x46>
		{
			sample_erpa();
 8002538:	f7ff fd46 	bl	8001fc8 <sample_erpa>
			erpa_seq++;
 800253c:	4b0b      	ldr	r3, [pc, #44]	; (800256c <ERPA_init+0x54>)
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	3301      	adds	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	4b09      	ldr	r3, [pc, #36]	; (800256c <ERPA_init+0x54>)
 8002546:	801a      	strh	r2, [r3, #0]
#ifdef ERPA_CAP
	if (erpa_seq >= ERPA_CAP){
 8002548:	4b08      	ldr	r3, [pc, #32]	; (800256c <ERPA_init+0x54>)
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	f640 4203 	movw	r2, #3075	; 0xc03
 8002550:	4293      	cmp	r3, r2
 8002552:	d904      	bls.n	800255e <ERPA_init+0x46>
		osThreadSuspend(ERPA_taskHandle);
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <ERPA_init+0x58>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f00e ff93 	bl	8011484 <osThreadSuspend>
	}
#endif

		}
		osThreadYield();
 800255e:	f00e ff71 	bl	8011444 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002562:	e7dd      	b.n	8002520 <ERPA_init+0x8>
 8002564:	24000b3c 	.word	0x24000b3c
 8002568:	24000b37 	.word	0x24000b37
 800256c:	24000b32 	.word	0x24000b32
 8002570:	24000664 	.word	0x24000664

08002574 <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800257c:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <HK_init+0x4c>)
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002584:	2200      	movs	r2, #0
 8002586:	2104      	movs	r1, #4
 8002588:	f00f f83c 	bl	8011604 <osEventFlagsWait>
		if(HK_ON)
 800258c:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <HK_init+0x50>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d012      	beq.n	80025ba <HK_init+0x46>
		{
			sample_hk();
 8002594:	f7ff fdca 	bl	800212c <sample_hk>
			hk_seq++;
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HK_init+0x54>)
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	3301      	adds	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HK_init+0x54>)
 80025a2:	801a      	strh	r2, [r3, #0]
#ifdef HK_CAP
	if (hk_seq >= HK_CAP){
 80025a4:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <HK_init+0x54>)
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	f242 720f 	movw	r2, #9999	; 0x270f
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d904      	bls.n	80025ba <HK_init+0x46>
		osThreadSuspend(HK_taskHandle);
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <HK_init+0x58>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f00e ff65 	bl	8011484 <osThreadSuspend>
	}
#endif
		}
		osThreadYield();
 80025ba:	f00e ff43 	bl	8011444 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80025be:	e7dd      	b.n	800257c <HK_init+0x8>
 80025c0:	24000b3c 	.word	0x24000b3c
 80025c4:	24000b38 	.word	0x24000b38
 80025c8:	24000b34 	.word	0x24000b34
 80025cc:	24000668 	.word	0x24000668

080025d0 <UART_RX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80025d8:	2201      	movs	r2, #1
 80025da:	4904      	ldr	r1, [pc, #16]	; (80025ec <UART_RX_init+0x1c>)
 80025dc:	4804      	ldr	r0, [pc, #16]	; (80025f0 <UART_RX_init+0x20>)
 80025de:	f00c fac1 	bl	800eb64 <HAL_UART_Receive_IT>
		osDelay(5);
 80025e2:	2005      	movs	r0, #5
 80025e4:	f00e ff6f 	bl	80114c6 <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80025e8:	e7f6      	b.n	80025d8 <UART_RX_init+0x8>
 80025ea:	bf00      	nop
 80025ec:	24000b40 	.word	0x24000b40
 80025f0:	240005cc 	.word	0x240005cc

080025f4 <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 80025fc:	4b24      	ldr	r3, [pc, #144]	; (8002690 <GPIO_on_init+0x9c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f00e ff3f 	bl	8011484 <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002606:	4b23      	ldr	r3, [pc, #140]	; (8002694 <GPIO_on_init+0xa0>)
 8002608:	2104      	movs	r1, #4
 800260a:	2201      	movs	r2, #1
 800260c:	4618      	mov	r0, r3
 800260e:	f006 f903 	bl	8008818 <HAL_GPIO_WritePin>
		osDelay(100);
 8002612:	2064      	movs	r0, #100	; 0x64
 8002614:	f00e ff57 	bl	80114c6 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002618:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <GPIO_on_init+0xa0>)
 800261a:	2120      	movs	r1, #32
 800261c:	2201      	movs	r2, #1
 800261e:	4618      	mov	r0, r3
 8002620:	f006 f8fa 	bl	8008818 <HAL_GPIO_WritePin>
		osDelay(100);
 8002624:	2064      	movs	r0, #100	; 0x64
 8002626:	f00e ff4e 	bl	80114c6 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 800262a:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <GPIO_on_init+0xa4>)
 800262c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002630:	2201      	movs	r2, #1
 8002632:	4618      	mov	r0, r3
 8002634:	f006 f8f0 	bl	8008818 <HAL_GPIO_WritePin>
		osDelay(100);
 8002638:	2064      	movs	r0, #100	; 0x64
 800263a:	f00e ff44 	bl	80114c6 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 800263e:	4b16      	ldr	r3, [pc, #88]	; (8002698 <GPIO_on_init+0xa4>)
 8002640:	2180      	movs	r1, #128	; 0x80
 8002642:	2201      	movs	r2, #1
 8002644:	4618      	mov	r0, r3
 8002646:	f006 f8e7 	bl	8008818 <HAL_GPIO_WritePin>
		osDelay(100);
 800264a:	2064      	movs	r0, #100	; 0x64
 800264c:	f00e ff3b 	bl	80114c6 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <GPIO_on_init+0xa4>)
 8002652:	2140      	movs	r1, #64	; 0x40
 8002654:	2201      	movs	r2, #1
 8002656:	4618      	mov	r0, r3
 8002658:	f006 f8de 	bl	8008818 <HAL_GPIO_WritePin>
		osDelay(100);
 800265c:	2064      	movs	r0, #100	; 0x64
 800265e:	f00e ff32 	bl	80114c6 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002662:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <GPIO_on_init+0xa4>)
 8002664:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002668:	2201      	movs	r2, #1
 800266a:	4618      	mov	r0, r3
 800266c:	f006 f8d4 	bl	8008818 <HAL_GPIO_WritePin>
		osDelay(100);
 8002670:	2064      	movs	r0, #100	; 0x64
 8002672:	f00e ff28 	bl	80114c6 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002676:	4b08      	ldr	r3, [pc, #32]	; (8002698 <GPIO_on_init+0xa4>)
 8002678:	f44f 7100 	mov.w	r1, #512	; 0x200
 800267c:	2201      	movs	r2, #1
 800267e:	4618      	mov	r0, r3
 8002680:	f006 f8ca 	bl	8008818 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002684:	4b02      	ldr	r3, [pc, #8]	; (8002690 <GPIO_on_init+0x9c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f00e fefb 	bl	8011484 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 800268e:	e7ba      	b.n	8002606 <GPIO_on_init+0x12>
 8002690:	24000670 	.word	0x24000670
 8002694:	58020400 	.word	0x58020400
 8002698:	58020800 	.word	0x58020800

0800269c <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 80026a4:	4b24      	ldr	r3, [pc, #144]	; (8002738 <GPIO_off_init+0x9c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f00e feeb 	bl	8011484 <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 80026ae:	4b23      	ldr	r3, [pc, #140]	; (800273c <GPIO_off_init+0xa0>)
 80026b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026b4:	2200      	movs	r2, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f006 f8ae 	bl	8008818 <HAL_GPIO_WritePin>
		osDelay(100);
 80026bc:	2064      	movs	r0, #100	; 0x64
 80026be:	f00e ff02 	bl	80114c6 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 80026c2:	4b1e      	ldr	r3, [pc, #120]	; (800273c <GPIO_off_init+0xa0>)
 80026c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026c8:	2200      	movs	r2, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f006 f8a4 	bl	8008818 <HAL_GPIO_WritePin>
		osDelay(100);
 80026d0:	2064      	movs	r0, #100	; 0x64
 80026d2:	f00e fef8 	bl	80114c6 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 80026d6:	4b19      	ldr	r3, [pc, #100]	; (800273c <GPIO_off_init+0xa0>)
 80026d8:	2140      	movs	r1, #64	; 0x40
 80026da:	2200      	movs	r2, #0
 80026dc:	4618      	mov	r0, r3
 80026de:	f006 f89b 	bl	8008818 <HAL_GPIO_WritePin>
		osDelay(100);
 80026e2:	2064      	movs	r0, #100	; 0x64
 80026e4:	f00e feef 	bl	80114c6 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 80026e8:	4b14      	ldr	r3, [pc, #80]	; (800273c <GPIO_off_init+0xa0>)
 80026ea:	2180      	movs	r1, #128	; 0x80
 80026ec:	2200      	movs	r2, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f006 f892 	bl	8008818 <HAL_GPIO_WritePin>
		osDelay(100);
 80026f4:	2064      	movs	r0, #100	; 0x64
 80026f6:	f00e fee6 	bl	80114c6 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <GPIO_off_init+0xa0>)
 80026fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002700:	2200      	movs	r2, #0
 8002702:	4618      	mov	r0, r3
 8002704:	f006 f888 	bl	8008818 <HAL_GPIO_WritePin>
		osDelay(100);
 8002708:	2064      	movs	r0, #100	; 0x64
 800270a:	f00e fedc 	bl	80114c6 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 800270e:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <GPIO_off_init+0xa4>)
 8002710:	2120      	movs	r1, #32
 8002712:	2200      	movs	r2, #0
 8002714:	4618      	mov	r0, r3
 8002716:	f006 f87f 	bl	8008818 <HAL_GPIO_WritePin>
		osDelay(100);
 800271a:	2064      	movs	r0, #100	; 0x64
 800271c:	f00e fed3 	bl	80114c6 <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002720:	4b07      	ldr	r3, [pc, #28]	; (8002740 <GPIO_off_init+0xa4>)
 8002722:	2104      	movs	r1, #4
 8002724:	2200      	movs	r2, #0
 8002726:	4618      	mov	r0, r3
 8002728:	f006 f876 	bl	8008818 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 800272c:	4b02      	ldr	r3, [pc, #8]	; (8002738 <GPIO_off_init+0x9c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f00e fea7 	bl	8011484 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002736:	e7ba      	b.n	80026ae <GPIO_off_init+0x12>
 8002738:	240008d0 	.word	0x240008d0
 800273c:	58020800 	.word	0x58020800
 8002740:	58020400 	.word	0x58020400

08002744 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a04      	ldr	r2, [pc, #16]	; (8002764 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d101      	bne.n	800275a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002756:	f000 ff1f 	bl	8003598 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40001000 	.word	0x40001000

08002768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800276c:	b672      	cpsid	i
}
 800276e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002770:	e7fe      	b.n	8002770 <Error_Handler+0x8>
	...

08002774 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800277a:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <HAL_MspInit+0x38>)
 800277c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002780:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <HAL_MspInit+0x38>)
 8002782:	f043 0302 	orr.w	r3, r3, #2
 8002786:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800278a:	4b08      	ldr	r3, [pc, #32]	; (80027ac <HAL_MspInit+0x38>)
 800278c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	607b      	str	r3, [r7, #4]
 8002796:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002798:	2200      	movs	r2, #0
 800279a:	210f      	movs	r1, #15
 800279c:	f06f 0001 	mvn.w	r0, #1
 80027a0:	f002 fc08 	bl	8004fb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	58024400 	.word	0x58024400

080027b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08e      	sub	sp, #56	; 0x38
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a7b      	ldr	r2, [pc, #492]	; (80029bc <HAL_ADC_MspInit+0x20c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	f040 8091 	bne.w	80028f6 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80027d4:	4b7a      	ldr	r3, [pc, #488]	; (80029c0 <HAL_ADC_MspInit+0x210>)
 80027d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027da:	4a79      	ldr	r2, [pc, #484]	; (80029c0 <HAL_ADC_MspInit+0x210>)
 80027dc:	f043 0320 	orr.w	r3, r3, #32
 80027e0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80027e4:	4b76      	ldr	r3, [pc, #472]	; (80029c0 <HAL_ADC_MspInit+0x210>)
 80027e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027ea:	f003 0320 	and.w	r3, r3, #32
 80027ee:	623b      	str	r3, [r7, #32]
 80027f0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f2:	4b73      	ldr	r3, [pc, #460]	; (80029c0 <HAL_ADC_MspInit+0x210>)
 80027f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027f8:	4a71      	ldr	r2, [pc, #452]	; (80029c0 <HAL_ADC_MspInit+0x210>)
 80027fa:	f043 0304 	orr.w	r3, r3, #4
 80027fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002802:	4b6f      	ldr	r3, [pc, #444]	; (80029c0 <HAL_ADC_MspInit+0x210>)
 8002804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002810:	4b6b      	ldr	r3, [pc, #428]	; (80029c0 <HAL_ADC_MspInit+0x210>)
 8002812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002816:	4a6a      	ldr	r2, [pc, #424]	; (80029c0 <HAL_ADC_MspInit+0x210>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002820:	4b67      	ldr	r3, [pc, #412]	; (80029c0 <HAL_ADC_MspInit+0x210>)
 8002822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	61bb      	str	r3, [r7, #24]
 800282c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800282e:	4b64      	ldr	r3, [pc, #400]	; (80029c0 <HAL_ADC_MspInit+0x210>)
 8002830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002834:	4a62      	ldr	r2, [pc, #392]	; (80029c0 <HAL_ADC_MspInit+0x210>)
 8002836:	f043 0302 	orr.w	r3, r3, #2
 800283a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800283e:	4b60      	ldr	r3, [pc, #384]	; (80029c0 <HAL_ADC_MspInit+0x210>)
 8002840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800284c:	2333      	movs	r3, #51	; 0x33
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002850:	2303      	movs	r3, #3
 8002852:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800285c:	4619      	mov	r1, r3
 800285e:	4859      	ldr	r0, [pc, #356]	; (80029c4 <HAL_ADC_MspInit+0x214>)
 8002860:	f005 fe12 	bl	8008488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002864:	23ce      	movs	r3, #206	; 0xce
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002868:	2303      	movs	r3, #3
 800286a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002874:	4619      	mov	r1, r3
 8002876:	4854      	ldr	r0, [pc, #336]	; (80029c8 <HAL_ADC_MspInit+0x218>)
 8002878:	f005 fe06 	bl	8008488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800287c:	2303      	movs	r3, #3
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002880:	2303      	movs	r3, #3
 8002882:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800288c:	4619      	mov	r1, r3
 800288e:	484f      	ldr	r0, [pc, #316]	; (80029cc <HAL_ADC_MspInit+0x21c>)
 8002890:	f005 fdfa 	bl	8008488 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002894:	4b4e      	ldr	r3, [pc, #312]	; (80029d0 <HAL_ADC_MspInit+0x220>)
 8002896:	4a4f      	ldr	r2, [pc, #316]	; (80029d4 <HAL_ADC_MspInit+0x224>)
 8002898:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800289a:	4b4d      	ldr	r3, [pc, #308]	; (80029d0 <HAL_ADC_MspInit+0x220>)
 800289c:	2209      	movs	r2, #9
 800289e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028a0:	4b4b      	ldr	r3, [pc, #300]	; (80029d0 <HAL_ADC_MspInit+0x220>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028a6:	4b4a      	ldr	r3, [pc, #296]	; (80029d0 <HAL_ADC_MspInit+0x220>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80028ac:	4b48      	ldr	r3, [pc, #288]	; (80029d0 <HAL_ADC_MspInit+0x220>)
 80028ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028b4:	4b46      	ldr	r3, [pc, #280]	; (80029d0 <HAL_ADC_MspInit+0x220>)
 80028b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028bc:	4b44      	ldr	r3, [pc, #272]	; (80029d0 <HAL_ADC_MspInit+0x220>)
 80028be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80028c4:	4b42      	ldr	r3, [pc, #264]	; (80029d0 <HAL_ADC_MspInit+0x220>)
 80028c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028ca:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80028cc:	4b40      	ldr	r3, [pc, #256]	; (80029d0 <HAL_ADC_MspInit+0x220>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028d2:	4b3f      	ldr	r3, [pc, #252]	; (80029d0 <HAL_ADC_MspInit+0x220>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80028d8:	483d      	ldr	r0, [pc, #244]	; (80029d0 <HAL_ADC_MspInit+0x220>)
 80028da:	f002 ff99 	bl	8005810 <HAL_DMA_Init>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 80028e4:	f7ff ff40 	bl	8002768 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a39      	ldr	r2, [pc, #228]	; (80029d0 <HAL_ADC_MspInit+0x220>)
 80028ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80028ee:	4a38      	ldr	r2, [pc, #224]	; (80029d0 <HAL_ADC_MspInit+0x220>)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80028f4:	e05e      	b.n	80029b4 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a37      	ldr	r2, [pc, #220]	; (80029d8 <HAL_ADC_MspInit+0x228>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d159      	bne.n	80029b4 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002900:	4b2f      	ldr	r3, [pc, #188]	; (80029c0 <HAL_ADC_MspInit+0x210>)
 8002902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002906:	4a2e      	ldr	r2, [pc, #184]	; (80029c0 <HAL_ADC_MspInit+0x210>)
 8002908:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800290c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002910:	4b2b      	ldr	r3, [pc, #172]	; (80029c0 <HAL_ADC_MspInit+0x210>)
 8002912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002916:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800291a:	613b      	str	r3, [r7, #16]
 800291c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800291e:	4b28      	ldr	r3, [pc, #160]	; (80029c0 <HAL_ADC_MspInit+0x210>)
 8002920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002924:	4a26      	ldr	r2, [pc, #152]	; (80029c0 <HAL_ADC_MspInit+0x210>)
 8002926:	f043 0304 	orr.w	r3, r3, #4
 800292a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800292e:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <HAL_ADC_MspInit+0x210>)
 8002930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800293c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002940:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002944:	f000 fe54 	bl	80035f0 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002948:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800294c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002950:	f000 fe4e 	bl	80035f0 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002954:	4b21      	ldr	r3, [pc, #132]	; (80029dc <HAL_ADC_MspInit+0x22c>)
 8002956:	4a22      	ldr	r2, [pc, #136]	; (80029e0 <HAL_ADC_MspInit+0x230>)
 8002958:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800295a:	4b20      	ldr	r3, [pc, #128]	; (80029dc <HAL_ADC_MspInit+0x22c>)
 800295c:	2273      	movs	r2, #115	; 0x73
 800295e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002960:	4b1e      	ldr	r3, [pc, #120]	; (80029dc <HAL_ADC_MspInit+0x22c>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002966:	4b1d      	ldr	r3, [pc, #116]	; (80029dc <HAL_ADC_MspInit+0x22c>)
 8002968:	2200      	movs	r2, #0
 800296a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800296c:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <HAL_ADC_MspInit+0x22c>)
 800296e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002972:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002974:	4b19      	ldr	r3, [pc, #100]	; (80029dc <HAL_ADC_MspInit+0x22c>)
 8002976:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800297a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800297c:	4b17      	ldr	r3, [pc, #92]	; (80029dc <HAL_ADC_MspInit+0x22c>)
 800297e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002982:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002984:	4b15      	ldr	r3, [pc, #84]	; (80029dc <HAL_ADC_MspInit+0x22c>)
 8002986:	f44f 7280 	mov.w	r2, #256	; 0x100
 800298a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800298c:	4b13      	ldr	r3, [pc, #76]	; (80029dc <HAL_ADC_MspInit+0x22c>)
 800298e:	2200      	movs	r2, #0
 8002990:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002992:	4b12      	ldr	r3, [pc, #72]	; (80029dc <HAL_ADC_MspInit+0x22c>)
 8002994:	2200      	movs	r2, #0
 8002996:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002998:	4810      	ldr	r0, [pc, #64]	; (80029dc <HAL_ADC_MspInit+0x22c>)
 800299a:	f002 ff39 	bl	8005810 <HAL_DMA_Init>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 80029a4:	f7ff fee0 	bl	8002768 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a0c      	ldr	r2, [pc, #48]	; (80029dc <HAL_ADC_MspInit+0x22c>)
 80029ac:	64da      	str	r2, [r3, #76]	; 0x4c
 80029ae:	4a0b      	ldr	r2, [pc, #44]	; (80029dc <HAL_ADC_MspInit+0x22c>)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80029b4:	bf00      	nop
 80029b6:	3738      	adds	r7, #56	; 0x38
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40022000 	.word	0x40022000
 80029c0:	58024400 	.word	0x58024400
 80029c4:	58020800 	.word	0x58020800
 80029c8:	58020000 	.word	0x58020000
 80029cc:	58020400 	.word	0x58020400
 80029d0:	240001e4 	.word	0x240001e4
 80029d4:	40020010 	.word	0x40020010
 80029d8:	58026000 	.word	0x58026000
 80029dc:	2400025c 	.word	0x2400025c
 80029e0:	40020028 	.word	0x40020028

080029e4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	; 0x28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a34      	ldr	r2, [pc, #208]	; (8002ad4 <HAL_DAC_MspInit+0xf0>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d161      	bne.n	8002aca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002a06:	4b34      	ldr	r3, [pc, #208]	; (8002ad8 <HAL_DAC_MspInit+0xf4>)
 8002a08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a0c:	4a32      	ldr	r2, [pc, #200]	; (8002ad8 <HAL_DAC_MspInit+0xf4>)
 8002a0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a16:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <HAL_DAC_MspInit+0xf4>)
 8002a18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a20:	613b      	str	r3, [r7, #16]
 8002a22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a24:	4b2c      	ldr	r3, [pc, #176]	; (8002ad8 <HAL_DAC_MspInit+0xf4>)
 8002a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a2a:	4a2b      	ldr	r2, [pc, #172]	; (8002ad8 <HAL_DAC_MspInit+0xf4>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a34:	4b28      	ldr	r3, [pc, #160]	; (8002ad8 <HAL_DAC_MspInit+0xf4>)
 8002a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a42:	2310      	movs	r3, #16
 8002a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a46:	2303      	movs	r3, #3
 8002a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4e:	f107 0314 	add.w	r3, r7, #20
 8002a52:	4619      	mov	r1, r3
 8002a54:	4821      	ldr	r0, [pc, #132]	; (8002adc <HAL_DAC_MspInit+0xf8>)
 8002a56:	f005 fd17 	bl	8008488 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8002a5a:	4b21      	ldr	r3, [pc, #132]	; (8002ae0 <HAL_DAC_MspInit+0xfc>)
 8002a5c:	4a21      	ldr	r2, [pc, #132]	; (8002ae4 <HAL_DAC_MspInit+0x100>)
 8002a5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002a60:	4b1f      	ldr	r3, [pc, #124]	; (8002ae0 <HAL_DAC_MspInit+0xfc>)
 8002a62:	2243      	movs	r2, #67	; 0x43
 8002a64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a66:	4b1e      	ldr	r3, [pc, #120]	; (8002ae0 <HAL_DAC_MspInit+0xfc>)
 8002a68:	2240      	movs	r2, #64	; 0x40
 8002a6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ae0 <HAL_DAC_MspInit+0xfc>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002a72:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <HAL_DAC_MspInit+0xfc>)
 8002a74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a7a:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <HAL_DAC_MspInit+0xfc>)
 8002a7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a82:	4b17      	ldr	r3, [pc, #92]	; (8002ae0 <HAL_DAC_MspInit+0xfc>)
 8002a84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002a8a:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <HAL_DAC_MspInit+0xfc>)
 8002a8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002a92:	4b13      	ldr	r3, [pc, #76]	; (8002ae0 <HAL_DAC_MspInit+0xfc>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a98:	4b11      	ldr	r3, [pc, #68]	; (8002ae0 <HAL_DAC_MspInit+0xfc>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002a9e:	4810      	ldr	r0, [pc, #64]	; (8002ae0 <HAL_DAC_MspInit+0xfc>)
 8002aa0:	f002 feb6 	bl	8005810 <HAL_DMA_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002aaa:	f7ff fe5d 	bl	8002768 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a0b      	ldr	r2, [pc, #44]	; (8002ae0 <HAL_DAC_MspInit+0xfc>)
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <HAL_DAC_MspInit+0xfc>)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002aba:	2200      	movs	r2, #0
 8002abc:	2105      	movs	r1, #5
 8002abe:	2036      	movs	r0, #54	; 0x36
 8002ac0:	f002 fa78 	bl	8004fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ac4:	2036      	movs	r0, #54	; 0x36
 8002ac6:	f002 fa8f 	bl	8004fe8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002aca:	bf00      	nop
 8002acc:	3728      	adds	r7, #40	; 0x28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40007400 	.word	0x40007400
 8002ad8:	58024400 	.word	0x58024400
 8002adc:	58020000 	.word	0x58020000
 8002ae0:	240002e8 	.word	0x240002e8
 8002ae4:	40020088 	.word	0x40020088

08002ae8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b0ba      	sub	sp, #232	; 0xe8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	605a      	str	r2, [r3, #4]
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	60da      	str	r2, [r3, #12]
 8002afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b00:	f107 0310 	add.w	r3, r7, #16
 8002b04:	22c0      	movs	r2, #192	; 0xc0
 8002b06:	2100      	movs	r1, #0
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f011 fe5f 	bl	80147cc <memset>
  if(hi2c->Instance==I2C1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a27      	ldr	r2, [pc, #156]	; (8002bb0 <HAL_I2C_MspInit+0xc8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d146      	bne.n	8002ba6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b18:	f04f 0208 	mov.w	r2, #8
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b2a:	f107 0310 	add.w	r3, r7, #16
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f007 f846 	bl	8009bc0 <HAL_RCCEx_PeriphCLKConfig>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002b3a:	f7ff fe15 	bl	8002768 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b3e:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <HAL_I2C_MspInit+0xcc>)
 8002b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b44:	4a1b      	ldr	r2, [pc, #108]	; (8002bb4 <HAL_I2C_MspInit+0xcc>)
 8002b46:	f043 0302 	orr.w	r3, r3, #2
 8002b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b4e:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_I2C_MspInit+0xcc>)
 8002b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b64:	2312      	movs	r3, #18
 8002b66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b70:	2300      	movs	r3, #0
 8002b72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b76:	2304      	movs	r3, #4
 8002b78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b7c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b80:	4619      	mov	r1, r3
 8002b82:	480d      	ldr	r0, [pc, #52]	; (8002bb8 <HAL_I2C_MspInit+0xd0>)
 8002b84:	f005 fc80 	bl	8008488 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b88:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <HAL_I2C_MspInit+0xcc>)
 8002b8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b8e:	4a09      	ldr	r2, [pc, #36]	; (8002bb4 <HAL_I2C_MspInit+0xcc>)
 8002b90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <HAL_I2C_MspInit+0xcc>)
 8002b9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ba6:	bf00      	nop
 8002ba8:	37e8      	adds	r7, #232	; 0xe8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40005400 	.word	0x40005400
 8002bb4:	58024400 	.word	0x58024400
 8002bb8:	58020400 	.word	0x58020400

08002bbc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b0b2      	sub	sp, #200	; 0xc8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bc4:	f107 0308 	add.w	r3, r7, #8
 8002bc8:	22c0      	movs	r2, #192	; 0xc0
 8002bca:	2100      	movs	r1, #0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f011 fdfd 	bl	80147cc <memset>
  if(hrtc->Instance==RTC)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a10      	ldr	r2, [pc, #64]	; (8002c18 <HAL_RTC_MspInit+0x5c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d119      	bne.n	8002c10 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002bdc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bf0:	f107 0308 	add.w	r3, r7, #8
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f006 ffe3 	bl	8009bc0 <HAL_RCCEx_PeriphCLKConfig>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002c00:	f7ff fdb2 	bl	8002768 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <HAL_RTC_MspInit+0x60>)
 8002c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c08:	4a04      	ldr	r2, [pc, #16]	; (8002c1c <HAL_RTC_MspInit+0x60>)
 8002c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c0e:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c10:	bf00      	nop
 8002c12:	37c8      	adds	r7, #200	; 0xc8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	58004000 	.word	0x58004000
 8002c1c:	58024400 	.word	0x58024400

08002c20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b0bc      	sub	sp, #240	; 0xf0
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c28:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	60da      	str	r2, [r3, #12]
 8002c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c38:	f107 0318 	add.w	r3, r7, #24
 8002c3c:	22c0      	movs	r2, #192	; 0xc0
 8002c3e:	2100      	movs	r1, #0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f011 fdc3 	bl	80147cc <memset>
  if(hspi->Instance==SPI1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a4c      	ldr	r2, [pc, #304]	; (8002d7c <HAL_SPI_MspInit+0x15c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d145      	bne.n	8002cdc <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002c50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c60:	f107 0318 	add.w	r3, r7, #24
 8002c64:	4618      	mov	r0, r3
 8002c66:	f006 ffab 	bl	8009bc0 <HAL_RCCEx_PeriphCLKConfig>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002c70:	f7ff fd7a 	bl	8002768 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c74:	4b42      	ldr	r3, [pc, #264]	; (8002d80 <HAL_SPI_MspInit+0x160>)
 8002c76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c7a:	4a41      	ldr	r2, [pc, #260]	; (8002d80 <HAL_SPI_MspInit+0x160>)
 8002c7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c80:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c84:	4b3e      	ldr	r3, [pc, #248]	; (8002d80 <HAL_SPI_MspInit+0x160>)
 8002c86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c92:	4b3b      	ldr	r3, [pc, #236]	; (8002d80 <HAL_SPI_MspInit+0x160>)
 8002c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c98:	4a39      	ldr	r2, [pc, #228]	; (8002d80 <HAL_SPI_MspInit+0x160>)
 8002c9a:	f043 0302 	orr.w	r3, r3, #2
 8002c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ca2:	4b37      	ldr	r3, [pc, #220]	; (8002d80 <HAL_SPI_MspInit+0x160>)
 8002ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002cb0:	2318      	movs	r3, #24
 8002cb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cc8:	2305      	movs	r3, #5
 8002cca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cce:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	482b      	ldr	r0, [pc, #172]	; (8002d84 <HAL_SPI_MspInit+0x164>)
 8002cd6:	f005 fbd7 	bl	8008488 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002cda:	e04a      	b.n	8002d72 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a29      	ldr	r2, [pc, #164]	; (8002d88 <HAL_SPI_MspInit+0x168>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d145      	bne.n	8002d72 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002ce6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cf6:	f107 0318 	add.w	r3, r7, #24
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f006 ff60 	bl	8009bc0 <HAL_RCCEx_PeriphCLKConfig>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002d06:	f7ff fd2f 	bl	8002768 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d0a:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <HAL_SPI_MspInit+0x160>)
 8002d0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d10:	4a1b      	ldr	r2, [pc, #108]	; (8002d80 <HAL_SPI_MspInit+0x160>)
 8002d12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d1a:	4b19      	ldr	r3, [pc, #100]	; (8002d80 <HAL_SPI_MspInit+0x160>)
 8002d1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d28:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <HAL_SPI_MspInit+0x160>)
 8002d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d2e:	4a14      	ldr	r2, [pc, #80]	; (8002d80 <HAL_SPI_MspInit+0x160>)
 8002d30:	f043 0302 	orr.w	r3, r3, #2
 8002d34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d38:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <HAL_SPI_MspInit+0x160>)
 8002d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002d46:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002d4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d60:	2305      	movs	r3, #5
 8002d62:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d66:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4805      	ldr	r0, [pc, #20]	; (8002d84 <HAL_SPI_MspInit+0x164>)
 8002d6e:	f005 fb8b 	bl	8008488 <HAL_GPIO_Init>
}
 8002d72:	bf00      	nop
 8002d74:	37f0      	adds	r7, #240	; 0xf0
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40013000 	.word	0x40013000
 8002d80:	58024400 	.word	0x58024400
 8002d84:	58020400 	.word	0x58020400
 8002d88:	40003800 	.word	0x40003800

08002d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a37      	ldr	r2, [pc, #220]	; (8002e78 <HAL_TIM_Base_MspInit+0xec>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d12f      	bne.n	8002dfe <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d9e:	4b37      	ldr	r3, [pc, #220]	; (8002e7c <HAL_TIM_Base_MspInit+0xf0>)
 8002da0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002da4:	4a35      	ldr	r2, [pc, #212]	; (8002e7c <HAL_TIM_Base_MspInit+0xf0>)
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002dae:	4b33      	ldr	r3, [pc, #204]	; (8002e7c <HAL_TIM_Base_MspInit+0xf0>)
 8002db0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2105      	movs	r1, #5
 8002dc0:	2018      	movs	r0, #24
 8002dc2:	f002 f8f7 	bl	8004fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002dc6:	2018      	movs	r0, #24
 8002dc8:	f002 f90e 	bl	8004fe8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2105      	movs	r1, #5
 8002dd0:	2019      	movs	r0, #25
 8002dd2:	f002 f8ef 	bl	8004fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002dd6:	2019      	movs	r0, #25
 8002dd8:	f002 f906 	bl	8004fe8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2105      	movs	r1, #5
 8002de0:	201a      	movs	r0, #26
 8002de2:	f002 f8e7 	bl	8004fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002de6:	201a      	movs	r0, #26
 8002de8:	f002 f8fe 	bl	8004fe8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002dec:	2200      	movs	r2, #0
 8002dee:	2105      	movs	r1, #5
 8002df0:	201b      	movs	r0, #27
 8002df2:	f002 f8df 	bl	8004fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002df6:	201b      	movs	r0, #27
 8002df8:	f002 f8f6 	bl	8004fe8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002dfc:	e038      	b.n	8002e70 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e06:	d117      	bne.n	8002e38 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e08:	4b1c      	ldr	r3, [pc, #112]	; (8002e7c <HAL_TIM_Base_MspInit+0xf0>)
 8002e0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e0e:	4a1b      	ldr	r2, [pc, #108]	; (8002e7c <HAL_TIM_Base_MspInit+0xf0>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e18:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <HAL_TIM_Base_MspInit+0xf0>)
 8002e1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002e26:	2200      	movs	r2, #0
 8002e28:	2105      	movs	r1, #5
 8002e2a:	201c      	movs	r0, #28
 8002e2c:	f002 f8c2 	bl	8004fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e30:	201c      	movs	r0, #28
 8002e32:	f002 f8d9 	bl	8004fe8 <HAL_NVIC_EnableIRQ>
}
 8002e36:	e01b      	b.n	8002e70 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a10      	ldr	r2, [pc, #64]	; (8002e80 <HAL_TIM_Base_MspInit+0xf4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d116      	bne.n	8002e70 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e42:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <HAL_TIM_Base_MspInit+0xf0>)
 8002e44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e48:	4a0c      	ldr	r2, [pc, #48]	; (8002e7c <HAL_TIM_Base_MspInit+0xf0>)
 8002e4a:	f043 0302 	orr.w	r3, r3, #2
 8002e4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e52:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <HAL_TIM_Base_MspInit+0xf0>)
 8002e54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002e60:	2200      	movs	r2, #0
 8002e62:	2105      	movs	r1, #5
 8002e64:	201d      	movs	r0, #29
 8002e66:	f002 f8a5 	bl	8004fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e6a:	201d      	movs	r0, #29
 8002e6c:	f002 f8bc 	bl	8004fe8 <HAL_NVIC_EnableIRQ>
}
 8002e70:	bf00      	nop
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40010000 	.word	0x40010000
 8002e7c:	58024400 	.word	0x58024400
 8002e80:	40000400 	.word	0x40000400

08002e84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08a      	sub	sp, #40	; 0x28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e8c:	f107 0314 	add.w	r3, r7, #20
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	60da      	str	r2, [r3, #12]
 8002e9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a26      	ldr	r2, [pc, #152]	; (8002f3c <HAL_TIM_MspPostInit+0xb8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d120      	bne.n	8002ee8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea6:	4b26      	ldr	r3, [pc, #152]	; (8002f40 <HAL_TIM_MspPostInit+0xbc>)
 8002ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eac:	4a24      	ldr	r2, [pc, #144]	; (8002f40 <HAL_TIM_MspPostInit+0xbc>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002eb6:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <HAL_TIM_MspPostInit+0xbc>)
 8002eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ec4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eda:	f107 0314 	add.w	r3, r7, #20
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4818      	ldr	r0, [pc, #96]	; (8002f44 <HAL_TIM_MspPostInit+0xc0>)
 8002ee2:	f005 fad1 	bl	8008488 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002ee6:	e024      	b.n	8002f32 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef0:	d11f      	bne.n	8002f32 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef2:	4b13      	ldr	r3, [pc, #76]	; (8002f40 <HAL_TIM_MspPostInit+0xbc>)
 8002ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ef8:	4a11      	ldr	r2, [pc, #68]	; (8002f40 <HAL_TIM_MspPostInit+0xbc>)
 8002efa:	f043 0302 	orr.w	r3, r3, #2
 8002efe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f02:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <HAL_TIM_MspPostInit+0xbc>)
 8002f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002f10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f16:	2302      	movs	r3, #2
 8002f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f22:	2301      	movs	r3, #1
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f26:	f107 0314 	add.w	r3, r7, #20
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4806      	ldr	r0, [pc, #24]	; (8002f48 <HAL_TIM_MspPostInit+0xc4>)
 8002f2e:	f005 faab 	bl	8008488 <HAL_GPIO_Init>
}
 8002f32:	bf00      	nop
 8002f34:	3728      	adds	r7, #40	; 0x28
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40010000 	.word	0x40010000
 8002f40:	58024400 	.word	0x58024400
 8002f44:	58020000 	.word	0x58020000
 8002f48:	58020400 	.word	0x58020400

08002f4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b0ba      	sub	sp, #232	; 0xe8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f54:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	60da      	str	r2, [r3, #12]
 8002f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f64:	f107 0310 	add.w	r3, r7, #16
 8002f68:	22c0      	movs	r2, #192	; 0xc0
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f011 fc2d 	bl	80147cc <memset>
  if(huart->Instance==USART1)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a2b      	ldr	r2, [pc, #172]	; (8003024 <HAL_UART_MspInit+0xd8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d14e      	bne.n	800301a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f7c:	f04f 0201 	mov.w	r2, #1
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f8e:	f107 0310 	add.w	r3, r7, #16
 8002f92:	4618      	mov	r0, r3
 8002f94:	f006 fe14 	bl	8009bc0 <HAL_RCCEx_PeriphCLKConfig>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002f9e:	f7ff fbe3 	bl	8002768 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fa2:	4b21      	ldr	r3, [pc, #132]	; (8003028 <HAL_UART_MspInit+0xdc>)
 8002fa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fa8:	4a1f      	ldr	r2, [pc, #124]	; (8003028 <HAL_UART_MspInit+0xdc>)
 8002faa:	f043 0310 	orr.w	r3, r3, #16
 8002fae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002fb2:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <HAL_UART_MspInit+0xdc>)
 8002fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc0:	4b19      	ldr	r3, [pc, #100]	; (8003028 <HAL_UART_MspInit+0xdc>)
 8002fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fc6:	4a18      	ldr	r2, [pc, #96]	; (8003028 <HAL_UART_MspInit+0xdc>)
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fd0:	4b15      	ldr	r3, [pc, #84]	; (8003028 <HAL_UART_MspInit+0xdc>)
 8002fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	60bb      	str	r3, [r7, #8]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002fde:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002fe2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ff8:	2307      	movs	r3, #7
 8002ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003002:	4619      	mov	r1, r3
 8003004:	4809      	ldr	r0, [pc, #36]	; (800302c <HAL_UART_MspInit+0xe0>)
 8003006:	f005 fa3f 	bl	8008488 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800300a:	2200      	movs	r2, #0
 800300c:	2105      	movs	r1, #5
 800300e:	2025      	movs	r0, #37	; 0x25
 8003010:	f001 ffd0 	bl	8004fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003014:	2025      	movs	r0, #37	; 0x25
 8003016:	f001 ffe7 	bl	8004fe8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800301a:	bf00      	nop
 800301c:	37e8      	adds	r7, #232	; 0xe8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40011000 	.word	0x40011000
 8003028:	58024400 	.word	0x58024400
 800302c:	58020000 	.word	0x58020000

08003030 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b090      	sub	sp, #64	; 0x40
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b0f      	cmp	r3, #15
 800303c:	d827      	bhi.n	800308e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800303e:	2200      	movs	r2, #0
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	2036      	movs	r0, #54	; 0x36
 8003044:	f001 ffb6 	bl	8004fb4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003048:	2036      	movs	r0, #54	; 0x36
 800304a:	f001 ffcd 	bl	8004fe8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800304e:	4a29      	ldr	r2, [pc, #164]	; (80030f4 <HAL_InitTick+0xc4>)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003054:	4b28      	ldr	r3, [pc, #160]	; (80030f8 <HAL_InitTick+0xc8>)
 8003056:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800305a:	4a27      	ldr	r2, [pc, #156]	; (80030f8 <HAL_InitTick+0xc8>)
 800305c:	f043 0310 	orr.w	r3, r3, #16
 8003060:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003064:	4b24      	ldr	r3, [pc, #144]	; (80030f8 <HAL_InitTick+0xc8>)
 8003066:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800306a:	f003 0310 	and.w	r3, r3, #16
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003072:	f107 0210 	add.w	r2, r7, #16
 8003076:	f107 0314 	add.w	r3, r7, #20
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f006 fd5d 	bl	8009b3c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003084:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003088:	2b00      	cmp	r3, #0
 800308a:	d106      	bne.n	800309a <HAL_InitTick+0x6a>
 800308c:	e001      	b.n	8003092 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e02b      	b.n	80030ea <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003092:	f006 fd27 	bl	8009ae4 <HAL_RCC_GetPCLK1Freq>
 8003096:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003098:	e004      	b.n	80030a4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800309a:	f006 fd23 	bl	8009ae4 <HAL_RCC_GetPCLK1Freq>
 800309e:	4603      	mov	r3, r0
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80030a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a6:	4a15      	ldr	r2, [pc, #84]	; (80030fc <HAL_InitTick+0xcc>)
 80030a8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ac:	0c9b      	lsrs	r3, r3, #18
 80030ae:	3b01      	subs	r3, #1
 80030b0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80030b2:	4b13      	ldr	r3, [pc, #76]	; (8003100 <HAL_InitTick+0xd0>)
 80030b4:	4a13      	ldr	r2, [pc, #76]	; (8003104 <HAL_InitTick+0xd4>)
 80030b6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80030b8:	4b11      	ldr	r3, [pc, #68]	; (8003100 <HAL_InitTick+0xd0>)
 80030ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80030be:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80030c0:	4a0f      	ldr	r2, [pc, #60]	; (8003100 <HAL_InitTick+0xd0>)
 80030c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80030c6:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <HAL_InitTick+0xd0>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <HAL_InitTick+0xd0>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80030d2:	480b      	ldr	r0, [pc, #44]	; (8003100 <HAL_InitTick+0xd0>)
 80030d4:	f009 fed3 	bl	800ce7e <HAL_TIM_Base_Init>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d104      	bne.n	80030e8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80030de:	4808      	ldr	r0, [pc, #32]	; (8003100 <HAL_InitTick+0xd0>)
 80030e0:	f009 ffbc 	bl	800d05c <HAL_TIM_Base_Start_IT>
 80030e4:	4603      	mov	r3, r0
 80030e6:	e000      	b.n	80030ea <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3740      	adds	r7, #64	; 0x40
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	24000090 	.word	0x24000090
 80030f8:	58024400 	.word	0x58024400
 80030fc:	431bde83 	.word	0x431bde83
 8003100:	24000be8 	.word	0x24000be8
 8003104:	40001000 	.word	0x40001000

08003108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800310c:	e7fe      	b.n	800310c <NMI_Handler+0x4>

0800310e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800310e:	b480      	push	{r7}
 8003110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003112:	e7fe      	b.n	8003112 <HardFault_Handler+0x4>

08003114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003118:	e7fe      	b.n	8003118 <MemManage_Handler+0x4>

0800311a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800311a:	b480      	push	{r7}
 800311c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800311e:	e7fe      	b.n	800311e <BusFault_Handler+0x4>

08003120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003124:	e7fe      	b.n	8003124 <UsageFault_Handler+0x4>

08003126 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003126:	b480      	push	{r7}
 8003128:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800312a:	bf00      	nop
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003138:	4802      	ldr	r0, [pc, #8]	; (8003144 <DMA1_Stream0_IRQHandler+0x10>)
 800313a:	f003 fe93 	bl	8006e64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800313e:	bf00      	nop
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	240001e4 	.word	0x240001e4

08003148 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800314c:	4802      	ldr	r0, [pc, #8]	; (8003158 <DMA1_Stream1_IRQHandler+0x10>)
 800314e:	f003 fe89 	bl	8006e64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	2400025c 	.word	0x2400025c

0800315c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003160:	4802      	ldr	r0, [pc, #8]	; (800316c <DMA1_Stream5_IRQHandler+0x10>)
 8003162:	f003 fe7f 	bl	8006e64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003166:	bf00      	nop
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	240002e8 	.word	0x240002e8

08003170 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003174:	4802      	ldr	r0, [pc, #8]	; (8003180 <TIM1_BRK_IRQHandler+0x10>)
 8003176:	f00a fab3 	bl	800d6e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800317a:	bf00      	nop
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	240004e8 	.word	0x240004e8

08003184 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003188:	4802      	ldr	r0, [pc, #8]	; (8003194 <TIM1_UP_IRQHandler+0x10>)
 800318a:	f00a faa9 	bl	800d6e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	240004e8 	.word	0x240004e8

08003198 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800319c:	4802      	ldr	r0, [pc, #8]	; (80031a8 <TIM1_TRG_COM_IRQHandler+0x10>)
 800319e:	f00a fa9f 	bl	800d6e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	240004e8 	.word	0x240004e8

080031ac <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031b0:	4802      	ldr	r0, [pc, #8]	; (80031bc <TIM1_CC_IRQHandler+0x10>)
 80031b2:	f00a fa95 	bl	800d6e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	240004e8 	.word	0x240004e8

080031c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80031c4:	4802      	ldr	r0, [pc, #8]	; (80031d0 <TIM2_IRQHandler+0x10>)
 80031c6:	f00a fa8b 	bl	800d6e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	24000534 	.word	0x24000534

080031d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80031d8:	4802      	ldr	r0, [pc, #8]	; (80031e4 <TIM3_IRQHandler+0x10>)
 80031da:	f00a fa81 	bl	800d6e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	24000580 	.word	0x24000580

080031e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031ec:	4802      	ldr	r0, [pc, #8]	; (80031f8 <USART1_IRQHandler+0x10>)
 80031ee:	f00b fd05 	bl	800ebfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	240005cc 	.word	0x240005cc

080031fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003200:	4b06      	ldr	r3, [pc, #24]	; (800321c <TIM6_DAC_IRQHandler+0x20>)
 8003202:	791b      	ldrb	r3, [r3, #4]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800320a:	4804      	ldr	r0, [pc, #16]	; (800321c <TIM6_DAC_IRQHandler+0x20>)
 800320c:	f002 f881 	bl	8005312 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003210:	4803      	ldr	r0, [pc, #12]	; (8003220 <TIM6_DAC_IRQHandler+0x24>)
 8003212:	f00a fa65 	bl	800d6e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	240002d4 	.word	0x240002d4
 8003220:	24000be8 	.word	0x24000be8

08003224 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 800322e:	4b0f      	ldr	r3, [pc, #60]	; (800326c <ITM_SendChar+0x48>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a0e      	ldr	r2, [pc, #56]	; (800326c <ITM_SendChar+0x48>)
 8003234:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003238:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 800323a:	4b0d      	ldr	r3, [pc, #52]	; (8003270 <ITM_SendChar+0x4c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a0c      	ldr	r2, [pc, #48]	; (8003270 <ITM_SendChar+0x4c>)
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8003246:	bf00      	nop
 8003248:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f8      	beq.n	8003248 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8003256:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	6013      	str	r3, [r2, #0]
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	e000edfc 	.word	0xe000edfc
 8003270:	e0000e00 	.word	0xe0000e00

08003274 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003280:	2300      	movs	r3, #0
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	e00a      	b.n	800329c <_read+0x28>
		*ptr++ = __io_getchar();
 8003286:	f3af 8000 	nop.w
 800328a:	4601      	mov	r1, r0
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	60ba      	str	r2, [r7, #8]
 8003292:	b2ca      	uxtb	r2, r1
 8003294:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	3301      	adds	r3, #1
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	dbf0      	blt.n	8003286 <_read+0x12>
	}

	return len;
 80032a4:	687b      	ldr	r3, [r7, #4]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b086      	sub	sp, #24
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	e009      	b.n	80032d4 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	60ba      	str	r2, [r7, #8]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff ffab 	bl	8003224 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	3301      	adds	r3, #1
 80032d2:	617b      	str	r3, [r7, #20]
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	429a      	cmp	r2, r3
 80032da:	dbf1      	blt.n	80032c0 <_write+0x12>
	}
	return len;
 80032dc:	687b      	ldr	r3, [r7, #4]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <_close>:

int _close(int file) {
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80032ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <_fstat>:

int _fstat(int file, struct stat *st) {
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800330e:	605a      	str	r2, [r3, #4]
	return 0;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <_isatty>:

int _isatty(int file) {
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8003326:	2301      	movs	r3, #1
}
 8003328:	4618      	mov	r0, r3
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8003358:	4a14      	ldr	r2, [pc, #80]	; (80033ac <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800335a:	4b15      	ldr	r3, [pc, #84]	; (80033b0 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003364:	4b13      	ldr	r3, [pc, #76]	; (80033b4 <_sbrk+0x64>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d102      	bne.n	8003372 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 800336c:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <_sbrk+0x64>)
 800336e:	4a12      	ldr	r2, [pc, #72]	; (80033b8 <_sbrk+0x68>)
 8003370:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003372:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <_sbrk+0x64>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4413      	add	r3, r2
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	429a      	cmp	r2, r3
 800337e:	d207      	bcs.n	8003390 <_sbrk+0x40>
		errno = ENOMEM;
 8003380:	f011 f9dc 	bl	801473c <__errno>
 8003384:	4603      	mov	r3, r0
 8003386:	220c      	movs	r2, #12
 8003388:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800338a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800338e:	e009      	b.n	80033a4 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003390:	4b08      	ldr	r3, [pc, #32]	; (80033b4 <_sbrk+0x64>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003396:	4b07      	ldr	r3, [pc, #28]	; (80033b4 <_sbrk+0x64>)
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4413      	add	r3, r2
 800339e:	4a05      	ldr	r2, [pc, #20]	; (80033b4 <_sbrk+0x64>)
 80033a0:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80033a2:	68fb      	ldr	r3, [r7, #12]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	24080000 	.word	0x24080000
 80033b0:	00000400 	.word	0x00000400
 80033b4:	24000c34 	.word	0x24000c34
 80033b8:	240055a0 	.word	0x240055a0

080033bc <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80033c0:	4b37      	ldr	r3, [pc, #220]	; (80034a0 <SystemInit+0xe4>)
 80033c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c6:	4a36      	ldr	r2, [pc, #216]	; (80034a0 <SystemInit+0xe4>)
 80033c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80033d0:	4b34      	ldr	r3, [pc, #208]	; (80034a4 <SystemInit+0xe8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	2b06      	cmp	r3, #6
 80033da:	d807      	bhi.n	80033ec <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80033dc:	4b31      	ldr	r3, [pc, #196]	; (80034a4 <SystemInit+0xe8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f023 030f 	bic.w	r3, r3, #15
 80033e4:	4a2f      	ldr	r2, [pc, #188]	; (80034a4 <SystemInit+0xe8>)
 80033e6:	f043 0307 	orr.w	r3, r3, #7
 80033ea:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80033ec:	4b2e      	ldr	r3, [pc, #184]	; (80034a8 <SystemInit+0xec>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a2d      	ldr	r2, [pc, #180]	; (80034a8 <SystemInit+0xec>)
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80033f8:	4b2b      	ldr	r3, [pc, #172]	; (80034a8 <SystemInit+0xec>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80033fe:	4b2a      	ldr	r3, [pc, #168]	; (80034a8 <SystemInit+0xec>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	4929      	ldr	r1, [pc, #164]	; (80034a8 <SystemInit+0xec>)
 8003404:	4b29      	ldr	r3, [pc, #164]	; (80034ac <SystemInit+0xf0>)
 8003406:	4013      	ands	r3, r2
 8003408:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800340a:	4b26      	ldr	r3, [pc, #152]	; (80034a4 <SystemInit+0xe8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	2b00      	cmp	r3, #0
 8003414:	d007      	beq.n	8003426 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003416:	4b23      	ldr	r3, [pc, #140]	; (80034a4 <SystemInit+0xe8>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 030f 	bic.w	r3, r3, #15
 800341e:	4a21      	ldr	r2, [pc, #132]	; (80034a4 <SystemInit+0xe8>)
 8003420:	f043 0307 	orr.w	r3, r3, #7
 8003424:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003426:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <SystemInit+0xec>)
 8003428:	2200      	movs	r2, #0
 800342a:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 800342c:	4b1e      	ldr	r3, [pc, #120]	; (80034a8 <SystemInit+0xec>)
 800342e:	2200      	movs	r2, #0
 8003430:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003432:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <SystemInit+0xec>)
 8003434:	2200      	movs	r2, #0
 8003436:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003438:	4b1b      	ldr	r3, [pc, #108]	; (80034a8 <SystemInit+0xec>)
 800343a:	4a1d      	ldr	r2, [pc, #116]	; (80034b0 <SystemInit+0xf4>)
 800343c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 800343e:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <SystemInit+0xec>)
 8003440:	4a1c      	ldr	r2, [pc, #112]	; (80034b4 <SystemInit+0xf8>)
 8003442:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003444:	4b18      	ldr	r3, [pc, #96]	; (80034a8 <SystemInit+0xec>)
 8003446:	4a1c      	ldr	r2, [pc, #112]	; (80034b8 <SystemInit+0xfc>)
 8003448:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 800344a:	4b17      	ldr	r3, [pc, #92]	; (80034a8 <SystemInit+0xec>)
 800344c:	2200      	movs	r2, #0
 800344e:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003450:	4b15      	ldr	r3, [pc, #84]	; (80034a8 <SystemInit+0xec>)
 8003452:	4a19      	ldr	r2, [pc, #100]	; (80034b8 <SystemInit+0xfc>)
 8003454:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003456:	4b14      	ldr	r3, [pc, #80]	; (80034a8 <SystemInit+0xec>)
 8003458:	2200      	movs	r2, #0
 800345a:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 800345c:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <SystemInit+0xec>)
 800345e:	4a16      	ldr	r2, [pc, #88]	; (80034b8 <SystemInit+0xfc>)
 8003460:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003462:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <SystemInit+0xec>)
 8003464:	2200      	movs	r2, #0
 8003466:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003468:	4b0f      	ldr	r3, [pc, #60]	; (80034a8 <SystemInit+0xec>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a0e      	ldr	r2, [pc, #56]	; (80034a8 <SystemInit+0xec>)
 800346e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003472:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003474:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <SystemInit+0xec>)
 8003476:	2200      	movs	r2, #0
 8003478:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800347a:	4b10      	ldr	r3, [pc, #64]	; (80034bc <SystemInit+0x100>)
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	4b10      	ldr	r3, [pc, #64]	; (80034c0 <SystemInit+0x104>)
 8003480:	4013      	ands	r3, r2
 8003482:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003486:	d202      	bcs.n	800348e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003488:	4b0e      	ldr	r3, [pc, #56]	; (80034c4 <SystemInit+0x108>)
 800348a:	2201      	movs	r2, #1
 800348c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800348e:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <SystemInit+0x10c>)
 8003490:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003494:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003496:	bf00      	nop
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	e000ed00 	.word	0xe000ed00
 80034a4:	52002000 	.word	0x52002000
 80034a8:	58024400 	.word	0x58024400
 80034ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80034b0:	02020200 	.word	0x02020200
 80034b4:	01ff0000 	.word	0x01ff0000
 80034b8:	01010280 	.word	0x01010280
 80034bc:	5c001000 	.word	0x5c001000
 80034c0:	ffff0000 	.word	0xffff0000
 80034c4:	51008108 	.word	0x51008108
 80034c8:	52004000 	.word	0x52004000

080034cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80034cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003504 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80034d0:	f7ff ff74 	bl	80033bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034d4:	480c      	ldr	r0, [pc, #48]	; (8003508 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80034d6:	490d      	ldr	r1, [pc, #52]	; (800350c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80034d8:	4a0d      	ldr	r2, [pc, #52]	; (8003510 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80034da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034dc:	e002      	b.n	80034e4 <LoopCopyDataInit>

080034de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034e2:	3304      	adds	r3, #4

080034e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034e8:	d3f9      	bcc.n	80034de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034ea:	4a0a      	ldr	r2, [pc, #40]	; (8003514 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80034ec:	4c0a      	ldr	r4, [pc, #40]	; (8003518 <LoopFillZerobss+0x22>)
  movs r3, #0
 80034ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034f0:	e001      	b.n	80034f6 <LoopFillZerobss>

080034f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034f4:	3204      	adds	r2, #4

080034f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034f8:	d3fb      	bcc.n	80034f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034fa:	f011 f925 	bl	8014748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034fe:	f7fd fca1 	bl	8000e44 <main>
  bx  lr
 8003502:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003504:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003508:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800350c:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 8003510:	080155e0 	.word	0x080155e0
  ldr r2, =_sbss
 8003514:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 8003518:	2400559c 	.word	0x2400559c

0800351c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800351c:	e7fe      	b.n	800351c <ADC3_IRQHandler>
	...

08003520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003526:	2003      	movs	r0, #3
 8003528:	f001 fd39 	bl	8004f9e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800352c:	f006 f930 	bl	8009790 <HAL_RCC_GetSysClockFreq>
 8003530:	4602      	mov	r2, r0
 8003532:	4b15      	ldr	r3, [pc, #84]	; (8003588 <HAL_Init+0x68>)
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	0a1b      	lsrs	r3, r3, #8
 8003538:	f003 030f 	and.w	r3, r3, #15
 800353c:	4913      	ldr	r1, [pc, #76]	; (800358c <HAL_Init+0x6c>)
 800353e:	5ccb      	ldrb	r3, [r1, r3]
 8003540:	f003 031f 	and.w	r3, r3, #31
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
 8003548:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800354a:	4b0f      	ldr	r3, [pc, #60]	; (8003588 <HAL_Init+0x68>)
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	4a0e      	ldr	r2, [pc, #56]	; (800358c <HAL_Init+0x6c>)
 8003554:	5cd3      	ldrb	r3, [r2, r3]
 8003556:	f003 031f 	and.w	r3, r3, #31
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	fa22 f303 	lsr.w	r3, r2, r3
 8003560:	4a0b      	ldr	r2, [pc, #44]	; (8003590 <HAL_Init+0x70>)
 8003562:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003564:	4a0b      	ldr	r2, [pc, #44]	; (8003594 <HAL_Init+0x74>)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800356a:	2005      	movs	r0, #5
 800356c:	f7ff fd60 	bl	8003030 <HAL_InitTick>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e002      	b.n	8003580 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800357a:	f7ff f8fb 	bl	8002774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	58024400 	.word	0x58024400
 800358c:	0801552c 	.word	0x0801552c
 8003590:	2400008c 	.word	0x2400008c
 8003594:	24000088 	.word	0x24000088

08003598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800359c:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <HAL_IncTick+0x20>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	461a      	mov	r2, r3
 80035a2:	4b06      	ldr	r3, [pc, #24]	; (80035bc <HAL_IncTick+0x24>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4413      	add	r3, r2
 80035a8:	4a04      	ldr	r2, [pc, #16]	; (80035bc <HAL_IncTick+0x24>)
 80035aa:	6013      	str	r3, [r2, #0]
}
 80035ac:	bf00      	nop
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	24000094 	.word	0x24000094
 80035bc:	24000c38 	.word	0x24000c38

080035c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  return uwTick;
 80035c4:	4b03      	ldr	r3, [pc, #12]	; (80035d4 <HAL_GetTick+0x14>)
 80035c6:	681b      	ldr	r3, [r3, #0]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	24000c38 	.word	0x24000c38

080035d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80035dc:	4b03      	ldr	r3, [pc, #12]	; (80035ec <HAL_GetREVID+0x14>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	0c1b      	lsrs	r3, r3, #16
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	5c001000 	.word	0x5c001000

080035f0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80035fa:	4b07      	ldr	r3, [pc, #28]	; (8003618 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	43db      	mvns	r3, r3
 8003602:	401a      	ands	r2, r3
 8003604:	4904      	ldr	r1, [pc, #16]	; (8003618 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	4313      	orrs	r3, r2
 800360a:	604b      	str	r3, [r1, #4]
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	58000400 	.word	0x58000400

0800361c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	431a      	orrs	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	609a      	str	r2, [r3, #8]
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	609a      	str	r2, [r3, #8]
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003678:	4618      	mov	r0, r3
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	3360      	adds	r3, #96	; 0x60
 8003696:	461a      	mov	r2, r3
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	430b      	orrs	r3, r1
 80036b2:	431a      	orrs	r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80036b8:	bf00      	nop
 80036ba:	371c      	adds	r7, #28
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	fa01 f303 	lsl.w	r3, r1, r3
 80036e4:	431a      	orrs	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	611a      	str	r2, [r3, #16]
}
 80036ea:	bf00      	nop
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b087      	sub	sp, #28
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	3360      	adds	r3, #96	; 0x60
 8003706:	461a      	mov	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	431a      	orrs	r2, r3
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	601a      	str	r2, [r3, #0]
  }
}
 8003720:	bf00      	nop
 8003722:	371c      	adds	r7, #28
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003740:	2301      	movs	r3, #1
 8003742:	e000      	b.n	8003746 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003752:	b480      	push	{r7}
 8003754:	b087      	sub	sp, #28
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	3330      	adds	r3, #48	; 0x30
 8003762:	461a      	mov	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	0a1b      	lsrs	r3, r3, #8
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	f003 030c 	and.w	r3, r3, #12
 800376e:	4413      	add	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f003 031f 	and.w	r3, r3, #31
 800377c:	211f      	movs	r1, #31
 800377e:	fa01 f303 	lsl.w	r3, r1, r3
 8003782:	43db      	mvns	r3, r3
 8003784:	401a      	ands	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	0e9b      	lsrs	r3, r3, #26
 800378a:	f003 011f 	and.w	r1, r3, #31
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f003 031f 	and.w	r3, r3, #31
 8003794:	fa01 f303 	lsl.w	r3, r1, r3
 8003798:	431a      	orrs	r2, r3
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800379e:	bf00      	nop
 80037a0:	371c      	adds	r7, #28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
 80037b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f023 0203 	bic.w	r2, r3, #3
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	60da      	str	r2, [r3, #12]
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	3314      	adds	r3, #20
 80037e0:	461a      	mov	r2, r3
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	0e5b      	lsrs	r3, r3, #25
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	4413      	add	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	0d1b      	lsrs	r3, r3, #20
 80037f8:	f003 031f 	and.w	r3, r3, #31
 80037fc:	2107      	movs	r1, #7
 80037fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003802:	43db      	mvns	r3, r3
 8003804:	401a      	ands	r2, r3
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	0d1b      	lsrs	r3, r3, #20
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	fa01 f303 	lsl.w	r3, r1, r3
 8003814:	431a      	orrs	r2, r3
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800381a:	bf00      	nop
 800381c:	371c      	adds	r7, #28
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
	...

08003828 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003840:	43db      	mvns	r3, r3
 8003842:	401a      	ands	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f003 0318 	and.w	r3, r3, #24
 800384a:	4908      	ldr	r1, [pc, #32]	; (800386c <LL_ADC_SetChannelSingleDiff+0x44>)
 800384c:	40d9      	lsrs	r1, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	400b      	ands	r3, r1
 8003852:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003856:	431a      	orrs	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800385e:	bf00      	nop
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	000fffff 	.word	0x000fffff

08003870 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 031f 	and.w	r3, r3, #31
}
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	4b04      	ldr	r3, [pc, #16]	; (80038ac <LL_ADC_DisableDeepPowerDown+0x20>)
 800389a:	4013      	ands	r3, r2
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6093      	str	r3, [r2, #8]
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	5fffffc0 	.word	0x5fffffc0

080038b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038c4:	d101      	bne.n	80038ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <LL_ADC_EnableInternalRegulator+0x24>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	6fffffc0 	.word	0x6fffffc0

08003900 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003910:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003914:	d101      	bne.n	800391a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	4b05      	ldr	r3, [pc, #20]	; (800394c <LL_ADC_Enable+0x24>)
 8003936:	4013      	ands	r3, r2
 8003938:	f043 0201 	orr.w	r2, r3, #1
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	7fffffc0 	.word	0x7fffffc0

08003950 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <LL_ADC_Disable+0x24>)
 800395e:	4013      	ands	r3, r2
 8003960:	f043 0202 	orr.w	r2, r3, #2
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	7fffffc0 	.word	0x7fffffc0

08003978 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <LL_ADC_IsEnabled+0x18>
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <LL_ADC_IsEnabled+0x1a>
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800399e:	b480      	push	{r7}
 80039a0:	b083      	sub	sp, #12
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d101      	bne.n	80039b6 <LL_ADC_IsDisableOngoing+0x18>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <LL_ADC_IsDisableOngoing+0x1a>
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <LL_ADC_REG_StartConversion+0x24>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	f043 0204 	orr.w	r2, r3, #4
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	7fffffc0 	.word	0x7fffffc0

080039ec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d101      	bne.n	8003a04 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a00:	2301      	movs	r3, #1
 8003a02:	e000      	b.n	8003a06 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d101      	bne.n	8003a2a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a38:	b590      	push	{r4, r7, lr}
 8003a3a:	b089      	sub	sp, #36	; 0x24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e18f      	b.n	8003d72 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d109      	bne.n	8003a74 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7fe fea5 	bl	80027b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ff19 	bl	80038b0 <LL_ADC_IsDeepPowerDownEnabled>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d004      	beq.n	8003a8e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff feff 	bl	800388c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff ff34 	bl	8003900 <LL_ADC_IsInternalRegulatorEnabled>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d114      	bne.n	8003ac8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff ff18 	bl	80038d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003aa8:	4b87      	ldr	r3, [pc, #540]	; (8003cc8 <HAL_ADC_Init+0x290>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	099b      	lsrs	r3, r3, #6
 8003aae:	4a87      	ldr	r2, [pc, #540]	; (8003ccc <HAL_ADC_Init+0x294>)
 8003ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab4:	099b      	lsrs	r3, r3, #6
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003aba:	e002      	b.n	8003ac2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1f9      	bne.n	8003abc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff ff17 	bl	8003900 <LL_ADC_IsInternalRegulatorEnabled>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10d      	bne.n	8003af4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003adc:	f043 0210 	orr.w	r2, r3, #16
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae8:	f043 0201 	orr.w	r2, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff ff77 	bl	80039ec <LL_ADC_REG_IsConversionOngoing>
 8003afe:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f040 8129 	bne.w	8003d60 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f040 8125 	bne.w	8003d60 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b1e:	f043 0202 	orr.w	r2, r3, #2
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff ff24 	bl	8003978 <LL_ADC_IsEnabled>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d136      	bne.n	8003ba4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a65      	ldr	r2, [pc, #404]	; (8003cd0 <HAL_ADC_Init+0x298>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d004      	beq.n	8003b4a <HAL_ADC_Init+0x112>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a63      	ldr	r2, [pc, #396]	; (8003cd4 <HAL_ADC_Init+0x29c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d10e      	bne.n	8003b68 <HAL_ADC_Init+0x130>
 8003b4a:	4861      	ldr	r0, [pc, #388]	; (8003cd0 <HAL_ADC_Init+0x298>)
 8003b4c:	f7ff ff14 	bl	8003978 <LL_ADC_IsEnabled>
 8003b50:	4604      	mov	r4, r0
 8003b52:	4860      	ldr	r0, [pc, #384]	; (8003cd4 <HAL_ADC_Init+0x29c>)
 8003b54:	f7ff ff10 	bl	8003978 <LL_ADC_IsEnabled>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	4323      	orrs	r3, r4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	bf0c      	ite	eq
 8003b60:	2301      	moveq	r3, #1
 8003b62:	2300      	movne	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	e008      	b.n	8003b7a <HAL_ADC_Init+0x142>
 8003b68:	485b      	ldr	r0, [pc, #364]	; (8003cd8 <HAL_ADC_Init+0x2a0>)
 8003b6a:	f7ff ff05 	bl	8003978 <LL_ADC_IsEnabled>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	bf0c      	ite	eq
 8003b74:	2301      	moveq	r3, #1
 8003b76:	2300      	movne	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d012      	beq.n	8003ba4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a53      	ldr	r2, [pc, #332]	; (8003cd0 <HAL_ADC_Init+0x298>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d004      	beq.n	8003b92 <HAL_ADC_Init+0x15a>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a51      	ldr	r2, [pc, #324]	; (8003cd4 <HAL_ADC_Init+0x29c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d101      	bne.n	8003b96 <HAL_ADC_Init+0x15e>
 8003b92:	4a52      	ldr	r2, [pc, #328]	; (8003cdc <HAL_ADC_Init+0x2a4>)
 8003b94:	e000      	b.n	8003b98 <HAL_ADC_Init+0x160>
 8003b96:	4a52      	ldr	r2, [pc, #328]	; (8003ce0 <HAL_ADC_Init+0x2a8>)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4610      	mov	r0, r2
 8003ba0:	f7ff fd3c 	bl	800361c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003ba4:	f7ff fd18 	bl	80035d8 <HAL_GetREVID>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	f241 0203 	movw	r2, #4099	; 0x1003
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d914      	bls.n	8003bdc <HAL_ADC_Init+0x1a4>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b10      	cmp	r3, #16
 8003bb8:	d110      	bne.n	8003bdc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	7d5b      	ldrb	r3, [r3, #21]
 8003bbe:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003bc4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003bca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	7f1b      	ldrb	r3, [r3, #28]
 8003bd0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003bd2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003bd4:	f043 030c 	orr.w	r3, r3, #12
 8003bd8:	61bb      	str	r3, [r7, #24]
 8003bda:	e00d      	b.n	8003bf8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	7d5b      	ldrb	r3, [r3, #21]
 8003be0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003be6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003bec:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	7f1b      	ldrb	r3, [r3, #28]
 8003bf2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	7f1b      	ldrb	r3, [r3, #28]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d106      	bne.n	8003c0e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	3b01      	subs	r3, #1
 8003c06:	045b      	lsls	r3, r3, #17
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d009      	beq.n	8003c2a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c22:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	4b2c      	ldr	r3, [pc, #176]	; (8003ce4 <HAL_ADC_Init+0x2ac>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6812      	ldr	r2, [r2, #0]
 8003c38:	69b9      	ldr	r1, [r7, #24]
 8003c3a:	430b      	orrs	r3, r1
 8003c3c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff fed2 	bl	80039ec <LL_ADC_REG_IsConversionOngoing>
 8003c48:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff fedf 	bl	8003a12 <LL_ADC_INJ_IsConversionOngoing>
 8003c54:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d15f      	bne.n	8003d1c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d15c      	bne.n	8003d1c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	7d1b      	ldrb	r3, [r3, #20]
 8003c66:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	4b1c      	ldr	r3, [pc, #112]	; (8003ce8 <HAL_ADC_Init+0x2b0>)
 8003c78:	4013      	ands	r3, r2
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6812      	ldr	r2, [r2, #0]
 8003c7e:	69b9      	ldr	r1, [r7, #24]
 8003c80:	430b      	orrs	r3, r1
 8003c82:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d130      	bne.n	8003cf0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691a      	ldr	r2, [r3, #16]
 8003c9a:	4b14      	ldr	r3, [pc, #80]	; (8003cec <HAL_ADC_Init+0x2b4>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ca2:	3a01      	subs	r2, #1
 8003ca4:	0411      	lsls	r1, r2, #16
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003caa:	4311      	orrs	r1, r2
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003cb0:	4311      	orrs	r1, r2
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	611a      	str	r2, [r3, #16]
 8003cc4:	e01c      	b.n	8003d00 <HAL_ADC_Init+0x2c8>
 8003cc6:	bf00      	nop
 8003cc8:	24000088 	.word	0x24000088
 8003ccc:	053e2d63 	.word	0x053e2d63
 8003cd0:	40022000 	.word	0x40022000
 8003cd4:	40022100 	.word	0x40022100
 8003cd8:	58026000 	.word	0x58026000
 8003cdc:	40022300 	.word	0x40022300
 8003ce0:	58026300 	.word	0x58026300
 8003ce4:	fff0c003 	.word	0xfff0c003
 8003ce8:	ffffbffc 	.word	0xffffbffc
 8003cec:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0201 	bic.w	r2, r2, #1
 8003cfe:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fdec 	bl	80048f4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d10c      	bne.n	8003d3e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	f023 010f 	bic.w	r1, r3, #15
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	1e5a      	subs	r2, r3, #1
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	631a      	str	r2, [r3, #48]	; 0x30
 8003d3c:	e007      	b.n	8003d4e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 020f 	bic.w	r2, r2, #15
 8003d4c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d52:	f023 0303 	bic.w	r3, r3, #3
 8003d56:	f043 0201 	orr.w	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	655a      	str	r2, [r3, #84]	; 0x54
 8003d5e:	e007      	b.n	8003d70 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d64:	f043 0210 	orr.w	r2, r3, #16
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d70:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3724      	adds	r7, #36	; 0x24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd90      	pop	{r4, r7, pc}
 8003d7a:	bf00      	nop

08003d7c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a55      	ldr	r2, [pc, #340]	; (8003ee4 <HAL_ADC_Start_DMA+0x168>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d004      	beq.n	8003d9c <HAL_ADC_Start_DMA+0x20>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a54      	ldr	r2, [pc, #336]	; (8003ee8 <HAL_ADC_Start_DMA+0x16c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d101      	bne.n	8003da0 <HAL_ADC_Start_DMA+0x24>
 8003d9c:	4b53      	ldr	r3, [pc, #332]	; (8003eec <HAL_ADC_Start_DMA+0x170>)
 8003d9e:	e000      	b.n	8003da2 <HAL_ADC_Start_DMA+0x26>
 8003da0:	4b53      	ldr	r3, [pc, #332]	; (8003ef0 <HAL_ADC_Start_DMA+0x174>)
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff fd64 	bl	8003870 <LL_ADC_GetMultimode>
 8003da8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff fe1c 	bl	80039ec <LL_ADC_REG_IsConversionOngoing>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f040 808c 	bne.w	8003ed4 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_ADC_Start_DMA+0x4e>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e087      	b.n	8003eda <HAL_ADC_Start_DMA+0x15e>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d005      	beq.n	8003de4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	2b05      	cmp	r3, #5
 8003ddc:	d002      	beq.n	8003de4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	2b09      	cmp	r3, #9
 8003de2:	d170      	bne.n	8003ec6 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 fc07 	bl	80045f8 <ADC_Enable>
 8003dea:	4603      	mov	r3, r0
 8003dec:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003dee:	7dfb      	ldrb	r3, [r7, #23]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d163      	bne.n	8003ebc <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003df8:	4b3e      	ldr	r3, [pc, #248]	; (8003ef4 <HAL_ADC_Start_DMA+0x178>)
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a37      	ldr	r2, [pc, #220]	; (8003ee8 <HAL_ADC_Start_DMA+0x16c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d002      	beq.n	8003e14 <HAL_ADC_Start_DMA+0x98>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	e000      	b.n	8003e16 <HAL_ADC_Start_DMA+0x9a>
 8003e14:	4b33      	ldr	r3, [pc, #204]	; (8003ee4 <HAL_ADC_Start_DMA+0x168>)
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	6812      	ldr	r2, [r2, #0]
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d002      	beq.n	8003e24 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d105      	bne.n	8003e30 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e28:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d006      	beq.n	8003e4a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e40:	f023 0206 	bic.w	r2, r3, #6
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	659a      	str	r2, [r3, #88]	; 0x58
 8003e48:	e002      	b.n	8003e50 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e54:	4a28      	ldr	r2, [pc, #160]	; (8003ef8 <HAL_ADC_Start_DMA+0x17c>)
 8003e56:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5c:	4a27      	ldr	r2, [pc, #156]	; (8003efc <HAL_ADC_Start_DMA+0x180>)
 8003e5e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e64:	4a26      	ldr	r2, [pc, #152]	; (8003f00 <HAL_ADC_Start_DMA+0x184>)
 8003e66:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	221c      	movs	r2, #28
 8003e6e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0210 	orr.w	r2, r2, #16
 8003e86:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	4619      	mov	r1, r3
 8003e92:	4610      	mov	r0, r2
 8003e94:	f7ff fc89 	bl	80037aa <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3340      	adds	r3, #64	; 0x40
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f002 f80e 	bl	8005ec8 <HAL_DMA_Start_IT>
 8003eac:	4603      	mov	r3, r0
 8003eae:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff fd85 	bl	80039c4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003eba:	e00d      	b.n	8003ed8 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003ec4:	e008      	b.n	8003ed8 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003ed2:	e001      	b.n	8003ed8 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40022000 	.word	0x40022000
 8003ee8:	40022100 	.word	0x40022100
 8003eec:	40022300 	.word	0x40022300
 8003ef0:	58026300 	.word	0x58026300
 8003ef4:	fffff0fe 	.word	0xfffff0fe
 8003ef8:	080047cb 	.word	0x080047cb
 8003efc:	080048a3 	.word	0x080048a3
 8003f00:	080048bf 	.word	0x080048bf

08003f04 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003f40:	b590      	push	{r4, r7, lr}
 8003f42:	b0a1      	sub	sp, #132	; 0x84
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003f50:	2300      	movs	r3, #0
 8003f52:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	4a65      	ldr	r2, [pc, #404]	; (80040f0 <HAL_ADC_ConfigChannel+0x1b0>)
 8003f5a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <HAL_ADC_ConfigChannel+0x2a>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e32e      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x688>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff fd38 	bl	80039ec <LL_ADC_REG_IsConversionOngoing>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f040 8313 	bne.w	80045aa <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	db2c      	blt.n	8003fe6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d108      	bne.n	8003faa <HAL_ADC_ConfigChannel+0x6a>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	0e9b      	lsrs	r3, r3, #26
 8003f9e:	f003 031f 	and.w	r3, r3, #31
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	e016      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x98>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fb2:	fa93 f3a3 	rbit	r3, r3
 8003fb6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fba:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003fbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003fc2:	2320      	movs	r3, #32
 8003fc4:	e003      	b.n	8003fce <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003fc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fc8:	fab3 f383 	clz	r3, r3
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	f003 031f 	and.w	r3, r3, #31
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	69d1      	ldr	r1, [r2, #28]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6812      	ldr	r2, [r2, #0]
 8003fe2:	430b      	orrs	r3, r1
 8003fe4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	6859      	ldr	r1, [r3, #4]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f7ff fbad 	bl	8003752 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff fcf5 	bl	80039ec <LL_ADC_REG_IsConversionOngoing>
 8004002:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff fd02 	bl	8003a12 <LL_ADC_INJ_IsConversionOngoing>
 800400e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004012:	2b00      	cmp	r3, #0
 8004014:	f040 80b8 	bne.w	8004188 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004018:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800401a:	2b00      	cmp	r3, #0
 800401c:	f040 80b4 	bne.w	8004188 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6818      	ldr	r0, [r3, #0]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	6819      	ldr	r1, [r3, #0]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	461a      	mov	r2, r3
 800402e:	f7ff fbcf 	bl	80037d0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004032:	4b30      	ldr	r3, [pc, #192]	; (80040f4 <HAL_ADC_ConfigChannel+0x1b4>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800403a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800403e:	d10b      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x118>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	695a      	ldr	r2, [r3, #20]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	089b      	lsrs	r3, r3, #2
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	e01d      	b.n	8004094 <HAL_ADC_ConfigChannel+0x154>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f003 0310 	and.w	r3, r3, #16
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10b      	bne.n	800407e <HAL_ADC_ConfigChannel+0x13e>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	695a      	ldr	r2, [r3, #20]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	089b      	lsrs	r3, r3, #2
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	e00a      	b.n	8004094 <HAL_ADC_ConfigChannel+0x154>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	695a      	ldr	r2, [r3, #20]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	089b      	lsrs	r3, r3, #2
 800408a:	f003 0304 	and.w	r3, r3, #4
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b04      	cmp	r3, #4
 800409c:	d02c      	beq.n	80040f8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6818      	ldr	r0, [r3, #0]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	6919      	ldr	r1, [r3, #16]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040ac:	f7ff faea 	bl	8003684 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	6919      	ldr	r1, [r3, #16]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	7e5b      	ldrb	r3, [r3, #25]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d102      	bne.n	80040c6 <HAL_ADC_ConfigChannel+0x186>
 80040c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80040c4:	e000      	b.n	80040c8 <HAL_ADC_ConfigChannel+0x188>
 80040c6:	2300      	movs	r3, #0
 80040c8:	461a      	mov	r2, r3
 80040ca:	f7ff fb14 	bl	80036f6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6818      	ldr	r0, [r3, #0]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	6919      	ldr	r1, [r3, #16]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	7e1b      	ldrb	r3, [r3, #24]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d102      	bne.n	80040e4 <HAL_ADC_ConfigChannel+0x1a4>
 80040de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040e2:	e000      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x1a6>
 80040e4:	2300      	movs	r3, #0
 80040e6:	461a      	mov	r2, r3
 80040e8:	f7ff faec 	bl	80036c4 <LL_ADC_SetDataRightShift>
 80040ec:	e04c      	b.n	8004188 <HAL_ADC_ConfigChannel+0x248>
 80040ee:	bf00      	nop
 80040f0:	47ff0000 	.word	0x47ff0000
 80040f4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	069b      	lsls	r3, r3, #26
 8004108:	429a      	cmp	r2, r3
 800410a:	d107      	bne.n	800411c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800411a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004122:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	069b      	lsls	r3, r3, #26
 800412c:	429a      	cmp	r2, r3
 800412e:	d107      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800413e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004146:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	069b      	lsls	r3, r3, #26
 8004150:	429a      	cmp	r2, r3
 8004152:	d107      	bne.n	8004164 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004162:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800416a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	069b      	lsls	r3, r3, #26
 8004174:	429a      	cmp	r2, r3
 8004176:	d107      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004186:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff fbf3 	bl	8003978 <LL_ADC_IsEnabled>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	f040 8211 	bne.w	80045bc <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	6819      	ldr	r1, [r3, #0]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	461a      	mov	r2, r3
 80041a8:	f7ff fb3e 	bl	8003828 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	4aa1      	ldr	r2, [pc, #644]	; (8004438 <HAL_ADC_ConfigChannel+0x4f8>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	f040 812e 	bne.w	8004414 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10b      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0x2a0>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	0e9b      	lsrs	r3, r3, #26
 80041ce:	3301      	adds	r3, #1
 80041d0:	f003 031f 	and.w	r3, r3, #31
 80041d4:	2b09      	cmp	r3, #9
 80041d6:	bf94      	ite	ls
 80041d8:	2301      	movls	r3, #1
 80041da:	2300      	movhi	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	e019      	b.n	8004214 <HAL_ADC_ConfigChannel+0x2d4>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041e8:	fa93 f3a3 	rbit	r3, r3
 80041ec:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80041ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80041f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80041f8:	2320      	movs	r3, #32
 80041fa:	e003      	b.n	8004204 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80041fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041fe:	fab3 f383 	clz	r3, r3
 8004202:	b2db      	uxtb	r3, r3
 8004204:	3301      	adds	r3, #1
 8004206:	f003 031f 	and.w	r3, r3, #31
 800420a:	2b09      	cmp	r3, #9
 800420c:	bf94      	ite	ls
 800420e:	2301      	movls	r3, #1
 8004210:	2300      	movhi	r3, #0
 8004212:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004214:	2b00      	cmp	r3, #0
 8004216:	d079      	beq.n	800430c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004220:	2b00      	cmp	r3, #0
 8004222:	d107      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x2f4>
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	0e9b      	lsrs	r3, r3, #26
 800422a:	3301      	adds	r3, #1
 800422c:	069b      	lsls	r3, r3, #26
 800422e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004232:	e015      	b.n	8004260 <HAL_ADC_ConfigChannel+0x320>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800423c:	fa93 f3a3 	rbit	r3, r3
 8004240:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004244:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 800424c:	2320      	movs	r3, #32
 800424e:	e003      	b.n	8004258 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004252:	fab3 f383 	clz	r3, r3
 8004256:	b2db      	uxtb	r3, r3
 8004258:	3301      	adds	r3, #1
 800425a:	069b      	lsls	r3, r3, #26
 800425c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004268:	2b00      	cmp	r3, #0
 800426a:	d109      	bne.n	8004280 <HAL_ADC_ConfigChannel+0x340>
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	0e9b      	lsrs	r3, r3, #26
 8004272:	3301      	adds	r3, #1
 8004274:	f003 031f 	and.w	r3, r3, #31
 8004278:	2101      	movs	r1, #1
 800427a:	fa01 f303 	lsl.w	r3, r1, r3
 800427e:	e017      	b.n	80042b0 <HAL_ADC_ConfigChannel+0x370>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004288:	fa93 f3a3 	rbit	r3, r3
 800428c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800428e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004290:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004292:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004298:	2320      	movs	r3, #32
 800429a:	e003      	b.n	80042a4 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 800429c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800429e:	fab3 f383 	clz	r3, r3
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	3301      	adds	r3, #1
 80042a6:	f003 031f 	and.w	r3, r3, #31
 80042aa:	2101      	movs	r1, #1
 80042ac:	fa01 f303 	lsl.w	r3, r1, r3
 80042b0:	ea42 0103 	orr.w	r1, r2, r3
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10a      	bne.n	80042d6 <HAL_ADC_ConfigChannel+0x396>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	0e9b      	lsrs	r3, r3, #26
 80042c6:	3301      	adds	r3, #1
 80042c8:	f003 021f 	and.w	r2, r3, #31
 80042cc:	4613      	mov	r3, r2
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	4413      	add	r3, r2
 80042d2:	051b      	lsls	r3, r3, #20
 80042d4:	e018      	b.n	8004308 <HAL_ADC_ConfigChannel+0x3c8>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042de:	fa93 f3a3 	rbit	r3, r3
 80042e2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80042e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80042e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80042ee:	2320      	movs	r3, #32
 80042f0:	e003      	b.n	80042fa <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80042f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f4:	fab3 f383 	clz	r3, r3
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	3301      	adds	r3, #1
 80042fc:	f003 021f 	and.w	r2, r3, #31
 8004300:	4613      	mov	r3, r2
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	4413      	add	r3, r2
 8004306:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004308:	430b      	orrs	r3, r1
 800430a:	e07e      	b.n	800440a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004314:	2b00      	cmp	r3, #0
 8004316:	d107      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x3e8>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	0e9b      	lsrs	r3, r3, #26
 800431e:	3301      	adds	r3, #1
 8004320:	069b      	lsls	r3, r3, #26
 8004322:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004326:	e015      	b.n	8004354 <HAL_ADC_ConfigChannel+0x414>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004330:	fa93 f3a3 	rbit	r3, r3
 8004334:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800433a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004340:	2320      	movs	r3, #32
 8004342:	e003      	b.n	800434c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004346:	fab3 f383 	clz	r3, r3
 800434a:	b2db      	uxtb	r3, r3
 800434c:	3301      	adds	r3, #1
 800434e:	069b      	lsls	r3, r3, #26
 8004350:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800435c:	2b00      	cmp	r3, #0
 800435e:	d109      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x434>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	0e9b      	lsrs	r3, r3, #26
 8004366:	3301      	adds	r3, #1
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	2101      	movs	r1, #1
 800436e:	fa01 f303 	lsl.w	r3, r1, r3
 8004372:	e017      	b.n	80043a4 <HAL_ADC_ConfigChannel+0x464>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	fa93 f3a3 	rbit	r3, r3
 8004380:	61bb      	str	r3, [r7, #24]
  return result;
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 800438c:	2320      	movs	r3, #32
 800438e:	e003      	b.n	8004398 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	fab3 f383 	clz	r3, r3
 8004396:	b2db      	uxtb	r3, r3
 8004398:	3301      	adds	r3, #1
 800439a:	f003 031f 	and.w	r3, r3, #31
 800439e:	2101      	movs	r1, #1
 80043a0:	fa01 f303 	lsl.w	r3, r1, r3
 80043a4:	ea42 0103 	orr.w	r1, r2, r3
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10d      	bne.n	80043d0 <HAL_ADC_ConfigChannel+0x490>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	0e9b      	lsrs	r3, r3, #26
 80043ba:	3301      	adds	r3, #1
 80043bc:	f003 021f 	and.w	r2, r3, #31
 80043c0:	4613      	mov	r3, r2
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	4413      	add	r3, r2
 80043c6:	3b1e      	subs	r3, #30
 80043c8:	051b      	lsls	r3, r3, #20
 80043ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043ce:	e01b      	b.n	8004408 <HAL_ADC_ConfigChannel+0x4c8>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	fa93 f3a3 	rbit	r3, r3
 80043dc:	60fb      	str	r3, [r7, #12]
  return result;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80043e8:	2320      	movs	r3, #32
 80043ea:	e003      	b.n	80043f4 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	fab3 f383 	clz	r3, r3
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	3301      	adds	r3, #1
 80043f6:	f003 021f 	and.w	r2, r3, #31
 80043fa:	4613      	mov	r3, r2
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	4413      	add	r3, r2
 8004400:	3b1e      	subs	r3, #30
 8004402:	051b      	lsls	r3, r3, #20
 8004404:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004408:	430b      	orrs	r3, r1
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	6892      	ldr	r2, [r2, #8]
 800440e:	4619      	mov	r1, r3
 8004410:	f7ff f9de 	bl	80037d0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	f280 80cf 	bge.w	80045bc <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a06      	ldr	r2, [pc, #24]	; (800443c <HAL_ADC_ConfigChannel+0x4fc>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d004      	beq.n	8004432 <HAL_ADC_ConfigChannel+0x4f2>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a04      	ldr	r2, [pc, #16]	; (8004440 <HAL_ADC_ConfigChannel+0x500>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d10a      	bne.n	8004448 <HAL_ADC_ConfigChannel+0x508>
 8004432:	4b04      	ldr	r3, [pc, #16]	; (8004444 <HAL_ADC_ConfigChannel+0x504>)
 8004434:	e009      	b.n	800444a <HAL_ADC_ConfigChannel+0x50a>
 8004436:	bf00      	nop
 8004438:	47ff0000 	.word	0x47ff0000
 800443c:	40022000 	.word	0x40022000
 8004440:	40022100 	.word	0x40022100
 8004444:	40022300 	.word	0x40022300
 8004448:	4b61      	ldr	r3, [pc, #388]	; (80045d0 <HAL_ADC_ConfigChannel+0x690>)
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff f90c 	bl	8003668 <LL_ADC_GetCommonPathInternalCh>
 8004450:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a5f      	ldr	r2, [pc, #380]	; (80045d4 <HAL_ADC_ConfigChannel+0x694>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d004      	beq.n	8004466 <HAL_ADC_ConfigChannel+0x526>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a5d      	ldr	r2, [pc, #372]	; (80045d8 <HAL_ADC_ConfigChannel+0x698>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d10e      	bne.n	8004484 <HAL_ADC_ConfigChannel+0x544>
 8004466:	485b      	ldr	r0, [pc, #364]	; (80045d4 <HAL_ADC_ConfigChannel+0x694>)
 8004468:	f7ff fa86 	bl	8003978 <LL_ADC_IsEnabled>
 800446c:	4604      	mov	r4, r0
 800446e:	485a      	ldr	r0, [pc, #360]	; (80045d8 <HAL_ADC_ConfigChannel+0x698>)
 8004470:	f7ff fa82 	bl	8003978 <LL_ADC_IsEnabled>
 8004474:	4603      	mov	r3, r0
 8004476:	4323      	orrs	r3, r4
 8004478:	2b00      	cmp	r3, #0
 800447a:	bf0c      	ite	eq
 800447c:	2301      	moveq	r3, #1
 800447e:	2300      	movne	r3, #0
 8004480:	b2db      	uxtb	r3, r3
 8004482:	e008      	b.n	8004496 <HAL_ADC_ConfigChannel+0x556>
 8004484:	4855      	ldr	r0, [pc, #340]	; (80045dc <HAL_ADC_ConfigChannel+0x69c>)
 8004486:	f7ff fa77 	bl	8003978 <LL_ADC_IsEnabled>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	bf0c      	ite	eq
 8004490:	2301      	moveq	r3, #1
 8004492:	2300      	movne	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d07d      	beq.n	8004596 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a50      	ldr	r2, [pc, #320]	; (80045e0 <HAL_ADC_ConfigChannel+0x6a0>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d130      	bne.n	8004506 <HAL_ADC_ConfigChannel+0x5c6>
 80044a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d12b      	bne.n	8004506 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a4a      	ldr	r2, [pc, #296]	; (80045dc <HAL_ADC_ConfigChannel+0x69c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	f040 8081 	bne.w	80045bc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a45      	ldr	r2, [pc, #276]	; (80045d4 <HAL_ADC_ConfigChannel+0x694>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d004      	beq.n	80044ce <HAL_ADC_ConfigChannel+0x58e>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a43      	ldr	r2, [pc, #268]	; (80045d8 <HAL_ADC_ConfigChannel+0x698>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d101      	bne.n	80044d2 <HAL_ADC_ConfigChannel+0x592>
 80044ce:	4a45      	ldr	r2, [pc, #276]	; (80045e4 <HAL_ADC_ConfigChannel+0x6a4>)
 80044d0:	e000      	b.n	80044d4 <HAL_ADC_ConfigChannel+0x594>
 80044d2:	4a3f      	ldr	r2, [pc, #252]	; (80045d0 <HAL_ADC_ConfigChannel+0x690>)
 80044d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044da:	4619      	mov	r1, r3
 80044dc:	4610      	mov	r0, r2
 80044de:	f7ff f8b0 	bl	8003642 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044e2:	4b41      	ldr	r3, [pc, #260]	; (80045e8 <HAL_ADC_ConfigChannel+0x6a8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	099b      	lsrs	r3, r3, #6
 80044e8:	4a40      	ldr	r2, [pc, #256]	; (80045ec <HAL_ADC_ConfigChannel+0x6ac>)
 80044ea:	fba2 2303 	umull	r2, r3, r2, r3
 80044ee:	099b      	lsrs	r3, r3, #6
 80044f0:	3301      	adds	r3, #1
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80044f6:	e002      	b.n	80044fe <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1f9      	bne.n	80044f8 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004504:	e05a      	b.n	80045bc <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a39      	ldr	r2, [pc, #228]	; (80045f0 <HAL_ADC_ConfigChannel+0x6b0>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d11e      	bne.n	800454e <HAL_ADC_ConfigChannel+0x60e>
 8004510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004512:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d119      	bne.n	800454e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a2f      	ldr	r2, [pc, #188]	; (80045dc <HAL_ADC_ConfigChannel+0x69c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d14b      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a2a      	ldr	r2, [pc, #168]	; (80045d4 <HAL_ADC_ConfigChannel+0x694>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d004      	beq.n	8004538 <HAL_ADC_ConfigChannel+0x5f8>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a29      	ldr	r2, [pc, #164]	; (80045d8 <HAL_ADC_ConfigChannel+0x698>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d101      	bne.n	800453c <HAL_ADC_ConfigChannel+0x5fc>
 8004538:	4a2a      	ldr	r2, [pc, #168]	; (80045e4 <HAL_ADC_ConfigChannel+0x6a4>)
 800453a:	e000      	b.n	800453e <HAL_ADC_ConfigChannel+0x5fe>
 800453c:	4a24      	ldr	r2, [pc, #144]	; (80045d0 <HAL_ADC_ConfigChannel+0x690>)
 800453e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004540:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004544:	4619      	mov	r1, r3
 8004546:	4610      	mov	r0, r2
 8004548:	f7ff f87b 	bl	8003642 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800454c:	e036      	b.n	80045bc <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a28      	ldr	r2, [pc, #160]	; (80045f4 <HAL_ADC_ConfigChannel+0x6b4>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d131      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x67c>
 8004558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800455a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d12c      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a1d      	ldr	r2, [pc, #116]	; (80045dc <HAL_ADC_ConfigChannel+0x69c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d127      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a18      	ldr	r2, [pc, #96]	; (80045d4 <HAL_ADC_ConfigChannel+0x694>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d004      	beq.n	8004580 <HAL_ADC_ConfigChannel+0x640>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a17      	ldr	r2, [pc, #92]	; (80045d8 <HAL_ADC_ConfigChannel+0x698>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d101      	bne.n	8004584 <HAL_ADC_ConfigChannel+0x644>
 8004580:	4a18      	ldr	r2, [pc, #96]	; (80045e4 <HAL_ADC_ConfigChannel+0x6a4>)
 8004582:	e000      	b.n	8004586 <HAL_ADC_ConfigChannel+0x646>
 8004584:	4a12      	ldr	r2, [pc, #72]	; (80045d0 <HAL_ADC_ConfigChannel+0x690>)
 8004586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004588:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800458c:	4619      	mov	r1, r3
 800458e:	4610      	mov	r0, r2
 8004590:	f7ff f857 	bl	8003642 <LL_ADC_SetCommonPathInternalCh>
 8004594:	e012      	b.n	80045bc <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459a:	f043 0220 	orr.w	r2, r3, #32
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80045a8:	e008      	b.n	80045bc <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ae:	f043 0220 	orr.w	r2, r3, #32
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80045c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3784      	adds	r7, #132	; 0x84
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd90      	pop	{r4, r7, pc}
 80045d0:	58026300 	.word	0x58026300
 80045d4:	40022000 	.word	0x40022000
 80045d8:	40022100 	.word	0x40022100
 80045dc:	58026000 	.word	0x58026000
 80045e0:	cb840000 	.word	0xcb840000
 80045e4:	40022300 	.word	0x40022300
 80045e8:	24000088 	.word	0x24000088
 80045ec:	053e2d63 	.word	0x053e2d63
 80045f0:	c7520000 	.word	0xc7520000
 80045f4:	cfb80000 	.word	0xcfb80000

080045f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4618      	mov	r0, r3
 8004606:	f7ff f9b7 	bl	8003978 <LL_ADC_IsEnabled>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d16e      	bne.n	80046ee <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689a      	ldr	r2, [r3, #8]
 8004616:	4b38      	ldr	r3, [pc, #224]	; (80046f8 <ADC_Enable+0x100>)
 8004618:	4013      	ands	r3, r2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00d      	beq.n	800463a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004622:	f043 0210 	orr.w	r2, r3, #16
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462e:	f043 0201 	orr.w	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e05a      	b.n	80046f0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff f972 	bl	8003928 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004644:	f7fe ffbc 	bl	80035c0 <HAL_GetTick>
 8004648:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a2b      	ldr	r2, [pc, #172]	; (80046fc <ADC_Enable+0x104>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d004      	beq.n	800465e <ADC_Enable+0x66>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a29      	ldr	r2, [pc, #164]	; (8004700 <ADC_Enable+0x108>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d101      	bne.n	8004662 <ADC_Enable+0x6a>
 800465e:	4b29      	ldr	r3, [pc, #164]	; (8004704 <ADC_Enable+0x10c>)
 8004660:	e000      	b.n	8004664 <ADC_Enable+0x6c>
 8004662:	4b29      	ldr	r3, [pc, #164]	; (8004708 <ADC_Enable+0x110>)
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff f903 	bl	8003870 <LL_ADC_GetMultimode>
 800466a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a23      	ldr	r2, [pc, #140]	; (8004700 <ADC_Enable+0x108>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d002      	beq.n	800467c <ADC_Enable+0x84>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	e000      	b.n	800467e <ADC_Enable+0x86>
 800467c:	4b1f      	ldr	r3, [pc, #124]	; (80046fc <ADC_Enable+0x104>)
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6812      	ldr	r2, [r2, #0]
 8004682:	4293      	cmp	r3, r2
 8004684:	d02c      	beq.n	80046e0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d130      	bne.n	80046ee <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800468c:	e028      	b.n	80046e0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff f970 	bl	8003978 <LL_ADC_IsEnabled>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d104      	bne.n	80046a8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff f940 	bl	8003928 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80046a8:	f7fe ff8a 	bl	80035c0 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d914      	bls.n	80046e0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d00d      	beq.n	80046e0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c8:	f043 0210 	orr.w	r2, r3, #16
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d4:	f043 0201 	orr.w	r2, r3, #1
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e007      	b.n	80046f0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d1cf      	bne.n	800468e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	8000003f 	.word	0x8000003f
 80046fc:	40022000 	.word	0x40022000
 8004700:	40022100 	.word	0x40022100
 8004704:	40022300 	.word	0x40022300
 8004708:	58026300 	.word	0x58026300

0800470c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4618      	mov	r0, r3
 800471a:	f7ff f940 	bl	800399e <LL_ADC_IsDisableOngoing>
 800471e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff f927 	bl	8003978 <LL_ADC_IsEnabled>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d047      	beq.n	80047c0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d144      	bne.n	80047c0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f003 030d 	and.w	r3, r3, #13
 8004740:	2b01      	cmp	r3, #1
 8004742:	d10c      	bne.n	800475e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff f901 	bl	8003950 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2203      	movs	r2, #3
 8004754:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004756:	f7fe ff33 	bl	80035c0 <HAL_GetTick>
 800475a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800475c:	e029      	b.n	80047b2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004762:	f043 0210 	orr.w	r2, r3, #16
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476e:	f043 0201 	orr.w	r2, r3, #1
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e023      	b.n	80047c2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800477a:	f7fe ff21 	bl	80035c0 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d914      	bls.n	80047b2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00d      	beq.n	80047b2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479a:	f043 0210 	orr.w	r2, r3, #16
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a6:	f043 0201 	orr.w	r2, r3, #1
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e007      	b.n	80047c2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1dc      	bne.n	800477a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b084      	sub	sp, #16
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d14b      	bne.n	800487c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d021      	beq.n	8004842 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f7fe ff92 	bl	800372c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d032      	beq.n	8004874 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d12b      	bne.n	8004874 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004820:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d11f      	bne.n	8004874 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004838:	f043 0201 	orr.w	r2, r3, #1
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	655a      	str	r2, [r3, #84]	; 0x54
 8004840:	e018      	b.n	8004874 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 0303 	and.w	r3, r3, #3
 800484c:	2b00      	cmp	r3, #0
 800484e:	d111      	bne.n	8004874 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004854:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004860:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d105      	bne.n	8004874 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486c:	f043 0201 	orr.w	r2, r3, #1
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f7ff fb45 	bl	8003f04 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800487a:	e00e      	b.n	800489a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004880:	f003 0310 	and.w	r3, r3, #16
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f7ff fb4f 	bl	8003f2c <HAL_ADC_ErrorCallback>
}
 800488e:	e004      	b.n	800489a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	4798      	blx	r3
}
 800489a:	bf00      	nop
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b084      	sub	sp, #16
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f7ff fb31 	bl	8003f18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048b6:	bf00      	nop
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b084      	sub	sp, #16
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048dc:	f043 0204 	orr.w	r2, r3, #4
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f7ff fb21 	bl	8003f2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048ea:	bf00      	nop
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
	...

080048f4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a7a      	ldr	r2, [pc, #488]	; (8004aec <ADC_ConfigureBoostMode+0x1f8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d004      	beq.n	8004910 <ADC_ConfigureBoostMode+0x1c>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a79      	ldr	r2, [pc, #484]	; (8004af0 <ADC_ConfigureBoostMode+0x1fc>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d109      	bne.n	8004924 <ADC_ConfigureBoostMode+0x30>
 8004910:	4b78      	ldr	r3, [pc, #480]	; (8004af4 <ADC_ConfigureBoostMode+0x200>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004918:	2b00      	cmp	r3, #0
 800491a:	bf14      	ite	ne
 800491c:	2301      	movne	r3, #1
 800491e:	2300      	moveq	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	e008      	b.n	8004936 <ADC_ConfigureBoostMode+0x42>
 8004924:	4b74      	ldr	r3, [pc, #464]	; (8004af8 <ADC_ConfigureBoostMode+0x204>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800492c:	2b00      	cmp	r3, #0
 800492e:	bf14      	ite	ne
 8004930:	2301      	movne	r3, #1
 8004932:	2300      	moveq	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d01c      	beq.n	8004974 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800493a:	f005 f8a3 	bl	8009a84 <HAL_RCC_GetHCLKFreq>
 800493e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004948:	d010      	beq.n	800496c <ADC_ConfigureBoostMode+0x78>
 800494a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800494e:	d873      	bhi.n	8004a38 <ADC_ConfigureBoostMode+0x144>
 8004950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004954:	d002      	beq.n	800495c <ADC_ConfigureBoostMode+0x68>
 8004956:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800495a:	d16d      	bne.n	8004a38 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	0c1b      	lsrs	r3, r3, #16
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	fbb2 f3f3 	udiv	r3, r2, r3
 8004968:	60fb      	str	r3, [r7, #12]
        break;
 800496a:	e068      	b.n	8004a3e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	089b      	lsrs	r3, r3, #2
 8004970:	60fb      	str	r3, [r7, #12]
        break;
 8004972:	e064      	b.n	8004a3e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004974:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004978:	f04f 0100 	mov.w	r1, #0
 800497c:	f006 fb2a 	bl	800afd4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004980:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800498a:	d051      	beq.n	8004a30 <ADC_ConfigureBoostMode+0x13c>
 800498c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004990:	d854      	bhi.n	8004a3c <ADC_ConfigureBoostMode+0x148>
 8004992:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004996:	d047      	beq.n	8004a28 <ADC_ConfigureBoostMode+0x134>
 8004998:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800499c:	d84e      	bhi.n	8004a3c <ADC_ConfigureBoostMode+0x148>
 800499e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80049a2:	d03d      	beq.n	8004a20 <ADC_ConfigureBoostMode+0x12c>
 80049a4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80049a8:	d848      	bhi.n	8004a3c <ADC_ConfigureBoostMode+0x148>
 80049aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049ae:	d033      	beq.n	8004a18 <ADC_ConfigureBoostMode+0x124>
 80049b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049b4:	d842      	bhi.n	8004a3c <ADC_ConfigureBoostMode+0x148>
 80049b6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80049ba:	d029      	beq.n	8004a10 <ADC_ConfigureBoostMode+0x11c>
 80049bc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80049c0:	d83c      	bhi.n	8004a3c <ADC_ConfigureBoostMode+0x148>
 80049c2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80049c6:	d01a      	beq.n	80049fe <ADC_ConfigureBoostMode+0x10a>
 80049c8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80049cc:	d836      	bhi.n	8004a3c <ADC_ConfigureBoostMode+0x148>
 80049ce:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80049d2:	d014      	beq.n	80049fe <ADC_ConfigureBoostMode+0x10a>
 80049d4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80049d8:	d830      	bhi.n	8004a3c <ADC_ConfigureBoostMode+0x148>
 80049da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049de:	d00e      	beq.n	80049fe <ADC_ConfigureBoostMode+0x10a>
 80049e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049e4:	d82a      	bhi.n	8004a3c <ADC_ConfigureBoostMode+0x148>
 80049e6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80049ea:	d008      	beq.n	80049fe <ADC_ConfigureBoostMode+0x10a>
 80049ec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80049f0:	d824      	bhi.n	8004a3c <ADC_ConfigureBoostMode+0x148>
 80049f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049f6:	d002      	beq.n	80049fe <ADC_ConfigureBoostMode+0x10a>
 80049f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049fc:	d11e      	bne.n	8004a3c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	0c9b      	lsrs	r3, r3, #18
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0c:	60fb      	str	r3, [r7, #12]
        break;
 8004a0e:	e016      	b.n	8004a3e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	091b      	lsrs	r3, r3, #4
 8004a14:	60fb      	str	r3, [r7, #12]
        break;
 8004a16:	e012      	b.n	8004a3e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	095b      	lsrs	r3, r3, #5
 8004a1c:	60fb      	str	r3, [r7, #12]
        break;
 8004a1e:	e00e      	b.n	8004a3e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	099b      	lsrs	r3, r3, #6
 8004a24:	60fb      	str	r3, [r7, #12]
        break;
 8004a26:	e00a      	b.n	8004a3e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	09db      	lsrs	r3, r3, #7
 8004a2c:	60fb      	str	r3, [r7, #12]
        break;
 8004a2e:	e006      	b.n	8004a3e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	0a1b      	lsrs	r3, r3, #8
 8004a34:	60fb      	str	r3, [r7, #12]
        break;
 8004a36:	e002      	b.n	8004a3e <ADC_ConfigureBoostMode+0x14a>
        break;
 8004a38:	bf00      	nop
 8004a3a:	e000      	b.n	8004a3e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004a3c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004a3e:	f7fe fdcb 	bl	80035d8 <HAL_GetREVID>
 8004a42:	4603      	mov	r3, r0
 8004a44:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d815      	bhi.n	8004a78 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4a2b      	ldr	r2, [pc, #172]	; (8004afc <ADC_ConfigureBoostMode+0x208>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d908      	bls.n	8004a66 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689a      	ldr	r2, [r3, #8]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a62:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004a64:	e03e      	b.n	8004ae4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a74:	609a      	str	r2, [r3, #8]
}
 8004a76:	e035      	b.n	8004ae4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	085b      	lsrs	r3, r3, #1
 8004a7c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4a1f      	ldr	r2, [pc, #124]	; (8004b00 <ADC_ConfigureBoostMode+0x20c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d808      	bhi.n	8004a98 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004a94:	609a      	str	r2, [r3, #8]
}
 8004a96:	e025      	b.n	8004ae4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4a1a      	ldr	r2, [pc, #104]	; (8004b04 <ADC_ConfigureBoostMode+0x210>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d80a      	bhi.n	8004ab6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ab2:	609a      	str	r2, [r3, #8]
}
 8004ab4:	e016      	b.n	8004ae4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4a13      	ldr	r2, [pc, #76]	; (8004b08 <ADC_ConfigureBoostMode+0x214>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d80a      	bhi.n	8004ad4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad0:	609a      	str	r2, [r3, #8]
}
 8004ad2:	e007      	b.n	8004ae4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689a      	ldr	r2, [r3, #8]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004ae2:	609a      	str	r2, [r3, #8]
}
 8004ae4:	bf00      	nop
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40022000 	.word	0x40022000
 8004af0:	40022100 	.word	0x40022100
 8004af4:	40022300 	.word	0x40022300
 8004af8:	58026300 	.word	0x58026300
 8004afc:	01312d00 	.word	0x01312d00
 8004b00:	005f5e10 	.word	0x005f5e10
 8004b04:	00bebc20 	.word	0x00bebc20
 8004b08:	017d7840 	.word	0x017d7840

08004b0c <LL_ADC_IsEnabled>:
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <LL_ADC_IsEnabled+0x18>
 8004b20:	2301      	movs	r3, #1
 8004b22:	e000      	b.n	8004b26 <LL_ADC_IsEnabled+0x1a>
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
	...

08004b34 <LL_ADC_StartCalibration>:
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <LL_ADC_StartCalibration+0x38>)
 8004b46:	4013      	ands	r3, r2
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004b54:	430a      	orrs	r2, r1
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	609a      	str	r2, [r3, #8]
}
 8004b60:	bf00      	nop
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	3ffeffc0 	.word	0x3ffeffc0

08004b70 <LL_ADC_IsCalibrationOnGoing>:
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b84:	d101      	bne.n	8004b8a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <LL_ADC_REG_IsConversionOngoing>:
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d101      	bne.n	8004bb0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bac:	2301      	movs	r3, #1
 8004bae:	e000      	b.n	8004bb2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
	...

08004bc0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_ADCEx_Calibration_Start+0x1e>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e04c      	b.n	8004c78 <HAL_ADCEx_Calibration_Start+0xb8>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f7ff fd90 	bl	800470c <ADC_Disable>
 8004bec:	4603      	mov	r3, r0
 8004bee:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004bf0:	7dfb      	ldrb	r3, [r7, #23]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d135      	bne.n	8004c62 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bfa:	4b21      	ldr	r3, [pc, #132]	; (8004c80 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	f043 0202 	orr.w	r2, r3, #2
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	68b9      	ldr	r1, [r7, #8]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff ff90 	bl	8004b34 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004c14:	e014      	b.n	8004c40 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	4a19      	ldr	r2, [pc, #100]	; (8004c84 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d30d      	bcc.n	8004c40 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c28:	f023 0312 	bic.w	r3, r3, #18
 8004c2c:	f043 0210 	orr.w	r2, r3, #16
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e01b      	b.n	8004c78 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff ff93 	bl	8004b70 <LL_ADC_IsCalibrationOnGoing>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e2      	bne.n	8004c16 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c54:	f023 0303 	bic.w	r3, r3, #3
 8004c58:	f043 0201 	orr.w	r2, r3, #1
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	655a      	str	r2, [r3, #84]	; 0x54
 8004c60:	e005      	b.n	8004c6e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c66:	f043 0210 	orr.w	r2, r3, #16
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	ffffeefd 	.word	0xffffeefd
 8004c84:	25c3f800 	.word	0x25c3f800

08004c88 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004c88:	b590      	push	{r4, r7, lr}
 8004c8a:	b09f      	sub	sp, #124	; 0x7c
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e0be      	b.n	8004e24 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a5c      	ldr	r2, [pc, #368]	; (8004e2c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d102      	bne.n	8004cc6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004cc0:	4b5b      	ldr	r3, [pc, #364]	; (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004cc2:	60bb      	str	r3, [r7, #8]
 8004cc4:	e001      	b.n	8004cca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10b      	bne.n	8004ce8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd4:	f043 0220 	orr.w	r2, r3, #32
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e09d      	b.n	8004e24 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff ff54 	bl	8004b98 <LL_ADC_REG_IsConversionOngoing>
 8004cf0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7ff ff4e 	bl	8004b98 <LL_ADC_REG_IsConversionOngoing>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d17f      	bne.n	8004e02 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004d02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d17c      	bne.n	8004e02 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a47      	ldr	r2, [pc, #284]	; (8004e2c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d004      	beq.n	8004d1c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a46      	ldr	r2, [pc, #280]	; (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d101      	bne.n	8004d20 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004d1c:	4b45      	ldr	r3, [pc, #276]	; (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d1e:	e000      	b.n	8004d22 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004d20:	4b45      	ldr	r3, [pc, #276]	; (8004e38 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d22:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d039      	beq.n	8004da0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d3c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a3a      	ldr	r2, [pc, #232]	; (8004e2c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d004      	beq.n	8004d52 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a38      	ldr	r2, [pc, #224]	; (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d10e      	bne.n	8004d70 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004d52:	4836      	ldr	r0, [pc, #216]	; (8004e2c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004d54:	f7ff feda 	bl	8004b0c <LL_ADC_IsEnabled>
 8004d58:	4604      	mov	r4, r0
 8004d5a:	4835      	ldr	r0, [pc, #212]	; (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004d5c:	f7ff fed6 	bl	8004b0c <LL_ADC_IsEnabled>
 8004d60:	4603      	mov	r3, r0
 8004d62:	4323      	orrs	r3, r4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	bf0c      	ite	eq
 8004d68:	2301      	moveq	r3, #1
 8004d6a:	2300      	movne	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	e008      	b.n	8004d82 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004d70:	4832      	ldr	r0, [pc, #200]	; (8004e3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004d72:	f7ff fecb 	bl	8004b0c <LL_ADC_IsEnabled>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	bf0c      	ite	eq
 8004d7c:	2301      	moveq	r3, #1
 8004d7e:	2300      	movne	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d047      	beq.n	8004e16 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d88:	689a      	ldr	r2, [r3, #8]
 8004d8a:	4b2d      	ldr	r3, [pc, #180]	; (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	6811      	ldr	r1, [r2, #0]
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	6892      	ldr	r2, [r2, #8]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d9c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d9e:	e03a      	b.n	8004e16 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004daa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a1e      	ldr	r2, [pc, #120]	; (8004e2c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d004      	beq.n	8004dc0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a1d      	ldr	r2, [pc, #116]	; (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d10e      	bne.n	8004dde <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004dc0:	481a      	ldr	r0, [pc, #104]	; (8004e2c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004dc2:	f7ff fea3 	bl	8004b0c <LL_ADC_IsEnabled>
 8004dc6:	4604      	mov	r4, r0
 8004dc8:	4819      	ldr	r0, [pc, #100]	; (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004dca:	f7ff fe9f 	bl	8004b0c <LL_ADC_IsEnabled>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	4323      	orrs	r3, r4
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	bf0c      	ite	eq
 8004dd6:	2301      	moveq	r3, #1
 8004dd8:	2300      	movne	r3, #0
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	e008      	b.n	8004df0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004dde:	4817      	ldr	r0, [pc, #92]	; (8004e3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004de0:	f7ff fe94 	bl	8004b0c <LL_ADC_IsEnabled>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	bf0c      	ite	eq
 8004dea:	2301      	moveq	r3, #1
 8004dec:	2300      	movne	r3, #0
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d010      	beq.n	8004e16 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	4b11      	ldr	r3, [pc, #68]	; (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004dfe:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e00:	e009      	b.n	8004e16 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e06:	f043 0220 	orr.w	r2, r3, #32
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004e14:	e000      	b.n	8004e18 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e16:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004e20:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	377c      	adds	r7, #124	; 0x7c
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd90      	pop	{r4, r7, pc}
 8004e2c:	40022000 	.word	0x40022000
 8004e30:	40022100 	.word	0x40022100
 8004e34:	40022300 	.word	0x40022300
 8004e38:	58026300 	.word	0x58026300
 8004e3c:	58026000 	.word	0x58026000
 8004e40:	fffff0e0 	.word	0xfffff0e0

08004e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f003 0307 	and.w	r3, r3, #7
 8004e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e54:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <__NVIC_SetPriorityGrouping+0x40>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e60:	4013      	ands	r3, r2
 8004e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e6c:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <__NVIC_SetPriorityGrouping+0x44>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e72:	4a04      	ldr	r2, [pc, #16]	; (8004e84 <__NVIC_SetPriorityGrouping+0x40>)
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	60d3      	str	r3, [r2, #12]
}
 8004e78:	bf00      	nop
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	e000ed00 	.word	0xe000ed00
 8004e88:	05fa0000 	.word	0x05fa0000

08004e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e90:	4b04      	ldr	r3, [pc, #16]	; (8004ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	0a1b      	lsrs	r3, r3, #8
 8004e96:	f003 0307 	and.w	r3, r3, #7
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	e000ed00 	.word	0xe000ed00

08004ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	4603      	mov	r3, r0
 8004eb0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004eb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	db0b      	blt.n	8004ed2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004eba:	88fb      	ldrh	r3, [r7, #6]
 8004ebc:	f003 021f 	and.w	r2, r3, #31
 8004ec0:	4907      	ldr	r1, [pc, #28]	; (8004ee0 <__NVIC_EnableIRQ+0x38>)
 8004ec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	2001      	movs	r0, #1
 8004eca:	fa00 f202 	lsl.w	r2, r0, r2
 8004ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	e000e100 	.word	0xe000e100

08004ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	4603      	mov	r3, r0
 8004eec:	6039      	str	r1, [r7, #0]
 8004eee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ef0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	db0a      	blt.n	8004f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	490c      	ldr	r1, [pc, #48]	; (8004f30 <__NVIC_SetPriority+0x4c>)
 8004efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f02:	0112      	lsls	r2, r2, #4
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	440b      	add	r3, r1
 8004f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f0c:	e00a      	b.n	8004f24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	4908      	ldr	r1, [pc, #32]	; (8004f34 <__NVIC_SetPriority+0x50>)
 8004f14:	88fb      	ldrh	r3, [r7, #6]
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	3b04      	subs	r3, #4
 8004f1c:	0112      	lsls	r2, r2, #4
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	440b      	add	r3, r1
 8004f22:	761a      	strb	r2, [r3, #24]
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	e000e100 	.word	0xe000e100
 8004f34:	e000ed00 	.word	0xe000ed00

08004f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b089      	sub	sp, #36	; 0x24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	f1c3 0307 	rsb	r3, r3, #7
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	bf28      	it	cs
 8004f56:	2304      	movcs	r3, #4
 8004f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	2b06      	cmp	r3, #6
 8004f60:	d902      	bls.n	8004f68 <NVIC_EncodePriority+0x30>
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	3b03      	subs	r3, #3
 8004f66:	e000      	b.n	8004f6a <NVIC_EncodePriority+0x32>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	fa02 f303 	lsl.w	r3, r2, r3
 8004f76:	43da      	mvns	r2, r3
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	401a      	ands	r2, r3
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8a:	43d9      	mvns	r1, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f90:	4313      	orrs	r3, r2
         );
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3724      	adds	r7, #36	; 0x24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b082      	sub	sp, #8
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7ff ff4c 	bl	8004e44 <__NVIC_SetPriorityGrouping>
}
 8004fac:	bf00      	nop
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	4603      	mov	r3, r0
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
 8004fc0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004fc2:	f7ff ff63 	bl	8004e8c <__NVIC_GetPriorityGrouping>
 8004fc6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	68b9      	ldr	r1, [r7, #8]
 8004fcc:	6978      	ldr	r0, [r7, #20]
 8004fce:	f7ff ffb3 	bl	8004f38 <NVIC_EncodePriority>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004fd8:	4611      	mov	r1, r2
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7ff ff82 	bl	8004ee4 <__NVIC_SetPriority>
}
 8004fe0:	bf00      	nop
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	4603      	mov	r3, r0
 8004ff0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff ff56 	bl	8004ea8 <__NVIC_EnableIRQ>
}
 8004ffc:	bf00      	nop
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e014      	b.n	8005040 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	791b      	ldrb	r3, [r3, #4]
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	d105      	bne.n	800502c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7fd fcdc 	bl	80029e4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e046      	b.n	80050ea <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	795b      	ldrb	r3, [r3, #5]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d101      	bne.n	8005068 <HAL_DAC_Start+0x20>
 8005064:	2302      	movs	r3, #2
 8005066:	e040      	b.n	80050ea <HAL_DAC_Start+0xa2>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2202      	movs	r2, #2
 8005072:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6819      	ldr	r1, [r3, #0]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	f003 0310 	and.w	r3, r3, #16
 8005080:	2201      	movs	r2, #1
 8005082:	409a      	lsls	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10f      	bne.n	80050b2 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800509c:	2b02      	cmp	r3, #2
 800509e:	d11d      	bne.n	80050dc <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0201 	orr.w	r2, r2, #1
 80050ae:	605a      	str	r2, [r3, #4]
 80050b0:	e014      	b.n	80050dc <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	f003 0310 	and.w	r3, r3, #16
 80050c2:	2102      	movs	r1, #2
 80050c4:	fa01 f303 	lsl.w	r3, r1, r3
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d107      	bne.n	80050dc <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0202 	orr.w	r2, r2, #2
 80050da:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
	...

080050f8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e0a2      	b.n	8005256 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	795b      	ldrb	r3, [r3, #5]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <HAL_DAC_Start_DMA+0x24>
 8005118:	2302      	movs	r3, #2
 800511a:	e09c      	b.n	8005256 <HAL_DAC_Start_DMA+0x15e>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2201      	movs	r2, #1
 8005120:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2202      	movs	r2, #2
 8005126:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d129      	bne.n	8005182 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	4a4b      	ldr	r2, [pc, #300]	; (8005260 <HAL_DAC_Start_DMA+0x168>)
 8005134:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	4a4a      	ldr	r2, [pc, #296]	; (8005264 <HAL_DAC_Start_DMA+0x16c>)
 800513c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	4a49      	ldr	r2, [pc, #292]	; (8005268 <HAL_DAC_Start_DMA+0x170>)
 8005144:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005154:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <HAL_DAC_Start_DMA+0x6c>
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	2b04      	cmp	r3, #4
 8005160:	d005      	beq.n	800516e <HAL_DAC_Start_DMA+0x76>
 8005162:	e009      	b.n	8005178 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3308      	adds	r3, #8
 800516a:	613b      	str	r3, [r7, #16]
        break;
 800516c:	e033      	b.n	80051d6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	330c      	adds	r3, #12
 8005174:	613b      	str	r3, [r7, #16]
        break;
 8005176:	e02e      	b.n	80051d6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3310      	adds	r3, #16
 800517e:	613b      	str	r3, [r7, #16]
        break;
 8005180:	e029      	b.n	80051d6 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	4a39      	ldr	r2, [pc, #228]	; (800526c <HAL_DAC_Start_DMA+0x174>)
 8005188:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	4a38      	ldr	r2, [pc, #224]	; (8005270 <HAL_DAC_Start_DMA+0x178>)
 8005190:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	4a37      	ldr	r2, [pc, #220]	; (8005274 <HAL_DAC_Start_DMA+0x17c>)
 8005198:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80051a8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <HAL_DAC_Start_DMA+0xc0>
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d005      	beq.n	80051c2 <HAL_DAC_Start_DMA+0xca>
 80051b6:	e009      	b.n	80051cc <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3314      	adds	r3, #20
 80051be:	613b      	str	r3, [r7, #16]
        break;
 80051c0:	e009      	b.n	80051d6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3318      	adds	r3, #24
 80051c8:	613b      	str	r3, [r7, #16]
        break;
 80051ca:	e004      	b.n	80051d6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	331c      	adds	r3, #28
 80051d2:	613b      	str	r3, [r7, #16]
        break;
 80051d4:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d111      	bne.n	8005200 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051ea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6898      	ldr	r0, [r3, #8]
 80051f0:	6879      	ldr	r1, [r7, #4]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	f000 fe67 	bl	8005ec8 <HAL_DMA_Start_IT>
 80051fa:	4603      	mov	r3, r0
 80051fc:	75fb      	strb	r3, [r7, #23]
 80051fe:	e010      	b.n	8005222 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800520e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	68d8      	ldr	r0, [r3, #12]
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	f000 fe55 	bl	8005ec8 <HAL_DMA_Start_IT>
 800521e:	4603      	mov	r3, r0
 8005220:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005228:	7dfb      	ldrb	r3, [r7, #23]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10c      	bne.n	8005248 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6819      	ldr	r1, [r3, #0]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f003 0310 	and.w	r3, r3, #16
 800523a:	2201      	movs	r2, #1
 800523c:	409a      	lsls	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	e005      	b.n	8005254 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	f043 0204 	orr.w	r2, r3, #4
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005254:	7dfb      	ldrb	r3, [r7, #23]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3718      	adds	r7, #24
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	080056e9 	.word	0x080056e9
 8005264:	0800570b 	.word	0x0800570b
 8005268:	08005727 	.word	0x08005727
 800526c:	080057a5 	.word	0x080057a5
 8005270:	080057c7 	.word	0x080057c7
 8005274:	080057e3 	.word	0x080057e3

08005278 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e03e      	b.n	800530a <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6819      	ldr	r1, [r3, #0]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	f003 0310 	and.w	r3, r3, #16
 8005298:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800529c:	fa02 f303 	lsl.w	r3, r2, r3
 80052a0:	43da      	mvns	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	400a      	ands	r2, r1
 80052a8:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6819      	ldr	r1, [r3, #0]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	f003 0310 	and.w	r3, r3, #16
 80052b6:	2201      	movs	r2, #1
 80052b8:	fa02 f303 	lsl.w	r3, r2, r3
 80052bc:	43da      	mvns	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	400a      	ands	r2, r1
 80052c4:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10d      	bne.n	80052e8 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f001 f863 	bl	800639c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	e00c      	b.n	8005302 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f001 f855 	bl	800639c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005300:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005328:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01d      	beq.n	8005370 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d018      	beq.n	8005370 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2204      	movs	r2, #4
 8005342:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	f043 0201 	orr.w	r2, r3, #1
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005358:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005368:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f86f 	bl	800544e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d01d      	beq.n	80053b6 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d018      	beq.n	80053b6 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2204      	movs	r2, #4
 8005388:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f043 0202 	orr.w	r2, r3, #2
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800539e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80053ae:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f9ed 	bl	8005790 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80053b6:	bf00      	nop
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80053be:	b480      	push	{r7}
 80053c0:	b087      	sub	sp, #28
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	60f8      	str	r0, [r7, #12]
 80053c6:	60b9      	str	r1, [r7, #8]
 80053c8:	607a      	str	r2, [r7, #4]
 80053ca:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80053cc:	2300      	movs	r3, #0
 80053ce:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e015      	b.n	8005406 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d105      	bne.n	80053f2 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4413      	add	r3, r2
 80053ec:	3308      	adds	r3, #8
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	e004      	b.n	80053fc <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4413      	add	r3, r2
 80053f8:	3314      	adds	r3, #20
 80053fa:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	461a      	mov	r2, r3
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	371c      	adds	r7, #28
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800543a:	b480      	push	{r7}
 800543c:	b083      	sub	sp, #12
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800544e:	b480      	push	{r7}
 8005450:	b083      	sub	sp, #12
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
	...

08005464 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b08a      	sub	sp, #40	; 0x28
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005470:	2300      	movs	r3, #0
 8005472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <HAL_DAC_ConfigChannel+0x1e>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e12a      	b.n	80056dc <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	795b      	ldrb	r3, [r3, #5]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d101      	bne.n	8005492 <HAL_DAC_ConfigChannel+0x2e>
 800548e:	2302      	movs	r3, #2
 8005490:	e124      	b.n	80056dc <HAL_DAC_ConfigChannel+0x278>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2201      	movs	r2, #1
 8005496:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2202      	movs	r2, #2
 800549c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	d17a      	bne.n	800559c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80054a6:	f7fe f88b 	bl	80035c0 <HAL_GetTick>
 80054aa:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d13d      	bne.n	800552e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80054b2:	e018      	b.n	80054e6 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80054b4:	f7fe f884 	bl	80035c0 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d911      	bls.n	80054e6 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054c8:	4b86      	ldr	r3, [pc, #536]	; (80056e4 <HAL_DAC_ConfigChannel+0x280>)
 80054ca:	4013      	ands	r3, r2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00a      	beq.n	80054e6 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	f043 0208 	orr.w	r2, r3, #8
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2203      	movs	r2, #3
 80054e0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e0fa      	b.n	80056dc <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054ec:	4b7d      	ldr	r3, [pc, #500]	; (80056e4 <HAL_DAC_ConfigChannel+0x280>)
 80054ee:	4013      	ands	r3, r2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1df      	bne.n	80054b4 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	6992      	ldr	r2, [r2, #24]
 80054fc:	641a      	str	r2, [r3, #64]	; 0x40
 80054fe:	e020      	b.n	8005542 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005500:	f7fe f85e 	bl	80035c0 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b01      	cmp	r3, #1
 800550c:	d90f      	bls.n	800552e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005514:	2b00      	cmp	r3, #0
 8005516:	da0a      	bge.n	800552e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	f043 0208 	orr.w	r2, r3, #8
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2203      	movs	r2, #3
 8005528:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e0d6      	b.n	80056dc <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005534:	2b00      	cmp	r3, #0
 8005536:	dbe3      	blt.n	8005500 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	6992      	ldr	r2, [r2, #24]
 8005540:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f003 0310 	and.w	r3, r3, #16
 800554e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005552:	fa01 f303 	lsl.w	r3, r1, r3
 8005556:	43db      	mvns	r3, r3
 8005558:	ea02 0103 	and.w	r1, r2, r3
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	69da      	ldr	r2, [r3, #28]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f003 0310 	and.w	r3, r3, #16
 8005566:	409a      	lsls	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	430a      	orrs	r2, r1
 800556e:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f003 0310 	and.w	r3, r3, #16
 800557c:	21ff      	movs	r1, #255	; 0xff
 800557e:	fa01 f303 	lsl.w	r3, r1, r3
 8005582:	43db      	mvns	r3, r3
 8005584:	ea02 0103 	and.w	r1, r2, r3
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	6a1a      	ldr	r2, [r3, #32]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f003 0310 	and.w	r3, r3, #16
 8005592:	409a      	lsls	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d11d      	bne.n	80055e0 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055aa:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f003 0310 	and.w	r3, r3, #16
 80055b2:	221f      	movs	r2, #31
 80055b4:	fa02 f303 	lsl.w	r3, r2, r3
 80055b8:	43db      	mvns	r3, r3
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	4013      	ands	r3, r2
 80055be:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f003 0310 	and.w	r3, r3, #16
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	fa02 f303 	lsl.w	r3, r2, r3
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f003 0310 	and.w	r3, r3, #16
 80055ee:	2207      	movs	r2, #7
 80055f0:	fa02 f303 	lsl.w	r3, r2, r3
 80055f4:	43db      	mvns	r3, r3
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	4013      	ands	r3, r2
 80055fa:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d102      	bne.n	800560a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005604:	2300      	movs	r3, #0
 8005606:	627b      	str	r3, [r7, #36]	; 0x24
 8005608:	e00f      	b.n	800562a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	2b02      	cmp	r3, #2
 8005610:	d102      	bne.n	8005618 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005612:	2301      	movs	r3, #1
 8005614:	627b      	str	r3, [r7, #36]	; 0x24
 8005616:	e008      	b.n	800562a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d102      	bne.n	8005626 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005620:	2301      	movs	r3, #1
 8005622:	627b      	str	r3, [r7, #36]	; 0x24
 8005624:	e001      	b.n	800562a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005626:	2300      	movs	r3, #0
 8005628:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	4313      	orrs	r3, r2
 8005634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005636:	4313      	orrs	r3, r2
 8005638:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f003 0310 	and.w	r3, r3, #16
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	fa02 f303 	lsl.w	r3, r2, r3
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	4313      	orrs	r3, r2
 800564a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6819      	ldr	r1, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f003 0310 	and.w	r3, r3, #16
 8005660:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005664:	fa02 f303 	lsl.w	r3, r2, r3
 8005668:	43da      	mvns	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	400a      	ands	r2, r1
 8005670:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f003 0310 	and.w	r3, r3, #16
 8005680:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005684:	fa02 f303 	lsl.w	r3, r2, r3
 8005688:	43db      	mvns	r3, r3
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	4013      	ands	r3, r2
 800568e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f003 0310 	and.w	r3, r3, #16
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	fa02 f303 	lsl.w	r3, r2, r3
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6819      	ldr	r1, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f003 0310 	and.w	r3, r3, #16
 80056bc:	22c0      	movs	r2, #192	; 0xc0
 80056be:	fa02 f303 	lsl.w	r3, r2, r3
 80056c2:	43da      	mvns	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	400a      	ands	r2, r1
 80056ca:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2201      	movs	r2, #1
 80056d0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80056d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3728      	adds	r7, #40	; 0x28
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	20008000 	.word	0x20008000

080056e8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f7ff fe8b 	bl	8005412 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2201      	movs	r2, #1
 8005700:	711a      	strb	r2, [r3, #4]
}
 8005702:	bf00      	nop
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b084      	sub	sp, #16
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005716:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f7ff fe84 	bl	8005426 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800571e:	bf00      	nop
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b084      	sub	sp, #16
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005732:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	f043 0204 	orr.w	r2, r3, #4
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f7ff fe7a 	bl	800543a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	711a      	strb	r2, [r3, #4]
}
 800574c:	bf00      	nop
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f7ff ffce 	bl	8005754 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2201      	movs	r2, #1
 80057bc:	711a      	strb	r2, [r3, #4]
}
 80057be:	bf00      	nop
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b084      	sub	sp, #16
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f7ff ffc7 	bl	8005768 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80057da:	bf00      	nop
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b084      	sub	sp, #16
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	f043 0204 	orr.w	r2, r3, #4
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f7ff ffbd 	bl	800577c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	711a      	strb	r2, [r3, #4]
}
 8005808:	bf00      	nop
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005818:	f7fd fed2 	bl	80035c0 <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e316      	b.n	8005e56 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a66      	ldr	r2, [pc, #408]	; (80059c8 <HAL_DMA_Init+0x1b8>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d04a      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a65      	ldr	r2, [pc, #404]	; (80059cc <HAL_DMA_Init+0x1bc>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d045      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a63      	ldr	r2, [pc, #396]	; (80059d0 <HAL_DMA_Init+0x1c0>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d040      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a62      	ldr	r2, [pc, #392]	; (80059d4 <HAL_DMA_Init+0x1c4>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d03b      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a60      	ldr	r2, [pc, #384]	; (80059d8 <HAL_DMA_Init+0x1c8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d036      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a5f      	ldr	r2, [pc, #380]	; (80059dc <HAL_DMA_Init+0x1cc>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d031      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a5d      	ldr	r2, [pc, #372]	; (80059e0 <HAL_DMA_Init+0x1d0>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d02c      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a5c      	ldr	r2, [pc, #368]	; (80059e4 <HAL_DMA_Init+0x1d4>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d027      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a5a      	ldr	r2, [pc, #360]	; (80059e8 <HAL_DMA_Init+0x1d8>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d022      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a59      	ldr	r2, [pc, #356]	; (80059ec <HAL_DMA_Init+0x1dc>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d01d      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a57      	ldr	r2, [pc, #348]	; (80059f0 <HAL_DMA_Init+0x1e0>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d018      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a56      	ldr	r2, [pc, #344]	; (80059f4 <HAL_DMA_Init+0x1e4>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d013      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a54      	ldr	r2, [pc, #336]	; (80059f8 <HAL_DMA_Init+0x1e8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d00e      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a53      	ldr	r2, [pc, #332]	; (80059fc <HAL_DMA_Init+0x1ec>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d009      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a51      	ldr	r2, [pc, #324]	; (8005a00 <HAL_DMA_Init+0x1f0>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d004      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a50      	ldr	r2, [pc, #320]	; (8005a04 <HAL_DMA_Init+0x1f4>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d101      	bne.n	80058cc <HAL_DMA_Init+0xbc>
 80058c8:	2301      	movs	r3, #1
 80058ca:	e000      	b.n	80058ce <HAL_DMA_Init+0xbe>
 80058cc:	2300      	movs	r3, #0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 813b 	beq.w	8005b4a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a37      	ldr	r2, [pc, #220]	; (80059c8 <HAL_DMA_Init+0x1b8>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d04a      	beq.n	8005984 <HAL_DMA_Init+0x174>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a36      	ldr	r2, [pc, #216]	; (80059cc <HAL_DMA_Init+0x1bc>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d045      	beq.n	8005984 <HAL_DMA_Init+0x174>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a34      	ldr	r2, [pc, #208]	; (80059d0 <HAL_DMA_Init+0x1c0>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d040      	beq.n	8005984 <HAL_DMA_Init+0x174>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a33      	ldr	r2, [pc, #204]	; (80059d4 <HAL_DMA_Init+0x1c4>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d03b      	beq.n	8005984 <HAL_DMA_Init+0x174>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a31      	ldr	r2, [pc, #196]	; (80059d8 <HAL_DMA_Init+0x1c8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d036      	beq.n	8005984 <HAL_DMA_Init+0x174>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a30      	ldr	r2, [pc, #192]	; (80059dc <HAL_DMA_Init+0x1cc>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d031      	beq.n	8005984 <HAL_DMA_Init+0x174>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a2e      	ldr	r2, [pc, #184]	; (80059e0 <HAL_DMA_Init+0x1d0>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d02c      	beq.n	8005984 <HAL_DMA_Init+0x174>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a2d      	ldr	r2, [pc, #180]	; (80059e4 <HAL_DMA_Init+0x1d4>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d027      	beq.n	8005984 <HAL_DMA_Init+0x174>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a2b      	ldr	r2, [pc, #172]	; (80059e8 <HAL_DMA_Init+0x1d8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d022      	beq.n	8005984 <HAL_DMA_Init+0x174>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a2a      	ldr	r2, [pc, #168]	; (80059ec <HAL_DMA_Init+0x1dc>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d01d      	beq.n	8005984 <HAL_DMA_Init+0x174>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a28      	ldr	r2, [pc, #160]	; (80059f0 <HAL_DMA_Init+0x1e0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d018      	beq.n	8005984 <HAL_DMA_Init+0x174>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a27      	ldr	r2, [pc, #156]	; (80059f4 <HAL_DMA_Init+0x1e4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d013      	beq.n	8005984 <HAL_DMA_Init+0x174>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a25      	ldr	r2, [pc, #148]	; (80059f8 <HAL_DMA_Init+0x1e8>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d00e      	beq.n	8005984 <HAL_DMA_Init+0x174>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a24      	ldr	r2, [pc, #144]	; (80059fc <HAL_DMA_Init+0x1ec>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d009      	beq.n	8005984 <HAL_DMA_Init+0x174>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a22      	ldr	r2, [pc, #136]	; (8005a00 <HAL_DMA_Init+0x1f0>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d004      	beq.n	8005984 <HAL_DMA_Init+0x174>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a21      	ldr	r2, [pc, #132]	; (8005a04 <HAL_DMA_Init+0x1f4>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d108      	bne.n	8005996 <HAL_DMA_Init+0x186>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 0201 	bic.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	e007      	b.n	80059a6 <HAL_DMA_Init+0x196>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 0201 	bic.w	r2, r2, #1
 80059a4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80059a6:	e02f      	b.n	8005a08 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059a8:	f7fd fe0a 	bl	80035c0 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b05      	cmp	r3, #5
 80059b4:	d928      	bls.n	8005a08 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2220      	movs	r2, #32
 80059ba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2203      	movs	r2, #3
 80059c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e246      	b.n	8005e56 <HAL_DMA_Init+0x646>
 80059c8:	40020010 	.word	0x40020010
 80059cc:	40020028 	.word	0x40020028
 80059d0:	40020040 	.word	0x40020040
 80059d4:	40020058 	.word	0x40020058
 80059d8:	40020070 	.word	0x40020070
 80059dc:	40020088 	.word	0x40020088
 80059e0:	400200a0 	.word	0x400200a0
 80059e4:	400200b8 	.word	0x400200b8
 80059e8:	40020410 	.word	0x40020410
 80059ec:	40020428 	.word	0x40020428
 80059f0:	40020440 	.word	0x40020440
 80059f4:	40020458 	.word	0x40020458
 80059f8:	40020470 	.word	0x40020470
 80059fc:	40020488 	.word	0x40020488
 8005a00:	400204a0 	.word	0x400204a0
 8005a04:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1c8      	bne.n	80059a8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4b83      	ldr	r3, [pc, #524]	; (8005c30 <HAL_DMA_Init+0x420>)
 8005a22:	4013      	ands	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005a2e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a3a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a46:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	2b04      	cmp	r3, #4
 8005a5a:	d107      	bne.n	8005a6c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a64:	4313      	orrs	r3, r2
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005a6c:	4b71      	ldr	r3, [pc, #452]	; (8005c34 <HAL_DMA_Init+0x424>)
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	4b71      	ldr	r3, [pc, #452]	; (8005c38 <HAL_DMA_Init+0x428>)
 8005a72:	4013      	ands	r3, r2
 8005a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a78:	d328      	bcc.n	8005acc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b28      	cmp	r3, #40	; 0x28
 8005a80:	d903      	bls.n	8005a8a <HAL_DMA_Init+0x27a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	2b2e      	cmp	r3, #46	; 0x2e
 8005a88:	d917      	bls.n	8005aba <HAL_DMA_Init+0x2aa>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	2b3e      	cmp	r3, #62	; 0x3e
 8005a90:	d903      	bls.n	8005a9a <HAL_DMA_Init+0x28a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2b42      	cmp	r3, #66	; 0x42
 8005a98:	d90f      	bls.n	8005aba <HAL_DMA_Init+0x2aa>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	2b46      	cmp	r3, #70	; 0x46
 8005aa0:	d903      	bls.n	8005aaa <HAL_DMA_Init+0x29a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	2b48      	cmp	r3, #72	; 0x48
 8005aa8:	d907      	bls.n	8005aba <HAL_DMA_Init+0x2aa>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	2b4e      	cmp	r3, #78	; 0x4e
 8005ab0:	d905      	bls.n	8005abe <HAL_DMA_Init+0x2ae>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2b52      	cmp	r3, #82	; 0x52
 8005ab8:	d801      	bhi.n	8005abe <HAL_DMA_Init+0x2ae>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <HAL_DMA_Init+0x2b0>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aca:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f023 0307 	bic.w	r3, r3, #7
 8005ae2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d117      	bne.n	8005b26 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00e      	beq.n	8005b26 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f002 fb33 	bl	8008174 <DMA_CheckFifoParam>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d008      	beq.n	8005b26 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2240      	movs	r2, #64	; 0x40
 8005b18:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e197      	b.n	8005e56 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f002 fa6e 	bl	8008010 <DMA_CalcBaseAndBitshift>
 8005b34:	4603      	mov	r3, r0
 8005b36:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b3c:	f003 031f 	and.w	r3, r3, #31
 8005b40:	223f      	movs	r2, #63	; 0x3f
 8005b42:	409a      	lsls	r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	609a      	str	r2, [r3, #8]
 8005b48:	e0cd      	b.n	8005ce6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a3b      	ldr	r2, [pc, #236]	; (8005c3c <HAL_DMA_Init+0x42c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d022      	beq.n	8005b9a <HAL_DMA_Init+0x38a>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a39      	ldr	r2, [pc, #228]	; (8005c40 <HAL_DMA_Init+0x430>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d01d      	beq.n	8005b9a <HAL_DMA_Init+0x38a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a38      	ldr	r2, [pc, #224]	; (8005c44 <HAL_DMA_Init+0x434>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d018      	beq.n	8005b9a <HAL_DMA_Init+0x38a>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a36      	ldr	r2, [pc, #216]	; (8005c48 <HAL_DMA_Init+0x438>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d013      	beq.n	8005b9a <HAL_DMA_Init+0x38a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a35      	ldr	r2, [pc, #212]	; (8005c4c <HAL_DMA_Init+0x43c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d00e      	beq.n	8005b9a <HAL_DMA_Init+0x38a>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a33      	ldr	r2, [pc, #204]	; (8005c50 <HAL_DMA_Init+0x440>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d009      	beq.n	8005b9a <HAL_DMA_Init+0x38a>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a32      	ldr	r2, [pc, #200]	; (8005c54 <HAL_DMA_Init+0x444>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d004      	beq.n	8005b9a <HAL_DMA_Init+0x38a>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a30      	ldr	r2, [pc, #192]	; (8005c58 <HAL_DMA_Init+0x448>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d101      	bne.n	8005b9e <HAL_DMA_Init+0x38e>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e000      	b.n	8005ba0 <HAL_DMA_Init+0x390>
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 8097 	beq.w	8005cd4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a24      	ldr	r2, [pc, #144]	; (8005c3c <HAL_DMA_Init+0x42c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d021      	beq.n	8005bf4 <HAL_DMA_Init+0x3e4>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a22      	ldr	r2, [pc, #136]	; (8005c40 <HAL_DMA_Init+0x430>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d01c      	beq.n	8005bf4 <HAL_DMA_Init+0x3e4>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a21      	ldr	r2, [pc, #132]	; (8005c44 <HAL_DMA_Init+0x434>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d017      	beq.n	8005bf4 <HAL_DMA_Init+0x3e4>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a1f      	ldr	r2, [pc, #124]	; (8005c48 <HAL_DMA_Init+0x438>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d012      	beq.n	8005bf4 <HAL_DMA_Init+0x3e4>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a1e      	ldr	r2, [pc, #120]	; (8005c4c <HAL_DMA_Init+0x43c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d00d      	beq.n	8005bf4 <HAL_DMA_Init+0x3e4>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a1c      	ldr	r2, [pc, #112]	; (8005c50 <HAL_DMA_Init+0x440>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d008      	beq.n	8005bf4 <HAL_DMA_Init+0x3e4>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a1b      	ldr	r2, [pc, #108]	; (8005c54 <HAL_DMA_Init+0x444>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d003      	beq.n	8005bf4 <HAL_DMA_Init+0x3e4>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a19      	ldr	r2, [pc, #100]	; (8005c58 <HAL_DMA_Init+0x448>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4b12      	ldr	r3, [pc, #72]	; (8005c5c <HAL_DMA_Init+0x44c>)
 8005c12:	4013      	ands	r3, r2
 8005c14:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	2b40      	cmp	r3, #64	; 0x40
 8005c1c:	d020      	beq.n	8005c60 <HAL_DMA_Init+0x450>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	2b80      	cmp	r3, #128	; 0x80
 8005c24:	d102      	bne.n	8005c2c <HAL_DMA_Init+0x41c>
 8005c26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c2a:	e01a      	b.n	8005c62 <HAL_DMA_Init+0x452>
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	e018      	b.n	8005c62 <HAL_DMA_Init+0x452>
 8005c30:	fe10803f 	.word	0xfe10803f
 8005c34:	5c001000 	.word	0x5c001000
 8005c38:	ffff0000 	.word	0xffff0000
 8005c3c:	58025408 	.word	0x58025408
 8005c40:	5802541c 	.word	0x5802541c
 8005c44:	58025430 	.word	0x58025430
 8005c48:	58025444 	.word	0x58025444
 8005c4c:	58025458 	.word	0x58025458
 8005c50:	5802546c 	.word	0x5802546c
 8005c54:	58025480 	.word	0x58025480
 8005c58:	58025494 	.word	0x58025494
 8005c5c:	fffe000f 	.word	0xfffe000f
 8005c60:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	68d2      	ldr	r2, [r2, #12]
 8005c66:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005c88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005c90:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	4b6e      	ldr	r3, [pc, #440]	; (8005e60 <HAL_DMA_Init+0x650>)
 8005ca8:	4413      	add	r3, r2
 8005caa:	4a6e      	ldr	r2, [pc, #440]	; (8005e64 <HAL_DMA_Init+0x654>)
 8005cac:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb0:	091b      	lsrs	r3, r3, #4
 8005cb2:	009a      	lsls	r2, r3, #2
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f002 f9a9 	bl	8008010 <DMA_CalcBaseAndBitshift>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc6:	f003 031f 	and.w	r3, r3, #31
 8005cca:	2201      	movs	r2, #1
 8005ccc:	409a      	lsls	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	605a      	str	r2, [r3, #4]
 8005cd2:	e008      	b.n	8005ce6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2240      	movs	r2, #64	; 0x40
 8005cd8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2203      	movs	r2, #3
 8005cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e0b7      	b.n	8005e56 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a5f      	ldr	r2, [pc, #380]	; (8005e68 <HAL_DMA_Init+0x658>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d072      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a5d      	ldr	r2, [pc, #372]	; (8005e6c <HAL_DMA_Init+0x65c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d06d      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a5c      	ldr	r2, [pc, #368]	; (8005e70 <HAL_DMA_Init+0x660>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d068      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a5a      	ldr	r2, [pc, #360]	; (8005e74 <HAL_DMA_Init+0x664>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d063      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a59      	ldr	r2, [pc, #356]	; (8005e78 <HAL_DMA_Init+0x668>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d05e      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a57      	ldr	r2, [pc, #348]	; (8005e7c <HAL_DMA_Init+0x66c>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d059      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a56      	ldr	r2, [pc, #344]	; (8005e80 <HAL_DMA_Init+0x670>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d054      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a54      	ldr	r2, [pc, #336]	; (8005e84 <HAL_DMA_Init+0x674>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d04f      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a53      	ldr	r2, [pc, #332]	; (8005e88 <HAL_DMA_Init+0x678>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d04a      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a51      	ldr	r2, [pc, #324]	; (8005e8c <HAL_DMA_Init+0x67c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d045      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a50      	ldr	r2, [pc, #320]	; (8005e90 <HAL_DMA_Init+0x680>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d040      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a4e      	ldr	r2, [pc, #312]	; (8005e94 <HAL_DMA_Init+0x684>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d03b      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a4d      	ldr	r2, [pc, #308]	; (8005e98 <HAL_DMA_Init+0x688>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d036      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a4b      	ldr	r2, [pc, #300]	; (8005e9c <HAL_DMA_Init+0x68c>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d031      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a4a      	ldr	r2, [pc, #296]	; (8005ea0 <HAL_DMA_Init+0x690>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d02c      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a48      	ldr	r2, [pc, #288]	; (8005ea4 <HAL_DMA_Init+0x694>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d027      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a47      	ldr	r2, [pc, #284]	; (8005ea8 <HAL_DMA_Init+0x698>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d022      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a45      	ldr	r2, [pc, #276]	; (8005eac <HAL_DMA_Init+0x69c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d01d      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a44      	ldr	r2, [pc, #272]	; (8005eb0 <HAL_DMA_Init+0x6a0>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d018      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a42      	ldr	r2, [pc, #264]	; (8005eb4 <HAL_DMA_Init+0x6a4>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d013      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a41      	ldr	r2, [pc, #260]	; (8005eb8 <HAL_DMA_Init+0x6a8>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d00e      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a3f      	ldr	r2, [pc, #252]	; (8005ebc <HAL_DMA_Init+0x6ac>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d009      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a3e      	ldr	r2, [pc, #248]	; (8005ec0 <HAL_DMA_Init+0x6b0>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d004      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a3c      	ldr	r2, [pc, #240]	; (8005ec4 <HAL_DMA_Init+0x6b4>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d101      	bne.n	8005dda <HAL_DMA_Init+0x5ca>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e000      	b.n	8005ddc <HAL_DMA_Init+0x5cc>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d032      	beq.n	8005e46 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f002 fa43 	bl	800826c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	2b80      	cmp	r3, #128	; 0x80
 8005dec:	d102      	bne.n	8005df4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dfc:	b2d2      	uxtb	r2, r2
 8005dfe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e08:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d010      	beq.n	8005e34 <HAL_DMA_Init+0x624>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2b08      	cmp	r3, #8
 8005e18:	d80c      	bhi.n	8005e34 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f002 fac0 	bl	80083a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e24:	2200      	movs	r2, #0
 8005e26:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e30:	605a      	str	r2, [r3, #4]
 8005e32:	e008      	b.n	8005e46 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	a7fdabf8 	.word	0xa7fdabf8
 8005e64:	cccccccd 	.word	0xcccccccd
 8005e68:	40020010 	.word	0x40020010
 8005e6c:	40020028 	.word	0x40020028
 8005e70:	40020040 	.word	0x40020040
 8005e74:	40020058 	.word	0x40020058
 8005e78:	40020070 	.word	0x40020070
 8005e7c:	40020088 	.word	0x40020088
 8005e80:	400200a0 	.word	0x400200a0
 8005e84:	400200b8 	.word	0x400200b8
 8005e88:	40020410 	.word	0x40020410
 8005e8c:	40020428 	.word	0x40020428
 8005e90:	40020440 	.word	0x40020440
 8005e94:	40020458 	.word	0x40020458
 8005e98:	40020470 	.word	0x40020470
 8005e9c:	40020488 	.word	0x40020488
 8005ea0:	400204a0 	.word	0x400204a0
 8005ea4:	400204b8 	.word	0x400204b8
 8005ea8:	58025408 	.word	0x58025408
 8005eac:	5802541c 	.word	0x5802541c
 8005eb0:	58025430 	.word	0x58025430
 8005eb4:	58025444 	.word	0x58025444
 8005eb8:	58025458 	.word	0x58025458
 8005ebc:	5802546c 	.word	0x5802546c
 8005ec0:	58025480 	.word	0x58025480
 8005ec4:	58025494 	.word	0x58025494

08005ec8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e226      	b.n	8006332 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d101      	bne.n	8005ef2 <HAL_DMA_Start_IT+0x2a>
 8005eee:	2302      	movs	r3, #2
 8005ef0:	e21f      	b.n	8006332 <HAL_DMA_Start_IT+0x46a>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	f040 820a 	bne.w	800631c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a68      	ldr	r2, [pc, #416]	; (80060bc <HAL_DMA_Start_IT+0x1f4>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d04a      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a66      	ldr	r2, [pc, #408]	; (80060c0 <HAL_DMA_Start_IT+0x1f8>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d045      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a65      	ldr	r2, [pc, #404]	; (80060c4 <HAL_DMA_Start_IT+0x1fc>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d040      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a63      	ldr	r2, [pc, #396]	; (80060c8 <HAL_DMA_Start_IT+0x200>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d03b      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a62      	ldr	r2, [pc, #392]	; (80060cc <HAL_DMA_Start_IT+0x204>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d036      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a60      	ldr	r2, [pc, #384]	; (80060d0 <HAL_DMA_Start_IT+0x208>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d031      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a5f      	ldr	r2, [pc, #380]	; (80060d4 <HAL_DMA_Start_IT+0x20c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d02c      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a5d      	ldr	r2, [pc, #372]	; (80060d8 <HAL_DMA_Start_IT+0x210>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d027      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a5c      	ldr	r2, [pc, #368]	; (80060dc <HAL_DMA_Start_IT+0x214>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d022      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a5a      	ldr	r2, [pc, #360]	; (80060e0 <HAL_DMA_Start_IT+0x218>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d01d      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a59      	ldr	r2, [pc, #356]	; (80060e4 <HAL_DMA_Start_IT+0x21c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d018      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a57      	ldr	r2, [pc, #348]	; (80060e8 <HAL_DMA_Start_IT+0x220>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d013      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a56      	ldr	r2, [pc, #344]	; (80060ec <HAL_DMA_Start_IT+0x224>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d00e      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a54      	ldr	r2, [pc, #336]	; (80060f0 <HAL_DMA_Start_IT+0x228>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d009      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a53      	ldr	r2, [pc, #332]	; (80060f4 <HAL_DMA_Start_IT+0x22c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d004      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a51      	ldr	r2, [pc, #324]	; (80060f8 <HAL_DMA_Start_IT+0x230>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d108      	bne.n	8005fc8 <HAL_DMA_Start_IT+0x100>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 0201 	bic.w	r2, r2, #1
 8005fc4:	601a      	str	r2, [r3, #0]
 8005fc6:	e007      	b.n	8005fd8 <HAL_DMA_Start_IT+0x110>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0201 	bic.w	r2, r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	68b9      	ldr	r1, [r7, #8]
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f001 fe6a 	bl	8007cb8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a34      	ldr	r2, [pc, #208]	; (80060bc <HAL_DMA_Start_IT+0x1f4>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d04a      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a33      	ldr	r2, [pc, #204]	; (80060c0 <HAL_DMA_Start_IT+0x1f8>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d045      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a31      	ldr	r2, [pc, #196]	; (80060c4 <HAL_DMA_Start_IT+0x1fc>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d040      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a30      	ldr	r2, [pc, #192]	; (80060c8 <HAL_DMA_Start_IT+0x200>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d03b      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a2e      	ldr	r2, [pc, #184]	; (80060cc <HAL_DMA_Start_IT+0x204>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d036      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a2d      	ldr	r2, [pc, #180]	; (80060d0 <HAL_DMA_Start_IT+0x208>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d031      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a2b      	ldr	r2, [pc, #172]	; (80060d4 <HAL_DMA_Start_IT+0x20c>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d02c      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a2a      	ldr	r2, [pc, #168]	; (80060d8 <HAL_DMA_Start_IT+0x210>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d027      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a28      	ldr	r2, [pc, #160]	; (80060dc <HAL_DMA_Start_IT+0x214>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d022      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a27      	ldr	r2, [pc, #156]	; (80060e0 <HAL_DMA_Start_IT+0x218>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d01d      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a25      	ldr	r2, [pc, #148]	; (80060e4 <HAL_DMA_Start_IT+0x21c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d018      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a24      	ldr	r2, [pc, #144]	; (80060e8 <HAL_DMA_Start_IT+0x220>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d013      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a22      	ldr	r2, [pc, #136]	; (80060ec <HAL_DMA_Start_IT+0x224>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d00e      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a21      	ldr	r2, [pc, #132]	; (80060f0 <HAL_DMA_Start_IT+0x228>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d009      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a1f      	ldr	r2, [pc, #124]	; (80060f4 <HAL_DMA_Start_IT+0x22c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d004      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a1e      	ldr	r2, [pc, #120]	; (80060f8 <HAL_DMA_Start_IT+0x230>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d101      	bne.n	8006088 <HAL_DMA_Start_IT+0x1c0>
 8006084:	2301      	movs	r3, #1
 8006086:	e000      	b.n	800608a <HAL_DMA_Start_IT+0x1c2>
 8006088:	2300      	movs	r3, #0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d036      	beq.n	80060fc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f023 021e 	bic.w	r2, r3, #30
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f042 0216 	orr.w	r2, r2, #22
 80060a0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d03e      	beq.n	8006128 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f042 0208 	orr.w	r2, r2, #8
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	e035      	b.n	8006128 <HAL_DMA_Start_IT+0x260>
 80060bc:	40020010 	.word	0x40020010
 80060c0:	40020028 	.word	0x40020028
 80060c4:	40020040 	.word	0x40020040
 80060c8:	40020058 	.word	0x40020058
 80060cc:	40020070 	.word	0x40020070
 80060d0:	40020088 	.word	0x40020088
 80060d4:	400200a0 	.word	0x400200a0
 80060d8:	400200b8 	.word	0x400200b8
 80060dc:	40020410 	.word	0x40020410
 80060e0:	40020428 	.word	0x40020428
 80060e4:	40020440 	.word	0x40020440
 80060e8:	40020458 	.word	0x40020458
 80060ec:	40020470 	.word	0x40020470
 80060f0:	40020488 	.word	0x40020488
 80060f4:	400204a0 	.word	0x400204a0
 80060f8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f023 020e 	bic.w	r2, r3, #14
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 020a 	orr.w	r2, r2, #10
 800610e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006114:	2b00      	cmp	r3, #0
 8006116:	d007      	beq.n	8006128 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0204 	orr.w	r2, r2, #4
 8006126:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a83      	ldr	r2, [pc, #524]	; (800633c <HAL_DMA_Start_IT+0x474>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d072      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a82      	ldr	r2, [pc, #520]	; (8006340 <HAL_DMA_Start_IT+0x478>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d06d      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a80      	ldr	r2, [pc, #512]	; (8006344 <HAL_DMA_Start_IT+0x47c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d068      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a7f      	ldr	r2, [pc, #508]	; (8006348 <HAL_DMA_Start_IT+0x480>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d063      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a7d      	ldr	r2, [pc, #500]	; (800634c <HAL_DMA_Start_IT+0x484>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d05e      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a7c      	ldr	r2, [pc, #496]	; (8006350 <HAL_DMA_Start_IT+0x488>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d059      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a7a      	ldr	r2, [pc, #488]	; (8006354 <HAL_DMA_Start_IT+0x48c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d054      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a79      	ldr	r2, [pc, #484]	; (8006358 <HAL_DMA_Start_IT+0x490>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d04f      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a77      	ldr	r2, [pc, #476]	; (800635c <HAL_DMA_Start_IT+0x494>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d04a      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a76      	ldr	r2, [pc, #472]	; (8006360 <HAL_DMA_Start_IT+0x498>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d045      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a74      	ldr	r2, [pc, #464]	; (8006364 <HAL_DMA_Start_IT+0x49c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d040      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a73      	ldr	r2, [pc, #460]	; (8006368 <HAL_DMA_Start_IT+0x4a0>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d03b      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a71      	ldr	r2, [pc, #452]	; (800636c <HAL_DMA_Start_IT+0x4a4>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d036      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a70      	ldr	r2, [pc, #448]	; (8006370 <HAL_DMA_Start_IT+0x4a8>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d031      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a6e      	ldr	r2, [pc, #440]	; (8006374 <HAL_DMA_Start_IT+0x4ac>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d02c      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a6d      	ldr	r2, [pc, #436]	; (8006378 <HAL_DMA_Start_IT+0x4b0>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d027      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a6b      	ldr	r2, [pc, #428]	; (800637c <HAL_DMA_Start_IT+0x4b4>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d022      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a6a      	ldr	r2, [pc, #424]	; (8006380 <HAL_DMA_Start_IT+0x4b8>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d01d      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a68      	ldr	r2, [pc, #416]	; (8006384 <HAL_DMA_Start_IT+0x4bc>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d018      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a67      	ldr	r2, [pc, #412]	; (8006388 <HAL_DMA_Start_IT+0x4c0>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d013      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a65      	ldr	r2, [pc, #404]	; (800638c <HAL_DMA_Start_IT+0x4c4>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d00e      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a64      	ldr	r2, [pc, #400]	; (8006390 <HAL_DMA_Start_IT+0x4c8>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d009      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a62      	ldr	r2, [pc, #392]	; (8006394 <HAL_DMA_Start_IT+0x4cc>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d004      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a61      	ldr	r2, [pc, #388]	; (8006398 <HAL_DMA_Start_IT+0x4d0>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d101      	bne.n	800621c <HAL_DMA_Start_IT+0x354>
 8006218:	2301      	movs	r3, #1
 800621a:	e000      	b.n	800621e <HAL_DMA_Start_IT+0x356>
 800621c:	2300      	movs	r3, #0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d01a      	beq.n	8006258 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d007      	beq.n	8006240 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800623a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800623e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006244:	2b00      	cmp	r3, #0
 8006246:	d007      	beq.n	8006258 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006252:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006256:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a37      	ldr	r2, [pc, #220]	; (800633c <HAL_DMA_Start_IT+0x474>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d04a      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a36      	ldr	r2, [pc, #216]	; (8006340 <HAL_DMA_Start_IT+0x478>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d045      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a34      	ldr	r2, [pc, #208]	; (8006344 <HAL_DMA_Start_IT+0x47c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d040      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a33      	ldr	r2, [pc, #204]	; (8006348 <HAL_DMA_Start_IT+0x480>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d03b      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a31      	ldr	r2, [pc, #196]	; (800634c <HAL_DMA_Start_IT+0x484>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d036      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a30      	ldr	r2, [pc, #192]	; (8006350 <HAL_DMA_Start_IT+0x488>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d031      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a2e      	ldr	r2, [pc, #184]	; (8006354 <HAL_DMA_Start_IT+0x48c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d02c      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a2d      	ldr	r2, [pc, #180]	; (8006358 <HAL_DMA_Start_IT+0x490>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d027      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a2b      	ldr	r2, [pc, #172]	; (800635c <HAL_DMA_Start_IT+0x494>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d022      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a2a      	ldr	r2, [pc, #168]	; (8006360 <HAL_DMA_Start_IT+0x498>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d01d      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a28      	ldr	r2, [pc, #160]	; (8006364 <HAL_DMA_Start_IT+0x49c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d018      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a27      	ldr	r2, [pc, #156]	; (8006368 <HAL_DMA_Start_IT+0x4a0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d013      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a25      	ldr	r2, [pc, #148]	; (800636c <HAL_DMA_Start_IT+0x4a4>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d00e      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a24      	ldr	r2, [pc, #144]	; (8006370 <HAL_DMA_Start_IT+0x4a8>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d009      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a22      	ldr	r2, [pc, #136]	; (8006374 <HAL_DMA_Start_IT+0x4ac>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d004      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a21      	ldr	r2, [pc, #132]	; (8006378 <HAL_DMA_Start_IT+0x4b0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d108      	bne.n	800630a <HAL_DMA_Start_IT+0x442>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f042 0201 	orr.w	r2, r2, #1
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	e012      	b.n	8006330 <HAL_DMA_Start_IT+0x468>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f042 0201 	orr.w	r2, r2, #1
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	e009      	b.n	8006330 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006322:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006330:	7dfb      	ldrb	r3, [r7, #23]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3718      	adds	r7, #24
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	40020010 	.word	0x40020010
 8006340:	40020028 	.word	0x40020028
 8006344:	40020040 	.word	0x40020040
 8006348:	40020058 	.word	0x40020058
 800634c:	40020070 	.word	0x40020070
 8006350:	40020088 	.word	0x40020088
 8006354:	400200a0 	.word	0x400200a0
 8006358:	400200b8 	.word	0x400200b8
 800635c:	40020410 	.word	0x40020410
 8006360:	40020428 	.word	0x40020428
 8006364:	40020440 	.word	0x40020440
 8006368:	40020458 	.word	0x40020458
 800636c:	40020470 	.word	0x40020470
 8006370:	40020488 	.word	0x40020488
 8006374:	400204a0 	.word	0x400204a0
 8006378:	400204b8 	.word	0x400204b8
 800637c:	58025408 	.word	0x58025408
 8006380:	5802541c 	.word	0x5802541c
 8006384:	58025430 	.word	0x58025430
 8006388:	58025444 	.word	0x58025444
 800638c:	58025458 	.word	0x58025458
 8006390:	5802546c 	.word	0x5802546c
 8006394:	58025480 	.word	0x58025480
 8006398:	58025494 	.word	0x58025494

0800639c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80063a4:	f7fd f90c 	bl	80035c0 <HAL_GetTick>
 80063a8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d101      	bne.n	80063b4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e2dc      	b.n	800696e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d008      	beq.n	80063d2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2280      	movs	r2, #128	; 0x80
 80063c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e2cd      	b.n	800696e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a76      	ldr	r2, [pc, #472]	; (80065b0 <HAL_DMA_Abort+0x214>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d04a      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a74      	ldr	r2, [pc, #464]	; (80065b4 <HAL_DMA_Abort+0x218>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d045      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a73      	ldr	r2, [pc, #460]	; (80065b8 <HAL_DMA_Abort+0x21c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d040      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a71      	ldr	r2, [pc, #452]	; (80065bc <HAL_DMA_Abort+0x220>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d03b      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a70      	ldr	r2, [pc, #448]	; (80065c0 <HAL_DMA_Abort+0x224>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d036      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a6e      	ldr	r2, [pc, #440]	; (80065c4 <HAL_DMA_Abort+0x228>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d031      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a6d      	ldr	r2, [pc, #436]	; (80065c8 <HAL_DMA_Abort+0x22c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d02c      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a6b      	ldr	r2, [pc, #428]	; (80065cc <HAL_DMA_Abort+0x230>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d027      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a6a      	ldr	r2, [pc, #424]	; (80065d0 <HAL_DMA_Abort+0x234>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d022      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a68      	ldr	r2, [pc, #416]	; (80065d4 <HAL_DMA_Abort+0x238>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d01d      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a67      	ldr	r2, [pc, #412]	; (80065d8 <HAL_DMA_Abort+0x23c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d018      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a65      	ldr	r2, [pc, #404]	; (80065dc <HAL_DMA_Abort+0x240>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d013      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a64      	ldr	r2, [pc, #400]	; (80065e0 <HAL_DMA_Abort+0x244>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d00e      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a62      	ldr	r2, [pc, #392]	; (80065e4 <HAL_DMA_Abort+0x248>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d009      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a61      	ldr	r2, [pc, #388]	; (80065e8 <HAL_DMA_Abort+0x24c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d004      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a5f      	ldr	r2, [pc, #380]	; (80065ec <HAL_DMA_Abort+0x250>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d101      	bne.n	8006476 <HAL_DMA_Abort+0xda>
 8006472:	2301      	movs	r3, #1
 8006474:	e000      	b.n	8006478 <HAL_DMA_Abort+0xdc>
 8006476:	2300      	movs	r3, #0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d013      	beq.n	80064a4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 021e 	bic.w	r2, r2, #30
 800648a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	695a      	ldr	r2, [r3, #20]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800649a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	617b      	str	r3, [r7, #20]
 80064a2:	e00a      	b.n	80064ba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 020e 	bic.w	r2, r2, #14
 80064b2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a3c      	ldr	r2, [pc, #240]	; (80065b0 <HAL_DMA_Abort+0x214>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d072      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a3a      	ldr	r2, [pc, #232]	; (80065b4 <HAL_DMA_Abort+0x218>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d06d      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a39      	ldr	r2, [pc, #228]	; (80065b8 <HAL_DMA_Abort+0x21c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d068      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a37      	ldr	r2, [pc, #220]	; (80065bc <HAL_DMA_Abort+0x220>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d063      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a36      	ldr	r2, [pc, #216]	; (80065c0 <HAL_DMA_Abort+0x224>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d05e      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a34      	ldr	r2, [pc, #208]	; (80065c4 <HAL_DMA_Abort+0x228>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d059      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a33      	ldr	r2, [pc, #204]	; (80065c8 <HAL_DMA_Abort+0x22c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d054      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a31      	ldr	r2, [pc, #196]	; (80065cc <HAL_DMA_Abort+0x230>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d04f      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a30      	ldr	r2, [pc, #192]	; (80065d0 <HAL_DMA_Abort+0x234>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d04a      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a2e      	ldr	r2, [pc, #184]	; (80065d4 <HAL_DMA_Abort+0x238>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d045      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a2d      	ldr	r2, [pc, #180]	; (80065d8 <HAL_DMA_Abort+0x23c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d040      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a2b      	ldr	r2, [pc, #172]	; (80065dc <HAL_DMA_Abort+0x240>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d03b      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a2a      	ldr	r2, [pc, #168]	; (80065e0 <HAL_DMA_Abort+0x244>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d036      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a28      	ldr	r2, [pc, #160]	; (80065e4 <HAL_DMA_Abort+0x248>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d031      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a27      	ldr	r2, [pc, #156]	; (80065e8 <HAL_DMA_Abort+0x24c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d02c      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a25      	ldr	r2, [pc, #148]	; (80065ec <HAL_DMA_Abort+0x250>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d027      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a24      	ldr	r2, [pc, #144]	; (80065f0 <HAL_DMA_Abort+0x254>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d022      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a22      	ldr	r2, [pc, #136]	; (80065f4 <HAL_DMA_Abort+0x258>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d01d      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a21      	ldr	r2, [pc, #132]	; (80065f8 <HAL_DMA_Abort+0x25c>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d018      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a1f      	ldr	r2, [pc, #124]	; (80065fc <HAL_DMA_Abort+0x260>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d013      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a1e      	ldr	r2, [pc, #120]	; (8006600 <HAL_DMA_Abort+0x264>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d00e      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a1c      	ldr	r2, [pc, #112]	; (8006604 <HAL_DMA_Abort+0x268>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d009      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a1b      	ldr	r2, [pc, #108]	; (8006608 <HAL_DMA_Abort+0x26c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d004      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a19      	ldr	r2, [pc, #100]	; (800660c <HAL_DMA_Abort+0x270>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d132      	bne.n	8006610 <HAL_DMA_Abort+0x274>
 80065aa:	2301      	movs	r3, #1
 80065ac:	e031      	b.n	8006612 <HAL_DMA_Abort+0x276>
 80065ae:	bf00      	nop
 80065b0:	40020010 	.word	0x40020010
 80065b4:	40020028 	.word	0x40020028
 80065b8:	40020040 	.word	0x40020040
 80065bc:	40020058 	.word	0x40020058
 80065c0:	40020070 	.word	0x40020070
 80065c4:	40020088 	.word	0x40020088
 80065c8:	400200a0 	.word	0x400200a0
 80065cc:	400200b8 	.word	0x400200b8
 80065d0:	40020410 	.word	0x40020410
 80065d4:	40020428 	.word	0x40020428
 80065d8:	40020440 	.word	0x40020440
 80065dc:	40020458 	.word	0x40020458
 80065e0:	40020470 	.word	0x40020470
 80065e4:	40020488 	.word	0x40020488
 80065e8:	400204a0 	.word	0x400204a0
 80065ec:	400204b8 	.word	0x400204b8
 80065f0:	58025408 	.word	0x58025408
 80065f4:	5802541c 	.word	0x5802541c
 80065f8:	58025430 	.word	0x58025430
 80065fc:	58025444 	.word	0x58025444
 8006600:	58025458 	.word	0x58025458
 8006604:	5802546c 	.word	0x5802546c
 8006608:	58025480 	.word	0x58025480
 800660c:	58025494 	.word	0x58025494
 8006610:	2300      	movs	r3, #0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d007      	beq.n	8006626 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006620:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006624:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a6d      	ldr	r2, [pc, #436]	; (80067e0 <HAL_DMA_Abort+0x444>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d04a      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a6b      	ldr	r2, [pc, #428]	; (80067e4 <HAL_DMA_Abort+0x448>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d045      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a6a      	ldr	r2, [pc, #424]	; (80067e8 <HAL_DMA_Abort+0x44c>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d040      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a68      	ldr	r2, [pc, #416]	; (80067ec <HAL_DMA_Abort+0x450>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d03b      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a67      	ldr	r2, [pc, #412]	; (80067f0 <HAL_DMA_Abort+0x454>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d036      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a65      	ldr	r2, [pc, #404]	; (80067f4 <HAL_DMA_Abort+0x458>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d031      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a64      	ldr	r2, [pc, #400]	; (80067f8 <HAL_DMA_Abort+0x45c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d02c      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a62      	ldr	r2, [pc, #392]	; (80067fc <HAL_DMA_Abort+0x460>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d027      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a61      	ldr	r2, [pc, #388]	; (8006800 <HAL_DMA_Abort+0x464>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d022      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a5f      	ldr	r2, [pc, #380]	; (8006804 <HAL_DMA_Abort+0x468>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d01d      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a5e      	ldr	r2, [pc, #376]	; (8006808 <HAL_DMA_Abort+0x46c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d018      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a5c      	ldr	r2, [pc, #368]	; (800680c <HAL_DMA_Abort+0x470>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d013      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a5b      	ldr	r2, [pc, #364]	; (8006810 <HAL_DMA_Abort+0x474>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d00e      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a59      	ldr	r2, [pc, #356]	; (8006814 <HAL_DMA_Abort+0x478>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d009      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a58      	ldr	r2, [pc, #352]	; (8006818 <HAL_DMA_Abort+0x47c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d004      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a56      	ldr	r2, [pc, #344]	; (800681c <HAL_DMA_Abort+0x480>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d108      	bne.n	80066d8 <HAL_DMA_Abort+0x33c>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0201 	bic.w	r2, r2, #1
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	e007      	b.n	80066e8 <HAL_DMA_Abort+0x34c>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0201 	bic.w	r2, r2, #1
 80066e6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80066e8:	e013      	b.n	8006712 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066ea:	f7fc ff69 	bl	80035c0 <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	2b05      	cmp	r3, #5
 80066f6:	d90c      	bls.n	8006712 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2220      	movs	r2, #32
 80066fc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2203      	movs	r2, #3
 8006702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e12d      	b.n	800696e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1e5      	bne.n	80066ea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a2f      	ldr	r2, [pc, #188]	; (80067e0 <HAL_DMA_Abort+0x444>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d04a      	beq.n	80067be <HAL_DMA_Abort+0x422>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a2d      	ldr	r2, [pc, #180]	; (80067e4 <HAL_DMA_Abort+0x448>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d045      	beq.n	80067be <HAL_DMA_Abort+0x422>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a2c      	ldr	r2, [pc, #176]	; (80067e8 <HAL_DMA_Abort+0x44c>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d040      	beq.n	80067be <HAL_DMA_Abort+0x422>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a2a      	ldr	r2, [pc, #168]	; (80067ec <HAL_DMA_Abort+0x450>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d03b      	beq.n	80067be <HAL_DMA_Abort+0x422>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a29      	ldr	r2, [pc, #164]	; (80067f0 <HAL_DMA_Abort+0x454>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d036      	beq.n	80067be <HAL_DMA_Abort+0x422>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a27      	ldr	r2, [pc, #156]	; (80067f4 <HAL_DMA_Abort+0x458>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d031      	beq.n	80067be <HAL_DMA_Abort+0x422>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a26      	ldr	r2, [pc, #152]	; (80067f8 <HAL_DMA_Abort+0x45c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d02c      	beq.n	80067be <HAL_DMA_Abort+0x422>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a24      	ldr	r2, [pc, #144]	; (80067fc <HAL_DMA_Abort+0x460>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d027      	beq.n	80067be <HAL_DMA_Abort+0x422>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a23      	ldr	r2, [pc, #140]	; (8006800 <HAL_DMA_Abort+0x464>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d022      	beq.n	80067be <HAL_DMA_Abort+0x422>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a21      	ldr	r2, [pc, #132]	; (8006804 <HAL_DMA_Abort+0x468>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d01d      	beq.n	80067be <HAL_DMA_Abort+0x422>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a20      	ldr	r2, [pc, #128]	; (8006808 <HAL_DMA_Abort+0x46c>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d018      	beq.n	80067be <HAL_DMA_Abort+0x422>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a1e      	ldr	r2, [pc, #120]	; (800680c <HAL_DMA_Abort+0x470>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d013      	beq.n	80067be <HAL_DMA_Abort+0x422>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a1d      	ldr	r2, [pc, #116]	; (8006810 <HAL_DMA_Abort+0x474>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d00e      	beq.n	80067be <HAL_DMA_Abort+0x422>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a1b      	ldr	r2, [pc, #108]	; (8006814 <HAL_DMA_Abort+0x478>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d009      	beq.n	80067be <HAL_DMA_Abort+0x422>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a1a      	ldr	r2, [pc, #104]	; (8006818 <HAL_DMA_Abort+0x47c>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d004      	beq.n	80067be <HAL_DMA_Abort+0x422>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a18      	ldr	r2, [pc, #96]	; (800681c <HAL_DMA_Abort+0x480>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d101      	bne.n	80067c2 <HAL_DMA_Abort+0x426>
 80067be:	2301      	movs	r3, #1
 80067c0:	e000      	b.n	80067c4 <HAL_DMA_Abort+0x428>
 80067c2:	2300      	movs	r3, #0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d02b      	beq.n	8006820 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067cc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d2:	f003 031f 	and.w	r3, r3, #31
 80067d6:	223f      	movs	r2, #63	; 0x3f
 80067d8:	409a      	lsls	r2, r3
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	609a      	str	r2, [r3, #8]
 80067de:	e02a      	b.n	8006836 <HAL_DMA_Abort+0x49a>
 80067e0:	40020010 	.word	0x40020010
 80067e4:	40020028 	.word	0x40020028
 80067e8:	40020040 	.word	0x40020040
 80067ec:	40020058 	.word	0x40020058
 80067f0:	40020070 	.word	0x40020070
 80067f4:	40020088 	.word	0x40020088
 80067f8:	400200a0 	.word	0x400200a0
 80067fc:	400200b8 	.word	0x400200b8
 8006800:	40020410 	.word	0x40020410
 8006804:	40020428 	.word	0x40020428
 8006808:	40020440 	.word	0x40020440
 800680c:	40020458 	.word	0x40020458
 8006810:	40020470 	.word	0x40020470
 8006814:	40020488 	.word	0x40020488
 8006818:	400204a0 	.word	0x400204a0
 800681c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006824:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800682a:	f003 031f 	and.w	r3, r3, #31
 800682e:	2201      	movs	r2, #1
 8006830:	409a      	lsls	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a4f      	ldr	r2, [pc, #316]	; (8006978 <HAL_DMA_Abort+0x5dc>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d072      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a4d      	ldr	r2, [pc, #308]	; (800697c <HAL_DMA_Abort+0x5e0>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d06d      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a4c      	ldr	r2, [pc, #304]	; (8006980 <HAL_DMA_Abort+0x5e4>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d068      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a4a      	ldr	r2, [pc, #296]	; (8006984 <HAL_DMA_Abort+0x5e8>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d063      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a49      	ldr	r2, [pc, #292]	; (8006988 <HAL_DMA_Abort+0x5ec>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d05e      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a47      	ldr	r2, [pc, #284]	; (800698c <HAL_DMA_Abort+0x5f0>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d059      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a46      	ldr	r2, [pc, #280]	; (8006990 <HAL_DMA_Abort+0x5f4>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d054      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a44      	ldr	r2, [pc, #272]	; (8006994 <HAL_DMA_Abort+0x5f8>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d04f      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a43      	ldr	r2, [pc, #268]	; (8006998 <HAL_DMA_Abort+0x5fc>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d04a      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a41      	ldr	r2, [pc, #260]	; (800699c <HAL_DMA_Abort+0x600>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d045      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a40      	ldr	r2, [pc, #256]	; (80069a0 <HAL_DMA_Abort+0x604>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d040      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a3e      	ldr	r2, [pc, #248]	; (80069a4 <HAL_DMA_Abort+0x608>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d03b      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a3d      	ldr	r2, [pc, #244]	; (80069a8 <HAL_DMA_Abort+0x60c>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d036      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a3b      	ldr	r2, [pc, #236]	; (80069ac <HAL_DMA_Abort+0x610>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d031      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a3a      	ldr	r2, [pc, #232]	; (80069b0 <HAL_DMA_Abort+0x614>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d02c      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a38      	ldr	r2, [pc, #224]	; (80069b4 <HAL_DMA_Abort+0x618>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d027      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a37      	ldr	r2, [pc, #220]	; (80069b8 <HAL_DMA_Abort+0x61c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d022      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a35      	ldr	r2, [pc, #212]	; (80069bc <HAL_DMA_Abort+0x620>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d01d      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a34      	ldr	r2, [pc, #208]	; (80069c0 <HAL_DMA_Abort+0x624>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d018      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a32      	ldr	r2, [pc, #200]	; (80069c4 <HAL_DMA_Abort+0x628>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d013      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a31      	ldr	r2, [pc, #196]	; (80069c8 <HAL_DMA_Abort+0x62c>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d00e      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a2f      	ldr	r2, [pc, #188]	; (80069cc <HAL_DMA_Abort+0x630>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d009      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a2e      	ldr	r2, [pc, #184]	; (80069d0 <HAL_DMA_Abort+0x634>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d004      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a2c      	ldr	r2, [pc, #176]	; (80069d4 <HAL_DMA_Abort+0x638>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d101      	bne.n	800692a <HAL_DMA_Abort+0x58e>
 8006926:	2301      	movs	r3, #1
 8006928:	e000      	b.n	800692c <HAL_DMA_Abort+0x590>
 800692a:	2300      	movs	r3, #0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d015      	beq.n	800695c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006938:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00c      	beq.n	800695c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800694c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006950:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800695a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	40020010 	.word	0x40020010
 800697c:	40020028 	.word	0x40020028
 8006980:	40020040 	.word	0x40020040
 8006984:	40020058 	.word	0x40020058
 8006988:	40020070 	.word	0x40020070
 800698c:	40020088 	.word	0x40020088
 8006990:	400200a0 	.word	0x400200a0
 8006994:	400200b8 	.word	0x400200b8
 8006998:	40020410 	.word	0x40020410
 800699c:	40020428 	.word	0x40020428
 80069a0:	40020440 	.word	0x40020440
 80069a4:	40020458 	.word	0x40020458
 80069a8:	40020470 	.word	0x40020470
 80069ac:	40020488 	.word	0x40020488
 80069b0:	400204a0 	.word	0x400204a0
 80069b4:	400204b8 	.word	0x400204b8
 80069b8:	58025408 	.word	0x58025408
 80069bc:	5802541c 	.word	0x5802541c
 80069c0:	58025430 	.word	0x58025430
 80069c4:	58025444 	.word	0x58025444
 80069c8:	58025458 	.word	0x58025458
 80069cc:	5802546c 	.word	0x5802546c
 80069d0:	58025480 	.word	0x58025480
 80069d4:	58025494 	.word	0x58025494

080069d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e237      	b.n	8006e5a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d004      	beq.n	8006a00 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2280      	movs	r2, #128	; 0x80
 80069fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e22c      	b.n	8006e5a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a5c      	ldr	r2, [pc, #368]	; (8006b78 <HAL_DMA_Abort_IT+0x1a0>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d04a      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a5b      	ldr	r2, [pc, #364]	; (8006b7c <HAL_DMA_Abort_IT+0x1a4>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d045      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a59      	ldr	r2, [pc, #356]	; (8006b80 <HAL_DMA_Abort_IT+0x1a8>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d040      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a58      	ldr	r2, [pc, #352]	; (8006b84 <HAL_DMA_Abort_IT+0x1ac>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d03b      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a56      	ldr	r2, [pc, #344]	; (8006b88 <HAL_DMA_Abort_IT+0x1b0>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d036      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a55      	ldr	r2, [pc, #340]	; (8006b8c <HAL_DMA_Abort_IT+0x1b4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d031      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a53      	ldr	r2, [pc, #332]	; (8006b90 <HAL_DMA_Abort_IT+0x1b8>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d02c      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a52      	ldr	r2, [pc, #328]	; (8006b94 <HAL_DMA_Abort_IT+0x1bc>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d027      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a50      	ldr	r2, [pc, #320]	; (8006b98 <HAL_DMA_Abort_IT+0x1c0>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d022      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a4f      	ldr	r2, [pc, #316]	; (8006b9c <HAL_DMA_Abort_IT+0x1c4>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d01d      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a4d      	ldr	r2, [pc, #308]	; (8006ba0 <HAL_DMA_Abort_IT+0x1c8>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d018      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a4c      	ldr	r2, [pc, #304]	; (8006ba4 <HAL_DMA_Abort_IT+0x1cc>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d013      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a4a      	ldr	r2, [pc, #296]	; (8006ba8 <HAL_DMA_Abort_IT+0x1d0>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d00e      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a49      	ldr	r2, [pc, #292]	; (8006bac <HAL_DMA_Abort_IT+0x1d4>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d009      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a47      	ldr	r2, [pc, #284]	; (8006bb0 <HAL_DMA_Abort_IT+0x1d8>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d004      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a46      	ldr	r2, [pc, #280]	; (8006bb4 <HAL_DMA_Abort_IT+0x1dc>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d101      	bne.n	8006aa4 <HAL_DMA_Abort_IT+0xcc>
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e000      	b.n	8006aa6 <HAL_DMA_Abort_IT+0xce>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f000 8086 	beq.w	8006bb8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2204      	movs	r2, #4
 8006ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a2f      	ldr	r2, [pc, #188]	; (8006b78 <HAL_DMA_Abort_IT+0x1a0>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d04a      	beq.n	8006b54 <HAL_DMA_Abort_IT+0x17c>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a2e      	ldr	r2, [pc, #184]	; (8006b7c <HAL_DMA_Abort_IT+0x1a4>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d045      	beq.n	8006b54 <HAL_DMA_Abort_IT+0x17c>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a2c      	ldr	r2, [pc, #176]	; (8006b80 <HAL_DMA_Abort_IT+0x1a8>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d040      	beq.n	8006b54 <HAL_DMA_Abort_IT+0x17c>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a2b      	ldr	r2, [pc, #172]	; (8006b84 <HAL_DMA_Abort_IT+0x1ac>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d03b      	beq.n	8006b54 <HAL_DMA_Abort_IT+0x17c>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a29      	ldr	r2, [pc, #164]	; (8006b88 <HAL_DMA_Abort_IT+0x1b0>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d036      	beq.n	8006b54 <HAL_DMA_Abort_IT+0x17c>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a28      	ldr	r2, [pc, #160]	; (8006b8c <HAL_DMA_Abort_IT+0x1b4>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d031      	beq.n	8006b54 <HAL_DMA_Abort_IT+0x17c>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a26      	ldr	r2, [pc, #152]	; (8006b90 <HAL_DMA_Abort_IT+0x1b8>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d02c      	beq.n	8006b54 <HAL_DMA_Abort_IT+0x17c>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a25      	ldr	r2, [pc, #148]	; (8006b94 <HAL_DMA_Abort_IT+0x1bc>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d027      	beq.n	8006b54 <HAL_DMA_Abort_IT+0x17c>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a23      	ldr	r2, [pc, #140]	; (8006b98 <HAL_DMA_Abort_IT+0x1c0>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d022      	beq.n	8006b54 <HAL_DMA_Abort_IT+0x17c>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a22      	ldr	r2, [pc, #136]	; (8006b9c <HAL_DMA_Abort_IT+0x1c4>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d01d      	beq.n	8006b54 <HAL_DMA_Abort_IT+0x17c>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a20      	ldr	r2, [pc, #128]	; (8006ba0 <HAL_DMA_Abort_IT+0x1c8>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d018      	beq.n	8006b54 <HAL_DMA_Abort_IT+0x17c>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a1f      	ldr	r2, [pc, #124]	; (8006ba4 <HAL_DMA_Abort_IT+0x1cc>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d013      	beq.n	8006b54 <HAL_DMA_Abort_IT+0x17c>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a1d      	ldr	r2, [pc, #116]	; (8006ba8 <HAL_DMA_Abort_IT+0x1d0>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d00e      	beq.n	8006b54 <HAL_DMA_Abort_IT+0x17c>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a1c      	ldr	r2, [pc, #112]	; (8006bac <HAL_DMA_Abort_IT+0x1d4>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d009      	beq.n	8006b54 <HAL_DMA_Abort_IT+0x17c>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a1a      	ldr	r2, [pc, #104]	; (8006bb0 <HAL_DMA_Abort_IT+0x1d8>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d004      	beq.n	8006b54 <HAL_DMA_Abort_IT+0x17c>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a19      	ldr	r2, [pc, #100]	; (8006bb4 <HAL_DMA_Abort_IT+0x1dc>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d108      	bne.n	8006b66 <HAL_DMA_Abort_IT+0x18e>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0201 	bic.w	r2, r2, #1
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	e178      	b.n	8006e58 <HAL_DMA_Abort_IT+0x480>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f022 0201 	bic.w	r2, r2, #1
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	e16f      	b.n	8006e58 <HAL_DMA_Abort_IT+0x480>
 8006b78:	40020010 	.word	0x40020010
 8006b7c:	40020028 	.word	0x40020028
 8006b80:	40020040 	.word	0x40020040
 8006b84:	40020058 	.word	0x40020058
 8006b88:	40020070 	.word	0x40020070
 8006b8c:	40020088 	.word	0x40020088
 8006b90:	400200a0 	.word	0x400200a0
 8006b94:	400200b8 	.word	0x400200b8
 8006b98:	40020410 	.word	0x40020410
 8006b9c:	40020428 	.word	0x40020428
 8006ba0:	40020440 	.word	0x40020440
 8006ba4:	40020458 	.word	0x40020458
 8006ba8:	40020470 	.word	0x40020470
 8006bac:	40020488 	.word	0x40020488
 8006bb0:	400204a0 	.word	0x400204a0
 8006bb4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f022 020e 	bic.w	r2, r2, #14
 8006bc6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a6c      	ldr	r2, [pc, #432]	; (8006d80 <HAL_DMA_Abort_IT+0x3a8>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d04a      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x290>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a6b      	ldr	r2, [pc, #428]	; (8006d84 <HAL_DMA_Abort_IT+0x3ac>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d045      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x290>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a69      	ldr	r2, [pc, #420]	; (8006d88 <HAL_DMA_Abort_IT+0x3b0>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d040      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x290>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a68      	ldr	r2, [pc, #416]	; (8006d8c <HAL_DMA_Abort_IT+0x3b4>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d03b      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x290>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a66      	ldr	r2, [pc, #408]	; (8006d90 <HAL_DMA_Abort_IT+0x3b8>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d036      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x290>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a65      	ldr	r2, [pc, #404]	; (8006d94 <HAL_DMA_Abort_IT+0x3bc>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d031      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x290>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a63      	ldr	r2, [pc, #396]	; (8006d98 <HAL_DMA_Abort_IT+0x3c0>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d02c      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x290>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a62      	ldr	r2, [pc, #392]	; (8006d9c <HAL_DMA_Abort_IT+0x3c4>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d027      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x290>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a60      	ldr	r2, [pc, #384]	; (8006da0 <HAL_DMA_Abort_IT+0x3c8>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d022      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x290>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a5f      	ldr	r2, [pc, #380]	; (8006da4 <HAL_DMA_Abort_IT+0x3cc>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d01d      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x290>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a5d      	ldr	r2, [pc, #372]	; (8006da8 <HAL_DMA_Abort_IT+0x3d0>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d018      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x290>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a5c      	ldr	r2, [pc, #368]	; (8006dac <HAL_DMA_Abort_IT+0x3d4>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d013      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x290>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a5a      	ldr	r2, [pc, #360]	; (8006db0 <HAL_DMA_Abort_IT+0x3d8>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d00e      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x290>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a59      	ldr	r2, [pc, #356]	; (8006db4 <HAL_DMA_Abort_IT+0x3dc>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d009      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x290>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a57      	ldr	r2, [pc, #348]	; (8006db8 <HAL_DMA_Abort_IT+0x3e0>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d004      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x290>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a56      	ldr	r2, [pc, #344]	; (8006dbc <HAL_DMA_Abort_IT+0x3e4>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d108      	bne.n	8006c7a <HAL_DMA_Abort_IT+0x2a2>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f022 0201 	bic.w	r2, r2, #1
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	e007      	b.n	8006c8a <HAL_DMA_Abort_IT+0x2b2>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f022 0201 	bic.w	r2, r2, #1
 8006c88:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a3c      	ldr	r2, [pc, #240]	; (8006d80 <HAL_DMA_Abort_IT+0x3a8>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d072      	beq.n	8006d7a <HAL_DMA_Abort_IT+0x3a2>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a3a      	ldr	r2, [pc, #232]	; (8006d84 <HAL_DMA_Abort_IT+0x3ac>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d06d      	beq.n	8006d7a <HAL_DMA_Abort_IT+0x3a2>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a39      	ldr	r2, [pc, #228]	; (8006d88 <HAL_DMA_Abort_IT+0x3b0>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d068      	beq.n	8006d7a <HAL_DMA_Abort_IT+0x3a2>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a37      	ldr	r2, [pc, #220]	; (8006d8c <HAL_DMA_Abort_IT+0x3b4>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d063      	beq.n	8006d7a <HAL_DMA_Abort_IT+0x3a2>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a36      	ldr	r2, [pc, #216]	; (8006d90 <HAL_DMA_Abort_IT+0x3b8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d05e      	beq.n	8006d7a <HAL_DMA_Abort_IT+0x3a2>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a34      	ldr	r2, [pc, #208]	; (8006d94 <HAL_DMA_Abort_IT+0x3bc>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d059      	beq.n	8006d7a <HAL_DMA_Abort_IT+0x3a2>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a33      	ldr	r2, [pc, #204]	; (8006d98 <HAL_DMA_Abort_IT+0x3c0>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d054      	beq.n	8006d7a <HAL_DMA_Abort_IT+0x3a2>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a31      	ldr	r2, [pc, #196]	; (8006d9c <HAL_DMA_Abort_IT+0x3c4>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d04f      	beq.n	8006d7a <HAL_DMA_Abort_IT+0x3a2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a30      	ldr	r2, [pc, #192]	; (8006da0 <HAL_DMA_Abort_IT+0x3c8>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d04a      	beq.n	8006d7a <HAL_DMA_Abort_IT+0x3a2>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a2e      	ldr	r2, [pc, #184]	; (8006da4 <HAL_DMA_Abort_IT+0x3cc>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d045      	beq.n	8006d7a <HAL_DMA_Abort_IT+0x3a2>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a2d      	ldr	r2, [pc, #180]	; (8006da8 <HAL_DMA_Abort_IT+0x3d0>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d040      	beq.n	8006d7a <HAL_DMA_Abort_IT+0x3a2>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a2b      	ldr	r2, [pc, #172]	; (8006dac <HAL_DMA_Abort_IT+0x3d4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d03b      	beq.n	8006d7a <HAL_DMA_Abort_IT+0x3a2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a2a      	ldr	r2, [pc, #168]	; (8006db0 <HAL_DMA_Abort_IT+0x3d8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d036      	beq.n	8006d7a <HAL_DMA_Abort_IT+0x3a2>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a28      	ldr	r2, [pc, #160]	; (8006db4 <HAL_DMA_Abort_IT+0x3dc>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d031      	beq.n	8006d7a <HAL_DMA_Abort_IT+0x3a2>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a27      	ldr	r2, [pc, #156]	; (8006db8 <HAL_DMA_Abort_IT+0x3e0>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d02c      	beq.n	8006d7a <HAL_DMA_Abort_IT+0x3a2>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a25      	ldr	r2, [pc, #148]	; (8006dbc <HAL_DMA_Abort_IT+0x3e4>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d027      	beq.n	8006d7a <HAL_DMA_Abort_IT+0x3a2>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a24      	ldr	r2, [pc, #144]	; (8006dc0 <HAL_DMA_Abort_IT+0x3e8>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d022      	beq.n	8006d7a <HAL_DMA_Abort_IT+0x3a2>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a22      	ldr	r2, [pc, #136]	; (8006dc4 <HAL_DMA_Abort_IT+0x3ec>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d01d      	beq.n	8006d7a <HAL_DMA_Abort_IT+0x3a2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a21      	ldr	r2, [pc, #132]	; (8006dc8 <HAL_DMA_Abort_IT+0x3f0>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d018      	beq.n	8006d7a <HAL_DMA_Abort_IT+0x3a2>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a1f      	ldr	r2, [pc, #124]	; (8006dcc <HAL_DMA_Abort_IT+0x3f4>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d013      	beq.n	8006d7a <HAL_DMA_Abort_IT+0x3a2>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a1e      	ldr	r2, [pc, #120]	; (8006dd0 <HAL_DMA_Abort_IT+0x3f8>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d00e      	beq.n	8006d7a <HAL_DMA_Abort_IT+0x3a2>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a1c      	ldr	r2, [pc, #112]	; (8006dd4 <HAL_DMA_Abort_IT+0x3fc>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d009      	beq.n	8006d7a <HAL_DMA_Abort_IT+0x3a2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a1b      	ldr	r2, [pc, #108]	; (8006dd8 <HAL_DMA_Abort_IT+0x400>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d004      	beq.n	8006d7a <HAL_DMA_Abort_IT+0x3a2>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a19      	ldr	r2, [pc, #100]	; (8006ddc <HAL_DMA_Abort_IT+0x404>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d132      	bne.n	8006de0 <HAL_DMA_Abort_IT+0x408>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e031      	b.n	8006de2 <HAL_DMA_Abort_IT+0x40a>
 8006d7e:	bf00      	nop
 8006d80:	40020010 	.word	0x40020010
 8006d84:	40020028 	.word	0x40020028
 8006d88:	40020040 	.word	0x40020040
 8006d8c:	40020058 	.word	0x40020058
 8006d90:	40020070 	.word	0x40020070
 8006d94:	40020088 	.word	0x40020088
 8006d98:	400200a0 	.word	0x400200a0
 8006d9c:	400200b8 	.word	0x400200b8
 8006da0:	40020410 	.word	0x40020410
 8006da4:	40020428 	.word	0x40020428
 8006da8:	40020440 	.word	0x40020440
 8006dac:	40020458 	.word	0x40020458
 8006db0:	40020470 	.word	0x40020470
 8006db4:	40020488 	.word	0x40020488
 8006db8:	400204a0 	.word	0x400204a0
 8006dbc:	400204b8 	.word	0x400204b8
 8006dc0:	58025408 	.word	0x58025408
 8006dc4:	5802541c 	.word	0x5802541c
 8006dc8:	58025430 	.word	0x58025430
 8006dcc:	58025444 	.word	0x58025444
 8006dd0:	58025458 	.word	0x58025458
 8006dd4:	5802546c 	.word	0x5802546c
 8006dd8:	58025480 	.word	0x58025480
 8006ddc:	58025494 	.word	0x58025494
 8006de0:	2300      	movs	r3, #0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d028      	beq.n	8006e38 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006df0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006df4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dfa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e00:	f003 031f 	and.w	r3, r3, #31
 8006e04:	2201      	movs	r2, #1
 8006e06:	409a      	lsls	r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e14:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00c      	beq.n	8006e38 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e2c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e36:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d003      	beq.n	8006e58 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop

08006e64 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b08a      	sub	sp, #40	; 0x28
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006e70:	4b67      	ldr	r3, [pc, #412]	; (8007010 <HAL_DMA_IRQHandler+0x1ac>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a67      	ldr	r2, [pc, #412]	; (8007014 <HAL_DMA_IRQHandler+0x1b0>)
 8006e76:	fba2 2303 	umull	r2, r3, r2, r3
 8006e7a:	0a9b      	lsrs	r3, r3, #10
 8006e7c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e82:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e88:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006e8a:	6a3b      	ldr	r3, [r7, #32]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a5f      	ldr	r2, [pc, #380]	; (8007018 <HAL_DMA_IRQHandler+0x1b4>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d04a      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xd2>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a5d      	ldr	r2, [pc, #372]	; (800701c <HAL_DMA_IRQHandler+0x1b8>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d045      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xd2>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a5c      	ldr	r2, [pc, #368]	; (8007020 <HAL_DMA_IRQHandler+0x1bc>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d040      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xd2>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a5a      	ldr	r2, [pc, #360]	; (8007024 <HAL_DMA_IRQHandler+0x1c0>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d03b      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xd2>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a59      	ldr	r2, [pc, #356]	; (8007028 <HAL_DMA_IRQHandler+0x1c4>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d036      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xd2>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a57      	ldr	r2, [pc, #348]	; (800702c <HAL_DMA_IRQHandler+0x1c8>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d031      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xd2>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a56      	ldr	r2, [pc, #344]	; (8007030 <HAL_DMA_IRQHandler+0x1cc>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d02c      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xd2>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a54      	ldr	r2, [pc, #336]	; (8007034 <HAL_DMA_IRQHandler+0x1d0>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d027      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xd2>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a53      	ldr	r2, [pc, #332]	; (8007038 <HAL_DMA_IRQHandler+0x1d4>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d022      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xd2>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a51      	ldr	r2, [pc, #324]	; (800703c <HAL_DMA_IRQHandler+0x1d8>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d01d      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xd2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a50      	ldr	r2, [pc, #320]	; (8007040 <HAL_DMA_IRQHandler+0x1dc>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d018      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xd2>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a4e      	ldr	r2, [pc, #312]	; (8007044 <HAL_DMA_IRQHandler+0x1e0>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d013      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xd2>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a4d      	ldr	r2, [pc, #308]	; (8007048 <HAL_DMA_IRQHandler+0x1e4>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d00e      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xd2>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a4b      	ldr	r2, [pc, #300]	; (800704c <HAL_DMA_IRQHandler+0x1e8>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d009      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xd2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a4a      	ldr	r2, [pc, #296]	; (8007050 <HAL_DMA_IRQHandler+0x1ec>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d004      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xd2>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a48      	ldr	r2, [pc, #288]	; (8007054 <HAL_DMA_IRQHandler+0x1f0>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d101      	bne.n	8006f3a <HAL_DMA_IRQHandler+0xd6>
 8006f36:	2301      	movs	r3, #1
 8006f38:	e000      	b.n	8006f3c <HAL_DMA_IRQHandler+0xd8>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 842b 	beq.w	8007798 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f46:	f003 031f 	and.w	r3, r3, #31
 8006f4a:	2208      	movs	r2, #8
 8006f4c:	409a      	lsls	r2, r3
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	4013      	ands	r3, r2
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 80a2 	beq.w	800709c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a2e      	ldr	r2, [pc, #184]	; (8007018 <HAL_DMA_IRQHandler+0x1b4>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d04a      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x194>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a2d      	ldr	r2, [pc, #180]	; (800701c <HAL_DMA_IRQHandler+0x1b8>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d045      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x194>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a2b      	ldr	r2, [pc, #172]	; (8007020 <HAL_DMA_IRQHandler+0x1bc>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d040      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x194>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a2a      	ldr	r2, [pc, #168]	; (8007024 <HAL_DMA_IRQHandler+0x1c0>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d03b      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x194>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a28      	ldr	r2, [pc, #160]	; (8007028 <HAL_DMA_IRQHandler+0x1c4>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d036      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x194>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a27      	ldr	r2, [pc, #156]	; (800702c <HAL_DMA_IRQHandler+0x1c8>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d031      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x194>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a25      	ldr	r2, [pc, #148]	; (8007030 <HAL_DMA_IRQHandler+0x1cc>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d02c      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x194>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a24      	ldr	r2, [pc, #144]	; (8007034 <HAL_DMA_IRQHandler+0x1d0>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d027      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x194>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a22      	ldr	r2, [pc, #136]	; (8007038 <HAL_DMA_IRQHandler+0x1d4>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d022      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x194>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a21      	ldr	r2, [pc, #132]	; (800703c <HAL_DMA_IRQHandler+0x1d8>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d01d      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x194>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a1f      	ldr	r2, [pc, #124]	; (8007040 <HAL_DMA_IRQHandler+0x1dc>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d018      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x194>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a1e      	ldr	r2, [pc, #120]	; (8007044 <HAL_DMA_IRQHandler+0x1e0>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d013      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x194>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a1c      	ldr	r2, [pc, #112]	; (8007048 <HAL_DMA_IRQHandler+0x1e4>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d00e      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x194>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a1b      	ldr	r2, [pc, #108]	; (800704c <HAL_DMA_IRQHandler+0x1e8>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d009      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x194>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a19      	ldr	r2, [pc, #100]	; (8007050 <HAL_DMA_IRQHandler+0x1ec>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d004      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x194>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a18      	ldr	r2, [pc, #96]	; (8007054 <HAL_DMA_IRQHandler+0x1f0>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d12f      	bne.n	8007058 <HAL_DMA_IRQHandler+0x1f4>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0304 	and.w	r3, r3, #4
 8007002:	2b00      	cmp	r3, #0
 8007004:	bf14      	ite	ne
 8007006:	2301      	movne	r3, #1
 8007008:	2300      	moveq	r3, #0
 800700a:	b2db      	uxtb	r3, r3
 800700c:	e02e      	b.n	800706c <HAL_DMA_IRQHandler+0x208>
 800700e:	bf00      	nop
 8007010:	24000088 	.word	0x24000088
 8007014:	1b4e81b5 	.word	0x1b4e81b5
 8007018:	40020010 	.word	0x40020010
 800701c:	40020028 	.word	0x40020028
 8007020:	40020040 	.word	0x40020040
 8007024:	40020058 	.word	0x40020058
 8007028:	40020070 	.word	0x40020070
 800702c:	40020088 	.word	0x40020088
 8007030:	400200a0 	.word	0x400200a0
 8007034:	400200b8 	.word	0x400200b8
 8007038:	40020410 	.word	0x40020410
 800703c:	40020428 	.word	0x40020428
 8007040:	40020440 	.word	0x40020440
 8007044:	40020458 	.word	0x40020458
 8007048:	40020470 	.word	0x40020470
 800704c:	40020488 	.word	0x40020488
 8007050:	400204a0 	.word	0x400204a0
 8007054:	400204b8 	.word	0x400204b8
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0308 	and.w	r3, r3, #8
 8007062:	2b00      	cmp	r3, #0
 8007064:	bf14      	ite	ne
 8007066:	2301      	movne	r3, #1
 8007068:	2300      	moveq	r3, #0
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b00      	cmp	r3, #0
 800706e:	d015      	beq.n	800709c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f022 0204 	bic.w	r2, r2, #4
 800707e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007084:	f003 031f 	and.w	r3, r3, #31
 8007088:	2208      	movs	r2, #8
 800708a:	409a      	lsls	r2, r3
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007094:	f043 0201 	orr.w	r2, r3, #1
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070a0:	f003 031f 	and.w	r3, r3, #31
 80070a4:	69ba      	ldr	r2, [r7, #24]
 80070a6:	fa22 f303 	lsr.w	r3, r2, r3
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d06e      	beq.n	8007190 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a69      	ldr	r2, [pc, #420]	; (800725c <HAL_DMA_IRQHandler+0x3f8>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d04a      	beq.n	8007152 <HAL_DMA_IRQHandler+0x2ee>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a67      	ldr	r2, [pc, #412]	; (8007260 <HAL_DMA_IRQHandler+0x3fc>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d045      	beq.n	8007152 <HAL_DMA_IRQHandler+0x2ee>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a66      	ldr	r2, [pc, #408]	; (8007264 <HAL_DMA_IRQHandler+0x400>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d040      	beq.n	8007152 <HAL_DMA_IRQHandler+0x2ee>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a64      	ldr	r2, [pc, #400]	; (8007268 <HAL_DMA_IRQHandler+0x404>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d03b      	beq.n	8007152 <HAL_DMA_IRQHandler+0x2ee>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a63      	ldr	r2, [pc, #396]	; (800726c <HAL_DMA_IRQHandler+0x408>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d036      	beq.n	8007152 <HAL_DMA_IRQHandler+0x2ee>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a61      	ldr	r2, [pc, #388]	; (8007270 <HAL_DMA_IRQHandler+0x40c>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d031      	beq.n	8007152 <HAL_DMA_IRQHandler+0x2ee>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a60      	ldr	r2, [pc, #384]	; (8007274 <HAL_DMA_IRQHandler+0x410>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d02c      	beq.n	8007152 <HAL_DMA_IRQHandler+0x2ee>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a5e      	ldr	r2, [pc, #376]	; (8007278 <HAL_DMA_IRQHandler+0x414>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d027      	beq.n	8007152 <HAL_DMA_IRQHandler+0x2ee>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a5d      	ldr	r2, [pc, #372]	; (800727c <HAL_DMA_IRQHandler+0x418>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d022      	beq.n	8007152 <HAL_DMA_IRQHandler+0x2ee>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a5b      	ldr	r2, [pc, #364]	; (8007280 <HAL_DMA_IRQHandler+0x41c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d01d      	beq.n	8007152 <HAL_DMA_IRQHandler+0x2ee>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a5a      	ldr	r2, [pc, #360]	; (8007284 <HAL_DMA_IRQHandler+0x420>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d018      	beq.n	8007152 <HAL_DMA_IRQHandler+0x2ee>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a58      	ldr	r2, [pc, #352]	; (8007288 <HAL_DMA_IRQHandler+0x424>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d013      	beq.n	8007152 <HAL_DMA_IRQHandler+0x2ee>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a57      	ldr	r2, [pc, #348]	; (800728c <HAL_DMA_IRQHandler+0x428>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d00e      	beq.n	8007152 <HAL_DMA_IRQHandler+0x2ee>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a55      	ldr	r2, [pc, #340]	; (8007290 <HAL_DMA_IRQHandler+0x42c>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d009      	beq.n	8007152 <HAL_DMA_IRQHandler+0x2ee>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a54      	ldr	r2, [pc, #336]	; (8007294 <HAL_DMA_IRQHandler+0x430>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d004      	beq.n	8007152 <HAL_DMA_IRQHandler+0x2ee>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a52      	ldr	r2, [pc, #328]	; (8007298 <HAL_DMA_IRQHandler+0x434>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d10a      	bne.n	8007168 <HAL_DMA_IRQHandler+0x304>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800715c:	2b00      	cmp	r3, #0
 800715e:	bf14      	ite	ne
 8007160:	2301      	movne	r3, #1
 8007162:	2300      	moveq	r3, #0
 8007164:	b2db      	uxtb	r3, r3
 8007166:	e003      	b.n	8007170 <HAL_DMA_IRQHandler+0x30c>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2300      	movs	r3, #0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00d      	beq.n	8007190 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007178:	f003 031f 	and.w	r3, r3, #31
 800717c:	2201      	movs	r2, #1
 800717e:	409a      	lsls	r2, r3
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007188:	f043 0202 	orr.w	r2, r3, #2
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007194:	f003 031f 	and.w	r3, r3, #31
 8007198:	2204      	movs	r2, #4
 800719a:	409a      	lsls	r2, r3
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	4013      	ands	r3, r2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 808f 	beq.w	80072c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a2c      	ldr	r2, [pc, #176]	; (800725c <HAL_DMA_IRQHandler+0x3f8>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d04a      	beq.n	8007246 <HAL_DMA_IRQHandler+0x3e2>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a2a      	ldr	r2, [pc, #168]	; (8007260 <HAL_DMA_IRQHandler+0x3fc>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d045      	beq.n	8007246 <HAL_DMA_IRQHandler+0x3e2>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a29      	ldr	r2, [pc, #164]	; (8007264 <HAL_DMA_IRQHandler+0x400>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d040      	beq.n	8007246 <HAL_DMA_IRQHandler+0x3e2>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a27      	ldr	r2, [pc, #156]	; (8007268 <HAL_DMA_IRQHandler+0x404>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d03b      	beq.n	8007246 <HAL_DMA_IRQHandler+0x3e2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a26      	ldr	r2, [pc, #152]	; (800726c <HAL_DMA_IRQHandler+0x408>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d036      	beq.n	8007246 <HAL_DMA_IRQHandler+0x3e2>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a24      	ldr	r2, [pc, #144]	; (8007270 <HAL_DMA_IRQHandler+0x40c>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d031      	beq.n	8007246 <HAL_DMA_IRQHandler+0x3e2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a23      	ldr	r2, [pc, #140]	; (8007274 <HAL_DMA_IRQHandler+0x410>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d02c      	beq.n	8007246 <HAL_DMA_IRQHandler+0x3e2>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a21      	ldr	r2, [pc, #132]	; (8007278 <HAL_DMA_IRQHandler+0x414>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d027      	beq.n	8007246 <HAL_DMA_IRQHandler+0x3e2>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a20      	ldr	r2, [pc, #128]	; (800727c <HAL_DMA_IRQHandler+0x418>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d022      	beq.n	8007246 <HAL_DMA_IRQHandler+0x3e2>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a1e      	ldr	r2, [pc, #120]	; (8007280 <HAL_DMA_IRQHandler+0x41c>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d01d      	beq.n	8007246 <HAL_DMA_IRQHandler+0x3e2>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a1d      	ldr	r2, [pc, #116]	; (8007284 <HAL_DMA_IRQHandler+0x420>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d018      	beq.n	8007246 <HAL_DMA_IRQHandler+0x3e2>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a1b      	ldr	r2, [pc, #108]	; (8007288 <HAL_DMA_IRQHandler+0x424>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d013      	beq.n	8007246 <HAL_DMA_IRQHandler+0x3e2>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a1a      	ldr	r2, [pc, #104]	; (800728c <HAL_DMA_IRQHandler+0x428>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d00e      	beq.n	8007246 <HAL_DMA_IRQHandler+0x3e2>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a18      	ldr	r2, [pc, #96]	; (8007290 <HAL_DMA_IRQHandler+0x42c>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d009      	beq.n	8007246 <HAL_DMA_IRQHandler+0x3e2>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a17      	ldr	r2, [pc, #92]	; (8007294 <HAL_DMA_IRQHandler+0x430>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d004      	beq.n	8007246 <HAL_DMA_IRQHandler+0x3e2>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a15      	ldr	r2, [pc, #84]	; (8007298 <HAL_DMA_IRQHandler+0x434>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d12a      	bne.n	800729c <HAL_DMA_IRQHandler+0x438>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0302 	and.w	r3, r3, #2
 8007250:	2b00      	cmp	r3, #0
 8007252:	bf14      	ite	ne
 8007254:	2301      	movne	r3, #1
 8007256:	2300      	moveq	r3, #0
 8007258:	b2db      	uxtb	r3, r3
 800725a:	e023      	b.n	80072a4 <HAL_DMA_IRQHandler+0x440>
 800725c:	40020010 	.word	0x40020010
 8007260:	40020028 	.word	0x40020028
 8007264:	40020040 	.word	0x40020040
 8007268:	40020058 	.word	0x40020058
 800726c:	40020070 	.word	0x40020070
 8007270:	40020088 	.word	0x40020088
 8007274:	400200a0 	.word	0x400200a0
 8007278:	400200b8 	.word	0x400200b8
 800727c:	40020410 	.word	0x40020410
 8007280:	40020428 	.word	0x40020428
 8007284:	40020440 	.word	0x40020440
 8007288:	40020458 	.word	0x40020458
 800728c:	40020470 	.word	0x40020470
 8007290:	40020488 	.word	0x40020488
 8007294:	400204a0 	.word	0x400204a0
 8007298:	400204b8 	.word	0x400204b8
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2300      	movs	r3, #0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00d      	beq.n	80072c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ac:	f003 031f 	and.w	r3, r3, #31
 80072b0:	2204      	movs	r2, #4
 80072b2:	409a      	lsls	r2, r3
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072bc:	f043 0204 	orr.w	r2, r3, #4
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c8:	f003 031f 	and.w	r3, r3, #31
 80072cc:	2210      	movs	r2, #16
 80072ce:	409a      	lsls	r2, r3
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	4013      	ands	r3, r2
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 80a6 	beq.w	8007426 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a85      	ldr	r2, [pc, #532]	; (80074f4 <HAL_DMA_IRQHandler+0x690>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d04a      	beq.n	800737a <HAL_DMA_IRQHandler+0x516>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a83      	ldr	r2, [pc, #524]	; (80074f8 <HAL_DMA_IRQHandler+0x694>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d045      	beq.n	800737a <HAL_DMA_IRQHandler+0x516>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a82      	ldr	r2, [pc, #520]	; (80074fc <HAL_DMA_IRQHandler+0x698>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d040      	beq.n	800737a <HAL_DMA_IRQHandler+0x516>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a80      	ldr	r2, [pc, #512]	; (8007500 <HAL_DMA_IRQHandler+0x69c>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d03b      	beq.n	800737a <HAL_DMA_IRQHandler+0x516>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a7f      	ldr	r2, [pc, #508]	; (8007504 <HAL_DMA_IRQHandler+0x6a0>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d036      	beq.n	800737a <HAL_DMA_IRQHandler+0x516>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a7d      	ldr	r2, [pc, #500]	; (8007508 <HAL_DMA_IRQHandler+0x6a4>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d031      	beq.n	800737a <HAL_DMA_IRQHandler+0x516>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a7c      	ldr	r2, [pc, #496]	; (800750c <HAL_DMA_IRQHandler+0x6a8>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d02c      	beq.n	800737a <HAL_DMA_IRQHandler+0x516>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a7a      	ldr	r2, [pc, #488]	; (8007510 <HAL_DMA_IRQHandler+0x6ac>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d027      	beq.n	800737a <HAL_DMA_IRQHandler+0x516>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a79      	ldr	r2, [pc, #484]	; (8007514 <HAL_DMA_IRQHandler+0x6b0>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d022      	beq.n	800737a <HAL_DMA_IRQHandler+0x516>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a77      	ldr	r2, [pc, #476]	; (8007518 <HAL_DMA_IRQHandler+0x6b4>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d01d      	beq.n	800737a <HAL_DMA_IRQHandler+0x516>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a76      	ldr	r2, [pc, #472]	; (800751c <HAL_DMA_IRQHandler+0x6b8>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d018      	beq.n	800737a <HAL_DMA_IRQHandler+0x516>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a74      	ldr	r2, [pc, #464]	; (8007520 <HAL_DMA_IRQHandler+0x6bc>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d013      	beq.n	800737a <HAL_DMA_IRQHandler+0x516>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a73      	ldr	r2, [pc, #460]	; (8007524 <HAL_DMA_IRQHandler+0x6c0>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d00e      	beq.n	800737a <HAL_DMA_IRQHandler+0x516>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a71      	ldr	r2, [pc, #452]	; (8007528 <HAL_DMA_IRQHandler+0x6c4>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d009      	beq.n	800737a <HAL_DMA_IRQHandler+0x516>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a70      	ldr	r2, [pc, #448]	; (800752c <HAL_DMA_IRQHandler+0x6c8>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d004      	beq.n	800737a <HAL_DMA_IRQHandler+0x516>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a6e      	ldr	r2, [pc, #440]	; (8007530 <HAL_DMA_IRQHandler+0x6cc>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d10a      	bne.n	8007390 <HAL_DMA_IRQHandler+0x52c>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0308 	and.w	r3, r3, #8
 8007384:	2b00      	cmp	r3, #0
 8007386:	bf14      	ite	ne
 8007388:	2301      	movne	r3, #1
 800738a:	2300      	moveq	r3, #0
 800738c:	b2db      	uxtb	r3, r3
 800738e:	e009      	b.n	80073a4 <HAL_DMA_IRQHandler+0x540>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 0304 	and.w	r3, r3, #4
 800739a:	2b00      	cmp	r3, #0
 800739c:	bf14      	ite	ne
 800739e:	2301      	movne	r3, #1
 80073a0:	2300      	moveq	r3, #0
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d03e      	beq.n	8007426 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ac:	f003 031f 	and.w	r3, r3, #31
 80073b0:	2210      	movs	r2, #16
 80073b2:	409a      	lsls	r2, r3
 80073b4:	6a3b      	ldr	r3, [r7, #32]
 80073b6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d018      	beq.n	80073f8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d108      	bne.n	80073e6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d024      	beq.n	8007426 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	4798      	blx	r3
 80073e4:	e01f      	b.n	8007426 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d01b      	beq.n	8007426 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	4798      	blx	r3
 80073f6:	e016      	b.n	8007426 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007402:	2b00      	cmp	r3, #0
 8007404:	d107      	bne.n	8007416 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f022 0208 	bic.w	r2, r2, #8
 8007414:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741a:	2b00      	cmp	r3, #0
 800741c:	d003      	beq.n	8007426 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800742a:	f003 031f 	and.w	r3, r3, #31
 800742e:	2220      	movs	r2, #32
 8007430:	409a      	lsls	r2, r3
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	4013      	ands	r3, r2
 8007436:	2b00      	cmp	r3, #0
 8007438:	f000 8110 	beq.w	800765c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a2c      	ldr	r2, [pc, #176]	; (80074f4 <HAL_DMA_IRQHandler+0x690>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d04a      	beq.n	80074dc <HAL_DMA_IRQHandler+0x678>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a2b      	ldr	r2, [pc, #172]	; (80074f8 <HAL_DMA_IRQHandler+0x694>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d045      	beq.n	80074dc <HAL_DMA_IRQHandler+0x678>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a29      	ldr	r2, [pc, #164]	; (80074fc <HAL_DMA_IRQHandler+0x698>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d040      	beq.n	80074dc <HAL_DMA_IRQHandler+0x678>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a28      	ldr	r2, [pc, #160]	; (8007500 <HAL_DMA_IRQHandler+0x69c>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d03b      	beq.n	80074dc <HAL_DMA_IRQHandler+0x678>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a26      	ldr	r2, [pc, #152]	; (8007504 <HAL_DMA_IRQHandler+0x6a0>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d036      	beq.n	80074dc <HAL_DMA_IRQHandler+0x678>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a25      	ldr	r2, [pc, #148]	; (8007508 <HAL_DMA_IRQHandler+0x6a4>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d031      	beq.n	80074dc <HAL_DMA_IRQHandler+0x678>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a23      	ldr	r2, [pc, #140]	; (800750c <HAL_DMA_IRQHandler+0x6a8>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d02c      	beq.n	80074dc <HAL_DMA_IRQHandler+0x678>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a22      	ldr	r2, [pc, #136]	; (8007510 <HAL_DMA_IRQHandler+0x6ac>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d027      	beq.n	80074dc <HAL_DMA_IRQHandler+0x678>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a20      	ldr	r2, [pc, #128]	; (8007514 <HAL_DMA_IRQHandler+0x6b0>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d022      	beq.n	80074dc <HAL_DMA_IRQHandler+0x678>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a1f      	ldr	r2, [pc, #124]	; (8007518 <HAL_DMA_IRQHandler+0x6b4>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d01d      	beq.n	80074dc <HAL_DMA_IRQHandler+0x678>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a1d      	ldr	r2, [pc, #116]	; (800751c <HAL_DMA_IRQHandler+0x6b8>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d018      	beq.n	80074dc <HAL_DMA_IRQHandler+0x678>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a1c      	ldr	r2, [pc, #112]	; (8007520 <HAL_DMA_IRQHandler+0x6bc>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d013      	beq.n	80074dc <HAL_DMA_IRQHandler+0x678>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a1a      	ldr	r2, [pc, #104]	; (8007524 <HAL_DMA_IRQHandler+0x6c0>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00e      	beq.n	80074dc <HAL_DMA_IRQHandler+0x678>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a19      	ldr	r2, [pc, #100]	; (8007528 <HAL_DMA_IRQHandler+0x6c4>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d009      	beq.n	80074dc <HAL_DMA_IRQHandler+0x678>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a17      	ldr	r2, [pc, #92]	; (800752c <HAL_DMA_IRQHandler+0x6c8>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d004      	beq.n	80074dc <HAL_DMA_IRQHandler+0x678>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a16      	ldr	r2, [pc, #88]	; (8007530 <HAL_DMA_IRQHandler+0x6cc>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d12b      	bne.n	8007534 <HAL_DMA_IRQHandler+0x6d0>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0310 	and.w	r3, r3, #16
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	bf14      	ite	ne
 80074ea:	2301      	movne	r3, #1
 80074ec:	2300      	moveq	r3, #0
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	e02a      	b.n	8007548 <HAL_DMA_IRQHandler+0x6e4>
 80074f2:	bf00      	nop
 80074f4:	40020010 	.word	0x40020010
 80074f8:	40020028 	.word	0x40020028
 80074fc:	40020040 	.word	0x40020040
 8007500:	40020058 	.word	0x40020058
 8007504:	40020070 	.word	0x40020070
 8007508:	40020088 	.word	0x40020088
 800750c:	400200a0 	.word	0x400200a0
 8007510:	400200b8 	.word	0x400200b8
 8007514:	40020410 	.word	0x40020410
 8007518:	40020428 	.word	0x40020428
 800751c:	40020440 	.word	0x40020440
 8007520:	40020458 	.word	0x40020458
 8007524:	40020470 	.word	0x40020470
 8007528:	40020488 	.word	0x40020488
 800752c:	400204a0 	.word	0x400204a0
 8007530:	400204b8 	.word	0x400204b8
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0302 	and.w	r3, r3, #2
 800753e:	2b00      	cmp	r3, #0
 8007540:	bf14      	ite	ne
 8007542:	2301      	movne	r3, #1
 8007544:	2300      	moveq	r3, #0
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b00      	cmp	r3, #0
 800754a:	f000 8087 	beq.w	800765c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007552:	f003 031f 	and.w	r3, r3, #31
 8007556:	2220      	movs	r2, #32
 8007558:	409a      	lsls	r2, r3
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b04      	cmp	r3, #4
 8007568:	d139      	bne.n	80075de <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f022 0216 	bic.w	r2, r2, #22
 8007578:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	695a      	ldr	r2, [r3, #20]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007588:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	2b00      	cmp	r3, #0
 8007590:	d103      	bne.n	800759a <HAL_DMA_IRQHandler+0x736>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007596:	2b00      	cmp	r3, #0
 8007598:	d007      	beq.n	80075aa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f022 0208 	bic.w	r2, r2, #8
 80075a8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ae:	f003 031f 	and.w	r3, r3, #31
 80075b2:	223f      	movs	r2, #63	; 0x3f
 80075b4:	409a      	lsls	r2, r3
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	f000 834a 	beq.w	8007c68 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	4798      	blx	r3
          }
          return;
 80075dc:	e344      	b.n	8007c68 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d018      	beq.n	800761e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d108      	bne.n	800760c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d02c      	beq.n	800765c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	4798      	blx	r3
 800760a:	e027      	b.n	800765c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007610:	2b00      	cmp	r3, #0
 8007612:	d023      	beq.n	800765c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	4798      	blx	r3
 800761c:	e01e      	b.n	800765c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10f      	bne.n	800764c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 0210 	bic.w	r2, r2, #16
 800763a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007650:	2b00      	cmp	r3, #0
 8007652:	d003      	beq.n	800765c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 8306 	beq.w	8007c72 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	f000 8088 	beq.w	8007784 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2204      	movs	r2, #4
 8007678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a7a      	ldr	r2, [pc, #488]	; (800786c <HAL_DMA_IRQHandler+0xa08>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d04a      	beq.n	800771c <HAL_DMA_IRQHandler+0x8b8>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a79      	ldr	r2, [pc, #484]	; (8007870 <HAL_DMA_IRQHandler+0xa0c>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d045      	beq.n	800771c <HAL_DMA_IRQHandler+0x8b8>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a77      	ldr	r2, [pc, #476]	; (8007874 <HAL_DMA_IRQHandler+0xa10>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d040      	beq.n	800771c <HAL_DMA_IRQHandler+0x8b8>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a76      	ldr	r2, [pc, #472]	; (8007878 <HAL_DMA_IRQHandler+0xa14>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d03b      	beq.n	800771c <HAL_DMA_IRQHandler+0x8b8>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a74      	ldr	r2, [pc, #464]	; (800787c <HAL_DMA_IRQHandler+0xa18>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d036      	beq.n	800771c <HAL_DMA_IRQHandler+0x8b8>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a73      	ldr	r2, [pc, #460]	; (8007880 <HAL_DMA_IRQHandler+0xa1c>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d031      	beq.n	800771c <HAL_DMA_IRQHandler+0x8b8>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a71      	ldr	r2, [pc, #452]	; (8007884 <HAL_DMA_IRQHandler+0xa20>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d02c      	beq.n	800771c <HAL_DMA_IRQHandler+0x8b8>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a70      	ldr	r2, [pc, #448]	; (8007888 <HAL_DMA_IRQHandler+0xa24>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d027      	beq.n	800771c <HAL_DMA_IRQHandler+0x8b8>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a6e      	ldr	r2, [pc, #440]	; (800788c <HAL_DMA_IRQHandler+0xa28>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d022      	beq.n	800771c <HAL_DMA_IRQHandler+0x8b8>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a6d      	ldr	r2, [pc, #436]	; (8007890 <HAL_DMA_IRQHandler+0xa2c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d01d      	beq.n	800771c <HAL_DMA_IRQHandler+0x8b8>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a6b      	ldr	r2, [pc, #428]	; (8007894 <HAL_DMA_IRQHandler+0xa30>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d018      	beq.n	800771c <HAL_DMA_IRQHandler+0x8b8>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a6a      	ldr	r2, [pc, #424]	; (8007898 <HAL_DMA_IRQHandler+0xa34>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d013      	beq.n	800771c <HAL_DMA_IRQHandler+0x8b8>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a68      	ldr	r2, [pc, #416]	; (800789c <HAL_DMA_IRQHandler+0xa38>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d00e      	beq.n	800771c <HAL_DMA_IRQHandler+0x8b8>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a67      	ldr	r2, [pc, #412]	; (80078a0 <HAL_DMA_IRQHandler+0xa3c>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d009      	beq.n	800771c <HAL_DMA_IRQHandler+0x8b8>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a65      	ldr	r2, [pc, #404]	; (80078a4 <HAL_DMA_IRQHandler+0xa40>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d004      	beq.n	800771c <HAL_DMA_IRQHandler+0x8b8>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a64      	ldr	r2, [pc, #400]	; (80078a8 <HAL_DMA_IRQHandler+0xa44>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d108      	bne.n	800772e <HAL_DMA_IRQHandler+0x8ca>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f022 0201 	bic.w	r2, r2, #1
 800772a:	601a      	str	r2, [r3, #0]
 800772c:	e007      	b.n	800773e <HAL_DMA_IRQHandler+0x8da>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f022 0201 	bic.w	r2, r2, #1
 800773c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	3301      	adds	r3, #1
 8007742:	60fb      	str	r3, [r7, #12]
 8007744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007746:	429a      	cmp	r2, r3
 8007748:	d307      	bcc.n	800775a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1f2      	bne.n	800773e <HAL_DMA_IRQHandler+0x8da>
 8007758:	e000      	b.n	800775c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800775a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 0301 	and.w	r3, r3, #1
 8007766:	2b00      	cmp	r3, #0
 8007768:	d004      	beq.n	8007774 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2203      	movs	r2, #3
 800776e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007772:	e003      	b.n	800777c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 8272 	beq.w	8007c72 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	4798      	blx	r3
 8007796:	e26c      	b.n	8007c72 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a43      	ldr	r2, [pc, #268]	; (80078ac <HAL_DMA_IRQHandler+0xa48>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d022      	beq.n	80077e8 <HAL_DMA_IRQHandler+0x984>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a42      	ldr	r2, [pc, #264]	; (80078b0 <HAL_DMA_IRQHandler+0xa4c>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d01d      	beq.n	80077e8 <HAL_DMA_IRQHandler+0x984>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a40      	ldr	r2, [pc, #256]	; (80078b4 <HAL_DMA_IRQHandler+0xa50>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d018      	beq.n	80077e8 <HAL_DMA_IRQHandler+0x984>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a3f      	ldr	r2, [pc, #252]	; (80078b8 <HAL_DMA_IRQHandler+0xa54>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d013      	beq.n	80077e8 <HAL_DMA_IRQHandler+0x984>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a3d      	ldr	r2, [pc, #244]	; (80078bc <HAL_DMA_IRQHandler+0xa58>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d00e      	beq.n	80077e8 <HAL_DMA_IRQHandler+0x984>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a3c      	ldr	r2, [pc, #240]	; (80078c0 <HAL_DMA_IRQHandler+0xa5c>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d009      	beq.n	80077e8 <HAL_DMA_IRQHandler+0x984>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a3a      	ldr	r2, [pc, #232]	; (80078c4 <HAL_DMA_IRQHandler+0xa60>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d004      	beq.n	80077e8 <HAL_DMA_IRQHandler+0x984>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a39      	ldr	r2, [pc, #228]	; (80078c8 <HAL_DMA_IRQHandler+0xa64>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d101      	bne.n	80077ec <HAL_DMA_IRQHandler+0x988>
 80077e8:	2301      	movs	r3, #1
 80077ea:	e000      	b.n	80077ee <HAL_DMA_IRQHandler+0x98a>
 80077ec:	2300      	movs	r3, #0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f000 823f 	beq.w	8007c72 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007800:	f003 031f 	and.w	r3, r3, #31
 8007804:	2204      	movs	r2, #4
 8007806:	409a      	lsls	r2, r3
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	4013      	ands	r3, r2
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 80cd 	beq.w	80079ac <HAL_DMA_IRQHandler+0xb48>
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	f003 0304 	and.w	r3, r3, #4
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 80c7 	beq.w	80079ac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007822:	f003 031f 	and.w	r3, r3, #31
 8007826:	2204      	movs	r2, #4
 8007828:	409a      	lsls	r2, r3
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007834:	2b00      	cmp	r3, #0
 8007836:	d049      	beq.n	80078cc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d109      	bne.n	8007856 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007846:	2b00      	cmp	r3, #0
 8007848:	f000 8210 	beq.w	8007c6c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007854:	e20a      	b.n	8007c6c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785a:	2b00      	cmp	r3, #0
 800785c:	f000 8206 	beq.w	8007c6c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007868:	e200      	b.n	8007c6c <HAL_DMA_IRQHandler+0xe08>
 800786a:	bf00      	nop
 800786c:	40020010 	.word	0x40020010
 8007870:	40020028 	.word	0x40020028
 8007874:	40020040 	.word	0x40020040
 8007878:	40020058 	.word	0x40020058
 800787c:	40020070 	.word	0x40020070
 8007880:	40020088 	.word	0x40020088
 8007884:	400200a0 	.word	0x400200a0
 8007888:	400200b8 	.word	0x400200b8
 800788c:	40020410 	.word	0x40020410
 8007890:	40020428 	.word	0x40020428
 8007894:	40020440 	.word	0x40020440
 8007898:	40020458 	.word	0x40020458
 800789c:	40020470 	.word	0x40020470
 80078a0:	40020488 	.word	0x40020488
 80078a4:	400204a0 	.word	0x400204a0
 80078a8:	400204b8 	.word	0x400204b8
 80078ac:	58025408 	.word	0x58025408
 80078b0:	5802541c 	.word	0x5802541c
 80078b4:	58025430 	.word	0x58025430
 80078b8:	58025444 	.word	0x58025444
 80078bc:	58025458 	.word	0x58025458
 80078c0:	5802546c 	.word	0x5802546c
 80078c4:	58025480 	.word	0x58025480
 80078c8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	f003 0320 	and.w	r3, r3, #32
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d160      	bne.n	8007998 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a7f      	ldr	r2, [pc, #508]	; (8007ad8 <HAL_DMA_IRQHandler+0xc74>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d04a      	beq.n	8007976 <HAL_DMA_IRQHandler+0xb12>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a7d      	ldr	r2, [pc, #500]	; (8007adc <HAL_DMA_IRQHandler+0xc78>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d045      	beq.n	8007976 <HAL_DMA_IRQHandler+0xb12>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a7c      	ldr	r2, [pc, #496]	; (8007ae0 <HAL_DMA_IRQHandler+0xc7c>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d040      	beq.n	8007976 <HAL_DMA_IRQHandler+0xb12>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a7a      	ldr	r2, [pc, #488]	; (8007ae4 <HAL_DMA_IRQHandler+0xc80>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d03b      	beq.n	8007976 <HAL_DMA_IRQHandler+0xb12>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a79      	ldr	r2, [pc, #484]	; (8007ae8 <HAL_DMA_IRQHandler+0xc84>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d036      	beq.n	8007976 <HAL_DMA_IRQHandler+0xb12>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a77      	ldr	r2, [pc, #476]	; (8007aec <HAL_DMA_IRQHandler+0xc88>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d031      	beq.n	8007976 <HAL_DMA_IRQHandler+0xb12>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a76      	ldr	r2, [pc, #472]	; (8007af0 <HAL_DMA_IRQHandler+0xc8c>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d02c      	beq.n	8007976 <HAL_DMA_IRQHandler+0xb12>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a74      	ldr	r2, [pc, #464]	; (8007af4 <HAL_DMA_IRQHandler+0xc90>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d027      	beq.n	8007976 <HAL_DMA_IRQHandler+0xb12>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a73      	ldr	r2, [pc, #460]	; (8007af8 <HAL_DMA_IRQHandler+0xc94>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d022      	beq.n	8007976 <HAL_DMA_IRQHandler+0xb12>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a71      	ldr	r2, [pc, #452]	; (8007afc <HAL_DMA_IRQHandler+0xc98>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d01d      	beq.n	8007976 <HAL_DMA_IRQHandler+0xb12>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a70      	ldr	r2, [pc, #448]	; (8007b00 <HAL_DMA_IRQHandler+0xc9c>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d018      	beq.n	8007976 <HAL_DMA_IRQHandler+0xb12>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a6e      	ldr	r2, [pc, #440]	; (8007b04 <HAL_DMA_IRQHandler+0xca0>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d013      	beq.n	8007976 <HAL_DMA_IRQHandler+0xb12>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a6d      	ldr	r2, [pc, #436]	; (8007b08 <HAL_DMA_IRQHandler+0xca4>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d00e      	beq.n	8007976 <HAL_DMA_IRQHandler+0xb12>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a6b      	ldr	r2, [pc, #428]	; (8007b0c <HAL_DMA_IRQHandler+0xca8>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d009      	beq.n	8007976 <HAL_DMA_IRQHandler+0xb12>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a6a      	ldr	r2, [pc, #424]	; (8007b10 <HAL_DMA_IRQHandler+0xcac>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d004      	beq.n	8007976 <HAL_DMA_IRQHandler+0xb12>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a68      	ldr	r2, [pc, #416]	; (8007b14 <HAL_DMA_IRQHandler+0xcb0>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d108      	bne.n	8007988 <HAL_DMA_IRQHandler+0xb24>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f022 0208 	bic.w	r2, r2, #8
 8007984:	601a      	str	r2, [r3, #0]
 8007986:	e007      	b.n	8007998 <HAL_DMA_IRQHandler+0xb34>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f022 0204 	bic.w	r2, r2, #4
 8007996:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799c:	2b00      	cmp	r3, #0
 800799e:	f000 8165 	beq.w	8007c6c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079aa:	e15f      	b.n	8007c6c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079b0:	f003 031f 	and.w	r3, r3, #31
 80079b4:	2202      	movs	r2, #2
 80079b6:	409a      	lsls	r2, r3
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	4013      	ands	r3, r2
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 80c5 	beq.w	8007b4c <HAL_DMA_IRQHandler+0xce8>
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	f003 0302 	and.w	r3, r3, #2
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 80bf 	beq.w	8007b4c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079d2:	f003 031f 	and.w	r3, r3, #31
 80079d6:	2202      	movs	r2, #2
 80079d8:	409a      	lsls	r2, r3
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d018      	beq.n	8007a1a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d109      	bne.n	8007a06 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f000 813a 	beq.w	8007c70 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a04:	e134      	b.n	8007c70 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f000 8130 	beq.w	8007c70 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a18:	e12a      	b.n	8007c70 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f003 0320 	and.w	r3, r3, #32
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f040 8089 	bne.w	8007b38 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a2b      	ldr	r2, [pc, #172]	; (8007ad8 <HAL_DMA_IRQHandler+0xc74>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d04a      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0xc62>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a29      	ldr	r2, [pc, #164]	; (8007adc <HAL_DMA_IRQHandler+0xc78>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d045      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0xc62>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a28      	ldr	r2, [pc, #160]	; (8007ae0 <HAL_DMA_IRQHandler+0xc7c>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d040      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0xc62>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a26      	ldr	r2, [pc, #152]	; (8007ae4 <HAL_DMA_IRQHandler+0xc80>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d03b      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0xc62>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a25      	ldr	r2, [pc, #148]	; (8007ae8 <HAL_DMA_IRQHandler+0xc84>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d036      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0xc62>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a23      	ldr	r2, [pc, #140]	; (8007aec <HAL_DMA_IRQHandler+0xc88>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d031      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0xc62>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a22      	ldr	r2, [pc, #136]	; (8007af0 <HAL_DMA_IRQHandler+0xc8c>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d02c      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0xc62>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a20      	ldr	r2, [pc, #128]	; (8007af4 <HAL_DMA_IRQHandler+0xc90>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d027      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0xc62>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a1f      	ldr	r2, [pc, #124]	; (8007af8 <HAL_DMA_IRQHandler+0xc94>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d022      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0xc62>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a1d      	ldr	r2, [pc, #116]	; (8007afc <HAL_DMA_IRQHandler+0xc98>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d01d      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0xc62>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a1c      	ldr	r2, [pc, #112]	; (8007b00 <HAL_DMA_IRQHandler+0xc9c>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d018      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0xc62>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a1a      	ldr	r2, [pc, #104]	; (8007b04 <HAL_DMA_IRQHandler+0xca0>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d013      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0xc62>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a19      	ldr	r2, [pc, #100]	; (8007b08 <HAL_DMA_IRQHandler+0xca4>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d00e      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0xc62>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a17      	ldr	r2, [pc, #92]	; (8007b0c <HAL_DMA_IRQHandler+0xca8>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d009      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0xc62>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a16      	ldr	r2, [pc, #88]	; (8007b10 <HAL_DMA_IRQHandler+0xcac>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d004      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0xc62>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a14      	ldr	r2, [pc, #80]	; (8007b14 <HAL_DMA_IRQHandler+0xcb0>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d128      	bne.n	8007b18 <HAL_DMA_IRQHandler+0xcb4>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f022 0214 	bic.w	r2, r2, #20
 8007ad4:	601a      	str	r2, [r3, #0]
 8007ad6:	e027      	b.n	8007b28 <HAL_DMA_IRQHandler+0xcc4>
 8007ad8:	40020010 	.word	0x40020010
 8007adc:	40020028 	.word	0x40020028
 8007ae0:	40020040 	.word	0x40020040
 8007ae4:	40020058 	.word	0x40020058
 8007ae8:	40020070 	.word	0x40020070
 8007aec:	40020088 	.word	0x40020088
 8007af0:	400200a0 	.word	0x400200a0
 8007af4:	400200b8 	.word	0x400200b8
 8007af8:	40020410 	.word	0x40020410
 8007afc:	40020428 	.word	0x40020428
 8007b00:	40020440 	.word	0x40020440
 8007b04:	40020458 	.word	0x40020458
 8007b08:	40020470 	.word	0x40020470
 8007b0c:	40020488 	.word	0x40020488
 8007b10:	400204a0 	.word	0x400204a0
 8007b14:	400204b8 	.word	0x400204b8
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f022 020a 	bic.w	r2, r2, #10
 8007b26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f000 8097 	beq.w	8007c70 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b4a:	e091      	b.n	8007c70 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b50:	f003 031f 	and.w	r3, r3, #31
 8007b54:	2208      	movs	r2, #8
 8007b56:	409a      	lsls	r2, r3
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 8088 	beq.w	8007c72 <HAL_DMA_IRQHandler+0xe0e>
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	f003 0308 	and.w	r3, r3, #8
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 8082 	beq.w	8007c72 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a41      	ldr	r2, [pc, #260]	; (8007c78 <HAL_DMA_IRQHandler+0xe14>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d04a      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xdaa>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a3f      	ldr	r2, [pc, #252]	; (8007c7c <HAL_DMA_IRQHandler+0xe18>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d045      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xdaa>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a3e      	ldr	r2, [pc, #248]	; (8007c80 <HAL_DMA_IRQHandler+0xe1c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d040      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xdaa>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a3c      	ldr	r2, [pc, #240]	; (8007c84 <HAL_DMA_IRQHandler+0xe20>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d03b      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xdaa>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a3b      	ldr	r2, [pc, #236]	; (8007c88 <HAL_DMA_IRQHandler+0xe24>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d036      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xdaa>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a39      	ldr	r2, [pc, #228]	; (8007c8c <HAL_DMA_IRQHandler+0xe28>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d031      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xdaa>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a38      	ldr	r2, [pc, #224]	; (8007c90 <HAL_DMA_IRQHandler+0xe2c>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d02c      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xdaa>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a36      	ldr	r2, [pc, #216]	; (8007c94 <HAL_DMA_IRQHandler+0xe30>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d027      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xdaa>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a35      	ldr	r2, [pc, #212]	; (8007c98 <HAL_DMA_IRQHandler+0xe34>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d022      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xdaa>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a33      	ldr	r2, [pc, #204]	; (8007c9c <HAL_DMA_IRQHandler+0xe38>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d01d      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xdaa>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a32      	ldr	r2, [pc, #200]	; (8007ca0 <HAL_DMA_IRQHandler+0xe3c>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d018      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xdaa>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a30      	ldr	r2, [pc, #192]	; (8007ca4 <HAL_DMA_IRQHandler+0xe40>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d013      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xdaa>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a2f      	ldr	r2, [pc, #188]	; (8007ca8 <HAL_DMA_IRQHandler+0xe44>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d00e      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xdaa>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a2d      	ldr	r2, [pc, #180]	; (8007cac <HAL_DMA_IRQHandler+0xe48>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d009      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xdaa>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a2c      	ldr	r2, [pc, #176]	; (8007cb0 <HAL_DMA_IRQHandler+0xe4c>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d004      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xdaa>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a2a      	ldr	r2, [pc, #168]	; (8007cb4 <HAL_DMA_IRQHandler+0xe50>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d108      	bne.n	8007c20 <HAL_DMA_IRQHandler+0xdbc>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f022 021c 	bic.w	r2, r2, #28
 8007c1c:	601a      	str	r2, [r3, #0]
 8007c1e:	e007      	b.n	8007c30 <HAL_DMA_IRQHandler+0xdcc>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f022 020e 	bic.w	r2, r2, #14
 8007c2e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c34:	f003 031f 	and.w	r3, r3, #31
 8007c38:	2201      	movs	r2, #1
 8007c3a:	409a      	lsls	r2, r3
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d009      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	4798      	blx	r3
 8007c66:	e004      	b.n	8007c72 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007c68:	bf00      	nop
 8007c6a:	e002      	b.n	8007c72 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c6c:	bf00      	nop
 8007c6e:	e000      	b.n	8007c72 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c70:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007c72:	3728      	adds	r7, #40	; 0x28
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	40020010 	.word	0x40020010
 8007c7c:	40020028 	.word	0x40020028
 8007c80:	40020040 	.word	0x40020040
 8007c84:	40020058 	.word	0x40020058
 8007c88:	40020070 	.word	0x40020070
 8007c8c:	40020088 	.word	0x40020088
 8007c90:	400200a0 	.word	0x400200a0
 8007c94:	400200b8 	.word	0x400200b8
 8007c98:	40020410 	.word	0x40020410
 8007c9c:	40020428 	.word	0x40020428
 8007ca0:	40020440 	.word	0x40020440
 8007ca4:	40020458 	.word	0x40020458
 8007ca8:	40020470 	.word	0x40020470
 8007cac:	40020488 	.word	0x40020488
 8007cb0:	400204a0 	.word	0x400204a0
 8007cb4:	400204b8 	.word	0x400204b8

08007cb8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b087      	sub	sp, #28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
 8007cc4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cd0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a7f      	ldr	r2, [pc, #508]	; (8007ed4 <DMA_SetConfig+0x21c>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d072      	beq.n	8007dc2 <DMA_SetConfig+0x10a>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a7d      	ldr	r2, [pc, #500]	; (8007ed8 <DMA_SetConfig+0x220>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d06d      	beq.n	8007dc2 <DMA_SetConfig+0x10a>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a7c      	ldr	r2, [pc, #496]	; (8007edc <DMA_SetConfig+0x224>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d068      	beq.n	8007dc2 <DMA_SetConfig+0x10a>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a7a      	ldr	r2, [pc, #488]	; (8007ee0 <DMA_SetConfig+0x228>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d063      	beq.n	8007dc2 <DMA_SetConfig+0x10a>
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a79      	ldr	r2, [pc, #484]	; (8007ee4 <DMA_SetConfig+0x22c>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d05e      	beq.n	8007dc2 <DMA_SetConfig+0x10a>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a77      	ldr	r2, [pc, #476]	; (8007ee8 <DMA_SetConfig+0x230>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d059      	beq.n	8007dc2 <DMA_SetConfig+0x10a>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a76      	ldr	r2, [pc, #472]	; (8007eec <DMA_SetConfig+0x234>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d054      	beq.n	8007dc2 <DMA_SetConfig+0x10a>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a74      	ldr	r2, [pc, #464]	; (8007ef0 <DMA_SetConfig+0x238>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d04f      	beq.n	8007dc2 <DMA_SetConfig+0x10a>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a73      	ldr	r2, [pc, #460]	; (8007ef4 <DMA_SetConfig+0x23c>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d04a      	beq.n	8007dc2 <DMA_SetConfig+0x10a>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a71      	ldr	r2, [pc, #452]	; (8007ef8 <DMA_SetConfig+0x240>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d045      	beq.n	8007dc2 <DMA_SetConfig+0x10a>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a70      	ldr	r2, [pc, #448]	; (8007efc <DMA_SetConfig+0x244>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d040      	beq.n	8007dc2 <DMA_SetConfig+0x10a>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a6e      	ldr	r2, [pc, #440]	; (8007f00 <DMA_SetConfig+0x248>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d03b      	beq.n	8007dc2 <DMA_SetConfig+0x10a>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a6d      	ldr	r2, [pc, #436]	; (8007f04 <DMA_SetConfig+0x24c>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d036      	beq.n	8007dc2 <DMA_SetConfig+0x10a>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a6b      	ldr	r2, [pc, #428]	; (8007f08 <DMA_SetConfig+0x250>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d031      	beq.n	8007dc2 <DMA_SetConfig+0x10a>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a6a      	ldr	r2, [pc, #424]	; (8007f0c <DMA_SetConfig+0x254>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d02c      	beq.n	8007dc2 <DMA_SetConfig+0x10a>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a68      	ldr	r2, [pc, #416]	; (8007f10 <DMA_SetConfig+0x258>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d027      	beq.n	8007dc2 <DMA_SetConfig+0x10a>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a67      	ldr	r2, [pc, #412]	; (8007f14 <DMA_SetConfig+0x25c>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d022      	beq.n	8007dc2 <DMA_SetConfig+0x10a>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a65      	ldr	r2, [pc, #404]	; (8007f18 <DMA_SetConfig+0x260>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d01d      	beq.n	8007dc2 <DMA_SetConfig+0x10a>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a64      	ldr	r2, [pc, #400]	; (8007f1c <DMA_SetConfig+0x264>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d018      	beq.n	8007dc2 <DMA_SetConfig+0x10a>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a62      	ldr	r2, [pc, #392]	; (8007f20 <DMA_SetConfig+0x268>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d013      	beq.n	8007dc2 <DMA_SetConfig+0x10a>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a61      	ldr	r2, [pc, #388]	; (8007f24 <DMA_SetConfig+0x26c>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d00e      	beq.n	8007dc2 <DMA_SetConfig+0x10a>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a5f      	ldr	r2, [pc, #380]	; (8007f28 <DMA_SetConfig+0x270>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d009      	beq.n	8007dc2 <DMA_SetConfig+0x10a>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a5e      	ldr	r2, [pc, #376]	; (8007f2c <DMA_SetConfig+0x274>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d004      	beq.n	8007dc2 <DMA_SetConfig+0x10a>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a5c      	ldr	r2, [pc, #368]	; (8007f30 <DMA_SetConfig+0x278>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d101      	bne.n	8007dc6 <DMA_SetConfig+0x10e>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e000      	b.n	8007dc8 <DMA_SetConfig+0x110>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00d      	beq.n	8007de8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007dd4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d004      	beq.n	8007de8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007de6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a39      	ldr	r2, [pc, #228]	; (8007ed4 <DMA_SetConfig+0x21c>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d04a      	beq.n	8007e88 <DMA_SetConfig+0x1d0>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a38      	ldr	r2, [pc, #224]	; (8007ed8 <DMA_SetConfig+0x220>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d045      	beq.n	8007e88 <DMA_SetConfig+0x1d0>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a36      	ldr	r2, [pc, #216]	; (8007edc <DMA_SetConfig+0x224>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d040      	beq.n	8007e88 <DMA_SetConfig+0x1d0>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a35      	ldr	r2, [pc, #212]	; (8007ee0 <DMA_SetConfig+0x228>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d03b      	beq.n	8007e88 <DMA_SetConfig+0x1d0>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a33      	ldr	r2, [pc, #204]	; (8007ee4 <DMA_SetConfig+0x22c>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d036      	beq.n	8007e88 <DMA_SetConfig+0x1d0>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a32      	ldr	r2, [pc, #200]	; (8007ee8 <DMA_SetConfig+0x230>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d031      	beq.n	8007e88 <DMA_SetConfig+0x1d0>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a30      	ldr	r2, [pc, #192]	; (8007eec <DMA_SetConfig+0x234>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d02c      	beq.n	8007e88 <DMA_SetConfig+0x1d0>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a2f      	ldr	r2, [pc, #188]	; (8007ef0 <DMA_SetConfig+0x238>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d027      	beq.n	8007e88 <DMA_SetConfig+0x1d0>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a2d      	ldr	r2, [pc, #180]	; (8007ef4 <DMA_SetConfig+0x23c>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d022      	beq.n	8007e88 <DMA_SetConfig+0x1d0>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a2c      	ldr	r2, [pc, #176]	; (8007ef8 <DMA_SetConfig+0x240>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d01d      	beq.n	8007e88 <DMA_SetConfig+0x1d0>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a2a      	ldr	r2, [pc, #168]	; (8007efc <DMA_SetConfig+0x244>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d018      	beq.n	8007e88 <DMA_SetConfig+0x1d0>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a29      	ldr	r2, [pc, #164]	; (8007f00 <DMA_SetConfig+0x248>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d013      	beq.n	8007e88 <DMA_SetConfig+0x1d0>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a27      	ldr	r2, [pc, #156]	; (8007f04 <DMA_SetConfig+0x24c>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d00e      	beq.n	8007e88 <DMA_SetConfig+0x1d0>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a26      	ldr	r2, [pc, #152]	; (8007f08 <DMA_SetConfig+0x250>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d009      	beq.n	8007e88 <DMA_SetConfig+0x1d0>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a24      	ldr	r2, [pc, #144]	; (8007f0c <DMA_SetConfig+0x254>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d004      	beq.n	8007e88 <DMA_SetConfig+0x1d0>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a23      	ldr	r2, [pc, #140]	; (8007f10 <DMA_SetConfig+0x258>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d101      	bne.n	8007e8c <DMA_SetConfig+0x1d4>
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e000      	b.n	8007e8e <DMA_SetConfig+0x1d6>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d059      	beq.n	8007f46 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e96:	f003 031f 	and.w	r3, r3, #31
 8007e9a:	223f      	movs	r2, #63	; 0x3f
 8007e9c:	409a      	lsls	r2, r3
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007eb0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	683a      	ldr	r2, [r7, #0]
 8007eb8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	2b40      	cmp	r3, #64	; 0x40
 8007ec0:	d138      	bne.n	8007f34 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007ed2:	e086      	b.n	8007fe2 <DMA_SetConfig+0x32a>
 8007ed4:	40020010 	.word	0x40020010
 8007ed8:	40020028 	.word	0x40020028
 8007edc:	40020040 	.word	0x40020040
 8007ee0:	40020058 	.word	0x40020058
 8007ee4:	40020070 	.word	0x40020070
 8007ee8:	40020088 	.word	0x40020088
 8007eec:	400200a0 	.word	0x400200a0
 8007ef0:	400200b8 	.word	0x400200b8
 8007ef4:	40020410 	.word	0x40020410
 8007ef8:	40020428 	.word	0x40020428
 8007efc:	40020440 	.word	0x40020440
 8007f00:	40020458 	.word	0x40020458
 8007f04:	40020470 	.word	0x40020470
 8007f08:	40020488 	.word	0x40020488
 8007f0c:	400204a0 	.word	0x400204a0
 8007f10:	400204b8 	.word	0x400204b8
 8007f14:	58025408 	.word	0x58025408
 8007f18:	5802541c 	.word	0x5802541c
 8007f1c:	58025430 	.word	0x58025430
 8007f20:	58025444 	.word	0x58025444
 8007f24:	58025458 	.word	0x58025458
 8007f28:	5802546c 	.word	0x5802546c
 8007f2c:	58025480 	.word	0x58025480
 8007f30:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	60da      	str	r2, [r3, #12]
}
 8007f44:	e04d      	b.n	8007fe2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a29      	ldr	r2, [pc, #164]	; (8007ff0 <DMA_SetConfig+0x338>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d022      	beq.n	8007f96 <DMA_SetConfig+0x2de>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a27      	ldr	r2, [pc, #156]	; (8007ff4 <DMA_SetConfig+0x33c>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d01d      	beq.n	8007f96 <DMA_SetConfig+0x2de>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a26      	ldr	r2, [pc, #152]	; (8007ff8 <DMA_SetConfig+0x340>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d018      	beq.n	8007f96 <DMA_SetConfig+0x2de>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a24      	ldr	r2, [pc, #144]	; (8007ffc <DMA_SetConfig+0x344>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d013      	beq.n	8007f96 <DMA_SetConfig+0x2de>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a23      	ldr	r2, [pc, #140]	; (8008000 <DMA_SetConfig+0x348>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d00e      	beq.n	8007f96 <DMA_SetConfig+0x2de>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a21      	ldr	r2, [pc, #132]	; (8008004 <DMA_SetConfig+0x34c>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d009      	beq.n	8007f96 <DMA_SetConfig+0x2de>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a20      	ldr	r2, [pc, #128]	; (8008008 <DMA_SetConfig+0x350>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d004      	beq.n	8007f96 <DMA_SetConfig+0x2de>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a1e      	ldr	r2, [pc, #120]	; (800800c <DMA_SetConfig+0x354>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d101      	bne.n	8007f9a <DMA_SetConfig+0x2e2>
 8007f96:	2301      	movs	r3, #1
 8007f98:	e000      	b.n	8007f9c <DMA_SetConfig+0x2e4>
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d020      	beq.n	8007fe2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fa4:	f003 031f 	and.w	r3, r3, #31
 8007fa8:	2201      	movs	r2, #1
 8007faa:	409a      	lsls	r2, r3
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	683a      	ldr	r2, [r7, #0]
 8007fb6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	2b40      	cmp	r3, #64	; 0x40
 8007fbe:	d108      	bne.n	8007fd2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	60da      	str	r2, [r3, #12]
}
 8007fd0:	e007      	b.n	8007fe2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	60da      	str	r2, [r3, #12]
}
 8007fe2:	bf00      	nop
 8007fe4:	371c      	adds	r7, #28
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	58025408 	.word	0x58025408
 8007ff4:	5802541c 	.word	0x5802541c
 8007ff8:	58025430 	.word	0x58025430
 8007ffc:	58025444 	.word	0x58025444
 8008000:	58025458 	.word	0x58025458
 8008004:	5802546c 	.word	0x5802546c
 8008008:	58025480 	.word	0x58025480
 800800c:	58025494 	.word	0x58025494

08008010 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a42      	ldr	r2, [pc, #264]	; (8008128 <DMA_CalcBaseAndBitshift+0x118>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d04a      	beq.n	80080b8 <DMA_CalcBaseAndBitshift+0xa8>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a41      	ldr	r2, [pc, #260]	; (800812c <DMA_CalcBaseAndBitshift+0x11c>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d045      	beq.n	80080b8 <DMA_CalcBaseAndBitshift+0xa8>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a3f      	ldr	r2, [pc, #252]	; (8008130 <DMA_CalcBaseAndBitshift+0x120>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d040      	beq.n	80080b8 <DMA_CalcBaseAndBitshift+0xa8>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a3e      	ldr	r2, [pc, #248]	; (8008134 <DMA_CalcBaseAndBitshift+0x124>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d03b      	beq.n	80080b8 <DMA_CalcBaseAndBitshift+0xa8>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a3c      	ldr	r2, [pc, #240]	; (8008138 <DMA_CalcBaseAndBitshift+0x128>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d036      	beq.n	80080b8 <DMA_CalcBaseAndBitshift+0xa8>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a3b      	ldr	r2, [pc, #236]	; (800813c <DMA_CalcBaseAndBitshift+0x12c>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d031      	beq.n	80080b8 <DMA_CalcBaseAndBitshift+0xa8>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a39      	ldr	r2, [pc, #228]	; (8008140 <DMA_CalcBaseAndBitshift+0x130>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d02c      	beq.n	80080b8 <DMA_CalcBaseAndBitshift+0xa8>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a38      	ldr	r2, [pc, #224]	; (8008144 <DMA_CalcBaseAndBitshift+0x134>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d027      	beq.n	80080b8 <DMA_CalcBaseAndBitshift+0xa8>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a36      	ldr	r2, [pc, #216]	; (8008148 <DMA_CalcBaseAndBitshift+0x138>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d022      	beq.n	80080b8 <DMA_CalcBaseAndBitshift+0xa8>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a35      	ldr	r2, [pc, #212]	; (800814c <DMA_CalcBaseAndBitshift+0x13c>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d01d      	beq.n	80080b8 <DMA_CalcBaseAndBitshift+0xa8>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a33      	ldr	r2, [pc, #204]	; (8008150 <DMA_CalcBaseAndBitshift+0x140>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d018      	beq.n	80080b8 <DMA_CalcBaseAndBitshift+0xa8>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a32      	ldr	r2, [pc, #200]	; (8008154 <DMA_CalcBaseAndBitshift+0x144>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d013      	beq.n	80080b8 <DMA_CalcBaseAndBitshift+0xa8>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a30      	ldr	r2, [pc, #192]	; (8008158 <DMA_CalcBaseAndBitshift+0x148>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d00e      	beq.n	80080b8 <DMA_CalcBaseAndBitshift+0xa8>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a2f      	ldr	r2, [pc, #188]	; (800815c <DMA_CalcBaseAndBitshift+0x14c>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d009      	beq.n	80080b8 <DMA_CalcBaseAndBitshift+0xa8>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a2d      	ldr	r2, [pc, #180]	; (8008160 <DMA_CalcBaseAndBitshift+0x150>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d004      	beq.n	80080b8 <DMA_CalcBaseAndBitshift+0xa8>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a2c      	ldr	r2, [pc, #176]	; (8008164 <DMA_CalcBaseAndBitshift+0x154>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d101      	bne.n	80080bc <DMA_CalcBaseAndBitshift+0xac>
 80080b8:	2301      	movs	r3, #1
 80080ba:	e000      	b.n	80080be <DMA_CalcBaseAndBitshift+0xae>
 80080bc:	2300      	movs	r3, #0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d024      	beq.n	800810c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	3b10      	subs	r3, #16
 80080ca:	4a27      	ldr	r2, [pc, #156]	; (8008168 <DMA_CalcBaseAndBitshift+0x158>)
 80080cc:	fba2 2303 	umull	r2, r3, r2, r3
 80080d0:	091b      	lsrs	r3, r3, #4
 80080d2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f003 0307 	and.w	r3, r3, #7
 80080da:	4a24      	ldr	r2, [pc, #144]	; (800816c <DMA_CalcBaseAndBitshift+0x15c>)
 80080dc:	5cd3      	ldrb	r3, [r2, r3]
 80080de:	461a      	mov	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2b03      	cmp	r3, #3
 80080e8:	d908      	bls.n	80080fc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	461a      	mov	r2, r3
 80080f0:	4b1f      	ldr	r3, [pc, #124]	; (8008170 <DMA_CalcBaseAndBitshift+0x160>)
 80080f2:	4013      	ands	r3, r2
 80080f4:	1d1a      	adds	r2, r3, #4
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	659a      	str	r2, [r3, #88]	; 0x58
 80080fa:	e00d      	b.n	8008118 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	461a      	mov	r2, r3
 8008102:	4b1b      	ldr	r3, [pc, #108]	; (8008170 <DMA_CalcBaseAndBitshift+0x160>)
 8008104:	4013      	ands	r3, r2
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	6593      	str	r3, [r2, #88]	; 0x58
 800810a:	e005      	b.n	8008118 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800811c:	4618      	mov	r0, r3
 800811e:	3714      	adds	r7, #20
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr
 8008128:	40020010 	.word	0x40020010
 800812c:	40020028 	.word	0x40020028
 8008130:	40020040 	.word	0x40020040
 8008134:	40020058 	.word	0x40020058
 8008138:	40020070 	.word	0x40020070
 800813c:	40020088 	.word	0x40020088
 8008140:	400200a0 	.word	0x400200a0
 8008144:	400200b8 	.word	0x400200b8
 8008148:	40020410 	.word	0x40020410
 800814c:	40020428 	.word	0x40020428
 8008150:	40020440 	.word	0x40020440
 8008154:	40020458 	.word	0x40020458
 8008158:	40020470 	.word	0x40020470
 800815c:	40020488 	.word	0x40020488
 8008160:	400204a0 	.word	0x400204a0
 8008164:	400204b8 	.word	0x400204b8
 8008168:	aaaaaaab 	.word	0xaaaaaaab
 800816c:	0801553c 	.word	0x0801553c
 8008170:	fffffc00 	.word	0xfffffc00

08008174 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800817c:	2300      	movs	r3, #0
 800817e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	699b      	ldr	r3, [r3, #24]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d120      	bne.n	80081ca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818c:	2b03      	cmp	r3, #3
 800818e:	d858      	bhi.n	8008242 <DMA_CheckFifoParam+0xce>
 8008190:	a201      	add	r2, pc, #4	; (adr r2, 8008198 <DMA_CheckFifoParam+0x24>)
 8008192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008196:	bf00      	nop
 8008198:	080081a9 	.word	0x080081a9
 800819c:	080081bb 	.word	0x080081bb
 80081a0:	080081a9 	.word	0x080081a9
 80081a4:	08008243 	.word	0x08008243
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d048      	beq.n	8008246 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80081b8:	e045      	b.n	8008246 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80081c2:	d142      	bne.n	800824a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80081c8:	e03f      	b.n	800824a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081d2:	d123      	bne.n	800821c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d8:	2b03      	cmp	r3, #3
 80081da:	d838      	bhi.n	800824e <DMA_CheckFifoParam+0xda>
 80081dc:	a201      	add	r2, pc, #4	; (adr r2, 80081e4 <DMA_CheckFifoParam+0x70>)
 80081de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e2:	bf00      	nop
 80081e4:	080081f5 	.word	0x080081f5
 80081e8:	080081fb 	.word	0x080081fb
 80081ec:	080081f5 	.word	0x080081f5
 80081f0:	0800820d 	.word	0x0800820d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	73fb      	strb	r3, [r7, #15]
        break;
 80081f8:	e030      	b.n	800825c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d025      	beq.n	8008252 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800820a:	e022      	b.n	8008252 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008210:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008214:	d11f      	bne.n	8008256 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800821a:	e01c      	b.n	8008256 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008220:	2b02      	cmp	r3, #2
 8008222:	d902      	bls.n	800822a <DMA_CheckFifoParam+0xb6>
 8008224:	2b03      	cmp	r3, #3
 8008226:	d003      	beq.n	8008230 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008228:	e018      	b.n	800825c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	73fb      	strb	r3, [r7, #15]
        break;
 800822e:	e015      	b.n	800825c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00e      	beq.n	800825a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	73fb      	strb	r3, [r7, #15]
    break;
 8008240:	e00b      	b.n	800825a <DMA_CheckFifoParam+0xe6>
        break;
 8008242:	bf00      	nop
 8008244:	e00a      	b.n	800825c <DMA_CheckFifoParam+0xe8>
        break;
 8008246:	bf00      	nop
 8008248:	e008      	b.n	800825c <DMA_CheckFifoParam+0xe8>
        break;
 800824a:	bf00      	nop
 800824c:	e006      	b.n	800825c <DMA_CheckFifoParam+0xe8>
        break;
 800824e:	bf00      	nop
 8008250:	e004      	b.n	800825c <DMA_CheckFifoParam+0xe8>
        break;
 8008252:	bf00      	nop
 8008254:	e002      	b.n	800825c <DMA_CheckFifoParam+0xe8>
        break;
 8008256:	bf00      	nop
 8008258:	e000      	b.n	800825c <DMA_CheckFifoParam+0xe8>
    break;
 800825a:	bf00      	nop
    }
  }

  return status;
 800825c:	7bfb      	ldrb	r3, [r7, #15]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop

0800826c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a38      	ldr	r2, [pc, #224]	; (8008360 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d022      	beq.n	80082ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a36      	ldr	r2, [pc, #216]	; (8008364 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d01d      	beq.n	80082ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a35      	ldr	r2, [pc, #212]	; (8008368 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d018      	beq.n	80082ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a33      	ldr	r2, [pc, #204]	; (800836c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d013      	beq.n	80082ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a32      	ldr	r2, [pc, #200]	; (8008370 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d00e      	beq.n	80082ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a30      	ldr	r2, [pc, #192]	; (8008374 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d009      	beq.n	80082ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a2f      	ldr	r2, [pc, #188]	; (8008378 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d004      	beq.n	80082ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a2d      	ldr	r2, [pc, #180]	; (800837c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d101      	bne.n	80082ce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80082ca:	2301      	movs	r3, #1
 80082cc:	e000      	b.n	80082d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80082ce:	2300      	movs	r3, #0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d01a      	beq.n	800830a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	3b08      	subs	r3, #8
 80082dc:	4a28      	ldr	r2, [pc, #160]	; (8008380 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80082de:	fba2 2303 	umull	r2, r3, r2, r3
 80082e2:	091b      	lsrs	r3, r3, #4
 80082e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	4b26      	ldr	r3, [pc, #152]	; (8008384 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80082ea:	4413      	add	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	461a      	mov	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a24      	ldr	r2, [pc, #144]	; (8008388 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80082f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f003 031f 	and.w	r3, r3, #31
 8008300:	2201      	movs	r2, #1
 8008302:	409a      	lsls	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008308:	e024      	b.n	8008354 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	b2db      	uxtb	r3, r3
 8008310:	3b10      	subs	r3, #16
 8008312:	4a1e      	ldr	r2, [pc, #120]	; (800838c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008314:	fba2 2303 	umull	r2, r3, r2, r3
 8008318:	091b      	lsrs	r3, r3, #4
 800831a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	4a1c      	ldr	r2, [pc, #112]	; (8008390 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d806      	bhi.n	8008332 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	4a1b      	ldr	r2, [pc, #108]	; (8008394 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d902      	bls.n	8008332 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	3308      	adds	r3, #8
 8008330:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	4b18      	ldr	r3, [pc, #96]	; (8008398 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008336:	4413      	add	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	461a      	mov	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a16      	ldr	r2, [pc, #88]	; (800839c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008344:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f003 031f 	and.w	r3, r3, #31
 800834c:	2201      	movs	r2, #1
 800834e:	409a      	lsls	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008354:	bf00      	nop
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr
 8008360:	58025408 	.word	0x58025408
 8008364:	5802541c 	.word	0x5802541c
 8008368:	58025430 	.word	0x58025430
 800836c:	58025444 	.word	0x58025444
 8008370:	58025458 	.word	0x58025458
 8008374:	5802546c 	.word	0x5802546c
 8008378:	58025480 	.word	0x58025480
 800837c:	58025494 	.word	0x58025494
 8008380:	cccccccd 	.word	0xcccccccd
 8008384:	16009600 	.word	0x16009600
 8008388:	58025880 	.word	0x58025880
 800838c:	aaaaaaab 	.word	0xaaaaaaab
 8008390:	400204b8 	.word	0x400204b8
 8008394:	4002040f 	.word	0x4002040f
 8008398:	10008200 	.word	0x10008200
 800839c:	40020880 	.word	0x40020880

080083a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d04a      	beq.n	800844c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2b08      	cmp	r3, #8
 80083ba:	d847      	bhi.n	800844c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a25      	ldr	r2, [pc, #148]	; (8008458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d022      	beq.n	800840c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a24      	ldr	r2, [pc, #144]	; (800845c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d01d      	beq.n	800840c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a22      	ldr	r2, [pc, #136]	; (8008460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d018      	beq.n	800840c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a21      	ldr	r2, [pc, #132]	; (8008464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d013      	beq.n	800840c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a1f      	ldr	r2, [pc, #124]	; (8008468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d00e      	beq.n	800840c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a1e      	ldr	r2, [pc, #120]	; (800846c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d009      	beq.n	800840c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a1c      	ldr	r2, [pc, #112]	; (8008470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d004      	beq.n	800840c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a1b      	ldr	r2, [pc, #108]	; (8008474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d101      	bne.n	8008410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800840c:	2301      	movs	r3, #1
 800840e:	e000      	b.n	8008412 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008410:	2300      	movs	r3, #0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00a      	beq.n	800842c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	4b17      	ldr	r3, [pc, #92]	; (8008478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800841a:	4413      	add	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	461a      	mov	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a15      	ldr	r2, [pc, #84]	; (800847c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008428:	671a      	str	r2, [r3, #112]	; 0x70
 800842a:	e009      	b.n	8008440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	4b14      	ldr	r3, [pc, #80]	; (8008480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008430:	4413      	add	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	461a      	mov	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a11      	ldr	r2, [pc, #68]	; (8008484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800843e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	3b01      	subs	r3, #1
 8008444:	2201      	movs	r2, #1
 8008446:	409a      	lsls	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800844c:	bf00      	nop
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr
 8008458:	58025408 	.word	0x58025408
 800845c:	5802541c 	.word	0x5802541c
 8008460:	58025430 	.word	0x58025430
 8008464:	58025444 	.word	0x58025444
 8008468:	58025458 	.word	0x58025458
 800846c:	5802546c 	.word	0x5802546c
 8008470:	58025480 	.word	0x58025480
 8008474:	58025494 	.word	0x58025494
 8008478:	1600963f 	.word	0x1600963f
 800847c:	58025940 	.word	0x58025940
 8008480:	1000823f 	.word	0x1000823f
 8008484:	40020940 	.word	0x40020940

08008488 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008488:	b480      	push	{r7}
 800848a:	b089      	sub	sp, #36	; 0x24
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008492:	2300      	movs	r3, #0
 8008494:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008496:	4b89      	ldr	r3, [pc, #548]	; (80086bc <HAL_GPIO_Init+0x234>)
 8008498:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800849a:	e194      	b.n	80087c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	2101      	movs	r1, #1
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	fa01 f303 	lsl.w	r3, r1, r3
 80084a8:	4013      	ands	r3, r2
 80084aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f000 8186 	beq.w	80087c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	f003 0303 	and.w	r3, r3, #3
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d005      	beq.n	80084cc <HAL_GPIO_Init+0x44>
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	f003 0303 	and.w	r3, r3, #3
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d130      	bne.n	800852e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	005b      	lsls	r3, r3, #1
 80084d6:	2203      	movs	r2, #3
 80084d8:	fa02 f303 	lsl.w	r3, r2, r3
 80084dc:	43db      	mvns	r3, r3
 80084de:	69ba      	ldr	r2, [r7, #24]
 80084e0:	4013      	ands	r3, r2
 80084e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	68da      	ldr	r2, [r3, #12]
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	005b      	lsls	r3, r3, #1
 80084ec:	fa02 f303 	lsl.w	r3, r2, r3
 80084f0:	69ba      	ldr	r2, [r7, #24]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	69ba      	ldr	r2, [r7, #24]
 80084fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008502:	2201      	movs	r2, #1
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	fa02 f303 	lsl.w	r3, r2, r3
 800850a:	43db      	mvns	r3, r3
 800850c:	69ba      	ldr	r2, [r7, #24]
 800850e:	4013      	ands	r3, r2
 8008510:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	091b      	lsrs	r3, r3, #4
 8008518:	f003 0201 	and.w	r2, r3, #1
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	fa02 f303 	lsl.w	r3, r2, r3
 8008522:	69ba      	ldr	r2, [r7, #24]
 8008524:	4313      	orrs	r3, r2
 8008526:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	69ba      	ldr	r2, [r7, #24]
 800852c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	f003 0303 	and.w	r3, r3, #3
 8008536:	2b03      	cmp	r3, #3
 8008538:	d017      	beq.n	800856a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	005b      	lsls	r3, r3, #1
 8008544:	2203      	movs	r2, #3
 8008546:	fa02 f303 	lsl.w	r3, r2, r3
 800854a:	43db      	mvns	r3, r3
 800854c:	69ba      	ldr	r2, [r7, #24]
 800854e:	4013      	ands	r3, r2
 8008550:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	689a      	ldr	r2, [r3, #8]
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	005b      	lsls	r3, r3, #1
 800855a:	fa02 f303 	lsl.w	r3, r2, r3
 800855e:	69ba      	ldr	r2, [r7, #24]
 8008560:	4313      	orrs	r3, r2
 8008562:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	69ba      	ldr	r2, [r7, #24]
 8008568:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f003 0303 	and.w	r3, r3, #3
 8008572:	2b02      	cmp	r3, #2
 8008574:	d123      	bne.n	80085be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	08da      	lsrs	r2, r3, #3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	3208      	adds	r2, #8
 800857e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008582:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	f003 0307 	and.w	r3, r3, #7
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	220f      	movs	r2, #15
 800858e:	fa02 f303 	lsl.w	r3, r2, r3
 8008592:	43db      	mvns	r3, r3
 8008594:	69ba      	ldr	r2, [r7, #24]
 8008596:	4013      	ands	r3, r2
 8008598:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	691a      	ldr	r2, [r3, #16]
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	f003 0307 	and.w	r3, r3, #7
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	fa02 f303 	lsl.w	r3, r2, r3
 80085aa:	69ba      	ldr	r2, [r7, #24]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	08da      	lsrs	r2, r3, #3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	3208      	adds	r2, #8
 80085b8:	69b9      	ldr	r1, [r7, #24]
 80085ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	005b      	lsls	r3, r3, #1
 80085c8:	2203      	movs	r2, #3
 80085ca:	fa02 f303 	lsl.w	r3, r2, r3
 80085ce:	43db      	mvns	r3, r3
 80085d0:	69ba      	ldr	r2, [r7, #24]
 80085d2:	4013      	ands	r3, r2
 80085d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	f003 0203 	and.w	r2, r3, #3
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	005b      	lsls	r3, r3, #1
 80085e2:	fa02 f303 	lsl.w	r3, r2, r3
 80085e6:	69ba      	ldr	r2, [r7, #24]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	69ba      	ldr	r2, [r7, #24]
 80085f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	f000 80e0 	beq.w	80087c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008600:	4b2f      	ldr	r3, [pc, #188]	; (80086c0 <HAL_GPIO_Init+0x238>)
 8008602:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008606:	4a2e      	ldr	r2, [pc, #184]	; (80086c0 <HAL_GPIO_Init+0x238>)
 8008608:	f043 0302 	orr.w	r3, r3, #2
 800860c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008610:	4b2b      	ldr	r3, [pc, #172]	; (80086c0 <HAL_GPIO_Init+0x238>)
 8008612:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008616:	f003 0302 	and.w	r3, r3, #2
 800861a:	60fb      	str	r3, [r7, #12]
 800861c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800861e:	4a29      	ldr	r2, [pc, #164]	; (80086c4 <HAL_GPIO_Init+0x23c>)
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	089b      	lsrs	r3, r3, #2
 8008624:	3302      	adds	r3, #2
 8008626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800862a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	f003 0303 	and.w	r3, r3, #3
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	220f      	movs	r2, #15
 8008636:	fa02 f303 	lsl.w	r3, r2, r3
 800863a:	43db      	mvns	r3, r3
 800863c:	69ba      	ldr	r2, [r7, #24]
 800863e:	4013      	ands	r3, r2
 8008640:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a20      	ldr	r2, [pc, #128]	; (80086c8 <HAL_GPIO_Init+0x240>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d052      	beq.n	80086f0 <HAL_GPIO_Init+0x268>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a1f      	ldr	r2, [pc, #124]	; (80086cc <HAL_GPIO_Init+0x244>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d031      	beq.n	80086b6 <HAL_GPIO_Init+0x22e>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a1e      	ldr	r2, [pc, #120]	; (80086d0 <HAL_GPIO_Init+0x248>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d02b      	beq.n	80086b2 <HAL_GPIO_Init+0x22a>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a1d      	ldr	r2, [pc, #116]	; (80086d4 <HAL_GPIO_Init+0x24c>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d025      	beq.n	80086ae <HAL_GPIO_Init+0x226>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a1c      	ldr	r2, [pc, #112]	; (80086d8 <HAL_GPIO_Init+0x250>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d01f      	beq.n	80086aa <HAL_GPIO_Init+0x222>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a1b      	ldr	r2, [pc, #108]	; (80086dc <HAL_GPIO_Init+0x254>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d019      	beq.n	80086a6 <HAL_GPIO_Init+0x21e>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a1a      	ldr	r2, [pc, #104]	; (80086e0 <HAL_GPIO_Init+0x258>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d013      	beq.n	80086a2 <HAL_GPIO_Init+0x21a>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a19      	ldr	r2, [pc, #100]	; (80086e4 <HAL_GPIO_Init+0x25c>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d00d      	beq.n	800869e <HAL_GPIO_Init+0x216>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a18      	ldr	r2, [pc, #96]	; (80086e8 <HAL_GPIO_Init+0x260>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d007      	beq.n	800869a <HAL_GPIO_Init+0x212>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a17      	ldr	r2, [pc, #92]	; (80086ec <HAL_GPIO_Init+0x264>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d101      	bne.n	8008696 <HAL_GPIO_Init+0x20e>
 8008692:	2309      	movs	r3, #9
 8008694:	e02d      	b.n	80086f2 <HAL_GPIO_Init+0x26a>
 8008696:	230a      	movs	r3, #10
 8008698:	e02b      	b.n	80086f2 <HAL_GPIO_Init+0x26a>
 800869a:	2308      	movs	r3, #8
 800869c:	e029      	b.n	80086f2 <HAL_GPIO_Init+0x26a>
 800869e:	2307      	movs	r3, #7
 80086a0:	e027      	b.n	80086f2 <HAL_GPIO_Init+0x26a>
 80086a2:	2306      	movs	r3, #6
 80086a4:	e025      	b.n	80086f2 <HAL_GPIO_Init+0x26a>
 80086a6:	2305      	movs	r3, #5
 80086a8:	e023      	b.n	80086f2 <HAL_GPIO_Init+0x26a>
 80086aa:	2304      	movs	r3, #4
 80086ac:	e021      	b.n	80086f2 <HAL_GPIO_Init+0x26a>
 80086ae:	2303      	movs	r3, #3
 80086b0:	e01f      	b.n	80086f2 <HAL_GPIO_Init+0x26a>
 80086b2:	2302      	movs	r3, #2
 80086b4:	e01d      	b.n	80086f2 <HAL_GPIO_Init+0x26a>
 80086b6:	2301      	movs	r3, #1
 80086b8:	e01b      	b.n	80086f2 <HAL_GPIO_Init+0x26a>
 80086ba:	bf00      	nop
 80086bc:	58000080 	.word	0x58000080
 80086c0:	58024400 	.word	0x58024400
 80086c4:	58000400 	.word	0x58000400
 80086c8:	58020000 	.word	0x58020000
 80086cc:	58020400 	.word	0x58020400
 80086d0:	58020800 	.word	0x58020800
 80086d4:	58020c00 	.word	0x58020c00
 80086d8:	58021000 	.word	0x58021000
 80086dc:	58021400 	.word	0x58021400
 80086e0:	58021800 	.word	0x58021800
 80086e4:	58021c00 	.word	0x58021c00
 80086e8:	58022000 	.word	0x58022000
 80086ec:	58022400 	.word	0x58022400
 80086f0:	2300      	movs	r3, #0
 80086f2:	69fa      	ldr	r2, [r7, #28]
 80086f4:	f002 0203 	and.w	r2, r2, #3
 80086f8:	0092      	lsls	r2, r2, #2
 80086fa:	4093      	lsls	r3, r2
 80086fc:	69ba      	ldr	r2, [r7, #24]
 80086fe:	4313      	orrs	r3, r2
 8008700:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008702:	4938      	ldr	r1, [pc, #224]	; (80087e4 <HAL_GPIO_Init+0x35c>)
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	089b      	lsrs	r3, r3, #2
 8008708:	3302      	adds	r3, #2
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	43db      	mvns	r3, r3
 800871c:	69ba      	ldr	r2, [r7, #24]
 800871e:	4013      	ands	r3, r2
 8008720:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800872a:	2b00      	cmp	r3, #0
 800872c:	d003      	beq.n	8008736 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800872e:	69ba      	ldr	r2, [r7, #24]
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	4313      	orrs	r3, r2
 8008734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008736:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800873e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	43db      	mvns	r3, r3
 800874a:	69ba      	ldr	r2, [r7, #24]
 800874c:	4013      	ands	r3, r2
 800874e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008758:	2b00      	cmp	r3, #0
 800875a:	d003      	beq.n	8008764 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800875c:	69ba      	ldr	r2, [r7, #24]
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	4313      	orrs	r3, r2
 8008762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008764:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	43db      	mvns	r3, r3
 8008776:	69ba      	ldr	r2, [r7, #24]
 8008778:	4013      	ands	r3, r2
 800877a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008784:	2b00      	cmp	r3, #0
 8008786:	d003      	beq.n	8008790 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008788:	69ba      	ldr	r2, [r7, #24]
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	4313      	orrs	r3, r2
 800878e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	69ba      	ldr	r2, [r7, #24]
 8008794:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	43db      	mvns	r3, r3
 80087a0:	69ba      	ldr	r2, [r7, #24]
 80087a2:	4013      	ands	r3, r2
 80087a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d003      	beq.n	80087ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80087b2:	69ba      	ldr	r2, [r7, #24]
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	69ba      	ldr	r2, [r7, #24]
 80087be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	3301      	adds	r3, #1
 80087c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	fa22 f303 	lsr.w	r3, r2, r3
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f47f ae63 	bne.w	800849c <HAL_GPIO_Init+0x14>
  }
}
 80087d6:	bf00      	nop
 80087d8:	bf00      	nop
 80087da:	3724      	adds	r7, #36	; 0x24
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr
 80087e4:	58000400 	.word	0x58000400

080087e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	460b      	mov	r3, r1
 80087f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	691a      	ldr	r2, [r3, #16]
 80087f8:	887b      	ldrh	r3, [r7, #2]
 80087fa:	4013      	ands	r3, r2
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d002      	beq.n	8008806 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008800:	2301      	movs	r3, #1
 8008802:	73fb      	strb	r3, [r7, #15]
 8008804:	e001      	b.n	800880a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008806:	2300      	movs	r3, #0
 8008808:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800880a:	7bfb      	ldrb	r3, [r7, #15]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	460b      	mov	r3, r1
 8008822:	807b      	strh	r3, [r7, #2]
 8008824:	4613      	mov	r3, r2
 8008826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008828:	787b      	ldrb	r3, [r7, #1]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d003      	beq.n	8008836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800882e:	887a      	ldrh	r2, [r7, #2]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008834:	e003      	b.n	800883e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008836:	887b      	ldrh	r3, [r7, #2]
 8008838:	041a      	lsls	r2, r3, #16
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	619a      	str	r2, [r3, #24]
}
 800883e:	bf00      	nop
 8008840:	370c      	adds	r7, #12
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
	...

0800884c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d101      	bne.n	800885e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e08b      	b.n	8008976 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	d106      	bne.n	8008878 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7fa f938 	bl	8002ae8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2224      	movs	r2, #36	; 0x24
 800887c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f022 0201 	bic.w	r2, r2, #1
 800888e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	685a      	ldr	r2, [r3, #4]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800889c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	689a      	ldr	r2, [r3, #8]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d107      	bne.n	80088c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	689a      	ldr	r2, [r3, #8]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088c2:	609a      	str	r2, [r3, #8]
 80088c4:	e006      	b.n	80088d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	689a      	ldr	r2, [r3, #8]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80088d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d108      	bne.n	80088ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	685a      	ldr	r2, [r3, #4]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088ea:	605a      	str	r2, [r3, #4]
 80088ec:	e007      	b.n	80088fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	685a      	ldr	r2, [r3, #4]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	6859      	ldr	r1, [r3, #4]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	4b1d      	ldr	r3, [pc, #116]	; (8008980 <HAL_I2C_Init+0x134>)
 800890a:	430b      	orrs	r3, r1
 800890c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68da      	ldr	r2, [r3, #12]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800891c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	691a      	ldr	r2, [r3, #16]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	695b      	ldr	r3, [r3, #20]
 8008926:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	699b      	ldr	r3, [r3, #24]
 800892e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	430a      	orrs	r2, r1
 8008936:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	69d9      	ldr	r1, [r3, #28]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a1a      	ldr	r2, [r3, #32]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	430a      	orrs	r2, r1
 8008946:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f042 0201 	orr.w	r2, r2, #1
 8008956:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2220      	movs	r2, #32
 8008962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	02008000 	.word	0x02008000

08008984 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008994:	b2db      	uxtb	r3, r3
 8008996:	2b20      	cmp	r3, #32
 8008998:	d138      	bne.n	8008a0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d101      	bne.n	80089a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80089a4:	2302      	movs	r3, #2
 80089a6:	e032      	b.n	8008a0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2224      	movs	r2, #36	; 0x24
 80089b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f022 0201 	bic.w	r2, r2, #1
 80089c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80089d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6819      	ldr	r1, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	430a      	orrs	r2, r1
 80089e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f042 0201 	orr.w	r2, r2, #1
 80089f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2220      	movs	r2, #32
 80089fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	e000      	b.n	8008a0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008a0c:	2302      	movs	r3, #2
  }
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	370c      	adds	r7, #12
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr

08008a1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008a1a:	b480      	push	{r7}
 8008a1c:	b085      	sub	sp, #20
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
 8008a22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	2b20      	cmp	r3, #32
 8008a2e:	d139      	bne.n	8008aa4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d101      	bne.n	8008a3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008a3a:	2302      	movs	r3, #2
 8008a3c:	e033      	b.n	8008aa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2201      	movs	r2, #1
 8008a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2224      	movs	r2, #36	; 0x24
 8008a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f022 0201 	bic.w	r2, r2, #1
 8008a5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008a6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	021b      	lsls	r3, r3, #8
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f042 0201 	orr.w	r2, r2, #1
 8008a8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2220      	movs	r2, #32
 8008a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	e000      	b.n	8008aa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008aa4:	2302      	movs	r3, #2
  }
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3714      	adds	r7, #20
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
	...

08008ab4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008abc:	4b0d      	ldr	r3, [pc, #52]	; (8008af4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8008abe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008ac2:	4a0c      	ldr	r2, [pc, #48]	; (8008af4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8008ac4:	f043 0302 	orr.w	r3, r3, #2
 8008ac8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008acc:	4b09      	ldr	r3, [pc, #36]	; (8008af4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8008ace:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008ad2:	f003 0302 	and.w	r3, r3, #2
 8008ad6:	60fb      	str	r3, [r7, #12]
 8008ad8:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8008ada:	4b07      	ldr	r3, [pc, #28]	; (8008af8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8008adc:	685a      	ldr	r2, [r3, #4]
 8008ade:	4906      	ldr	r1, [pc, #24]	; (8008af8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	604b      	str	r3, [r1, #4]
}
 8008ae6:	bf00      	nop
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	58024400 	.word	0x58024400
 8008af8:	58000400 	.word	0x58000400

08008afc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008b04:	4b19      	ldr	r3, [pc, #100]	; (8008b6c <HAL_PWREx_ConfigSupply+0x70>)
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	f003 0304 	and.w	r3, r3, #4
 8008b0c:	2b04      	cmp	r3, #4
 8008b0e:	d00a      	beq.n	8008b26 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008b10:	4b16      	ldr	r3, [pc, #88]	; (8008b6c <HAL_PWREx_ConfigSupply+0x70>)
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	f003 0307 	and.w	r3, r3, #7
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d001      	beq.n	8008b22 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e01f      	b.n	8008b62 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	e01d      	b.n	8008b62 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008b26:	4b11      	ldr	r3, [pc, #68]	; (8008b6c <HAL_PWREx_ConfigSupply+0x70>)
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	f023 0207 	bic.w	r2, r3, #7
 8008b2e:	490f      	ldr	r1, [pc, #60]	; (8008b6c <HAL_PWREx_ConfigSupply+0x70>)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008b36:	f7fa fd43 	bl	80035c0 <HAL_GetTick>
 8008b3a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008b3c:	e009      	b.n	8008b52 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008b3e:	f7fa fd3f 	bl	80035c0 <HAL_GetTick>
 8008b42:	4602      	mov	r2, r0
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	1ad3      	subs	r3, r2, r3
 8008b48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b4c:	d901      	bls.n	8008b52 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e007      	b.n	8008b62 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008b52:	4b06      	ldr	r3, [pc, #24]	; (8008b6c <HAL_PWREx_ConfigSupply+0x70>)
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b5e:	d1ee      	bne.n	8008b3e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	58024800 	.word	0x58024800

08008b70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b08c      	sub	sp, #48	; 0x30
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d102      	bne.n	8008b84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	f000 bc48 	b.w	8009414 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 0301 	and.w	r3, r3, #1
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f000 8088 	beq.w	8008ca2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b92:	4b99      	ldr	r3, [pc, #612]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b9c:	4b96      	ldr	r3, [pc, #600]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba4:	2b10      	cmp	r3, #16
 8008ba6:	d007      	beq.n	8008bb8 <HAL_RCC_OscConfig+0x48>
 8008ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008baa:	2b18      	cmp	r3, #24
 8008bac:	d111      	bne.n	8008bd2 <HAL_RCC_OscConfig+0x62>
 8008bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb0:	f003 0303 	and.w	r3, r3, #3
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d10c      	bne.n	8008bd2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bb8:	4b8f      	ldr	r3, [pc, #572]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d06d      	beq.n	8008ca0 <HAL_RCC_OscConfig+0x130>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d169      	bne.n	8008ca0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	f000 bc21 	b.w	8009414 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bda:	d106      	bne.n	8008bea <HAL_RCC_OscConfig+0x7a>
 8008bdc:	4b86      	ldr	r3, [pc, #536]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a85      	ldr	r2, [pc, #532]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008be6:	6013      	str	r3, [r2, #0]
 8008be8:	e02e      	b.n	8008c48 <HAL_RCC_OscConfig+0xd8>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d10c      	bne.n	8008c0c <HAL_RCC_OscConfig+0x9c>
 8008bf2:	4b81      	ldr	r3, [pc, #516]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a80      	ldr	r2, [pc, #512]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bfc:	6013      	str	r3, [r2, #0]
 8008bfe:	4b7e      	ldr	r3, [pc, #504]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a7d      	ldr	r2, [pc, #500]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c08:	6013      	str	r3, [r2, #0]
 8008c0a:	e01d      	b.n	8008c48 <HAL_RCC_OscConfig+0xd8>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c14:	d10c      	bne.n	8008c30 <HAL_RCC_OscConfig+0xc0>
 8008c16:	4b78      	ldr	r3, [pc, #480]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a77      	ldr	r2, [pc, #476]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c20:	6013      	str	r3, [r2, #0]
 8008c22:	4b75      	ldr	r3, [pc, #468]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a74      	ldr	r2, [pc, #464]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c2c:	6013      	str	r3, [r2, #0]
 8008c2e:	e00b      	b.n	8008c48 <HAL_RCC_OscConfig+0xd8>
 8008c30:	4b71      	ldr	r3, [pc, #452]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a70      	ldr	r2, [pc, #448]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c3a:	6013      	str	r3, [r2, #0]
 8008c3c:	4b6e      	ldr	r3, [pc, #440]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a6d      	ldr	r2, [pc, #436]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d013      	beq.n	8008c78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c50:	f7fa fcb6 	bl	80035c0 <HAL_GetTick>
 8008c54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c56:	e008      	b.n	8008c6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c58:	f7fa fcb2 	bl	80035c0 <HAL_GetTick>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c60:	1ad3      	subs	r3, r2, r3
 8008c62:	2b64      	cmp	r3, #100	; 0x64
 8008c64:	d901      	bls.n	8008c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c66:	2303      	movs	r3, #3
 8008c68:	e3d4      	b.n	8009414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c6a:	4b63      	ldr	r3, [pc, #396]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d0f0      	beq.n	8008c58 <HAL_RCC_OscConfig+0xe8>
 8008c76:	e014      	b.n	8008ca2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c78:	f7fa fca2 	bl	80035c0 <HAL_GetTick>
 8008c7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008c7e:	e008      	b.n	8008c92 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c80:	f7fa fc9e 	bl	80035c0 <HAL_GetTick>
 8008c84:	4602      	mov	r2, r0
 8008c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	2b64      	cmp	r3, #100	; 0x64
 8008c8c:	d901      	bls.n	8008c92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e3c0      	b.n	8009414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008c92:	4b59      	ldr	r3, [pc, #356]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1f0      	bne.n	8008c80 <HAL_RCC_OscConfig+0x110>
 8008c9e:	e000      	b.n	8008ca2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 0302 	and.w	r3, r3, #2
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f000 80ca 	beq.w	8008e44 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cb0:	4b51      	ldr	r3, [pc, #324]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cb8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008cba:	4b4f      	ldr	r3, [pc, #316]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cbe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008cc0:	6a3b      	ldr	r3, [r7, #32]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d007      	beq.n	8008cd6 <HAL_RCC_OscConfig+0x166>
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	2b18      	cmp	r3, #24
 8008cca:	d156      	bne.n	8008d7a <HAL_RCC_OscConfig+0x20a>
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	f003 0303 	and.w	r3, r3, #3
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d151      	bne.n	8008d7a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cd6:	4b48      	ldr	r3, [pc, #288]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f003 0304 	and.w	r3, r3, #4
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d005      	beq.n	8008cee <HAL_RCC_OscConfig+0x17e>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d101      	bne.n	8008cee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e392      	b.n	8009414 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008cee:	4b42      	ldr	r3, [pc, #264]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f023 0219 	bic.w	r2, r3, #25
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	493f      	ldr	r1, [pc, #252]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d00:	f7fa fc5e 	bl	80035c0 <HAL_GetTick>
 8008d04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d06:	e008      	b.n	8008d1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d08:	f7fa fc5a 	bl	80035c0 <HAL_GetTick>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d901      	bls.n	8008d1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008d16:	2303      	movs	r3, #3
 8008d18:	e37c      	b.n	8009414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d1a:	4b37      	ldr	r3, [pc, #220]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0304 	and.w	r3, r3, #4
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d0f0      	beq.n	8008d08 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d26:	f7fa fc57 	bl	80035d8 <HAL_GetREVID>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d817      	bhi.n	8008d64 <HAL_RCC_OscConfig+0x1f4>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	2b40      	cmp	r3, #64	; 0x40
 8008d3a:	d108      	bne.n	8008d4e <HAL_RCC_OscConfig+0x1de>
 8008d3c:	4b2e      	ldr	r3, [pc, #184]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008d44:	4a2c      	ldr	r2, [pc, #176]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d4a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d4c:	e07a      	b.n	8008e44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d4e:	4b2a      	ldr	r3, [pc, #168]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	031b      	lsls	r3, r3, #12
 8008d5c:	4926      	ldr	r1, [pc, #152]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d62:	e06f      	b.n	8008e44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d64:	4b24      	ldr	r3, [pc, #144]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	061b      	lsls	r3, r3, #24
 8008d72:	4921      	ldr	r1, [pc, #132]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008d74:	4313      	orrs	r3, r2
 8008d76:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d78:	e064      	b.n	8008e44 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d047      	beq.n	8008e12 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008d82:	4b1d      	ldr	r3, [pc, #116]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f023 0219 	bic.w	r2, r3, #25
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	491a      	ldr	r1, [pc, #104]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008d90:	4313      	orrs	r3, r2
 8008d92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d94:	f7fa fc14 	bl	80035c0 <HAL_GetTick>
 8008d98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d9a:	e008      	b.n	8008dae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d9c:	f7fa fc10 	bl	80035c0 <HAL_GetTick>
 8008da0:	4602      	mov	r2, r0
 8008da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d901      	bls.n	8008dae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008daa:	2303      	movs	r3, #3
 8008dac:	e332      	b.n	8009414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008dae:	4b12      	ldr	r3, [pc, #72]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f003 0304 	and.w	r3, r3, #4
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d0f0      	beq.n	8008d9c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dba:	f7fa fc0d 	bl	80035d8 <HAL_GetREVID>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	f241 0203 	movw	r2, #4099	; 0x1003
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d819      	bhi.n	8008dfc <HAL_RCC_OscConfig+0x28c>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	2b40      	cmp	r3, #64	; 0x40
 8008dce:	d108      	bne.n	8008de2 <HAL_RCC_OscConfig+0x272>
 8008dd0:	4b09      	ldr	r3, [pc, #36]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008dd8:	4a07      	ldr	r2, [pc, #28]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dde:	6053      	str	r3, [r2, #4]
 8008de0:	e030      	b.n	8008e44 <HAL_RCC_OscConfig+0x2d4>
 8008de2:	4b05      	ldr	r3, [pc, #20]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	031b      	lsls	r3, r3, #12
 8008df0:	4901      	ldr	r1, [pc, #4]	; (8008df8 <HAL_RCC_OscConfig+0x288>)
 8008df2:	4313      	orrs	r3, r2
 8008df4:	604b      	str	r3, [r1, #4]
 8008df6:	e025      	b.n	8008e44 <HAL_RCC_OscConfig+0x2d4>
 8008df8:	58024400 	.word	0x58024400
 8008dfc:	4b9a      	ldr	r3, [pc, #616]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	061b      	lsls	r3, r3, #24
 8008e0a:	4997      	ldr	r1, [pc, #604]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	604b      	str	r3, [r1, #4]
 8008e10:	e018      	b.n	8008e44 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e12:	4b95      	ldr	r3, [pc, #596]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a94      	ldr	r2, [pc, #592]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008e18:	f023 0301 	bic.w	r3, r3, #1
 8008e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e1e:	f7fa fbcf 	bl	80035c0 <HAL_GetTick>
 8008e22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008e24:	e008      	b.n	8008e38 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e26:	f7fa fbcb 	bl	80035c0 <HAL_GetTick>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	d901      	bls.n	8008e38 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008e34:	2303      	movs	r3, #3
 8008e36:	e2ed      	b.n	8009414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008e38:	4b8b      	ldr	r3, [pc, #556]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 0304 	and.w	r3, r3, #4
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d1f0      	bne.n	8008e26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f003 0310 	and.w	r3, r3, #16
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f000 80a9 	beq.w	8008fa4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e52:	4b85      	ldr	r3, [pc, #532]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e5c:	4b82      	ldr	r3, [pc, #520]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e60:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	2b08      	cmp	r3, #8
 8008e66:	d007      	beq.n	8008e78 <HAL_RCC_OscConfig+0x308>
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	2b18      	cmp	r3, #24
 8008e6c:	d13a      	bne.n	8008ee4 <HAL_RCC_OscConfig+0x374>
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	f003 0303 	and.w	r3, r3, #3
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d135      	bne.n	8008ee4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e78:	4b7b      	ldr	r3, [pc, #492]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d005      	beq.n	8008e90 <HAL_RCC_OscConfig+0x320>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	69db      	ldr	r3, [r3, #28]
 8008e88:	2b80      	cmp	r3, #128	; 0x80
 8008e8a:	d001      	beq.n	8008e90 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e2c1      	b.n	8009414 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e90:	f7fa fba2 	bl	80035d8 <HAL_GetREVID>
 8008e94:	4603      	mov	r3, r0
 8008e96:	f241 0203 	movw	r2, #4099	; 0x1003
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d817      	bhi.n	8008ece <HAL_RCC_OscConfig+0x35e>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a1b      	ldr	r3, [r3, #32]
 8008ea2:	2b20      	cmp	r3, #32
 8008ea4:	d108      	bne.n	8008eb8 <HAL_RCC_OscConfig+0x348>
 8008ea6:	4b70      	ldr	r3, [pc, #448]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008eae:	4a6e      	ldr	r2, [pc, #440]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008eb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008eb4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008eb6:	e075      	b.n	8008fa4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008eb8:	4b6b      	ldr	r3, [pc, #428]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a1b      	ldr	r3, [r3, #32]
 8008ec4:	069b      	lsls	r3, r3, #26
 8008ec6:	4968      	ldr	r1, [pc, #416]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ecc:	e06a      	b.n	8008fa4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ece:	4b66      	ldr	r3, [pc, #408]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a1b      	ldr	r3, [r3, #32]
 8008eda:	061b      	lsls	r3, r3, #24
 8008edc:	4962      	ldr	r1, [pc, #392]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ee2:	e05f      	b.n	8008fa4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	69db      	ldr	r3, [r3, #28]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d042      	beq.n	8008f72 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008eec:	4b5e      	ldr	r3, [pc, #376]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a5d      	ldr	r2, [pc, #372]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ef8:	f7fa fb62 	bl	80035c0 <HAL_GetTick>
 8008efc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008efe:	e008      	b.n	8008f12 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008f00:	f7fa fb5e 	bl	80035c0 <HAL_GetTick>
 8008f04:	4602      	mov	r2, r0
 8008f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d901      	bls.n	8008f12 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	e280      	b.n	8009414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f12:	4b55      	ldr	r3, [pc, #340]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d0f0      	beq.n	8008f00 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f1e:	f7fa fb5b 	bl	80035d8 <HAL_GetREVID>
 8008f22:	4603      	mov	r3, r0
 8008f24:	f241 0203 	movw	r2, #4099	; 0x1003
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d817      	bhi.n	8008f5c <HAL_RCC_OscConfig+0x3ec>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6a1b      	ldr	r3, [r3, #32]
 8008f30:	2b20      	cmp	r3, #32
 8008f32:	d108      	bne.n	8008f46 <HAL_RCC_OscConfig+0x3d6>
 8008f34:	4b4c      	ldr	r3, [pc, #304]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008f3c:	4a4a      	ldr	r2, [pc, #296]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008f3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f42:	6053      	str	r3, [r2, #4]
 8008f44:	e02e      	b.n	8008fa4 <HAL_RCC_OscConfig+0x434>
 8008f46:	4b48      	ldr	r3, [pc, #288]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6a1b      	ldr	r3, [r3, #32]
 8008f52:	069b      	lsls	r3, r3, #26
 8008f54:	4944      	ldr	r1, [pc, #272]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008f56:	4313      	orrs	r3, r2
 8008f58:	604b      	str	r3, [r1, #4]
 8008f5a:	e023      	b.n	8008fa4 <HAL_RCC_OscConfig+0x434>
 8008f5c:	4b42      	ldr	r3, [pc, #264]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a1b      	ldr	r3, [r3, #32]
 8008f68:	061b      	lsls	r3, r3, #24
 8008f6a:	493f      	ldr	r1, [pc, #252]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	60cb      	str	r3, [r1, #12]
 8008f70:	e018      	b.n	8008fa4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008f72:	4b3d      	ldr	r3, [pc, #244]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a3c      	ldr	r2, [pc, #240]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008f78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f7e:	f7fa fb1f 	bl	80035c0 <HAL_GetTick>
 8008f82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008f84:	e008      	b.n	8008f98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008f86:	f7fa fb1b 	bl	80035c0 <HAL_GetTick>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d901      	bls.n	8008f98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e23d      	b.n	8009414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008f98:	4b33      	ldr	r3, [pc, #204]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d1f0      	bne.n	8008f86 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 0308 	and.w	r3, r3, #8
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d036      	beq.n	800901e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	695b      	ldr	r3, [r3, #20]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d019      	beq.n	8008fec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008fb8:	4b2b      	ldr	r3, [pc, #172]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fbc:	4a2a      	ldr	r2, [pc, #168]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008fbe:	f043 0301 	orr.w	r3, r3, #1
 8008fc2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fc4:	f7fa fafc 	bl	80035c0 <HAL_GetTick>
 8008fc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008fca:	e008      	b.n	8008fde <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008fcc:	f7fa faf8 	bl	80035c0 <HAL_GetTick>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d901      	bls.n	8008fde <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e21a      	b.n	8009414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008fde:	4b22      	ldr	r3, [pc, #136]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fe2:	f003 0302 	and.w	r3, r3, #2
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d0f0      	beq.n	8008fcc <HAL_RCC_OscConfig+0x45c>
 8008fea:	e018      	b.n	800901e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008fec:	4b1e      	ldr	r3, [pc, #120]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ff0:	4a1d      	ldr	r2, [pc, #116]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8008ff2:	f023 0301 	bic.w	r3, r3, #1
 8008ff6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ff8:	f7fa fae2 	bl	80035c0 <HAL_GetTick>
 8008ffc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008ffe:	e008      	b.n	8009012 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009000:	f7fa fade 	bl	80035c0 <HAL_GetTick>
 8009004:	4602      	mov	r2, r0
 8009006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009008:	1ad3      	subs	r3, r2, r3
 800900a:	2b02      	cmp	r3, #2
 800900c:	d901      	bls.n	8009012 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800900e:	2303      	movs	r3, #3
 8009010:	e200      	b.n	8009414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009012:	4b15      	ldr	r3, [pc, #84]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8009014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009016:	f003 0302 	and.w	r3, r3, #2
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1f0      	bne.n	8009000 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 0320 	and.w	r3, r3, #32
 8009026:	2b00      	cmp	r3, #0
 8009028:	d039      	beq.n	800909e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	699b      	ldr	r3, [r3, #24]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d01c      	beq.n	800906c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009032:	4b0d      	ldr	r3, [pc, #52]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a0c      	ldr	r2, [pc, #48]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 8009038:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800903c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800903e:	f7fa fabf 	bl	80035c0 <HAL_GetTick>
 8009042:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009044:	e008      	b.n	8009058 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009046:	f7fa fabb 	bl	80035c0 <HAL_GetTick>
 800904a:	4602      	mov	r2, r0
 800904c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904e:	1ad3      	subs	r3, r2, r3
 8009050:	2b02      	cmp	r3, #2
 8009052:	d901      	bls.n	8009058 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009054:	2303      	movs	r3, #3
 8009056:	e1dd      	b.n	8009414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009058:	4b03      	ldr	r3, [pc, #12]	; (8009068 <HAL_RCC_OscConfig+0x4f8>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009060:	2b00      	cmp	r3, #0
 8009062:	d0f0      	beq.n	8009046 <HAL_RCC_OscConfig+0x4d6>
 8009064:	e01b      	b.n	800909e <HAL_RCC_OscConfig+0x52e>
 8009066:	bf00      	nop
 8009068:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800906c:	4b9b      	ldr	r3, [pc, #620]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a9a      	ldr	r2, [pc, #616]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 8009072:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009076:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009078:	f7fa faa2 	bl	80035c0 <HAL_GetTick>
 800907c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800907e:	e008      	b.n	8009092 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009080:	f7fa fa9e 	bl	80035c0 <HAL_GetTick>
 8009084:	4602      	mov	r2, r0
 8009086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	2b02      	cmp	r3, #2
 800908c:	d901      	bls.n	8009092 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800908e:	2303      	movs	r3, #3
 8009090:	e1c0      	b.n	8009414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009092:	4b92      	ldr	r3, [pc, #584]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1f0      	bne.n	8009080 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f003 0304 	and.w	r3, r3, #4
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f000 8081 	beq.w	80091ae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80090ac:	4b8c      	ldr	r3, [pc, #560]	; (80092e0 <HAL_RCC_OscConfig+0x770>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a8b      	ldr	r2, [pc, #556]	; (80092e0 <HAL_RCC_OscConfig+0x770>)
 80090b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80090b8:	f7fa fa82 	bl	80035c0 <HAL_GetTick>
 80090bc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090be:	e008      	b.n	80090d2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090c0:	f7fa fa7e 	bl	80035c0 <HAL_GetTick>
 80090c4:	4602      	mov	r2, r0
 80090c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	2b64      	cmp	r3, #100	; 0x64
 80090cc:	d901      	bls.n	80090d2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80090ce:	2303      	movs	r3, #3
 80090d0:	e1a0      	b.n	8009414 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090d2:	4b83      	ldr	r3, [pc, #524]	; (80092e0 <HAL_RCC_OscConfig+0x770>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d0f0      	beq.n	80090c0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d106      	bne.n	80090f4 <HAL_RCC_OscConfig+0x584>
 80090e6:	4b7d      	ldr	r3, [pc, #500]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 80090e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ea:	4a7c      	ldr	r2, [pc, #496]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 80090ec:	f043 0301 	orr.w	r3, r3, #1
 80090f0:	6713      	str	r3, [r2, #112]	; 0x70
 80090f2:	e02d      	b.n	8009150 <HAL_RCC_OscConfig+0x5e0>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d10c      	bne.n	8009116 <HAL_RCC_OscConfig+0x5a6>
 80090fc:	4b77      	ldr	r3, [pc, #476]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 80090fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009100:	4a76      	ldr	r2, [pc, #472]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 8009102:	f023 0301 	bic.w	r3, r3, #1
 8009106:	6713      	str	r3, [r2, #112]	; 0x70
 8009108:	4b74      	ldr	r3, [pc, #464]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 800910a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800910c:	4a73      	ldr	r2, [pc, #460]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 800910e:	f023 0304 	bic.w	r3, r3, #4
 8009112:	6713      	str	r3, [r2, #112]	; 0x70
 8009114:	e01c      	b.n	8009150 <HAL_RCC_OscConfig+0x5e0>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	2b05      	cmp	r3, #5
 800911c:	d10c      	bne.n	8009138 <HAL_RCC_OscConfig+0x5c8>
 800911e:	4b6f      	ldr	r3, [pc, #444]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 8009120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009122:	4a6e      	ldr	r2, [pc, #440]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 8009124:	f043 0304 	orr.w	r3, r3, #4
 8009128:	6713      	str	r3, [r2, #112]	; 0x70
 800912a:	4b6c      	ldr	r3, [pc, #432]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 800912c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800912e:	4a6b      	ldr	r2, [pc, #428]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 8009130:	f043 0301 	orr.w	r3, r3, #1
 8009134:	6713      	str	r3, [r2, #112]	; 0x70
 8009136:	e00b      	b.n	8009150 <HAL_RCC_OscConfig+0x5e0>
 8009138:	4b68      	ldr	r3, [pc, #416]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 800913a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800913c:	4a67      	ldr	r2, [pc, #412]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 800913e:	f023 0301 	bic.w	r3, r3, #1
 8009142:	6713      	str	r3, [r2, #112]	; 0x70
 8009144:	4b65      	ldr	r3, [pc, #404]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 8009146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009148:	4a64      	ldr	r2, [pc, #400]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 800914a:	f023 0304 	bic.w	r3, r3, #4
 800914e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d015      	beq.n	8009184 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009158:	f7fa fa32 	bl	80035c0 <HAL_GetTick>
 800915c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800915e:	e00a      	b.n	8009176 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009160:	f7fa fa2e 	bl	80035c0 <HAL_GetTick>
 8009164:	4602      	mov	r2, r0
 8009166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	f241 3288 	movw	r2, #5000	; 0x1388
 800916e:	4293      	cmp	r3, r2
 8009170:	d901      	bls.n	8009176 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009172:	2303      	movs	r3, #3
 8009174:	e14e      	b.n	8009414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009176:	4b59      	ldr	r3, [pc, #356]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 8009178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800917a:	f003 0302 	and.w	r3, r3, #2
 800917e:	2b00      	cmp	r3, #0
 8009180:	d0ee      	beq.n	8009160 <HAL_RCC_OscConfig+0x5f0>
 8009182:	e014      	b.n	80091ae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009184:	f7fa fa1c 	bl	80035c0 <HAL_GetTick>
 8009188:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800918a:	e00a      	b.n	80091a2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800918c:	f7fa fa18 	bl	80035c0 <HAL_GetTick>
 8009190:	4602      	mov	r2, r0
 8009192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009194:	1ad3      	subs	r3, r2, r3
 8009196:	f241 3288 	movw	r2, #5000	; 0x1388
 800919a:	4293      	cmp	r3, r2
 800919c:	d901      	bls.n	80091a2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800919e:	2303      	movs	r3, #3
 80091a0:	e138      	b.n	8009414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80091a2:	4b4e      	ldr	r3, [pc, #312]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 80091a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091a6:	f003 0302 	and.w	r3, r3, #2
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1ee      	bne.n	800918c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f000 812d 	beq.w	8009412 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80091b8:	4b48      	ldr	r3, [pc, #288]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091c0:	2b18      	cmp	r3, #24
 80091c2:	f000 80bd 	beq.w	8009340 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ca:	2b02      	cmp	r3, #2
 80091cc:	f040 809e 	bne.w	800930c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091d0:	4b42      	ldr	r3, [pc, #264]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a41      	ldr	r2, [pc, #260]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 80091d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091dc:	f7fa f9f0 	bl	80035c0 <HAL_GetTick>
 80091e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80091e2:	e008      	b.n	80091f6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091e4:	f7fa f9ec 	bl	80035c0 <HAL_GetTick>
 80091e8:	4602      	mov	r2, r0
 80091ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ec:	1ad3      	subs	r3, r2, r3
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d901      	bls.n	80091f6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80091f2:	2303      	movs	r3, #3
 80091f4:	e10e      	b.n	8009414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80091f6:	4b39      	ldr	r3, [pc, #228]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d1f0      	bne.n	80091e4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009202:	4b36      	ldr	r3, [pc, #216]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 8009204:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009206:	4b37      	ldr	r3, [pc, #220]	; (80092e4 <HAL_RCC_OscConfig+0x774>)
 8009208:	4013      	ands	r3, r2
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009212:	0112      	lsls	r2, r2, #4
 8009214:	430a      	orrs	r2, r1
 8009216:	4931      	ldr	r1, [pc, #196]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 8009218:	4313      	orrs	r3, r2
 800921a:	628b      	str	r3, [r1, #40]	; 0x28
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009220:	3b01      	subs	r3, #1
 8009222:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800922a:	3b01      	subs	r3, #1
 800922c:	025b      	lsls	r3, r3, #9
 800922e:	b29b      	uxth	r3, r3
 8009230:	431a      	orrs	r2, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009236:	3b01      	subs	r3, #1
 8009238:	041b      	lsls	r3, r3, #16
 800923a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800923e:	431a      	orrs	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009244:	3b01      	subs	r3, #1
 8009246:	061b      	lsls	r3, r3, #24
 8009248:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800924c:	4923      	ldr	r1, [pc, #140]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 800924e:	4313      	orrs	r3, r2
 8009250:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009252:	4b22      	ldr	r3, [pc, #136]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 8009254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009256:	4a21      	ldr	r2, [pc, #132]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 8009258:	f023 0301 	bic.w	r3, r3, #1
 800925c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800925e:	4b1f      	ldr	r3, [pc, #124]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 8009260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009262:	4b21      	ldr	r3, [pc, #132]	; (80092e8 <HAL_RCC_OscConfig+0x778>)
 8009264:	4013      	ands	r3, r2
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800926a:	00d2      	lsls	r2, r2, #3
 800926c:	491b      	ldr	r1, [pc, #108]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 800926e:	4313      	orrs	r3, r2
 8009270:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009272:	4b1a      	ldr	r3, [pc, #104]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 8009274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009276:	f023 020c 	bic.w	r2, r3, #12
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800927e:	4917      	ldr	r1, [pc, #92]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 8009280:	4313      	orrs	r3, r2
 8009282:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009284:	4b15      	ldr	r3, [pc, #84]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 8009286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009288:	f023 0202 	bic.w	r2, r3, #2
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009290:	4912      	ldr	r1, [pc, #72]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 8009292:	4313      	orrs	r3, r2
 8009294:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009296:	4b11      	ldr	r3, [pc, #68]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 8009298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800929a:	4a10      	ldr	r2, [pc, #64]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 800929c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092a2:	4b0e      	ldr	r3, [pc, #56]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 80092a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a6:	4a0d      	ldr	r2, [pc, #52]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 80092a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80092ae:	4b0b      	ldr	r3, [pc, #44]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 80092b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b2:	4a0a      	ldr	r2, [pc, #40]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 80092b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80092ba:	4b08      	ldr	r3, [pc, #32]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 80092bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092be:	4a07      	ldr	r2, [pc, #28]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 80092c0:	f043 0301 	orr.w	r3, r3, #1
 80092c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80092c6:	4b05      	ldr	r3, [pc, #20]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a04      	ldr	r2, [pc, #16]	; (80092dc <HAL_RCC_OscConfig+0x76c>)
 80092cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092d2:	f7fa f975 	bl	80035c0 <HAL_GetTick>
 80092d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80092d8:	e011      	b.n	80092fe <HAL_RCC_OscConfig+0x78e>
 80092da:	bf00      	nop
 80092dc:	58024400 	.word	0x58024400
 80092e0:	58024800 	.word	0x58024800
 80092e4:	fffffc0c 	.word	0xfffffc0c
 80092e8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092ec:	f7fa f968 	bl	80035c0 <HAL_GetTick>
 80092f0:	4602      	mov	r2, r0
 80092f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f4:	1ad3      	subs	r3, r2, r3
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	d901      	bls.n	80092fe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80092fa:	2303      	movs	r3, #3
 80092fc:	e08a      	b.n	8009414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80092fe:	4b47      	ldr	r3, [pc, #284]	; (800941c <HAL_RCC_OscConfig+0x8ac>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009306:	2b00      	cmp	r3, #0
 8009308:	d0f0      	beq.n	80092ec <HAL_RCC_OscConfig+0x77c>
 800930a:	e082      	b.n	8009412 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800930c:	4b43      	ldr	r3, [pc, #268]	; (800941c <HAL_RCC_OscConfig+0x8ac>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a42      	ldr	r2, [pc, #264]	; (800941c <HAL_RCC_OscConfig+0x8ac>)
 8009312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009318:	f7fa f952 	bl	80035c0 <HAL_GetTick>
 800931c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800931e:	e008      	b.n	8009332 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009320:	f7fa f94e 	bl	80035c0 <HAL_GetTick>
 8009324:	4602      	mov	r2, r0
 8009326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009328:	1ad3      	subs	r3, r2, r3
 800932a:	2b02      	cmp	r3, #2
 800932c:	d901      	bls.n	8009332 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800932e:	2303      	movs	r3, #3
 8009330:	e070      	b.n	8009414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009332:	4b3a      	ldr	r3, [pc, #232]	; (800941c <HAL_RCC_OscConfig+0x8ac>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1f0      	bne.n	8009320 <HAL_RCC_OscConfig+0x7b0>
 800933e:	e068      	b.n	8009412 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009340:	4b36      	ldr	r3, [pc, #216]	; (800941c <HAL_RCC_OscConfig+0x8ac>)
 8009342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009344:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009346:	4b35      	ldr	r3, [pc, #212]	; (800941c <HAL_RCC_OscConfig+0x8ac>)
 8009348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800934a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009350:	2b01      	cmp	r3, #1
 8009352:	d031      	beq.n	80093b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	f003 0203 	and.w	r2, r3, #3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800935e:	429a      	cmp	r2, r3
 8009360:	d12a      	bne.n	80093b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	091b      	lsrs	r3, r3, #4
 8009366:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800936e:	429a      	cmp	r2, r3
 8009370:	d122      	bne.n	80093b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800937c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800937e:	429a      	cmp	r2, r3
 8009380:	d11a      	bne.n	80093b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	0a5b      	lsrs	r3, r3, #9
 8009386:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800938e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009390:	429a      	cmp	r2, r3
 8009392:	d111      	bne.n	80093b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	0c1b      	lsrs	r3, r3, #16
 8009398:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d108      	bne.n	80093b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	0e1b      	lsrs	r3, r3, #24
 80093aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d001      	beq.n	80093bc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80093b8:	2301      	movs	r3, #1
 80093ba:	e02b      	b.n	8009414 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80093bc:	4b17      	ldr	r3, [pc, #92]	; (800941c <HAL_RCC_OscConfig+0x8ac>)
 80093be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c0:	08db      	lsrs	r3, r3, #3
 80093c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093cc:	693a      	ldr	r2, [r7, #16]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d01f      	beq.n	8009412 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80093d2:	4b12      	ldr	r3, [pc, #72]	; (800941c <HAL_RCC_OscConfig+0x8ac>)
 80093d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d6:	4a11      	ldr	r2, [pc, #68]	; (800941c <HAL_RCC_OscConfig+0x8ac>)
 80093d8:	f023 0301 	bic.w	r3, r3, #1
 80093dc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80093de:	f7fa f8ef 	bl	80035c0 <HAL_GetTick>
 80093e2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80093e4:	bf00      	nop
 80093e6:	f7fa f8eb 	bl	80035c0 <HAL_GetTick>
 80093ea:	4602      	mov	r2, r0
 80093ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d0f9      	beq.n	80093e6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80093f2:	4b0a      	ldr	r3, [pc, #40]	; (800941c <HAL_RCC_OscConfig+0x8ac>)
 80093f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093f6:	4b0a      	ldr	r3, [pc, #40]	; (8009420 <HAL_RCC_OscConfig+0x8b0>)
 80093f8:	4013      	ands	r3, r2
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80093fe:	00d2      	lsls	r2, r2, #3
 8009400:	4906      	ldr	r1, [pc, #24]	; (800941c <HAL_RCC_OscConfig+0x8ac>)
 8009402:	4313      	orrs	r3, r2
 8009404:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009406:	4b05      	ldr	r3, [pc, #20]	; (800941c <HAL_RCC_OscConfig+0x8ac>)
 8009408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940a:	4a04      	ldr	r2, [pc, #16]	; (800941c <HAL_RCC_OscConfig+0x8ac>)
 800940c:	f043 0301 	orr.w	r3, r3, #1
 8009410:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3730      	adds	r7, #48	; 0x30
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	58024400 	.word	0x58024400
 8009420:	ffff0007 	.word	0xffff0007

08009424 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d101      	bne.n	8009438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	e19c      	b.n	8009772 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009438:	4b8a      	ldr	r3, [pc, #552]	; (8009664 <HAL_RCC_ClockConfig+0x240>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f003 030f 	and.w	r3, r3, #15
 8009440:	683a      	ldr	r2, [r7, #0]
 8009442:	429a      	cmp	r2, r3
 8009444:	d910      	bls.n	8009468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009446:	4b87      	ldr	r3, [pc, #540]	; (8009664 <HAL_RCC_ClockConfig+0x240>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f023 020f 	bic.w	r2, r3, #15
 800944e:	4985      	ldr	r1, [pc, #532]	; (8009664 <HAL_RCC_ClockConfig+0x240>)
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	4313      	orrs	r3, r2
 8009454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009456:	4b83      	ldr	r3, [pc, #524]	; (8009664 <HAL_RCC_ClockConfig+0x240>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 030f 	and.w	r3, r3, #15
 800945e:	683a      	ldr	r2, [r7, #0]
 8009460:	429a      	cmp	r2, r3
 8009462:	d001      	beq.n	8009468 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	e184      	b.n	8009772 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f003 0304 	and.w	r3, r3, #4
 8009470:	2b00      	cmp	r3, #0
 8009472:	d010      	beq.n	8009496 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	691a      	ldr	r2, [r3, #16]
 8009478:	4b7b      	ldr	r3, [pc, #492]	; (8009668 <HAL_RCC_ClockConfig+0x244>)
 800947a:	699b      	ldr	r3, [r3, #24]
 800947c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009480:	429a      	cmp	r2, r3
 8009482:	d908      	bls.n	8009496 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009484:	4b78      	ldr	r3, [pc, #480]	; (8009668 <HAL_RCC_ClockConfig+0x244>)
 8009486:	699b      	ldr	r3, [r3, #24]
 8009488:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	691b      	ldr	r3, [r3, #16]
 8009490:	4975      	ldr	r1, [pc, #468]	; (8009668 <HAL_RCC_ClockConfig+0x244>)
 8009492:	4313      	orrs	r3, r2
 8009494:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f003 0308 	and.w	r3, r3, #8
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d010      	beq.n	80094c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	695a      	ldr	r2, [r3, #20]
 80094a6:	4b70      	ldr	r3, [pc, #448]	; (8009668 <HAL_RCC_ClockConfig+0x244>)
 80094a8:	69db      	ldr	r3, [r3, #28]
 80094aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d908      	bls.n	80094c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80094b2:	4b6d      	ldr	r3, [pc, #436]	; (8009668 <HAL_RCC_ClockConfig+0x244>)
 80094b4:	69db      	ldr	r3, [r3, #28]
 80094b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	695b      	ldr	r3, [r3, #20]
 80094be:	496a      	ldr	r1, [pc, #424]	; (8009668 <HAL_RCC_ClockConfig+0x244>)
 80094c0:	4313      	orrs	r3, r2
 80094c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 0310 	and.w	r3, r3, #16
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d010      	beq.n	80094f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	699a      	ldr	r2, [r3, #24]
 80094d4:	4b64      	ldr	r3, [pc, #400]	; (8009668 <HAL_RCC_ClockConfig+0x244>)
 80094d6:	69db      	ldr	r3, [r3, #28]
 80094d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094dc:	429a      	cmp	r2, r3
 80094de:	d908      	bls.n	80094f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80094e0:	4b61      	ldr	r3, [pc, #388]	; (8009668 <HAL_RCC_ClockConfig+0x244>)
 80094e2:	69db      	ldr	r3, [r3, #28]
 80094e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	495e      	ldr	r1, [pc, #376]	; (8009668 <HAL_RCC_ClockConfig+0x244>)
 80094ee:	4313      	orrs	r3, r2
 80094f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f003 0320 	and.w	r3, r3, #32
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d010      	beq.n	8009520 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	69da      	ldr	r2, [r3, #28]
 8009502:	4b59      	ldr	r3, [pc, #356]	; (8009668 <HAL_RCC_ClockConfig+0x244>)
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800950a:	429a      	cmp	r2, r3
 800950c:	d908      	bls.n	8009520 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800950e:	4b56      	ldr	r3, [pc, #344]	; (8009668 <HAL_RCC_ClockConfig+0x244>)
 8009510:	6a1b      	ldr	r3, [r3, #32]
 8009512:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	69db      	ldr	r3, [r3, #28]
 800951a:	4953      	ldr	r1, [pc, #332]	; (8009668 <HAL_RCC_ClockConfig+0x244>)
 800951c:	4313      	orrs	r3, r2
 800951e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 0302 	and.w	r3, r3, #2
 8009528:	2b00      	cmp	r3, #0
 800952a:	d010      	beq.n	800954e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	68da      	ldr	r2, [r3, #12]
 8009530:	4b4d      	ldr	r3, [pc, #308]	; (8009668 <HAL_RCC_ClockConfig+0x244>)
 8009532:	699b      	ldr	r3, [r3, #24]
 8009534:	f003 030f 	and.w	r3, r3, #15
 8009538:	429a      	cmp	r2, r3
 800953a:	d908      	bls.n	800954e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800953c:	4b4a      	ldr	r3, [pc, #296]	; (8009668 <HAL_RCC_ClockConfig+0x244>)
 800953e:	699b      	ldr	r3, [r3, #24]
 8009540:	f023 020f 	bic.w	r2, r3, #15
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	4947      	ldr	r1, [pc, #284]	; (8009668 <HAL_RCC_ClockConfig+0x244>)
 800954a:	4313      	orrs	r3, r2
 800954c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f003 0301 	and.w	r3, r3, #1
 8009556:	2b00      	cmp	r3, #0
 8009558:	d055      	beq.n	8009606 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800955a:	4b43      	ldr	r3, [pc, #268]	; (8009668 <HAL_RCC_ClockConfig+0x244>)
 800955c:	699b      	ldr	r3, [r3, #24]
 800955e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	4940      	ldr	r1, [pc, #256]	; (8009668 <HAL_RCC_ClockConfig+0x244>)
 8009568:	4313      	orrs	r3, r2
 800956a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	2b02      	cmp	r3, #2
 8009572:	d107      	bne.n	8009584 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009574:	4b3c      	ldr	r3, [pc, #240]	; (8009668 <HAL_RCC_ClockConfig+0x244>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800957c:	2b00      	cmp	r3, #0
 800957e:	d121      	bne.n	80095c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e0f6      	b.n	8009772 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	2b03      	cmp	r3, #3
 800958a:	d107      	bne.n	800959c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800958c:	4b36      	ldr	r3, [pc, #216]	; (8009668 <HAL_RCC_ClockConfig+0x244>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009594:	2b00      	cmp	r3, #0
 8009596:	d115      	bne.n	80095c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	e0ea      	b.n	8009772 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d107      	bne.n	80095b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80095a4:	4b30      	ldr	r3, [pc, #192]	; (8009668 <HAL_RCC_ClockConfig+0x244>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d109      	bne.n	80095c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80095b0:	2301      	movs	r3, #1
 80095b2:	e0de      	b.n	8009772 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80095b4:	4b2c      	ldr	r3, [pc, #176]	; (8009668 <HAL_RCC_ClockConfig+0x244>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f003 0304 	and.w	r3, r3, #4
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d101      	bne.n	80095c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	e0d6      	b.n	8009772 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80095c4:	4b28      	ldr	r3, [pc, #160]	; (8009668 <HAL_RCC_ClockConfig+0x244>)
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	f023 0207 	bic.w	r2, r3, #7
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	4925      	ldr	r1, [pc, #148]	; (8009668 <HAL_RCC_ClockConfig+0x244>)
 80095d2:	4313      	orrs	r3, r2
 80095d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095d6:	f7f9 fff3 	bl	80035c0 <HAL_GetTick>
 80095da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095dc:	e00a      	b.n	80095f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095de:	f7f9 ffef 	bl	80035c0 <HAL_GetTick>
 80095e2:	4602      	mov	r2, r0
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d901      	bls.n	80095f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80095f0:	2303      	movs	r3, #3
 80095f2:	e0be      	b.n	8009772 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095f4:	4b1c      	ldr	r3, [pc, #112]	; (8009668 <HAL_RCC_ClockConfig+0x244>)
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	00db      	lsls	r3, r3, #3
 8009602:	429a      	cmp	r2, r3
 8009604:	d1eb      	bne.n	80095de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f003 0302 	and.w	r3, r3, #2
 800960e:	2b00      	cmp	r3, #0
 8009610:	d010      	beq.n	8009634 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	68da      	ldr	r2, [r3, #12]
 8009616:	4b14      	ldr	r3, [pc, #80]	; (8009668 <HAL_RCC_ClockConfig+0x244>)
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	f003 030f 	and.w	r3, r3, #15
 800961e:	429a      	cmp	r2, r3
 8009620:	d208      	bcs.n	8009634 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009622:	4b11      	ldr	r3, [pc, #68]	; (8009668 <HAL_RCC_ClockConfig+0x244>)
 8009624:	699b      	ldr	r3, [r3, #24]
 8009626:	f023 020f 	bic.w	r2, r3, #15
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	490e      	ldr	r1, [pc, #56]	; (8009668 <HAL_RCC_ClockConfig+0x244>)
 8009630:	4313      	orrs	r3, r2
 8009632:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009634:	4b0b      	ldr	r3, [pc, #44]	; (8009664 <HAL_RCC_ClockConfig+0x240>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f003 030f 	and.w	r3, r3, #15
 800963c:	683a      	ldr	r2, [r7, #0]
 800963e:	429a      	cmp	r2, r3
 8009640:	d214      	bcs.n	800966c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009642:	4b08      	ldr	r3, [pc, #32]	; (8009664 <HAL_RCC_ClockConfig+0x240>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f023 020f 	bic.w	r2, r3, #15
 800964a:	4906      	ldr	r1, [pc, #24]	; (8009664 <HAL_RCC_ClockConfig+0x240>)
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	4313      	orrs	r3, r2
 8009650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009652:	4b04      	ldr	r3, [pc, #16]	; (8009664 <HAL_RCC_ClockConfig+0x240>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f003 030f 	and.w	r3, r3, #15
 800965a:	683a      	ldr	r2, [r7, #0]
 800965c:	429a      	cmp	r2, r3
 800965e:	d005      	beq.n	800966c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009660:	2301      	movs	r3, #1
 8009662:	e086      	b.n	8009772 <HAL_RCC_ClockConfig+0x34e>
 8009664:	52002000 	.word	0x52002000
 8009668:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 0304 	and.w	r3, r3, #4
 8009674:	2b00      	cmp	r3, #0
 8009676:	d010      	beq.n	800969a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	691a      	ldr	r2, [r3, #16]
 800967c:	4b3f      	ldr	r3, [pc, #252]	; (800977c <HAL_RCC_ClockConfig+0x358>)
 800967e:	699b      	ldr	r3, [r3, #24]
 8009680:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009684:	429a      	cmp	r2, r3
 8009686:	d208      	bcs.n	800969a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009688:	4b3c      	ldr	r3, [pc, #240]	; (800977c <HAL_RCC_ClockConfig+0x358>)
 800968a:	699b      	ldr	r3, [r3, #24]
 800968c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	4939      	ldr	r1, [pc, #228]	; (800977c <HAL_RCC_ClockConfig+0x358>)
 8009696:	4313      	orrs	r3, r2
 8009698:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f003 0308 	and.w	r3, r3, #8
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d010      	beq.n	80096c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	695a      	ldr	r2, [r3, #20]
 80096aa:	4b34      	ldr	r3, [pc, #208]	; (800977c <HAL_RCC_ClockConfig+0x358>)
 80096ac:	69db      	ldr	r3, [r3, #28]
 80096ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d208      	bcs.n	80096c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80096b6:	4b31      	ldr	r3, [pc, #196]	; (800977c <HAL_RCC_ClockConfig+0x358>)
 80096b8:	69db      	ldr	r3, [r3, #28]
 80096ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	695b      	ldr	r3, [r3, #20]
 80096c2:	492e      	ldr	r1, [pc, #184]	; (800977c <HAL_RCC_ClockConfig+0x358>)
 80096c4:	4313      	orrs	r3, r2
 80096c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f003 0310 	and.w	r3, r3, #16
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d010      	beq.n	80096f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	699a      	ldr	r2, [r3, #24]
 80096d8:	4b28      	ldr	r3, [pc, #160]	; (800977c <HAL_RCC_ClockConfig+0x358>)
 80096da:	69db      	ldr	r3, [r3, #28]
 80096dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d208      	bcs.n	80096f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80096e4:	4b25      	ldr	r3, [pc, #148]	; (800977c <HAL_RCC_ClockConfig+0x358>)
 80096e6:	69db      	ldr	r3, [r3, #28]
 80096e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	699b      	ldr	r3, [r3, #24]
 80096f0:	4922      	ldr	r1, [pc, #136]	; (800977c <HAL_RCC_ClockConfig+0x358>)
 80096f2:	4313      	orrs	r3, r2
 80096f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f003 0320 	and.w	r3, r3, #32
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d010      	beq.n	8009724 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	69da      	ldr	r2, [r3, #28]
 8009706:	4b1d      	ldr	r3, [pc, #116]	; (800977c <HAL_RCC_ClockConfig+0x358>)
 8009708:	6a1b      	ldr	r3, [r3, #32]
 800970a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800970e:	429a      	cmp	r2, r3
 8009710:	d208      	bcs.n	8009724 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009712:	4b1a      	ldr	r3, [pc, #104]	; (800977c <HAL_RCC_ClockConfig+0x358>)
 8009714:	6a1b      	ldr	r3, [r3, #32]
 8009716:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	69db      	ldr	r3, [r3, #28]
 800971e:	4917      	ldr	r1, [pc, #92]	; (800977c <HAL_RCC_ClockConfig+0x358>)
 8009720:	4313      	orrs	r3, r2
 8009722:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009724:	f000 f834 	bl	8009790 <HAL_RCC_GetSysClockFreq>
 8009728:	4602      	mov	r2, r0
 800972a:	4b14      	ldr	r3, [pc, #80]	; (800977c <HAL_RCC_ClockConfig+0x358>)
 800972c:	699b      	ldr	r3, [r3, #24]
 800972e:	0a1b      	lsrs	r3, r3, #8
 8009730:	f003 030f 	and.w	r3, r3, #15
 8009734:	4912      	ldr	r1, [pc, #72]	; (8009780 <HAL_RCC_ClockConfig+0x35c>)
 8009736:	5ccb      	ldrb	r3, [r1, r3]
 8009738:	f003 031f 	and.w	r3, r3, #31
 800973c:	fa22 f303 	lsr.w	r3, r2, r3
 8009740:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009742:	4b0e      	ldr	r3, [pc, #56]	; (800977c <HAL_RCC_ClockConfig+0x358>)
 8009744:	699b      	ldr	r3, [r3, #24]
 8009746:	f003 030f 	and.w	r3, r3, #15
 800974a:	4a0d      	ldr	r2, [pc, #52]	; (8009780 <HAL_RCC_ClockConfig+0x35c>)
 800974c:	5cd3      	ldrb	r3, [r2, r3]
 800974e:	f003 031f 	and.w	r3, r3, #31
 8009752:	693a      	ldr	r2, [r7, #16]
 8009754:	fa22 f303 	lsr.w	r3, r2, r3
 8009758:	4a0a      	ldr	r2, [pc, #40]	; (8009784 <HAL_RCC_ClockConfig+0x360>)
 800975a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800975c:	4a0a      	ldr	r2, [pc, #40]	; (8009788 <HAL_RCC_ClockConfig+0x364>)
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009762:	4b0a      	ldr	r3, [pc, #40]	; (800978c <HAL_RCC_ClockConfig+0x368>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4618      	mov	r0, r3
 8009768:	f7f9 fc62 	bl	8003030 <HAL_InitTick>
 800976c:	4603      	mov	r3, r0
 800976e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009770:	7bfb      	ldrb	r3, [r7, #15]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3718      	adds	r7, #24
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	58024400 	.word	0x58024400
 8009780:	0801552c 	.word	0x0801552c
 8009784:	2400008c 	.word	0x2400008c
 8009788:	24000088 	.word	0x24000088
 800978c:	24000090 	.word	0x24000090

08009790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009790:	b480      	push	{r7}
 8009792:	b089      	sub	sp, #36	; 0x24
 8009794:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009796:	4bb3      	ldr	r3, [pc, #716]	; (8009a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800979e:	2b18      	cmp	r3, #24
 80097a0:	f200 8155 	bhi.w	8009a4e <HAL_RCC_GetSysClockFreq+0x2be>
 80097a4:	a201      	add	r2, pc, #4	; (adr r2, 80097ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80097a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097aa:	bf00      	nop
 80097ac:	08009811 	.word	0x08009811
 80097b0:	08009a4f 	.word	0x08009a4f
 80097b4:	08009a4f 	.word	0x08009a4f
 80097b8:	08009a4f 	.word	0x08009a4f
 80097bc:	08009a4f 	.word	0x08009a4f
 80097c0:	08009a4f 	.word	0x08009a4f
 80097c4:	08009a4f 	.word	0x08009a4f
 80097c8:	08009a4f 	.word	0x08009a4f
 80097cc:	08009837 	.word	0x08009837
 80097d0:	08009a4f 	.word	0x08009a4f
 80097d4:	08009a4f 	.word	0x08009a4f
 80097d8:	08009a4f 	.word	0x08009a4f
 80097dc:	08009a4f 	.word	0x08009a4f
 80097e0:	08009a4f 	.word	0x08009a4f
 80097e4:	08009a4f 	.word	0x08009a4f
 80097e8:	08009a4f 	.word	0x08009a4f
 80097ec:	0800983d 	.word	0x0800983d
 80097f0:	08009a4f 	.word	0x08009a4f
 80097f4:	08009a4f 	.word	0x08009a4f
 80097f8:	08009a4f 	.word	0x08009a4f
 80097fc:	08009a4f 	.word	0x08009a4f
 8009800:	08009a4f 	.word	0x08009a4f
 8009804:	08009a4f 	.word	0x08009a4f
 8009808:	08009a4f 	.word	0x08009a4f
 800980c:	08009843 	.word	0x08009843
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009810:	4b94      	ldr	r3, [pc, #592]	; (8009a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 0320 	and.w	r3, r3, #32
 8009818:	2b00      	cmp	r3, #0
 800981a:	d009      	beq.n	8009830 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800981c:	4b91      	ldr	r3, [pc, #580]	; (8009a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	08db      	lsrs	r3, r3, #3
 8009822:	f003 0303 	and.w	r3, r3, #3
 8009826:	4a90      	ldr	r2, [pc, #576]	; (8009a68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009828:	fa22 f303 	lsr.w	r3, r2, r3
 800982c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800982e:	e111      	b.n	8009a54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009830:	4b8d      	ldr	r3, [pc, #564]	; (8009a68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009832:	61bb      	str	r3, [r7, #24]
      break;
 8009834:	e10e      	b.n	8009a54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009836:	4b8d      	ldr	r3, [pc, #564]	; (8009a6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009838:	61bb      	str	r3, [r7, #24]
      break;
 800983a:	e10b      	b.n	8009a54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800983c:	4b8c      	ldr	r3, [pc, #560]	; (8009a70 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800983e:	61bb      	str	r3, [r7, #24]
      break;
 8009840:	e108      	b.n	8009a54 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009842:	4b88      	ldr	r3, [pc, #544]	; (8009a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009846:	f003 0303 	and.w	r3, r3, #3
 800984a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800984c:	4b85      	ldr	r3, [pc, #532]	; (8009a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800984e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009850:	091b      	lsrs	r3, r3, #4
 8009852:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009856:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009858:	4b82      	ldr	r3, [pc, #520]	; (8009a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800985a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985c:	f003 0301 	and.w	r3, r3, #1
 8009860:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009862:	4b80      	ldr	r3, [pc, #512]	; (8009a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009866:	08db      	lsrs	r3, r3, #3
 8009868:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	fb02 f303 	mul.w	r3, r2, r3
 8009872:	ee07 3a90 	vmov	s15, r3
 8009876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800987a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	2b00      	cmp	r3, #0
 8009882:	f000 80e1 	beq.w	8009a48 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	2b02      	cmp	r3, #2
 800988a:	f000 8083 	beq.w	8009994 <HAL_RCC_GetSysClockFreq+0x204>
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	2b02      	cmp	r3, #2
 8009892:	f200 80a1 	bhi.w	80099d8 <HAL_RCC_GetSysClockFreq+0x248>
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d003      	beq.n	80098a4 <HAL_RCC_GetSysClockFreq+0x114>
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d056      	beq.n	8009950 <HAL_RCC_GetSysClockFreq+0x1c0>
 80098a2:	e099      	b.n	80099d8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098a4:	4b6f      	ldr	r3, [pc, #444]	; (8009a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f003 0320 	and.w	r3, r3, #32
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d02d      	beq.n	800990c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098b0:	4b6c      	ldr	r3, [pc, #432]	; (8009a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	08db      	lsrs	r3, r3, #3
 80098b6:	f003 0303 	and.w	r3, r3, #3
 80098ba:	4a6b      	ldr	r2, [pc, #428]	; (8009a68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80098bc:	fa22 f303 	lsr.w	r3, r2, r3
 80098c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	ee07 3a90 	vmov	s15, r3
 80098c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	ee07 3a90 	vmov	s15, r3
 80098d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098da:	4b62      	ldr	r3, [pc, #392]	; (8009a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098e2:	ee07 3a90 	vmov	s15, r3
 80098e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80098ee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 80098f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009906:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800990a:	e087      	b.n	8009a1c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	ee07 3a90 	vmov	s15, r3
 8009912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009916:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009a78 <HAL_RCC_GetSysClockFreq+0x2e8>
 800991a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800991e:	4b51      	ldr	r3, [pc, #324]	; (8009a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009926:	ee07 3a90 	vmov	s15, r3
 800992a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800992e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009932:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800993a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800993e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800994a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800994e:	e065      	b.n	8009a1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	ee07 3a90 	vmov	s15, r3
 8009956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800995a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009a7c <HAL_RCC_GetSysClockFreq+0x2ec>
 800995e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009962:	4b40      	ldr	r3, [pc, #256]	; (8009a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800996a:	ee07 3a90 	vmov	s15, r3
 800996e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009972:	ed97 6a02 	vldr	s12, [r7, #8]
 8009976:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 800997a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800997e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800998a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800998e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009992:	e043      	b.n	8009a1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	ee07 3a90 	vmov	s15, r3
 800999a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800999e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009a80 <HAL_RCC_GetSysClockFreq+0x2f0>
 80099a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099a6:	4b2f      	ldr	r3, [pc, #188]	; (8009a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ae:	ee07 3a90 	vmov	s15, r3
 80099b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80099ba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 80099be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80099d6:	e021      	b.n	8009a1c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	ee07 3a90 	vmov	s15, r3
 80099de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009a7c <HAL_RCC_GetSysClockFreq+0x2ec>
 80099e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ea:	4b1e      	ldr	r3, [pc, #120]	; (8009a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099f2:	ee07 3a90 	vmov	s15, r3
 80099f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80099fe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a1a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009a1c:	4b11      	ldr	r3, [pc, #68]	; (8009a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a20:	0a5b      	lsrs	r3, r3, #9
 8009a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a26:	3301      	adds	r3, #1
 8009a28:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	ee07 3a90 	vmov	s15, r3
 8009a30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009a34:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a40:	ee17 3a90 	vmov	r3, s15
 8009a44:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009a46:	e005      	b.n	8009a54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	61bb      	str	r3, [r7, #24]
      break;
 8009a4c:	e002      	b.n	8009a54 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009a4e:	4b07      	ldr	r3, [pc, #28]	; (8009a6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009a50:	61bb      	str	r3, [r7, #24]
      break;
 8009a52:	bf00      	nop
  }

  return sysclockfreq;
 8009a54:	69bb      	ldr	r3, [r7, #24]
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3724      	adds	r7, #36	; 0x24
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	58024400 	.word	0x58024400
 8009a68:	03d09000 	.word	0x03d09000
 8009a6c:	003d0900 	.word	0x003d0900
 8009a70:	017d7840 	.word	0x017d7840
 8009a74:	46000000 	.word	0x46000000
 8009a78:	4c742400 	.word	0x4c742400
 8009a7c:	4a742400 	.word	0x4a742400
 8009a80:	4bbebc20 	.word	0x4bbebc20

08009a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009a8a:	f7ff fe81 	bl	8009790 <HAL_RCC_GetSysClockFreq>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	4b10      	ldr	r3, [pc, #64]	; (8009ad4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009a92:	699b      	ldr	r3, [r3, #24]
 8009a94:	0a1b      	lsrs	r3, r3, #8
 8009a96:	f003 030f 	and.w	r3, r3, #15
 8009a9a:	490f      	ldr	r1, [pc, #60]	; (8009ad8 <HAL_RCC_GetHCLKFreq+0x54>)
 8009a9c:	5ccb      	ldrb	r3, [r1, r3]
 8009a9e:	f003 031f 	and.w	r3, r3, #31
 8009aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009aa8:	4b0a      	ldr	r3, [pc, #40]	; (8009ad4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009aaa:	699b      	ldr	r3, [r3, #24]
 8009aac:	f003 030f 	and.w	r3, r3, #15
 8009ab0:	4a09      	ldr	r2, [pc, #36]	; (8009ad8 <HAL_RCC_GetHCLKFreq+0x54>)
 8009ab2:	5cd3      	ldrb	r3, [r2, r3]
 8009ab4:	f003 031f 	and.w	r3, r3, #31
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	fa22 f303 	lsr.w	r3, r2, r3
 8009abe:	4a07      	ldr	r2, [pc, #28]	; (8009adc <HAL_RCC_GetHCLKFreq+0x58>)
 8009ac0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009ac2:	4a07      	ldr	r2, [pc, #28]	; (8009ae0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009ac8:	4b04      	ldr	r3, [pc, #16]	; (8009adc <HAL_RCC_GetHCLKFreq+0x58>)
 8009aca:	681b      	ldr	r3, [r3, #0]
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	58024400 	.word	0x58024400
 8009ad8:	0801552c 	.word	0x0801552c
 8009adc:	2400008c 	.word	0x2400008c
 8009ae0:	24000088 	.word	0x24000088

08009ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009ae8:	f7ff ffcc 	bl	8009a84 <HAL_RCC_GetHCLKFreq>
 8009aec:	4602      	mov	r2, r0
 8009aee:	4b06      	ldr	r3, [pc, #24]	; (8009b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009af0:	69db      	ldr	r3, [r3, #28]
 8009af2:	091b      	lsrs	r3, r3, #4
 8009af4:	f003 0307 	and.w	r3, r3, #7
 8009af8:	4904      	ldr	r1, [pc, #16]	; (8009b0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8009afa:	5ccb      	ldrb	r3, [r1, r3]
 8009afc:	f003 031f 	and.w	r3, r3, #31
 8009b00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	58024400 	.word	0x58024400
 8009b0c:	0801552c 	.word	0x0801552c

08009b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009b14:	f7ff ffb6 	bl	8009a84 <HAL_RCC_GetHCLKFreq>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	4b06      	ldr	r3, [pc, #24]	; (8009b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009b1c:	69db      	ldr	r3, [r3, #28]
 8009b1e:	0a1b      	lsrs	r3, r3, #8
 8009b20:	f003 0307 	and.w	r3, r3, #7
 8009b24:	4904      	ldr	r1, [pc, #16]	; (8009b38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009b26:	5ccb      	ldrb	r3, [r1, r3]
 8009b28:	f003 031f 	and.w	r3, r3, #31
 8009b2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	58024400 	.word	0x58024400
 8009b38:	0801552c 	.word	0x0801552c

08009b3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	223f      	movs	r2, #63	; 0x3f
 8009b4a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009b4c:	4b1a      	ldr	r3, [pc, #104]	; (8009bb8 <HAL_RCC_GetClockConfig+0x7c>)
 8009b4e:	691b      	ldr	r3, [r3, #16]
 8009b50:	f003 0207 	and.w	r2, r3, #7
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009b58:	4b17      	ldr	r3, [pc, #92]	; (8009bb8 <HAL_RCC_GetClockConfig+0x7c>)
 8009b5a:	699b      	ldr	r3, [r3, #24]
 8009b5c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009b64:	4b14      	ldr	r3, [pc, #80]	; (8009bb8 <HAL_RCC_GetClockConfig+0x7c>)
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	f003 020f 	and.w	r2, r3, #15
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009b70:	4b11      	ldr	r3, [pc, #68]	; (8009bb8 <HAL_RCC_GetClockConfig+0x7c>)
 8009b72:	699b      	ldr	r3, [r3, #24]
 8009b74:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009b7c:	4b0e      	ldr	r3, [pc, #56]	; (8009bb8 <HAL_RCC_GetClockConfig+0x7c>)
 8009b7e:	69db      	ldr	r3, [r3, #28]
 8009b80:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009b88:	4b0b      	ldr	r3, [pc, #44]	; (8009bb8 <HAL_RCC_GetClockConfig+0x7c>)
 8009b8a:	69db      	ldr	r3, [r3, #28]
 8009b8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009b94:	4b08      	ldr	r3, [pc, #32]	; (8009bb8 <HAL_RCC_GetClockConfig+0x7c>)
 8009b96:	6a1b      	ldr	r3, [r3, #32]
 8009b98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009ba0:	4b06      	ldr	r3, [pc, #24]	; (8009bbc <HAL_RCC_GetClockConfig+0x80>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f003 020f 	and.w	r2, r3, #15
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	601a      	str	r2, [r3, #0]
}
 8009bac:	bf00      	nop
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr
 8009bb8:	58024400 	.word	0x58024400
 8009bbc:	52002000 	.word	0x52002000

08009bc0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bc4:	b0ca      	sub	sp, #296	; 0x128
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009be4:	2500      	movs	r5, #0
 8009be6:	ea54 0305 	orrs.w	r3, r4, r5
 8009bea:	d049      	beq.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bf2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009bf6:	d02f      	beq.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009bf8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009bfc:	d828      	bhi.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009bfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c02:	d01a      	beq.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009c04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c08:	d822      	bhi.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d003      	beq.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c12:	d007      	beq.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009c14:	e01c      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c16:	4bb8      	ldr	r3, [pc, #736]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1a:	4ab7      	ldr	r2, [pc, #732]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009c22:	e01a      	b.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c28:	3308      	adds	r3, #8
 8009c2a:	2102      	movs	r1, #2
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f002 fb61 	bl	800c2f4 <RCCEx_PLL2_Config>
 8009c32:	4603      	mov	r3, r0
 8009c34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009c38:	e00f      	b.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c3e:	3328      	adds	r3, #40	; 0x28
 8009c40:	2102      	movs	r1, #2
 8009c42:	4618      	mov	r0, r3
 8009c44:	f002 fc08 	bl	800c458 <RCCEx_PLL3_Config>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009c4e:	e004      	b.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c56:	e000      	b.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009c58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d10a      	bne.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009c62:	4ba5      	ldr	r3, [pc, #660]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c66:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c70:	4aa1      	ldr	r2, [pc, #644]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c72:	430b      	orrs	r3, r1
 8009c74:	6513      	str	r3, [r2, #80]	; 0x50
 8009c76:	e003      	b.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c88:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009c8c:	f04f 0900 	mov.w	r9, #0
 8009c90:	ea58 0309 	orrs.w	r3, r8, r9
 8009c94:	d047      	beq.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c9c:	2b04      	cmp	r3, #4
 8009c9e:	d82a      	bhi.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009ca0:	a201      	add	r2, pc, #4	; (adr r2, 8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca6:	bf00      	nop
 8009ca8:	08009cbd 	.word	0x08009cbd
 8009cac:	08009ccb 	.word	0x08009ccb
 8009cb0:	08009ce1 	.word	0x08009ce1
 8009cb4:	08009cff 	.word	0x08009cff
 8009cb8:	08009cff 	.word	0x08009cff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cbc:	4b8e      	ldr	r3, [pc, #568]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc0:	4a8d      	ldr	r2, [pc, #564]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009cc8:	e01a      	b.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cce:	3308      	adds	r3, #8
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f002 fb0e 	bl	800c2f4 <RCCEx_PLL2_Config>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009cde:	e00f      	b.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ce4:	3328      	adds	r3, #40	; 0x28
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f002 fbb5 	bl	800c458 <RCCEx_PLL3_Config>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009cf4:	e004      	b.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009cfc:	e000      	b.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009cfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d10a      	bne.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009d08:	4b7b      	ldr	r3, [pc, #492]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d0c:	f023 0107 	bic.w	r1, r3, #7
 8009d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d16:	4a78      	ldr	r2, [pc, #480]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d18:	430b      	orrs	r3, r1
 8009d1a:	6513      	str	r3, [r2, #80]	; 0x50
 8009d1c:	e003      	b.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009d32:	f04f 0b00 	mov.w	fp, #0
 8009d36:	ea5a 030b 	orrs.w	r3, sl, fp
 8009d3a:	d04c      	beq.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d46:	d030      	beq.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d4c:	d829      	bhi.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009d4e:	2bc0      	cmp	r3, #192	; 0xc0
 8009d50:	d02d      	beq.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009d52:	2bc0      	cmp	r3, #192	; 0xc0
 8009d54:	d825      	bhi.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009d56:	2b80      	cmp	r3, #128	; 0x80
 8009d58:	d018      	beq.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009d5a:	2b80      	cmp	r3, #128	; 0x80
 8009d5c:	d821      	bhi.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d002      	beq.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009d62:	2b40      	cmp	r3, #64	; 0x40
 8009d64:	d007      	beq.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009d66:	e01c      	b.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d68:	4b63      	ldr	r3, [pc, #396]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d6c:	4a62      	ldr	r2, [pc, #392]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009d74:	e01c      	b.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d7a:	3308      	adds	r3, #8
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f002 fab8 	bl	800c2f4 <RCCEx_PLL2_Config>
 8009d84:	4603      	mov	r3, r0
 8009d86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009d8a:	e011      	b.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d90:	3328      	adds	r3, #40	; 0x28
 8009d92:	2100      	movs	r1, #0
 8009d94:	4618      	mov	r0, r3
 8009d96:	f002 fb5f 	bl	800c458 <RCCEx_PLL3_Config>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009da0:	e006      	b.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009da8:	e002      	b.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009daa:	bf00      	nop
 8009dac:	e000      	b.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009dae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009db0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d10a      	bne.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009db8:	4b4f      	ldr	r3, [pc, #316]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dbc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dc6:	4a4c      	ldr	r2, [pc, #304]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009dc8:	430b      	orrs	r3, r1
 8009dca:	6513      	str	r3, [r2, #80]	; 0x50
 8009dcc:	e003      	b.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dde:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009de2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009de6:	2300      	movs	r3, #0
 8009de8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009dec:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009df0:	460b      	mov	r3, r1
 8009df2:	4313      	orrs	r3, r2
 8009df4:	d053      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009dfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e02:	d035      	beq.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009e04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e08:	d82e      	bhi.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009e0a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009e0e:	d031      	beq.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009e10:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009e14:	d828      	bhi.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009e16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e1a:	d01a      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009e1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e20:	d822      	bhi.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d003      	beq.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009e26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e2a:	d007      	beq.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009e2c:	e01c      	b.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e2e:	4b32      	ldr	r3, [pc, #200]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e32:	4a31      	ldr	r2, [pc, #196]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e3a:	e01c      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e40:	3308      	adds	r3, #8
 8009e42:	2100      	movs	r1, #0
 8009e44:	4618      	mov	r0, r3
 8009e46:	f002 fa55 	bl	800c2f4 <RCCEx_PLL2_Config>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009e50:	e011      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e56:	3328      	adds	r3, #40	; 0x28
 8009e58:	2100      	movs	r1, #0
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f002 fafc 	bl	800c458 <RCCEx_PLL3_Config>
 8009e60:	4603      	mov	r3, r0
 8009e62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e66:	e006      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e6e:	e002      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009e70:	bf00      	nop
 8009e72:	e000      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d10b      	bne.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009e7e:	4b1e      	ldr	r3, [pc, #120]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e82:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009e8e:	4a1a      	ldr	r2, [pc, #104]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e90:	430b      	orrs	r3, r1
 8009e92:	6593      	str	r3, [r2, #88]	; 0x58
 8009e94:	e003      	b.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009eaa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009eae:	2300      	movs	r3, #0
 8009eb0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009eb4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009eb8:	460b      	mov	r3, r1
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	d056      	beq.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ec2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009ec6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009eca:	d038      	beq.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009ecc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009ed0:	d831      	bhi.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009ed2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009ed6:	d034      	beq.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009ed8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009edc:	d82b      	bhi.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009ede:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ee2:	d01d      	beq.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009ee4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ee8:	d825      	bhi.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d006      	beq.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009eee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009ef2:	d00a      	beq.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009ef4:	e01f      	b.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009ef6:	bf00      	nop
 8009ef8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009efc:	4ba2      	ldr	r3, [pc, #648]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f00:	4aa1      	ldr	r2, [pc, #644]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f08:	e01c      	b.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f0e:	3308      	adds	r3, #8
 8009f10:	2100      	movs	r1, #0
 8009f12:	4618      	mov	r0, r3
 8009f14:	f002 f9ee 	bl	800c2f4 <RCCEx_PLL2_Config>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009f1e:	e011      	b.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f24:	3328      	adds	r3, #40	; 0x28
 8009f26:	2100      	movs	r1, #0
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f002 fa95 	bl	800c458 <RCCEx_PLL3_Config>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f34:	e006      	b.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009f36:	2301      	movs	r3, #1
 8009f38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f3c:	e002      	b.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009f3e:	bf00      	nop
 8009f40:	e000      	b.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009f42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d10b      	bne.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009f4c:	4b8e      	ldr	r3, [pc, #568]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f50:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f5c:	4a8a      	ldr	r2, [pc, #552]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f5e:	430b      	orrs	r3, r1
 8009f60:	6593      	str	r3, [r2, #88]	; 0x58
 8009f62:	e003      	b.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f74:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009f78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009f82:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009f86:	460b      	mov	r3, r1
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	d03a      	beq.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f92:	2b30      	cmp	r3, #48	; 0x30
 8009f94:	d01f      	beq.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009f96:	2b30      	cmp	r3, #48	; 0x30
 8009f98:	d819      	bhi.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009f9a:	2b20      	cmp	r3, #32
 8009f9c:	d00c      	beq.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009f9e:	2b20      	cmp	r3, #32
 8009fa0:	d815      	bhi.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d019      	beq.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009fa6:	2b10      	cmp	r3, #16
 8009fa8:	d111      	bne.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009faa:	4b77      	ldr	r3, [pc, #476]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fae:	4a76      	ldr	r2, [pc, #472]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009fb6:	e011      	b.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fbc:	3308      	adds	r3, #8
 8009fbe:	2102      	movs	r1, #2
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f002 f997 	bl	800c2f4 <RCCEx_PLL2_Config>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009fcc:	e006      	b.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009fd4:	e002      	b.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009fd6:	bf00      	nop
 8009fd8:	e000      	b.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009fda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d10a      	bne.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009fe4:	4b68      	ldr	r3, [pc, #416]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fe8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ff2:	4a65      	ldr	r2, [pc, #404]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ff4:	430b      	orrs	r3, r1
 8009ff6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ff8:	e003      	b.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ffe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a00e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a012:	2300      	movs	r3, #0
 800a014:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a018:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800a01c:	460b      	mov	r3, r1
 800a01e:	4313      	orrs	r3, r2
 800a020:	d051      	beq.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a028:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a02c:	d035      	beq.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a02e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a032:	d82e      	bhi.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a034:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a038:	d031      	beq.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a03a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a03e:	d828      	bhi.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a044:	d01a      	beq.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a04a:	d822      	bhi.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d003      	beq.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a054:	d007      	beq.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a056:	e01c      	b.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a058:	4b4b      	ldr	r3, [pc, #300]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05c:	4a4a      	ldr	r2, [pc, #296]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a05e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a062:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a064:	e01c      	b.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a06a:	3308      	adds	r3, #8
 800a06c:	2100      	movs	r1, #0
 800a06e:	4618      	mov	r0, r3
 800a070:	f002 f940 	bl	800c2f4 <RCCEx_PLL2_Config>
 800a074:	4603      	mov	r3, r0
 800a076:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a07a:	e011      	b.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a07c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a080:	3328      	adds	r3, #40	; 0x28
 800a082:	2100      	movs	r1, #0
 800a084:	4618      	mov	r0, r3
 800a086:	f002 f9e7 	bl	800c458 <RCCEx_PLL3_Config>
 800a08a:	4603      	mov	r3, r0
 800a08c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a090:	e006      	b.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a092:	2301      	movs	r3, #1
 800a094:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a098:	e002      	b.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a09a:	bf00      	nop
 800a09c:	e000      	b.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a09e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d10a      	bne.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a0a8:	4b37      	ldr	r3, [pc, #220]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0ac:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a0b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0b6:	4a34      	ldr	r2, [pc, #208]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0b8:	430b      	orrs	r3, r1
 800a0ba:	6513      	str	r3, [r2, #80]	; 0x50
 800a0bc:	e003      	b.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a0c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ce:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a0d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a0dc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	d056      	beq.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a0f0:	d033      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a0f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a0f6:	d82c      	bhi.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a0f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a0fc:	d02f      	beq.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a0fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a102:	d826      	bhi.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a104:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a108:	d02b      	beq.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a10a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a10e:	d820      	bhi.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a110:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a114:	d012      	beq.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a116:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a11a:	d81a      	bhi.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d022      	beq.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a124:	d115      	bne.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a12a:	3308      	adds	r3, #8
 800a12c:	2101      	movs	r1, #1
 800a12e:	4618      	mov	r0, r3
 800a130:	f002 f8e0 	bl	800c2f4 <RCCEx_PLL2_Config>
 800a134:	4603      	mov	r3, r0
 800a136:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a13a:	e015      	b.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a13c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a140:	3328      	adds	r3, #40	; 0x28
 800a142:	2101      	movs	r1, #1
 800a144:	4618      	mov	r0, r3
 800a146:	f002 f987 	bl	800c458 <RCCEx_PLL3_Config>
 800a14a:	4603      	mov	r3, r0
 800a14c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a150:	e00a      	b.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a158:	e006      	b.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a15a:	bf00      	nop
 800a15c:	e004      	b.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a15e:	bf00      	nop
 800a160:	e002      	b.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a162:	bf00      	nop
 800a164:	e000      	b.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a166:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a168:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d10d      	bne.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a170:	4b05      	ldr	r3, [pc, #20]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a174:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a17c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a17e:	4a02      	ldr	r2, [pc, #8]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a180:	430b      	orrs	r3, r1
 800a182:	6513      	str	r3, [r2, #80]	; 0x50
 800a184:	e006      	b.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a186:	bf00      	nop
 800a188:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a18c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a190:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a1a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a1aa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	d055      	beq.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a1b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a1bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1c0:	d033      	beq.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a1c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1c6:	d82c      	bhi.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a1c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1cc:	d02f      	beq.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a1ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1d2:	d826      	bhi.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a1d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a1d8:	d02b      	beq.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a1da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a1de:	d820      	bhi.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a1e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1e4:	d012      	beq.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a1e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1ea:	d81a      	bhi.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d022      	beq.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a1f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1f4:	d115      	bne.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1fa:	3308      	adds	r3, #8
 800a1fc:	2101      	movs	r1, #1
 800a1fe:	4618      	mov	r0, r3
 800a200:	f002 f878 	bl	800c2f4 <RCCEx_PLL2_Config>
 800a204:	4603      	mov	r3, r0
 800a206:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a20a:	e015      	b.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a20c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a210:	3328      	adds	r3, #40	; 0x28
 800a212:	2101      	movs	r1, #1
 800a214:	4618      	mov	r0, r3
 800a216:	f002 f91f 	bl	800c458 <RCCEx_PLL3_Config>
 800a21a:	4603      	mov	r3, r0
 800a21c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a220:	e00a      	b.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a228:	e006      	b.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a22a:	bf00      	nop
 800a22c:	e004      	b.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a22e:	bf00      	nop
 800a230:	e002      	b.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a232:	bf00      	nop
 800a234:	e000      	b.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a236:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a238:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d10b      	bne.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a240:	4ba3      	ldr	r3, [pc, #652]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a244:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a24c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a250:	4a9f      	ldr	r2, [pc, #636]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a252:	430b      	orrs	r3, r1
 800a254:	6593      	str	r3, [r2, #88]	; 0x58
 800a256:	e003      	b.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a258:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a25c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a268:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a26c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a270:	2300      	movs	r3, #0
 800a272:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a276:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a27a:	460b      	mov	r3, r1
 800a27c:	4313      	orrs	r3, r2
 800a27e:	d037      	beq.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a28a:	d00e      	beq.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a28c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a290:	d816      	bhi.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a292:	2b00      	cmp	r3, #0
 800a294:	d018      	beq.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a296:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a29a:	d111      	bne.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a29c:	4b8c      	ldr	r3, [pc, #560]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a0:	4a8b      	ldr	r2, [pc, #556]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a2a8:	e00f      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ae:	3308      	adds	r3, #8
 800a2b0:	2101      	movs	r1, #1
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f002 f81e 	bl	800c2f4 <RCCEx_PLL2_Config>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a2be:	e004      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a2c6:	e000      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a2c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d10a      	bne.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a2d2:	4b7f      	ldr	r3, [pc, #508]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2d6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a2da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2e0:	4a7b      	ldr	r2, [pc, #492]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2e2:	430b      	orrs	r3, r1
 800a2e4:	6513      	str	r3, [r2, #80]	; 0x50
 800a2e6:	e003      	b.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a2f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a2fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a300:	2300      	movs	r3, #0
 800a302:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a306:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800a30a:	460b      	mov	r3, r1
 800a30c:	4313      	orrs	r3, r2
 800a30e:	d039      	beq.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a316:	2b03      	cmp	r3, #3
 800a318:	d81c      	bhi.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a31a:	a201      	add	r2, pc, #4	; (adr r2, 800a320 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a320:	0800a35d 	.word	0x0800a35d
 800a324:	0800a331 	.word	0x0800a331
 800a328:	0800a33f 	.word	0x0800a33f
 800a32c:	0800a35d 	.word	0x0800a35d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a330:	4b67      	ldr	r3, [pc, #412]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a334:	4a66      	ldr	r2, [pc, #408]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a33a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a33c:	e00f      	b.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a33e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a342:	3308      	adds	r3, #8
 800a344:	2102      	movs	r1, #2
 800a346:	4618      	mov	r0, r3
 800a348:	f001 ffd4 	bl	800c2f4 <RCCEx_PLL2_Config>
 800a34c:	4603      	mov	r3, r0
 800a34e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a352:	e004      	b.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a35a:	e000      	b.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a35c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a35e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a362:	2b00      	cmp	r3, #0
 800a364:	d10a      	bne.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a366:	4b5a      	ldr	r3, [pc, #360]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a36a:	f023 0103 	bic.w	r1, r3, #3
 800a36e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a374:	4a56      	ldr	r2, [pc, #344]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a376:	430b      	orrs	r3, r1
 800a378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a37a:	e003      	b.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a37c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a380:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a390:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a394:	2300      	movs	r3, #0
 800a396:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a39a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a39e:	460b      	mov	r3, r1
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	f000 809f 	beq.w	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a3a6:	4b4b      	ldr	r3, [pc, #300]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a4a      	ldr	r2, [pc, #296]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a3ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a3b2:	f7f9 f905 	bl	80035c0 <HAL_GetTick>
 800a3b6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3ba:	e00b      	b.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3bc:	f7f9 f900 	bl	80035c0 <HAL_GetTick>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	2b64      	cmp	r3, #100	; 0x64
 800a3ca:	d903      	bls.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a3cc:	2303      	movs	r3, #3
 800a3ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a3d2:	e005      	b.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3d4:	4b3f      	ldr	r3, [pc, #252]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d0ed      	beq.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a3e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d179      	bne.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a3e8:	4b39      	ldr	r3, [pc, #228]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a3ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a3f4:	4053      	eors	r3, r2
 800a3f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d015      	beq.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a3fe:	4b34      	ldr	r3, [pc, #208]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a406:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a40a:	4b31      	ldr	r3, [pc, #196]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a40c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a40e:	4a30      	ldr	r2, [pc, #192]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a414:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a416:	4b2e      	ldr	r3, [pc, #184]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a41a:	4a2d      	ldr	r2, [pc, #180]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a41c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a420:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a422:	4a2b      	ldr	r2, [pc, #172]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a424:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a428:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a42a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a42e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a436:	d118      	bne.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a438:	f7f9 f8c2 	bl	80035c0 <HAL_GetTick>
 800a43c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a440:	e00d      	b.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a442:	f7f9 f8bd 	bl	80035c0 <HAL_GetTick>
 800a446:	4602      	mov	r2, r0
 800a448:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a44c:	1ad2      	subs	r2, r2, r3
 800a44e:	f241 3388 	movw	r3, #5000	; 0x1388
 800a452:	429a      	cmp	r2, r3
 800a454:	d903      	bls.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a456:	2303      	movs	r3, #3
 800a458:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800a45c:	e005      	b.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a45e:	4b1c      	ldr	r3, [pc, #112]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a462:	f003 0302 	and.w	r3, r3, #2
 800a466:	2b00      	cmp	r3, #0
 800a468:	d0eb      	beq.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a46a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d129      	bne.n	800a4c6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a476:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a47a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a47e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a482:	d10e      	bne.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a484:	4b12      	ldr	r3, [pc, #72]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a486:	691b      	ldr	r3, [r3, #16]
 800a488:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a48c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a490:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a494:	091a      	lsrs	r2, r3, #4
 800a496:	4b10      	ldr	r3, [pc, #64]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a498:	4013      	ands	r3, r2
 800a49a:	4a0d      	ldr	r2, [pc, #52]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a49c:	430b      	orrs	r3, r1
 800a49e:	6113      	str	r3, [r2, #16]
 800a4a0:	e005      	b.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a4a2:	4b0b      	ldr	r3, [pc, #44]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4a4:	691b      	ldr	r3, [r3, #16]
 800a4a6:	4a0a      	ldr	r2, [pc, #40]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a4ac:	6113      	str	r3, [r2, #16]
 800a4ae:	4b08      	ldr	r3, [pc, #32]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a4b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a4ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4be:	4a04      	ldr	r2, [pc, #16]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4c0:	430b      	orrs	r3, r1
 800a4c2:	6713      	str	r3, [r2, #112]	; 0x70
 800a4c4:	e00e      	b.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a4c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800a4ce:	e009      	b.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a4d0:	58024400 	.word	0x58024400
 800a4d4:	58024800 	.word	0x58024800
 800a4d8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a4e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ec:	f002 0301 	and.w	r3, r2, #1
 800a4f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a4fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a4fe:	460b      	mov	r3, r1
 800a500:	4313      	orrs	r3, r2
 800a502:	f000 8089 	beq.w	800a618 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a50a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a50c:	2b28      	cmp	r3, #40	; 0x28
 800a50e:	d86b      	bhi.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a510:	a201      	add	r2, pc, #4	; (adr r2, 800a518 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a516:	bf00      	nop
 800a518:	0800a5f1 	.word	0x0800a5f1
 800a51c:	0800a5e9 	.word	0x0800a5e9
 800a520:	0800a5e9 	.word	0x0800a5e9
 800a524:	0800a5e9 	.word	0x0800a5e9
 800a528:	0800a5e9 	.word	0x0800a5e9
 800a52c:	0800a5e9 	.word	0x0800a5e9
 800a530:	0800a5e9 	.word	0x0800a5e9
 800a534:	0800a5e9 	.word	0x0800a5e9
 800a538:	0800a5bd 	.word	0x0800a5bd
 800a53c:	0800a5e9 	.word	0x0800a5e9
 800a540:	0800a5e9 	.word	0x0800a5e9
 800a544:	0800a5e9 	.word	0x0800a5e9
 800a548:	0800a5e9 	.word	0x0800a5e9
 800a54c:	0800a5e9 	.word	0x0800a5e9
 800a550:	0800a5e9 	.word	0x0800a5e9
 800a554:	0800a5e9 	.word	0x0800a5e9
 800a558:	0800a5d3 	.word	0x0800a5d3
 800a55c:	0800a5e9 	.word	0x0800a5e9
 800a560:	0800a5e9 	.word	0x0800a5e9
 800a564:	0800a5e9 	.word	0x0800a5e9
 800a568:	0800a5e9 	.word	0x0800a5e9
 800a56c:	0800a5e9 	.word	0x0800a5e9
 800a570:	0800a5e9 	.word	0x0800a5e9
 800a574:	0800a5e9 	.word	0x0800a5e9
 800a578:	0800a5f1 	.word	0x0800a5f1
 800a57c:	0800a5e9 	.word	0x0800a5e9
 800a580:	0800a5e9 	.word	0x0800a5e9
 800a584:	0800a5e9 	.word	0x0800a5e9
 800a588:	0800a5e9 	.word	0x0800a5e9
 800a58c:	0800a5e9 	.word	0x0800a5e9
 800a590:	0800a5e9 	.word	0x0800a5e9
 800a594:	0800a5e9 	.word	0x0800a5e9
 800a598:	0800a5f1 	.word	0x0800a5f1
 800a59c:	0800a5e9 	.word	0x0800a5e9
 800a5a0:	0800a5e9 	.word	0x0800a5e9
 800a5a4:	0800a5e9 	.word	0x0800a5e9
 800a5a8:	0800a5e9 	.word	0x0800a5e9
 800a5ac:	0800a5e9 	.word	0x0800a5e9
 800a5b0:	0800a5e9 	.word	0x0800a5e9
 800a5b4:	0800a5e9 	.word	0x0800a5e9
 800a5b8:	0800a5f1 	.word	0x0800a5f1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a5bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5c0:	3308      	adds	r3, #8
 800a5c2:	2101      	movs	r1, #1
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f001 fe95 	bl	800c2f4 <RCCEx_PLL2_Config>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a5d0:	e00f      	b.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a5d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5d6:	3328      	adds	r3, #40	; 0x28
 800a5d8:	2101      	movs	r1, #1
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f001 ff3c 	bl	800c458 <RCCEx_PLL3_Config>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a5e6:	e004      	b.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a5ee:	e000      	b.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a5f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10a      	bne.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a5fa:	4bbf      	ldr	r3, [pc, #764]	; (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a5fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5fe:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a606:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a608:	4abb      	ldr	r2, [pc, #748]	; (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a60a:	430b      	orrs	r3, r1
 800a60c:	6553      	str	r3, [r2, #84]	; 0x54
 800a60e:	e003      	b.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a610:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a614:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a620:	f002 0302 	and.w	r3, r2, #2
 800a624:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a628:	2300      	movs	r3, #0
 800a62a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a62e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a632:	460b      	mov	r3, r1
 800a634:	4313      	orrs	r3, r2
 800a636:	d041      	beq.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a63c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a63e:	2b05      	cmp	r3, #5
 800a640:	d824      	bhi.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a642:	a201      	add	r2, pc, #4	; (adr r2, 800a648 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a648:	0800a695 	.word	0x0800a695
 800a64c:	0800a661 	.word	0x0800a661
 800a650:	0800a677 	.word	0x0800a677
 800a654:	0800a695 	.word	0x0800a695
 800a658:	0800a695 	.word	0x0800a695
 800a65c:	0800a695 	.word	0x0800a695
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a664:	3308      	adds	r3, #8
 800a666:	2101      	movs	r1, #1
 800a668:	4618      	mov	r0, r3
 800a66a:	f001 fe43 	bl	800c2f4 <RCCEx_PLL2_Config>
 800a66e:	4603      	mov	r3, r0
 800a670:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a674:	e00f      	b.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a67a:	3328      	adds	r3, #40	; 0x28
 800a67c:	2101      	movs	r1, #1
 800a67e:	4618      	mov	r0, r3
 800a680:	f001 feea 	bl	800c458 <RCCEx_PLL3_Config>
 800a684:	4603      	mov	r3, r0
 800a686:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a68a:	e004      	b.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a68c:	2301      	movs	r3, #1
 800a68e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a692:	e000      	b.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a694:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a696:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d10a      	bne.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a69e:	4b96      	ldr	r3, [pc, #600]	; (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a6a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6a2:	f023 0107 	bic.w	r1, r3, #7
 800a6a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a6ac:	4a92      	ldr	r2, [pc, #584]	; (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a6ae:	430b      	orrs	r3, r1
 800a6b0:	6553      	str	r3, [r2, #84]	; 0x54
 800a6b2:	e003      	b.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a6bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c4:	f002 0304 	and.w	r3, r2, #4
 800a6c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a6d2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	d044      	beq.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a6dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6e4:	2b05      	cmp	r3, #5
 800a6e6:	d825      	bhi.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a6e8:	a201      	add	r2, pc, #4	; (adr r2, 800a6f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a6ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ee:	bf00      	nop
 800a6f0:	0800a73d 	.word	0x0800a73d
 800a6f4:	0800a709 	.word	0x0800a709
 800a6f8:	0800a71f 	.word	0x0800a71f
 800a6fc:	0800a73d 	.word	0x0800a73d
 800a700:	0800a73d 	.word	0x0800a73d
 800a704:	0800a73d 	.word	0x0800a73d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a70c:	3308      	adds	r3, #8
 800a70e:	2101      	movs	r1, #1
 800a710:	4618      	mov	r0, r3
 800a712:	f001 fdef 	bl	800c2f4 <RCCEx_PLL2_Config>
 800a716:	4603      	mov	r3, r0
 800a718:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a71c:	e00f      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a71e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a722:	3328      	adds	r3, #40	; 0x28
 800a724:	2101      	movs	r1, #1
 800a726:	4618      	mov	r0, r3
 800a728:	f001 fe96 	bl	800c458 <RCCEx_PLL3_Config>
 800a72c:	4603      	mov	r3, r0
 800a72e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a732:	e004      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a73a:	e000      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a73c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a73e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a742:	2b00      	cmp	r3, #0
 800a744:	d10b      	bne.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a746:	4b6c      	ldr	r3, [pc, #432]	; (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a74a:	f023 0107 	bic.w	r1, r3, #7
 800a74e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a756:	4a68      	ldr	r2, [pc, #416]	; (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a758:	430b      	orrs	r3, r1
 800a75a:	6593      	str	r3, [r2, #88]	; 0x58
 800a75c:	e003      	b.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a75e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a762:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76e:	f002 0320 	and.w	r3, r2, #32
 800a772:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a776:	2300      	movs	r3, #0
 800a778:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a77c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a780:	460b      	mov	r3, r1
 800a782:	4313      	orrs	r3, r2
 800a784:	d055      	beq.n	800a832 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a78a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a78e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a792:	d033      	beq.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a794:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a798:	d82c      	bhi.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a79a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a79e:	d02f      	beq.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a7a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7a4:	d826      	bhi.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a7a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a7aa:	d02b      	beq.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a7ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a7b0:	d820      	bhi.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a7b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7b6:	d012      	beq.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a7b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7bc:	d81a      	bhi.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d022      	beq.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a7c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7c6:	d115      	bne.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7cc:	3308      	adds	r3, #8
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f001 fd8f 	bl	800c2f4 <RCCEx_PLL2_Config>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a7dc:	e015      	b.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7e2:	3328      	adds	r3, #40	; 0x28
 800a7e4:	2102      	movs	r1, #2
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f001 fe36 	bl	800c458 <RCCEx_PLL3_Config>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a7f2:	e00a      	b.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a7fa:	e006      	b.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a7fc:	bf00      	nop
 800a7fe:	e004      	b.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a800:	bf00      	nop
 800a802:	e002      	b.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a804:	bf00      	nop
 800a806:	e000      	b.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a808:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a80a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d10b      	bne.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a812:	4b39      	ldr	r3, [pc, #228]	; (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a816:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a81a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a81e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a822:	4a35      	ldr	r2, [pc, #212]	; (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a824:	430b      	orrs	r3, r1
 800a826:	6553      	str	r3, [r2, #84]	; 0x54
 800a828:	e003      	b.n	800a832 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a82a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a82e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a83e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a842:	2300      	movs	r3, #0
 800a844:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a848:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a84c:	460b      	mov	r3, r1
 800a84e:	4313      	orrs	r3, r2
 800a850:	d058      	beq.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a856:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a85a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a85e:	d033      	beq.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a860:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a864:	d82c      	bhi.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a86a:	d02f      	beq.n	800a8cc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a86c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a870:	d826      	bhi.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a872:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a876:	d02b      	beq.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a878:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a87c:	d820      	bhi.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a87e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a882:	d012      	beq.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a888:	d81a      	bhi.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d022      	beq.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a88e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a892:	d115      	bne.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a898:	3308      	adds	r3, #8
 800a89a:	2100      	movs	r1, #0
 800a89c:	4618      	mov	r0, r3
 800a89e:	f001 fd29 	bl	800c2f4 <RCCEx_PLL2_Config>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a8a8:	e015      	b.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a8aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ae:	3328      	adds	r3, #40	; 0x28
 800a8b0:	2102      	movs	r1, #2
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f001 fdd0 	bl	800c458 <RCCEx_PLL3_Config>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a8be:	e00a      	b.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a8c6:	e006      	b.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a8c8:	bf00      	nop
 800a8ca:	e004      	b.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a8cc:	bf00      	nop
 800a8ce:	e002      	b.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a8d0:	bf00      	nop
 800a8d2:	e000      	b.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a8d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d10e      	bne.n	800a8fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a8de:	4b06      	ldr	r3, [pc, #24]	; (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8e2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a8e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a8ee:	4a02      	ldr	r2, [pc, #8]	; (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8f0:	430b      	orrs	r3, r1
 800a8f2:	6593      	str	r3, [r2, #88]	; 0x58
 800a8f4:	e006      	b.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a8f6:	bf00      	nop
 800a8f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a900:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a904:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a910:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a914:	2300      	movs	r3, #0
 800a916:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a91a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a91e:	460b      	mov	r3, r1
 800a920:	4313      	orrs	r3, r2
 800a922:	d055      	beq.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a928:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a92c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a930:	d033      	beq.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a932:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a936:	d82c      	bhi.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a93c:	d02f      	beq.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a93e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a942:	d826      	bhi.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a944:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a948:	d02b      	beq.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a94a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a94e:	d820      	bhi.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a950:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a954:	d012      	beq.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a956:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a95a:	d81a      	bhi.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d022      	beq.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a964:	d115      	bne.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a96a:	3308      	adds	r3, #8
 800a96c:	2100      	movs	r1, #0
 800a96e:	4618      	mov	r0, r3
 800a970:	f001 fcc0 	bl	800c2f4 <RCCEx_PLL2_Config>
 800a974:	4603      	mov	r3, r0
 800a976:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a97a:	e015      	b.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a97c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a980:	3328      	adds	r3, #40	; 0x28
 800a982:	2102      	movs	r1, #2
 800a984:	4618      	mov	r0, r3
 800a986:	f001 fd67 	bl	800c458 <RCCEx_PLL3_Config>
 800a98a:	4603      	mov	r3, r0
 800a98c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a990:	e00a      	b.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a992:	2301      	movs	r3, #1
 800a994:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a998:	e006      	b.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a99a:	bf00      	nop
 800a99c:	e004      	b.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a99e:	bf00      	nop
 800a9a0:	e002      	b.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a9a2:	bf00      	nop
 800a9a4:	e000      	b.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a9a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d10b      	bne.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a9b0:	4ba1      	ldr	r3, [pc, #644]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a9b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9b4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a9b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a9c0:	4a9d      	ldr	r2, [pc, #628]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a9c2:	430b      	orrs	r3, r1
 800a9c4:	6593      	str	r3, [r2, #88]	; 0x58
 800a9c6:	e003      	b.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a9d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d8:	f002 0308 	and.w	r3, r2, #8
 800a9dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a9e6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	d01e      	beq.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a9f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9fc:	d10c      	bne.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a9fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa02:	3328      	adds	r3, #40	; 0x28
 800aa04:	2102      	movs	r1, #2
 800aa06:	4618      	mov	r0, r3
 800aa08:	f001 fd26 	bl	800c458 <RCCEx_PLL3_Config>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d002      	beq.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800aa12:	2301      	movs	r3, #1
 800aa14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800aa18:	4b87      	ldr	r3, [pc, #540]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa1c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aa20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa28:	4a83      	ldr	r2, [pc, #524]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa2a:	430b      	orrs	r3, r1
 800aa2c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aa2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa36:	f002 0310 	and.w	r3, r2, #16
 800aa3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800aa3e:	2300      	movs	r3, #0
 800aa40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800aa44:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800aa48:	460b      	mov	r3, r1
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	d01e      	beq.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800aa4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa5a:	d10c      	bne.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aa5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa60:	3328      	adds	r3, #40	; 0x28
 800aa62:	2102      	movs	r1, #2
 800aa64:	4618      	mov	r0, r3
 800aa66:	f001 fcf7 	bl	800c458 <RCCEx_PLL3_Config>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d002      	beq.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800aa70:	2301      	movs	r3, #1
 800aa72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aa76:	4b70      	ldr	r3, [pc, #448]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800aa7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa86:	4a6c      	ldr	r2, [pc, #432]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa88:	430b      	orrs	r3, r1
 800aa8a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aa8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa94:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800aa98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aaa2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	d03e      	beq.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800aaac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aab0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aab4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aab8:	d022      	beq.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800aaba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aabe:	d81b      	bhi.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d003      	beq.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800aac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aac8:	d00b      	beq.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800aaca:	e015      	b.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aacc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aad0:	3308      	adds	r3, #8
 800aad2:	2100      	movs	r1, #0
 800aad4:	4618      	mov	r0, r3
 800aad6:	f001 fc0d 	bl	800c2f4 <RCCEx_PLL2_Config>
 800aada:	4603      	mov	r3, r0
 800aadc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aae0:	e00f      	b.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aae6:	3328      	adds	r3, #40	; 0x28
 800aae8:	2102      	movs	r1, #2
 800aaea:	4618      	mov	r0, r3
 800aaec:	f001 fcb4 	bl	800c458 <RCCEx_PLL3_Config>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aaf6:	e004      	b.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aaf8:	2301      	movs	r3, #1
 800aafa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aafe:	e000      	b.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800ab00:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d10b      	bne.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ab0a:	4b4b      	ldr	r3, [pc, #300]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab0e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ab12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ab1a:	4a47      	ldr	r2, [pc, #284]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab1c:	430b      	orrs	r3, r1
 800ab1e:	6593      	str	r3, [r2, #88]	; 0x58
 800ab20:	e003      	b.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ab2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab32:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800ab36:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab38:	2300      	movs	r3, #0
 800ab3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ab3c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800ab40:	460b      	mov	r3, r1
 800ab42:	4313      	orrs	r3, r2
 800ab44:	d03b      	beq.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ab46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab52:	d01f      	beq.n	800ab94 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800ab54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab58:	d818      	bhi.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800ab5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab5e:	d003      	beq.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ab60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab64:	d007      	beq.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ab66:	e011      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab68:	4b33      	ldr	r3, [pc, #204]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6c:	4a32      	ldr	r2, [pc, #200]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ab74:	e00f      	b.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ab76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab7a:	3328      	adds	r3, #40	; 0x28
 800ab7c:	2101      	movs	r1, #1
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f001 fc6a 	bl	800c458 <RCCEx_PLL3_Config>
 800ab84:	4603      	mov	r3, r0
 800ab86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800ab8a:	e004      	b.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab92:	e000      	b.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800ab94:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10b      	bne.n	800abb6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ab9e:	4b26      	ldr	r3, [pc, #152]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aba2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800aba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abae:	4a22      	ldr	r2, [pc, #136]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abb0:	430b      	orrs	r3, r1
 800abb2:	6553      	str	r3, [r2, #84]	; 0x54
 800abb4:	e003      	b.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800abbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800abca:	673b      	str	r3, [r7, #112]	; 0x70
 800abcc:	2300      	movs	r3, #0
 800abce:	677b      	str	r3, [r7, #116]	; 0x74
 800abd0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800abd4:	460b      	mov	r3, r1
 800abd6:	4313      	orrs	r3, r2
 800abd8:	d034      	beq.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800abda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d003      	beq.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800abe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abe8:	d007      	beq.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800abea:	e011      	b.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abec:	4b12      	ldr	r3, [pc, #72]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf0:	4a11      	ldr	r2, [pc, #68]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abf6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800abf8:	e00e      	b.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800abfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abfe:	3308      	adds	r3, #8
 800ac00:	2102      	movs	r1, #2
 800ac02:	4618      	mov	r0, r3
 800ac04:	f001 fb76 	bl	800c2f4 <RCCEx_PLL2_Config>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ac0e:	e003      	b.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac16:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d10d      	bne.n	800ac3c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ac20:	4b05      	ldr	r3, [pc, #20]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ac28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac2e:	4a02      	ldr	r2, [pc, #8]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac30:	430b      	orrs	r3, r1
 800ac32:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac34:	e006      	b.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800ac36:	bf00      	nop
 800ac38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ac44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800ac50:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac52:	2300      	movs	r3, #0
 800ac54:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac56:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ac5a:	460b      	mov	r3, r1
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	d00c      	beq.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac64:	3328      	adds	r3, #40	; 0x28
 800ac66:	2102      	movs	r1, #2
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f001 fbf5 	bl	800c458 <RCCEx_PLL3_Config>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d002      	beq.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ac74:	2301      	movs	r3, #1
 800ac76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ac7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac82:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800ac86:	663b      	str	r3, [r7, #96]	; 0x60
 800ac88:	2300      	movs	r3, #0
 800ac8a:	667b      	str	r3, [r7, #100]	; 0x64
 800ac8c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800ac90:	460b      	mov	r3, r1
 800ac92:	4313      	orrs	r3, r2
 800ac94:	d038      	beq.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ac96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aca2:	d018      	beq.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800aca4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aca8:	d811      	bhi.n	800acce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800acaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acae:	d014      	beq.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800acb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acb4:	d80b      	bhi.n	800acce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d011      	beq.n	800acde <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800acba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acbe:	d106      	bne.n	800acce <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acc0:	4bc3      	ldr	r3, [pc, #780]	; (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc4:	4ac2      	ldr	r2, [pc, #776]	; (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800accc:	e008      	b.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acce:	2301      	movs	r3, #1
 800acd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800acd4:	e004      	b.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800acd6:	bf00      	nop
 800acd8:	e002      	b.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800acda:	bf00      	nop
 800acdc:	e000      	b.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800acde:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ace0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d10b      	bne.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ace8:	4bb9      	ldr	r3, [pc, #740]	; (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800acf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800acf8:	4ab5      	ldr	r2, [pc, #724]	; (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acfa:	430b      	orrs	r3, r1
 800acfc:	6553      	str	r3, [r2, #84]	; 0x54
 800acfe:	e003      	b.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ad08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad10:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800ad14:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad16:	2300      	movs	r3, #0
 800ad18:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad1a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800ad1e:	460b      	mov	r3, r1
 800ad20:	4313      	orrs	r3, r2
 800ad22:	d009      	beq.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ad24:	4baa      	ldr	r3, [pc, #680]	; (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ad2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad32:	4aa7      	ldr	r2, [pc, #668]	; (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad34:	430b      	orrs	r3, r1
 800ad36:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ad38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad40:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800ad44:	653b      	str	r3, [r7, #80]	; 0x50
 800ad46:	2300      	movs	r3, #0
 800ad48:	657b      	str	r3, [r7, #84]	; 0x54
 800ad4a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ad4e:	460b      	mov	r3, r1
 800ad50:	4313      	orrs	r3, r2
 800ad52:	d00a      	beq.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ad54:	4b9e      	ldr	r3, [pc, #632]	; (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad56:	691b      	ldr	r3, [r3, #16]
 800ad58:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800ad5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad60:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ad64:	4a9a      	ldr	r2, [pc, #616]	; (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad66:	430b      	orrs	r3, r1
 800ad68:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ad6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad72:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800ad76:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad78:	2300      	movs	r3, #0
 800ad7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad7c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800ad80:	460b      	mov	r3, r1
 800ad82:	4313      	orrs	r3, r2
 800ad84:	d009      	beq.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ad86:	4b92      	ldr	r3, [pc, #584]	; (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad8a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800ad8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad94:	4a8e      	ldr	r2, [pc, #568]	; (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad96:	430b      	orrs	r3, r1
 800ad98:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ad9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ada6:	643b      	str	r3, [r7, #64]	; 0x40
 800ada8:	2300      	movs	r3, #0
 800adaa:	647b      	str	r3, [r7, #68]	; 0x44
 800adac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800adb0:	460b      	mov	r3, r1
 800adb2:	4313      	orrs	r3, r2
 800adb4:	d00e      	beq.n	800add4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800adb6:	4b86      	ldr	r3, [pc, #536]	; (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adb8:	691b      	ldr	r3, [r3, #16]
 800adba:	4a85      	ldr	r2, [pc, #532]	; (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800adc0:	6113      	str	r3, [r2, #16]
 800adc2:	4b83      	ldr	r3, [pc, #524]	; (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adc4:	6919      	ldr	r1, [r3, #16]
 800adc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800adce:	4a80      	ldr	r2, [pc, #512]	; (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800add0:	430b      	orrs	r3, r1
 800add2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800add4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800add8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800addc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800ade0:	63bb      	str	r3, [r7, #56]	; 0x38
 800ade2:	2300      	movs	r3, #0
 800ade4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ade6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800adea:	460b      	mov	r3, r1
 800adec:	4313      	orrs	r3, r2
 800adee:	d009      	beq.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800adf0:	4b77      	ldr	r3, [pc, #476]	; (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adf4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800adf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adfe:	4a74      	ldr	r2, [pc, #464]	; (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae00:	430b      	orrs	r3, r1
 800ae02:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ae04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800ae10:	633b      	str	r3, [r7, #48]	; 0x30
 800ae12:	2300      	movs	r3, #0
 800ae14:	637b      	str	r3, [r7, #52]	; 0x34
 800ae16:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	d00a      	beq.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ae20:	4b6b      	ldr	r3, [pc, #428]	; (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae24:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800ae28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae30:	4a67      	ldr	r2, [pc, #412]	; (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae32:	430b      	orrs	r3, r1
 800ae34:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ae36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3e:	2100      	movs	r1, #0
 800ae40:	62b9      	str	r1, [r7, #40]	; 0x28
 800ae42:	f003 0301 	and.w	r3, r3, #1
 800ae46:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae48:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	d011      	beq.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae56:	3308      	adds	r3, #8
 800ae58:	2100      	movs	r1, #0
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f001 fa4a 	bl	800c2f4 <RCCEx_PLL2_Config>
 800ae60:	4603      	mov	r3, r0
 800ae62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ae66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d003      	beq.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ae76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7e:	2100      	movs	r1, #0
 800ae80:	6239      	str	r1, [r7, #32]
 800ae82:	f003 0302 	and.w	r3, r3, #2
 800ae86:	627b      	str	r3, [r7, #36]	; 0x24
 800ae88:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	d011      	beq.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae96:	3308      	adds	r3, #8
 800ae98:	2101      	movs	r1, #1
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f001 fa2a 	bl	800c2f4 <RCCEx_PLL2_Config>
 800aea0:	4603      	mov	r3, r0
 800aea2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aea6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d003      	beq.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aeb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800aeb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebe:	2100      	movs	r1, #0
 800aec0:	61b9      	str	r1, [r7, #24]
 800aec2:	f003 0304 	and.w	r3, r3, #4
 800aec6:	61fb      	str	r3, [r7, #28]
 800aec8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800aecc:	460b      	mov	r3, r1
 800aece:	4313      	orrs	r3, r2
 800aed0:	d011      	beq.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aed6:	3308      	adds	r3, #8
 800aed8:	2102      	movs	r1, #2
 800aeda:	4618      	mov	r0, r3
 800aedc:	f001 fa0a 	bl	800c2f4 <RCCEx_PLL2_Config>
 800aee0:	4603      	mov	r3, r0
 800aee2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aee6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d003      	beq.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aef2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800aef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefe:	2100      	movs	r1, #0
 800af00:	6139      	str	r1, [r7, #16]
 800af02:	f003 0308 	and.w	r3, r3, #8
 800af06:	617b      	str	r3, [r7, #20]
 800af08:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800af0c:	460b      	mov	r3, r1
 800af0e:	4313      	orrs	r3, r2
 800af10:	d011      	beq.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af16:	3328      	adds	r3, #40	; 0x28
 800af18:	2100      	movs	r1, #0
 800af1a:	4618      	mov	r0, r3
 800af1c:	f001 fa9c 	bl	800c458 <RCCEx_PLL3_Config>
 800af20:	4603      	mov	r3, r0
 800af22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800af26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d003      	beq.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800af36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3e:	2100      	movs	r1, #0
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	f003 0310 	and.w	r3, r3, #16
 800af46:	60fb      	str	r3, [r7, #12]
 800af48:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800af4c:	460b      	mov	r3, r1
 800af4e:	4313      	orrs	r3, r2
 800af50:	d011      	beq.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af56:	3328      	adds	r3, #40	; 0x28
 800af58:	2101      	movs	r1, #1
 800af5a:	4618      	mov	r0, r3
 800af5c:	f001 fa7c 	bl	800c458 <RCCEx_PLL3_Config>
 800af60:	4603      	mov	r3, r0
 800af62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800af66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d003      	beq.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800af76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7e:	2100      	movs	r1, #0
 800af80:	6039      	str	r1, [r7, #0]
 800af82:	f003 0320 	and.w	r3, r3, #32
 800af86:	607b      	str	r3, [r7, #4]
 800af88:	e9d7 1200 	ldrd	r1, r2, [r7]
 800af8c:	460b      	mov	r3, r1
 800af8e:	4313      	orrs	r3, r2
 800af90:	d011      	beq.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af96:	3328      	adds	r3, #40	; 0x28
 800af98:	2102      	movs	r1, #2
 800af9a:	4618      	mov	r0, r3
 800af9c:	f001 fa5c 	bl	800c458 <RCCEx_PLL3_Config>
 800afa0:	4603      	mov	r3, r0
 800afa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800afa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d003      	beq.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800afb6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d101      	bne.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800afbe:	2300      	movs	r3, #0
 800afc0:	e000      	b.n	800afc4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800afc2:	2301      	movs	r3, #1
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800afca:	46bd      	mov	sp, r7
 800afcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800afd0:	58024400 	.word	0x58024400

0800afd4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b090      	sub	sp, #64	; 0x40
 800afd8:	af00      	add	r7, sp, #0
 800afda:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800afde:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afe2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800afe6:	430b      	orrs	r3, r1
 800afe8:	f040 8094 	bne.w	800b114 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800afec:	4b9e      	ldr	r3, [pc, #632]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800afee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aff0:	f003 0307 	and.w	r3, r3, #7
 800aff4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800aff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff8:	2b04      	cmp	r3, #4
 800affa:	f200 8087 	bhi.w	800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800affe:	a201      	add	r2, pc, #4	; (adr r2, 800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b004:	0800b019 	.word	0x0800b019
 800b008:	0800b041 	.word	0x0800b041
 800b00c:	0800b069 	.word	0x0800b069
 800b010:	0800b105 	.word	0x0800b105
 800b014:	0800b091 	.word	0x0800b091
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b018:	4b93      	ldr	r3, [pc, #588]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b020:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b024:	d108      	bne.n	800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b02a:	4618      	mov	r0, r3
 800b02c:	f001 f810 	bl	800c050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b032:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b034:	f000 bd45 	b.w	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b038:	2300      	movs	r3, #0
 800b03a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b03c:	f000 bd41 	b.w	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b040:	4b89      	ldr	r3, [pc, #548]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b048:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b04c:	d108      	bne.n	800b060 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b04e:	f107 0318 	add.w	r3, r7, #24
 800b052:	4618      	mov	r0, r3
 800b054:	f000 fd54 	bl	800bb00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b058:	69bb      	ldr	r3, [r7, #24]
 800b05a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b05c:	f000 bd31 	b.w	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b060:	2300      	movs	r3, #0
 800b062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b064:	f000 bd2d 	b.w	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b068:	4b7f      	ldr	r3, [pc, #508]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b074:	d108      	bne.n	800b088 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b076:	f107 030c 	add.w	r3, r7, #12
 800b07a:	4618      	mov	r0, r3
 800b07c:	f000 fe94 	bl	800bda8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b084:	f000 bd1d 	b.w	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b088:	2300      	movs	r3, #0
 800b08a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b08c:	f000 bd19 	b.w	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b090:	4b75      	ldr	r3, [pc, #468]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b094:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b098:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b09a:	4b73      	ldr	r3, [pc, #460]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f003 0304 	and.w	r3, r3, #4
 800b0a2:	2b04      	cmp	r3, #4
 800b0a4:	d10c      	bne.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b0a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d109      	bne.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0ac:	4b6e      	ldr	r3, [pc, #440]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	08db      	lsrs	r3, r3, #3
 800b0b2:	f003 0303 	and.w	r3, r3, #3
 800b0b6:	4a6d      	ldr	r2, [pc, #436]	; (800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b0b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0be:	e01f      	b.n	800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b0c0:	4b69      	ldr	r3, [pc, #420]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0cc:	d106      	bne.n	800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b0ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0d4:	d102      	bne.n	800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b0d6:	4b66      	ldr	r3, [pc, #408]	; (800b270 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b0d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0da:	e011      	b.n	800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b0dc:	4b62      	ldr	r3, [pc, #392]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0e8:	d106      	bne.n	800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b0ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0f0:	d102      	bne.n	800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b0f2:	4b60      	ldr	r3, [pc, #384]	; (800b274 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0f6:	e003      	b.n	800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b0fc:	f000 bce1 	b.w	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b100:	f000 bcdf 	b.w	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b104:	4b5c      	ldr	r3, [pc, #368]	; (800b278 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b106:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b108:	f000 bcdb 	b.w	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b10c:	2300      	movs	r3, #0
 800b10e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b110:	f000 bcd7 	b.w	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b114:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b118:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800b11c:	430b      	orrs	r3, r1
 800b11e:	f040 80ad 	bne.w	800b27c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b122:	4b51      	ldr	r3, [pc, #324]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b126:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b12a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b132:	d056      	beq.n	800b1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800b134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b13a:	f200 8090 	bhi.w	800b25e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b140:	2bc0      	cmp	r3, #192	; 0xc0
 800b142:	f000 8088 	beq.w	800b256 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800b146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b148:	2bc0      	cmp	r3, #192	; 0xc0
 800b14a:	f200 8088 	bhi.w	800b25e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b150:	2b80      	cmp	r3, #128	; 0x80
 800b152:	d032      	beq.n	800b1ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b156:	2b80      	cmp	r3, #128	; 0x80
 800b158:	f200 8081 	bhi.w	800b25e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d003      	beq.n	800b16a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800b162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b164:	2b40      	cmp	r3, #64	; 0x40
 800b166:	d014      	beq.n	800b192 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b168:	e079      	b.n	800b25e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b16a:	4b3f      	ldr	r3, [pc, #252]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b172:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b176:	d108      	bne.n	800b18a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b17c:	4618      	mov	r0, r3
 800b17e:	f000 ff67 	bl	800c050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b184:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b186:	f000 bc9c 	b.w	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b18a:	2300      	movs	r3, #0
 800b18c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b18e:	f000 bc98 	b.w	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b192:	4b35      	ldr	r3, [pc, #212]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b19a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b19e:	d108      	bne.n	800b1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1a0:	f107 0318 	add.w	r3, r7, #24
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f000 fcab 	bl	800bb00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b1aa:	69bb      	ldr	r3, [r7, #24]
 800b1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1ae:	f000 bc88 	b.w	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1b6:	f000 bc84 	b.w	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b1ba:	4b2b      	ldr	r3, [pc, #172]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1c6:	d108      	bne.n	800b1da <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1c8:	f107 030c 	add.w	r3, r7, #12
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f000 fdeb 	bl	800bda8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1d6:	f000 bc74 	b.w	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1de:	f000 bc70 	b.w	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b1e2:	4b21      	ldr	r3, [pc, #132]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b1ea:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b1ec:	4b1e      	ldr	r3, [pc, #120]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f003 0304 	and.w	r3, r3, #4
 800b1f4:	2b04      	cmp	r3, #4
 800b1f6:	d10c      	bne.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b1f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d109      	bne.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1fe:	4b1a      	ldr	r3, [pc, #104]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	08db      	lsrs	r3, r3, #3
 800b204:	f003 0303 	and.w	r3, r3, #3
 800b208:	4a18      	ldr	r2, [pc, #96]	; (800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b20a:	fa22 f303 	lsr.w	r3, r2, r3
 800b20e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b210:	e01f      	b.n	800b252 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b212:	4b15      	ldr	r3, [pc, #84]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b21a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b21e:	d106      	bne.n	800b22e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b222:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b226:	d102      	bne.n	800b22e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b228:	4b11      	ldr	r3, [pc, #68]	; (800b270 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b22a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b22c:	e011      	b.n	800b252 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b22e:	4b0e      	ldr	r3, [pc, #56]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b236:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b23a:	d106      	bne.n	800b24a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b23e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b242:	d102      	bne.n	800b24a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b244:	4b0b      	ldr	r3, [pc, #44]	; (800b274 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b246:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b248:	e003      	b.n	800b252 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b24a:	2300      	movs	r3, #0
 800b24c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b24e:	f000 bc38 	b.w	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b252:	f000 bc36 	b.w	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b256:	4b08      	ldr	r3, [pc, #32]	; (800b278 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b258:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b25a:	f000 bc32 	b.w	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b25e:	2300      	movs	r3, #0
 800b260:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b262:	f000 bc2e 	b.w	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b266:	bf00      	nop
 800b268:	58024400 	.word	0x58024400
 800b26c:	03d09000 	.word	0x03d09000
 800b270:	003d0900 	.word	0x003d0900
 800b274:	017d7840 	.word	0x017d7840
 800b278:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b27c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b280:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b284:	430b      	orrs	r3, r1
 800b286:	f040 809c 	bne.w	800b3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b28a:	4b9e      	ldr	r3, [pc, #632]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b28c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b28e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b292:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b296:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b29a:	d054      	beq.n	800b346 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b29e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b2a2:	f200 808b 	bhi.w	800b3bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b2ac:	f000 8083 	beq.w	800b3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800b2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b2b6:	f200 8081 	bhi.w	800b3bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b2c0:	d02f      	beq.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800b2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b2c8:	d878      	bhi.n	800b3bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d004      	beq.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b2d6:	d012      	beq.n	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b2d8:	e070      	b.n	800b3bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b2da:	4b8a      	ldr	r3, [pc, #552]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2e6:	d107      	bne.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b2e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f000 feaf 	bl	800c050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2f6:	e3e4      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2fc:	e3e1      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2fe:	4b81      	ldr	r3, [pc, #516]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b306:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b30a:	d107      	bne.n	800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b30c:	f107 0318 	add.w	r3, r7, #24
 800b310:	4618      	mov	r0, r3
 800b312:	f000 fbf5 	bl	800bb00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b316:	69bb      	ldr	r3, [r7, #24]
 800b318:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b31a:	e3d2      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b31c:	2300      	movs	r3, #0
 800b31e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b320:	e3cf      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b322:	4b78      	ldr	r3, [pc, #480]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b32a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b32e:	d107      	bne.n	800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b330:	f107 030c 	add.w	r3, r7, #12
 800b334:	4618      	mov	r0, r3
 800b336:	f000 fd37 	bl	800bda8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b33e:	e3c0      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b340:	2300      	movs	r3, #0
 800b342:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b344:	e3bd      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b346:	4b6f      	ldr	r3, [pc, #444]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b34a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b34e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b350:	4b6c      	ldr	r3, [pc, #432]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f003 0304 	and.w	r3, r3, #4
 800b358:	2b04      	cmp	r3, #4
 800b35a:	d10c      	bne.n	800b376 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b35c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d109      	bne.n	800b376 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b362:	4b68      	ldr	r3, [pc, #416]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	08db      	lsrs	r3, r3, #3
 800b368:	f003 0303 	and.w	r3, r3, #3
 800b36c:	4a66      	ldr	r2, [pc, #408]	; (800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b36e:	fa22 f303 	lsr.w	r3, r2, r3
 800b372:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b374:	e01e      	b.n	800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b376:	4b63      	ldr	r3, [pc, #396]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b37e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b382:	d106      	bne.n	800b392 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b386:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b38a:	d102      	bne.n	800b392 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b38c:	4b5f      	ldr	r3, [pc, #380]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b38e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b390:	e010      	b.n	800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b392:	4b5c      	ldr	r3, [pc, #368]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b39a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b39e:	d106      	bne.n	800b3ae <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b3a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3a6:	d102      	bne.n	800b3ae <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b3a8:	4b59      	ldr	r3, [pc, #356]	; (800b510 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3ac:	e002      	b.n	800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b3b2:	e386      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b3b4:	e385      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b3b6:	4b57      	ldr	r3, [pc, #348]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b3b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3ba:	e382      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3c0:	e37f      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b3c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3c6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b3ca:	430b      	orrs	r3, r1
 800b3cc:	f040 80a7 	bne.w	800b51e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b3d0:	4b4c      	ldr	r3, [pc, #304]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b3d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3d4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b3d8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3e0:	d055      	beq.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3e8:	f200 8096 	bhi.w	800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b3f2:	f000 8084 	beq.w	800b4fe <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b3fc:	f200 808c 	bhi.w	800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b402:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b406:	d030      	beq.n	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b40e:	f200 8083 	bhi.w	800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b414:	2b00      	cmp	r3, #0
 800b416:	d004      	beq.n	800b422 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b41e:	d012      	beq.n	800b446 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b420:	e07a      	b.n	800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b422:	4b38      	ldr	r3, [pc, #224]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b42a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b42e:	d107      	bne.n	800b440 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b434:	4618      	mov	r0, r3
 800b436:	f000 fe0b 	bl	800c050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b43e:	e340      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b440:	2300      	movs	r3, #0
 800b442:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b444:	e33d      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b446:	4b2f      	ldr	r3, [pc, #188]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b44e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b452:	d107      	bne.n	800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b454:	f107 0318 	add.w	r3, r7, #24
 800b458:	4618      	mov	r0, r3
 800b45a:	f000 fb51 	bl	800bb00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b45e:	69bb      	ldr	r3, [r7, #24]
 800b460:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b462:	e32e      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b464:	2300      	movs	r3, #0
 800b466:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b468:	e32b      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b46a:	4b26      	ldr	r3, [pc, #152]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b472:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b476:	d107      	bne.n	800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b478:	f107 030c 	add.w	r3, r7, #12
 800b47c:	4618      	mov	r0, r3
 800b47e:	f000 fc93 	bl	800bda8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b486:	e31c      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b488:	2300      	movs	r3, #0
 800b48a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b48c:	e319      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b48e:	4b1d      	ldr	r3, [pc, #116]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b492:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b496:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b498:	4b1a      	ldr	r3, [pc, #104]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f003 0304 	and.w	r3, r3, #4
 800b4a0:	2b04      	cmp	r3, #4
 800b4a2:	d10c      	bne.n	800b4be <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d109      	bne.n	800b4be <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4aa:	4b16      	ldr	r3, [pc, #88]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	08db      	lsrs	r3, r3, #3
 800b4b0:	f003 0303 	and.w	r3, r3, #3
 800b4b4:	4a14      	ldr	r2, [pc, #80]	; (800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b4b6:	fa22 f303 	lsr.w	r3, r2, r3
 800b4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4bc:	e01e      	b.n	800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b4be:	4b11      	ldr	r3, [pc, #68]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4ca:	d106      	bne.n	800b4da <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4d2:	d102      	bne.n	800b4da <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b4d4:	4b0d      	ldr	r3, [pc, #52]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4d8:	e010      	b.n	800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b4da:	4b0a      	ldr	r3, [pc, #40]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4e6:	d106      	bne.n	800b4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4ee:	d102      	bne.n	800b4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b4f0:	4b07      	ldr	r3, [pc, #28]	; (800b510 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4f4:	e002      	b.n	800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b4fa:	e2e2      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b4fc:	e2e1      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b4fe:	4b05      	ldr	r3, [pc, #20]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b500:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b502:	e2de      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b504:	58024400 	.word	0x58024400
 800b508:	03d09000 	.word	0x03d09000
 800b50c:	003d0900 	.word	0x003d0900
 800b510:	017d7840 	.word	0x017d7840
 800b514:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b518:	2300      	movs	r3, #0
 800b51a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b51c:	e2d1      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b51e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b522:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b526:	430b      	orrs	r3, r1
 800b528:	f040 809c 	bne.w	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b52c:	4b93      	ldr	r3, [pc, #588]	; (800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b52e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b530:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b534:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b53c:	d054      	beq.n	800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b540:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b544:	f200 808b 	bhi.w	800b65e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b54a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b54e:	f000 8083 	beq.w	800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b554:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b558:	f200 8081 	bhi.w	800b65e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b562:	d02f      	beq.n	800b5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b56a:	d878      	bhi.n	800b65e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d004      	beq.n	800b57c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b578:	d012      	beq.n	800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b57a:	e070      	b.n	800b65e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b57c:	4b7f      	ldr	r3, [pc, #508]	; (800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b584:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b588:	d107      	bne.n	800b59a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b58a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b58e:	4618      	mov	r0, r3
 800b590:	f000 fd5e 	bl	800c050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b596:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b598:	e293      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b59a:	2300      	movs	r3, #0
 800b59c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b59e:	e290      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b5a0:	4b76      	ldr	r3, [pc, #472]	; (800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5ac:	d107      	bne.n	800b5be <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5ae:	f107 0318 	add.w	r3, r7, #24
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f000 faa4 	bl	800bb00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b5b8:	69bb      	ldr	r3, [r7, #24]
 800b5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5bc:	e281      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5c2:	e27e      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5c4:	4b6d      	ldr	r3, [pc, #436]	; (800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5d0:	d107      	bne.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5d2:	f107 030c 	add.w	r3, r7, #12
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f000 fbe6 	bl	800bda8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5e0:	e26f      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5e6:	e26c      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b5e8:	4b64      	ldr	r3, [pc, #400]	; (800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5f0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b5f2:	4b62      	ldr	r3, [pc, #392]	; (800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f003 0304 	and.w	r3, r3, #4
 800b5fa:	2b04      	cmp	r3, #4
 800b5fc:	d10c      	bne.n	800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b5fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b600:	2b00      	cmp	r3, #0
 800b602:	d109      	bne.n	800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b604:	4b5d      	ldr	r3, [pc, #372]	; (800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	08db      	lsrs	r3, r3, #3
 800b60a:	f003 0303 	and.w	r3, r3, #3
 800b60e:	4a5c      	ldr	r2, [pc, #368]	; (800b780 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b610:	fa22 f303 	lsr.w	r3, r2, r3
 800b614:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b616:	e01e      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b618:	4b58      	ldr	r3, [pc, #352]	; (800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b624:	d106      	bne.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b628:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b62c:	d102      	bne.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b62e:	4b55      	ldr	r3, [pc, #340]	; (800b784 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b630:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b632:	e010      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b634:	4b51      	ldr	r3, [pc, #324]	; (800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b63c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b640:	d106      	bne.n	800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b648:	d102      	bne.n	800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b64a:	4b4f      	ldr	r3, [pc, #316]	; (800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b64c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b64e:	e002      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b650:	2300      	movs	r3, #0
 800b652:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b654:	e235      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b656:	e234      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b658:	4b4c      	ldr	r3, [pc, #304]	; (800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b65a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b65c:	e231      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b65e:	2300      	movs	r3, #0
 800b660:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b662:	e22e      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b664:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b668:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b66c:	430b      	orrs	r3, r1
 800b66e:	f040 808f 	bne.w	800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b672:	4b42      	ldr	r3, [pc, #264]	; (800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b676:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b67a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b67e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b682:	d06b      	beq.n	800b75c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b686:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b68a:	d874      	bhi.n	800b776 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b692:	d056      	beq.n	800b742 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b696:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b69a:	d86c      	bhi.n	800b776 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b69e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b6a2:	d03b      	beq.n	800b71c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b6aa:	d864      	bhi.n	800b776 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6b2:	d021      	beq.n	800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6ba:	d85c      	bhi.n	800b776 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d004      	beq.n	800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6c8:	d004      	beq.n	800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b6ca:	e054      	b.n	800b776 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b6cc:	f7fe fa0a 	bl	8009ae4 <HAL_RCC_GetPCLK1Freq>
 800b6d0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b6d2:	e1f6      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b6d4:	4b29      	ldr	r3, [pc, #164]	; (800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6e0:	d107      	bne.n	800b6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6e2:	f107 0318 	add.w	r3, r7, #24
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f000 fa0a 	bl	800bb00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b6ec:	69fb      	ldr	r3, [r7, #28]
 800b6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6f0:	e1e7      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6f6:	e1e4      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b6f8:	4b20      	ldr	r3, [pc, #128]	; (800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b700:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b704:	d107      	bne.n	800b716 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b706:	f107 030c 	add.w	r3, r7, #12
 800b70a:	4618      	mov	r0, r3
 800b70c:	f000 fb4c 	bl	800bda8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b714:	e1d5      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b716:	2300      	movs	r3, #0
 800b718:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b71a:	e1d2      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b71c:	4b17      	ldr	r3, [pc, #92]	; (800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f003 0304 	and.w	r3, r3, #4
 800b724:	2b04      	cmp	r3, #4
 800b726:	d109      	bne.n	800b73c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b728:	4b14      	ldr	r3, [pc, #80]	; (800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	08db      	lsrs	r3, r3, #3
 800b72e:	f003 0303 	and.w	r3, r3, #3
 800b732:	4a13      	ldr	r2, [pc, #76]	; (800b780 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b734:	fa22 f303 	lsr.w	r3, r2, r3
 800b738:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b73a:	e1c2      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b73c:	2300      	movs	r3, #0
 800b73e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b740:	e1bf      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b742:	4b0e      	ldr	r3, [pc, #56]	; (800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b74a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b74e:	d102      	bne.n	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b750:	4b0c      	ldr	r3, [pc, #48]	; (800b784 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b752:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b754:	e1b5      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b756:	2300      	movs	r3, #0
 800b758:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b75a:	e1b2      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b75c:	4b07      	ldr	r3, [pc, #28]	; (800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b764:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b768:	d102      	bne.n	800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b76a:	4b07      	ldr	r3, [pc, #28]	; (800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b76c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b76e:	e1a8      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b770:	2300      	movs	r3, #0
 800b772:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b774:	e1a5      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b776:	2300      	movs	r3, #0
 800b778:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b77a:	e1a2      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b77c:	58024400 	.word	0x58024400
 800b780:	03d09000 	.word	0x03d09000
 800b784:	003d0900 	.word	0x003d0900
 800b788:	017d7840 	.word	0x017d7840
 800b78c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b790:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b794:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b798:	430b      	orrs	r3, r1
 800b79a:	d173      	bne.n	800b884 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b79c:	4b9c      	ldr	r3, [pc, #624]	; (800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b79e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b7a4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7ac:	d02f      	beq.n	800b80e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7b4:	d863      	bhi.n	800b87e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d004      	beq.n	800b7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7c2:	d012      	beq.n	800b7ea <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b7c4:	e05b      	b.n	800b87e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b7c6:	4b92      	ldr	r3, [pc, #584]	; (800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7d2:	d107      	bne.n	800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7d4:	f107 0318 	add.w	r3, r7, #24
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f000 f991 	bl	800bb00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b7de:	69bb      	ldr	r3, [r7, #24]
 800b7e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7e2:	e16e      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7e8:	e16b      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b7ea:	4b89      	ldr	r3, [pc, #548]	; (800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7f6:	d107      	bne.n	800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7f8:	f107 030c 	add.w	r3, r7, #12
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f000 fad3 	bl	800bda8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b806:	e15c      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b808:	2300      	movs	r3, #0
 800b80a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b80c:	e159      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b80e:	4b80      	ldr	r3, [pc, #512]	; (800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b812:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b816:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b818:	4b7d      	ldr	r3, [pc, #500]	; (800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f003 0304 	and.w	r3, r3, #4
 800b820:	2b04      	cmp	r3, #4
 800b822:	d10c      	bne.n	800b83e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b826:	2b00      	cmp	r3, #0
 800b828:	d109      	bne.n	800b83e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b82a:	4b79      	ldr	r3, [pc, #484]	; (800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	08db      	lsrs	r3, r3, #3
 800b830:	f003 0303 	and.w	r3, r3, #3
 800b834:	4a77      	ldr	r2, [pc, #476]	; (800ba14 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b836:	fa22 f303 	lsr.w	r3, r2, r3
 800b83a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b83c:	e01e      	b.n	800b87c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b83e:	4b74      	ldr	r3, [pc, #464]	; (800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b84a:	d106      	bne.n	800b85a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b84e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b852:	d102      	bne.n	800b85a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b854:	4b70      	ldr	r3, [pc, #448]	; (800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b856:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b858:	e010      	b.n	800b87c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b85a:	4b6d      	ldr	r3, [pc, #436]	; (800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b862:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b866:	d106      	bne.n	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b86a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b86e:	d102      	bne.n	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b870:	4b6a      	ldr	r3, [pc, #424]	; (800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b872:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b874:	e002      	b.n	800b87c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b876:	2300      	movs	r3, #0
 800b878:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b87a:	e122      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b87c:	e121      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b87e:	2300      	movs	r3, #0
 800b880:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b882:	e11e      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b884:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b888:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b88c:	430b      	orrs	r3, r1
 800b88e:	d133      	bne.n	800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b890:	4b5f      	ldr	r3, [pc, #380]	; (800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b898:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d004      	beq.n	800b8aa <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8a6:	d012      	beq.n	800b8ce <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b8a8:	e023      	b.n	800b8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b8aa:	4b59      	ldr	r3, [pc, #356]	; (800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b8b6:	d107      	bne.n	800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f000 fbc7 	bl	800c050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8c6:	e0fc      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8cc:	e0f9      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b8ce:	4b50      	ldr	r3, [pc, #320]	; (800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8da:	d107      	bne.n	800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8dc:	f107 0318 	add.w	r3, r7, #24
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f000 f90d 	bl	800bb00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b8e6:	6a3b      	ldr	r3, [r7, #32]
 800b8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8ea:	e0ea      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8f0:	e0e7      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8f6:	e0e4      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b8f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8fc:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b900:	430b      	orrs	r3, r1
 800b902:	f040 808d 	bne.w	800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b906:	4b42      	ldr	r3, [pc, #264]	; (800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b90a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b90e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b912:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b916:	d06b      	beq.n	800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b91e:	d874      	bhi.n	800ba0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b926:	d056      	beq.n	800b9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b92e:	d86c      	bhi.n	800ba0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b932:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b936:	d03b      	beq.n	800b9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b93a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b93e:	d864      	bhi.n	800ba0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b942:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b946:	d021      	beq.n	800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b94e:	d85c      	bhi.n	800ba0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b952:	2b00      	cmp	r3, #0
 800b954:	d004      	beq.n	800b960 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b958:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b95c:	d004      	beq.n	800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b95e:	e054      	b.n	800ba0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b960:	f000 f8b8 	bl	800bad4 <HAL_RCCEx_GetD3PCLK1Freq>
 800b964:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b966:	e0ac      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b968:	4b29      	ldr	r3, [pc, #164]	; (800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b970:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b974:	d107      	bne.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b976:	f107 0318 	add.w	r3, r7, #24
 800b97a:	4618      	mov	r0, r3
 800b97c:	f000 f8c0 	bl	800bb00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b984:	e09d      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b986:	2300      	movs	r3, #0
 800b988:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b98a:	e09a      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b98c:	4b20      	ldr	r3, [pc, #128]	; (800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b998:	d107      	bne.n	800b9aa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b99a:	f107 030c 	add.w	r3, r7, #12
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f000 fa02 	bl	800bda8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9a8:	e08b      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9ae:	e088      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b9b0:	4b17      	ldr	r3, [pc, #92]	; (800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f003 0304 	and.w	r3, r3, #4
 800b9b8:	2b04      	cmp	r3, #4
 800b9ba:	d109      	bne.n	800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9bc:	4b14      	ldr	r3, [pc, #80]	; (800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	08db      	lsrs	r3, r3, #3
 800b9c2:	f003 0303 	and.w	r3, r3, #3
 800b9c6:	4a13      	ldr	r2, [pc, #76]	; (800ba14 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b9c8:	fa22 f303 	lsr.w	r3, r2, r3
 800b9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9ce:	e078      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9d4:	e075      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b9d6:	4b0e      	ldr	r3, [pc, #56]	; (800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9e2:	d102      	bne.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b9e4:	4b0c      	ldr	r3, [pc, #48]	; (800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9e8:	e06b      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9ee:	e068      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b9f0:	4b07      	ldr	r3, [pc, #28]	; (800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9fc:	d102      	bne.n	800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b9fe:	4b07      	ldr	r3, [pc, #28]	; (800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ba00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba02:	e05e      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba04:	2300      	movs	r3, #0
 800ba06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba08:	e05b      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba0e:	e058      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ba10:	58024400 	.word	0x58024400
 800ba14:	03d09000 	.word	0x03d09000
 800ba18:	003d0900 	.word	0x003d0900
 800ba1c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ba20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba24:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ba28:	430b      	orrs	r3, r1
 800ba2a:	d148      	bne.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ba2c:	4b27      	ldr	r3, [pc, #156]	; (800bacc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ba2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ba34:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ba36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba3c:	d02a      	beq.n	800ba94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ba3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba44:	d838      	bhi.n	800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ba46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d004      	beq.n	800ba56 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ba4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba52:	d00d      	beq.n	800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ba54:	e030      	b.n	800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ba56:	4b1d      	ldr	r3, [pc, #116]	; (800bacc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba62:	d102      	bne.n	800ba6a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ba64:	4b1a      	ldr	r3, [pc, #104]	; (800bad0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ba66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba68:	e02b      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba6e:	e028      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba70:	4b16      	ldr	r3, [pc, #88]	; (800bacc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba7c:	d107      	bne.n	800ba8e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba82:	4618      	mov	r0, r3
 800ba84:	f000 fae4 	bl	800c050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba8c:	e019      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba92:	e016      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba94:	4b0d      	ldr	r3, [pc, #52]	; (800bacc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800baa0:	d107      	bne.n	800bab2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800baa2:	f107 0318 	add.w	r3, r7, #24
 800baa6:	4618      	mov	r0, r3
 800baa8:	f000 f82a 	bl	800bb00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800baac:	69fb      	ldr	r3, [r7, #28]
 800baae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bab0:	e007      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bab2:	2300      	movs	r3, #0
 800bab4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bab6:	e004      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bab8:	2300      	movs	r3, #0
 800baba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800babc:	e001      	b.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800babe:	2300      	movs	r3, #0
 800bac0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800bac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3740      	adds	r7, #64	; 0x40
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	58024400 	.word	0x58024400
 800bad0:	017d7840 	.word	0x017d7840

0800bad4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bad8:	f7fd ffd4 	bl	8009a84 <HAL_RCC_GetHCLKFreq>
 800badc:	4602      	mov	r2, r0
 800bade:	4b06      	ldr	r3, [pc, #24]	; (800baf8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bae0:	6a1b      	ldr	r3, [r3, #32]
 800bae2:	091b      	lsrs	r3, r3, #4
 800bae4:	f003 0307 	and.w	r3, r3, #7
 800bae8:	4904      	ldr	r1, [pc, #16]	; (800bafc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800baea:	5ccb      	ldrb	r3, [r1, r3]
 800baec:	f003 031f 	and.w	r3, r3, #31
 800baf0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	58024400 	.word	0x58024400
 800bafc:	0801552c 	.word	0x0801552c

0800bb00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b089      	sub	sp, #36	; 0x24
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb08:	4ba1      	ldr	r3, [pc, #644]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb0c:	f003 0303 	and.w	r3, r3, #3
 800bb10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bb12:	4b9f      	ldr	r3, [pc, #636]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb16:	0b1b      	lsrs	r3, r3, #12
 800bb18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bb1e:	4b9c      	ldr	r3, [pc, #624]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb22:	091b      	lsrs	r3, r3, #4
 800bb24:	f003 0301 	and.w	r3, r3, #1
 800bb28:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bb2a:	4b99      	ldr	r3, [pc, #612]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb2e:	08db      	lsrs	r3, r3, #3
 800bb30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb34:	693a      	ldr	r2, [r7, #16]
 800bb36:	fb02 f303 	mul.w	r3, r2, r3
 800bb3a:	ee07 3a90 	vmov	s15, r3
 800bb3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f000 8111 	beq.w	800bd70 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bb4e:	69bb      	ldr	r3, [r7, #24]
 800bb50:	2b02      	cmp	r3, #2
 800bb52:	f000 8083 	beq.w	800bc5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	2b02      	cmp	r3, #2
 800bb5a:	f200 80a1 	bhi.w	800bca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bb5e:	69bb      	ldr	r3, [r7, #24]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d003      	beq.n	800bb6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bb64:	69bb      	ldr	r3, [r7, #24]
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d056      	beq.n	800bc18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bb6a:	e099      	b.n	800bca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb6c:	4b88      	ldr	r3, [pc, #544]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f003 0320 	and.w	r3, r3, #32
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d02d      	beq.n	800bbd4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb78:	4b85      	ldr	r3, [pc, #532]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	08db      	lsrs	r3, r3, #3
 800bb7e:	f003 0303 	and.w	r3, r3, #3
 800bb82:	4a84      	ldr	r2, [pc, #528]	; (800bd94 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bb84:	fa22 f303 	lsr.w	r3, r2, r3
 800bb88:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	ee07 3a90 	vmov	s15, r3
 800bb90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	ee07 3a90 	vmov	s15, r3
 800bb9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bba2:	4b7b      	ldr	r3, [pc, #492]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbaa:	ee07 3a90 	vmov	s15, r3
 800bbae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbb6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bd98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bbba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bbd2:	e087      	b.n	800bce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	ee07 3a90 	vmov	s15, r3
 800bbda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbde:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bd9c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bbe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbe6:	4b6a      	ldr	r3, [pc, #424]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbee:	ee07 3a90 	vmov	s15, r3
 800bbf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbfa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bd98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bbfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc16:	e065      	b.n	800bce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	ee07 3a90 	vmov	s15, r3
 800bc1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bda0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bc26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc2a:	4b59      	ldr	r3, [pc, #356]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc32:	ee07 3a90 	vmov	s15, r3
 800bc36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bd98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc5a:	e043      	b.n	800bce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	ee07 3a90 	vmov	s15, r3
 800bc62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bda4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bc6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc6e:	4b48      	ldr	r3, [pc, #288]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc76:	ee07 3a90 	vmov	s15, r3
 800bc7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc82:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bd98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc9e:	e021      	b.n	800bce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	ee07 3a90 	vmov	s15, r3
 800bca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcaa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bda0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bcae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcb2:	4b37      	ldr	r3, [pc, #220]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcba:	ee07 3a90 	vmov	s15, r3
 800bcbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcc6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bd98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bcca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bce2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bce4:	4b2a      	ldr	r3, [pc, #168]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce8:	0a5b      	lsrs	r3, r3, #9
 800bcea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcee:	ee07 3a90 	vmov	s15, r3
 800bcf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bcfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcfe:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd0a:	ee17 2a90 	vmov	r2, s15
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bd12:	4b1f      	ldr	r3, [pc, #124]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd16:	0c1b      	lsrs	r3, r3, #16
 800bd18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd1c:	ee07 3a90 	vmov	s15, r3
 800bd20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd28:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd38:	ee17 2a90 	vmov	r2, s15
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bd40:	4b13      	ldr	r3, [pc, #76]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd44:	0e1b      	lsrs	r3, r3, #24
 800bd46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd4a:	ee07 3a90 	vmov	s15, r3
 800bd4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd66:	ee17 2a90 	vmov	r2, s15
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bd6e:	e008      	b.n	800bd82 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2200      	movs	r2, #0
 800bd74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	609a      	str	r2, [r3, #8]
}
 800bd82:	bf00      	nop
 800bd84:	3724      	adds	r7, #36	; 0x24
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop
 800bd90:	58024400 	.word	0x58024400
 800bd94:	03d09000 	.word	0x03d09000
 800bd98:	46000000 	.word	0x46000000
 800bd9c:	4c742400 	.word	0x4c742400
 800bda0:	4a742400 	.word	0x4a742400
 800bda4:	4bbebc20 	.word	0x4bbebc20

0800bda8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b089      	sub	sp, #36	; 0x24
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bdb0:	4ba1      	ldr	r3, [pc, #644]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdb4:	f003 0303 	and.w	r3, r3, #3
 800bdb8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bdba:	4b9f      	ldr	r3, [pc, #636]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdbe:	0d1b      	lsrs	r3, r3, #20
 800bdc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bdc4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bdc6:	4b9c      	ldr	r3, [pc, #624]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdca:	0a1b      	lsrs	r3, r3, #8
 800bdcc:	f003 0301 	and.w	r3, r3, #1
 800bdd0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bdd2:	4b99      	ldr	r3, [pc, #612]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdd6:	08db      	lsrs	r3, r3, #3
 800bdd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bddc:	693a      	ldr	r2, [r7, #16]
 800bdde:	fb02 f303 	mul.w	r3, r2, r3
 800bde2:	ee07 3a90 	vmov	s15, r3
 800bde6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	f000 8111 	beq.w	800c018 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bdf6:	69bb      	ldr	r3, [r7, #24]
 800bdf8:	2b02      	cmp	r3, #2
 800bdfa:	f000 8083 	beq.w	800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bdfe:	69bb      	ldr	r3, [r7, #24]
 800be00:	2b02      	cmp	r3, #2
 800be02:	f200 80a1 	bhi.w	800bf48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800be06:	69bb      	ldr	r3, [r7, #24]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d003      	beq.n	800be14 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800be0c:	69bb      	ldr	r3, [r7, #24]
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d056      	beq.n	800bec0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800be12:	e099      	b.n	800bf48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be14:	4b88      	ldr	r3, [pc, #544]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f003 0320 	and.w	r3, r3, #32
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d02d      	beq.n	800be7c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be20:	4b85      	ldr	r3, [pc, #532]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	08db      	lsrs	r3, r3, #3
 800be26:	f003 0303 	and.w	r3, r3, #3
 800be2a:	4a84      	ldr	r2, [pc, #528]	; (800c03c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800be2c:	fa22 f303 	lsr.w	r3, r2, r3
 800be30:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	ee07 3a90 	vmov	s15, r3
 800be38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	ee07 3a90 	vmov	s15, r3
 800be42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be4a:	4b7b      	ldr	r3, [pc, #492]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be52:	ee07 3a90 	vmov	s15, r3
 800be56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800be5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800be7a:	e087      	b.n	800bf8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	ee07 3a90 	vmov	s15, r3
 800be82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c044 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800be8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be8e:	4b6a      	ldr	r3, [pc, #424]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be96:	ee07 3a90 	vmov	s15, r3
 800be9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bea2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800beaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800beb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800beb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bebe:	e065      	b.n	800bf8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	ee07 3a90 	vmov	s15, r3
 800bec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c048 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bed2:	4b59      	ldr	r3, [pc, #356]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beda:	ee07 3a90 	vmov	s15, r3
 800bede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bee2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bee6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800beea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800beee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800befa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800befe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf02:	e043      	b.n	800bf8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	ee07 3a90 	vmov	s15, r3
 800bf0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c04c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bf12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf16:	4b48      	ldr	r3, [pc, #288]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf1e:	ee07 3a90 	vmov	s15, r3
 800bf22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf26:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf46:	e021      	b.n	800bf8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	ee07 3a90 	vmov	s15, r3
 800bf4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c048 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bf56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf5a:	4b37      	ldr	r3, [pc, #220]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf62:	ee07 3a90 	vmov	s15, r3
 800bf66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf8a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bf8c:	4b2a      	ldr	r3, [pc, #168]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf90:	0a5b      	lsrs	r3, r3, #9
 800bf92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf96:	ee07 3a90 	vmov	s15, r3
 800bf9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bfa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfa6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfb2:	ee17 2a90 	vmov	r2, s15
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bfba:	4b1f      	ldr	r3, [pc, #124]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfbe:	0c1b      	lsrs	r3, r3, #16
 800bfc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfc4:	ee07 3a90 	vmov	s15, r3
 800bfc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bfd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfd4:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfe0:	ee17 2a90 	vmov	r2, s15
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bfe8:	4b13      	ldr	r3, [pc, #76]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfec:	0e1b      	lsrs	r3, r3, #24
 800bfee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bff2:	ee07 3a90 	vmov	s15, r3
 800bff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bffa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bffe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c002:	edd7 6a07 	vldr	s13, [r7, #28]
 800c006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c00a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c00e:	ee17 2a90 	vmov	r2, s15
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c016:	e008      	b.n	800c02a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	609a      	str	r2, [r3, #8]
}
 800c02a:	bf00      	nop
 800c02c:	3724      	adds	r7, #36	; 0x24
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr
 800c036:	bf00      	nop
 800c038:	58024400 	.word	0x58024400
 800c03c:	03d09000 	.word	0x03d09000
 800c040:	46000000 	.word	0x46000000
 800c044:	4c742400 	.word	0x4c742400
 800c048:	4a742400 	.word	0x4a742400
 800c04c:	4bbebc20 	.word	0x4bbebc20

0800c050 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c050:	b480      	push	{r7}
 800c052:	b089      	sub	sp, #36	; 0x24
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c058:	4ba0      	ldr	r3, [pc, #640]	; (800c2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c05a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c05c:	f003 0303 	and.w	r3, r3, #3
 800c060:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c062:	4b9e      	ldr	r3, [pc, #632]	; (800c2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c066:	091b      	lsrs	r3, r3, #4
 800c068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c06c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c06e:	4b9b      	ldr	r3, [pc, #620]	; (800c2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c072:	f003 0301 	and.w	r3, r3, #1
 800c076:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c078:	4b98      	ldr	r3, [pc, #608]	; (800c2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c07a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c07c:	08db      	lsrs	r3, r3, #3
 800c07e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c082:	693a      	ldr	r2, [r7, #16]
 800c084:	fb02 f303 	mul.w	r3, r2, r3
 800c088:	ee07 3a90 	vmov	s15, r3
 800c08c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c090:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	2b00      	cmp	r3, #0
 800c098:	f000 8111 	beq.w	800c2be <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c09c:	69bb      	ldr	r3, [r7, #24]
 800c09e:	2b02      	cmp	r3, #2
 800c0a0:	f000 8083 	beq.w	800c1aa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c0a4:	69bb      	ldr	r3, [r7, #24]
 800c0a6:	2b02      	cmp	r3, #2
 800c0a8:	f200 80a1 	bhi.w	800c1ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c0ac:	69bb      	ldr	r3, [r7, #24]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d003      	beq.n	800c0ba <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c0b2:	69bb      	ldr	r3, [r7, #24]
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d056      	beq.n	800c166 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c0b8:	e099      	b.n	800c1ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0ba:	4b88      	ldr	r3, [pc, #544]	; (800c2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f003 0320 	and.w	r3, r3, #32
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d02d      	beq.n	800c122 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0c6:	4b85      	ldr	r3, [pc, #532]	; (800c2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	08db      	lsrs	r3, r3, #3
 800c0cc:	f003 0303 	and.w	r3, r3, #3
 800c0d0:	4a83      	ldr	r2, [pc, #524]	; (800c2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c0d2:	fa22 f303 	lsr.w	r3, r2, r3
 800c0d6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	ee07 3a90 	vmov	s15, r3
 800c0de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	ee07 3a90 	vmov	s15, r3
 800c0e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0f0:	4b7a      	ldr	r3, [pc, #488]	; (800c2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0f8:	ee07 3a90 	vmov	s15, r3
 800c0fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c100:	ed97 6a03 	vldr	s12, [r7, #12]
 800c104:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c2e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c108:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c10c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c110:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c114:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c11c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c120:	e087      	b.n	800c232 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	ee07 3a90 	vmov	s15, r3
 800c128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c12c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c2e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c134:	4b69      	ldr	r3, [pc, #420]	; (800c2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c13c:	ee07 3a90 	vmov	s15, r3
 800c140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c144:	ed97 6a03 	vldr	s12, [r7, #12]
 800c148:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c2e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c14c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c150:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c154:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c158:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c15c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c160:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c164:	e065      	b.n	800c232 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	ee07 3a90 	vmov	s15, r3
 800c16c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c170:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c2ec <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c174:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c178:	4b58      	ldr	r3, [pc, #352]	; (800c2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c17a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c17c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c180:	ee07 3a90 	vmov	s15, r3
 800c184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c188:	ed97 6a03 	vldr	s12, [r7, #12]
 800c18c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c2e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c190:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c194:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c198:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c19c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1a8:	e043      	b.n	800c232 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	ee07 3a90 	vmov	s15, r3
 800c1b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1b4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c1b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1bc:	4b47      	ldr	r3, [pc, #284]	; (800c2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1c4:	ee07 3a90 	vmov	s15, r3
 800c1c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1d0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c2e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c1d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1ec:	e021      	b.n	800c232 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	ee07 3a90 	vmov	s15, r3
 800c1f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1f8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c2e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c1fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c200:	4b36      	ldr	r3, [pc, #216]	; (800c2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c208:	ee07 3a90 	vmov	s15, r3
 800c20c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c210:	ed97 6a03 	vldr	s12, [r7, #12]
 800c214:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c2e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c218:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c21c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c220:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c224:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c22c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c230:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c232:	4b2a      	ldr	r3, [pc, #168]	; (800c2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c236:	0a5b      	lsrs	r3, r3, #9
 800c238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c23c:	ee07 3a90 	vmov	s15, r3
 800c240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c244:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c248:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c24c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c258:	ee17 2a90 	vmov	r2, s15
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c260:	4b1e      	ldr	r3, [pc, #120]	; (800c2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c264:	0c1b      	lsrs	r3, r3, #16
 800c266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c26a:	ee07 3a90 	vmov	s15, r3
 800c26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c272:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c276:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c27a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c27e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c286:	ee17 2a90 	vmov	r2, s15
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c28e:	4b13      	ldr	r3, [pc, #76]	; (800c2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c292:	0e1b      	lsrs	r3, r3, #24
 800c294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c298:	ee07 3a90 	vmov	s15, r3
 800c29c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2b4:	ee17 2a90 	vmov	r2, s15
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c2bc:	e008      	b.n	800c2d0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	609a      	str	r2, [r3, #8]
}
 800c2d0:	bf00      	nop
 800c2d2:	3724      	adds	r7, #36	; 0x24
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr
 800c2dc:	58024400 	.word	0x58024400
 800c2e0:	03d09000 	.word	0x03d09000
 800c2e4:	46000000 	.word	0x46000000
 800c2e8:	4c742400 	.word	0x4c742400
 800c2ec:	4a742400 	.word	0x4a742400
 800c2f0:	4bbebc20 	.word	0x4bbebc20

0800c2f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b084      	sub	sp, #16
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c2fe:	2300      	movs	r3, #0
 800c300:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c302:	4b53      	ldr	r3, [pc, #332]	; (800c450 <RCCEx_PLL2_Config+0x15c>)
 800c304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c306:	f003 0303 	and.w	r3, r3, #3
 800c30a:	2b03      	cmp	r3, #3
 800c30c:	d101      	bne.n	800c312 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c30e:	2301      	movs	r3, #1
 800c310:	e099      	b.n	800c446 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c312:	4b4f      	ldr	r3, [pc, #316]	; (800c450 <RCCEx_PLL2_Config+0x15c>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	4a4e      	ldr	r2, [pc, #312]	; (800c450 <RCCEx_PLL2_Config+0x15c>)
 800c318:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c31c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c31e:	f7f7 f94f 	bl	80035c0 <HAL_GetTick>
 800c322:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c324:	e008      	b.n	800c338 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c326:	f7f7 f94b 	bl	80035c0 <HAL_GetTick>
 800c32a:	4602      	mov	r2, r0
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	1ad3      	subs	r3, r2, r3
 800c330:	2b02      	cmp	r3, #2
 800c332:	d901      	bls.n	800c338 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c334:	2303      	movs	r3, #3
 800c336:	e086      	b.n	800c446 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c338:	4b45      	ldr	r3, [pc, #276]	; (800c450 <RCCEx_PLL2_Config+0x15c>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c340:	2b00      	cmp	r3, #0
 800c342:	d1f0      	bne.n	800c326 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c344:	4b42      	ldr	r3, [pc, #264]	; (800c450 <RCCEx_PLL2_Config+0x15c>)
 800c346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c348:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	031b      	lsls	r3, r3, #12
 800c352:	493f      	ldr	r1, [pc, #252]	; (800c450 <RCCEx_PLL2_Config+0x15c>)
 800c354:	4313      	orrs	r3, r2
 800c356:	628b      	str	r3, [r1, #40]	; 0x28
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	3b01      	subs	r3, #1
 800c35e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	689b      	ldr	r3, [r3, #8]
 800c366:	3b01      	subs	r3, #1
 800c368:	025b      	lsls	r3, r3, #9
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	431a      	orrs	r2, r3
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	68db      	ldr	r3, [r3, #12]
 800c372:	3b01      	subs	r3, #1
 800c374:	041b      	lsls	r3, r3, #16
 800c376:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c37a:	431a      	orrs	r2, r3
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	691b      	ldr	r3, [r3, #16]
 800c380:	3b01      	subs	r3, #1
 800c382:	061b      	lsls	r3, r3, #24
 800c384:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c388:	4931      	ldr	r1, [pc, #196]	; (800c450 <RCCEx_PLL2_Config+0x15c>)
 800c38a:	4313      	orrs	r3, r2
 800c38c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c38e:	4b30      	ldr	r3, [pc, #192]	; (800c450 <RCCEx_PLL2_Config+0x15c>)
 800c390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c392:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	695b      	ldr	r3, [r3, #20]
 800c39a:	492d      	ldr	r1, [pc, #180]	; (800c450 <RCCEx_PLL2_Config+0x15c>)
 800c39c:	4313      	orrs	r3, r2
 800c39e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c3a0:	4b2b      	ldr	r3, [pc, #172]	; (800c450 <RCCEx_PLL2_Config+0x15c>)
 800c3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a4:	f023 0220 	bic.w	r2, r3, #32
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	699b      	ldr	r3, [r3, #24]
 800c3ac:	4928      	ldr	r1, [pc, #160]	; (800c450 <RCCEx_PLL2_Config+0x15c>)
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c3b2:	4b27      	ldr	r3, [pc, #156]	; (800c450 <RCCEx_PLL2_Config+0x15c>)
 800c3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b6:	4a26      	ldr	r2, [pc, #152]	; (800c450 <RCCEx_PLL2_Config+0x15c>)
 800c3b8:	f023 0310 	bic.w	r3, r3, #16
 800c3bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c3be:	4b24      	ldr	r3, [pc, #144]	; (800c450 <RCCEx_PLL2_Config+0x15c>)
 800c3c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3c2:	4b24      	ldr	r3, [pc, #144]	; (800c454 <RCCEx_PLL2_Config+0x160>)
 800c3c4:	4013      	ands	r3, r2
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	69d2      	ldr	r2, [r2, #28]
 800c3ca:	00d2      	lsls	r2, r2, #3
 800c3cc:	4920      	ldr	r1, [pc, #128]	; (800c450 <RCCEx_PLL2_Config+0x15c>)
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c3d2:	4b1f      	ldr	r3, [pc, #124]	; (800c450 <RCCEx_PLL2_Config+0x15c>)
 800c3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3d6:	4a1e      	ldr	r2, [pc, #120]	; (800c450 <RCCEx_PLL2_Config+0x15c>)
 800c3d8:	f043 0310 	orr.w	r3, r3, #16
 800c3dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d106      	bne.n	800c3f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c3e4:	4b1a      	ldr	r3, [pc, #104]	; (800c450 <RCCEx_PLL2_Config+0x15c>)
 800c3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3e8:	4a19      	ldr	r2, [pc, #100]	; (800c450 <RCCEx_PLL2_Config+0x15c>)
 800c3ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c3ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c3f0:	e00f      	b.n	800c412 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d106      	bne.n	800c406 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c3f8:	4b15      	ldr	r3, [pc, #84]	; (800c450 <RCCEx_PLL2_Config+0x15c>)
 800c3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3fc:	4a14      	ldr	r2, [pc, #80]	; (800c450 <RCCEx_PLL2_Config+0x15c>)
 800c3fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c402:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c404:	e005      	b.n	800c412 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c406:	4b12      	ldr	r3, [pc, #72]	; (800c450 <RCCEx_PLL2_Config+0x15c>)
 800c408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c40a:	4a11      	ldr	r2, [pc, #68]	; (800c450 <RCCEx_PLL2_Config+0x15c>)
 800c40c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c410:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c412:	4b0f      	ldr	r3, [pc, #60]	; (800c450 <RCCEx_PLL2_Config+0x15c>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4a0e      	ldr	r2, [pc, #56]	; (800c450 <RCCEx_PLL2_Config+0x15c>)
 800c418:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c41c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c41e:	f7f7 f8cf 	bl	80035c0 <HAL_GetTick>
 800c422:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c424:	e008      	b.n	800c438 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c426:	f7f7 f8cb 	bl	80035c0 <HAL_GetTick>
 800c42a:	4602      	mov	r2, r0
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	1ad3      	subs	r3, r2, r3
 800c430:	2b02      	cmp	r3, #2
 800c432:	d901      	bls.n	800c438 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c434:	2303      	movs	r3, #3
 800c436:	e006      	b.n	800c446 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c438:	4b05      	ldr	r3, [pc, #20]	; (800c450 <RCCEx_PLL2_Config+0x15c>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c440:	2b00      	cmp	r3, #0
 800c442:	d0f0      	beq.n	800c426 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c444:	7bfb      	ldrb	r3, [r7, #15]
}
 800c446:	4618      	mov	r0, r3
 800c448:	3710      	adds	r7, #16
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	58024400 	.word	0x58024400
 800c454:	ffff0007 	.word	0xffff0007

0800c458 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b084      	sub	sp, #16
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c462:	2300      	movs	r3, #0
 800c464:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c466:	4b53      	ldr	r3, [pc, #332]	; (800c5b4 <RCCEx_PLL3_Config+0x15c>)
 800c468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c46a:	f003 0303 	and.w	r3, r3, #3
 800c46e:	2b03      	cmp	r3, #3
 800c470:	d101      	bne.n	800c476 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c472:	2301      	movs	r3, #1
 800c474:	e099      	b.n	800c5aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c476:	4b4f      	ldr	r3, [pc, #316]	; (800c5b4 <RCCEx_PLL3_Config+0x15c>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4a4e      	ldr	r2, [pc, #312]	; (800c5b4 <RCCEx_PLL3_Config+0x15c>)
 800c47c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c480:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c482:	f7f7 f89d 	bl	80035c0 <HAL_GetTick>
 800c486:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c488:	e008      	b.n	800c49c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c48a:	f7f7 f899 	bl	80035c0 <HAL_GetTick>
 800c48e:	4602      	mov	r2, r0
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	1ad3      	subs	r3, r2, r3
 800c494:	2b02      	cmp	r3, #2
 800c496:	d901      	bls.n	800c49c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c498:	2303      	movs	r3, #3
 800c49a:	e086      	b.n	800c5aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c49c:	4b45      	ldr	r3, [pc, #276]	; (800c5b4 <RCCEx_PLL3_Config+0x15c>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d1f0      	bne.n	800c48a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c4a8:	4b42      	ldr	r3, [pc, #264]	; (800c5b4 <RCCEx_PLL3_Config+0x15c>)
 800c4aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4ac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	051b      	lsls	r3, r3, #20
 800c4b6:	493f      	ldr	r1, [pc, #252]	; (800c5b4 <RCCEx_PLL3_Config+0x15c>)
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	628b      	str	r3, [r1, #40]	; 0x28
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	3b01      	subs	r3, #1
 800c4c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	689b      	ldr	r3, [r3, #8]
 800c4ca:	3b01      	subs	r3, #1
 800c4cc:	025b      	lsls	r3, r3, #9
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	431a      	orrs	r2, r3
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	68db      	ldr	r3, [r3, #12]
 800c4d6:	3b01      	subs	r3, #1
 800c4d8:	041b      	lsls	r3, r3, #16
 800c4da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c4de:	431a      	orrs	r2, r3
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	691b      	ldr	r3, [r3, #16]
 800c4e4:	3b01      	subs	r3, #1
 800c4e6:	061b      	lsls	r3, r3, #24
 800c4e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c4ec:	4931      	ldr	r1, [pc, #196]	; (800c5b4 <RCCEx_PLL3_Config+0x15c>)
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c4f2:	4b30      	ldr	r3, [pc, #192]	; (800c5b4 <RCCEx_PLL3_Config+0x15c>)
 800c4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	695b      	ldr	r3, [r3, #20]
 800c4fe:	492d      	ldr	r1, [pc, #180]	; (800c5b4 <RCCEx_PLL3_Config+0x15c>)
 800c500:	4313      	orrs	r3, r2
 800c502:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c504:	4b2b      	ldr	r3, [pc, #172]	; (800c5b4 <RCCEx_PLL3_Config+0x15c>)
 800c506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c508:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	699b      	ldr	r3, [r3, #24]
 800c510:	4928      	ldr	r1, [pc, #160]	; (800c5b4 <RCCEx_PLL3_Config+0x15c>)
 800c512:	4313      	orrs	r3, r2
 800c514:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c516:	4b27      	ldr	r3, [pc, #156]	; (800c5b4 <RCCEx_PLL3_Config+0x15c>)
 800c518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c51a:	4a26      	ldr	r2, [pc, #152]	; (800c5b4 <RCCEx_PLL3_Config+0x15c>)
 800c51c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c520:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c522:	4b24      	ldr	r3, [pc, #144]	; (800c5b4 <RCCEx_PLL3_Config+0x15c>)
 800c524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c526:	4b24      	ldr	r3, [pc, #144]	; (800c5b8 <RCCEx_PLL3_Config+0x160>)
 800c528:	4013      	ands	r3, r2
 800c52a:	687a      	ldr	r2, [r7, #4]
 800c52c:	69d2      	ldr	r2, [r2, #28]
 800c52e:	00d2      	lsls	r2, r2, #3
 800c530:	4920      	ldr	r1, [pc, #128]	; (800c5b4 <RCCEx_PLL3_Config+0x15c>)
 800c532:	4313      	orrs	r3, r2
 800c534:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c536:	4b1f      	ldr	r3, [pc, #124]	; (800c5b4 <RCCEx_PLL3_Config+0x15c>)
 800c538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c53a:	4a1e      	ldr	r2, [pc, #120]	; (800c5b4 <RCCEx_PLL3_Config+0x15c>)
 800c53c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c540:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d106      	bne.n	800c556 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c548:	4b1a      	ldr	r3, [pc, #104]	; (800c5b4 <RCCEx_PLL3_Config+0x15c>)
 800c54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c54c:	4a19      	ldr	r2, [pc, #100]	; (800c5b4 <RCCEx_PLL3_Config+0x15c>)
 800c54e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c552:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c554:	e00f      	b.n	800c576 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d106      	bne.n	800c56a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c55c:	4b15      	ldr	r3, [pc, #84]	; (800c5b4 <RCCEx_PLL3_Config+0x15c>)
 800c55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c560:	4a14      	ldr	r2, [pc, #80]	; (800c5b4 <RCCEx_PLL3_Config+0x15c>)
 800c562:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c566:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c568:	e005      	b.n	800c576 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c56a:	4b12      	ldr	r3, [pc, #72]	; (800c5b4 <RCCEx_PLL3_Config+0x15c>)
 800c56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c56e:	4a11      	ldr	r2, [pc, #68]	; (800c5b4 <RCCEx_PLL3_Config+0x15c>)
 800c570:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c574:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c576:	4b0f      	ldr	r3, [pc, #60]	; (800c5b4 <RCCEx_PLL3_Config+0x15c>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4a0e      	ldr	r2, [pc, #56]	; (800c5b4 <RCCEx_PLL3_Config+0x15c>)
 800c57c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c582:	f7f7 f81d 	bl	80035c0 <HAL_GetTick>
 800c586:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c588:	e008      	b.n	800c59c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c58a:	f7f7 f819 	bl	80035c0 <HAL_GetTick>
 800c58e:	4602      	mov	r2, r0
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	1ad3      	subs	r3, r2, r3
 800c594:	2b02      	cmp	r3, #2
 800c596:	d901      	bls.n	800c59c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c598:	2303      	movs	r3, #3
 800c59a:	e006      	b.n	800c5aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c59c:	4b05      	ldr	r3, [pc, #20]	; (800c5b4 <RCCEx_PLL3_Config+0x15c>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d0f0      	beq.n	800c58a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3710      	adds	r7, #16
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop
 800c5b4:	58024400 	.word	0x58024400
 800c5b8:	ffff0007 	.word	0xffff0007

0800c5bc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d071      	beq.n	800c6b2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c5d4:	b2db      	uxtb	r3, r3
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d106      	bne.n	800c5e8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f7f6 faea 	bl	8002bbc <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2202      	movs	r2, #2
 800c5ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	68db      	ldr	r3, [r3, #12]
 800c5f6:	f003 0310 	and.w	r3, r3, #16
 800c5fa:	2b10      	cmp	r3, #16
 800c5fc:	d050      	beq.n	800c6a0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	22ca      	movs	r2, #202	; 0xca
 800c604:	625a      	str	r2, [r3, #36]	; 0x24
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2253      	movs	r2, #83	; 0x53
 800c60c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 fa4a 	bl	800caa8 <RTC_EnterInitMode>
 800c614:	4603      	mov	r3, r0
 800c616:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c618:	7bfb      	ldrb	r3, [r7, #15]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d124      	bne.n	800c668 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	6899      	ldr	r1, [r3, #8]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681a      	ldr	r2, [r3, #0]
 800c628:	4b24      	ldr	r3, [pc, #144]	; (800c6bc <HAL_RTC_Init+0x100>)
 800c62a:	400b      	ands	r3, r1
 800c62c:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	6899      	ldr	r1, [r3, #8]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	685a      	ldr	r2, [r3, #4]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	691b      	ldr	r3, [r3, #16]
 800c63c:	431a      	orrs	r2, r3
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	699b      	ldr	r3, [r3, #24]
 800c642:	431a      	orrs	r2, r3
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	430a      	orrs	r2, r1
 800c64a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	689b      	ldr	r3, [r3, #8]
 800c650:	0419      	lsls	r1, r3, #16
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	68da      	ldr	r2, [r3, #12]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	430a      	orrs	r2, r1
 800c65c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f000 fa56 	bl	800cb10 <RTC_ExitInitMode>
 800c664:	4603      	mov	r3, r0
 800c666:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800c668:	7bfb      	ldrb	r3, [r7, #15]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d113      	bne.n	800c696 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f022 0203 	bic.w	r2, r2, #3
 800c67c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	69da      	ldr	r2, [r3, #28]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	695b      	ldr	r3, [r3, #20]
 800c68c:	431a      	orrs	r2, r3
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	430a      	orrs	r2, r1
 800c694:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	22ff      	movs	r2, #255	; 0xff
 800c69c:	625a      	str	r2, [r3, #36]	; 0x24
 800c69e:	e001      	b.n	800c6a4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c6a4:	7bfb      	ldrb	r3, [r7, #15]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d103      	bne.n	800c6b2 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c6b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3710      	adds	r7, #16
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	ff8fffbf 	.word	0xff8fffbf

0800c6c0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c6c0:	b590      	push	{r4, r7, lr}
 800c6c2:	b087      	sub	sp, #28
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	60f8      	str	r0, [r7, #12]
 800c6c8:	60b9      	str	r1, [r7, #8]
 800c6ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d101      	bne.n	800c6da <HAL_RTC_SetTime+0x1a>
 800c6d6:	2302      	movs	r3, #2
 800c6d8:	e089      	b.n	800c7ee <HAL_RTC_SetTime+0x12e>
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	2201      	movs	r2, #1
 800c6de:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2202      	movs	r2, #2
 800c6e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	22ca      	movs	r2, #202	; 0xca
 800c6f0:	625a      	str	r2, [r3, #36]	; 0x24
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	2253      	movs	r2, #83	; 0x53
 800c6f8:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c6fa:	68f8      	ldr	r0, [r7, #12]
 800c6fc:	f000 f9d4 	bl	800caa8 <RTC_EnterInitMode>
 800c700:	4603      	mov	r3, r0
 800c702:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c704:	7cfb      	ldrb	r3, [r7, #19]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d161      	bne.n	800c7ce <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d126      	bne.n	800c75e <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	689b      	ldr	r3, [r3, #8]
 800c716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d102      	bne.n	800c724 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	2200      	movs	r2, #0
 800c722:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	4618      	mov	r0, r3
 800c72a:	f000 fa2f 	bl	800cb8c <RTC_ByteToBcd2>
 800c72e:	4603      	mov	r3, r0
 800c730:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	785b      	ldrb	r3, [r3, #1]
 800c736:	4618      	mov	r0, r3
 800c738:	f000 fa28 	bl	800cb8c <RTC_ByteToBcd2>
 800c73c:	4603      	mov	r3, r0
 800c73e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c740:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	789b      	ldrb	r3, [r3, #2]
 800c746:	4618      	mov	r0, r3
 800c748:	f000 fa20 	bl	800cb8c <RTC_ByteToBcd2>
 800c74c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c74e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	78db      	ldrb	r3, [r3, #3]
 800c756:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c758:	4313      	orrs	r3, r2
 800c75a:	617b      	str	r3, [r7, #20]
 800c75c:	e018      	b.n	800c790 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	689b      	ldr	r3, [r3, #8]
 800c764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d102      	bne.n	800c772 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	2200      	movs	r2, #0
 800c770:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	785b      	ldrb	r3, [r3, #1]
 800c77c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c77e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c780:	68ba      	ldr	r2, [r7, #8]
 800c782:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c784:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	78db      	ldrb	r3, [r3, #3]
 800c78a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c78c:	4313      	orrs	r3, r2
 800c78e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681a      	ldr	r2, [r3, #0]
 800c794:	6979      	ldr	r1, [r7, #20]
 800c796:	4b18      	ldr	r3, [pc, #96]	; (800c7f8 <HAL_RTC_SetTime+0x138>)
 800c798:	400b      	ands	r3, r1
 800c79a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	689a      	ldr	r2, [r3, #8]
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c7aa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	6899      	ldr	r1, [r3, #8]
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	68da      	ldr	r2, [r3, #12]
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	691b      	ldr	r3, [r3, #16]
 800c7ba:	431a      	orrs	r2, r3
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	430a      	orrs	r2, r1
 800c7c2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c7c4:	68f8      	ldr	r0, [r7, #12]
 800c7c6:	f000 f9a3 	bl	800cb10 <RTC_ExitInitMode>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	22ff      	movs	r2, #255	; 0xff
 800c7d4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c7d6:	7cfb      	ldrb	r3, [r7, #19]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d103      	bne.n	800c7e4 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	2201      	movs	r2, #1
 800c7e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c7ec:	7cfb      	ldrb	r3, [r7, #19]
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	371c      	adds	r7, #28
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd90      	pop	{r4, r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	007f7f7f 	.word	0x007f7f7f

0800c7fc <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b086      	sub	sp, #24
 800c800:	af00      	add	r7, sp, #0
 800c802:	60f8      	str	r0, [r7, #12]
 800c804:	60b9      	str	r1, [r7, #8]
 800c806:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	691b      	ldr	r3, [r3, #16]
 800c818:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	681a      	ldr	r2, [r3, #0]
 800c826:	4b22      	ldr	r3, [pc, #136]	; (800c8b0 <HAL_RTC_GetTime+0xb4>)
 800c828:	4013      	ands	r3, r2
 800c82a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	0c1b      	lsrs	r3, r3, #16
 800c830:	b2db      	uxtb	r3, r3
 800c832:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c836:	b2da      	uxtb	r2, r3
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	0a1b      	lsrs	r3, r3, #8
 800c840:	b2db      	uxtb	r3, r3
 800c842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c846:	b2da      	uxtb	r2, r3
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c854:	b2da      	uxtb	r2, r3
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	0d9b      	lsrs	r3, r3, #22
 800c85e:	b2db      	uxtb	r3, r3
 800c860:	f003 0301 	and.w	r3, r3, #1
 800c864:	b2da      	uxtb	r2, r3
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d11a      	bne.n	800c8a6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	4618      	mov	r0, r3
 800c876:	f000 f9a9 	bl	800cbcc <RTC_Bcd2ToByte>
 800c87a:	4603      	mov	r3, r0
 800c87c:	461a      	mov	r2, r3
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	785b      	ldrb	r3, [r3, #1]
 800c886:	4618      	mov	r0, r3
 800c888:	f000 f9a0 	bl	800cbcc <RTC_Bcd2ToByte>
 800c88c:	4603      	mov	r3, r0
 800c88e:	461a      	mov	r2, r3
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	789b      	ldrb	r3, [r3, #2]
 800c898:	4618      	mov	r0, r3
 800c89a:	f000 f997 	bl	800cbcc <RTC_Bcd2ToByte>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c8a6:	2300      	movs	r3, #0
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3718      	adds	r7, #24
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	007f7f7f 	.word	0x007f7f7f

0800c8b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c8b4:	b590      	push	{r4, r7, lr}
 800c8b6:	b087      	sub	sp, #28
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	60f8      	str	r0, [r7, #12]
 800c8bc:	60b9      	str	r1, [r7, #8]
 800c8be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d101      	bne.n	800c8ce <HAL_RTC_SetDate+0x1a>
 800c8ca:	2302      	movs	r3, #2
 800c8cc:	e073      	b.n	800c9b6 <HAL_RTC_SetDate+0x102>
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	2202      	movs	r2, #2
 800c8da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d10e      	bne.n	800c902 <HAL_RTC_SetDate+0x4e>
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	785b      	ldrb	r3, [r3, #1]
 800c8e8:	f003 0310 	and.w	r3, r3, #16
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d008      	beq.n	800c902 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	785b      	ldrb	r3, [r3, #1]
 800c8f4:	f023 0310 	bic.w	r3, r3, #16
 800c8f8:	b2db      	uxtb	r3, r3
 800c8fa:	330a      	adds	r3, #10
 800c8fc:	b2da      	uxtb	r2, r3
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d11c      	bne.n	800c942 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	78db      	ldrb	r3, [r3, #3]
 800c90c:	4618      	mov	r0, r3
 800c90e:	f000 f93d 	bl	800cb8c <RTC_ByteToBcd2>
 800c912:	4603      	mov	r3, r0
 800c914:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	785b      	ldrb	r3, [r3, #1]
 800c91a:	4618      	mov	r0, r3
 800c91c:	f000 f936 	bl	800cb8c <RTC_ByteToBcd2>
 800c920:	4603      	mov	r3, r0
 800c922:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c924:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	789b      	ldrb	r3, [r3, #2]
 800c92a:	4618      	mov	r0, r3
 800c92c:	f000 f92e 	bl	800cb8c <RTC_ByteToBcd2>
 800c930:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c932:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c93c:	4313      	orrs	r3, r2
 800c93e:	617b      	str	r3, [r7, #20]
 800c940:	e00e      	b.n	800c960 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	78db      	ldrb	r3, [r3, #3]
 800c946:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	785b      	ldrb	r3, [r3, #1]
 800c94c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c94e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800c950:	68ba      	ldr	r2, [r7, #8]
 800c952:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c954:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c95c:	4313      	orrs	r3, r2
 800c95e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	22ca      	movs	r2, #202	; 0xca
 800c966:	625a      	str	r2, [r3, #36]	; 0x24
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	2253      	movs	r2, #83	; 0x53
 800c96e:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c970:	68f8      	ldr	r0, [r7, #12]
 800c972:	f000 f899 	bl	800caa8 <RTC_EnterInitMode>
 800c976:	4603      	mov	r3, r0
 800c978:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c97a:	7cfb      	ldrb	r3, [r7, #19]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d10a      	bne.n	800c996 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681a      	ldr	r2, [r3, #0]
 800c984:	6979      	ldr	r1, [r7, #20]
 800c986:	4b0e      	ldr	r3, [pc, #56]	; (800c9c0 <HAL_RTC_SetDate+0x10c>)
 800c988:	400b      	ands	r3, r1
 800c98a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c98c:	68f8      	ldr	r0, [r7, #12]
 800c98e:	f000 f8bf 	bl	800cb10 <RTC_ExitInitMode>
 800c992:	4603      	mov	r3, r0
 800c994:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	22ff      	movs	r2, #255	; 0xff
 800c99c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c99e:	7cfb      	ldrb	r3, [r7, #19]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d103      	bne.n	800c9ac <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c9b4:	7cfb      	ldrb	r3, [r7, #19]


}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	371c      	adds	r7, #28
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd90      	pop	{r4, r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	00ffff3f 	.word	0x00ffff3f

0800c9c4 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b086      	sub	sp, #24
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	60f8      	str	r0, [r7, #12]
 800c9cc:	60b9      	str	r1, [r7, #8]
 800c9ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	685a      	ldr	r2, [r3, #4]
 800c9d6:	4b21      	ldr	r3, [pc, #132]	; (800ca5c <HAL_RTC_GetDate+0x98>)
 800c9d8:	4013      	ands	r3, r2
 800c9da:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	0c1b      	lsrs	r3, r3, #16
 800c9e0:	b2da      	uxtb	r2, r3
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	0a1b      	lsrs	r3, r3, #8
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	f003 031f 	and.w	r3, r3, #31
 800c9f0:	b2da      	uxtb	r2, r3
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	b2db      	uxtb	r3, r3
 800c9fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9fe:	b2da      	uxtb	r2, r3
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	0b5b      	lsrs	r3, r3, #13
 800ca08:	b2db      	uxtb	r3, r3
 800ca0a:	f003 0307 	and.w	r3, r3, #7
 800ca0e:	b2da      	uxtb	r2, r3
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d11a      	bne.n	800ca50 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	78db      	ldrb	r3, [r3, #3]
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f000 f8d4 	bl	800cbcc <RTC_Bcd2ToByte>
 800ca24:	4603      	mov	r3, r0
 800ca26:	461a      	mov	r2, r3
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	785b      	ldrb	r3, [r3, #1]
 800ca30:	4618      	mov	r0, r3
 800ca32:	f000 f8cb 	bl	800cbcc <RTC_Bcd2ToByte>
 800ca36:	4603      	mov	r3, r0
 800ca38:	461a      	mov	r2, r3
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	789b      	ldrb	r3, [r3, #2]
 800ca42:	4618      	mov	r0, r3
 800ca44:	f000 f8c2 	bl	800cbcc <RTC_Bcd2ToByte>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ca50:	2300      	movs	r3, #0
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3718      	adds	r7, #24
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}
 800ca5a:	bf00      	nop
 800ca5c:	00ffff3f 	.word	0x00ffff3f

0800ca60 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b084      	sub	sp, #16
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	4a0d      	ldr	r2, [pc, #52]	; (800caa4 <HAL_RTC_WaitForSynchro+0x44>)
 800ca6e:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800ca70:	f7f6 fda6 	bl	80035c0 <HAL_GetTick>
 800ca74:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ca76:	e009      	b.n	800ca8c <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ca78:	f7f6 fda2 	bl	80035c0 <HAL_GetTick>
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	1ad3      	subs	r3, r2, r3
 800ca82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ca86:	d901      	bls.n	800ca8c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800ca88:	2303      	movs	r3, #3
 800ca8a:	e007      	b.n	800ca9c <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	68db      	ldr	r3, [r3, #12]
 800ca92:	f003 0320 	and.w	r3, r3, #32
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d0ee      	beq.n	800ca78 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800ca9a:	2300      	movs	r3, #0
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3710      	adds	r7, #16
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	0003ff5f 	.word	0x0003ff5f

0800caa8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b084      	sub	sp, #16
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cab0:	2300      	movs	r3, #0
 800cab2:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	68db      	ldr	r3, [r3, #12]
 800caba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d120      	bne.n	800cb04 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800caca:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800cacc:	f7f6 fd78 	bl	80035c0 <HAL_GetTick>
 800cad0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cad2:	e00d      	b.n	800caf0 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800cad4:	f7f6 fd74 	bl	80035c0 <HAL_GetTick>
 800cad8:	4602      	mov	r2, r0
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	1ad3      	subs	r3, r2, r3
 800cade:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cae2:	d905      	bls.n	800caf0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800cae4:	2303      	movs	r3, #3
 800cae6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2203      	movs	r2, #3
 800caec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	68db      	ldr	r3, [r3, #12]
 800caf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d102      	bne.n	800cb04 <RTC_EnterInitMode+0x5c>
 800cafe:	7bfb      	ldrb	r3, [r7, #15]
 800cb00:	2b03      	cmp	r3, #3
 800cb02:	d1e7      	bne.n	800cad4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800cb04:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3710      	adds	r7, #16
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
	...

0800cb10 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800cb1c:	4b1a      	ldr	r3, [pc, #104]	; (800cb88 <RTC_ExitInitMode+0x78>)
 800cb1e:	68db      	ldr	r3, [r3, #12]
 800cb20:	4a19      	ldr	r2, [pc, #100]	; (800cb88 <RTC_ExitInitMode+0x78>)
 800cb22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb26:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800cb28:	4b17      	ldr	r3, [pc, #92]	; (800cb88 <RTC_ExitInitMode+0x78>)
 800cb2a:	689b      	ldr	r3, [r3, #8]
 800cb2c:	f003 0320 	and.w	r3, r3, #32
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d10c      	bne.n	800cb4e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f7ff ff93 	bl	800ca60 <HAL_RTC_WaitForSynchro>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d01e      	beq.n	800cb7e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2203      	movs	r2, #3
 800cb44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800cb48:	2303      	movs	r3, #3
 800cb4a:	73fb      	strb	r3, [r7, #15]
 800cb4c:	e017      	b.n	800cb7e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cb4e:	4b0e      	ldr	r3, [pc, #56]	; (800cb88 <RTC_ExitInitMode+0x78>)
 800cb50:	689b      	ldr	r3, [r3, #8]
 800cb52:	4a0d      	ldr	r2, [pc, #52]	; (800cb88 <RTC_ExitInitMode+0x78>)
 800cb54:	f023 0320 	bic.w	r3, r3, #32
 800cb58:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f7ff ff80 	bl	800ca60 <HAL_RTC_WaitForSynchro>
 800cb60:	4603      	mov	r3, r0
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d005      	beq.n	800cb72 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2203      	movs	r2, #3
 800cb6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800cb6e:	2303      	movs	r3, #3
 800cb70:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cb72:	4b05      	ldr	r3, [pc, #20]	; (800cb88 <RTC_ExitInitMode+0x78>)
 800cb74:	689b      	ldr	r3, [r3, #8]
 800cb76:	4a04      	ldr	r2, [pc, #16]	; (800cb88 <RTC_ExitInitMode+0x78>)
 800cb78:	f043 0320 	orr.w	r3, r3, #32
 800cb7c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800cb7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3710      	adds	r7, #16
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}
 800cb88:	58004000 	.word	0x58004000

0800cb8c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b085      	sub	sp, #20
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	4603      	mov	r3, r0
 800cb94:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800cb96:	2300      	movs	r3, #0
 800cb98:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800cb9a:	79fb      	ldrb	r3, [r7, #7]
 800cb9c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800cb9e:	e005      	b.n	800cbac <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	3301      	adds	r3, #1
 800cba4:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800cba6:	7afb      	ldrb	r3, [r7, #11]
 800cba8:	3b0a      	subs	r3, #10
 800cbaa:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800cbac:	7afb      	ldrb	r3, [r7, #11]
 800cbae:	2b09      	cmp	r3, #9
 800cbb0:	d8f6      	bhi.n	800cba0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	011b      	lsls	r3, r3, #4
 800cbb8:	b2da      	uxtb	r2, r3
 800cbba:	7afb      	ldrb	r3, [r7, #11]
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	b2db      	uxtb	r3, r3
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3714      	adds	r7, #20
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr

0800cbcc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b085      	sub	sp, #20
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800cbd6:	79fb      	ldrb	r3, [r7, #7]
 800cbd8:	091b      	lsrs	r3, r3, #4
 800cbda:	b2db      	uxtb	r3, r3
 800cbdc:	461a      	mov	r2, r3
 800cbde:	0092      	lsls	r2, r2, #2
 800cbe0:	4413      	add	r3, r2
 800cbe2:	005b      	lsls	r3, r3, #1
 800cbe4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800cbe6:	79fb      	ldrb	r3, [r7, #7]
 800cbe8:	f003 030f 	and.w	r3, r3, #15
 800cbec:	b2da      	uxtb	r2, r3
 800cbee:	7bfb      	ldrb	r3, [r7, #15]
 800cbf0:	4413      	add	r3, r2
 800cbf2:	b2db      	uxtb	r3, r3
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3714      	adds	r7, #20
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfe:	4770      	bx	lr

0800cc00 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d101      	bne.n	800cc12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cc0e:	2301      	movs	r3, #1
 800cc10:	e10f      	b.n	800ce32 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2200      	movs	r2, #0
 800cc16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4a87      	ldr	r2, [pc, #540]	; (800ce3c <HAL_SPI_Init+0x23c>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d00f      	beq.n	800cc42 <HAL_SPI_Init+0x42>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	4a86      	ldr	r2, [pc, #536]	; (800ce40 <HAL_SPI_Init+0x240>)
 800cc28:	4293      	cmp	r3, r2
 800cc2a:	d00a      	beq.n	800cc42 <HAL_SPI_Init+0x42>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	4a84      	ldr	r2, [pc, #528]	; (800ce44 <HAL_SPI_Init+0x244>)
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d005      	beq.n	800cc42 <HAL_SPI_Init+0x42>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	68db      	ldr	r3, [r3, #12]
 800cc3a:	2b0f      	cmp	r3, #15
 800cc3c:	d901      	bls.n	800cc42 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800cc3e:	2301      	movs	r3, #1
 800cc40:	e0f7      	b.n	800ce32 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 f900 	bl	800ce48 <SPI_GetPacketSize>
 800cc48:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	4a7b      	ldr	r2, [pc, #492]	; (800ce3c <HAL_SPI_Init+0x23c>)
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d00c      	beq.n	800cc6e <HAL_SPI_Init+0x6e>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4a79      	ldr	r2, [pc, #484]	; (800ce40 <HAL_SPI_Init+0x240>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d007      	beq.n	800cc6e <HAL_SPI_Init+0x6e>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	4a78      	ldr	r2, [pc, #480]	; (800ce44 <HAL_SPI_Init+0x244>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d002      	beq.n	800cc6e <HAL_SPI_Init+0x6e>
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2b08      	cmp	r3, #8
 800cc6c:	d811      	bhi.n	800cc92 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cc72:	4a72      	ldr	r2, [pc, #456]	; (800ce3c <HAL_SPI_Init+0x23c>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d009      	beq.n	800cc8c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a70      	ldr	r2, [pc, #448]	; (800ce40 <HAL_SPI_Init+0x240>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d004      	beq.n	800cc8c <HAL_SPI_Init+0x8c>
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	4a6f      	ldr	r2, [pc, #444]	; (800ce44 <HAL_SPI_Init+0x244>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d104      	bne.n	800cc96 <HAL_SPI_Init+0x96>
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2b10      	cmp	r3, #16
 800cc90:	d901      	bls.n	800cc96 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800cc92:	2301      	movs	r3, #1
 800cc94:	e0cd      	b.n	800ce32 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d106      	bne.n	800ccb0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2200      	movs	r2, #0
 800cca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f7f5 ffb8 	bl	8002c20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2202      	movs	r2, #2
 800ccb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	681a      	ldr	r2, [r3, #0]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f022 0201 	bic.w	r2, r2, #1
 800ccc6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	689b      	ldr	r3, [r3, #8]
 800ccce:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ccd2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	699b      	ldr	r3, [r3, #24]
 800ccd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ccdc:	d119      	bne.n	800cd12 <HAL_SPI_Init+0x112>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	685b      	ldr	r3, [r3, #4]
 800cce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cce6:	d103      	bne.n	800ccf0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d008      	beq.n	800cd02 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d10c      	bne.n	800cd12 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ccfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd00:	d107      	bne.n	800cd12 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	681a      	ldr	r2, [r3, #0]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cd10:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d00f      	beq.n	800cd3e <HAL_SPI_Init+0x13e>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	68db      	ldr	r3, [r3, #12]
 800cd22:	2b06      	cmp	r3, #6
 800cd24:	d90b      	bls.n	800cd3e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	430a      	orrs	r2, r1
 800cd3a:	601a      	str	r2, [r3, #0]
 800cd3c:	e007      	b.n	800cd4e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cd4c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	69da      	ldr	r2, [r3, #28]
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd56:	431a      	orrs	r2, r3
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	431a      	orrs	r2, r3
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd60:	ea42 0103 	orr.w	r1, r2, r3
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	68da      	ldr	r2, [r3, #12]
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	430a      	orrs	r2, r1
 800cd6e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd78:	431a      	orrs	r2, r3
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd7e:	431a      	orrs	r2, r3
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	699b      	ldr	r3, [r3, #24]
 800cd84:	431a      	orrs	r2, r3
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	691b      	ldr	r3, [r3, #16]
 800cd8a:	431a      	orrs	r2, r3
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	695b      	ldr	r3, [r3, #20]
 800cd90:	431a      	orrs	r2, r3
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6a1b      	ldr	r3, [r3, #32]
 800cd96:	431a      	orrs	r2, r3
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	431a      	orrs	r2, r3
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cda2:	431a      	orrs	r2, r3
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	689b      	ldr	r3, [r3, #8]
 800cda8:	431a      	orrs	r2, r3
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cdae:	ea42 0103 	orr.w	r1, r2, r3
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	430a      	orrs	r2, r1
 800cdbc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	685b      	ldr	r3, [r3, #4]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d113      	bne.n	800cdee <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	689b      	ldr	r3, [r3, #8]
 800cdcc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cdd8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	689b      	ldr	r3, [r3, #8]
 800cde0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cdec:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f022 0201 	bic.w	r2, r2, #1
 800cdfc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d00a      	beq.n	800ce20 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	430a      	orrs	r2, r1
 800ce1e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2200      	movs	r2, #0
 800ce24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ce30:	2300      	movs	r3, #0
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3710      	adds	r7, #16
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	40013000 	.word	0x40013000
 800ce40:	40003800 	.word	0x40003800
 800ce44:	40003c00 	.word	0x40003c00

0800ce48 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b085      	sub	sp, #20
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce54:	095b      	lsrs	r3, r3, #5
 800ce56:	3301      	adds	r3, #1
 800ce58:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	68db      	ldr	r3, [r3, #12]
 800ce5e:	3301      	adds	r3, #1
 800ce60:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	3307      	adds	r3, #7
 800ce66:	08db      	lsrs	r3, r3, #3
 800ce68:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	68fa      	ldr	r2, [r7, #12]
 800ce6e:	fb02 f303 	mul.w	r3, r2, r3
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3714      	adds	r7, #20
 800ce76:	46bd      	mov	sp, r7
 800ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7c:	4770      	bx	lr

0800ce7e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ce7e:	b580      	push	{r7, lr}
 800ce80:	b082      	sub	sp, #8
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d101      	bne.n	800ce90 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	e049      	b.n	800cf24 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d106      	bne.n	800ceaa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f7f5 ff71 	bl	8002d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2202      	movs	r2, #2
 800ceae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681a      	ldr	r2, [r3, #0]
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	3304      	adds	r3, #4
 800ceba:	4619      	mov	r1, r3
 800cebc:	4610      	mov	r0, r2
 800cebe:	f000 ff41 	bl	800dd44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2201      	movs	r2, #1
 800cec6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2201      	movs	r2, #1
 800cece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2201      	movs	r2, #1
 800ced6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2201      	movs	r2, #1
 800cede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2201      	movs	r2, #1
 800cee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2201      	movs	r2, #1
 800ceee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2201      	movs	r2, #1
 800cef6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2201      	movs	r2, #1
 800cefe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2201      	movs	r2, #1
 800cf06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2201      	movs	r2, #1
 800cf16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2201      	movs	r2, #1
 800cf1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cf22:	2300      	movs	r3, #0
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3708      	adds	r7, #8
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	b085      	sub	sp, #20
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf3a:	b2db      	uxtb	r3, r3
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d001      	beq.n	800cf44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800cf40:	2301      	movs	r3, #1
 800cf42:	e04c      	b.n	800cfde <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2202      	movs	r2, #2
 800cf48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4a26      	ldr	r2, [pc, #152]	; (800cfec <HAL_TIM_Base_Start+0xc0>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d022      	beq.n	800cf9c <HAL_TIM_Base_Start+0x70>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf5e:	d01d      	beq.n	800cf9c <HAL_TIM_Base_Start+0x70>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4a22      	ldr	r2, [pc, #136]	; (800cff0 <HAL_TIM_Base_Start+0xc4>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d018      	beq.n	800cf9c <HAL_TIM_Base_Start+0x70>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4a21      	ldr	r2, [pc, #132]	; (800cff4 <HAL_TIM_Base_Start+0xc8>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d013      	beq.n	800cf9c <HAL_TIM_Base_Start+0x70>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4a1f      	ldr	r2, [pc, #124]	; (800cff8 <HAL_TIM_Base_Start+0xcc>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d00e      	beq.n	800cf9c <HAL_TIM_Base_Start+0x70>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4a1e      	ldr	r2, [pc, #120]	; (800cffc <HAL_TIM_Base_Start+0xd0>)
 800cf84:	4293      	cmp	r3, r2
 800cf86:	d009      	beq.n	800cf9c <HAL_TIM_Base_Start+0x70>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	4a1c      	ldr	r2, [pc, #112]	; (800d000 <HAL_TIM_Base_Start+0xd4>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d004      	beq.n	800cf9c <HAL_TIM_Base_Start+0x70>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4a1b      	ldr	r2, [pc, #108]	; (800d004 <HAL_TIM_Base_Start+0xd8>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d115      	bne.n	800cfc8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	689a      	ldr	r2, [r3, #8]
 800cfa2:	4b19      	ldr	r3, [pc, #100]	; (800d008 <HAL_TIM_Base_Start+0xdc>)
 800cfa4:	4013      	ands	r3, r2
 800cfa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2b06      	cmp	r3, #6
 800cfac:	d015      	beq.n	800cfda <HAL_TIM_Base_Start+0xae>
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfb4:	d011      	beq.n	800cfda <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	681a      	ldr	r2, [r3, #0]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f042 0201 	orr.w	r2, r2, #1
 800cfc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cfc6:	e008      	b.n	800cfda <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f042 0201 	orr.w	r2, r2, #1
 800cfd6:	601a      	str	r2, [r3, #0]
 800cfd8:	e000      	b.n	800cfdc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cfda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cfdc:	2300      	movs	r3, #0
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3714      	adds	r7, #20
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop
 800cfec:	40010000 	.word	0x40010000
 800cff0:	40000400 	.word	0x40000400
 800cff4:	40000800 	.word	0x40000800
 800cff8:	40000c00 	.word	0x40000c00
 800cffc:	40010400 	.word	0x40010400
 800d000:	40001800 	.word	0x40001800
 800d004:	40014000 	.word	0x40014000
 800d008:	00010007 	.word	0x00010007

0800d00c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	6a1a      	ldr	r2, [r3, #32]
 800d01a:	f241 1311 	movw	r3, #4369	; 0x1111
 800d01e:	4013      	ands	r3, r2
 800d020:	2b00      	cmp	r3, #0
 800d022:	d10f      	bne.n	800d044 <HAL_TIM_Base_Stop+0x38>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	6a1a      	ldr	r2, [r3, #32]
 800d02a:	f240 4344 	movw	r3, #1092	; 0x444
 800d02e:	4013      	ands	r3, r2
 800d030:	2b00      	cmp	r3, #0
 800d032:	d107      	bne.n	800d044 <HAL_TIM_Base_Stop+0x38>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	681a      	ldr	r2, [r3, #0]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f022 0201 	bic.w	r2, r2, #1
 800d042:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2201      	movs	r2, #1
 800d048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d04c:	2300      	movs	r3, #0
}
 800d04e:	4618      	mov	r0, r3
 800d050:	370c      	adds	r7, #12
 800d052:	46bd      	mov	sp, r7
 800d054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d058:	4770      	bx	lr
	...

0800d05c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b085      	sub	sp, #20
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d06a:	b2db      	uxtb	r3, r3
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	d001      	beq.n	800d074 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d070:	2301      	movs	r3, #1
 800d072:	e054      	b.n	800d11e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2202      	movs	r2, #2
 800d078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	68da      	ldr	r2, [r3, #12]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f042 0201 	orr.w	r2, r2, #1
 800d08a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a26      	ldr	r2, [pc, #152]	; (800d12c <HAL_TIM_Base_Start_IT+0xd0>)
 800d092:	4293      	cmp	r3, r2
 800d094:	d022      	beq.n	800d0dc <HAL_TIM_Base_Start_IT+0x80>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d09e:	d01d      	beq.n	800d0dc <HAL_TIM_Base_Start_IT+0x80>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4a22      	ldr	r2, [pc, #136]	; (800d130 <HAL_TIM_Base_Start_IT+0xd4>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d018      	beq.n	800d0dc <HAL_TIM_Base_Start_IT+0x80>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	4a21      	ldr	r2, [pc, #132]	; (800d134 <HAL_TIM_Base_Start_IT+0xd8>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d013      	beq.n	800d0dc <HAL_TIM_Base_Start_IT+0x80>
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a1f      	ldr	r2, [pc, #124]	; (800d138 <HAL_TIM_Base_Start_IT+0xdc>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d00e      	beq.n	800d0dc <HAL_TIM_Base_Start_IT+0x80>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	4a1e      	ldr	r2, [pc, #120]	; (800d13c <HAL_TIM_Base_Start_IT+0xe0>)
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d009      	beq.n	800d0dc <HAL_TIM_Base_Start_IT+0x80>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4a1c      	ldr	r2, [pc, #112]	; (800d140 <HAL_TIM_Base_Start_IT+0xe4>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d004      	beq.n	800d0dc <HAL_TIM_Base_Start_IT+0x80>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	4a1b      	ldr	r2, [pc, #108]	; (800d144 <HAL_TIM_Base_Start_IT+0xe8>)
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	d115      	bne.n	800d108 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	689a      	ldr	r2, [r3, #8]
 800d0e2:	4b19      	ldr	r3, [pc, #100]	; (800d148 <HAL_TIM_Base_Start_IT+0xec>)
 800d0e4:	4013      	ands	r3, r2
 800d0e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2b06      	cmp	r3, #6
 800d0ec:	d015      	beq.n	800d11a <HAL_TIM_Base_Start_IT+0xbe>
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0f4:	d011      	beq.n	800d11a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	681a      	ldr	r2, [r3, #0]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f042 0201 	orr.w	r2, r2, #1
 800d104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d106:	e008      	b.n	800d11a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	681a      	ldr	r2, [r3, #0]
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f042 0201 	orr.w	r2, r2, #1
 800d116:	601a      	str	r2, [r3, #0]
 800d118:	e000      	b.n	800d11c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d11a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d11c:	2300      	movs	r3, #0
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3714      	adds	r7, #20
 800d122:	46bd      	mov	sp, r7
 800d124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d128:	4770      	bx	lr
 800d12a:	bf00      	nop
 800d12c:	40010000 	.word	0x40010000
 800d130:	40000400 	.word	0x40000400
 800d134:	40000800 	.word	0x40000800
 800d138:	40000c00 	.word	0x40000c00
 800d13c:	40010400 	.word	0x40010400
 800d140:	40001800 	.word	0x40001800
 800d144:	40014000 	.word	0x40014000
 800d148:	00010007 	.word	0x00010007

0800d14c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b084      	sub	sp, #16
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d156:	2300      	movs	r3, #0
 800d158:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d109      	bne.n	800d174 <HAL_TIM_OC_Start_IT+0x28>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d166:	b2db      	uxtb	r3, r3
 800d168:	2b01      	cmp	r3, #1
 800d16a:	bf14      	ite	ne
 800d16c:	2301      	movne	r3, #1
 800d16e:	2300      	moveq	r3, #0
 800d170:	b2db      	uxtb	r3, r3
 800d172:	e03c      	b.n	800d1ee <HAL_TIM_OC_Start_IT+0xa2>
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	2b04      	cmp	r3, #4
 800d178:	d109      	bne.n	800d18e <HAL_TIM_OC_Start_IT+0x42>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d180:	b2db      	uxtb	r3, r3
 800d182:	2b01      	cmp	r3, #1
 800d184:	bf14      	ite	ne
 800d186:	2301      	movne	r3, #1
 800d188:	2300      	moveq	r3, #0
 800d18a:	b2db      	uxtb	r3, r3
 800d18c:	e02f      	b.n	800d1ee <HAL_TIM_OC_Start_IT+0xa2>
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	2b08      	cmp	r3, #8
 800d192:	d109      	bne.n	800d1a8 <HAL_TIM_OC_Start_IT+0x5c>
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d19a:	b2db      	uxtb	r3, r3
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	bf14      	ite	ne
 800d1a0:	2301      	movne	r3, #1
 800d1a2:	2300      	moveq	r3, #0
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	e022      	b.n	800d1ee <HAL_TIM_OC_Start_IT+0xa2>
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	2b0c      	cmp	r3, #12
 800d1ac:	d109      	bne.n	800d1c2 <HAL_TIM_OC_Start_IT+0x76>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d1b4:	b2db      	uxtb	r3, r3
 800d1b6:	2b01      	cmp	r3, #1
 800d1b8:	bf14      	ite	ne
 800d1ba:	2301      	movne	r3, #1
 800d1bc:	2300      	moveq	r3, #0
 800d1be:	b2db      	uxtb	r3, r3
 800d1c0:	e015      	b.n	800d1ee <HAL_TIM_OC_Start_IT+0xa2>
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	2b10      	cmp	r3, #16
 800d1c6:	d109      	bne.n	800d1dc <HAL_TIM_OC_Start_IT+0x90>
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d1ce:	b2db      	uxtb	r3, r3
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	bf14      	ite	ne
 800d1d4:	2301      	movne	r3, #1
 800d1d6:	2300      	moveq	r3, #0
 800d1d8:	b2db      	uxtb	r3, r3
 800d1da:	e008      	b.n	800d1ee <HAL_TIM_OC_Start_IT+0xa2>
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d1e2:	b2db      	uxtb	r3, r3
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	bf14      	ite	ne
 800d1e8:	2301      	movne	r3, #1
 800d1ea:	2300      	moveq	r3, #0
 800d1ec:	b2db      	uxtb	r3, r3
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d001      	beq.n	800d1f6 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	e0ec      	b.n	800d3d0 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d104      	bne.n	800d206 <HAL_TIM_OC_Start_IT+0xba>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2202      	movs	r2, #2
 800d200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d204:	e023      	b.n	800d24e <HAL_TIM_OC_Start_IT+0x102>
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	2b04      	cmp	r3, #4
 800d20a:	d104      	bne.n	800d216 <HAL_TIM_OC_Start_IT+0xca>
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2202      	movs	r2, #2
 800d210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d214:	e01b      	b.n	800d24e <HAL_TIM_OC_Start_IT+0x102>
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	2b08      	cmp	r3, #8
 800d21a:	d104      	bne.n	800d226 <HAL_TIM_OC_Start_IT+0xda>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2202      	movs	r2, #2
 800d220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d224:	e013      	b.n	800d24e <HAL_TIM_OC_Start_IT+0x102>
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	2b0c      	cmp	r3, #12
 800d22a:	d104      	bne.n	800d236 <HAL_TIM_OC_Start_IT+0xea>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2202      	movs	r2, #2
 800d230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d234:	e00b      	b.n	800d24e <HAL_TIM_OC_Start_IT+0x102>
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	2b10      	cmp	r3, #16
 800d23a:	d104      	bne.n	800d246 <HAL_TIM_OC_Start_IT+0xfa>
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2202      	movs	r2, #2
 800d240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d244:	e003      	b.n	800d24e <HAL_TIM_OC_Start_IT+0x102>
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2202      	movs	r2, #2
 800d24a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	2b0c      	cmp	r3, #12
 800d252:	d841      	bhi.n	800d2d8 <HAL_TIM_OC_Start_IT+0x18c>
 800d254:	a201      	add	r2, pc, #4	; (adr r2, 800d25c <HAL_TIM_OC_Start_IT+0x110>)
 800d256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d25a:	bf00      	nop
 800d25c:	0800d291 	.word	0x0800d291
 800d260:	0800d2d9 	.word	0x0800d2d9
 800d264:	0800d2d9 	.word	0x0800d2d9
 800d268:	0800d2d9 	.word	0x0800d2d9
 800d26c:	0800d2a3 	.word	0x0800d2a3
 800d270:	0800d2d9 	.word	0x0800d2d9
 800d274:	0800d2d9 	.word	0x0800d2d9
 800d278:	0800d2d9 	.word	0x0800d2d9
 800d27c:	0800d2b5 	.word	0x0800d2b5
 800d280:	0800d2d9 	.word	0x0800d2d9
 800d284:	0800d2d9 	.word	0x0800d2d9
 800d288:	0800d2d9 	.word	0x0800d2d9
 800d28c:	0800d2c7 	.word	0x0800d2c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	68da      	ldr	r2, [r3, #12]
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f042 0202 	orr.w	r2, r2, #2
 800d29e:	60da      	str	r2, [r3, #12]
      break;
 800d2a0:	e01d      	b.n	800d2de <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	68da      	ldr	r2, [r3, #12]
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f042 0204 	orr.w	r2, r2, #4
 800d2b0:	60da      	str	r2, [r3, #12]
      break;
 800d2b2:	e014      	b.n	800d2de <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	68da      	ldr	r2, [r3, #12]
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	f042 0208 	orr.w	r2, r2, #8
 800d2c2:	60da      	str	r2, [r3, #12]
      break;
 800d2c4:	e00b      	b.n	800d2de <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	68da      	ldr	r2, [r3, #12]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	f042 0210 	orr.w	r2, r2, #16
 800d2d4:	60da      	str	r2, [r3, #12]
      break;
 800d2d6:	e002      	b.n	800d2de <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800d2d8:	2301      	movs	r3, #1
 800d2da:	73fb      	strb	r3, [r7, #15]
      break;
 800d2dc:	bf00      	nop
  }

  if (status == HAL_OK)
 800d2de:	7bfb      	ldrb	r3, [r7, #15]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d174      	bne.n	800d3ce <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	6839      	ldr	r1, [r7, #0]
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f001 f943 	bl	800e578 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4a38      	ldr	r2, [pc, #224]	; (800d3d8 <HAL_TIM_OC_Start_IT+0x28c>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d013      	beq.n	800d324 <HAL_TIM_OC_Start_IT+0x1d8>
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4a36      	ldr	r2, [pc, #216]	; (800d3dc <HAL_TIM_OC_Start_IT+0x290>)
 800d302:	4293      	cmp	r3, r2
 800d304:	d00e      	beq.n	800d324 <HAL_TIM_OC_Start_IT+0x1d8>
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4a35      	ldr	r2, [pc, #212]	; (800d3e0 <HAL_TIM_OC_Start_IT+0x294>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d009      	beq.n	800d324 <HAL_TIM_OC_Start_IT+0x1d8>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	4a33      	ldr	r2, [pc, #204]	; (800d3e4 <HAL_TIM_OC_Start_IT+0x298>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d004      	beq.n	800d324 <HAL_TIM_OC_Start_IT+0x1d8>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4a32      	ldr	r2, [pc, #200]	; (800d3e8 <HAL_TIM_OC_Start_IT+0x29c>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d101      	bne.n	800d328 <HAL_TIM_OC_Start_IT+0x1dc>
 800d324:	2301      	movs	r3, #1
 800d326:	e000      	b.n	800d32a <HAL_TIM_OC_Start_IT+0x1de>
 800d328:	2300      	movs	r3, #0
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d007      	beq.n	800d33e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d33c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	4a25      	ldr	r2, [pc, #148]	; (800d3d8 <HAL_TIM_OC_Start_IT+0x28c>)
 800d344:	4293      	cmp	r3, r2
 800d346:	d022      	beq.n	800d38e <HAL_TIM_OC_Start_IT+0x242>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d350:	d01d      	beq.n	800d38e <HAL_TIM_OC_Start_IT+0x242>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	4a25      	ldr	r2, [pc, #148]	; (800d3ec <HAL_TIM_OC_Start_IT+0x2a0>)
 800d358:	4293      	cmp	r3, r2
 800d35a:	d018      	beq.n	800d38e <HAL_TIM_OC_Start_IT+0x242>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4a23      	ldr	r2, [pc, #140]	; (800d3f0 <HAL_TIM_OC_Start_IT+0x2a4>)
 800d362:	4293      	cmp	r3, r2
 800d364:	d013      	beq.n	800d38e <HAL_TIM_OC_Start_IT+0x242>
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	4a22      	ldr	r2, [pc, #136]	; (800d3f4 <HAL_TIM_OC_Start_IT+0x2a8>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	d00e      	beq.n	800d38e <HAL_TIM_OC_Start_IT+0x242>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	4a19      	ldr	r2, [pc, #100]	; (800d3dc <HAL_TIM_OC_Start_IT+0x290>)
 800d376:	4293      	cmp	r3, r2
 800d378:	d009      	beq.n	800d38e <HAL_TIM_OC_Start_IT+0x242>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4a1e      	ldr	r2, [pc, #120]	; (800d3f8 <HAL_TIM_OC_Start_IT+0x2ac>)
 800d380:	4293      	cmp	r3, r2
 800d382:	d004      	beq.n	800d38e <HAL_TIM_OC_Start_IT+0x242>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	4a15      	ldr	r2, [pc, #84]	; (800d3e0 <HAL_TIM_OC_Start_IT+0x294>)
 800d38a:	4293      	cmp	r3, r2
 800d38c:	d115      	bne.n	800d3ba <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	689a      	ldr	r2, [r3, #8]
 800d394:	4b19      	ldr	r3, [pc, #100]	; (800d3fc <HAL_TIM_OC_Start_IT+0x2b0>)
 800d396:	4013      	ands	r3, r2
 800d398:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	2b06      	cmp	r3, #6
 800d39e:	d015      	beq.n	800d3cc <HAL_TIM_OC_Start_IT+0x280>
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3a6:	d011      	beq.n	800d3cc <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	681a      	ldr	r2, [r3, #0]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f042 0201 	orr.w	r2, r2, #1
 800d3b6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3b8:	e008      	b.n	800d3cc <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f042 0201 	orr.w	r2, r2, #1
 800d3c8:	601a      	str	r2, [r3, #0]
 800d3ca:	e000      	b.n	800d3ce <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3cc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d3ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3710      	adds	r7, #16
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}
 800d3d8:	40010000 	.word	0x40010000
 800d3dc:	40010400 	.word	0x40010400
 800d3e0:	40014000 	.word	0x40014000
 800d3e4:	40014400 	.word	0x40014400
 800d3e8:	40014800 	.word	0x40014800
 800d3ec:	40000400 	.word	0x40000400
 800d3f0:	40000800 	.word	0x40000800
 800d3f4:	40000c00 	.word	0x40000c00
 800d3f8:	40001800 	.word	0x40001800
 800d3fc:	00010007 	.word	0x00010007

0800d400 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b082      	sub	sp, #8
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d101      	bne.n	800d412 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d40e:	2301      	movs	r3, #1
 800d410:	e049      	b.n	800d4a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d418:	b2db      	uxtb	r3, r3
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d106      	bne.n	800d42c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2200      	movs	r2, #0
 800d422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f000 f841 	bl	800d4ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2202      	movs	r2, #2
 800d430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681a      	ldr	r2, [r3, #0]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	3304      	adds	r3, #4
 800d43c:	4619      	mov	r1, r3
 800d43e:	4610      	mov	r0, r2
 800d440:	f000 fc80 	bl	800dd44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2201      	movs	r2, #1
 800d448:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2201      	movs	r2, #1
 800d450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2201      	movs	r2, #1
 800d458:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2201      	movs	r2, #1
 800d460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2201      	movs	r2, #1
 800d468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2201      	movs	r2, #1
 800d470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2201      	movs	r2, #1
 800d478:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2201      	movs	r2, #1
 800d480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2201      	movs	r2, #1
 800d488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2201      	movs	r2, #1
 800d490:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2201      	movs	r2, #1
 800d498:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2201      	movs	r2, #1
 800d4a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d4a4:	2300      	movs	r3, #0
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3708      	adds	r7, #8
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}

0800d4ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d4ae:	b480      	push	{r7}
 800d4b0:	b083      	sub	sp, #12
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d4b6:	bf00      	nop
 800d4b8:	370c      	adds	r7, #12
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c0:	4770      	bx	lr
	...

0800d4c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b084      	sub	sp, #16
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d109      	bne.n	800d4e8 <HAL_TIM_PWM_Start+0x24>
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d4da:	b2db      	uxtb	r3, r3
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	bf14      	ite	ne
 800d4e0:	2301      	movne	r3, #1
 800d4e2:	2300      	moveq	r3, #0
 800d4e4:	b2db      	uxtb	r3, r3
 800d4e6:	e03c      	b.n	800d562 <HAL_TIM_PWM_Start+0x9e>
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	2b04      	cmp	r3, #4
 800d4ec:	d109      	bne.n	800d502 <HAL_TIM_PWM_Start+0x3e>
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d4f4:	b2db      	uxtb	r3, r3
 800d4f6:	2b01      	cmp	r3, #1
 800d4f8:	bf14      	ite	ne
 800d4fa:	2301      	movne	r3, #1
 800d4fc:	2300      	moveq	r3, #0
 800d4fe:	b2db      	uxtb	r3, r3
 800d500:	e02f      	b.n	800d562 <HAL_TIM_PWM_Start+0x9e>
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	2b08      	cmp	r3, #8
 800d506:	d109      	bne.n	800d51c <HAL_TIM_PWM_Start+0x58>
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d50e:	b2db      	uxtb	r3, r3
 800d510:	2b01      	cmp	r3, #1
 800d512:	bf14      	ite	ne
 800d514:	2301      	movne	r3, #1
 800d516:	2300      	moveq	r3, #0
 800d518:	b2db      	uxtb	r3, r3
 800d51a:	e022      	b.n	800d562 <HAL_TIM_PWM_Start+0x9e>
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	2b0c      	cmp	r3, #12
 800d520:	d109      	bne.n	800d536 <HAL_TIM_PWM_Start+0x72>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	2b01      	cmp	r3, #1
 800d52c:	bf14      	ite	ne
 800d52e:	2301      	movne	r3, #1
 800d530:	2300      	moveq	r3, #0
 800d532:	b2db      	uxtb	r3, r3
 800d534:	e015      	b.n	800d562 <HAL_TIM_PWM_Start+0x9e>
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	2b10      	cmp	r3, #16
 800d53a:	d109      	bne.n	800d550 <HAL_TIM_PWM_Start+0x8c>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d542:	b2db      	uxtb	r3, r3
 800d544:	2b01      	cmp	r3, #1
 800d546:	bf14      	ite	ne
 800d548:	2301      	movne	r3, #1
 800d54a:	2300      	moveq	r3, #0
 800d54c:	b2db      	uxtb	r3, r3
 800d54e:	e008      	b.n	800d562 <HAL_TIM_PWM_Start+0x9e>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d556:	b2db      	uxtb	r3, r3
 800d558:	2b01      	cmp	r3, #1
 800d55a:	bf14      	ite	ne
 800d55c:	2301      	movne	r3, #1
 800d55e:	2300      	moveq	r3, #0
 800d560:	b2db      	uxtb	r3, r3
 800d562:	2b00      	cmp	r3, #0
 800d564:	d001      	beq.n	800d56a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d566:	2301      	movs	r3, #1
 800d568:	e0a1      	b.n	800d6ae <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d104      	bne.n	800d57a <HAL_TIM_PWM_Start+0xb6>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2202      	movs	r2, #2
 800d574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d578:	e023      	b.n	800d5c2 <HAL_TIM_PWM_Start+0xfe>
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	2b04      	cmp	r3, #4
 800d57e:	d104      	bne.n	800d58a <HAL_TIM_PWM_Start+0xc6>
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2202      	movs	r2, #2
 800d584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d588:	e01b      	b.n	800d5c2 <HAL_TIM_PWM_Start+0xfe>
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	2b08      	cmp	r3, #8
 800d58e:	d104      	bne.n	800d59a <HAL_TIM_PWM_Start+0xd6>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2202      	movs	r2, #2
 800d594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d598:	e013      	b.n	800d5c2 <HAL_TIM_PWM_Start+0xfe>
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	2b0c      	cmp	r3, #12
 800d59e:	d104      	bne.n	800d5aa <HAL_TIM_PWM_Start+0xe6>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2202      	movs	r2, #2
 800d5a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d5a8:	e00b      	b.n	800d5c2 <HAL_TIM_PWM_Start+0xfe>
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	2b10      	cmp	r3, #16
 800d5ae:	d104      	bne.n	800d5ba <HAL_TIM_PWM_Start+0xf6>
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2202      	movs	r2, #2
 800d5b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d5b8:	e003      	b.n	800d5c2 <HAL_TIM_PWM_Start+0xfe>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2202      	movs	r2, #2
 800d5be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	6839      	ldr	r1, [r7, #0]
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f000 ffd4 	bl	800e578 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	4a38      	ldr	r2, [pc, #224]	; (800d6b8 <HAL_TIM_PWM_Start+0x1f4>)
 800d5d6:	4293      	cmp	r3, r2
 800d5d8:	d013      	beq.n	800d602 <HAL_TIM_PWM_Start+0x13e>
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	4a37      	ldr	r2, [pc, #220]	; (800d6bc <HAL_TIM_PWM_Start+0x1f8>)
 800d5e0:	4293      	cmp	r3, r2
 800d5e2:	d00e      	beq.n	800d602 <HAL_TIM_PWM_Start+0x13e>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	4a35      	ldr	r2, [pc, #212]	; (800d6c0 <HAL_TIM_PWM_Start+0x1fc>)
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d009      	beq.n	800d602 <HAL_TIM_PWM_Start+0x13e>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	4a34      	ldr	r2, [pc, #208]	; (800d6c4 <HAL_TIM_PWM_Start+0x200>)
 800d5f4:	4293      	cmp	r3, r2
 800d5f6:	d004      	beq.n	800d602 <HAL_TIM_PWM_Start+0x13e>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	4a32      	ldr	r2, [pc, #200]	; (800d6c8 <HAL_TIM_PWM_Start+0x204>)
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d101      	bne.n	800d606 <HAL_TIM_PWM_Start+0x142>
 800d602:	2301      	movs	r3, #1
 800d604:	e000      	b.n	800d608 <HAL_TIM_PWM_Start+0x144>
 800d606:	2300      	movs	r3, #0
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d007      	beq.n	800d61c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d61a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4a25      	ldr	r2, [pc, #148]	; (800d6b8 <HAL_TIM_PWM_Start+0x1f4>)
 800d622:	4293      	cmp	r3, r2
 800d624:	d022      	beq.n	800d66c <HAL_TIM_PWM_Start+0x1a8>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d62e:	d01d      	beq.n	800d66c <HAL_TIM_PWM_Start+0x1a8>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	4a25      	ldr	r2, [pc, #148]	; (800d6cc <HAL_TIM_PWM_Start+0x208>)
 800d636:	4293      	cmp	r3, r2
 800d638:	d018      	beq.n	800d66c <HAL_TIM_PWM_Start+0x1a8>
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	4a24      	ldr	r2, [pc, #144]	; (800d6d0 <HAL_TIM_PWM_Start+0x20c>)
 800d640:	4293      	cmp	r3, r2
 800d642:	d013      	beq.n	800d66c <HAL_TIM_PWM_Start+0x1a8>
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	4a22      	ldr	r2, [pc, #136]	; (800d6d4 <HAL_TIM_PWM_Start+0x210>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d00e      	beq.n	800d66c <HAL_TIM_PWM_Start+0x1a8>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	4a1a      	ldr	r2, [pc, #104]	; (800d6bc <HAL_TIM_PWM_Start+0x1f8>)
 800d654:	4293      	cmp	r3, r2
 800d656:	d009      	beq.n	800d66c <HAL_TIM_PWM_Start+0x1a8>
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	4a1e      	ldr	r2, [pc, #120]	; (800d6d8 <HAL_TIM_PWM_Start+0x214>)
 800d65e:	4293      	cmp	r3, r2
 800d660:	d004      	beq.n	800d66c <HAL_TIM_PWM_Start+0x1a8>
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	4a16      	ldr	r2, [pc, #88]	; (800d6c0 <HAL_TIM_PWM_Start+0x1fc>)
 800d668:	4293      	cmp	r3, r2
 800d66a:	d115      	bne.n	800d698 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	689a      	ldr	r2, [r3, #8]
 800d672:	4b1a      	ldr	r3, [pc, #104]	; (800d6dc <HAL_TIM_PWM_Start+0x218>)
 800d674:	4013      	ands	r3, r2
 800d676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	2b06      	cmp	r3, #6
 800d67c:	d015      	beq.n	800d6aa <HAL_TIM_PWM_Start+0x1e6>
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d684:	d011      	beq.n	800d6aa <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	681a      	ldr	r2, [r3, #0]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	f042 0201 	orr.w	r2, r2, #1
 800d694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d696:	e008      	b.n	800d6aa <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f042 0201 	orr.w	r2, r2, #1
 800d6a6:	601a      	str	r2, [r3, #0]
 800d6a8:	e000      	b.n	800d6ac <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d6ac:	2300      	movs	r3, #0
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3710      	adds	r7, #16
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}
 800d6b6:	bf00      	nop
 800d6b8:	40010000 	.word	0x40010000
 800d6bc:	40010400 	.word	0x40010400
 800d6c0:	40014000 	.word	0x40014000
 800d6c4:	40014400 	.word	0x40014400
 800d6c8:	40014800 	.word	0x40014800
 800d6cc:	40000400 	.word	0x40000400
 800d6d0:	40000800 	.word	0x40000800
 800d6d4:	40000c00 	.word	0x40000c00
 800d6d8:	40001800 	.word	0x40001800
 800d6dc:	00010007 	.word	0x00010007

0800d6e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b084      	sub	sp, #16
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	68db      	ldr	r3, [r3, #12]
 800d6ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	691b      	ldr	r3, [r3, #16]
 800d6f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	f003 0302 	and.w	r3, r3, #2
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d020      	beq.n	800d744 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	f003 0302 	and.w	r3, r3, #2
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d01b      	beq.n	800d744 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	f06f 0202 	mvn.w	r2, #2
 800d714:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2201      	movs	r2, #1
 800d71a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	699b      	ldr	r3, [r3, #24]
 800d722:	f003 0303 	and.w	r3, r3, #3
 800d726:	2b00      	cmp	r3, #0
 800d728:	d003      	beq.n	800d732 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f000 faec 	bl	800dd08 <HAL_TIM_IC_CaptureCallback>
 800d730:	e005      	b.n	800d73e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f7f2 ff56 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f000 faef 	bl	800dd1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2200      	movs	r2, #0
 800d742:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	f003 0304 	and.w	r3, r3, #4
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d020      	beq.n	800d790 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	f003 0304 	and.w	r3, r3, #4
 800d754:	2b00      	cmp	r3, #0
 800d756:	d01b      	beq.n	800d790 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	f06f 0204 	mvn.w	r2, #4
 800d760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2202      	movs	r2, #2
 800d766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	699b      	ldr	r3, [r3, #24]
 800d76e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d772:	2b00      	cmp	r3, #0
 800d774:	d003      	beq.n	800d77e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f000 fac6 	bl	800dd08 <HAL_TIM_IC_CaptureCallback>
 800d77c:	e005      	b.n	800d78a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f7f2 ff30 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f000 fac9 	bl	800dd1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2200      	movs	r2, #0
 800d78e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	f003 0308 	and.w	r3, r3, #8
 800d796:	2b00      	cmp	r3, #0
 800d798:	d020      	beq.n	800d7dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f003 0308 	and.w	r3, r3, #8
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d01b      	beq.n	800d7dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f06f 0208 	mvn.w	r2, #8
 800d7ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2204      	movs	r2, #4
 800d7b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	69db      	ldr	r3, [r3, #28]
 800d7ba:	f003 0303 	and.w	r3, r3, #3
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d003      	beq.n	800d7ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f000 faa0 	bl	800dd08 <HAL_TIM_IC_CaptureCallback>
 800d7c8:	e005      	b.n	800d7d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f7f2 ff0a 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f000 faa3 	bl	800dd1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	f003 0310 	and.w	r3, r3, #16
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d020      	beq.n	800d828 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	f003 0310 	and.w	r3, r3, #16
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d01b      	beq.n	800d828 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f06f 0210 	mvn.w	r2, #16
 800d7f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2208      	movs	r2, #8
 800d7fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	69db      	ldr	r3, [r3, #28]
 800d806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d003      	beq.n	800d816 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 fa7a 	bl	800dd08 <HAL_TIM_IC_CaptureCallback>
 800d814:	e005      	b.n	800d822 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f7f2 fee4 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f000 fa7d 	bl	800dd1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2200      	movs	r2, #0
 800d826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	f003 0301 	and.w	r3, r3, #1
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d00c      	beq.n	800d84c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	f003 0301 	and.w	r3, r3, #1
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d007      	beq.n	800d84c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f06f 0201 	mvn.w	r2, #1
 800d844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f7f4 ff7c 	bl	8002744 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d852:	2b00      	cmp	r3, #0
 800d854:	d104      	bne.n	800d860 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d00c      	beq.n	800d87a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d866:	2b00      	cmp	r3, #0
 800d868:	d007      	beq.n	800d87a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f000 ffbb 	bl	800e7f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d880:	2b00      	cmp	r3, #0
 800d882:	d00c      	beq.n	800d89e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d007      	beq.n	800d89e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f000 ffb3 	bl	800e804 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d00c      	beq.n	800d8c2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d007      	beq.n	800d8c2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d8ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f000 fa37 	bl	800dd30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	f003 0320 	and.w	r3, r3, #32
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d00c      	beq.n	800d8e6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	f003 0320 	and.w	r3, r3, #32
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d007      	beq.n	800d8e6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f06f 0220 	mvn.w	r2, #32
 800d8de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f000 ff7b 	bl	800e7dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d8e6:	bf00      	nop
 800d8e8:	3710      	adds	r7, #16
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
	...

0800d8f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b086      	sub	sp, #24
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	60f8      	str	r0, [r7, #12]
 800d8f8:	60b9      	str	r1, [r7, #8]
 800d8fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d906:	2b01      	cmp	r3, #1
 800d908:	d101      	bne.n	800d90e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d90a:	2302      	movs	r3, #2
 800d90c:	e0ff      	b.n	800db0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	2201      	movs	r2, #1
 800d912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2b14      	cmp	r3, #20
 800d91a:	f200 80f0 	bhi.w	800dafe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d91e:	a201      	add	r2, pc, #4	; (adr r2, 800d924 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d924:	0800d979 	.word	0x0800d979
 800d928:	0800daff 	.word	0x0800daff
 800d92c:	0800daff 	.word	0x0800daff
 800d930:	0800daff 	.word	0x0800daff
 800d934:	0800d9b9 	.word	0x0800d9b9
 800d938:	0800daff 	.word	0x0800daff
 800d93c:	0800daff 	.word	0x0800daff
 800d940:	0800daff 	.word	0x0800daff
 800d944:	0800d9fb 	.word	0x0800d9fb
 800d948:	0800daff 	.word	0x0800daff
 800d94c:	0800daff 	.word	0x0800daff
 800d950:	0800daff 	.word	0x0800daff
 800d954:	0800da3b 	.word	0x0800da3b
 800d958:	0800daff 	.word	0x0800daff
 800d95c:	0800daff 	.word	0x0800daff
 800d960:	0800daff 	.word	0x0800daff
 800d964:	0800da7d 	.word	0x0800da7d
 800d968:	0800daff 	.word	0x0800daff
 800d96c:	0800daff 	.word	0x0800daff
 800d970:	0800daff 	.word	0x0800daff
 800d974:	0800dabd 	.word	0x0800dabd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	68b9      	ldr	r1, [r7, #8]
 800d97e:	4618      	mov	r0, r3
 800d980:	f000 fa86 	bl	800de90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	699a      	ldr	r2, [r3, #24]
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f042 0208 	orr.w	r2, r2, #8
 800d992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	699a      	ldr	r2, [r3, #24]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	f022 0204 	bic.w	r2, r2, #4
 800d9a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	6999      	ldr	r1, [r3, #24]
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	691a      	ldr	r2, [r3, #16]
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	430a      	orrs	r2, r1
 800d9b4:	619a      	str	r2, [r3, #24]
      break;
 800d9b6:	e0a5      	b.n	800db04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	68b9      	ldr	r1, [r7, #8]
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f000 faf6 	bl	800dfb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	699a      	ldr	r2, [r3, #24]
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d9d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	699a      	ldr	r2, [r3, #24]
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d9e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	6999      	ldr	r1, [r3, #24]
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	691b      	ldr	r3, [r3, #16]
 800d9ee:	021a      	lsls	r2, r3, #8
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	430a      	orrs	r2, r1
 800d9f6:	619a      	str	r2, [r3, #24]
      break;
 800d9f8:	e084      	b.n	800db04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	68b9      	ldr	r1, [r7, #8]
 800da00:	4618      	mov	r0, r3
 800da02:	f000 fb5f 	bl	800e0c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	69da      	ldr	r2, [r3, #28]
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	f042 0208 	orr.w	r2, r2, #8
 800da14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	69da      	ldr	r2, [r3, #28]
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	f022 0204 	bic.w	r2, r2, #4
 800da24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	69d9      	ldr	r1, [r3, #28]
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	691a      	ldr	r2, [r3, #16]
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	430a      	orrs	r2, r1
 800da36:	61da      	str	r2, [r3, #28]
      break;
 800da38:	e064      	b.n	800db04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	68b9      	ldr	r1, [r7, #8]
 800da40:	4618      	mov	r0, r3
 800da42:	f000 fbc7 	bl	800e1d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	69da      	ldr	r2, [r3, #28]
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	69da      	ldr	r2, [r3, #28]
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	69d9      	ldr	r1, [r3, #28]
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	691b      	ldr	r3, [r3, #16]
 800da70:	021a      	lsls	r2, r3, #8
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	430a      	orrs	r2, r1
 800da78:	61da      	str	r2, [r3, #28]
      break;
 800da7a:	e043      	b.n	800db04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	68b9      	ldr	r1, [r7, #8]
 800da82:	4618      	mov	r0, r3
 800da84:	f000 fc10 	bl	800e2a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	f042 0208 	orr.w	r2, r2, #8
 800da96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	f022 0204 	bic.w	r2, r2, #4
 800daa6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	691a      	ldr	r2, [r3, #16]
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	430a      	orrs	r2, r1
 800dab8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800daba:	e023      	b.n	800db04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	68b9      	ldr	r1, [r7, #8]
 800dac2:	4618      	mov	r0, r3
 800dac4:	f000 fc54 	bl	800e370 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dad6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dae6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	691b      	ldr	r3, [r3, #16]
 800daf2:	021a      	lsls	r2, r3, #8
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	430a      	orrs	r2, r1
 800dafa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dafc:	e002      	b.n	800db04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dafe:	2301      	movs	r3, #1
 800db00:	75fb      	strb	r3, [r7, #23]
      break;
 800db02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	2200      	movs	r2, #0
 800db08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800db0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3718      	adds	r7, #24
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
 800db16:	bf00      	nop

0800db18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b084      	sub	sp, #16
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800db22:	2300      	movs	r3, #0
 800db24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d101      	bne.n	800db34 <HAL_TIM_ConfigClockSource+0x1c>
 800db30:	2302      	movs	r3, #2
 800db32:	e0dc      	b.n	800dcee <HAL_TIM_ConfigClockSource+0x1d6>
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2201      	movs	r2, #1
 800db38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2202      	movs	r2, #2
 800db40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	689b      	ldr	r3, [r3, #8]
 800db4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800db4c:	68ba      	ldr	r2, [r7, #8]
 800db4e:	4b6a      	ldr	r3, [pc, #424]	; (800dcf8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800db50:	4013      	ands	r3, r2
 800db52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800db5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	68ba      	ldr	r2, [r7, #8]
 800db62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	4a64      	ldr	r2, [pc, #400]	; (800dcfc <HAL_TIM_ConfigClockSource+0x1e4>)
 800db6a:	4293      	cmp	r3, r2
 800db6c:	f000 80a9 	beq.w	800dcc2 <HAL_TIM_ConfigClockSource+0x1aa>
 800db70:	4a62      	ldr	r2, [pc, #392]	; (800dcfc <HAL_TIM_ConfigClockSource+0x1e4>)
 800db72:	4293      	cmp	r3, r2
 800db74:	f200 80ae 	bhi.w	800dcd4 <HAL_TIM_ConfigClockSource+0x1bc>
 800db78:	4a61      	ldr	r2, [pc, #388]	; (800dd00 <HAL_TIM_ConfigClockSource+0x1e8>)
 800db7a:	4293      	cmp	r3, r2
 800db7c:	f000 80a1 	beq.w	800dcc2 <HAL_TIM_ConfigClockSource+0x1aa>
 800db80:	4a5f      	ldr	r2, [pc, #380]	; (800dd00 <HAL_TIM_ConfigClockSource+0x1e8>)
 800db82:	4293      	cmp	r3, r2
 800db84:	f200 80a6 	bhi.w	800dcd4 <HAL_TIM_ConfigClockSource+0x1bc>
 800db88:	4a5e      	ldr	r2, [pc, #376]	; (800dd04 <HAL_TIM_ConfigClockSource+0x1ec>)
 800db8a:	4293      	cmp	r3, r2
 800db8c:	f000 8099 	beq.w	800dcc2 <HAL_TIM_ConfigClockSource+0x1aa>
 800db90:	4a5c      	ldr	r2, [pc, #368]	; (800dd04 <HAL_TIM_ConfigClockSource+0x1ec>)
 800db92:	4293      	cmp	r3, r2
 800db94:	f200 809e 	bhi.w	800dcd4 <HAL_TIM_ConfigClockSource+0x1bc>
 800db98:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800db9c:	f000 8091 	beq.w	800dcc2 <HAL_TIM_ConfigClockSource+0x1aa>
 800dba0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800dba4:	f200 8096 	bhi.w	800dcd4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dba8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dbac:	f000 8089 	beq.w	800dcc2 <HAL_TIM_ConfigClockSource+0x1aa>
 800dbb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dbb4:	f200 808e 	bhi.w	800dcd4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dbbc:	d03e      	beq.n	800dc3c <HAL_TIM_ConfigClockSource+0x124>
 800dbbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dbc2:	f200 8087 	bhi.w	800dcd4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dbca:	f000 8086 	beq.w	800dcda <HAL_TIM_ConfigClockSource+0x1c2>
 800dbce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dbd2:	d87f      	bhi.n	800dcd4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbd4:	2b70      	cmp	r3, #112	; 0x70
 800dbd6:	d01a      	beq.n	800dc0e <HAL_TIM_ConfigClockSource+0xf6>
 800dbd8:	2b70      	cmp	r3, #112	; 0x70
 800dbda:	d87b      	bhi.n	800dcd4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbdc:	2b60      	cmp	r3, #96	; 0x60
 800dbde:	d050      	beq.n	800dc82 <HAL_TIM_ConfigClockSource+0x16a>
 800dbe0:	2b60      	cmp	r3, #96	; 0x60
 800dbe2:	d877      	bhi.n	800dcd4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbe4:	2b50      	cmp	r3, #80	; 0x50
 800dbe6:	d03c      	beq.n	800dc62 <HAL_TIM_ConfigClockSource+0x14a>
 800dbe8:	2b50      	cmp	r3, #80	; 0x50
 800dbea:	d873      	bhi.n	800dcd4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbec:	2b40      	cmp	r3, #64	; 0x40
 800dbee:	d058      	beq.n	800dca2 <HAL_TIM_ConfigClockSource+0x18a>
 800dbf0:	2b40      	cmp	r3, #64	; 0x40
 800dbf2:	d86f      	bhi.n	800dcd4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbf4:	2b30      	cmp	r3, #48	; 0x30
 800dbf6:	d064      	beq.n	800dcc2 <HAL_TIM_ConfigClockSource+0x1aa>
 800dbf8:	2b30      	cmp	r3, #48	; 0x30
 800dbfa:	d86b      	bhi.n	800dcd4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbfc:	2b20      	cmp	r3, #32
 800dbfe:	d060      	beq.n	800dcc2 <HAL_TIM_ConfigClockSource+0x1aa>
 800dc00:	2b20      	cmp	r3, #32
 800dc02:	d867      	bhi.n	800dcd4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d05c      	beq.n	800dcc2 <HAL_TIM_ConfigClockSource+0x1aa>
 800dc08:	2b10      	cmp	r3, #16
 800dc0a:	d05a      	beq.n	800dcc2 <HAL_TIM_ConfigClockSource+0x1aa>
 800dc0c:	e062      	b.n	800dcd4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6818      	ldr	r0, [r3, #0]
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	6899      	ldr	r1, [r3, #8]
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	685a      	ldr	r2, [r3, #4]
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	68db      	ldr	r3, [r3, #12]
 800dc1e:	f000 fc8b 	bl	800e538 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	689b      	ldr	r3, [r3, #8]
 800dc28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dc30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	68ba      	ldr	r2, [r7, #8]
 800dc38:	609a      	str	r2, [r3, #8]
      break;
 800dc3a:	e04f      	b.n	800dcdc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6818      	ldr	r0, [r3, #0]
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	6899      	ldr	r1, [r3, #8]
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	685a      	ldr	r2, [r3, #4]
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	68db      	ldr	r3, [r3, #12]
 800dc4c:	f000 fc74 	bl	800e538 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	689a      	ldr	r2, [r3, #8]
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dc5e:	609a      	str	r2, [r3, #8]
      break;
 800dc60:	e03c      	b.n	800dcdc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6818      	ldr	r0, [r3, #0]
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	6859      	ldr	r1, [r3, #4]
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	68db      	ldr	r3, [r3, #12]
 800dc6e:	461a      	mov	r2, r3
 800dc70:	f000 fbe4 	bl	800e43c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	2150      	movs	r1, #80	; 0x50
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f000 fc3e 	bl	800e4fc <TIM_ITRx_SetConfig>
      break;
 800dc80:	e02c      	b.n	800dcdc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6818      	ldr	r0, [r3, #0]
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	6859      	ldr	r1, [r3, #4]
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	68db      	ldr	r3, [r3, #12]
 800dc8e:	461a      	mov	r2, r3
 800dc90:	f000 fc03 	bl	800e49a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	2160      	movs	r1, #96	; 0x60
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f000 fc2e 	bl	800e4fc <TIM_ITRx_SetConfig>
      break;
 800dca0:	e01c      	b.n	800dcdc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6818      	ldr	r0, [r3, #0]
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	6859      	ldr	r1, [r3, #4]
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	68db      	ldr	r3, [r3, #12]
 800dcae:	461a      	mov	r2, r3
 800dcb0:	f000 fbc4 	bl	800e43c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	2140      	movs	r1, #64	; 0x40
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f000 fc1e 	bl	800e4fc <TIM_ITRx_SetConfig>
      break;
 800dcc0:	e00c      	b.n	800dcdc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681a      	ldr	r2, [r3, #0]
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	4619      	mov	r1, r3
 800dccc:	4610      	mov	r0, r2
 800dcce:	f000 fc15 	bl	800e4fc <TIM_ITRx_SetConfig>
      break;
 800dcd2:	e003      	b.n	800dcdc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	73fb      	strb	r3, [r7, #15]
      break;
 800dcd8:	e000      	b.n	800dcdc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800dcda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2201      	movs	r2, #1
 800dce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2200      	movs	r2, #0
 800dce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dcec:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3710      	adds	r7, #16
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}
 800dcf6:	bf00      	nop
 800dcf8:	ffceff88 	.word	0xffceff88
 800dcfc:	00100040 	.word	0x00100040
 800dd00:	00100030 	.word	0x00100030
 800dd04:	00100020 	.word	0x00100020

0800dd08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b083      	sub	sp, #12
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dd10:	bf00      	nop
 800dd12:	370c      	adds	r7, #12
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr

0800dd1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b083      	sub	sp, #12
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dd24:	bf00      	nop
 800dd26:	370c      	adds	r7, #12
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr

0800dd30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dd30:	b480      	push	{r7}
 800dd32:	b083      	sub	sp, #12
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dd38:	bf00      	nop
 800dd3a:	370c      	adds	r7, #12
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd42:	4770      	bx	lr

0800dd44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dd44:	b480      	push	{r7}
 800dd46:	b085      	sub	sp, #20
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	4a46      	ldr	r2, [pc, #280]	; (800de70 <TIM_Base_SetConfig+0x12c>)
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d013      	beq.n	800dd84 <TIM_Base_SetConfig+0x40>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd62:	d00f      	beq.n	800dd84 <TIM_Base_SetConfig+0x40>
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	4a43      	ldr	r2, [pc, #268]	; (800de74 <TIM_Base_SetConfig+0x130>)
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d00b      	beq.n	800dd84 <TIM_Base_SetConfig+0x40>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	4a42      	ldr	r2, [pc, #264]	; (800de78 <TIM_Base_SetConfig+0x134>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d007      	beq.n	800dd84 <TIM_Base_SetConfig+0x40>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	4a41      	ldr	r2, [pc, #260]	; (800de7c <TIM_Base_SetConfig+0x138>)
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	d003      	beq.n	800dd84 <TIM_Base_SetConfig+0x40>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	4a40      	ldr	r2, [pc, #256]	; (800de80 <TIM_Base_SetConfig+0x13c>)
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d108      	bne.n	800dd96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	685b      	ldr	r3, [r3, #4]
 800dd90:	68fa      	ldr	r2, [r7, #12]
 800dd92:	4313      	orrs	r3, r2
 800dd94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	4a35      	ldr	r2, [pc, #212]	; (800de70 <TIM_Base_SetConfig+0x12c>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d01f      	beq.n	800ddde <TIM_Base_SetConfig+0x9a>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dda4:	d01b      	beq.n	800ddde <TIM_Base_SetConfig+0x9a>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	4a32      	ldr	r2, [pc, #200]	; (800de74 <TIM_Base_SetConfig+0x130>)
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d017      	beq.n	800ddde <TIM_Base_SetConfig+0x9a>
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	4a31      	ldr	r2, [pc, #196]	; (800de78 <TIM_Base_SetConfig+0x134>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d013      	beq.n	800ddde <TIM_Base_SetConfig+0x9a>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	4a30      	ldr	r2, [pc, #192]	; (800de7c <TIM_Base_SetConfig+0x138>)
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	d00f      	beq.n	800ddde <TIM_Base_SetConfig+0x9a>
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	4a2f      	ldr	r2, [pc, #188]	; (800de80 <TIM_Base_SetConfig+0x13c>)
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	d00b      	beq.n	800ddde <TIM_Base_SetConfig+0x9a>
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	4a2e      	ldr	r2, [pc, #184]	; (800de84 <TIM_Base_SetConfig+0x140>)
 800ddca:	4293      	cmp	r3, r2
 800ddcc:	d007      	beq.n	800ddde <TIM_Base_SetConfig+0x9a>
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	4a2d      	ldr	r2, [pc, #180]	; (800de88 <TIM_Base_SetConfig+0x144>)
 800ddd2:	4293      	cmp	r3, r2
 800ddd4:	d003      	beq.n	800ddde <TIM_Base_SetConfig+0x9a>
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	4a2c      	ldr	r2, [pc, #176]	; (800de8c <TIM_Base_SetConfig+0x148>)
 800ddda:	4293      	cmp	r3, r2
 800dddc:	d108      	bne.n	800ddf0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dde4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	68db      	ldr	r3, [r3, #12]
 800ddea:	68fa      	ldr	r2, [r7, #12]
 800ddec:	4313      	orrs	r3, r2
 800ddee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	695b      	ldr	r3, [r3, #20]
 800ddfa:	4313      	orrs	r3, r2
 800ddfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	68fa      	ldr	r2, [r7, #12]
 800de02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	689a      	ldr	r2, [r3, #8]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	681a      	ldr	r2, [r3, #0]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	4a16      	ldr	r2, [pc, #88]	; (800de70 <TIM_Base_SetConfig+0x12c>)
 800de18:	4293      	cmp	r3, r2
 800de1a:	d00f      	beq.n	800de3c <TIM_Base_SetConfig+0xf8>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	4a18      	ldr	r2, [pc, #96]	; (800de80 <TIM_Base_SetConfig+0x13c>)
 800de20:	4293      	cmp	r3, r2
 800de22:	d00b      	beq.n	800de3c <TIM_Base_SetConfig+0xf8>
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	4a17      	ldr	r2, [pc, #92]	; (800de84 <TIM_Base_SetConfig+0x140>)
 800de28:	4293      	cmp	r3, r2
 800de2a:	d007      	beq.n	800de3c <TIM_Base_SetConfig+0xf8>
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	4a16      	ldr	r2, [pc, #88]	; (800de88 <TIM_Base_SetConfig+0x144>)
 800de30:	4293      	cmp	r3, r2
 800de32:	d003      	beq.n	800de3c <TIM_Base_SetConfig+0xf8>
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	4a15      	ldr	r2, [pc, #84]	; (800de8c <TIM_Base_SetConfig+0x148>)
 800de38:	4293      	cmp	r3, r2
 800de3a:	d103      	bne.n	800de44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	691a      	ldr	r2, [r3, #16]
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2201      	movs	r2, #1
 800de48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	691b      	ldr	r3, [r3, #16]
 800de4e:	f003 0301 	and.w	r3, r3, #1
 800de52:	2b01      	cmp	r3, #1
 800de54:	d105      	bne.n	800de62 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	691b      	ldr	r3, [r3, #16]
 800de5a:	f023 0201 	bic.w	r2, r3, #1
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	611a      	str	r2, [r3, #16]
  }
}
 800de62:	bf00      	nop
 800de64:	3714      	adds	r7, #20
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr
 800de6e:	bf00      	nop
 800de70:	40010000 	.word	0x40010000
 800de74:	40000400 	.word	0x40000400
 800de78:	40000800 	.word	0x40000800
 800de7c:	40000c00 	.word	0x40000c00
 800de80:	40010400 	.word	0x40010400
 800de84:	40014000 	.word	0x40014000
 800de88:	40014400 	.word	0x40014400
 800de8c:	40014800 	.word	0x40014800

0800de90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800de90:	b480      	push	{r7}
 800de92:	b087      	sub	sp, #28
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6a1b      	ldr	r3, [r3, #32]
 800de9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6a1b      	ldr	r3, [r3, #32]
 800dea4:	f023 0201 	bic.w	r2, r3, #1
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	685b      	ldr	r3, [r3, #4]
 800deb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	699b      	ldr	r3, [r3, #24]
 800deb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800deb8:	68fa      	ldr	r2, [r7, #12]
 800deba:	4b37      	ldr	r3, [pc, #220]	; (800df98 <TIM_OC1_SetConfig+0x108>)
 800debc:	4013      	ands	r3, r2
 800debe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	f023 0303 	bic.w	r3, r3, #3
 800dec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	68fa      	ldr	r2, [r7, #12]
 800dece:	4313      	orrs	r3, r2
 800ded0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	f023 0302 	bic.w	r3, r3, #2
 800ded8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	689b      	ldr	r3, [r3, #8]
 800dede:	697a      	ldr	r2, [r7, #20]
 800dee0:	4313      	orrs	r3, r2
 800dee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	4a2d      	ldr	r2, [pc, #180]	; (800df9c <TIM_OC1_SetConfig+0x10c>)
 800dee8:	4293      	cmp	r3, r2
 800deea:	d00f      	beq.n	800df0c <TIM_OC1_SetConfig+0x7c>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	4a2c      	ldr	r2, [pc, #176]	; (800dfa0 <TIM_OC1_SetConfig+0x110>)
 800def0:	4293      	cmp	r3, r2
 800def2:	d00b      	beq.n	800df0c <TIM_OC1_SetConfig+0x7c>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	4a2b      	ldr	r2, [pc, #172]	; (800dfa4 <TIM_OC1_SetConfig+0x114>)
 800def8:	4293      	cmp	r3, r2
 800defa:	d007      	beq.n	800df0c <TIM_OC1_SetConfig+0x7c>
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	4a2a      	ldr	r2, [pc, #168]	; (800dfa8 <TIM_OC1_SetConfig+0x118>)
 800df00:	4293      	cmp	r3, r2
 800df02:	d003      	beq.n	800df0c <TIM_OC1_SetConfig+0x7c>
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	4a29      	ldr	r2, [pc, #164]	; (800dfac <TIM_OC1_SetConfig+0x11c>)
 800df08:	4293      	cmp	r3, r2
 800df0a:	d10c      	bne.n	800df26 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800df0c:	697b      	ldr	r3, [r7, #20]
 800df0e:	f023 0308 	bic.w	r3, r3, #8
 800df12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	68db      	ldr	r3, [r3, #12]
 800df18:	697a      	ldr	r2, [r7, #20]
 800df1a:	4313      	orrs	r3, r2
 800df1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	f023 0304 	bic.w	r3, r3, #4
 800df24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	4a1c      	ldr	r2, [pc, #112]	; (800df9c <TIM_OC1_SetConfig+0x10c>)
 800df2a:	4293      	cmp	r3, r2
 800df2c:	d00f      	beq.n	800df4e <TIM_OC1_SetConfig+0xbe>
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	4a1b      	ldr	r2, [pc, #108]	; (800dfa0 <TIM_OC1_SetConfig+0x110>)
 800df32:	4293      	cmp	r3, r2
 800df34:	d00b      	beq.n	800df4e <TIM_OC1_SetConfig+0xbe>
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	4a1a      	ldr	r2, [pc, #104]	; (800dfa4 <TIM_OC1_SetConfig+0x114>)
 800df3a:	4293      	cmp	r3, r2
 800df3c:	d007      	beq.n	800df4e <TIM_OC1_SetConfig+0xbe>
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	4a19      	ldr	r2, [pc, #100]	; (800dfa8 <TIM_OC1_SetConfig+0x118>)
 800df42:	4293      	cmp	r3, r2
 800df44:	d003      	beq.n	800df4e <TIM_OC1_SetConfig+0xbe>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	4a18      	ldr	r2, [pc, #96]	; (800dfac <TIM_OC1_SetConfig+0x11c>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d111      	bne.n	800df72 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800df4e:	693b      	ldr	r3, [r7, #16]
 800df50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800df54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800df5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	695b      	ldr	r3, [r3, #20]
 800df62:	693a      	ldr	r2, [r7, #16]
 800df64:	4313      	orrs	r3, r2
 800df66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	699b      	ldr	r3, [r3, #24]
 800df6c:	693a      	ldr	r2, [r7, #16]
 800df6e:	4313      	orrs	r3, r2
 800df70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	693a      	ldr	r2, [r7, #16]
 800df76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	68fa      	ldr	r2, [r7, #12]
 800df7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	685a      	ldr	r2, [r3, #4]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	697a      	ldr	r2, [r7, #20]
 800df8a:	621a      	str	r2, [r3, #32]
}
 800df8c:	bf00      	nop
 800df8e:	371c      	adds	r7, #28
 800df90:	46bd      	mov	sp, r7
 800df92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df96:	4770      	bx	lr
 800df98:	fffeff8f 	.word	0xfffeff8f
 800df9c:	40010000 	.word	0x40010000
 800dfa0:	40010400 	.word	0x40010400
 800dfa4:	40014000 	.word	0x40014000
 800dfa8:	40014400 	.word	0x40014400
 800dfac:	40014800 	.word	0x40014800

0800dfb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b087      	sub	sp, #28
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6a1b      	ldr	r3, [r3, #32]
 800dfbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6a1b      	ldr	r3, [r3, #32]
 800dfc4:	f023 0210 	bic.w	r2, r3, #16
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	685b      	ldr	r3, [r3, #4]
 800dfd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	699b      	ldr	r3, [r3, #24]
 800dfd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dfd8:	68fa      	ldr	r2, [r7, #12]
 800dfda:	4b34      	ldr	r3, [pc, #208]	; (800e0ac <TIM_OC2_SetConfig+0xfc>)
 800dfdc:	4013      	ands	r3, r2
 800dfde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dfe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	021b      	lsls	r3, r3, #8
 800dfee:	68fa      	ldr	r2, [r7, #12]
 800dff0:	4313      	orrs	r3, r2
 800dff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	f023 0320 	bic.w	r3, r3, #32
 800dffa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	689b      	ldr	r3, [r3, #8]
 800e000:	011b      	lsls	r3, r3, #4
 800e002:	697a      	ldr	r2, [r7, #20]
 800e004:	4313      	orrs	r3, r2
 800e006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	4a29      	ldr	r2, [pc, #164]	; (800e0b0 <TIM_OC2_SetConfig+0x100>)
 800e00c:	4293      	cmp	r3, r2
 800e00e:	d003      	beq.n	800e018 <TIM_OC2_SetConfig+0x68>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	4a28      	ldr	r2, [pc, #160]	; (800e0b4 <TIM_OC2_SetConfig+0x104>)
 800e014:	4293      	cmp	r3, r2
 800e016:	d10d      	bne.n	800e034 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e01e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	68db      	ldr	r3, [r3, #12]
 800e024:	011b      	lsls	r3, r3, #4
 800e026:	697a      	ldr	r2, [r7, #20]
 800e028:	4313      	orrs	r3, r2
 800e02a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e032:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	4a1e      	ldr	r2, [pc, #120]	; (800e0b0 <TIM_OC2_SetConfig+0x100>)
 800e038:	4293      	cmp	r3, r2
 800e03a:	d00f      	beq.n	800e05c <TIM_OC2_SetConfig+0xac>
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	4a1d      	ldr	r2, [pc, #116]	; (800e0b4 <TIM_OC2_SetConfig+0x104>)
 800e040:	4293      	cmp	r3, r2
 800e042:	d00b      	beq.n	800e05c <TIM_OC2_SetConfig+0xac>
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	4a1c      	ldr	r2, [pc, #112]	; (800e0b8 <TIM_OC2_SetConfig+0x108>)
 800e048:	4293      	cmp	r3, r2
 800e04a:	d007      	beq.n	800e05c <TIM_OC2_SetConfig+0xac>
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	4a1b      	ldr	r2, [pc, #108]	; (800e0bc <TIM_OC2_SetConfig+0x10c>)
 800e050:	4293      	cmp	r3, r2
 800e052:	d003      	beq.n	800e05c <TIM_OC2_SetConfig+0xac>
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	4a1a      	ldr	r2, [pc, #104]	; (800e0c0 <TIM_OC2_SetConfig+0x110>)
 800e058:	4293      	cmp	r3, r2
 800e05a:	d113      	bne.n	800e084 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e062:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e06a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	695b      	ldr	r3, [r3, #20]
 800e070:	009b      	lsls	r3, r3, #2
 800e072:	693a      	ldr	r2, [r7, #16]
 800e074:	4313      	orrs	r3, r2
 800e076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	699b      	ldr	r3, [r3, #24]
 800e07c:	009b      	lsls	r3, r3, #2
 800e07e:	693a      	ldr	r2, [r7, #16]
 800e080:	4313      	orrs	r3, r2
 800e082:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	693a      	ldr	r2, [r7, #16]
 800e088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	68fa      	ldr	r2, [r7, #12]
 800e08e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	685a      	ldr	r2, [r3, #4]
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	697a      	ldr	r2, [r7, #20]
 800e09c:	621a      	str	r2, [r3, #32]
}
 800e09e:	bf00      	nop
 800e0a0:	371c      	adds	r7, #28
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a8:	4770      	bx	lr
 800e0aa:	bf00      	nop
 800e0ac:	feff8fff 	.word	0xfeff8fff
 800e0b0:	40010000 	.word	0x40010000
 800e0b4:	40010400 	.word	0x40010400
 800e0b8:	40014000 	.word	0x40014000
 800e0bc:	40014400 	.word	0x40014400
 800e0c0:	40014800 	.word	0x40014800

0800e0c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e0c4:	b480      	push	{r7}
 800e0c6:	b087      	sub	sp, #28
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6a1b      	ldr	r3, [r3, #32]
 800e0d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6a1b      	ldr	r3, [r3, #32]
 800e0d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	685b      	ldr	r3, [r3, #4]
 800e0e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	69db      	ldr	r3, [r3, #28]
 800e0ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e0ec:	68fa      	ldr	r2, [r7, #12]
 800e0ee:	4b33      	ldr	r3, [pc, #204]	; (800e1bc <TIM_OC3_SetConfig+0xf8>)
 800e0f0:	4013      	ands	r3, r2
 800e0f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	f023 0303 	bic.w	r3, r3, #3
 800e0fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	68fa      	ldr	r2, [r7, #12]
 800e102:	4313      	orrs	r3, r2
 800e104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e10c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	689b      	ldr	r3, [r3, #8]
 800e112:	021b      	lsls	r3, r3, #8
 800e114:	697a      	ldr	r2, [r7, #20]
 800e116:	4313      	orrs	r3, r2
 800e118:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	4a28      	ldr	r2, [pc, #160]	; (800e1c0 <TIM_OC3_SetConfig+0xfc>)
 800e11e:	4293      	cmp	r3, r2
 800e120:	d003      	beq.n	800e12a <TIM_OC3_SetConfig+0x66>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	4a27      	ldr	r2, [pc, #156]	; (800e1c4 <TIM_OC3_SetConfig+0x100>)
 800e126:	4293      	cmp	r3, r2
 800e128:	d10d      	bne.n	800e146 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e130:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	68db      	ldr	r3, [r3, #12]
 800e136:	021b      	lsls	r3, r3, #8
 800e138:	697a      	ldr	r2, [r7, #20]
 800e13a:	4313      	orrs	r3, r2
 800e13c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	4a1d      	ldr	r2, [pc, #116]	; (800e1c0 <TIM_OC3_SetConfig+0xfc>)
 800e14a:	4293      	cmp	r3, r2
 800e14c:	d00f      	beq.n	800e16e <TIM_OC3_SetConfig+0xaa>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	4a1c      	ldr	r2, [pc, #112]	; (800e1c4 <TIM_OC3_SetConfig+0x100>)
 800e152:	4293      	cmp	r3, r2
 800e154:	d00b      	beq.n	800e16e <TIM_OC3_SetConfig+0xaa>
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	4a1b      	ldr	r2, [pc, #108]	; (800e1c8 <TIM_OC3_SetConfig+0x104>)
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d007      	beq.n	800e16e <TIM_OC3_SetConfig+0xaa>
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	4a1a      	ldr	r2, [pc, #104]	; (800e1cc <TIM_OC3_SetConfig+0x108>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d003      	beq.n	800e16e <TIM_OC3_SetConfig+0xaa>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	4a19      	ldr	r2, [pc, #100]	; (800e1d0 <TIM_OC3_SetConfig+0x10c>)
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d113      	bne.n	800e196 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e17c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	695b      	ldr	r3, [r3, #20]
 800e182:	011b      	lsls	r3, r3, #4
 800e184:	693a      	ldr	r2, [r7, #16]
 800e186:	4313      	orrs	r3, r2
 800e188:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	699b      	ldr	r3, [r3, #24]
 800e18e:	011b      	lsls	r3, r3, #4
 800e190:	693a      	ldr	r2, [r7, #16]
 800e192:	4313      	orrs	r3, r2
 800e194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	693a      	ldr	r2, [r7, #16]
 800e19a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	68fa      	ldr	r2, [r7, #12]
 800e1a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	685a      	ldr	r2, [r3, #4]
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	697a      	ldr	r2, [r7, #20]
 800e1ae:	621a      	str	r2, [r3, #32]
}
 800e1b0:	bf00      	nop
 800e1b2:	371c      	adds	r7, #28
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ba:	4770      	bx	lr
 800e1bc:	fffeff8f 	.word	0xfffeff8f
 800e1c0:	40010000 	.word	0x40010000
 800e1c4:	40010400 	.word	0x40010400
 800e1c8:	40014000 	.word	0x40014000
 800e1cc:	40014400 	.word	0x40014400
 800e1d0:	40014800 	.word	0x40014800

0800e1d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b087      	sub	sp, #28
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
 800e1dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6a1b      	ldr	r3, [r3, #32]
 800e1e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6a1b      	ldr	r3, [r3, #32]
 800e1e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	685b      	ldr	r3, [r3, #4]
 800e1f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	69db      	ldr	r3, [r3, #28]
 800e1fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e1fc:	68fa      	ldr	r2, [r7, #12]
 800e1fe:	4b24      	ldr	r3, [pc, #144]	; (800e290 <TIM_OC4_SetConfig+0xbc>)
 800e200:	4013      	ands	r3, r2
 800e202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e20a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	021b      	lsls	r3, r3, #8
 800e212:	68fa      	ldr	r2, [r7, #12]
 800e214:	4313      	orrs	r3, r2
 800e216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e21e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	689b      	ldr	r3, [r3, #8]
 800e224:	031b      	lsls	r3, r3, #12
 800e226:	693a      	ldr	r2, [r7, #16]
 800e228:	4313      	orrs	r3, r2
 800e22a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	4a19      	ldr	r2, [pc, #100]	; (800e294 <TIM_OC4_SetConfig+0xc0>)
 800e230:	4293      	cmp	r3, r2
 800e232:	d00f      	beq.n	800e254 <TIM_OC4_SetConfig+0x80>
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	4a18      	ldr	r2, [pc, #96]	; (800e298 <TIM_OC4_SetConfig+0xc4>)
 800e238:	4293      	cmp	r3, r2
 800e23a:	d00b      	beq.n	800e254 <TIM_OC4_SetConfig+0x80>
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	4a17      	ldr	r2, [pc, #92]	; (800e29c <TIM_OC4_SetConfig+0xc8>)
 800e240:	4293      	cmp	r3, r2
 800e242:	d007      	beq.n	800e254 <TIM_OC4_SetConfig+0x80>
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	4a16      	ldr	r2, [pc, #88]	; (800e2a0 <TIM_OC4_SetConfig+0xcc>)
 800e248:	4293      	cmp	r3, r2
 800e24a:	d003      	beq.n	800e254 <TIM_OC4_SetConfig+0x80>
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	4a15      	ldr	r2, [pc, #84]	; (800e2a4 <TIM_OC4_SetConfig+0xd0>)
 800e250:	4293      	cmp	r3, r2
 800e252:	d109      	bne.n	800e268 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e25a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	695b      	ldr	r3, [r3, #20]
 800e260:	019b      	lsls	r3, r3, #6
 800e262:	697a      	ldr	r2, [r7, #20]
 800e264:	4313      	orrs	r3, r2
 800e266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	697a      	ldr	r2, [r7, #20]
 800e26c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	68fa      	ldr	r2, [r7, #12]
 800e272:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	685a      	ldr	r2, [r3, #4]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	693a      	ldr	r2, [r7, #16]
 800e280:	621a      	str	r2, [r3, #32]
}
 800e282:	bf00      	nop
 800e284:	371c      	adds	r7, #28
 800e286:	46bd      	mov	sp, r7
 800e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28c:	4770      	bx	lr
 800e28e:	bf00      	nop
 800e290:	feff8fff 	.word	0xfeff8fff
 800e294:	40010000 	.word	0x40010000
 800e298:	40010400 	.word	0x40010400
 800e29c:	40014000 	.word	0x40014000
 800e2a0:	40014400 	.word	0x40014400
 800e2a4:	40014800 	.word	0x40014800

0800e2a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b087      	sub	sp, #28
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6a1b      	ldr	r3, [r3, #32]
 800e2b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6a1b      	ldr	r3, [r3, #32]
 800e2bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	685b      	ldr	r3, [r3, #4]
 800e2c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e2d0:	68fa      	ldr	r2, [r7, #12]
 800e2d2:	4b21      	ldr	r3, [pc, #132]	; (800e358 <TIM_OC5_SetConfig+0xb0>)
 800e2d4:	4013      	ands	r3, r2
 800e2d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	68fa      	ldr	r2, [r7, #12]
 800e2de:	4313      	orrs	r3, r2
 800e2e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e2e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	689b      	ldr	r3, [r3, #8]
 800e2ee:	041b      	lsls	r3, r3, #16
 800e2f0:	693a      	ldr	r2, [r7, #16]
 800e2f2:	4313      	orrs	r3, r2
 800e2f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	4a18      	ldr	r2, [pc, #96]	; (800e35c <TIM_OC5_SetConfig+0xb4>)
 800e2fa:	4293      	cmp	r3, r2
 800e2fc:	d00f      	beq.n	800e31e <TIM_OC5_SetConfig+0x76>
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	4a17      	ldr	r2, [pc, #92]	; (800e360 <TIM_OC5_SetConfig+0xb8>)
 800e302:	4293      	cmp	r3, r2
 800e304:	d00b      	beq.n	800e31e <TIM_OC5_SetConfig+0x76>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	4a16      	ldr	r2, [pc, #88]	; (800e364 <TIM_OC5_SetConfig+0xbc>)
 800e30a:	4293      	cmp	r3, r2
 800e30c:	d007      	beq.n	800e31e <TIM_OC5_SetConfig+0x76>
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	4a15      	ldr	r2, [pc, #84]	; (800e368 <TIM_OC5_SetConfig+0xc0>)
 800e312:	4293      	cmp	r3, r2
 800e314:	d003      	beq.n	800e31e <TIM_OC5_SetConfig+0x76>
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	4a14      	ldr	r2, [pc, #80]	; (800e36c <TIM_OC5_SetConfig+0xc4>)
 800e31a:	4293      	cmp	r3, r2
 800e31c:	d109      	bne.n	800e332 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e324:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	695b      	ldr	r3, [r3, #20]
 800e32a:	021b      	lsls	r3, r3, #8
 800e32c:	697a      	ldr	r2, [r7, #20]
 800e32e:	4313      	orrs	r3, r2
 800e330:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	697a      	ldr	r2, [r7, #20]
 800e336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	68fa      	ldr	r2, [r7, #12]
 800e33c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	685a      	ldr	r2, [r3, #4]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	693a      	ldr	r2, [r7, #16]
 800e34a:	621a      	str	r2, [r3, #32]
}
 800e34c:	bf00      	nop
 800e34e:	371c      	adds	r7, #28
 800e350:	46bd      	mov	sp, r7
 800e352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e356:	4770      	bx	lr
 800e358:	fffeff8f 	.word	0xfffeff8f
 800e35c:	40010000 	.word	0x40010000
 800e360:	40010400 	.word	0x40010400
 800e364:	40014000 	.word	0x40014000
 800e368:	40014400 	.word	0x40014400
 800e36c:	40014800 	.word	0x40014800

0800e370 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e370:	b480      	push	{r7}
 800e372:	b087      	sub	sp, #28
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6a1b      	ldr	r3, [r3, #32]
 800e37e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6a1b      	ldr	r3, [r3, #32]
 800e384:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	685b      	ldr	r3, [r3, #4]
 800e390:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e398:	68fa      	ldr	r2, [r7, #12]
 800e39a:	4b22      	ldr	r3, [pc, #136]	; (800e424 <TIM_OC6_SetConfig+0xb4>)
 800e39c:	4013      	ands	r3, r2
 800e39e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e3a0:	683b      	ldr	r3, [r7, #0]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	021b      	lsls	r3, r3, #8
 800e3a6:	68fa      	ldr	r2, [r7, #12]
 800e3a8:	4313      	orrs	r3, r2
 800e3aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e3ac:	693b      	ldr	r3, [r7, #16]
 800e3ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e3b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	689b      	ldr	r3, [r3, #8]
 800e3b8:	051b      	lsls	r3, r3, #20
 800e3ba:	693a      	ldr	r2, [r7, #16]
 800e3bc:	4313      	orrs	r3, r2
 800e3be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	4a19      	ldr	r2, [pc, #100]	; (800e428 <TIM_OC6_SetConfig+0xb8>)
 800e3c4:	4293      	cmp	r3, r2
 800e3c6:	d00f      	beq.n	800e3e8 <TIM_OC6_SetConfig+0x78>
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	4a18      	ldr	r2, [pc, #96]	; (800e42c <TIM_OC6_SetConfig+0xbc>)
 800e3cc:	4293      	cmp	r3, r2
 800e3ce:	d00b      	beq.n	800e3e8 <TIM_OC6_SetConfig+0x78>
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	4a17      	ldr	r2, [pc, #92]	; (800e430 <TIM_OC6_SetConfig+0xc0>)
 800e3d4:	4293      	cmp	r3, r2
 800e3d6:	d007      	beq.n	800e3e8 <TIM_OC6_SetConfig+0x78>
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	4a16      	ldr	r2, [pc, #88]	; (800e434 <TIM_OC6_SetConfig+0xc4>)
 800e3dc:	4293      	cmp	r3, r2
 800e3de:	d003      	beq.n	800e3e8 <TIM_OC6_SetConfig+0x78>
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	4a15      	ldr	r2, [pc, #84]	; (800e438 <TIM_OC6_SetConfig+0xc8>)
 800e3e4:	4293      	cmp	r3, r2
 800e3e6:	d109      	bne.n	800e3fc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e3ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	695b      	ldr	r3, [r3, #20]
 800e3f4:	029b      	lsls	r3, r3, #10
 800e3f6:	697a      	ldr	r2, [r7, #20]
 800e3f8:	4313      	orrs	r3, r2
 800e3fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	697a      	ldr	r2, [r7, #20]
 800e400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	68fa      	ldr	r2, [r7, #12]
 800e406:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	685a      	ldr	r2, [r3, #4]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	693a      	ldr	r2, [r7, #16]
 800e414:	621a      	str	r2, [r3, #32]
}
 800e416:	bf00      	nop
 800e418:	371c      	adds	r7, #28
 800e41a:	46bd      	mov	sp, r7
 800e41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e420:	4770      	bx	lr
 800e422:	bf00      	nop
 800e424:	feff8fff 	.word	0xfeff8fff
 800e428:	40010000 	.word	0x40010000
 800e42c:	40010400 	.word	0x40010400
 800e430:	40014000 	.word	0x40014000
 800e434:	40014400 	.word	0x40014400
 800e438:	40014800 	.word	0x40014800

0800e43c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e43c:	b480      	push	{r7}
 800e43e:	b087      	sub	sp, #28
 800e440:	af00      	add	r7, sp, #0
 800e442:	60f8      	str	r0, [r7, #12]
 800e444:	60b9      	str	r1, [r7, #8]
 800e446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	6a1b      	ldr	r3, [r3, #32]
 800e44c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	6a1b      	ldr	r3, [r3, #32]
 800e452:	f023 0201 	bic.w	r2, r3, #1
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	699b      	ldr	r3, [r3, #24]
 800e45e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e460:	693b      	ldr	r3, [r7, #16]
 800e462:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	011b      	lsls	r3, r3, #4
 800e46c:	693a      	ldr	r2, [r7, #16]
 800e46e:	4313      	orrs	r3, r2
 800e470:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e472:	697b      	ldr	r3, [r7, #20]
 800e474:	f023 030a 	bic.w	r3, r3, #10
 800e478:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e47a:	697a      	ldr	r2, [r7, #20]
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	4313      	orrs	r3, r2
 800e480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	693a      	ldr	r2, [r7, #16]
 800e486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	697a      	ldr	r2, [r7, #20]
 800e48c:	621a      	str	r2, [r3, #32]
}
 800e48e:	bf00      	nop
 800e490:	371c      	adds	r7, #28
 800e492:	46bd      	mov	sp, r7
 800e494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e498:	4770      	bx	lr

0800e49a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e49a:	b480      	push	{r7}
 800e49c:	b087      	sub	sp, #28
 800e49e:	af00      	add	r7, sp, #0
 800e4a0:	60f8      	str	r0, [r7, #12]
 800e4a2:	60b9      	str	r1, [r7, #8]
 800e4a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	6a1b      	ldr	r3, [r3, #32]
 800e4aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	6a1b      	ldr	r3, [r3, #32]
 800e4b0:	f023 0210 	bic.w	r2, r3, #16
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	699b      	ldr	r3, [r3, #24]
 800e4bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e4c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	031b      	lsls	r3, r3, #12
 800e4ca:	693a      	ldr	r2, [r7, #16]
 800e4cc:	4313      	orrs	r3, r2
 800e4ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e4d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	011b      	lsls	r3, r3, #4
 800e4dc:	697a      	ldr	r2, [r7, #20]
 800e4de:	4313      	orrs	r3, r2
 800e4e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	693a      	ldr	r2, [r7, #16]
 800e4e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	697a      	ldr	r2, [r7, #20]
 800e4ec:	621a      	str	r2, [r3, #32]
}
 800e4ee:	bf00      	nop
 800e4f0:	371c      	adds	r7, #28
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f8:	4770      	bx	lr
	...

0800e4fc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b085      	sub	sp, #20
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	689b      	ldr	r3, [r3, #8]
 800e50a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e50c:	68fa      	ldr	r2, [r7, #12]
 800e50e:	4b09      	ldr	r3, [pc, #36]	; (800e534 <TIM_ITRx_SetConfig+0x38>)
 800e510:	4013      	ands	r3, r2
 800e512:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e514:	683a      	ldr	r2, [r7, #0]
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	4313      	orrs	r3, r2
 800e51a:	f043 0307 	orr.w	r3, r3, #7
 800e51e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	68fa      	ldr	r2, [r7, #12]
 800e524:	609a      	str	r2, [r3, #8]
}
 800e526:	bf00      	nop
 800e528:	3714      	adds	r7, #20
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr
 800e532:	bf00      	nop
 800e534:	ffcfff8f 	.word	0xffcfff8f

0800e538 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e538:	b480      	push	{r7}
 800e53a:	b087      	sub	sp, #28
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	60f8      	str	r0, [r7, #12]
 800e540:	60b9      	str	r1, [r7, #8]
 800e542:	607a      	str	r2, [r7, #4]
 800e544:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	689b      	ldr	r3, [r3, #8]
 800e54a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e552:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	021a      	lsls	r2, r3, #8
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	431a      	orrs	r2, r3
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	4313      	orrs	r3, r2
 800e560:	697a      	ldr	r2, [r7, #20]
 800e562:	4313      	orrs	r3, r2
 800e564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	697a      	ldr	r2, [r7, #20]
 800e56a:	609a      	str	r2, [r3, #8]
}
 800e56c:	bf00      	nop
 800e56e:	371c      	adds	r7, #28
 800e570:	46bd      	mov	sp, r7
 800e572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e576:	4770      	bx	lr

0800e578 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e578:	b480      	push	{r7}
 800e57a:	b087      	sub	sp, #28
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	60f8      	str	r0, [r7, #12]
 800e580:	60b9      	str	r1, [r7, #8]
 800e582:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	f003 031f 	and.w	r3, r3, #31
 800e58a:	2201      	movs	r2, #1
 800e58c:	fa02 f303 	lsl.w	r3, r2, r3
 800e590:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	6a1a      	ldr	r2, [r3, #32]
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	43db      	mvns	r3, r3
 800e59a:	401a      	ands	r2, r3
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	6a1a      	ldr	r2, [r3, #32]
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	f003 031f 	and.w	r3, r3, #31
 800e5aa:	6879      	ldr	r1, [r7, #4]
 800e5ac:	fa01 f303 	lsl.w	r3, r1, r3
 800e5b0:	431a      	orrs	r2, r3
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	621a      	str	r2, [r3, #32]
}
 800e5b6:	bf00      	nop
 800e5b8:	371c      	adds	r7, #28
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c0:	4770      	bx	lr
	...

0800e5c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b085      	sub	sp, #20
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e5d4:	2b01      	cmp	r3, #1
 800e5d6:	d101      	bne.n	800e5dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e5d8:	2302      	movs	r3, #2
 800e5da:	e06d      	b.n	800e6b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2201      	movs	r2, #1
 800e5e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2202      	movs	r2, #2
 800e5e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	685b      	ldr	r3, [r3, #4]
 800e5f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	689b      	ldr	r3, [r3, #8]
 800e5fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	4a30      	ldr	r2, [pc, #192]	; (800e6c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e602:	4293      	cmp	r3, r2
 800e604:	d004      	beq.n	800e610 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	4a2f      	ldr	r2, [pc, #188]	; (800e6c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e60c:	4293      	cmp	r3, r2
 800e60e:	d108      	bne.n	800e622 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e616:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	685b      	ldr	r3, [r3, #4]
 800e61c:	68fa      	ldr	r2, [r7, #12]
 800e61e:	4313      	orrs	r3, r2
 800e620:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e628:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	68fa      	ldr	r2, [r7, #12]
 800e630:	4313      	orrs	r3, r2
 800e632:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	68fa      	ldr	r2, [r7, #12]
 800e63a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	4a20      	ldr	r2, [pc, #128]	; (800e6c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e642:	4293      	cmp	r3, r2
 800e644:	d022      	beq.n	800e68c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e64e:	d01d      	beq.n	800e68c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	4a1d      	ldr	r2, [pc, #116]	; (800e6cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e656:	4293      	cmp	r3, r2
 800e658:	d018      	beq.n	800e68c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	4a1c      	ldr	r2, [pc, #112]	; (800e6d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e660:	4293      	cmp	r3, r2
 800e662:	d013      	beq.n	800e68c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	4a1a      	ldr	r2, [pc, #104]	; (800e6d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e66a:	4293      	cmp	r3, r2
 800e66c:	d00e      	beq.n	800e68c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	4a15      	ldr	r2, [pc, #84]	; (800e6c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e674:	4293      	cmp	r3, r2
 800e676:	d009      	beq.n	800e68c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	4a16      	ldr	r2, [pc, #88]	; (800e6d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e67e:	4293      	cmp	r3, r2
 800e680:	d004      	beq.n	800e68c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	4a15      	ldr	r2, [pc, #84]	; (800e6dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e688:	4293      	cmp	r3, r2
 800e68a:	d10c      	bne.n	800e6a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e692:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	689b      	ldr	r3, [r3, #8]
 800e698:	68ba      	ldr	r2, [r7, #8]
 800e69a:	4313      	orrs	r3, r2
 800e69c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	68ba      	ldr	r2, [r7, #8]
 800e6a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2201      	movs	r2, #1
 800e6aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e6b6:	2300      	movs	r3, #0
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	3714      	adds	r7, #20
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c2:	4770      	bx	lr
 800e6c4:	40010000 	.word	0x40010000
 800e6c8:	40010400 	.word	0x40010400
 800e6cc:	40000400 	.word	0x40000400
 800e6d0:	40000800 	.word	0x40000800
 800e6d4:	40000c00 	.word	0x40000c00
 800e6d8:	40001800 	.word	0x40001800
 800e6dc:	40014000 	.word	0x40014000

0800e6e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b085      	sub	sp, #20
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	d101      	bne.n	800e6fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e6f8:	2302      	movs	r3, #2
 800e6fa:	e065      	b.n	800e7c8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2201      	movs	r2, #1
 800e700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	68db      	ldr	r3, [r3, #12]
 800e70e:	4313      	orrs	r3, r2
 800e710:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	689b      	ldr	r3, [r3, #8]
 800e71c:	4313      	orrs	r3, r2
 800e71e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	685b      	ldr	r3, [r3, #4]
 800e72a:	4313      	orrs	r3, r2
 800e72c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	4313      	orrs	r3, r2
 800e73a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	691b      	ldr	r3, [r3, #16]
 800e746:	4313      	orrs	r3, r2
 800e748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	695b      	ldr	r3, [r3, #20]
 800e754:	4313      	orrs	r3, r2
 800e756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e762:	4313      	orrs	r3, r2
 800e764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	699b      	ldr	r3, [r3, #24]
 800e770:	041b      	lsls	r3, r3, #16
 800e772:	4313      	orrs	r3, r2
 800e774:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	4a16      	ldr	r2, [pc, #88]	; (800e7d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e77c:	4293      	cmp	r3, r2
 800e77e:	d004      	beq.n	800e78a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	4a14      	ldr	r2, [pc, #80]	; (800e7d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e786:	4293      	cmp	r3, r2
 800e788:	d115      	bne.n	800e7b6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e794:	051b      	lsls	r3, r3, #20
 800e796:	4313      	orrs	r3, r2
 800e798:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	69db      	ldr	r3, [r3, #28]
 800e7a4:	4313      	orrs	r3, r2
 800e7a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	6a1b      	ldr	r3, [r3, #32]
 800e7b2:	4313      	orrs	r3, r2
 800e7b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	68fa      	ldr	r2, [r7, #12]
 800e7bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e7c6:	2300      	movs	r3, #0
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	3714      	adds	r7, #20
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d2:	4770      	bx	lr
 800e7d4:	40010000 	.word	0x40010000
 800e7d8:	40010400 	.word	0x40010400

0800e7dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b083      	sub	sp, #12
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e7e4:	bf00      	nop
 800e7e6:	370c      	adds	r7, #12
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ee:	4770      	bx	lr

0800e7f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e7f0:	b480      	push	{r7}
 800e7f2:	b083      	sub	sp, #12
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e7f8:	bf00      	nop
 800e7fa:	370c      	adds	r7, #12
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e802:	4770      	bx	lr

0800e804 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e804:	b480      	push	{r7}
 800e806:	b083      	sub	sp, #12
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e80c:	bf00      	nop
 800e80e:	370c      	adds	r7, #12
 800e810:	46bd      	mov	sp, r7
 800e812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e816:	4770      	bx	lr

0800e818 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b082      	sub	sp, #8
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d101      	bne.n	800e82a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e826:	2301      	movs	r3, #1
 800e828:	e042      	b.n	800e8b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e830:	2b00      	cmp	r3, #0
 800e832:	d106      	bne.n	800e842 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2200      	movs	r2, #0
 800e838:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f7f4 fb85 	bl	8002f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2224      	movs	r2, #36	; 0x24
 800e846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	681a      	ldr	r2, [r3, #0]
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	f022 0201 	bic.w	r2, r2, #1
 800e858:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d002      	beq.n	800e868 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f001 fb0c 	bl	800fe80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f000 fda1 	bl	800f3b0 <UART_SetConfig>
 800e86e:	4603      	mov	r3, r0
 800e870:	2b01      	cmp	r3, #1
 800e872:	d101      	bne.n	800e878 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e874:	2301      	movs	r3, #1
 800e876:	e01b      	b.n	800e8b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	685a      	ldr	r2, [r3, #4]
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e886:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	689a      	ldr	r2, [r3, #8]
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e896:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	681a      	ldr	r2, [r3, #0]
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	f042 0201 	orr.w	r2, r2, #1
 800e8a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f001 fb8b 	bl	800ffc4 <UART_CheckIdleState>
 800e8ae:	4603      	mov	r3, r0
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3708      	adds	r7, #8
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}

0800e8b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b08a      	sub	sp, #40	; 0x28
 800e8bc:	af02      	add	r7, sp, #8
 800e8be:	60f8      	str	r0, [r7, #12]
 800e8c0:	60b9      	str	r1, [r7, #8]
 800e8c2:	603b      	str	r3, [r7, #0]
 800e8c4:	4613      	mov	r3, r2
 800e8c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8ce:	2b20      	cmp	r3, #32
 800e8d0:	d17b      	bne.n	800e9ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d002      	beq.n	800e8de <HAL_UART_Transmit+0x26>
 800e8d8:	88fb      	ldrh	r3, [r7, #6]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d101      	bne.n	800e8e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e8de:	2301      	movs	r3, #1
 800e8e0:	e074      	b.n	800e9cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	2221      	movs	r2, #33	; 0x21
 800e8ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e8f2:	f7f4 fe65 	bl	80035c0 <HAL_GetTick>
 800e8f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	88fa      	ldrh	r2, [r7, #6]
 800e8fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	88fa      	ldrh	r2, [r7, #6]
 800e904:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	689b      	ldr	r3, [r3, #8]
 800e90c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e910:	d108      	bne.n	800e924 <HAL_UART_Transmit+0x6c>
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	691b      	ldr	r3, [r3, #16]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d104      	bne.n	800e924 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e91a:	2300      	movs	r3, #0
 800e91c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	61bb      	str	r3, [r7, #24]
 800e922:	e003      	b.n	800e92c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e928:	2300      	movs	r3, #0
 800e92a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e92c:	e030      	b.n	800e990 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	9300      	str	r3, [sp, #0]
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	2200      	movs	r2, #0
 800e936:	2180      	movs	r1, #128	; 0x80
 800e938:	68f8      	ldr	r0, [r7, #12]
 800e93a:	f001 fbed 	bl	8010118 <UART_WaitOnFlagUntilTimeout>
 800e93e:	4603      	mov	r3, r0
 800e940:	2b00      	cmp	r3, #0
 800e942:	d005      	beq.n	800e950 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2220      	movs	r2, #32
 800e948:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e94c:	2303      	movs	r3, #3
 800e94e:	e03d      	b.n	800e9cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e950:	69fb      	ldr	r3, [r7, #28]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d10b      	bne.n	800e96e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e956:	69bb      	ldr	r3, [r7, #24]
 800e958:	881b      	ldrh	r3, [r3, #0]
 800e95a:	461a      	mov	r2, r3
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e964:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e966:	69bb      	ldr	r3, [r7, #24]
 800e968:	3302      	adds	r3, #2
 800e96a:	61bb      	str	r3, [r7, #24]
 800e96c:	e007      	b.n	800e97e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e96e:	69fb      	ldr	r3, [r7, #28]
 800e970:	781a      	ldrb	r2, [r3, #0]
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e978:	69fb      	ldr	r3, [r7, #28]
 800e97a:	3301      	adds	r3, #1
 800e97c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e984:	b29b      	uxth	r3, r3
 800e986:	3b01      	subs	r3, #1
 800e988:	b29a      	uxth	r2, r3
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e996:	b29b      	uxth	r3, r3
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d1c8      	bne.n	800e92e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	9300      	str	r3, [sp, #0]
 800e9a0:	697b      	ldr	r3, [r7, #20]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	2140      	movs	r1, #64	; 0x40
 800e9a6:	68f8      	ldr	r0, [r7, #12]
 800e9a8:	f001 fbb6 	bl	8010118 <UART_WaitOnFlagUntilTimeout>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d005      	beq.n	800e9be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	2220      	movs	r2, #32
 800e9b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e9ba:	2303      	movs	r3, #3
 800e9bc:	e006      	b.n	800e9cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	2220      	movs	r2, #32
 800e9c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	e000      	b.n	800e9cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e9ca:	2302      	movs	r3, #2
  }
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3720      	adds	r7, #32
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}

0800e9d4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b08a      	sub	sp, #40	; 0x28
 800e9d8:	af02      	add	r7, sp, #8
 800e9da:	60f8      	str	r0, [r7, #12]
 800e9dc:	60b9      	str	r1, [r7, #8]
 800e9de:	603b      	str	r3, [r7, #0]
 800e9e0:	4613      	mov	r3, r2
 800e9e2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e9ea:	2b20      	cmp	r3, #32
 800e9ec:	f040 80b5 	bne.w	800eb5a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d002      	beq.n	800e9fc <HAL_UART_Receive+0x28>
 800e9f6:	88fb      	ldrh	r3, [r7, #6]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d101      	bne.n	800ea00 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	e0ad      	b.n	800eb5c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	2200      	movs	r2, #0
 800ea04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	2222      	movs	r2, #34	; 0x22
 800ea0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	2200      	movs	r2, #0
 800ea14:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ea16:	f7f4 fdd3 	bl	80035c0 <HAL_GetTick>
 800ea1a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	88fa      	ldrh	r2, [r7, #6]
 800ea20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	88fa      	ldrh	r2, [r7, #6]
 800ea28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	689b      	ldr	r3, [r3, #8]
 800ea30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea34:	d10e      	bne.n	800ea54 <HAL_UART_Receive+0x80>
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	691b      	ldr	r3, [r3, #16]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d105      	bne.n	800ea4a <HAL_UART_Receive+0x76>
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ea44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ea48:	e02d      	b.n	800eaa6 <HAL_UART_Receive+0xd2>
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	22ff      	movs	r2, #255	; 0xff
 800ea4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ea52:	e028      	b.n	800eaa6 <HAL_UART_Receive+0xd2>
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	689b      	ldr	r3, [r3, #8]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d10d      	bne.n	800ea78 <HAL_UART_Receive+0xa4>
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	691b      	ldr	r3, [r3, #16]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d104      	bne.n	800ea6e <HAL_UART_Receive+0x9a>
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	22ff      	movs	r2, #255	; 0xff
 800ea68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ea6c:	e01b      	b.n	800eaa6 <HAL_UART_Receive+0xd2>
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	227f      	movs	r2, #127	; 0x7f
 800ea72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ea76:	e016      	b.n	800eaa6 <HAL_UART_Receive+0xd2>
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	689b      	ldr	r3, [r3, #8]
 800ea7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ea80:	d10d      	bne.n	800ea9e <HAL_UART_Receive+0xca>
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	691b      	ldr	r3, [r3, #16]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d104      	bne.n	800ea94 <HAL_UART_Receive+0xc0>
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	227f      	movs	r2, #127	; 0x7f
 800ea8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ea92:	e008      	b.n	800eaa6 <HAL_UART_Receive+0xd2>
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	223f      	movs	r2, #63	; 0x3f
 800ea98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ea9c:	e003      	b.n	800eaa6 <HAL_UART_Receive+0xd2>
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eaac:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	689b      	ldr	r3, [r3, #8]
 800eab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eab6:	d108      	bne.n	800eaca <HAL_UART_Receive+0xf6>
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	691b      	ldr	r3, [r3, #16]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d104      	bne.n	800eaca <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800eac0:	2300      	movs	r3, #0
 800eac2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	61bb      	str	r3, [r7, #24]
 800eac8:	e003      	b.n	800ead2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800eaca:	68bb      	ldr	r3, [r7, #8]
 800eacc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800eace:	2300      	movs	r3, #0
 800ead0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ead2:	e036      	b.n	800eb42 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	9300      	str	r3, [sp, #0]
 800ead8:	697b      	ldr	r3, [r7, #20]
 800eada:	2200      	movs	r2, #0
 800eadc:	2120      	movs	r1, #32
 800eade:	68f8      	ldr	r0, [r7, #12]
 800eae0:	f001 fb1a 	bl	8010118 <UART_WaitOnFlagUntilTimeout>
 800eae4:	4603      	mov	r3, r0
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d005      	beq.n	800eaf6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	2220      	movs	r2, #32
 800eaee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800eaf2:	2303      	movs	r3, #3
 800eaf4:	e032      	b.n	800eb5c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800eaf6:	69fb      	ldr	r3, [r7, #28]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d10c      	bne.n	800eb16 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb02:	b29a      	uxth	r2, r3
 800eb04:	8a7b      	ldrh	r3, [r7, #18]
 800eb06:	4013      	ands	r3, r2
 800eb08:	b29a      	uxth	r2, r3
 800eb0a:	69bb      	ldr	r3, [r7, #24]
 800eb0c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800eb0e:	69bb      	ldr	r3, [r7, #24]
 800eb10:	3302      	adds	r3, #2
 800eb12:	61bb      	str	r3, [r7, #24]
 800eb14:	e00c      	b.n	800eb30 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb1c:	b2da      	uxtb	r2, r3
 800eb1e:	8a7b      	ldrh	r3, [r7, #18]
 800eb20:	b2db      	uxtb	r3, r3
 800eb22:	4013      	ands	r3, r2
 800eb24:	b2da      	uxtb	r2, r3
 800eb26:	69fb      	ldr	r3, [r7, #28]
 800eb28:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800eb2a:	69fb      	ldr	r3, [r7, #28]
 800eb2c:	3301      	adds	r3, #1
 800eb2e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb36:	b29b      	uxth	r3, r3
 800eb38:	3b01      	subs	r3, #1
 800eb3a:	b29a      	uxth	r2, r3
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb48:	b29b      	uxth	r3, r3
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d1c2      	bne.n	800ead4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2220      	movs	r2, #32
 800eb52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800eb56:	2300      	movs	r3, #0
 800eb58:	e000      	b.n	800eb5c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800eb5a:	2302      	movs	r3, #2
  }
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3720      	adds	r7, #32
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b08a      	sub	sp, #40	; 0x28
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	60f8      	str	r0, [r7, #12]
 800eb6c:	60b9      	str	r1, [r7, #8]
 800eb6e:	4613      	mov	r3, r2
 800eb70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb78:	2b20      	cmp	r3, #32
 800eb7a:	d137      	bne.n	800ebec <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d002      	beq.n	800eb88 <HAL_UART_Receive_IT+0x24>
 800eb82:	88fb      	ldrh	r3, [r7, #6]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d101      	bne.n	800eb8c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800eb88:	2301      	movs	r3, #1
 800eb8a:	e030      	b.n	800ebee <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	4a18      	ldr	r2, [pc, #96]	; (800ebf8 <HAL_UART_Receive_IT+0x94>)
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	d01f      	beq.n	800ebdc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	685b      	ldr	r3, [r3, #4]
 800eba2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d018      	beq.n	800ebdc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	e853 3f00 	ldrex	r3, [r3]
 800ebb6:	613b      	str	r3, [r7, #16]
   return(result);
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ebbe:	627b      	str	r3, [r7, #36]	; 0x24
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	461a      	mov	r2, r3
 800ebc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc8:	623b      	str	r3, [r7, #32]
 800ebca:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebcc:	69f9      	ldr	r1, [r7, #28]
 800ebce:	6a3a      	ldr	r2, [r7, #32]
 800ebd0:	e841 2300 	strex	r3, r2, [r1]
 800ebd4:	61bb      	str	r3, [r7, #24]
   return(result);
 800ebd6:	69bb      	ldr	r3, [r7, #24]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d1e6      	bne.n	800ebaa <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ebdc:	88fb      	ldrh	r3, [r7, #6]
 800ebde:	461a      	mov	r2, r3
 800ebe0:	68b9      	ldr	r1, [r7, #8]
 800ebe2:	68f8      	ldr	r0, [r7, #12]
 800ebe4:	f001 fb06 	bl	80101f4 <UART_Start_Receive_IT>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	e000      	b.n	800ebee <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ebec:	2302      	movs	r3, #2
  }
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	3728      	adds	r7, #40	; 0x28
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
 800ebf6:	bf00      	nop
 800ebf8:	58000c00 	.word	0x58000c00

0800ebfc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b0ba      	sub	sp, #232	; 0xe8
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	69db      	ldr	r3, [r3, #28]
 800ec0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	689b      	ldr	r3, [r3, #8]
 800ec1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ec22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ec26:	f640 030f 	movw	r3, #2063	; 0x80f
 800ec2a:	4013      	ands	r3, r2
 800ec2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ec30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d11b      	bne.n	800ec70 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ec38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec3c:	f003 0320 	and.w	r3, r3, #32
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d015      	beq.n	800ec70 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ec44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec48:	f003 0320 	and.w	r3, r3, #32
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d105      	bne.n	800ec5c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ec50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ec54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d009      	beq.n	800ec70 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	f000 8377 	beq.w	800f354 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	4798      	blx	r3
      }
      return;
 800ec6e:	e371      	b.n	800f354 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ec70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	f000 8123 	beq.w	800eec0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ec7a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ec7e:	4b8d      	ldr	r3, [pc, #564]	; (800eeb4 <HAL_UART_IRQHandler+0x2b8>)
 800ec80:	4013      	ands	r3, r2
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d106      	bne.n	800ec94 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ec86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ec8a:	4b8b      	ldr	r3, [pc, #556]	; (800eeb8 <HAL_UART_IRQHandler+0x2bc>)
 800ec8c:	4013      	ands	r3, r2
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	f000 8116 	beq.w	800eec0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ec94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec98:	f003 0301 	and.w	r3, r3, #1
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d011      	beq.n	800ecc4 <HAL_UART_IRQHandler+0xc8>
 800eca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d00b      	beq.n	800ecc4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	2201      	movs	r2, #1
 800ecb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ecba:	f043 0201 	orr.w	r2, r3, #1
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ecc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecc8:	f003 0302 	and.w	r3, r3, #2
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d011      	beq.n	800ecf4 <HAL_UART_IRQHandler+0xf8>
 800ecd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ecd4:	f003 0301 	and.w	r3, r3, #1
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d00b      	beq.n	800ecf4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	2202      	movs	r2, #2
 800ece2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ecea:	f043 0204 	orr.w	r2, r3, #4
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ecf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecf8:	f003 0304 	and.w	r3, r3, #4
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d011      	beq.n	800ed24 <HAL_UART_IRQHandler+0x128>
 800ed00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed04:	f003 0301 	and.w	r3, r3, #1
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d00b      	beq.n	800ed24 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	2204      	movs	r2, #4
 800ed12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed1a:	f043 0202 	orr.w	r2, r3, #2
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ed24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed28:	f003 0308 	and.w	r3, r3, #8
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d017      	beq.n	800ed60 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ed30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed34:	f003 0320 	and.w	r3, r3, #32
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d105      	bne.n	800ed48 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ed3c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ed40:	4b5c      	ldr	r3, [pc, #368]	; (800eeb4 <HAL_UART_IRQHandler+0x2b8>)
 800ed42:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d00b      	beq.n	800ed60 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	2208      	movs	r2, #8
 800ed4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed56:	f043 0208 	orr.w	r2, r3, #8
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ed60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d012      	beq.n	800ed92 <HAL_UART_IRQHandler+0x196>
 800ed6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d00c      	beq.n	800ed92 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ed80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed88:	f043 0220 	orr.w	r2, r3, #32
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	f000 82dd 	beq.w	800f358 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ed9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eda2:	f003 0320 	and.w	r3, r3, #32
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d013      	beq.n	800edd2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800edaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800edae:	f003 0320 	and.w	r3, r3, #32
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d105      	bne.n	800edc2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800edb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800edba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d007      	beq.n	800edd2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d003      	beq.n	800edd2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	689b      	ldr	r3, [r3, #8]
 800ede2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ede6:	2b40      	cmp	r3, #64	; 0x40
 800ede8:	d005      	beq.n	800edf6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800edea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800edee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d054      	beq.n	800eea0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f001 fb1e 	bl	8010438 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	689b      	ldr	r3, [r3, #8]
 800ee02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee06:	2b40      	cmp	r3, #64	; 0x40
 800ee08:	d146      	bne.n	800ee98 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	3308      	adds	r3, #8
 800ee10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ee18:	e853 3f00 	ldrex	r3, [r3]
 800ee1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ee20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ee24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	3308      	adds	r3, #8
 800ee32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ee36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ee3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ee42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ee46:	e841 2300 	strex	r3, r2, [r1]
 800ee4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ee4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d1d9      	bne.n	800ee0a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d017      	beq.n	800ee90 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee66:	4a15      	ldr	r2, [pc, #84]	; (800eebc <HAL_UART_IRQHandler+0x2c0>)
 800ee68:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee70:	4618      	mov	r0, r3
 800ee72:	f7f7 fdb1 	bl	80069d8 <HAL_DMA_Abort_IT>
 800ee76:	4603      	mov	r3, r0
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d019      	beq.n	800eeb0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee84:	687a      	ldr	r2, [r7, #4]
 800ee86:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800ee8a:	4610      	mov	r0, r2
 800ee8c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee8e:	e00f      	b.n	800eeb0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f000 fa77 	bl	800f384 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee96:	e00b      	b.n	800eeb0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f000 fa73 	bl	800f384 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee9e:	e007      	b.n	800eeb0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f000 fa6f 	bl	800f384 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2200      	movs	r2, #0
 800eeaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800eeae:	e253      	b.n	800f358 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eeb0:	bf00      	nop
    return;
 800eeb2:	e251      	b.n	800f358 <HAL_UART_IRQHandler+0x75c>
 800eeb4:	10000001 	.word	0x10000001
 800eeb8:	04000120 	.word	0x04000120
 800eebc:	08010505 	.word	0x08010505

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eec4:	2b01      	cmp	r3, #1
 800eec6:	f040 81e7 	bne.w	800f298 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800eeca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eece:	f003 0310 	and.w	r3, r3, #16
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	f000 81e0 	beq.w	800f298 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800eed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eedc:	f003 0310 	and.w	r3, r3, #16
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	f000 81d9 	beq.w	800f298 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	2210      	movs	r2, #16
 800eeec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	689b      	ldr	r3, [r3, #8]
 800eef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eef8:	2b40      	cmp	r3, #64	; 0x40
 800eefa:	f040 8151 	bne.w	800f1a0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	4a96      	ldr	r2, [pc, #600]	; (800f160 <HAL_UART_IRQHandler+0x564>)
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d068      	beq.n	800efde <HAL_UART_IRQHandler+0x3e2>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	4a93      	ldr	r2, [pc, #588]	; (800f164 <HAL_UART_IRQHandler+0x568>)
 800ef16:	4293      	cmp	r3, r2
 800ef18:	d061      	beq.n	800efde <HAL_UART_IRQHandler+0x3e2>
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	4a91      	ldr	r2, [pc, #580]	; (800f168 <HAL_UART_IRQHandler+0x56c>)
 800ef24:	4293      	cmp	r3, r2
 800ef26:	d05a      	beq.n	800efde <HAL_UART_IRQHandler+0x3e2>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	4a8e      	ldr	r2, [pc, #568]	; (800f16c <HAL_UART_IRQHandler+0x570>)
 800ef32:	4293      	cmp	r3, r2
 800ef34:	d053      	beq.n	800efde <HAL_UART_IRQHandler+0x3e2>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	4a8c      	ldr	r2, [pc, #560]	; (800f170 <HAL_UART_IRQHandler+0x574>)
 800ef40:	4293      	cmp	r3, r2
 800ef42:	d04c      	beq.n	800efde <HAL_UART_IRQHandler+0x3e2>
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	4a89      	ldr	r2, [pc, #548]	; (800f174 <HAL_UART_IRQHandler+0x578>)
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	d045      	beq.n	800efde <HAL_UART_IRQHandler+0x3e2>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	4a87      	ldr	r2, [pc, #540]	; (800f178 <HAL_UART_IRQHandler+0x57c>)
 800ef5c:	4293      	cmp	r3, r2
 800ef5e:	d03e      	beq.n	800efde <HAL_UART_IRQHandler+0x3e2>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	4a84      	ldr	r2, [pc, #528]	; (800f17c <HAL_UART_IRQHandler+0x580>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d037      	beq.n	800efde <HAL_UART_IRQHandler+0x3e2>
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	4a82      	ldr	r2, [pc, #520]	; (800f180 <HAL_UART_IRQHandler+0x584>)
 800ef78:	4293      	cmp	r3, r2
 800ef7a:	d030      	beq.n	800efde <HAL_UART_IRQHandler+0x3e2>
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	4a7f      	ldr	r2, [pc, #508]	; (800f184 <HAL_UART_IRQHandler+0x588>)
 800ef86:	4293      	cmp	r3, r2
 800ef88:	d029      	beq.n	800efde <HAL_UART_IRQHandler+0x3e2>
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	4a7d      	ldr	r2, [pc, #500]	; (800f188 <HAL_UART_IRQHandler+0x58c>)
 800ef94:	4293      	cmp	r3, r2
 800ef96:	d022      	beq.n	800efde <HAL_UART_IRQHandler+0x3e2>
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	4a7a      	ldr	r2, [pc, #488]	; (800f18c <HAL_UART_IRQHandler+0x590>)
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d01b      	beq.n	800efde <HAL_UART_IRQHandler+0x3e2>
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	4a78      	ldr	r2, [pc, #480]	; (800f190 <HAL_UART_IRQHandler+0x594>)
 800efb0:	4293      	cmp	r3, r2
 800efb2:	d014      	beq.n	800efde <HAL_UART_IRQHandler+0x3e2>
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	4a75      	ldr	r2, [pc, #468]	; (800f194 <HAL_UART_IRQHandler+0x598>)
 800efbe:	4293      	cmp	r3, r2
 800efc0:	d00d      	beq.n	800efde <HAL_UART_IRQHandler+0x3e2>
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	4a73      	ldr	r2, [pc, #460]	; (800f198 <HAL_UART_IRQHandler+0x59c>)
 800efcc:	4293      	cmp	r3, r2
 800efce:	d006      	beq.n	800efde <HAL_UART_IRQHandler+0x3e2>
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	4a70      	ldr	r2, [pc, #448]	; (800f19c <HAL_UART_IRQHandler+0x5a0>)
 800efda:	4293      	cmp	r3, r2
 800efdc:	d106      	bne.n	800efec <HAL_UART_IRQHandler+0x3f0>
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	685b      	ldr	r3, [r3, #4]
 800efe8:	b29b      	uxth	r3, r3
 800efea:	e005      	b.n	800eff8 <HAL_UART_IRQHandler+0x3fc>
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	685b      	ldr	r3, [r3, #4]
 800eff6:	b29b      	uxth	r3, r3
 800eff8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800effc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f000:	2b00      	cmp	r3, #0
 800f002:	f000 81ab 	beq.w	800f35c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f00c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f010:	429a      	cmp	r2, r3
 800f012:	f080 81a3 	bcs.w	800f35c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f01c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f026:	69db      	ldr	r3, [r3, #28]
 800f028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f02c:	f000 8087 	beq.w	800f13e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f038:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f03c:	e853 3f00 	ldrex	r3, [r3]
 800f040:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f044:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f04c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	461a      	mov	r2, r3
 800f056:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f05a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f05e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f062:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f066:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f06a:	e841 2300 	strex	r3, r2, [r1]
 800f06e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f072:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f076:	2b00      	cmp	r3, #0
 800f078:	d1da      	bne.n	800f030 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	3308      	adds	r3, #8
 800f080:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f084:	e853 3f00 	ldrex	r3, [r3]
 800f088:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f08a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f08c:	f023 0301 	bic.w	r3, r3, #1
 800f090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	3308      	adds	r3, #8
 800f09a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f09e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f0a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f0a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f0aa:	e841 2300 	strex	r3, r2, [r1]
 800f0ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f0b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d1e1      	bne.n	800f07a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	3308      	adds	r3, #8
 800f0bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0c0:	e853 3f00 	ldrex	r3, [r3]
 800f0c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f0c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	3308      	adds	r3, #8
 800f0d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f0da:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f0dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f0e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f0e2:	e841 2300 	strex	r3, r2, [r1]
 800f0e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f0e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d1e3      	bne.n	800f0b6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2220      	movs	r2, #32
 800f0f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f104:	e853 3f00 	ldrex	r3, [r3]
 800f108:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f10a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f10c:	f023 0310 	bic.w	r3, r3, #16
 800f110:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	461a      	mov	r2, r3
 800f11a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f11e:	65bb      	str	r3, [r7, #88]	; 0x58
 800f120:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f122:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f124:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f126:	e841 2300 	strex	r3, r2, [r1]
 800f12a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f12c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d1e4      	bne.n	800f0fc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f138:	4618      	mov	r0, r3
 800f13a:	f7f7 f92f 	bl	800639c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	2202      	movs	r2, #2
 800f142:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f150:	b29b      	uxth	r3, r3
 800f152:	1ad3      	subs	r3, r2, r3
 800f154:	b29b      	uxth	r3, r3
 800f156:	4619      	mov	r1, r3
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f000 f91d 	bl	800f398 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f15e:	e0fd      	b.n	800f35c <HAL_UART_IRQHandler+0x760>
 800f160:	40020010 	.word	0x40020010
 800f164:	40020028 	.word	0x40020028
 800f168:	40020040 	.word	0x40020040
 800f16c:	40020058 	.word	0x40020058
 800f170:	40020070 	.word	0x40020070
 800f174:	40020088 	.word	0x40020088
 800f178:	400200a0 	.word	0x400200a0
 800f17c:	400200b8 	.word	0x400200b8
 800f180:	40020410 	.word	0x40020410
 800f184:	40020428 	.word	0x40020428
 800f188:	40020440 	.word	0x40020440
 800f18c:	40020458 	.word	0x40020458
 800f190:	40020470 	.word	0x40020470
 800f194:	40020488 	.word	0x40020488
 800f198:	400204a0 	.word	0x400204a0
 800f19c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f1ac:	b29b      	uxth	r3, r3
 800f1ae:	1ad3      	subs	r3, r2, r3
 800f1b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f1ba:	b29b      	uxth	r3, r3
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	f000 80cf 	beq.w	800f360 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800f1c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	f000 80ca 	beq.w	800f360 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d4:	e853 3f00 	ldrex	r3, [r3]
 800f1d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f1da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f1e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	461a      	mov	r2, r3
 800f1ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f1ee:	647b      	str	r3, [r7, #68]	; 0x44
 800f1f0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f1f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f1f6:	e841 2300 	strex	r3, r2, [r1]
 800f1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f1fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d1e4      	bne.n	800f1cc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	3308      	adds	r3, #8
 800f208:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f20c:	e853 3f00 	ldrex	r3, [r3]
 800f210:	623b      	str	r3, [r7, #32]
   return(result);
 800f212:	6a3a      	ldr	r2, [r7, #32]
 800f214:	4b55      	ldr	r3, [pc, #340]	; (800f36c <HAL_UART_IRQHandler+0x770>)
 800f216:	4013      	ands	r3, r2
 800f218:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	3308      	adds	r3, #8
 800f222:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f226:	633a      	str	r2, [r7, #48]	; 0x30
 800f228:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f22a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f22c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f22e:	e841 2300 	strex	r3, r2, [r1]
 800f232:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f236:	2b00      	cmp	r3, #0
 800f238:	d1e3      	bne.n	800f202 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	2220      	movs	r2, #32
 800f23e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2200      	movs	r2, #0
 800f246:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2200      	movs	r2, #0
 800f24c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	e853 3f00 	ldrex	r3, [r3]
 800f25a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	f023 0310 	bic.w	r3, r3, #16
 800f262:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	461a      	mov	r2, r3
 800f26c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f270:	61fb      	str	r3, [r7, #28]
 800f272:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f274:	69b9      	ldr	r1, [r7, #24]
 800f276:	69fa      	ldr	r2, [r7, #28]
 800f278:	e841 2300 	strex	r3, r2, [r1]
 800f27c:	617b      	str	r3, [r7, #20]
   return(result);
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d1e4      	bne.n	800f24e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2202      	movs	r2, #2
 800f288:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f28a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f28e:	4619      	mov	r1, r3
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f000 f881 	bl	800f398 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f296:	e063      	b.n	800f360 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f29c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d00e      	beq.n	800f2c2 <HAL_UART_IRQHandler+0x6c6>
 800f2a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f2a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d008      	beq.n	800f2c2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f2b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f001 fe80 	bl	8010fc0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f2c0:	e051      	b.n	800f366 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f2c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d014      	beq.n	800f2f8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f2ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f2d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d105      	bne.n	800f2e6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f2da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f2de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d008      	beq.n	800f2f8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d03a      	beq.n	800f364 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	4798      	blx	r3
    }
    return;
 800f2f6:	e035      	b.n	800f364 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f2f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f300:	2b00      	cmp	r3, #0
 800f302:	d009      	beq.n	800f318 <HAL_UART_IRQHandler+0x71c>
 800f304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d003      	beq.n	800f318 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f001 f90d 	bl	8010530 <UART_EndTransmit_IT>
    return;
 800f316:	e026      	b.n	800f366 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f31c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f320:	2b00      	cmp	r3, #0
 800f322:	d009      	beq.n	800f338 <HAL_UART_IRQHandler+0x73c>
 800f324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f328:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d003      	beq.n	800f338 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f001 fe59 	bl	8010fe8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f336:	e016      	b.n	800f366 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f33c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f340:	2b00      	cmp	r3, #0
 800f342:	d010      	beq.n	800f366 <HAL_UART_IRQHandler+0x76a>
 800f344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f348:	2b00      	cmp	r3, #0
 800f34a:	da0c      	bge.n	800f366 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	f001 fe41 	bl	8010fd4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f352:	e008      	b.n	800f366 <HAL_UART_IRQHandler+0x76a>
      return;
 800f354:	bf00      	nop
 800f356:	e006      	b.n	800f366 <HAL_UART_IRQHandler+0x76a>
    return;
 800f358:	bf00      	nop
 800f35a:	e004      	b.n	800f366 <HAL_UART_IRQHandler+0x76a>
      return;
 800f35c:	bf00      	nop
 800f35e:	e002      	b.n	800f366 <HAL_UART_IRQHandler+0x76a>
      return;
 800f360:	bf00      	nop
 800f362:	e000      	b.n	800f366 <HAL_UART_IRQHandler+0x76a>
    return;
 800f364:	bf00      	nop
  }
}
 800f366:	37e8      	adds	r7, #232	; 0xe8
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}
 800f36c:	effffffe 	.word	0xeffffffe

0800f370 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f370:	b480      	push	{r7}
 800f372:	b083      	sub	sp, #12
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f378:	bf00      	nop
 800f37a:	370c      	adds	r7, #12
 800f37c:	46bd      	mov	sp, r7
 800f37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f382:	4770      	bx	lr

0800f384 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f384:	b480      	push	{r7}
 800f386:	b083      	sub	sp, #12
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f38c:	bf00      	nop
 800f38e:	370c      	adds	r7, #12
 800f390:	46bd      	mov	sp, r7
 800f392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f396:	4770      	bx	lr

0800f398 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f398:	b480      	push	{r7}
 800f39a:	b083      	sub	sp, #12
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
 800f3a0:	460b      	mov	r3, r1
 800f3a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f3a4:	bf00      	nop
 800f3a6:	370c      	adds	r7, #12
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ae:	4770      	bx	lr

0800f3b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f3b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f3b4:	b092      	sub	sp, #72	; 0x48
 800f3b6:	af00      	add	r7, sp, #0
 800f3b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	689a      	ldr	r2, [r3, #8]
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	691b      	ldr	r3, [r3, #16]
 800f3c8:	431a      	orrs	r2, r3
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	695b      	ldr	r3, [r3, #20]
 800f3ce:	431a      	orrs	r2, r3
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	69db      	ldr	r3, [r3, #28]
 800f3d4:	4313      	orrs	r3, r2
 800f3d6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	681a      	ldr	r2, [r3, #0]
 800f3de:	4bbe      	ldr	r3, [pc, #760]	; (800f6d8 <UART_SetConfig+0x328>)
 800f3e0:	4013      	ands	r3, r2
 800f3e2:	697a      	ldr	r2, [r7, #20]
 800f3e4:	6812      	ldr	r2, [r2, #0]
 800f3e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f3e8:	430b      	orrs	r3, r1
 800f3ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	685b      	ldr	r3, [r3, #4]
 800f3f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	68da      	ldr	r2, [r3, #12]
 800f3fa:	697b      	ldr	r3, [r7, #20]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	430a      	orrs	r2, r1
 800f400:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f402:	697b      	ldr	r3, [r7, #20]
 800f404:	699b      	ldr	r3, [r3, #24]
 800f406:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	4ab3      	ldr	r2, [pc, #716]	; (800f6dc <UART_SetConfig+0x32c>)
 800f40e:	4293      	cmp	r3, r2
 800f410:	d004      	beq.n	800f41c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	6a1b      	ldr	r3, [r3, #32]
 800f416:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f418:	4313      	orrs	r3, r2
 800f41a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	689a      	ldr	r2, [r3, #8]
 800f422:	4baf      	ldr	r3, [pc, #700]	; (800f6e0 <UART_SetConfig+0x330>)
 800f424:	4013      	ands	r3, r2
 800f426:	697a      	ldr	r2, [r7, #20]
 800f428:	6812      	ldr	r2, [r2, #0]
 800f42a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f42c:	430b      	orrs	r3, r1
 800f42e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f430:	697b      	ldr	r3, [r7, #20]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f436:	f023 010f 	bic.w	r1, r3, #15
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f43e:	697b      	ldr	r3, [r7, #20]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	430a      	orrs	r2, r1
 800f444:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f446:	697b      	ldr	r3, [r7, #20]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	4aa6      	ldr	r2, [pc, #664]	; (800f6e4 <UART_SetConfig+0x334>)
 800f44c:	4293      	cmp	r3, r2
 800f44e:	d177      	bne.n	800f540 <UART_SetConfig+0x190>
 800f450:	4ba5      	ldr	r3, [pc, #660]	; (800f6e8 <UART_SetConfig+0x338>)
 800f452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f454:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f458:	2b28      	cmp	r3, #40	; 0x28
 800f45a:	d86d      	bhi.n	800f538 <UART_SetConfig+0x188>
 800f45c:	a201      	add	r2, pc, #4	; (adr r2, 800f464 <UART_SetConfig+0xb4>)
 800f45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f462:	bf00      	nop
 800f464:	0800f509 	.word	0x0800f509
 800f468:	0800f539 	.word	0x0800f539
 800f46c:	0800f539 	.word	0x0800f539
 800f470:	0800f539 	.word	0x0800f539
 800f474:	0800f539 	.word	0x0800f539
 800f478:	0800f539 	.word	0x0800f539
 800f47c:	0800f539 	.word	0x0800f539
 800f480:	0800f539 	.word	0x0800f539
 800f484:	0800f511 	.word	0x0800f511
 800f488:	0800f539 	.word	0x0800f539
 800f48c:	0800f539 	.word	0x0800f539
 800f490:	0800f539 	.word	0x0800f539
 800f494:	0800f539 	.word	0x0800f539
 800f498:	0800f539 	.word	0x0800f539
 800f49c:	0800f539 	.word	0x0800f539
 800f4a0:	0800f539 	.word	0x0800f539
 800f4a4:	0800f519 	.word	0x0800f519
 800f4a8:	0800f539 	.word	0x0800f539
 800f4ac:	0800f539 	.word	0x0800f539
 800f4b0:	0800f539 	.word	0x0800f539
 800f4b4:	0800f539 	.word	0x0800f539
 800f4b8:	0800f539 	.word	0x0800f539
 800f4bc:	0800f539 	.word	0x0800f539
 800f4c0:	0800f539 	.word	0x0800f539
 800f4c4:	0800f521 	.word	0x0800f521
 800f4c8:	0800f539 	.word	0x0800f539
 800f4cc:	0800f539 	.word	0x0800f539
 800f4d0:	0800f539 	.word	0x0800f539
 800f4d4:	0800f539 	.word	0x0800f539
 800f4d8:	0800f539 	.word	0x0800f539
 800f4dc:	0800f539 	.word	0x0800f539
 800f4e0:	0800f539 	.word	0x0800f539
 800f4e4:	0800f529 	.word	0x0800f529
 800f4e8:	0800f539 	.word	0x0800f539
 800f4ec:	0800f539 	.word	0x0800f539
 800f4f0:	0800f539 	.word	0x0800f539
 800f4f4:	0800f539 	.word	0x0800f539
 800f4f8:	0800f539 	.word	0x0800f539
 800f4fc:	0800f539 	.word	0x0800f539
 800f500:	0800f539 	.word	0x0800f539
 800f504:	0800f531 	.word	0x0800f531
 800f508:	2301      	movs	r3, #1
 800f50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f50e:	e222      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f510:	2304      	movs	r3, #4
 800f512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f516:	e21e      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f518:	2308      	movs	r3, #8
 800f51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f51e:	e21a      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f520:	2310      	movs	r3, #16
 800f522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f526:	e216      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f528:	2320      	movs	r3, #32
 800f52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f52e:	e212      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f530:	2340      	movs	r3, #64	; 0x40
 800f532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f536:	e20e      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f538:	2380      	movs	r3, #128	; 0x80
 800f53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f53e:	e20a      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	4a69      	ldr	r2, [pc, #420]	; (800f6ec <UART_SetConfig+0x33c>)
 800f546:	4293      	cmp	r3, r2
 800f548:	d130      	bne.n	800f5ac <UART_SetConfig+0x1fc>
 800f54a:	4b67      	ldr	r3, [pc, #412]	; (800f6e8 <UART_SetConfig+0x338>)
 800f54c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f54e:	f003 0307 	and.w	r3, r3, #7
 800f552:	2b05      	cmp	r3, #5
 800f554:	d826      	bhi.n	800f5a4 <UART_SetConfig+0x1f4>
 800f556:	a201      	add	r2, pc, #4	; (adr r2, 800f55c <UART_SetConfig+0x1ac>)
 800f558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f55c:	0800f575 	.word	0x0800f575
 800f560:	0800f57d 	.word	0x0800f57d
 800f564:	0800f585 	.word	0x0800f585
 800f568:	0800f58d 	.word	0x0800f58d
 800f56c:	0800f595 	.word	0x0800f595
 800f570:	0800f59d 	.word	0x0800f59d
 800f574:	2300      	movs	r3, #0
 800f576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f57a:	e1ec      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f57c:	2304      	movs	r3, #4
 800f57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f582:	e1e8      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f584:	2308      	movs	r3, #8
 800f586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f58a:	e1e4      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f58c:	2310      	movs	r3, #16
 800f58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f592:	e1e0      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f594:	2320      	movs	r3, #32
 800f596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f59a:	e1dc      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f59c:	2340      	movs	r3, #64	; 0x40
 800f59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5a2:	e1d8      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f5a4:	2380      	movs	r3, #128	; 0x80
 800f5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5aa:	e1d4      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	4a4f      	ldr	r2, [pc, #316]	; (800f6f0 <UART_SetConfig+0x340>)
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	d130      	bne.n	800f618 <UART_SetConfig+0x268>
 800f5b6:	4b4c      	ldr	r3, [pc, #304]	; (800f6e8 <UART_SetConfig+0x338>)
 800f5b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5ba:	f003 0307 	and.w	r3, r3, #7
 800f5be:	2b05      	cmp	r3, #5
 800f5c0:	d826      	bhi.n	800f610 <UART_SetConfig+0x260>
 800f5c2:	a201      	add	r2, pc, #4	; (adr r2, 800f5c8 <UART_SetConfig+0x218>)
 800f5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5c8:	0800f5e1 	.word	0x0800f5e1
 800f5cc:	0800f5e9 	.word	0x0800f5e9
 800f5d0:	0800f5f1 	.word	0x0800f5f1
 800f5d4:	0800f5f9 	.word	0x0800f5f9
 800f5d8:	0800f601 	.word	0x0800f601
 800f5dc:	0800f609 	.word	0x0800f609
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5e6:	e1b6      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f5e8:	2304      	movs	r3, #4
 800f5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5ee:	e1b2      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f5f0:	2308      	movs	r3, #8
 800f5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5f6:	e1ae      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f5f8:	2310      	movs	r3, #16
 800f5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5fe:	e1aa      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f600:	2320      	movs	r3, #32
 800f602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f606:	e1a6      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f608:	2340      	movs	r3, #64	; 0x40
 800f60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f60e:	e1a2      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f610:	2380      	movs	r3, #128	; 0x80
 800f612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f616:	e19e      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	4a35      	ldr	r2, [pc, #212]	; (800f6f4 <UART_SetConfig+0x344>)
 800f61e:	4293      	cmp	r3, r2
 800f620:	d130      	bne.n	800f684 <UART_SetConfig+0x2d4>
 800f622:	4b31      	ldr	r3, [pc, #196]	; (800f6e8 <UART_SetConfig+0x338>)
 800f624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f626:	f003 0307 	and.w	r3, r3, #7
 800f62a:	2b05      	cmp	r3, #5
 800f62c:	d826      	bhi.n	800f67c <UART_SetConfig+0x2cc>
 800f62e:	a201      	add	r2, pc, #4	; (adr r2, 800f634 <UART_SetConfig+0x284>)
 800f630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f634:	0800f64d 	.word	0x0800f64d
 800f638:	0800f655 	.word	0x0800f655
 800f63c:	0800f65d 	.word	0x0800f65d
 800f640:	0800f665 	.word	0x0800f665
 800f644:	0800f66d 	.word	0x0800f66d
 800f648:	0800f675 	.word	0x0800f675
 800f64c:	2300      	movs	r3, #0
 800f64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f652:	e180      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f654:	2304      	movs	r3, #4
 800f656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f65a:	e17c      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f65c:	2308      	movs	r3, #8
 800f65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f662:	e178      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f664:	2310      	movs	r3, #16
 800f666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f66a:	e174      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f66c:	2320      	movs	r3, #32
 800f66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f672:	e170      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f674:	2340      	movs	r3, #64	; 0x40
 800f676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f67a:	e16c      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f67c:	2380      	movs	r3, #128	; 0x80
 800f67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f682:	e168      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f684:	697b      	ldr	r3, [r7, #20]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	4a1b      	ldr	r2, [pc, #108]	; (800f6f8 <UART_SetConfig+0x348>)
 800f68a:	4293      	cmp	r3, r2
 800f68c:	d142      	bne.n	800f714 <UART_SetConfig+0x364>
 800f68e:	4b16      	ldr	r3, [pc, #88]	; (800f6e8 <UART_SetConfig+0x338>)
 800f690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f692:	f003 0307 	and.w	r3, r3, #7
 800f696:	2b05      	cmp	r3, #5
 800f698:	d838      	bhi.n	800f70c <UART_SetConfig+0x35c>
 800f69a:	a201      	add	r2, pc, #4	; (adr r2, 800f6a0 <UART_SetConfig+0x2f0>)
 800f69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6a0:	0800f6b9 	.word	0x0800f6b9
 800f6a4:	0800f6c1 	.word	0x0800f6c1
 800f6a8:	0800f6c9 	.word	0x0800f6c9
 800f6ac:	0800f6d1 	.word	0x0800f6d1
 800f6b0:	0800f6fd 	.word	0x0800f6fd
 800f6b4:	0800f705 	.word	0x0800f705
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6be:	e14a      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f6c0:	2304      	movs	r3, #4
 800f6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6c6:	e146      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f6c8:	2308      	movs	r3, #8
 800f6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6ce:	e142      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f6d0:	2310      	movs	r3, #16
 800f6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6d6:	e13e      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f6d8:	cfff69f3 	.word	0xcfff69f3
 800f6dc:	58000c00 	.word	0x58000c00
 800f6e0:	11fff4ff 	.word	0x11fff4ff
 800f6e4:	40011000 	.word	0x40011000
 800f6e8:	58024400 	.word	0x58024400
 800f6ec:	40004400 	.word	0x40004400
 800f6f0:	40004800 	.word	0x40004800
 800f6f4:	40004c00 	.word	0x40004c00
 800f6f8:	40005000 	.word	0x40005000
 800f6fc:	2320      	movs	r3, #32
 800f6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f702:	e128      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f704:	2340      	movs	r3, #64	; 0x40
 800f706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f70a:	e124      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f70c:	2380      	movs	r3, #128	; 0x80
 800f70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f712:	e120      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f714:	697b      	ldr	r3, [r7, #20]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	4acb      	ldr	r2, [pc, #812]	; (800fa48 <UART_SetConfig+0x698>)
 800f71a:	4293      	cmp	r3, r2
 800f71c:	d176      	bne.n	800f80c <UART_SetConfig+0x45c>
 800f71e:	4bcb      	ldr	r3, [pc, #812]	; (800fa4c <UART_SetConfig+0x69c>)
 800f720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f722:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f726:	2b28      	cmp	r3, #40	; 0x28
 800f728:	d86c      	bhi.n	800f804 <UART_SetConfig+0x454>
 800f72a:	a201      	add	r2, pc, #4	; (adr r2, 800f730 <UART_SetConfig+0x380>)
 800f72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f730:	0800f7d5 	.word	0x0800f7d5
 800f734:	0800f805 	.word	0x0800f805
 800f738:	0800f805 	.word	0x0800f805
 800f73c:	0800f805 	.word	0x0800f805
 800f740:	0800f805 	.word	0x0800f805
 800f744:	0800f805 	.word	0x0800f805
 800f748:	0800f805 	.word	0x0800f805
 800f74c:	0800f805 	.word	0x0800f805
 800f750:	0800f7dd 	.word	0x0800f7dd
 800f754:	0800f805 	.word	0x0800f805
 800f758:	0800f805 	.word	0x0800f805
 800f75c:	0800f805 	.word	0x0800f805
 800f760:	0800f805 	.word	0x0800f805
 800f764:	0800f805 	.word	0x0800f805
 800f768:	0800f805 	.word	0x0800f805
 800f76c:	0800f805 	.word	0x0800f805
 800f770:	0800f7e5 	.word	0x0800f7e5
 800f774:	0800f805 	.word	0x0800f805
 800f778:	0800f805 	.word	0x0800f805
 800f77c:	0800f805 	.word	0x0800f805
 800f780:	0800f805 	.word	0x0800f805
 800f784:	0800f805 	.word	0x0800f805
 800f788:	0800f805 	.word	0x0800f805
 800f78c:	0800f805 	.word	0x0800f805
 800f790:	0800f7ed 	.word	0x0800f7ed
 800f794:	0800f805 	.word	0x0800f805
 800f798:	0800f805 	.word	0x0800f805
 800f79c:	0800f805 	.word	0x0800f805
 800f7a0:	0800f805 	.word	0x0800f805
 800f7a4:	0800f805 	.word	0x0800f805
 800f7a8:	0800f805 	.word	0x0800f805
 800f7ac:	0800f805 	.word	0x0800f805
 800f7b0:	0800f7f5 	.word	0x0800f7f5
 800f7b4:	0800f805 	.word	0x0800f805
 800f7b8:	0800f805 	.word	0x0800f805
 800f7bc:	0800f805 	.word	0x0800f805
 800f7c0:	0800f805 	.word	0x0800f805
 800f7c4:	0800f805 	.word	0x0800f805
 800f7c8:	0800f805 	.word	0x0800f805
 800f7cc:	0800f805 	.word	0x0800f805
 800f7d0:	0800f7fd 	.word	0x0800f7fd
 800f7d4:	2301      	movs	r3, #1
 800f7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7da:	e0bc      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f7dc:	2304      	movs	r3, #4
 800f7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7e2:	e0b8      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f7e4:	2308      	movs	r3, #8
 800f7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7ea:	e0b4      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f7ec:	2310      	movs	r3, #16
 800f7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7f2:	e0b0      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f7f4:	2320      	movs	r3, #32
 800f7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7fa:	e0ac      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f7fc:	2340      	movs	r3, #64	; 0x40
 800f7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f802:	e0a8      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f804:	2380      	movs	r3, #128	; 0x80
 800f806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f80a:	e0a4      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	4a8f      	ldr	r2, [pc, #572]	; (800fa50 <UART_SetConfig+0x6a0>)
 800f812:	4293      	cmp	r3, r2
 800f814:	d130      	bne.n	800f878 <UART_SetConfig+0x4c8>
 800f816:	4b8d      	ldr	r3, [pc, #564]	; (800fa4c <UART_SetConfig+0x69c>)
 800f818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f81a:	f003 0307 	and.w	r3, r3, #7
 800f81e:	2b05      	cmp	r3, #5
 800f820:	d826      	bhi.n	800f870 <UART_SetConfig+0x4c0>
 800f822:	a201      	add	r2, pc, #4	; (adr r2, 800f828 <UART_SetConfig+0x478>)
 800f824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f828:	0800f841 	.word	0x0800f841
 800f82c:	0800f849 	.word	0x0800f849
 800f830:	0800f851 	.word	0x0800f851
 800f834:	0800f859 	.word	0x0800f859
 800f838:	0800f861 	.word	0x0800f861
 800f83c:	0800f869 	.word	0x0800f869
 800f840:	2300      	movs	r3, #0
 800f842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f846:	e086      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f848:	2304      	movs	r3, #4
 800f84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f84e:	e082      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f850:	2308      	movs	r3, #8
 800f852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f856:	e07e      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f858:	2310      	movs	r3, #16
 800f85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f85e:	e07a      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f860:	2320      	movs	r3, #32
 800f862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f866:	e076      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f868:	2340      	movs	r3, #64	; 0x40
 800f86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f86e:	e072      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f870:	2380      	movs	r3, #128	; 0x80
 800f872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f876:	e06e      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	4a75      	ldr	r2, [pc, #468]	; (800fa54 <UART_SetConfig+0x6a4>)
 800f87e:	4293      	cmp	r3, r2
 800f880:	d130      	bne.n	800f8e4 <UART_SetConfig+0x534>
 800f882:	4b72      	ldr	r3, [pc, #456]	; (800fa4c <UART_SetConfig+0x69c>)
 800f884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f886:	f003 0307 	and.w	r3, r3, #7
 800f88a:	2b05      	cmp	r3, #5
 800f88c:	d826      	bhi.n	800f8dc <UART_SetConfig+0x52c>
 800f88e:	a201      	add	r2, pc, #4	; (adr r2, 800f894 <UART_SetConfig+0x4e4>)
 800f890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f894:	0800f8ad 	.word	0x0800f8ad
 800f898:	0800f8b5 	.word	0x0800f8b5
 800f89c:	0800f8bd 	.word	0x0800f8bd
 800f8a0:	0800f8c5 	.word	0x0800f8c5
 800f8a4:	0800f8cd 	.word	0x0800f8cd
 800f8a8:	0800f8d5 	.word	0x0800f8d5
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8b2:	e050      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f8b4:	2304      	movs	r3, #4
 800f8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ba:	e04c      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f8bc:	2308      	movs	r3, #8
 800f8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8c2:	e048      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f8c4:	2310      	movs	r3, #16
 800f8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ca:	e044      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f8cc:	2320      	movs	r3, #32
 800f8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8d2:	e040      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f8d4:	2340      	movs	r3, #64	; 0x40
 800f8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8da:	e03c      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f8dc:	2380      	movs	r3, #128	; 0x80
 800f8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8e2:	e038      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	4a5b      	ldr	r2, [pc, #364]	; (800fa58 <UART_SetConfig+0x6a8>)
 800f8ea:	4293      	cmp	r3, r2
 800f8ec:	d130      	bne.n	800f950 <UART_SetConfig+0x5a0>
 800f8ee:	4b57      	ldr	r3, [pc, #348]	; (800fa4c <UART_SetConfig+0x69c>)
 800f8f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8f2:	f003 0307 	and.w	r3, r3, #7
 800f8f6:	2b05      	cmp	r3, #5
 800f8f8:	d826      	bhi.n	800f948 <UART_SetConfig+0x598>
 800f8fa:	a201      	add	r2, pc, #4	; (adr r2, 800f900 <UART_SetConfig+0x550>)
 800f8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f900:	0800f919 	.word	0x0800f919
 800f904:	0800f921 	.word	0x0800f921
 800f908:	0800f929 	.word	0x0800f929
 800f90c:	0800f931 	.word	0x0800f931
 800f910:	0800f939 	.word	0x0800f939
 800f914:	0800f941 	.word	0x0800f941
 800f918:	2302      	movs	r3, #2
 800f91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f91e:	e01a      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f920:	2304      	movs	r3, #4
 800f922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f926:	e016      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f928:	2308      	movs	r3, #8
 800f92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f92e:	e012      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f930:	2310      	movs	r3, #16
 800f932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f936:	e00e      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f938:	2320      	movs	r3, #32
 800f93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f93e:	e00a      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f940:	2340      	movs	r3, #64	; 0x40
 800f942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f946:	e006      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f948:	2380      	movs	r3, #128	; 0x80
 800f94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f94e:	e002      	b.n	800f956 <UART_SetConfig+0x5a6>
 800f950:	2380      	movs	r3, #128	; 0x80
 800f952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f956:	697b      	ldr	r3, [r7, #20]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	4a3f      	ldr	r2, [pc, #252]	; (800fa58 <UART_SetConfig+0x6a8>)
 800f95c:	4293      	cmp	r3, r2
 800f95e:	f040 80f8 	bne.w	800fb52 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f962:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f966:	2b20      	cmp	r3, #32
 800f968:	dc46      	bgt.n	800f9f8 <UART_SetConfig+0x648>
 800f96a:	2b02      	cmp	r3, #2
 800f96c:	f2c0 8082 	blt.w	800fa74 <UART_SetConfig+0x6c4>
 800f970:	3b02      	subs	r3, #2
 800f972:	2b1e      	cmp	r3, #30
 800f974:	d87e      	bhi.n	800fa74 <UART_SetConfig+0x6c4>
 800f976:	a201      	add	r2, pc, #4	; (adr r2, 800f97c <UART_SetConfig+0x5cc>)
 800f978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f97c:	0800f9ff 	.word	0x0800f9ff
 800f980:	0800fa75 	.word	0x0800fa75
 800f984:	0800fa07 	.word	0x0800fa07
 800f988:	0800fa75 	.word	0x0800fa75
 800f98c:	0800fa75 	.word	0x0800fa75
 800f990:	0800fa75 	.word	0x0800fa75
 800f994:	0800fa17 	.word	0x0800fa17
 800f998:	0800fa75 	.word	0x0800fa75
 800f99c:	0800fa75 	.word	0x0800fa75
 800f9a0:	0800fa75 	.word	0x0800fa75
 800f9a4:	0800fa75 	.word	0x0800fa75
 800f9a8:	0800fa75 	.word	0x0800fa75
 800f9ac:	0800fa75 	.word	0x0800fa75
 800f9b0:	0800fa75 	.word	0x0800fa75
 800f9b4:	0800fa27 	.word	0x0800fa27
 800f9b8:	0800fa75 	.word	0x0800fa75
 800f9bc:	0800fa75 	.word	0x0800fa75
 800f9c0:	0800fa75 	.word	0x0800fa75
 800f9c4:	0800fa75 	.word	0x0800fa75
 800f9c8:	0800fa75 	.word	0x0800fa75
 800f9cc:	0800fa75 	.word	0x0800fa75
 800f9d0:	0800fa75 	.word	0x0800fa75
 800f9d4:	0800fa75 	.word	0x0800fa75
 800f9d8:	0800fa75 	.word	0x0800fa75
 800f9dc:	0800fa75 	.word	0x0800fa75
 800f9e0:	0800fa75 	.word	0x0800fa75
 800f9e4:	0800fa75 	.word	0x0800fa75
 800f9e8:	0800fa75 	.word	0x0800fa75
 800f9ec:	0800fa75 	.word	0x0800fa75
 800f9f0:	0800fa75 	.word	0x0800fa75
 800f9f4:	0800fa67 	.word	0x0800fa67
 800f9f8:	2b40      	cmp	r3, #64	; 0x40
 800f9fa:	d037      	beq.n	800fa6c <UART_SetConfig+0x6bc>
 800f9fc:	e03a      	b.n	800fa74 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f9fe:	f7fc f869 	bl	800bad4 <HAL_RCCEx_GetD3PCLK1Freq>
 800fa02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fa04:	e03c      	b.n	800fa80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7fc f878 	bl	800bb00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fa10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa14:	e034      	b.n	800fa80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa16:	f107 0318 	add.w	r3, r7, #24
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7fc f9c4 	bl	800bda8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fa20:	69fb      	ldr	r3, [r7, #28]
 800fa22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa24:	e02c      	b.n	800fa80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fa26:	4b09      	ldr	r3, [pc, #36]	; (800fa4c <UART_SetConfig+0x69c>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	f003 0320 	and.w	r3, r3, #32
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d016      	beq.n	800fa60 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fa32:	4b06      	ldr	r3, [pc, #24]	; (800fa4c <UART_SetConfig+0x69c>)
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	08db      	lsrs	r3, r3, #3
 800fa38:	f003 0303 	and.w	r3, r3, #3
 800fa3c:	4a07      	ldr	r2, [pc, #28]	; (800fa5c <UART_SetConfig+0x6ac>)
 800fa3e:	fa22 f303 	lsr.w	r3, r2, r3
 800fa42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fa44:	e01c      	b.n	800fa80 <UART_SetConfig+0x6d0>
 800fa46:	bf00      	nop
 800fa48:	40011400 	.word	0x40011400
 800fa4c:	58024400 	.word	0x58024400
 800fa50:	40007800 	.word	0x40007800
 800fa54:	40007c00 	.word	0x40007c00
 800fa58:	58000c00 	.word	0x58000c00
 800fa5c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800fa60:	4b9d      	ldr	r3, [pc, #628]	; (800fcd8 <UART_SetConfig+0x928>)
 800fa62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa64:	e00c      	b.n	800fa80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fa66:	4b9d      	ldr	r3, [pc, #628]	; (800fcdc <UART_SetConfig+0x92c>)
 800fa68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa6a:	e009      	b.n	800fa80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fa6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa72:	e005      	b.n	800fa80 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800fa74:	2300      	movs	r3, #0
 800fa76:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fa78:	2301      	movs	r3, #1
 800fa7a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fa7e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fa80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	f000 81de 	beq.w	800fe44 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fa88:	697b      	ldr	r3, [r7, #20]
 800fa8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa8c:	4a94      	ldr	r2, [pc, #592]	; (800fce0 <UART_SetConfig+0x930>)
 800fa8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa92:	461a      	mov	r2, r3
 800fa94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa96:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa9a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fa9c:	697b      	ldr	r3, [r7, #20]
 800fa9e:	685a      	ldr	r2, [r3, #4]
 800faa0:	4613      	mov	r3, r2
 800faa2:	005b      	lsls	r3, r3, #1
 800faa4:	4413      	add	r3, r2
 800faa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800faa8:	429a      	cmp	r2, r3
 800faaa:	d305      	bcc.n	800fab8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800faac:	697b      	ldr	r3, [r7, #20]
 800faae:	685b      	ldr	r3, [r3, #4]
 800fab0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fab4:	429a      	cmp	r2, r3
 800fab6:	d903      	bls.n	800fac0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800fab8:	2301      	movs	r3, #1
 800faba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fabe:	e1c1      	b.n	800fe44 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fac2:	2200      	movs	r2, #0
 800fac4:	60bb      	str	r3, [r7, #8]
 800fac6:	60fa      	str	r2, [r7, #12]
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800facc:	4a84      	ldr	r2, [pc, #528]	; (800fce0 <UART_SetConfig+0x930>)
 800face:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fad2:	b29b      	uxth	r3, r3
 800fad4:	2200      	movs	r2, #0
 800fad6:	603b      	str	r3, [r7, #0]
 800fad8:	607a      	str	r2, [r7, #4]
 800fada:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fade:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fae2:	f7f0 fbfd 	bl	80002e0 <__aeabi_uldivmod>
 800fae6:	4602      	mov	r2, r0
 800fae8:	460b      	mov	r3, r1
 800faea:	4610      	mov	r0, r2
 800faec:	4619      	mov	r1, r3
 800faee:	f04f 0200 	mov.w	r2, #0
 800faf2:	f04f 0300 	mov.w	r3, #0
 800faf6:	020b      	lsls	r3, r1, #8
 800faf8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fafc:	0202      	lsls	r2, r0, #8
 800fafe:	6979      	ldr	r1, [r7, #20]
 800fb00:	6849      	ldr	r1, [r1, #4]
 800fb02:	0849      	lsrs	r1, r1, #1
 800fb04:	2000      	movs	r0, #0
 800fb06:	460c      	mov	r4, r1
 800fb08:	4605      	mov	r5, r0
 800fb0a:	eb12 0804 	adds.w	r8, r2, r4
 800fb0e:	eb43 0905 	adc.w	r9, r3, r5
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	685b      	ldr	r3, [r3, #4]
 800fb16:	2200      	movs	r2, #0
 800fb18:	469a      	mov	sl, r3
 800fb1a:	4693      	mov	fp, r2
 800fb1c:	4652      	mov	r2, sl
 800fb1e:	465b      	mov	r3, fp
 800fb20:	4640      	mov	r0, r8
 800fb22:	4649      	mov	r1, r9
 800fb24:	f7f0 fbdc 	bl	80002e0 <__aeabi_uldivmod>
 800fb28:	4602      	mov	r2, r0
 800fb2a:	460b      	mov	r3, r1
 800fb2c:	4613      	mov	r3, r2
 800fb2e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fb36:	d308      	bcc.n	800fb4a <UART_SetConfig+0x79a>
 800fb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fb3e:	d204      	bcs.n	800fb4a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800fb40:	697b      	ldr	r3, [r7, #20]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb46:	60da      	str	r2, [r3, #12]
 800fb48:	e17c      	b.n	800fe44 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fb50:	e178      	b.n	800fe44 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	69db      	ldr	r3, [r3, #28]
 800fb56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fb5a:	f040 80c5 	bne.w	800fce8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800fb5e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fb62:	2b20      	cmp	r3, #32
 800fb64:	dc48      	bgt.n	800fbf8 <UART_SetConfig+0x848>
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	db7b      	blt.n	800fc62 <UART_SetConfig+0x8b2>
 800fb6a:	2b20      	cmp	r3, #32
 800fb6c:	d879      	bhi.n	800fc62 <UART_SetConfig+0x8b2>
 800fb6e:	a201      	add	r2, pc, #4	; (adr r2, 800fb74 <UART_SetConfig+0x7c4>)
 800fb70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb74:	0800fbff 	.word	0x0800fbff
 800fb78:	0800fc07 	.word	0x0800fc07
 800fb7c:	0800fc63 	.word	0x0800fc63
 800fb80:	0800fc63 	.word	0x0800fc63
 800fb84:	0800fc0f 	.word	0x0800fc0f
 800fb88:	0800fc63 	.word	0x0800fc63
 800fb8c:	0800fc63 	.word	0x0800fc63
 800fb90:	0800fc63 	.word	0x0800fc63
 800fb94:	0800fc1f 	.word	0x0800fc1f
 800fb98:	0800fc63 	.word	0x0800fc63
 800fb9c:	0800fc63 	.word	0x0800fc63
 800fba0:	0800fc63 	.word	0x0800fc63
 800fba4:	0800fc63 	.word	0x0800fc63
 800fba8:	0800fc63 	.word	0x0800fc63
 800fbac:	0800fc63 	.word	0x0800fc63
 800fbb0:	0800fc63 	.word	0x0800fc63
 800fbb4:	0800fc2f 	.word	0x0800fc2f
 800fbb8:	0800fc63 	.word	0x0800fc63
 800fbbc:	0800fc63 	.word	0x0800fc63
 800fbc0:	0800fc63 	.word	0x0800fc63
 800fbc4:	0800fc63 	.word	0x0800fc63
 800fbc8:	0800fc63 	.word	0x0800fc63
 800fbcc:	0800fc63 	.word	0x0800fc63
 800fbd0:	0800fc63 	.word	0x0800fc63
 800fbd4:	0800fc63 	.word	0x0800fc63
 800fbd8:	0800fc63 	.word	0x0800fc63
 800fbdc:	0800fc63 	.word	0x0800fc63
 800fbe0:	0800fc63 	.word	0x0800fc63
 800fbe4:	0800fc63 	.word	0x0800fc63
 800fbe8:	0800fc63 	.word	0x0800fc63
 800fbec:	0800fc63 	.word	0x0800fc63
 800fbf0:	0800fc63 	.word	0x0800fc63
 800fbf4:	0800fc55 	.word	0x0800fc55
 800fbf8:	2b40      	cmp	r3, #64	; 0x40
 800fbfa:	d02e      	beq.n	800fc5a <UART_SetConfig+0x8aa>
 800fbfc:	e031      	b.n	800fc62 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fbfe:	f7f9 ff71 	bl	8009ae4 <HAL_RCC_GetPCLK1Freq>
 800fc02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fc04:	e033      	b.n	800fc6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fc06:	f7f9 ff83 	bl	8009b10 <HAL_RCC_GetPCLK2Freq>
 800fc0a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fc0c:	e02f      	b.n	800fc6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7fb ff74 	bl	800bb00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc1c:	e027      	b.n	800fc6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc1e:	f107 0318 	add.w	r3, r7, #24
 800fc22:	4618      	mov	r0, r3
 800fc24:	f7fc f8c0 	bl	800bda8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fc28:	69fb      	ldr	r3, [r7, #28]
 800fc2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc2c:	e01f      	b.n	800fc6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fc2e:	4b2d      	ldr	r3, [pc, #180]	; (800fce4 <UART_SetConfig+0x934>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	f003 0320 	and.w	r3, r3, #32
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d009      	beq.n	800fc4e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fc3a:	4b2a      	ldr	r3, [pc, #168]	; (800fce4 <UART_SetConfig+0x934>)
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	08db      	lsrs	r3, r3, #3
 800fc40:	f003 0303 	and.w	r3, r3, #3
 800fc44:	4a24      	ldr	r2, [pc, #144]	; (800fcd8 <UART_SetConfig+0x928>)
 800fc46:	fa22 f303 	lsr.w	r3, r2, r3
 800fc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fc4c:	e00f      	b.n	800fc6e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fc4e:	4b22      	ldr	r3, [pc, #136]	; (800fcd8 <UART_SetConfig+0x928>)
 800fc50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc52:	e00c      	b.n	800fc6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fc54:	4b21      	ldr	r3, [pc, #132]	; (800fcdc <UART_SetConfig+0x92c>)
 800fc56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc58:	e009      	b.n	800fc6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fc5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fc5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc60:	e005      	b.n	800fc6e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fc62:	2300      	movs	r3, #0
 800fc64:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fc66:	2301      	movs	r3, #1
 800fc68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fc6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fc6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	f000 80e7 	beq.w	800fe44 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc7a:	4a19      	ldr	r2, [pc, #100]	; (800fce0 <UART_SetConfig+0x930>)
 800fc7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc80:	461a      	mov	r2, r3
 800fc82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc84:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc88:	005a      	lsls	r2, r3, #1
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	685b      	ldr	r3, [r3, #4]
 800fc8e:	085b      	lsrs	r3, r3, #1
 800fc90:	441a      	add	r2, r3
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	685b      	ldr	r3, [r3, #4]
 800fc96:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc9a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc9e:	2b0f      	cmp	r3, #15
 800fca0:	d916      	bls.n	800fcd0 <UART_SetConfig+0x920>
 800fca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fca8:	d212      	bcs.n	800fcd0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fcaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcac:	b29b      	uxth	r3, r3
 800fcae:	f023 030f 	bic.w	r3, r3, #15
 800fcb2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fcb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb6:	085b      	lsrs	r3, r3, #1
 800fcb8:	b29b      	uxth	r3, r3
 800fcba:	f003 0307 	and.w	r3, r3, #7
 800fcbe:	b29a      	uxth	r2, r3
 800fcc0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fcc2:	4313      	orrs	r3, r2
 800fcc4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800fcc6:	697b      	ldr	r3, [r7, #20]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fccc:	60da      	str	r2, [r3, #12]
 800fcce:	e0b9      	b.n	800fe44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fcd0:	2301      	movs	r3, #1
 800fcd2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fcd6:	e0b5      	b.n	800fe44 <UART_SetConfig+0xa94>
 800fcd8:	03d09000 	.word	0x03d09000
 800fcdc:	003d0900 	.word	0x003d0900
 800fce0:	08015544 	.word	0x08015544
 800fce4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800fce8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fcec:	2b20      	cmp	r3, #32
 800fcee:	dc49      	bgt.n	800fd84 <UART_SetConfig+0x9d4>
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	db7c      	blt.n	800fdee <UART_SetConfig+0xa3e>
 800fcf4:	2b20      	cmp	r3, #32
 800fcf6:	d87a      	bhi.n	800fdee <UART_SetConfig+0xa3e>
 800fcf8:	a201      	add	r2, pc, #4	; (adr r2, 800fd00 <UART_SetConfig+0x950>)
 800fcfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcfe:	bf00      	nop
 800fd00:	0800fd8b 	.word	0x0800fd8b
 800fd04:	0800fd93 	.word	0x0800fd93
 800fd08:	0800fdef 	.word	0x0800fdef
 800fd0c:	0800fdef 	.word	0x0800fdef
 800fd10:	0800fd9b 	.word	0x0800fd9b
 800fd14:	0800fdef 	.word	0x0800fdef
 800fd18:	0800fdef 	.word	0x0800fdef
 800fd1c:	0800fdef 	.word	0x0800fdef
 800fd20:	0800fdab 	.word	0x0800fdab
 800fd24:	0800fdef 	.word	0x0800fdef
 800fd28:	0800fdef 	.word	0x0800fdef
 800fd2c:	0800fdef 	.word	0x0800fdef
 800fd30:	0800fdef 	.word	0x0800fdef
 800fd34:	0800fdef 	.word	0x0800fdef
 800fd38:	0800fdef 	.word	0x0800fdef
 800fd3c:	0800fdef 	.word	0x0800fdef
 800fd40:	0800fdbb 	.word	0x0800fdbb
 800fd44:	0800fdef 	.word	0x0800fdef
 800fd48:	0800fdef 	.word	0x0800fdef
 800fd4c:	0800fdef 	.word	0x0800fdef
 800fd50:	0800fdef 	.word	0x0800fdef
 800fd54:	0800fdef 	.word	0x0800fdef
 800fd58:	0800fdef 	.word	0x0800fdef
 800fd5c:	0800fdef 	.word	0x0800fdef
 800fd60:	0800fdef 	.word	0x0800fdef
 800fd64:	0800fdef 	.word	0x0800fdef
 800fd68:	0800fdef 	.word	0x0800fdef
 800fd6c:	0800fdef 	.word	0x0800fdef
 800fd70:	0800fdef 	.word	0x0800fdef
 800fd74:	0800fdef 	.word	0x0800fdef
 800fd78:	0800fdef 	.word	0x0800fdef
 800fd7c:	0800fdef 	.word	0x0800fdef
 800fd80:	0800fde1 	.word	0x0800fde1
 800fd84:	2b40      	cmp	r3, #64	; 0x40
 800fd86:	d02e      	beq.n	800fde6 <UART_SetConfig+0xa36>
 800fd88:	e031      	b.n	800fdee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fd8a:	f7f9 feab 	bl	8009ae4 <HAL_RCC_GetPCLK1Freq>
 800fd8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fd90:	e033      	b.n	800fdfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fd92:	f7f9 febd 	bl	8009b10 <HAL_RCC_GetPCLK2Freq>
 800fd96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fd98:	e02f      	b.n	800fdfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f7fb feae 	bl	800bb00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fda8:	e027      	b.n	800fdfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fdaa:	f107 0318 	add.w	r3, r7, #24
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7fb fffa 	bl	800bda8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fdb4:	69fb      	ldr	r3, [r7, #28]
 800fdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdb8:	e01f      	b.n	800fdfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fdba:	4b2d      	ldr	r3, [pc, #180]	; (800fe70 <UART_SetConfig+0xac0>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	f003 0320 	and.w	r3, r3, #32
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d009      	beq.n	800fdda <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fdc6:	4b2a      	ldr	r3, [pc, #168]	; (800fe70 <UART_SetConfig+0xac0>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	08db      	lsrs	r3, r3, #3
 800fdcc:	f003 0303 	and.w	r3, r3, #3
 800fdd0:	4a28      	ldr	r2, [pc, #160]	; (800fe74 <UART_SetConfig+0xac4>)
 800fdd2:	fa22 f303 	lsr.w	r3, r2, r3
 800fdd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fdd8:	e00f      	b.n	800fdfa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800fdda:	4b26      	ldr	r3, [pc, #152]	; (800fe74 <UART_SetConfig+0xac4>)
 800fddc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdde:	e00c      	b.n	800fdfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fde0:	4b25      	ldr	r3, [pc, #148]	; (800fe78 <UART_SetConfig+0xac8>)
 800fde2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fde4:	e009      	b.n	800fdfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fde6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fdea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdec:	e005      	b.n	800fdfa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fdf8:	bf00      	nop
    }

    if (pclk != 0U)
 800fdfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d021      	beq.n	800fe44 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fe00:	697b      	ldr	r3, [r7, #20]
 800fe02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe04:	4a1d      	ldr	r2, [pc, #116]	; (800fe7c <UART_SetConfig+0xacc>)
 800fe06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe0a:	461a      	mov	r2, r3
 800fe0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe0e:	fbb3 f2f2 	udiv	r2, r3, r2
 800fe12:	697b      	ldr	r3, [r7, #20]
 800fe14:	685b      	ldr	r3, [r3, #4]
 800fe16:	085b      	lsrs	r3, r3, #1
 800fe18:	441a      	add	r2, r3
 800fe1a:	697b      	ldr	r3, [r7, #20]
 800fe1c:	685b      	ldr	r3, [r3, #4]
 800fe1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe22:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fe24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe26:	2b0f      	cmp	r3, #15
 800fe28:	d909      	bls.n	800fe3e <UART_SetConfig+0xa8e>
 800fe2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe30:	d205      	bcs.n	800fe3e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fe32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe34:	b29a      	uxth	r2, r3
 800fe36:	697b      	ldr	r3, [r7, #20]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	60da      	str	r2, [r3, #12]
 800fe3c:	e002      	b.n	800fe44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fe3e:	2301      	movs	r3, #1
 800fe40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fe44:	697b      	ldr	r3, [r7, #20]
 800fe46:	2201      	movs	r2, #1
 800fe48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	2201      	movs	r2, #1
 800fe50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fe54:	697b      	ldr	r3, [r7, #20]
 800fe56:	2200      	movs	r2, #0
 800fe58:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800fe5a:	697b      	ldr	r3, [r7, #20]
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800fe60:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800fe64:	4618      	mov	r0, r3
 800fe66:	3748      	adds	r7, #72	; 0x48
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fe6e:	bf00      	nop
 800fe70:	58024400 	.word	0x58024400
 800fe74:	03d09000 	.word	0x03d09000
 800fe78:	003d0900 	.word	0x003d0900
 800fe7c:	08015544 	.word	0x08015544

0800fe80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fe80:	b480      	push	{r7}
 800fe82:	b083      	sub	sp, #12
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe8c:	f003 0308 	and.w	r3, r3, #8
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d00a      	beq.n	800feaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	685b      	ldr	r3, [r3, #4]
 800fe9a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	430a      	orrs	r2, r1
 800fea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800feae:	f003 0301 	and.w	r3, r3, #1
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d00a      	beq.n	800fecc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	685b      	ldr	r3, [r3, #4]
 800febc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	430a      	orrs	r2, r1
 800feca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fed0:	f003 0302 	and.w	r3, r3, #2
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d00a      	beq.n	800feee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	685b      	ldr	r3, [r3, #4]
 800fede:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	430a      	orrs	r2, r1
 800feec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fef2:	f003 0304 	and.w	r3, r3, #4
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d00a      	beq.n	800ff10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	685b      	ldr	r3, [r3, #4]
 800ff00:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	430a      	orrs	r2, r1
 800ff0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff14:	f003 0310 	and.w	r3, r3, #16
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d00a      	beq.n	800ff32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	689b      	ldr	r3, [r3, #8]
 800ff22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	430a      	orrs	r2, r1
 800ff30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff36:	f003 0320 	and.w	r3, r3, #32
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d00a      	beq.n	800ff54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	689b      	ldr	r3, [r3, #8]
 800ff44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	430a      	orrs	r2, r1
 800ff52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d01a      	beq.n	800ff96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	685b      	ldr	r3, [r3, #4]
 800ff66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	430a      	orrs	r2, r1
 800ff74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ff7e:	d10a      	bne.n	800ff96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	685b      	ldr	r3, [r3, #4]
 800ff86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	430a      	orrs	r2, r1
 800ff94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d00a      	beq.n	800ffb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	685b      	ldr	r3, [r3, #4]
 800ffa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	430a      	orrs	r2, r1
 800ffb6:	605a      	str	r2, [r3, #4]
  }
}
 800ffb8:	bf00      	nop
 800ffba:	370c      	adds	r7, #12
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc2:	4770      	bx	lr

0800ffc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b098      	sub	sp, #96	; 0x60
 800ffc8:	af02      	add	r7, sp, #8
 800ffca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2200      	movs	r2, #0
 800ffd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ffd4:	f7f3 faf4 	bl	80035c0 <HAL_GetTick>
 800ffd8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	f003 0308 	and.w	r3, r3, #8
 800ffe4:	2b08      	cmp	r3, #8
 800ffe6:	d12f      	bne.n	8010048 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ffe8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ffec:	9300      	str	r3, [sp, #0]
 800ffee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fff0:	2200      	movs	r2, #0
 800fff2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	f000 f88e 	bl	8010118 <UART_WaitOnFlagUntilTimeout>
 800fffc:	4603      	mov	r3, r0
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d022      	beq.n	8010048 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801000a:	e853 3f00 	ldrex	r3, [r3]
 801000e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010016:	653b      	str	r3, [r7, #80]	; 0x50
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	461a      	mov	r2, r3
 801001e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010020:	647b      	str	r3, [r7, #68]	; 0x44
 8010022:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010024:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010026:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010028:	e841 2300 	strex	r3, r2, [r1]
 801002c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801002e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010030:	2b00      	cmp	r3, #0
 8010032:	d1e6      	bne.n	8010002 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	2220      	movs	r2, #32
 8010038:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	2200      	movs	r2, #0
 8010040:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010044:	2303      	movs	r3, #3
 8010046:	e063      	b.n	8010110 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	f003 0304 	and.w	r3, r3, #4
 8010052:	2b04      	cmp	r3, #4
 8010054:	d149      	bne.n	80100ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010056:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801005a:	9300      	str	r3, [sp, #0]
 801005c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801005e:	2200      	movs	r2, #0
 8010060:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f000 f857 	bl	8010118 <UART_WaitOnFlagUntilTimeout>
 801006a:	4603      	mov	r3, r0
 801006c:	2b00      	cmp	r3, #0
 801006e:	d03c      	beq.n	80100ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010078:	e853 3f00 	ldrex	r3, [r3]
 801007c:	623b      	str	r3, [r7, #32]
   return(result);
 801007e:	6a3b      	ldr	r3, [r7, #32]
 8010080:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010084:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	461a      	mov	r2, r3
 801008c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801008e:	633b      	str	r3, [r7, #48]	; 0x30
 8010090:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010092:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010096:	e841 2300 	strex	r3, r2, [r1]
 801009a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801009c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d1e6      	bne.n	8010070 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	3308      	adds	r3, #8
 80100a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100aa:	693b      	ldr	r3, [r7, #16]
 80100ac:	e853 3f00 	ldrex	r3, [r3]
 80100b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	f023 0301 	bic.w	r3, r3, #1
 80100b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	3308      	adds	r3, #8
 80100c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80100c2:	61fa      	str	r2, [r7, #28]
 80100c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100c6:	69b9      	ldr	r1, [r7, #24]
 80100c8:	69fa      	ldr	r2, [r7, #28]
 80100ca:	e841 2300 	strex	r3, r2, [r1]
 80100ce:	617b      	str	r3, [r7, #20]
   return(result);
 80100d0:	697b      	ldr	r3, [r7, #20]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d1e5      	bne.n	80100a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	2220      	movs	r2, #32
 80100da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	2200      	movs	r2, #0
 80100e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80100e6:	2303      	movs	r3, #3
 80100e8:	e012      	b.n	8010110 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	2220      	movs	r2, #32
 80100ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	2220      	movs	r2, #32
 80100f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	2200      	movs	r2, #0
 80100fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2200      	movs	r2, #0
 8010104:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	2200      	movs	r2, #0
 801010a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801010e:	2300      	movs	r3, #0
}
 8010110:	4618      	mov	r0, r3
 8010112:	3758      	adds	r7, #88	; 0x58
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}

08010118 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b084      	sub	sp, #16
 801011c:	af00      	add	r7, sp, #0
 801011e:	60f8      	str	r0, [r7, #12]
 8010120:	60b9      	str	r1, [r7, #8]
 8010122:	603b      	str	r3, [r7, #0]
 8010124:	4613      	mov	r3, r2
 8010126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010128:	e04f      	b.n	80101ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801012a:	69bb      	ldr	r3, [r7, #24]
 801012c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010130:	d04b      	beq.n	80101ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010132:	f7f3 fa45 	bl	80035c0 <HAL_GetTick>
 8010136:	4602      	mov	r2, r0
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	1ad3      	subs	r3, r2, r3
 801013c:	69ba      	ldr	r2, [r7, #24]
 801013e:	429a      	cmp	r2, r3
 8010140:	d302      	bcc.n	8010148 <UART_WaitOnFlagUntilTimeout+0x30>
 8010142:	69bb      	ldr	r3, [r7, #24]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d101      	bne.n	801014c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010148:	2303      	movs	r3, #3
 801014a:	e04e      	b.n	80101ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	f003 0304 	and.w	r3, r3, #4
 8010156:	2b00      	cmp	r3, #0
 8010158:	d037      	beq.n	80101ca <UART_WaitOnFlagUntilTimeout+0xb2>
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	2b80      	cmp	r3, #128	; 0x80
 801015e:	d034      	beq.n	80101ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	2b40      	cmp	r3, #64	; 0x40
 8010164:	d031      	beq.n	80101ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	69db      	ldr	r3, [r3, #28]
 801016c:	f003 0308 	and.w	r3, r3, #8
 8010170:	2b08      	cmp	r3, #8
 8010172:	d110      	bne.n	8010196 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	2208      	movs	r2, #8
 801017a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801017c:	68f8      	ldr	r0, [r7, #12]
 801017e:	f000 f95b 	bl	8010438 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	2208      	movs	r2, #8
 8010186:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	2200      	movs	r2, #0
 801018e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8010192:	2301      	movs	r3, #1
 8010194:	e029      	b.n	80101ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	69db      	ldr	r3, [r3, #28]
 801019c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80101a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80101a4:	d111      	bne.n	80101ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80101ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80101b0:	68f8      	ldr	r0, [r7, #12]
 80101b2:	f000 f941 	bl	8010438 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	2220      	movs	r2, #32
 80101ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	2200      	movs	r2, #0
 80101c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80101c6:	2303      	movs	r3, #3
 80101c8:	e00f      	b.n	80101ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	69da      	ldr	r2, [r3, #28]
 80101d0:	68bb      	ldr	r3, [r7, #8]
 80101d2:	4013      	ands	r3, r2
 80101d4:	68ba      	ldr	r2, [r7, #8]
 80101d6:	429a      	cmp	r2, r3
 80101d8:	bf0c      	ite	eq
 80101da:	2301      	moveq	r3, #1
 80101dc:	2300      	movne	r3, #0
 80101de:	b2db      	uxtb	r3, r3
 80101e0:	461a      	mov	r2, r3
 80101e2:	79fb      	ldrb	r3, [r7, #7]
 80101e4:	429a      	cmp	r2, r3
 80101e6:	d0a0      	beq.n	801012a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80101e8:	2300      	movs	r3, #0
}
 80101ea:	4618      	mov	r0, r3
 80101ec:	3710      	adds	r7, #16
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}
	...

080101f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80101f4:	b480      	push	{r7}
 80101f6:	b0a3      	sub	sp, #140	; 0x8c
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	60f8      	str	r0, [r7, #12]
 80101fc:	60b9      	str	r1, [r7, #8]
 80101fe:	4613      	mov	r3, r2
 8010200:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	68ba      	ldr	r2, [r7, #8]
 8010206:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	88fa      	ldrh	r2, [r7, #6]
 801020c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	88fa      	ldrh	r2, [r7, #6]
 8010214:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	2200      	movs	r2, #0
 801021c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	689b      	ldr	r3, [r3, #8]
 8010222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010226:	d10e      	bne.n	8010246 <UART_Start_Receive_IT+0x52>
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	691b      	ldr	r3, [r3, #16]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d105      	bne.n	801023c <UART_Start_Receive_IT+0x48>
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010236:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801023a:	e02d      	b.n	8010298 <UART_Start_Receive_IT+0xa4>
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	22ff      	movs	r2, #255	; 0xff
 8010240:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010244:	e028      	b.n	8010298 <UART_Start_Receive_IT+0xa4>
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	689b      	ldr	r3, [r3, #8]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d10d      	bne.n	801026a <UART_Start_Receive_IT+0x76>
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	691b      	ldr	r3, [r3, #16]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d104      	bne.n	8010260 <UART_Start_Receive_IT+0x6c>
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	22ff      	movs	r2, #255	; 0xff
 801025a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801025e:	e01b      	b.n	8010298 <UART_Start_Receive_IT+0xa4>
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	227f      	movs	r2, #127	; 0x7f
 8010264:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010268:	e016      	b.n	8010298 <UART_Start_Receive_IT+0xa4>
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	689b      	ldr	r3, [r3, #8]
 801026e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010272:	d10d      	bne.n	8010290 <UART_Start_Receive_IT+0x9c>
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	691b      	ldr	r3, [r3, #16]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d104      	bne.n	8010286 <UART_Start_Receive_IT+0x92>
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	227f      	movs	r2, #127	; 0x7f
 8010280:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010284:	e008      	b.n	8010298 <UART_Start_Receive_IT+0xa4>
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	223f      	movs	r2, #63	; 0x3f
 801028a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801028e:	e003      	b.n	8010298 <UART_Start_Receive_IT+0xa4>
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	2200      	movs	r2, #0
 8010294:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	2200      	movs	r2, #0
 801029c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	2222      	movs	r2, #34	; 0x22
 80102a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	3308      	adds	r3, #8
 80102ae:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80102b2:	e853 3f00 	ldrex	r3, [r3]
 80102b6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80102b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80102ba:	f043 0301 	orr.w	r3, r3, #1
 80102be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	3308      	adds	r3, #8
 80102c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80102cc:	673a      	str	r2, [r7, #112]	; 0x70
 80102ce:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102d0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80102d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80102d4:	e841 2300 	strex	r3, r2, [r1]
 80102d8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80102da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d1e3      	bne.n	80102a8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80102e8:	d14f      	bne.n	801038a <UART_Start_Receive_IT+0x196>
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80102f0:	88fa      	ldrh	r2, [r7, #6]
 80102f2:	429a      	cmp	r2, r3
 80102f4:	d349      	bcc.n	801038a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	689b      	ldr	r3, [r3, #8]
 80102fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80102fe:	d107      	bne.n	8010310 <UART_Start_Receive_IT+0x11c>
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	691b      	ldr	r3, [r3, #16]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d103      	bne.n	8010310 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	4a47      	ldr	r2, [pc, #284]	; (8010428 <UART_Start_Receive_IT+0x234>)
 801030c:	675a      	str	r2, [r3, #116]	; 0x74
 801030e:	e002      	b.n	8010316 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	4a46      	ldr	r2, [pc, #280]	; (801042c <UART_Start_Receive_IT+0x238>)
 8010314:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	691b      	ldr	r3, [r3, #16]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d01a      	beq.n	8010354 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010326:	e853 3f00 	ldrex	r3, [r3]
 801032a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801032c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801032e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010332:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	461a      	mov	r2, r3
 801033c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010340:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010342:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010344:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010346:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010348:	e841 2300 	strex	r3, r2, [r1]
 801034c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801034e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010350:	2b00      	cmp	r3, #0
 8010352:	d1e4      	bne.n	801031e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	3308      	adds	r3, #8
 801035a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801035c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801035e:	e853 3f00 	ldrex	r3, [r3]
 8010362:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801036a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	3308      	adds	r3, #8
 8010372:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010374:	64ba      	str	r2, [r7, #72]	; 0x48
 8010376:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010378:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801037a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801037c:	e841 2300 	strex	r3, r2, [r1]
 8010380:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010384:	2b00      	cmp	r3, #0
 8010386:	d1e5      	bne.n	8010354 <UART_Start_Receive_IT+0x160>
 8010388:	e046      	b.n	8010418 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	689b      	ldr	r3, [r3, #8]
 801038e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010392:	d107      	bne.n	80103a4 <UART_Start_Receive_IT+0x1b0>
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	691b      	ldr	r3, [r3, #16]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d103      	bne.n	80103a4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	4a24      	ldr	r2, [pc, #144]	; (8010430 <UART_Start_Receive_IT+0x23c>)
 80103a0:	675a      	str	r2, [r3, #116]	; 0x74
 80103a2:	e002      	b.n	80103aa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	4a23      	ldr	r2, [pc, #140]	; (8010434 <UART_Start_Receive_IT+0x240>)
 80103a8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	691b      	ldr	r3, [r3, #16]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d019      	beq.n	80103e6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ba:	e853 3f00 	ldrex	r3, [r3]
 80103be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80103c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103c2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80103c6:	677b      	str	r3, [r7, #116]	; 0x74
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	461a      	mov	r2, r3
 80103ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103d0:	637b      	str	r3, [r7, #52]	; 0x34
 80103d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80103d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103d8:	e841 2300 	strex	r3, r2, [r1]
 80103dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80103de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d1e6      	bne.n	80103b2 <UART_Start_Receive_IT+0x1be>
 80103e4:	e018      	b.n	8010418 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103ec:	697b      	ldr	r3, [r7, #20]
 80103ee:	e853 3f00 	ldrex	r3, [r3]
 80103f2:	613b      	str	r3, [r7, #16]
   return(result);
 80103f4:	693b      	ldr	r3, [r7, #16]
 80103f6:	f043 0320 	orr.w	r3, r3, #32
 80103fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	461a      	mov	r2, r3
 8010402:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010404:	623b      	str	r3, [r7, #32]
 8010406:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010408:	69f9      	ldr	r1, [r7, #28]
 801040a:	6a3a      	ldr	r2, [r7, #32]
 801040c:	e841 2300 	strex	r3, r2, [r1]
 8010410:	61bb      	str	r3, [r7, #24]
   return(result);
 8010412:	69bb      	ldr	r3, [r7, #24]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d1e6      	bne.n	80103e6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8010418:	2300      	movs	r3, #0
}
 801041a:	4618      	mov	r0, r3
 801041c:	378c      	adds	r7, #140	; 0x8c
 801041e:	46bd      	mov	sp, r7
 8010420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010424:	4770      	bx	lr
 8010426:	bf00      	nop
 8010428:	08010c59 	.word	0x08010c59
 801042c:	080108f9 	.word	0x080108f9
 8010430:	08010741 	.word	0x08010741
 8010434:	08010589 	.word	0x08010589

08010438 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010438:	b480      	push	{r7}
 801043a:	b095      	sub	sp, #84	; 0x54
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010448:	e853 3f00 	ldrex	r3, [r3]
 801044c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801044e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010450:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010454:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	461a      	mov	r2, r3
 801045c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801045e:	643b      	str	r3, [r7, #64]	; 0x40
 8010460:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010462:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010464:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010466:	e841 2300 	strex	r3, r2, [r1]
 801046a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801046c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801046e:	2b00      	cmp	r3, #0
 8010470:	d1e6      	bne.n	8010440 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	3308      	adds	r3, #8
 8010478:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801047a:	6a3b      	ldr	r3, [r7, #32]
 801047c:	e853 3f00 	ldrex	r3, [r3]
 8010480:	61fb      	str	r3, [r7, #28]
   return(result);
 8010482:	69fa      	ldr	r2, [r7, #28]
 8010484:	4b1e      	ldr	r3, [pc, #120]	; (8010500 <UART_EndRxTransfer+0xc8>)
 8010486:	4013      	ands	r3, r2
 8010488:	64bb      	str	r3, [r7, #72]	; 0x48
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	3308      	adds	r3, #8
 8010490:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010492:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010494:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010496:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801049a:	e841 2300 	strex	r3, r2, [r1]
 801049e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80104a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d1e5      	bne.n	8010472 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104aa:	2b01      	cmp	r3, #1
 80104ac:	d118      	bne.n	80104e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	e853 3f00 	ldrex	r3, [r3]
 80104ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	f023 0310 	bic.w	r3, r3, #16
 80104c2:	647b      	str	r3, [r7, #68]	; 0x44
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	461a      	mov	r2, r3
 80104ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104cc:	61bb      	str	r3, [r7, #24]
 80104ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104d0:	6979      	ldr	r1, [r7, #20]
 80104d2:	69ba      	ldr	r2, [r7, #24]
 80104d4:	e841 2300 	strex	r3, r2, [r1]
 80104d8:	613b      	str	r3, [r7, #16]
   return(result);
 80104da:	693b      	ldr	r3, [r7, #16]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d1e6      	bne.n	80104ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2220      	movs	r2, #32
 80104e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2200      	movs	r2, #0
 80104ec:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2200      	movs	r2, #0
 80104f2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80104f4:	bf00      	nop
 80104f6:	3754      	adds	r7, #84	; 0x54
 80104f8:	46bd      	mov	sp, r7
 80104fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fe:	4770      	bx	lr
 8010500:	effffffe 	.word	0xeffffffe

08010504 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b084      	sub	sp, #16
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010510:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	2200      	movs	r2, #0
 8010516:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	2200      	movs	r2, #0
 801051e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010522:	68f8      	ldr	r0, [r7, #12]
 8010524:	f7fe ff2e 	bl	800f384 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010528:	bf00      	nop
 801052a:	3710      	adds	r7, #16
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}

08010530 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b088      	sub	sp, #32
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	e853 3f00 	ldrex	r3, [r3]
 8010544:	60bb      	str	r3, [r7, #8]
   return(result);
 8010546:	68bb      	ldr	r3, [r7, #8]
 8010548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801054c:	61fb      	str	r3, [r7, #28]
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	461a      	mov	r2, r3
 8010554:	69fb      	ldr	r3, [r7, #28]
 8010556:	61bb      	str	r3, [r7, #24]
 8010558:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801055a:	6979      	ldr	r1, [r7, #20]
 801055c:	69ba      	ldr	r2, [r7, #24]
 801055e:	e841 2300 	strex	r3, r2, [r1]
 8010562:	613b      	str	r3, [r7, #16]
   return(result);
 8010564:	693b      	ldr	r3, [r7, #16]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d1e6      	bne.n	8010538 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	2220      	movs	r2, #32
 801056e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2200      	movs	r2, #0
 8010576:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010578:	6878      	ldr	r0, [r7, #4]
 801057a:	f7fe fef9 	bl	800f370 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801057e:	bf00      	nop
 8010580:	3720      	adds	r7, #32
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}
	...

08010588 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b09c      	sub	sp, #112	; 0x70
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010596:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80105a0:	2b22      	cmp	r3, #34	; 0x22
 80105a2:	f040 80be 	bne.w	8010722 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80105b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80105b4:	b2d9      	uxtb	r1, r3
 80105b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80105ba:	b2da      	uxtb	r2, r3
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105c0:	400a      	ands	r2, r1
 80105c2:	b2d2      	uxtb	r2, r2
 80105c4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105ca:	1c5a      	adds	r2, r3, #1
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80105d6:	b29b      	uxth	r3, r3
 80105d8:	3b01      	subs	r3, #1
 80105da:	b29a      	uxth	r2, r3
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80105e8:	b29b      	uxth	r3, r3
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	f040 80a1 	bne.w	8010732 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105f8:	e853 3f00 	ldrex	r3, [r3]
 80105fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80105fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010600:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010604:	66bb      	str	r3, [r7, #104]	; 0x68
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	461a      	mov	r2, r3
 801060c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801060e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010610:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010612:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010614:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010616:	e841 2300 	strex	r3, r2, [r1]
 801061a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801061c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801061e:	2b00      	cmp	r3, #0
 8010620:	d1e6      	bne.n	80105f0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	3308      	adds	r3, #8
 8010628:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801062a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801062c:	e853 3f00 	ldrex	r3, [r3]
 8010630:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010634:	f023 0301 	bic.w	r3, r3, #1
 8010638:	667b      	str	r3, [r7, #100]	; 0x64
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	3308      	adds	r3, #8
 8010640:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010642:	647a      	str	r2, [r7, #68]	; 0x44
 8010644:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010646:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010648:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801064a:	e841 2300 	strex	r3, r2, [r1]
 801064e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010652:	2b00      	cmp	r3, #0
 8010654:	d1e5      	bne.n	8010622 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	2220      	movs	r2, #32
 801065a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2200      	movs	r2, #0
 8010662:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2200      	movs	r2, #0
 8010668:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	4a33      	ldr	r2, [pc, #204]	; (801073c <UART_RxISR_8BIT+0x1b4>)
 8010670:	4293      	cmp	r3, r2
 8010672:	d01f      	beq.n	80106b4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	685b      	ldr	r3, [r3, #4]
 801067a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801067e:	2b00      	cmp	r3, #0
 8010680:	d018      	beq.n	80106b4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801068a:	e853 3f00 	ldrex	r3, [r3]
 801068e:	623b      	str	r3, [r7, #32]
   return(result);
 8010690:	6a3b      	ldr	r3, [r7, #32]
 8010692:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010696:	663b      	str	r3, [r7, #96]	; 0x60
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	461a      	mov	r2, r3
 801069e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80106a0:	633b      	str	r3, [r7, #48]	; 0x30
 80106a2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80106a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106a8:	e841 2300 	strex	r3, r2, [r1]
 80106ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80106ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d1e6      	bne.n	8010682 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106b8:	2b01      	cmp	r3, #1
 80106ba:	d12e      	bne.n	801071a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2200      	movs	r2, #0
 80106c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106c8:	693b      	ldr	r3, [r7, #16]
 80106ca:	e853 3f00 	ldrex	r3, [r3]
 80106ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	f023 0310 	bic.w	r3, r3, #16
 80106d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	461a      	mov	r2, r3
 80106de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106e0:	61fb      	str	r3, [r7, #28]
 80106e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106e4:	69b9      	ldr	r1, [r7, #24]
 80106e6:	69fa      	ldr	r2, [r7, #28]
 80106e8:	e841 2300 	strex	r3, r2, [r1]
 80106ec:	617b      	str	r3, [r7, #20]
   return(result);
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d1e6      	bne.n	80106c2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	69db      	ldr	r3, [r3, #28]
 80106fa:	f003 0310 	and.w	r3, r3, #16
 80106fe:	2b10      	cmp	r3, #16
 8010700:	d103      	bne.n	801070a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	2210      	movs	r2, #16
 8010708:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010710:	4619      	mov	r1, r3
 8010712:	6878      	ldr	r0, [r7, #4]
 8010714:	f7fe fe40 	bl	800f398 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010718:	e00b      	b.n	8010732 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801071a:	6878      	ldr	r0, [r7, #4]
 801071c:	f7ef ff98 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 8010720:	e007      	b.n	8010732 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	699a      	ldr	r2, [r3, #24]
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	f042 0208 	orr.w	r2, r2, #8
 8010730:	619a      	str	r2, [r3, #24]
}
 8010732:	bf00      	nop
 8010734:	3770      	adds	r7, #112	; 0x70
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}
 801073a:	bf00      	nop
 801073c:	58000c00 	.word	0x58000c00

08010740 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b09c      	sub	sp, #112	; 0x70
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801074e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010758:	2b22      	cmp	r3, #34	; 0x22
 801075a:	f040 80be 	bne.w	80108da <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010764:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801076c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801076e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8010772:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010776:	4013      	ands	r3, r2
 8010778:	b29a      	uxth	r2, r3
 801077a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801077c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010782:	1c9a      	adds	r2, r3, #2
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801078e:	b29b      	uxth	r3, r3
 8010790:	3b01      	subs	r3, #1
 8010792:	b29a      	uxth	r2, r3
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80107a0:	b29b      	uxth	r3, r3
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	f040 80a1 	bne.w	80108ea <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107b0:	e853 3f00 	ldrex	r3, [r3]
 80107b4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80107b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80107bc:	667b      	str	r3, [r7, #100]	; 0x64
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	461a      	mov	r2, r3
 80107c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80107c6:	657b      	str	r3, [r7, #84]	; 0x54
 80107c8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80107cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80107ce:	e841 2300 	strex	r3, r2, [r1]
 80107d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80107d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d1e6      	bne.n	80107a8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	3308      	adds	r3, #8
 80107e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107e4:	e853 3f00 	ldrex	r3, [r3]
 80107e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80107ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ec:	f023 0301 	bic.w	r3, r3, #1
 80107f0:	663b      	str	r3, [r7, #96]	; 0x60
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	3308      	adds	r3, #8
 80107f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80107fa:	643a      	str	r2, [r7, #64]	; 0x40
 80107fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010800:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010802:	e841 2300 	strex	r3, r2, [r1]
 8010806:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801080a:	2b00      	cmp	r3, #0
 801080c:	d1e5      	bne.n	80107da <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	2220      	movs	r2, #32
 8010812:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	2200      	movs	r2, #0
 801081a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2200      	movs	r2, #0
 8010820:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	4a33      	ldr	r2, [pc, #204]	; (80108f4 <UART_RxISR_16BIT+0x1b4>)
 8010828:	4293      	cmp	r3, r2
 801082a:	d01f      	beq.n	801086c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	685b      	ldr	r3, [r3, #4]
 8010832:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010836:	2b00      	cmp	r3, #0
 8010838:	d018      	beq.n	801086c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010840:	6a3b      	ldr	r3, [r7, #32]
 8010842:	e853 3f00 	ldrex	r3, [r3]
 8010846:	61fb      	str	r3, [r7, #28]
   return(result);
 8010848:	69fb      	ldr	r3, [r7, #28]
 801084a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801084e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	461a      	mov	r2, r3
 8010856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010858:	62fb      	str	r3, [r7, #44]	; 0x2c
 801085a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801085c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801085e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010860:	e841 2300 	strex	r3, r2, [r1]
 8010864:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010868:	2b00      	cmp	r3, #0
 801086a:	d1e6      	bne.n	801083a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010870:	2b01      	cmp	r3, #1
 8010872:	d12e      	bne.n	80108d2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2200      	movs	r2, #0
 8010878:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	e853 3f00 	ldrex	r3, [r3]
 8010886:	60bb      	str	r3, [r7, #8]
   return(result);
 8010888:	68bb      	ldr	r3, [r7, #8]
 801088a:	f023 0310 	bic.w	r3, r3, #16
 801088e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	461a      	mov	r2, r3
 8010896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010898:	61bb      	str	r3, [r7, #24]
 801089a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801089c:	6979      	ldr	r1, [r7, #20]
 801089e:	69ba      	ldr	r2, [r7, #24]
 80108a0:	e841 2300 	strex	r3, r2, [r1]
 80108a4:	613b      	str	r3, [r7, #16]
   return(result);
 80108a6:	693b      	ldr	r3, [r7, #16]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d1e6      	bne.n	801087a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	69db      	ldr	r3, [r3, #28]
 80108b2:	f003 0310 	and.w	r3, r3, #16
 80108b6:	2b10      	cmp	r3, #16
 80108b8:	d103      	bne.n	80108c2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	2210      	movs	r2, #16
 80108c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80108c8:	4619      	mov	r1, r3
 80108ca:	6878      	ldr	r0, [r7, #4]
 80108cc:	f7fe fd64 	bl	800f398 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80108d0:	e00b      	b.n	80108ea <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f7ef febc 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 80108d8:	e007      	b.n	80108ea <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	699a      	ldr	r2, [r3, #24]
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	f042 0208 	orr.w	r2, r2, #8
 80108e8:	619a      	str	r2, [r3, #24]
}
 80108ea:	bf00      	nop
 80108ec:	3770      	adds	r7, #112	; 0x70
 80108ee:	46bd      	mov	sp, r7
 80108f0:	bd80      	pop	{r7, pc}
 80108f2:	bf00      	nop
 80108f4:	58000c00 	.word	0x58000c00

080108f8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b0ac      	sub	sp, #176	; 0xb0
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010906:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	69db      	ldr	r3, [r3, #28]
 8010910:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	689b      	ldr	r3, [r3, #8]
 8010924:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801092e:	2b22      	cmp	r3, #34	; 0x22
 8010930:	f040 8180 	bne.w	8010c34 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801093a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801093e:	e123      	b.n	8010b88 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010946:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801094a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801094e:	b2d9      	uxtb	r1, r3
 8010950:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8010954:	b2da      	uxtb	r2, r3
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801095a:	400a      	ands	r2, r1
 801095c:	b2d2      	uxtb	r2, r2
 801095e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010964:	1c5a      	adds	r2, r3, #1
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010970:	b29b      	uxth	r3, r3
 8010972:	3b01      	subs	r3, #1
 8010974:	b29a      	uxth	r2, r3
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	69db      	ldr	r3, [r3, #28]
 8010982:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801098a:	f003 0307 	and.w	r3, r3, #7
 801098e:	2b00      	cmp	r3, #0
 8010990:	d053      	beq.n	8010a3a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010992:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010996:	f003 0301 	and.w	r3, r3, #1
 801099a:	2b00      	cmp	r3, #0
 801099c:	d011      	beq.n	80109c2 <UART_RxISR_8BIT_FIFOEN+0xca>
 801099e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80109a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d00b      	beq.n	80109c2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	2201      	movs	r2, #1
 80109b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109b8:	f043 0201 	orr.w	r2, r3, #1
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80109c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80109c6:	f003 0302 	and.w	r3, r3, #2
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d011      	beq.n	80109f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80109ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80109d2:	f003 0301 	and.w	r3, r3, #1
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d00b      	beq.n	80109f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	2202      	movs	r2, #2
 80109e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109e8:	f043 0204 	orr.w	r2, r3, #4
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80109f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80109f6:	f003 0304 	and.w	r3, r3, #4
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d011      	beq.n	8010a22 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80109fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010a02:	f003 0301 	and.w	r3, r3, #1
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d00b      	beq.n	8010a22 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	2204      	movs	r2, #4
 8010a10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a18:	f043 0202 	orr.w	r2, r3, #2
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d006      	beq.n	8010a3a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010a2c:	6878      	ldr	r0, [r7, #4]
 8010a2e:	f7fe fca9 	bl	800f384 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	2200      	movs	r2, #0
 8010a36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010a40:	b29b      	uxth	r3, r3
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	f040 80a0 	bne.w	8010b88 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010a50:	e853 3f00 	ldrex	r3, [r3]
 8010a54:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8010a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010a5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	461a      	mov	r2, r3
 8010a66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010a6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010a6c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a6e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010a70:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010a72:	e841 2300 	strex	r3, r2, [r1]
 8010a76:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8010a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d1e4      	bne.n	8010a48 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	3308      	adds	r3, #8
 8010a84:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a88:	e853 3f00 	ldrex	r3, [r3]
 8010a8c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8010a8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010a90:	4b6e      	ldr	r3, [pc, #440]	; (8010c4c <UART_RxISR_8BIT_FIFOEN+0x354>)
 8010a92:	4013      	ands	r3, r2
 8010a94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	3308      	adds	r3, #8
 8010a9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010aa2:	66ba      	str	r2, [r7, #104]	; 0x68
 8010aa4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aa6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010aa8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010aaa:	e841 2300 	strex	r3, r2, [r1]
 8010aae:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010ab0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d1e3      	bne.n	8010a7e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	2220      	movs	r2, #32
 8010aba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	4a60      	ldr	r2, [pc, #384]	; (8010c50 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8010ad0:	4293      	cmp	r3, r2
 8010ad2:	d021      	beq.n	8010b18 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	685b      	ldr	r3, [r3, #4]
 8010ada:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d01a      	beq.n	8010b18 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010aea:	e853 3f00 	ldrex	r3, [r3]
 8010aee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010af2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010af6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	461a      	mov	r2, r3
 8010b00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010b04:	657b      	str	r3, [r7, #84]	; 0x54
 8010b06:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b08:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010b0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010b0c:	e841 2300 	strex	r3, r2, [r1]
 8010b10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d1e4      	bne.n	8010ae2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b1c:	2b01      	cmp	r3, #1
 8010b1e:	d130      	bne.n	8010b82 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	2200      	movs	r2, #0
 8010b24:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b2e:	e853 3f00 	ldrex	r3, [r3]
 8010b32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b36:	f023 0310 	bic.w	r3, r3, #16
 8010b3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	461a      	mov	r2, r3
 8010b44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b48:	643b      	str	r3, [r7, #64]	; 0x40
 8010b4a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010b4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010b50:	e841 2300 	strex	r3, r2, [r1]
 8010b54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d1e4      	bne.n	8010b26 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	69db      	ldr	r3, [r3, #28]
 8010b62:	f003 0310 	and.w	r3, r3, #16
 8010b66:	2b10      	cmp	r3, #16
 8010b68:	d103      	bne.n	8010b72 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	2210      	movs	r2, #16
 8010b70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010b78:	4619      	mov	r1, r3
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	f7fe fc0c 	bl	800f398 <HAL_UARTEx_RxEventCallback>
 8010b80:	e002      	b.n	8010b88 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010b82:	6878      	ldr	r0, [r7, #4]
 8010b84:	f7ef fd64 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010b88:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d006      	beq.n	8010b9e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8010b90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010b94:	f003 0320 	and.w	r3, r3, #32
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	f47f aed1 	bne.w	8010940 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ba4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010ba8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d049      	beq.n	8010c44 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010bb6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8010bba:	429a      	cmp	r2, r3
 8010bbc:	d242      	bcs.n	8010c44 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	3308      	adds	r3, #8
 8010bc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bc6:	6a3b      	ldr	r3, [r7, #32]
 8010bc8:	e853 3f00 	ldrex	r3, [r3]
 8010bcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8010bce:	69fb      	ldr	r3, [r7, #28]
 8010bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010bd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	3308      	adds	r3, #8
 8010bde:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010be2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010be4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010be6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010bea:	e841 2300 	strex	r3, r2, [r1]
 8010bee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d1e3      	bne.n	8010bbe <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	4a16      	ldr	r2, [pc, #88]	; (8010c54 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8010bfa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	e853 3f00 	ldrex	r3, [r3]
 8010c08:	60bb      	str	r3, [r7, #8]
   return(result);
 8010c0a:	68bb      	ldr	r3, [r7, #8]
 8010c0c:	f043 0320 	orr.w	r3, r3, #32
 8010c10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	461a      	mov	r2, r3
 8010c1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010c1e:	61bb      	str	r3, [r7, #24]
 8010c20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c22:	6979      	ldr	r1, [r7, #20]
 8010c24:	69ba      	ldr	r2, [r7, #24]
 8010c26:	e841 2300 	strex	r3, r2, [r1]
 8010c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8010c2c:	693b      	ldr	r3, [r7, #16]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d1e4      	bne.n	8010bfc <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010c32:	e007      	b.n	8010c44 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	699a      	ldr	r2, [r3, #24]
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	f042 0208 	orr.w	r2, r2, #8
 8010c42:	619a      	str	r2, [r3, #24]
}
 8010c44:	bf00      	nop
 8010c46:	37b0      	adds	r7, #176	; 0xb0
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	bd80      	pop	{r7, pc}
 8010c4c:	effffffe 	.word	0xeffffffe
 8010c50:	58000c00 	.word	0x58000c00
 8010c54:	08010589 	.word	0x08010589

08010c58 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b0ae      	sub	sp, #184	; 0xb8
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010c66:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	69db      	ldr	r3, [r3, #28]
 8010c70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	689b      	ldr	r3, [r3, #8]
 8010c84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c8e:	2b22      	cmp	r3, #34	; 0x22
 8010c90:	f040 8184 	bne.w	8010f9c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010c9a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010c9e:	e127      	b.n	8010ef0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ca6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8010cb2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8010cb6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8010cba:	4013      	ands	r3, r2
 8010cbc:	b29a      	uxth	r2, r3
 8010cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010cc2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cc8:	1c9a      	adds	r2, r3, #2
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010cd4:	b29b      	uxth	r3, r3
 8010cd6:	3b01      	subs	r3, #1
 8010cd8:	b29a      	uxth	r2, r3
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	69db      	ldr	r3, [r3, #28]
 8010ce6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010cea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010cee:	f003 0307 	and.w	r3, r3, #7
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d053      	beq.n	8010d9e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010cf6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010cfa:	f003 0301 	and.w	r3, r3, #1
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d011      	beq.n	8010d26 <UART_RxISR_16BIT_FIFOEN+0xce>
 8010d02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d00b      	beq.n	8010d26 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	2201      	movs	r2, #1
 8010d14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d1c:	f043 0201 	orr.w	r2, r3, #1
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010d26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010d2a:	f003 0302 	and.w	r3, r3, #2
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d011      	beq.n	8010d56 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8010d32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010d36:	f003 0301 	and.w	r3, r3, #1
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d00b      	beq.n	8010d56 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	2202      	movs	r2, #2
 8010d44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d4c:	f043 0204 	orr.w	r2, r3, #4
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010d56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010d5a:	f003 0304 	and.w	r3, r3, #4
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d011      	beq.n	8010d86 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8010d62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010d66:	f003 0301 	and.w	r3, r3, #1
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d00b      	beq.n	8010d86 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	2204      	movs	r2, #4
 8010d74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d7c:	f043 0202 	orr.w	r2, r3, #2
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d006      	beq.n	8010d9e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010d90:	6878      	ldr	r0, [r7, #4]
 8010d92:	f7fe faf7 	bl	800f384 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2200      	movs	r2, #0
 8010d9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010da4:	b29b      	uxth	r3, r3
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	f040 80a2 	bne.w	8010ef0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010db2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010db4:	e853 3f00 	ldrex	r3, [r3]
 8010db8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010dba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010dc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	461a      	mov	r2, r3
 8010dca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010dce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010dd2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010dd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010dda:	e841 2300 	strex	r3, r2, [r1]
 8010dde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010de0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d1e2      	bne.n	8010dac <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	3308      	adds	r3, #8
 8010dec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010df0:	e853 3f00 	ldrex	r3, [r3]
 8010df4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010df6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010df8:	4b6e      	ldr	r3, [pc, #440]	; (8010fb4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8010dfa:	4013      	ands	r3, r2
 8010dfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	3308      	adds	r3, #8
 8010e06:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010e0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010e0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010e10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010e12:	e841 2300 	strex	r3, r2, [r1]
 8010e16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010e18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d1e3      	bne.n	8010de6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	2220      	movs	r2, #32
 8010e22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	2200      	movs	r2, #0
 8010e2a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	2200      	movs	r2, #0
 8010e30:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	4a60      	ldr	r2, [pc, #384]	; (8010fb8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8010e38:	4293      	cmp	r3, r2
 8010e3a:	d021      	beq.n	8010e80 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	685b      	ldr	r3, [r3, #4]
 8010e42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d01a      	beq.n	8010e80 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e52:	e853 3f00 	ldrex	r3, [r3]
 8010e56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010e5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	461a      	mov	r2, r3
 8010e68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8010e6e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010e72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010e74:	e841 2300 	strex	r3, r2, [r1]
 8010e78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d1e4      	bne.n	8010e4a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e84:	2b01      	cmp	r3, #1
 8010e86:	d130      	bne.n	8010eea <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e96:	e853 3f00 	ldrex	r3, [r3]
 8010e9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e9e:	f023 0310 	bic.w	r3, r3, #16
 8010ea2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	461a      	mov	r2, r3
 8010eac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010eb0:	647b      	str	r3, [r7, #68]	; 0x44
 8010eb2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010eb4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010eb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010eb8:	e841 2300 	strex	r3, r2, [r1]
 8010ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d1e4      	bne.n	8010e8e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	69db      	ldr	r3, [r3, #28]
 8010eca:	f003 0310 	and.w	r3, r3, #16
 8010ece:	2b10      	cmp	r3, #16
 8010ed0:	d103      	bne.n	8010eda <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	2210      	movs	r2, #16
 8010ed8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010ee0:	4619      	mov	r1, r3
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f7fe fa58 	bl	800f398 <HAL_UARTEx_RxEventCallback>
 8010ee8:	e002      	b.n	8010ef0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010eea:	6878      	ldr	r0, [r7, #4]
 8010eec:	f7ef fbb0 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010ef0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d006      	beq.n	8010f06 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8010ef8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010efc:	f003 0320 	and.w	r3, r3, #32
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	f47f aecd 	bne.w	8010ca0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010f0c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010f10:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d049      	beq.n	8010fac <UART_RxISR_16BIT_FIFOEN+0x354>
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010f1e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8010f22:	429a      	cmp	r2, r3
 8010f24:	d242      	bcs.n	8010fac <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	3308      	adds	r3, #8
 8010f2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f30:	e853 3f00 	ldrex	r3, [r3]
 8010f34:	623b      	str	r3, [r7, #32]
   return(result);
 8010f36:	6a3b      	ldr	r3, [r7, #32]
 8010f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010f3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	3308      	adds	r3, #8
 8010f46:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010f4a:	633a      	str	r2, [r7, #48]	; 0x30
 8010f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f52:	e841 2300 	strex	r3, r2, [r1]
 8010f56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d1e3      	bne.n	8010f26 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	4a16      	ldr	r2, [pc, #88]	; (8010fbc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8010f62:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f6a:	693b      	ldr	r3, [r7, #16]
 8010f6c:	e853 3f00 	ldrex	r3, [r3]
 8010f70:	60fb      	str	r3, [r7, #12]
   return(result);
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	f043 0320 	orr.w	r3, r3, #32
 8010f78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	461a      	mov	r2, r3
 8010f82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010f86:	61fb      	str	r3, [r7, #28]
 8010f88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f8a:	69b9      	ldr	r1, [r7, #24]
 8010f8c:	69fa      	ldr	r2, [r7, #28]
 8010f8e:	e841 2300 	strex	r3, r2, [r1]
 8010f92:	617b      	str	r3, [r7, #20]
   return(result);
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d1e4      	bne.n	8010f64 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010f9a:	e007      	b.n	8010fac <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	699a      	ldr	r2, [r3, #24]
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	f042 0208 	orr.w	r2, r2, #8
 8010faa:	619a      	str	r2, [r3, #24]
}
 8010fac:	bf00      	nop
 8010fae:	37b8      	adds	r7, #184	; 0xb8
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd80      	pop	{r7, pc}
 8010fb4:	effffffe 	.word	0xeffffffe
 8010fb8:	58000c00 	.word	0x58000c00
 8010fbc:	08010741 	.word	0x08010741

08010fc0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010fc0:	b480      	push	{r7}
 8010fc2:	b083      	sub	sp, #12
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010fc8:	bf00      	nop
 8010fca:	370c      	adds	r7, #12
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd2:	4770      	bx	lr

08010fd4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b083      	sub	sp, #12
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010fdc:	bf00      	nop
 8010fde:	370c      	adds	r7, #12
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe6:	4770      	bx	lr

08010fe8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010fe8:	b480      	push	{r7}
 8010fea:	b083      	sub	sp, #12
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010ff0:	bf00      	nop
 8010ff2:	370c      	adds	r7, #12
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffa:	4770      	bx	lr

08010ffc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010ffc:	b480      	push	{r7}
 8010ffe:	b085      	sub	sp, #20
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801100a:	2b01      	cmp	r3, #1
 801100c:	d101      	bne.n	8011012 <HAL_UARTEx_DisableFifoMode+0x16>
 801100e:	2302      	movs	r3, #2
 8011010:	e027      	b.n	8011062 <HAL_UARTEx_DisableFifoMode+0x66>
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	2201      	movs	r2, #1
 8011016:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	2224      	movs	r2, #36	; 0x24
 801101e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	681a      	ldr	r2, [r3, #0]
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	f022 0201 	bic.w	r2, r2, #1
 8011038:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011040:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	2200      	movs	r2, #0
 8011046:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	68fa      	ldr	r2, [r7, #12]
 801104e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	2220      	movs	r2, #32
 8011054:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	2200      	movs	r2, #0
 801105c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011060:	2300      	movs	r3, #0
}
 8011062:	4618      	mov	r0, r3
 8011064:	3714      	adds	r7, #20
 8011066:	46bd      	mov	sp, r7
 8011068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106c:	4770      	bx	lr

0801106e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801106e:	b580      	push	{r7, lr}
 8011070:	b084      	sub	sp, #16
 8011072:	af00      	add	r7, sp, #0
 8011074:	6078      	str	r0, [r7, #4]
 8011076:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801107e:	2b01      	cmp	r3, #1
 8011080:	d101      	bne.n	8011086 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011082:	2302      	movs	r3, #2
 8011084:	e02d      	b.n	80110e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	2201      	movs	r2, #1
 801108a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	2224      	movs	r2, #36	; 0x24
 8011092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	681a      	ldr	r2, [r3, #0]
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	f022 0201 	bic.w	r2, r2, #1
 80110ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	689b      	ldr	r3, [r3, #8]
 80110b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	683a      	ldr	r2, [r7, #0]
 80110be:	430a      	orrs	r2, r1
 80110c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80110c2:	6878      	ldr	r0, [r7, #4]
 80110c4:	f000 f850 	bl	8011168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	68fa      	ldr	r2, [r7, #12]
 80110ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	2220      	movs	r2, #32
 80110d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2200      	movs	r2, #0
 80110dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80110e0:	2300      	movs	r3, #0
}
 80110e2:	4618      	mov	r0, r3
 80110e4:	3710      	adds	r7, #16
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}

080110ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80110ea:	b580      	push	{r7, lr}
 80110ec:	b084      	sub	sp, #16
 80110ee:	af00      	add	r7, sp, #0
 80110f0:	6078      	str	r0, [r7, #4]
 80110f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80110fa:	2b01      	cmp	r3, #1
 80110fc:	d101      	bne.n	8011102 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80110fe:	2302      	movs	r3, #2
 8011100:	e02d      	b.n	801115e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	2201      	movs	r2, #1
 8011106:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	2224      	movs	r2, #36	; 0x24
 801110e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	681a      	ldr	r2, [r3, #0]
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	f022 0201 	bic.w	r2, r2, #1
 8011128:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	689b      	ldr	r3, [r3, #8]
 8011130:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	683a      	ldr	r2, [r7, #0]
 801113a:	430a      	orrs	r2, r1
 801113c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801113e:	6878      	ldr	r0, [r7, #4]
 8011140:	f000 f812 	bl	8011168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	68fa      	ldr	r2, [r7, #12]
 801114a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	2220      	movs	r2, #32
 8011150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2200      	movs	r2, #0
 8011158:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801115c:	2300      	movs	r3, #0
}
 801115e:	4618      	mov	r0, r3
 8011160:	3710      	adds	r7, #16
 8011162:	46bd      	mov	sp, r7
 8011164:	bd80      	pop	{r7, pc}
	...

08011168 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011168:	b480      	push	{r7}
 801116a:	b085      	sub	sp, #20
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011174:	2b00      	cmp	r3, #0
 8011176:	d108      	bne.n	801118a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	2201      	movs	r2, #1
 801117c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	2201      	movs	r2, #1
 8011184:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011188:	e031      	b.n	80111ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801118a:	2310      	movs	r3, #16
 801118c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801118e:	2310      	movs	r3, #16
 8011190:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	689b      	ldr	r3, [r3, #8]
 8011198:	0e5b      	lsrs	r3, r3, #25
 801119a:	b2db      	uxtb	r3, r3
 801119c:	f003 0307 	and.w	r3, r3, #7
 80111a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	689b      	ldr	r3, [r3, #8]
 80111a8:	0f5b      	lsrs	r3, r3, #29
 80111aa:	b2db      	uxtb	r3, r3
 80111ac:	f003 0307 	and.w	r3, r3, #7
 80111b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80111b2:	7bbb      	ldrb	r3, [r7, #14]
 80111b4:	7b3a      	ldrb	r2, [r7, #12]
 80111b6:	4911      	ldr	r1, [pc, #68]	; (80111fc <UARTEx_SetNbDataToProcess+0x94>)
 80111b8:	5c8a      	ldrb	r2, [r1, r2]
 80111ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80111be:	7b3a      	ldrb	r2, [r7, #12]
 80111c0:	490f      	ldr	r1, [pc, #60]	; (8011200 <UARTEx_SetNbDataToProcess+0x98>)
 80111c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80111c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80111c8:	b29a      	uxth	r2, r3
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80111d0:	7bfb      	ldrb	r3, [r7, #15]
 80111d2:	7b7a      	ldrb	r2, [r7, #13]
 80111d4:	4909      	ldr	r1, [pc, #36]	; (80111fc <UARTEx_SetNbDataToProcess+0x94>)
 80111d6:	5c8a      	ldrb	r2, [r1, r2]
 80111d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80111dc:	7b7a      	ldrb	r2, [r7, #13]
 80111de:	4908      	ldr	r1, [pc, #32]	; (8011200 <UARTEx_SetNbDataToProcess+0x98>)
 80111e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80111e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80111e6:	b29a      	uxth	r2, r3
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80111ee:	bf00      	nop
 80111f0:	3714      	adds	r7, #20
 80111f2:	46bd      	mov	sp, r7
 80111f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f8:	4770      	bx	lr
 80111fa:	bf00      	nop
 80111fc:	0801555c 	.word	0x0801555c
 8011200:	08015564 	.word	0x08015564

08011204 <__NVIC_SetPriority>:
{
 8011204:	b480      	push	{r7}
 8011206:	b083      	sub	sp, #12
 8011208:	af00      	add	r7, sp, #0
 801120a:	4603      	mov	r3, r0
 801120c:	6039      	str	r1, [r7, #0]
 801120e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8011210:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011214:	2b00      	cmp	r3, #0
 8011216:	db0a      	blt.n	801122e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	b2da      	uxtb	r2, r3
 801121c:	490c      	ldr	r1, [pc, #48]	; (8011250 <__NVIC_SetPriority+0x4c>)
 801121e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011222:	0112      	lsls	r2, r2, #4
 8011224:	b2d2      	uxtb	r2, r2
 8011226:	440b      	add	r3, r1
 8011228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801122c:	e00a      	b.n	8011244 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	b2da      	uxtb	r2, r3
 8011232:	4908      	ldr	r1, [pc, #32]	; (8011254 <__NVIC_SetPriority+0x50>)
 8011234:	88fb      	ldrh	r3, [r7, #6]
 8011236:	f003 030f 	and.w	r3, r3, #15
 801123a:	3b04      	subs	r3, #4
 801123c:	0112      	lsls	r2, r2, #4
 801123e:	b2d2      	uxtb	r2, r2
 8011240:	440b      	add	r3, r1
 8011242:	761a      	strb	r2, [r3, #24]
}
 8011244:	bf00      	nop
 8011246:	370c      	adds	r7, #12
 8011248:	46bd      	mov	sp, r7
 801124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124e:	4770      	bx	lr
 8011250:	e000e100 	.word	0xe000e100
 8011254:	e000ed00 	.word	0xe000ed00

08011258 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8011258:	b580      	push	{r7, lr}
 801125a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801125c:	4b05      	ldr	r3, [pc, #20]	; (8011274 <SysTick_Handler+0x1c>)
 801125e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8011260:	f002 f9ce 	bl	8013600 <xTaskGetSchedulerState>
 8011264:	4603      	mov	r3, r0
 8011266:	2b01      	cmp	r3, #1
 8011268:	d001      	beq.n	801126e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801126a:	f002 ffed 	bl	8014248 <xPortSysTickHandler>
  }
}
 801126e:	bf00      	nop
 8011270:	bd80      	pop	{r7, pc}
 8011272:	bf00      	nop
 8011274:	e000e010 	.word	0xe000e010

08011278 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011278:	b580      	push	{r7, lr}
 801127a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801127c:	2100      	movs	r1, #0
 801127e:	f06f 0004 	mvn.w	r0, #4
 8011282:	f7ff ffbf 	bl	8011204 <__NVIC_SetPriority>
#endif
}
 8011286:	bf00      	nop
 8011288:	bd80      	pop	{r7, pc}
	...

0801128c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801128c:	b480      	push	{r7}
 801128e:	b083      	sub	sp, #12
 8011290:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011292:	f3ef 8305 	mrs	r3, IPSR
 8011296:	603b      	str	r3, [r7, #0]
  return(result);
 8011298:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801129a:	2b00      	cmp	r3, #0
 801129c:	d003      	beq.n	80112a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801129e:	f06f 0305 	mvn.w	r3, #5
 80112a2:	607b      	str	r3, [r7, #4]
 80112a4:	e00c      	b.n	80112c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80112a6:	4b0a      	ldr	r3, [pc, #40]	; (80112d0 <osKernelInitialize+0x44>)
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d105      	bne.n	80112ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80112ae:	4b08      	ldr	r3, [pc, #32]	; (80112d0 <osKernelInitialize+0x44>)
 80112b0:	2201      	movs	r2, #1
 80112b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80112b4:	2300      	movs	r3, #0
 80112b6:	607b      	str	r3, [r7, #4]
 80112b8:	e002      	b.n	80112c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80112ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80112be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80112c0:	687b      	ldr	r3, [r7, #4]
}
 80112c2:	4618      	mov	r0, r3
 80112c4:	370c      	adds	r7, #12
 80112c6:	46bd      	mov	sp, r7
 80112c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112cc:	4770      	bx	lr
 80112ce:	bf00      	nop
 80112d0:	24000c3c 	.word	0x24000c3c

080112d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b082      	sub	sp, #8
 80112d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80112da:	f3ef 8305 	mrs	r3, IPSR
 80112de:	603b      	str	r3, [r7, #0]
  return(result);
 80112e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d003      	beq.n	80112ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80112e6:	f06f 0305 	mvn.w	r3, #5
 80112ea:	607b      	str	r3, [r7, #4]
 80112ec:	e010      	b.n	8011310 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80112ee:	4b0b      	ldr	r3, [pc, #44]	; (801131c <osKernelStart+0x48>)
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	2b01      	cmp	r3, #1
 80112f4:	d109      	bne.n	801130a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80112f6:	f7ff ffbf 	bl	8011278 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80112fa:	4b08      	ldr	r3, [pc, #32]	; (801131c <osKernelStart+0x48>)
 80112fc:	2202      	movs	r2, #2
 80112fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8011300:	f001 fc98 	bl	8012c34 <vTaskStartScheduler>
      stat = osOK;
 8011304:	2300      	movs	r3, #0
 8011306:	607b      	str	r3, [r7, #4]
 8011308:	e002      	b.n	8011310 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801130a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801130e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011310:	687b      	ldr	r3, [r7, #4]
}
 8011312:	4618      	mov	r0, r3
 8011314:	3708      	adds	r7, #8
 8011316:	46bd      	mov	sp, r7
 8011318:	bd80      	pop	{r7, pc}
 801131a:	bf00      	nop
 801131c:	24000c3c 	.word	0x24000c3c

08011320 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011320:	b580      	push	{r7, lr}
 8011322:	b08e      	sub	sp, #56	; 0x38
 8011324:	af04      	add	r7, sp, #16
 8011326:	60f8      	str	r0, [r7, #12]
 8011328:	60b9      	str	r1, [r7, #8]
 801132a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801132c:	2300      	movs	r3, #0
 801132e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011330:	f3ef 8305 	mrs	r3, IPSR
 8011334:	617b      	str	r3, [r7, #20]
  return(result);
 8011336:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8011338:	2b00      	cmp	r3, #0
 801133a:	d17e      	bne.n	801143a <osThreadNew+0x11a>
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d07b      	beq.n	801143a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8011342:	2380      	movs	r3, #128	; 0x80
 8011344:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8011346:	2318      	movs	r3, #24
 8011348:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801134a:	2300      	movs	r3, #0
 801134c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801134e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011352:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d045      	beq.n	80113e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d002      	beq.n	8011368 <osThreadNew+0x48>
        name = attr->name;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	699b      	ldr	r3, [r3, #24]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d002      	beq.n	8011376 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	699b      	ldr	r3, [r3, #24]
 8011374:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011376:	69fb      	ldr	r3, [r7, #28]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d008      	beq.n	801138e <osThreadNew+0x6e>
 801137c:	69fb      	ldr	r3, [r7, #28]
 801137e:	2b38      	cmp	r3, #56	; 0x38
 8011380:	d805      	bhi.n	801138e <osThreadNew+0x6e>
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	685b      	ldr	r3, [r3, #4]
 8011386:	f003 0301 	and.w	r3, r3, #1
 801138a:	2b00      	cmp	r3, #0
 801138c:	d001      	beq.n	8011392 <osThreadNew+0x72>
        return (NULL);
 801138e:	2300      	movs	r3, #0
 8011390:	e054      	b.n	801143c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	695b      	ldr	r3, [r3, #20]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d003      	beq.n	80113a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	695b      	ldr	r3, [r3, #20]
 801139e:	089b      	lsrs	r3, r3, #2
 80113a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	689b      	ldr	r3, [r3, #8]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d00e      	beq.n	80113c8 <osThreadNew+0xa8>
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	68db      	ldr	r3, [r3, #12]
 80113ae:	2b5b      	cmp	r3, #91	; 0x5b
 80113b0:	d90a      	bls.n	80113c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d006      	beq.n	80113c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	695b      	ldr	r3, [r3, #20]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d002      	beq.n	80113c8 <osThreadNew+0xa8>
        mem = 1;
 80113c2:	2301      	movs	r3, #1
 80113c4:	61bb      	str	r3, [r7, #24]
 80113c6:	e010      	b.n	80113ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	689b      	ldr	r3, [r3, #8]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d10c      	bne.n	80113ea <osThreadNew+0xca>
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	68db      	ldr	r3, [r3, #12]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d108      	bne.n	80113ea <osThreadNew+0xca>
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	691b      	ldr	r3, [r3, #16]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d104      	bne.n	80113ea <osThreadNew+0xca>
          mem = 0;
 80113e0:	2300      	movs	r3, #0
 80113e2:	61bb      	str	r3, [r7, #24]
 80113e4:	e001      	b.n	80113ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80113e6:	2300      	movs	r3, #0
 80113e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80113ea:	69bb      	ldr	r3, [r7, #24]
 80113ec:	2b01      	cmp	r3, #1
 80113ee:	d110      	bne.n	8011412 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80113f4:	687a      	ldr	r2, [r7, #4]
 80113f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80113f8:	9202      	str	r2, [sp, #8]
 80113fa:	9301      	str	r3, [sp, #4]
 80113fc:	69fb      	ldr	r3, [r7, #28]
 80113fe:	9300      	str	r3, [sp, #0]
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	6a3a      	ldr	r2, [r7, #32]
 8011404:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011406:	68f8      	ldr	r0, [r7, #12]
 8011408:	f001 f924 	bl	8012654 <xTaskCreateStatic>
 801140c:	4603      	mov	r3, r0
 801140e:	613b      	str	r3, [r7, #16]
 8011410:	e013      	b.n	801143a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8011412:	69bb      	ldr	r3, [r7, #24]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d110      	bne.n	801143a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011418:	6a3b      	ldr	r3, [r7, #32]
 801141a:	b29a      	uxth	r2, r3
 801141c:	f107 0310 	add.w	r3, r7, #16
 8011420:	9301      	str	r3, [sp, #4]
 8011422:	69fb      	ldr	r3, [r7, #28]
 8011424:	9300      	str	r3, [sp, #0]
 8011426:	68bb      	ldr	r3, [r7, #8]
 8011428:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801142a:	68f8      	ldr	r0, [r7, #12]
 801142c:	f001 f96f 	bl	801270e <xTaskCreate>
 8011430:	4603      	mov	r3, r0
 8011432:	2b01      	cmp	r3, #1
 8011434:	d001      	beq.n	801143a <osThreadNew+0x11a>
            hTask = NULL;
 8011436:	2300      	movs	r3, #0
 8011438:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801143a:	693b      	ldr	r3, [r7, #16]
}
 801143c:	4618      	mov	r0, r3
 801143e:	3728      	adds	r7, #40	; 0x28
 8011440:	46bd      	mov	sp, r7
 8011442:	bd80      	pop	{r7, pc}

08011444 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8011444:	b480      	push	{r7}
 8011446:	b083      	sub	sp, #12
 8011448:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801144a:	f3ef 8305 	mrs	r3, IPSR
 801144e:	603b      	str	r3, [r7, #0]
  return(result);
 8011450:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011452:	2b00      	cmp	r3, #0
 8011454:	d003      	beq.n	801145e <osThreadYield+0x1a>
    stat = osErrorISR;
 8011456:	f06f 0305 	mvn.w	r3, #5
 801145a:	607b      	str	r3, [r7, #4]
 801145c:	e009      	b.n	8011472 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 801145e:	2300      	movs	r3, #0
 8011460:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8011462:	4b07      	ldr	r3, [pc, #28]	; (8011480 <osThreadYield+0x3c>)
 8011464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011468:	601a      	str	r2, [r3, #0]
 801146a:	f3bf 8f4f 	dsb	sy
 801146e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8011472:	687b      	ldr	r3, [r7, #4]
}
 8011474:	4618      	mov	r0, r3
 8011476:	370c      	adds	r7, #12
 8011478:	46bd      	mov	sp, r7
 801147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147e:	4770      	bx	lr
 8011480:	e000ed04 	.word	0xe000ed04

08011484 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8011484:	b580      	push	{r7, lr}
 8011486:	b086      	sub	sp, #24
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011490:	f3ef 8305 	mrs	r3, IPSR
 8011494:	60fb      	str	r3, [r7, #12]
  return(result);
 8011496:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011498:	2b00      	cmp	r3, #0
 801149a:	d003      	beq.n	80114a4 <osThreadSuspend+0x20>
    stat = osErrorISR;
 801149c:	f06f 0305 	mvn.w	r3, #5
 80114a0:	617b      	str	r3, [r7, #20]
 80114a2:	e00b      	b.n	80114bc <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80114a4:	693b      	ldr	r3, [r7, #16]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d103      	bne.n	80114b2 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80114aa:	f06f 0303 	mvn.w	r3, #3
 80114ae:	617b      	str	r3, [r7, #20]
 80114b0:	e004      	b.n	80114bc <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80114b2:	2300      	movs	r3, #0
 80114b4:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80114b6:	6938      	ldr	r0, [r7, #16]
 80114b8:	f001 faa2 	bl	8012a00 <vTaskSuspend>
  }

  return (stat);
 80114bc:	697b      	ldr	r3, [r7, #20]
}
 80114be:	4618      	mov	r0, r3
 80114c0:	3718      	adds	r7, #24
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd80      	pop	{r7, pc}

080114c6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80114c6:	b580      	push	{r7, lr}
 80114c8:	b084      	sub	sp, #16
 80114ca:	af00      	add	r7, sp, #0
 80114cc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80114ce:	f3ef 8305 	mrs	r3, IPSR
 80114d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80114d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d003      	beq.n	80114e2 <osDelay+0x1c>
    stat = osErrorISR;
 80114da:	f06f 0305 	mvn.w	r3, #5
 80114de:	60fb      	str	r3, [r7, #12]
 80114e0:	e007      	b.n	80114f2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80114e2:	2300      	movs	r3, #0
 80114e4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d002      	beq.n	80114f2 <osDelay+0x2c>
      vTaskDelay(ticks);
 80114ec:	6878      	ldr	r0, [r7, #4]
 80114ee:	f001 fa53 	bl	8012998 <vTaskDelay>
    }
  }

  return (stat);
 80114f2:	68fb      	ldr	r3, [r7, #12]
}
 80114f4:	4618      	mov	r0, r3
 80114f6:	3710      	adds	r7, #16
 80114f8:	46bd      	mov	sp, r7
 80114fa:	bd80      	pop	{r7, pc}

080114fc <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b086      	sub	sp, #24
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8011504:	2300      	movs	r3, #0
 8011506:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011508:	f3ef 8305 	mrs	r3, IPSR
 801150c:	60fb      	str	r3, [r7, #12]
  return(result);
 801150e:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8011510:	2b00      	cmp	r3, #0
 8011512:	d12d      	bne.n	8011570 <osEventFlagsNew+0x74>
    mem = -1;
 8011514:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011518:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d015      	beq.n	801154c <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	689b      	ldr	r3, [r3, #8]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d006      	beq.n	8011536 <osEventFlagsNew+0x3a>
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	68db      	ldr	r3, [r3, #12]
 801152c:	2b1f      	cmp	r3, #31
 801152e:	d902      	bls.n	8011536 <osEventFlagsNew+0x3a>
        mem = 1;
 8011530:	2301      	movs	r3, #1
 8011532:	613b      	str	r3, [r7, #16]
 8011534:	e00c      	b.n	8011550 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	689b      	ldr	r3, [r3, #8]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d108      	bne.n	8011550 <osEventFlagsNew+0x54>
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	68db      	ldr	r3, [r3, #12]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d104      	bne.n	8011550 <osEventFlagsNew+0x54>
          mem = 0;
 8011546:	2300      	movs	r3, #0
 8011548:	613b      	str	r3, [r7, #16]
 801154a:	e001      	b.n	8011550 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 801154c:	2300      	movs	r3, #0
 801154e:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8011550:	693b      	ldr	r3, [r7, #16]
 8011552:	2b01      	cmp	r3, #1
 8011554:	d106      	bne.n	8011564 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	689b      	ldr	r3, [r3, #8]
 801155a:	4618      	mov	r0, r3
 801155c:	f000 f8ec 	bl	8011738 <xEventGroupCreateStatic>
 8011560:	6178      	str	r0, [r7, #20]
 8011562:	e005      	b.n	8011570 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8011564:	693b      	ldr	r3, [r7, #16]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d102      	bne.n	8011570 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 801156a:	f000 f91c 	bl	80117a6 <xEventGroupCreate>
 801156e:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8011570:	697b      	ldr	r3, [r7, #20]
}
 8011572:	4618      	mov	r0, r3
 8011574:	3718      	adds	r7, #24
 8011576:	46bd      	mov	sp, r7
 8011578:	bd80      	pop	{r7, pc}
	...

0801157c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 801157c:	b580      	push	{r7, lr}
 801157e:	b086      	sub	sp, #24
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
 8011584:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801158a:	693b      	ldr	r3, [r7, #16]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d004      	beq.n	801159a <osEventFlagsSet+0x1e>
 8011590:	683b      	ldr	r3, [r7, #0]
 8011592:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011596:	2b00      	cmp	r3, #0
 8011598:	d003      	beq.n	80115a2 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 801159a:	f06f 0303 	mvn.w	r3, #3
 801159e:	617b      	str	r3, [r7, #20]
 80115a0:	e028      	b.n	80115f4 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80115a2:	f3ef 8305 	mrs	r3, IPSR
 80115a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80115a8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d01d      	beq.n	80115ea <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80115ae:	2300      	movs	r3, #0
 80115b0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80115b2:	f107 0308 	add.w	r3, r7, #8
 80115b6:	461a      	mov	r2, r3
 80115b8:	6839      	ldr	r1, [r7, #0]
 80115ba:	6938      	ldr	r0, [r7, #16]
 80115bc:	f000 fa96 	bl	8011aec <xEventGroupSetBitsFromISR>
 80115c0:	4603      	mov	r3, r0
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d103      	bne.n	80115ce <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80115c6:	f06f 0302 	mvn.w	r3, #2
 80115ca:	617b      	str	r3, [r7, #20]
 80115cc:	e012      	b.n	80115f4 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80115d2:	68bb      	ldr	r3, [r7, #8]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d00d      	beq.n	80115f4 <osEventFlagsSet+0x78>
 80115d8:	4b09      	ldr	r3, [pc, #36]	; (8011600 <osEventFlagsSet+0x84>)
 80115da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115de:	601a      	str	r2, [r3, #0]
 80115e0:	f3bf 8f4f 	dsb	sy
 80115e4:	f3bf 8f6f 	isb	sy
 80115e8:	e004      	b.n	80115f4 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80115ea:	6839      	ldr	r1, [r7, #0]
 80115ec:	6938      	ldr	r0, [r7, #16]
 80115ee:	f000 f9c3 	bl	8011978 <xEventGroupSetBits>
 80115f2:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80115f4:	697b      	ldr	r3, [r7, #20]
}
 80115f6:	4618      	mov	r0, r3
 80115f8:	3718      	adds	r7, #24
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}
 80115fe:	bf00      	nop
 8011600:	e000ed04 	.word	0xe000ed04

08011604 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8011604:	b580      	push	{r7, lr}
 8011606:	b08c      	sub	sp, #48	; 0x30
 8011608:	af02      	add	r7, sp, #8
 801160a:	60f8      	str	r0, [r7, #12]
 801160c:	60b9      	str	r1, [r7, #8]
 801160e:	607a      	str	r2, [r7, #4]
 8011610:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8011616:	69bb      	ldr	r3, [r7, #24]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d004      	beq.n	8011626 <osEventFlagsWait+0x22>
 801161c:	68bb      	ldr	r3, [r7, #8]
 801161e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011622:	2b00      	cmp	r3, #0
 8011624:	d003      	beq.n	801162e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8011626:	f06f 0303 	mvn.w	r3, #3
 801162a:	61fb      	str	r3, [r7, #28]
 801162c:	e04b      	b.n	80116c6 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801162e:	f3ef 8305 	mrs	r3, IPSR
 8011632:	617b      	str	r3, [r7, #20]
  return(result);
 8011634:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8011636:	2b00      	cmp	r3, #0
 8011638:	d003      	beq.n	8011642 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 801163a:	f06f 0305 	mvn.w	r3, #5
 801163e:	61fb      	str	r3, [r7, #28]
 8011640:	e041      	b.n	80116c6 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f003 0301 	and.w	r3, r3, #1
 8011648:	2b00      	cmp	r3, #0
 801164a:	d002      	beq.n	8011652 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 801164c:	2301      	movs	r3, #1
 801164e:	627b      	str	r3, [r7, #36]	; 0x24
 8011650:	e001      	b.n	8011656 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8011652:	2300      	movs	r3, #0
 8011654:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	f003 0302 	and.w	r3, r3, #2
 801165c:	2b00      	cmp	r3, #0
 801165e:	d002      	beq.n	8011666 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8011660:	2300      	movs	r3, #0
 8011662:	623b      	str	r3, [r7, #32]
 8011664:	e001      	b.n	801166a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8011666:	2301      	movs	r3, #1
 8011668:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	9300      	str	r3, [sp, #0]
 801166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011670:	6a3a      	ldr	r2, [r7, #32]
 8011672:	68b9      	ldr	r1, [r7, #8]
 8011674:	69b8      	ldr	r0, [r7, #24]
 8011676:	f000 f8b1 	bl	80117dc <xEventGroupWaitBits>
 801167a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	f003 0301 	and.w	r3, r3, #1
 8011682:	2b00      	cmp	r3, #0
 8011684:	d010      	beq.n	80116a8 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8011686:	68ba      	ldr	r2, [r7, #8]
 8011688:	69fb      	ldr	r3, [r7, #28]
 801168a:	4013      	ands	r3, r2
 801168c:	68ba      	ldr	r2, [r7, #8]
 801168e:	429a      	cmp	r2, r3
 8011690:	d019      	beq.n	80116c6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d003      	beq.n	80116a0 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8011698:	f06f 0301 	mvn.w	r3, #1
 801169c:	61fb      	str	r3, [r7, #28]
 801169e:	e012      	b.n	80116c6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80116a0:	f06f 0302 	mvn.w	r3, #2
 80116a4:	61fb      	str	r3, [r7, #28]
 80116a6:	e00e      	b.n	80116c6 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80116a8:	68ba      	ldr	r2, [r7, #8]
 80116aa:	69fb      	ldr	r3, [r7, #28]
 80116ac:	4013      	ands	r3, r2
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d109      	bne.n	80116c6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d003      	beq.n	80116c0 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80116b8:	f06f 0301 	mvn.w	r3, #1
 80116bc:	61fb      	str	r3, [r7, #28]
 80116be:	e002      	b.n	80116c6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80116c0:	f06f 0302 	mvn.w	r3, #2
 80116c4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80116c6:	69fb      	ldr	r3, [r7, #28]
}
 80116c8:	4618      	mov	r0, r3
 80116ca:	3728      	adds	r7, #40	; 0x28
 80116cc:	46bd      	mov	sp, r7
 80116ce:	bd80      	pop	{r7, pc}

080116d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80116d0:	b480      	push	{r7}
 80116d2:	b085      	sub	sp, #20
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	60f8      	str	r0, [r7, #12]
 80116d8:	60b9      	str	r1, [r7, #8]
 80116da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	4a07      	ldr	r2, [pc, #28]	; (80116fc <vApplicationGetIdleTaskMemory+0x2c>)
 80116e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80116e2:	68bb      	ldr	r3, [r7, #8]
 80116e4:	4a06      	ldr	r2, [pc, #24]	; (8011700 <vApplicationGetIdleTaskMemory+0x30>)
 80116e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	2280      	movs	r2, #128	; 0x80
 80116ec:	601a      	str	r2, [r3, #0]
}
 80116ee:	bf00      	nop
 80116f0:	3714      	adds	r7, #20
 80116f2:	46bd      	mov	sp, r7
 80116f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f8:	4770      	bx	lr
 80116fa:	bf00      	nop
 80116fc:	24000c40 	.word	0x24000c40
 8011700:	24000c9c 	.word	0x24000c9c

08011704 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011704:	b480      	push	{r7}
 8011706:	b085      	sub	sp, #20
 8011708:	af00      	add	r7, sp, #0
 801170a:	60f8      	str	r0, [r7, #12]
 801170c:	60b9      	str	r1, [r7, #8]
 801170e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	4a07      	ldr	r2, [pc, #28]	; (8011730 <vApplicationGetTimerTaskMemory+0x2c>)
 8011714:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011716:	68bb      	ldr	r3, [r7, #8]
 8011718:	4a06      	ldr	r2, [pc, #24]	; (8011734 <vApplicationGetTimerTaskMemory+0x30>)
 801171a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011722:	601a      	str	r2, [r3, #0]
}
 8011724:	bf00      	nop
 8011726:	3714      	adds	r7, #20
 8011728:	46bd      	mov	sp, r7
 801172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172e:	4770      	bx	lr
 8011730:	24000e9c 	.word	0x24000e9c
 8011734:	24000ef8 	.word	0x24000ef8

08011738 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8011738:	b580      	push	{r7, lr}
 801173a:	b086      	sub	sp, #24
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d10a      	bne.n	801175c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011746:	f04f 0350 	mov.w	r3, #80	; 0x50
 801174a:	f383 8811 	msr	BASEPRI, r3
 801174e:	f3bf 8f6f 	isb	sy
 8011752:	f3bf 8f4f 	dsb	sy
 8011756:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011758:	bf00      	nop
 801175a:	e7fe      	b.n	801175a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 801175c:	2320      	movs	r3, #32
 801175e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8011760:	68bb      	ldr	r3, [r7, #8]
 8011762:	2b20      	cmp	r3, #32
 8011764:	d00a      	beq.n	801177c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8011766:	f04f 0350 	mov.w	r3, #80	; 0x50
 801176a:	f383 8811 	msr	BASEPRI, r3
 801176e:	f3bf 8f6f 	isb	sy
 8011772:	f3bf 8f4f 	dsb	sy
 8011776:	60fb      	str	r3, [r7, #12]
}
 8011778:	bf00      	nop
 801177a:	e7fe      	b.n	801177a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d00a      	beq.n	801179c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8011786:	697b      	ldr	r3, [r7, #20]
 8011788:	2200      	movs	r2, #0
 801178a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801178c:	697b      	ldr	r3, [r7, #20]
 801178e:	3304      	adds	r3, #4
 8011790:	4618      	mov	r0, r3
 8011792:	f000 f9bf 	bl	8011b14 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8011796:	697b      	ldr	r3, [r7, #20]
 8011798:	2201      	movs	r2, #1
 801179a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 801179c:	697b      	ldr	r3, [r7, #20]
	}
 801179e:	4618      	mov	r0, r3
 80117a0:	3718      	adds	r7, #24
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}

080117a6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80117a6:	b580      	push	{r7, lr}
 80117a8:	b082      	sub	sp, #8
 80117aa:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80117ac:	2020      	movs	r0, #32
 80117ae:	f002 fddb 	bl	8014368 <pvPortMalloc>
 80117b2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d00a      	beq.n	80117d0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	2200      	movs	r2, #0
 80117be:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	3304      	adds	r3, #4
 80117c4:	4618      	mov	r0, r3
 80117c6:	f000 f9a5 	bl	8011b14 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	2200      	movs	r2, #0
 80117ce:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80117d0:	687b      	ldr	r3, [r7, #4]
	}
 80117d2:	4618      	mov	r0, r3
 80117d4:	3708      	adds	r7, #8
 80117d6:	46bd      	mov	sp, r7
 80117d8:	bd80      	pop	{r7, pc}
	...

080117dc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b090      	sub	sp, #64	; 0x40
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	60f8      	str	r0, [r7, #12]
 80117e4:	60b9      	str	r1, [r7, #8]
 80117e6:	607a      	str	r2, [r7, #4]
 80117e8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80117ee:	2300      	movs	r3, #0
 80117f0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80117f2:	2300      	movs	r3, #0
 80117f4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d10a      	bne.n	8011812 <xEventGroupWaitBits+0x36>
	__asm volatile
 80117fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011800:	f383 8811 	msr	BASEPRI, r3
 8011804:	f3bf 8f6f 	isb	sy
 8011808:	f3bf 8f4f 	dsb	sy
 801180c:	623b      	str	r3, [r7, #32]
}
 801180e:	bf00      	nop
 8011810:	e7fe      	b.n	8011810 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8011812:	68bb      	ldr	r3, [r7, #8]
 8011814:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011818:	2b00      	cmp	r3, #0
 801181a:	d00a      	beq.n	8011832 <xEventGroupWaitBits+0x56>
	__asm volatile
 801181c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011820:	f383 8811 	msr	BASEPRI, r3
 8011824:	f3bf 8f6f 	isb	sy
 8011828:	f3bf 8f4f 	dsb	sy
 801182c:	61fb      	str	r3, [r7, #28]
}
 801182e:	bf00      	nop
 8011830:	e7fe      	b.n	8011830 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8011832:	68bb      	ldr	r3, [r7, #8]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d10a      	bne.n	801184e <xEventGroupWaitBits+0x72>
	__asm volatile
 8011838:	f04f 0350 	mov.w	r3, #80	; 0x50
 801183c:	f383 8811 	msr	BASEPRI, r3
 8011840:	f3bf 8f6f 	isb	sy
 8011844:	f3bf 8f4f 	dsb	sy
 8011848:	61bb      	str	r3, [r7, #24]
}
 801184a:	bf00      	nop
 801184c:	e7fe      	b.n	801184c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801184e:	f001 fed7 	bl	8013600 <xTaskGetSchedulerState>
 8011852:	4603      	mov	r3, r0
 8011854:	2b00      	cmp	r3, #0
 8011856:	d102      	bne.n	801185e <xEventGroupWaitBits+0x82>
 8011858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801185a:	2b00      	cmp	r3, #0
 801185c:	d101      	bne.n	8011862 <xEventGroupWaitBits+0x86>
 801185e:	2301      	movs	r3, #1
 8011860:	e000      	b.n	8011864 <xEventGroupWaitBits+0x88>
 8011862:	2300      	movs	r3, #0
 8011864:	2b00      	cmp	r3, #0
 8011866:	d10a      	bne.n	801187e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8011868:	f04f 0350 	mov.w	r3, #80	; 0x50
 801186c:	f383 8811 	msr	BASEPRI, r3
 8011870:	f3bf 8f6f 	isb	sy
 8011874:	f3bf 8f4f 	dsb	sy
 8011878:	617b      	str	r3, [r7, #20]
}
 801187a:	bf00      	nop
 801187c:	e7fe      	b.n	801187c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 801187e:	f001 fa3f 	bl	8012d00 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8011882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8011888:	683a      	ldr	r2, [r7, #0]
 801188a:	68b9      	ldr	r1, [r7, #8]
 801188c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801188e:	f000 f90b 	bl	8011aa8 <prvTestWaitCondition>
 8011892:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8011894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011896:	2b00      	cmp	r3, #0
 8011898:	d00e      	beq.n	80118b8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 801189a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801189c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 801189e:	2300      	movs	r3, #0
 80118a0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d028      	beq.n	80118fa <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80118a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118aa:	681a      	ldr	r2, [r3, #0]
 80118ac:	68bb      	ldr	r3, [r7, #8]
 80118ae:	43db      	mvns	r3, r3
 80118b0:	401a      	ands	r2, r3
 80118b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118b4:	601a      	str	r2, [r3, #0]
 80118b6:	e020      	b.n	80118fa <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80118b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d104      	bne.n	80118c8 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80118be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118c0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80118c2:	2301      	movs	r3, #1
 80118c4:	633b      	str	r3, [r7, #48]	; 0x30
 80118c6:	e018      	b.n	80118fa <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d003      	beq.n	80118d6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80118ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80118d4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80118d6:	683b      	ldr	r3, [r7, #0]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d003      	beq.n	80118e4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80118dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80118e2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80118e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118e6:	1d18      	adds	r0, r3, #4
 80118e8:	68ba      	ldr	r2, [r7, #8]
 80118ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118ec:	4313      	orrs	r3, r2
 80118ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80118f0:	4619      	mov	r1, r3
 80118f2:	f001 fbfd 	bl	80130f0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80118f6:	2300      	movs	r3, #0
 80118f8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80118fa:	f001 fa0f 	bl	8012d1c <xTaskResumeAll>
 80118fe:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8011900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011902:	2b00      	cmp	r3, #0
 8011904:	d031      	beq.n	801196a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8011906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011908:	2b00      	cmp	r3, #0
 801190a:	d107      	bne.n	801191c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 801190c:	4b19      	ldr	r3, [pc, #100]	; (8011974 <xEventGroupWaitBits+0x198>)
 801190e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011912:	601a      	str	r2, [r3, #0]
 8011914:	f3bf 8f4f 	dsb	sy
 8011918:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 801191c:	f001 fefc 	bl	8013718 <uxTaskResetEventItemValue>
 8011920:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8011922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011928:	2b00      	cmp	r3, #0
 801192a:	d11a      	bne.n	8011962 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 801192c:	f002 fbfa 	bl	8014124 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8011930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8011936:	683a      	ldr	r2, [r7, #0]
 8011938:	68b9      	ldr	r1, [r7, #8]
 801193a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801193c:	f000 f8b4 	bl	8011aa8 <prvTestWaitCondition>
 8011940:	4603      	mov	r3, r0
 8011942:	2b00      	cmp	r3, #0
 8011944:	d009      	beq.n	801195a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d006      	beq.n	801195a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801194c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801194e:	681a      	ldr	r2, [r3, #0]
 8011950:	68bb      	ldr	r3, [r7, #8]
 8011952:	43db      	mvns	r3, r3
 8011954:	401a      	ands	r2, r3
 8011956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011958:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 801195a:	2301      	movs	r3, #1
 801195c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 801195e:	f002 fc11 	bl	8014184 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8011962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011964:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011968:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 801196a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801196c:	4618      	mov	r0, r3
 801196e:	3740      	adds	r7, #64	; 0x40
 8011970:	46bd      	mov	sp, r7
 8011972:	bd80      	pop	{r7, pc}
 8011974:	e000ed04 	.word	0xe000ed04

08011978 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b08e      	sub	sp, #56	; 0x38
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
 8011980:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8011982:	2300      	movs	r3, #0
 8011984:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 801198a:	2300      	movs	r3, #0
 801198c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d10a      	bne.n	80119aa <xEventGroupSetBits+0x32>
	__asm volatile
 8011994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011998:	f383 8811 	msr	BASEPRI, r3
 801199c:	f3bf 8f6f 	isb	sy
 80119a0:	f3bf 8f4f 	dsb	sy
 80119a4:	613b      	str	r3, [r7, #16]
}
 80119a6:	bf00      	nop
 80119a8:	e7fe      	b.n	80119a8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80119aa:	683b      	ldr	r3, [r7, #0]
 80119ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d00a      	beq.n	80119ca <xEventGroupSetBits+0x52>
	__asm volatile
 80119b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119b8:	f383 8811 	msr	BASEPRI, r3
 80119bc:	f3bf 8f6f 	isb	sy
 80119c0:	f3bf 8f4f 	dsb	sy
 80119c4:	60fb      	str	r3, [r7, #12]
}
 80119c6:	bf00      	nop
 80119c8:	e7fe      	b.n	80119c8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80119ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119cc:	3304      	adds	r3, #4
 80119ce:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80119d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119d2:	3308      	adds	r3, #8
 80119d4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80119d6:	f001 f993 	bl	8012d00 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80119da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119dc:	68db      	ldr	r3, [r3, #12]
 80119de:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80119e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119e2:	681a      	ldr	r2, [r3, #0]
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	431a      	orrs	r2, r3
 80119e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119ea:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80119ec:	e03c      	b.n	8011a68 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80119ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119f0:	685b      	ldr	r3, [r3, #4]
 80119f2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80119f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80119fa:	2300      	movs	r3, #0
 80119fc:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80119fe:	69bb      	ldr	r3, [r7, #24]
 8011a00:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011a04:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8011a06:	69bb      	ldr	r3, [r7, #24]
 8011a08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011a0c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8011a0e:	697b      	ldr	r3, [r7, #20]
 8011a10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d108      	bne.n	8011a2a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8011a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a1a:	681a      	ldr	r2, [r3, #0]
 8011a1c:	69bb      	ldr	r3, [r7, #24]
 8011a1e:	4013      	ands	r3, r2
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d00b      	beq.n	8011a3c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8011a24:	2301      	movs	r3, #1
 8011a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011a28:	e008      	b.n	8011a3c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8011a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a2c:	681a      	ldr	r2, [r3, #0]
 8011a2e:	69bb      	ldr	r3, [r7, #24]
 8011a30:	4013      	ands	r3, r2
 8011a32:	69ba      	ldr	r2, [r7, #24]
 8011a34:	429a      	cmp	r2, r3
 8011a36:	d101      	bne.n	8011a3c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8011a38:	2301      	movs	r3, #1
 8011a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8011a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d010      	beq.n	8011a64 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8011a42:	697b      	ldr	r3, [r7, #20]
 8011a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d003      	beq.n	8011a54 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8011a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a4e:	69bb      	ldr	r3, [r7, #24]
 8011a50:	4313      	orrs	r3, r2
 8011a52:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8011a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011a5c:	4619      	mov	r1, r3
 8011a5e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011a60:	f001 fc12 	bl	8013288 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8011a64:	69fb      	ldr	r3, [r7, #28]
 8011a66:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8011a68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a6a:	6a3b      	ldr	r3, [r7, #32]
 8011a6c:	429a      	cmp	r2, r3
 8011a6e:	d1be      	bne.n	80119ee <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8011a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a72:	681a      	ldr	r2, [r3, #0]
 8011a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a76:	43db      	mvns	r3, r3
 8011a78:	401a      	ands	r2, r3
 8011a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a7c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8011a7e:	f001 f94d 	bl	8012d1c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8011a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a84:	681b      	ldr	r3, [r3, #0]
}
 8011a86:	4618      	mov	r0, r3
 8011a88:	3738      	adds	r7, #56	; 0x38
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	bd80      	pop	{r7, pc}

08011a8e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8011a8e:	b580      	push	{r7, lr}
 8011a90:	b082      	sub	sp, #8
 8011a92:	af00      	add	r7, sp, #0
 8011a94:	6078      	str	r0, [r7, #4]
 8011a96:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8011a98:	6839      	ldr	r1, [r7, #0]
 8011a9a:	6878      	ldr	r0, [r7, #4]
 8011a9c:	f7ff ff6c 	bl	8011978 <xEventGroupSetBits>
}
 8011aa0:	bf00      	nop
 8011aa2:	3708      	adds	r7, #8
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	bd80      	pop	{r7, pc}

08011aa8 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8011aa8:	b480      	push	{r7}
 8011aaa:	b087      	sub	sp, #28
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	60f8      	str	r0, [r7, #12]
 8011ab0:	60b9      	str	r1, [r7, #8]
 8011ab2:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d107      	bne.n	8011ace <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8011abe:	68fa      	ldr	r2, [r7, #12]
 8011ac0:	68bb      	ldr	r3, [r7, #8]
 8011ac2:	4013      	ands	r3, r2
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d00a      	beq.n	8011ade <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8011ac8:	2301      	movs	r3, #1
 8011aca:	617b      	str	r3, [r7, #20]
 8011acc:	e007      	b.n	8011ade <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8011ace:	68fa      	ldr	r2, [r7, #12]
 8011ad0:	68bb      	ldr	r3, [r7, #8]
 8011ad2:	4013      	ands	r3, r2
 8011ad4:	68ba      	ldr	r2, [r7, #8]
 8011ad6:	429a      	cmp	r2, r3
 8011ad8:	d101      	bne.n	8011ade <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8011ada:	2301      	movs	r3, #1
 8011adc:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8011ade:	697b      	ldr	r3, [r7, #20]
}
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	371c      	adds	r7, #28
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aea:	4770      	bx	lr

08011aec <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b086      	sub	sp, #24
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	60f8      	str	r0, [r7, #12]
 8011af4:	60b9      	str	r1, [r7, #8]
 8011af6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	68ba      	ldr	r2, [r7, #8]
 8011afc:	68f9      	ldr	r1, [r7, #12]
 8011afe:	4804      	ldr	r0, [pc, #16]	; (8011b10 <xEventGroupSetBitsFromISR+0x24>)
 8011b00:	f002 f9c4 	bl	8013e8c <xTimerPendFunctionCallFromISR>
 8011b04:	6178      	str	r0, [r7, #20]

		return xReturn;
 8011b06:	697b      	ldr	r3, [r7, #20]
	}
 8011b08:	4618      	mov	r0, r3
 8011b0a:	3718      	adds	r7, #24
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	bd80      	pop	{r7, pc}
 8011b10:	08011a8f 	.word	0x08011a8f

08011b14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011b14:	b480      	push	{r7}
 8011b16:	b083      	sub	sp, #12
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	f103 0208 	add.w	r2, r3, #8
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011b2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	f103 0208 	add.w	r2, r3, #8
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f103 0208 	add.w	r2, r3, #8
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	2200      	movs	r2, #0
 8011b46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011b48:	bf00      	nop
 8011b4a:	370c      	adds	r7, #12
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b52:	4770      	bx	lr

08011b54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011b54:	b480      	push	{r7}
 8011b56:	b083      	sub	sp, #12
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	2200      	movs	r2, #0
 8011b60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011b62:	bf00      	nop
 8011b64:	370c      	adds	r7, #12
 8011b66:	46bd      	mov	sp, r7
 8011b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6c:	4770      	bx	lr

08011b6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011b6e:	b480      	push	{r7}
 8011b70:	b085      	sub	sp, #20
 8011b72:	af00      	add	r7, sp, #0
 8011b74:	6078      	str	r0, [r7, #4]
 8011b76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	685b      	ldr	r3, [r3, #4]
 8011b7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011b7e:	683b      	ldr	r3, [r7, #0]
 8011b80:	68fa      	ldr	r2, [r7, #12]
 8011b82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	689a      	ldr	r2, [r3, #8]
 8011b88:	683b      	ldr	r3, [r7, #0]
 8011b8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	689b      	ldr	r3, [r3, #8]
 8011b90:	683a      	ldr	r2, [r7, #0]
 8011b92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	683a      	ldr	r2, [r7, #0]
 8011b98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011b9a:	683b      	ldr	r3, [r7, #0]
 8011b9c:	687a      	ldr	r2, [r7, #4]
 8011b9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	1c5a      	adds	r2, r3, #1
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	601a      	str	r2, [r3, #0]
}
 8011baa:	bf00      	nop
 8011bac:	3714      	adds	r7, #20
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb4:	4770      	bx	lr

08011bb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011bb6:	b480      	push	{r7}
 8011bb8:	b085      	sub	sp, #20
 8011bba:	af00      	add	r7, sp, #0
 8011bbc:	6078      	str	r0, [r7, #4]
 8011bbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011bc0:	683b      	ldr	r3, [r7, #0]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011bc6:	68bb      	ldr	r3, [r7, #8]
 8011bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011bcc:	d103      	bne.n	8011bd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	691b      	ldr	r3, [r3, #16]
 8011bd2:	60fb      	str	r3, [r7, #12]
 8011bd4:	e00c      	b.n	8011bf0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	3308      	adds	r3, #8
 8011bda:	60fb      	str	r3, [r7, #12]
 8011bdc:	e002      	b.n	8011be4 <vListInsert+0x2e>
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	685b      	ldr	r3, [r3, #4]
 8011be2:	60fb      	str	r3, [r7, #12]
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	685b      	ldr	r3, [r3, #4]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	68ba      	ldr	r2, [r7, #8]
 8011bec:	429a      	cmp	r2, r3
 8011bee:	d2f6      	bcs.n	8011bde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	685a      	ldr	r2, [r3, #4]
 8011bf4:	683b      	ldr	r3, [r7, #0]
 8011bf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	685b      	ldr	r3, [r3, #4]
 8011bfc:	683a      	ldr	r2, [r7, #0]
 8011bfe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011c00:	683b      	ldr	r3, [r7, #0]
 8011c02:	68fa      	ldr	r2, [r7, #12]
 8011c04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	683a      	ldr	r2, [r7, #0]
 8011c0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011c0c:	683b      	ldr	r3, [r7, #0]
 8011c0e:	687a      	ldr	r2, [r7, #4]
 8011c10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	1c5a      	adds	r2, r3, #1
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	601a      	str	r2, [r3, #0]
}
 8011c1c:	bf00      	nop
 8011c1e:	3714      	adds	r7, #20
 8011c20:	46bd      	mov	sp, r7
 8011c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c26:	4770      	bx	lr

08011c28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011c28:	b480      	push	{r7}
 8011c2a:	b085      	sub	sp, #20
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	691b      	ldr	r3, [r3, #16]
 8011c34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	685b      	ldr	r3, [r3, #4]
 8011c3a:	687a      	ldr	r2, [r7, #4]
 8011c3c:	6892      	ldr	r2, [r2, #8]
 8011c3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	689b      	ldr	r3, [r3, #8]
 8011c44:	687a      	ldr	r2, [r7, #4]
 8011c46:	6852      	ldr	r2, [r2, #4]
 8011c48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	685b      	ldr	r3, [r3, #4]
 8011c4e:	687a      	ldr	r2, [r7, #4]
 8011c50:	429a      	cmp	r2, r3
 8011c52:	d103      	bne.n	8011c5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	689a      	ldr	r2, [r3, #8]
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	2200      	movs	r2, #0
 8011c60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	1e5a      	subs	r2, r3, #1
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	681b      	ldr	r3, [r3, #0]
}
 8011c70:	4618      	mov	r0, r3
 8011c72:	3714      	adds	r7, #20
 8011c74:	46bd      	mov	sp, r7
 8011c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7a:	4770      	bx	lr

08011c7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b084      	sub	sp, #16
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
 8011c84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d10a      	bne.n	8011ca6 <xQueueGenericReset+0x2a>
	__asm volatile
 8011c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c94:	f383 8811 	msr	BASEPRI, r3
 8011c98:	f3bf 8f6f 	isb	sy
 8011c9c:	f3bf 8f4f 	dsb	sy
 8011ca0:	60bb      	str	r3, [r7, #8]
}
 8011ca2:	bf00      	nop
 8011ca4:	e7fe      	b.n	8011ca4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011ca6:	f002 fa3d 	bl	8014124 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	681a      	ldr	r2, [r3, #0]
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cb2:	68f9      	ldr	r1, [r7, #12]
 8011cb4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011cb6:	fb01 f303 	mul.w	r3, r1, r3
 8011cba:	441a      	add	r2, r3
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	681a      	ldr	r2, [r3, #0]
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	681a      	ldr	r2, [r3, #0]
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cd6:	3b01      	subs	r3, #1
 8011cd8:	68f9      	ldr	r1, [r7, #12]
 8011cda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011cdc:	fb01 f303 	mul.w	r3, r1, r3
 8011ce0:	441a      	add	r2, r3
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	22ff      	movs	r2, #255	; 0xff
 8011cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	22ff      	movs	r2, #255	; 0xff
 8011cf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011cf6:	683b      	ldr	r3, [r7, #0]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d114      	bne.n	8011d26 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	691b      	ldr	r3, [r3, #16]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d01a      	beq.n	8011d3a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	3310      	adds	r3, #16
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f001 fa59 	bl	80131c0 <xTaskRemoveFromEventList>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d012      	beq.n	8011d3a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011d14:	4b0c      	ldr	r3, [pc, #48]	; (8011d48 <xQueueGenericReset+0xcc>)
 8011d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d1a:	601a      	str	r2, [r3, #0]
 8011d1c:	f3bf 8f4f 	dsb	sy
 8011d20:	f3bf 8f6f 	isb	sy
 8011d24:	e009      	b.n	8011d3a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	3310      	adds	r3, #16
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f7ff fef2 	bl	8011b14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	3324      	adds	r3, #36	; 0x24
 8011d34:	4618      	mov	r0, r3
 8011d36:	f7ff feed 	bl	8011b14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011d3a:	f002 fa23 	bl	8014184 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011d3e:	2301      	movs	r3, #1
}
 8011d40:	4618      	mov	r0, r3
 8011d42:	3710      	adds	r7, #16
 8011d44:	46bd      	mov	sp, r7
 8011d46:	bd80      	pop	{r7, pc}
 8011d48:	e000ed04 	.word	0xe000ed04

08011d4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b08e      	sub	sp, #56	; 0x38
 8011d50:	af02      	add	r7, sp, #8
 8011d52:	60f8      	str	r0, [r7, #12]
 8011d54:	60b9      	str	r1, [r7, #8]
 8011d56:	607a      	str	r2, [r7, #4]
 8011d58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d10a      	bne.n	8011d76 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8011d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d64:	f383 8811 	msr	BASEPRI, r3
 8011d68:	f3bf 8f6f 	isb	sy
 8011d6c:	f3bf 8f4f 	dsb	sy
 8011d70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011d72:	bf00      	nop
 8011d74:	e7fe      	b.n	8011d74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d10a      	bne.n	8011d92 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8011d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d80:	f383 8811 	msr	BASEPRI, r3
 8011d84:	f3bf 8f6f 	isb	sy
 8011d88:	f3bf 8f4f 	dsb	sy
 8011d8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011d8e:	bf00      	nop
 8011d90:	e7fe      	b.n	8011d90 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d002      	beq.n	8011d9e <xQueueGenericCreateStatic+0x52>
 8011d98:	68bb      	ldr	r3, [r7, #8]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d001      	beq.n	8011da2 <xQueueGenericCreateStatic+0x56>
 8011d9e:	2301      	movs	r3, #1
 8011da0:	e000      	b.n	8011da4 <xQueueGenericCreateStatic+0x58>
 8011da2:	2300      	movs	r3, #0
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d10a      	bne.n	8011dbe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8011da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dac:	f383 8811 	msr	BASEPRI, r3
 8011db0:	f3bf 8f6f 	isb	sy
 8011db4:	f3bf 8f4f 	dsb	sy
 8011db8:	623b      	str	r3, [r7, #32]
}
 8011dba:	bf00      	nop
 8011dbc:	e7fe      	b.n	8011dbc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d102      	bne.n	8011dca <xQueueGenericCreateStatic+0x7e>
 8011dc4:	68bb      	ldr	r3, [r7, #8]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d101      	bne.n	8011dce <xQueueGenericCreateStatic+0x82>
 8011dca:	2301      	movs	r3, #1
 8011dcc:	e000      	b.n	8011dd0 <xQueueGenericCreateStatic+0x84>
 8011dce:	2300      	movs	r3, #0
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d10a      	bne.n	8011dea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8011dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dd8:	f383 8811 	msr	BASEPRI, r3
 8011ddc:	f3bf 8f6f 	isb	sy
 8011de0:	f3bf 8f4f 	dsb	sy
 8011de4:	61fb      	str	r3, [r7, #28]
}
 8011de6:	bf00      	nop
 8011de8:	e7fe      	b.n	8011de8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011dea:	2350      	movs	r3, #80	; 0x50
 8011dec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011dee:	697b      	ldr	r3, [r7, #20]
 8011df0:	2b50      	cmp	r3, #80	; 0x50
 8011df2:	d00a      	beq.n	8011e0a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8011df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011df8:	f383 8811 	msr	BASEPRI, r3
 8011dfc:	f3bf 8f6f 	isb	sy
 8011e00:	f3bf 8f4f 	dsb	sy
 8011e04:	61bb      	str	r3, [r7, #24]
}
 8011e06:	bf00      	nop
 8011e08:	e7fe      	b.n	8011e08 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011e0a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d00d      	beq.n	8011e32 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e18:	2201      	movs	r2, #1
 8011e1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011e1e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e24:	9300      	str	r3, [sp, #0]
 8011e26:	4613      	mov	r3, r2
 8011e28:	687a      	ldr	r2, [r7, #4]
 8011e2a:	68b9      	ldr	r1, [r7, #8]
 8011e2c:	68f8      	ldr	r0, [r7, #12]
 8011e2e:	f000 f805 	bl	8011e3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011e34:	4618      	mov	r0, r3
 8011e36:	3730      	adds	r7, #48	; 0x30
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	bd80      	pop	{r7, pc}

08011e3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b084      	sub	sp, #16
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	60f8      	str	r0, [r7, #12]
 8011e44:	60b9      	str	r1, [r7, #8]
 8011e46:	607a      	str	r2, [r7, #4]
 8011e48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011e4a:	68bb      	ldr	r3, [r7, #8]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d103      	bne.n	8011e58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011e50:	69bb      	ldr	r3, [r7, #24]
 8011e52:	69ba      	ldr	r2, [r7, #24]
 8011e54:	601a      	str	r2, [r3, #0]
 8011e56:	e002      	b.n	8011e5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011e58:	69bb      	ldr	r3, [r7, #24]
 8011e5a:	687a      	ldr	r2, [r7, #4]
 8011e5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011e5e:	69bb      	ldr	r3, [r7, #24]
 8011e60:	68fa      	ldr	r2, [r7, #12]
 8011e62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011e64:	69bb      	ldr	r3, [r7, #24]
 8011e66:	68ba      	ldr	r2, [r7, #8]
 8011e68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011e6a:	2101      	movs	r1, #1
 8011e6c:	69b8      	ldr	r0, [r7, #24]
 8011e6e:	f7ff ff05 	bl	8011c7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011e72:	69bb      	ldr	r3, [r7, #24]
 8011e74:	78fa      	ldrb	r2, [r7, #3]
 8011e76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011e7a:	bf00      	nop
 8011e7c:	3710      	adds	r7, #16
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	bd80      	pop	{r7, pc}
	...

08011e84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b08e      	sub	sp, #56	; 0x38
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	60f8      	str	r0, [r7, #12]
 8011e8c:	60b9      	str	r1, [r7, #8]
 8011e8e:	607a      	str	r2, [r7, #4]
 8011e90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011e92:	2300      	movs	r3, #0
 8011e94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d10a      	bne.n	8011eb6 <xQueueGenericSend+0x32>
	__asm volatile
 8011ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ea4:	f383 8811 	msr	BASEPRI, r3
 8011ea8:	f3bf 8f6f 	isb	sy
 8011eac:	f3bf 8f4f 	dsb	sy
 8011eb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011eb2:	bf00      	nop
 8011eb4:	e7fe      	b.n	8011eb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011eb6:	68bb      	ldr	r3, [r7, #8]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d103      	bne.n	8011ec4 <xQueueGenericSend+0x40>
 8011ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d101      	bne.n	8011ec8 <xQueueGenericSend+0x44>
 8011ec4:	2301      	movs	r3, #1
 8011ec6:	e000      	b.n	8011eca <xQueueGenericSend+0x46>
 8011ec8:	2300      	movs	r3, #0
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d10a      	bne.n	8011ee4 <xQueueGenericSend+0x60>
	__asm volatile
 8011ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ed2:	f383 8811 	msr	BASEPRI, r3
 8011ed6:	f3bf 8f6f 	isb	sy
 8011eda:	f3bf 8f4f 	dsb	sy
 8011ede:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011ee0:	bf00      	nop
 8011ee2:	e7fe      	b.n	8011ee2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	2b02      	cmp	r3, #2
 8011ee8:	d103      	bne.n	8011ef2 <xQueueGenericSend+0x6e>
 8011eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011eee:	2b01      	cmp	r3, #1
 8011ef0:	d101      	bne.n	8011ef6 <xQueueGenericSend+0x72>
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	e000      	b.n	8011ef8 <xQueueGenericSend+0x74>
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d10a      	bne.n	8011f12 <xQueueGenericSend+0x8e>
	__asm volatile
 8011efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f00:	f383 8811 	msr	BASEPRI, r3
 8011f04:	f3bf 8f6f 	isb	sy
 8011f08:	f3bf 8f4f 	dsb	sy
 8011f0c:	623b      	str	r3, [r7, #32]
}
 8011f0e:	bf00      	nop
 8011f10:	e7fe      	b.n	8011f10 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011f12:	f001 fb75 	bl	8013600 <xTaskGetSchedulerState>
 8011f16:	4603      	mov	r3, r0
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d102      	bne.n	8011f22 <xQueueGenericSend+0x9e>
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d101      	bne.n	8011f26 <xQueueGenericSend+0xa2>
 8011f22:	2301      	movs	r3, #1
 8011f24:	e000      	b.n	8011f28 <xQueueGenericSend+0xa4>
 8011f26:	2300      	movs	r3, #0
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d10a      	bne.n	8011f42 <xQueueGenericSend+0xbe>
	__asm volatile
 8011f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f30:	f383 8811 	msr	BASEPRI, r3
 8011f34:	f3bf 8f6f 	isb	sy
 8011f38:	f3bf 8f4f 	dsb	sy
 8011f3c:	61fb      	str	r3, [r7, #28]
}
 8011f3e:	bf00      	nop
 8011f40:	e7fe      	b.n	8011f40 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011f42:	f002 f8ef 	bl	8014124 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f4e:	429a      	cmp	r2, r3
 8011f50:	d302      	bcc.n	8011f58 <xQueueGenericSend+0xd4>
 8011f52:	683b      	ldr	r3, [r7, #0]
 8011f54:	2b02      	cmp	r3, #2
 8011f56:	d129      	bne.n	8011fac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011f58:	683a      	ldr	r2, [r7, #0]
 8011f5a:	68b9      	ldr	r1, [r7, #8]
 8011f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f5e:	f000 fa0b 	bl	8012378 <prvCopyDataToQueue>
 8011f62:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d010      	beq.n	8011f8e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f6e:	3324      	adds	r3, #36	; 0x24
 8011f70:	4618      	mov	r0, r3
 8011f72:	f001 f925 	bl	80131c0 <xTaskRemoveFromEventList>
 8011f76:	4603      	mov	r3, r0
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d013      	beq.n	8011fa4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011f7c:	4b3f      	ldr	r3, [pc, #252]	; (801207c <xQueueGenericSend+0x1f8>)
 8011f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f82:	601a      	str	r2, [r3, #0]
 8011f84:	f3bf 8f4f 	dsb	sy
 8011f88:	f3bf 8f6f 	isb	sy
 8011f8c:	e00a      	b.n	8011fa4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d007      	beq.n	8011fa4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011f94:	4b39      	ldr	r3, [pc, #228]	; (801207c <xQueueGenericSend+0x1f8>)
 8011f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f9a:	601a      	str	r2, [r3, #0]
 8011f9c:	f3bf 8f4f 	dsb	sy
 8011fa0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011fa4:	f002 f8ee 	bl	8014184 <vPortExitCritical>
				return pdPASS;
 8011fa8:	2301      	movs	r3, #1
 8011faa:	e063      	b.n	8012074 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d103      	bne.n	8011fba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011fb2:	f002 f8e7 	bl	8014184 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	e05c      	b.n	8012074 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d106      	bne.n	8011fce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011fc0:	f107 0314 	add.w	r3, r7, #20
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	f001 f9c1 	bl	801334c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011fca:	2301      	movs	r3, #1
 8011fcc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011fce:	f002 f8d9 	bl	8014184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011fd2:	f000 fe95 	bl	8012d00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011fd6:	f002 f8a5 	bl	8014124 <vPortEnterCritical>
 8011fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011fe0:	b25b      	sxtb	r3, r3
 8011fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011fe6:	d103      	bne.n	8011ff0 <xQueueGenericSend+0x16c>
 8011fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fea:	2200      	movs	r2, #0
 8011fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ff2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011ff6:	b25b      	sxtb	r3, r3
 8011ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ffc:	d103      	bne.n	8012006 <xQueueGenericSend+0x182>
 8011ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012000:	2200      	movs	r2, #0
 8012002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012006:	f002 f8bd 	bl	8014184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801200a:	1d3a      	adds	r2, r7, #4
 801200c:	f107 0314 	add.w	r3, r7, #20
 8012010:	4611      	mov	r1, r2
 8012012:	4618      	mov	r0, r3
 8012014:	f001 f9b0 	bl	8013378 <xTaskCheckForTimeOut>
 8012018:	4603      	mov	r3, r0
 801201a:	2b00      	cmp	r3, #0
 801201c:	d124      	bne.n	8012068 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801201e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012020:	f000 faa2 	bl	8012568 <prvIsQueueFull>
 8012024:	4603      	mov	r3, r0
 8012026:	2b00      	cmp	r3, #0
 8012028:	d018      	beq.n	801205c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801202a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801202c:	3310      	adds	r3, #16
 801202e:	687a      	ldr	r2, [r7, #4]
 8012030:	4611      	mov	r1, r2
 8012032:	4618      	mov	r0, r3
 8012034:	f001 f838 	bl	80130a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801203a:	f000 fa2d 	bl	8012498 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801203e:	f000 fe6d 	bl	8012d1c <xTaskResumeAll>
 8012042:	4603      	mov	r3, r0
 8012044:	2b00      	cmp	r3, #0
 8012046:	f47f af7c 	bne.w	8011f42 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801204a:	4b0c      	ldr	r3, [pc, #48]	; (801207c <xQueueGenericSend+0x1f8>)
 801204c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012050:	601a      	str	r2, [r3, #0]
 8012052:	f3bf 8f4f 	dsb	sy
 8012056:	f3bf 8f6f 	isb	sy
 801205a:	e772      	b.n	8011f42 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801205c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801205e:	f000 fa1b 	bl	8012498 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012062:	f000 fe5b 	bl	8012d1c <xTaskResumeAll>
 8012066:	e76c      	b.n	8011f42 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801206a:	f000 fa15 	bl	8012498 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801206e:	f000 fe55 	bl	8012d1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012072:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012074:	4618      	mov	r0, r3
 8012076:	3738      	adds	r7, #56	; 0x38
 8012078:	46bd      	mov	sp, r7
 801207a:	bd80      	pop	{r7, pc}
 801207c:	e000ed04 	.word	0xe000ed04

08012080 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b090      	sub	sp, #64	; 0x40
 8012084:	af00      	add	r7, sp, #0
 8012086:	60f8      	str	r0, [r7, #12]
 8012088:	60b9      	str	r1, [r7, #8]
 801208a:	607a      	str	r2, [r7, #4]
 801208c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8012092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012094:	2b00      	cmp	r3, #0
 8012096:	d10a      	bne.n	80120ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8012098:	f04f 0350 	mov.w	r3, #80	; 0x50
 801209c:	f383 8811 	msr	BASEPRI, r3
 80120a0:	f3bf 8f6f 	isb	sy
 80120a4:	f3bf 8f4f 	dsb	sy
 80120a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80120aa:	bf00      	nop
 80120ac:	e7fe      	b.n	80120ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80120ae:	68bb      	ldr	r3, [r7, #8]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d103      	bne.n	80120bc <xQueueGenericSendFromISR+0x3c>
 80120b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d101      	bne.n	80120c0 <xQueueGenericSendFromISR+0x40>
 80120bc:	2301      	movs	r3, #1
 80120be:	e000      	b.n	80120c2 <xQueueGenericSendFromISR+0x42>
 80120c0:	2300      	movs	r3, #0
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d10a      	bne.n	80120dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80120c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120ca:	f383 8811 	msr	BASEPRI, r3
 80120ce:	f3bf 8f6f 	isb	sy
 80120d2:	f3bf 8f4f 	dsb	sy
 80120d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80120d8:	bf00      	nop
 80120da:	e7fe      	b.n	80120da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80120dc:	683b      	ldr	r3, [r7, #0]
 80120de:	2b02      	cmp	r3, #2
 80120e0:	d103      	bne.n	80120ea <xQueueGenericSendFromISR+0x6a>
 80120e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120e6:	2b01      	cmp	r3, #1
 80120e8:	d101      	bne.n	80120ee <xQueueGenericSendFromISR+0x6e>
 80120ea:	2301      	movs	r3, #1
 80120ec:	e000      	b.n	80120f0 <xQueueGenericSendFromISR+0x70>
 80120ee:	2300      	movs	r3, #0
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d10a      	bne.n	801210a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80120f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120f8:	f383 8811 	msr	BASEPRI, r3
 80120fc:	f3bf 8f6f 	isb	sy
 8012100:	f3bf 8f4f 	dsb	sy
 8012104:	623b      	str	r3, [r7, #32]
}
 8012106:	bf00      	nop
 8012108:	e7fe      	b.n	8012108 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801210a:	f002 f8ed 	bl	80142e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801210e:	f3ef 8211 	mrs	r2, BASEPRI
 8012112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012116:	f383 8811 	msr	BASEPRI, r3
 801211a:	f3bf 8f6f 	isb	sy
 801211e:	f3bf 8f4f 	dsb	sy
 8012122:	61fa      	str	r2, [r7, #28]
 8012124:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012126:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012128:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801212a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801212c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801212e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012132:	429a      	cmp	r2, r3
 8012134:	d302      	bcc.n	801213c <xQueueGenericSendFromISR+0xbc>
 8012136:	683b      	ldr	r3, [r7, #0]
 8012138:	2b02      	cmp	r3, #2
 801213a:	d12f      	bne.n	801219c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801213c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801213e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801214a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801214c:	683a      	ldr	r2, [r7, #0]
 801214e:	68b9      	ldr	r1, [r7, #8]
 8012150:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012152:	f000 f911 	bl	8012378 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012156:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801215a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801215e:	d112      	bne.n	8012186 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012164:	2b00      	cmp	r3, #0
 8012166:	d016      	beq.n	8012196 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801216a:	3324      	adds	r3, #36	; 0x24
 801216c:	4618      	mov	r0, r3
 801216e:	f001 f827 	bl	80131c0 <xTaskRemoveFromEventList>
 8012172:	4603      	mov	r3, r0
 8012174:	2b00      	cmp	r3, #0
 8012176:	d00e      	beq.n	8012196 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d00b      	beq.n	8012196 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	2201      	movs	r2, #1
 8012182:	601a      	str	r2, [r3, #0]
 8012184:	e007      	b.n	8012196 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012186:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801218a:	3301      	adds	r3, #1
 801218c:	b2db      	uxtb	r3, r3
 801218e:	b25a      	sxtb	r2, r3
 8012190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012196:	2301      	movs	r3, #1
 8012198:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801219a:	e001      	b.n	80121a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801219c:	2300      	movs	r3, #0
 801219e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80121a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80121a4:	697b      	ldr	r3, [r7, #20]
 80121a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80121aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80121ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80121ae:	4618      	mov	r0, r3
 80121b0:	3740      	adds	r7, #64	; 0x40
 80121b2:	46bd      	mov	sp, r7
 80121b4:	bd80      	pop	{r7, pc}
	...

080121b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b08c      	sub	sp, #48	; 0x30
 80121bc:	af00      	add	r7, sp, #0
 80121be:	60f8      	str	r0, [r7, #12]
 80121c0:	60b9      	str	r1, [r7, #8]
 80121c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80121c4:	2300      	movs	r3, #0
 80121c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80121cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d10a      	bne.n	80121e8 <xQueueReceive+0x30>
	__asm volatile
 80121d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121d6:	f383 8811 	msr	BASEPRI, r3
 80121da:	f3bf 8f6f 	isb	sy
 80121de:	f3bf 8f4f 	dsb	sy
 80121e2:	623b      	str	r3, [r7, #32]
}
 80121e4:	bf00      	nop
 80121e6:	e7fe      	b.n	80121e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80121e8:	68bb      	ldr	r3, [r7, #8]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d103      	bne.n	80121f6 <xQueueReceive+0x3e>
 80121ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d101      	bne.n	80121fa <xQueueReceive+0x42>
 80121f6:	2301      	movs	r3, #1
 80121f8:	e000      	b.n	80121fc <xQueueReceive+0x44>
 80121fa:	2300      	movs	r3, #0
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d10a      	bne.n	8012216 <xQueueReceive+0x5e>
	__asm volatile
 8012200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012204:	f383 8811 	msr	BASEPRI, r3
 8012208:	f3bf 8f6f 	isb	sy
 801220c:	f3bf 8f4f 	dsb	sy
 8012210:	61fb      	str	r3, [r7, #28]
}
 8012212:	bf00      	nop
 8012214:	e7fe      	b.n	8012214 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012216:	f001 f9f3 	bl	8013600 <xTaskGetSchedulerState>
 801221a:	4603      	mov	r3, r0
 801221c:	2b00      	cmp	r3, #0
 801221e:	d102      	bne.n	8012226 <xQueueReceive+0x6e>
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d101      	bne.n	801222a <xQueueReceive+0x72>
 8012226:	2301      	movs	r3, #1
 8012228:	e000      	b.n	801222c <xQueueReceive+0x74>
 801222a:	2300      	movs	r3, #0
 801222c:	2b00      	cmp	r3, #0
 801222e:	d10a      	bne.n	8012246 <xQueueReceive+0x8e>
	__asm volatile
 8012230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012234:	f383 8811 	msr	BASEPRI, r3
 8012238:	f3bf 8f6f 	isb	sy
 801223c:	f3bf 8f4f 	dsb	sy
 8012240:	61bb      	str	r3, [r7, #24]
}
 8012242:	bf00      	nop
 8012244:	e7fe      	b.n	8012244 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012246:	f001 ff6d 	bl	8014124 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801224a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801224c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801224e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012252:	2b00      	cmp	r3, #0
 8012254:	d01f      	beq.n	8012296 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012256:	68b9      	ldr	r1, [r7, #8]
 8012258:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801225a:	f000 f8f7 	bl	801244c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012260:	1e5a      	subs	r2, r3, #1
 8012262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012264:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012268:	691b      	ldr	r3, [r3, #16]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d00f      	beq.n	801228e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801226e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012270:	3310      	adds	r3, #16
 8012272:	4618      	mov	r0, r3
 8012274:	f000 ffa4 	bl	80131c0 <xTaskRemoveFromEventList>
 8012278:	4603      	mov	r3, r0
 801227a:	2b00      	cmp	r3, #0
 801227c:	d007      	beq.n	801228e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801227e:	4b3d      	ldr	r3, [pc, #244]	; (8012374 <xQueueReceive+0x1bc>)
 8012280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012284:	601a      	str	r2, [r3, #0]
 8012286:	f3bf 8f4f 	dsb	sy
 801228a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801228e:	f001 ff79 	bl	8014184 <vPortExitCritical>
				return pdPASS;
 8012292:	2301      	movs	r3, #1
 8012294:	e069      	b.n	801236a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d103      	bne.n	80122a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801229c:	f001 ff72 	bl	8014184 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80122a0:	2300      	movs	r3, #0
 80122a2:	e062      	b.n	801236a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80122a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d106      	bne.n	80122b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80122aa:	f107 0310 	add.w	r3, r7, #16
 80122ae:	4618      	mov	r0, r3
 80122b0:	f001 f84c 	bl	801334c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80122b4:	2301      	movs	r3, #1
 80122b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80122b8:	f001 ff64 	bl	8014184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80122bc:	f000 fd20 	bl	8012d00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80122c0:	f001 ff30 	bl	8014124 <vPortEnterCritical>
 80122c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80122ca:	b25b      	sxtb	r3, r3
 80122cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80122d0:	d103      	bne.n	80122da <xQueueReceive+0x122>
 80122d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122d4:	2200      	movs	r2, #0
 80122d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80122da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80122e0:	b25b      	sxtb	r3, r3
 80122e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80122e6:	d103      	bne.n	80122f0 <xQueueReceive+0x138>
 80122e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122ea:	2200      	movs	r2, #0
 80122ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80122f0:	f001 ff48 	bl	8014184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80122f4:	1d3a      	adds	r2, r7, #4
 80122f6:	f107 0310 	add.w	r3, r7, #16
 80122fa:	4611      	mov	r1, r2
 80122fc:	4618      	mov	r0, r3
 80122fe:	f001 f83b 	bl	8013378 <xTaskCheckForTimeOut>
 8012302:	4603      	mov	r3, r0
 8012304:	2b00      	cmp	r3, #0
 8012306:	d123      	bne.n	8012350 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801230a:	f000 f917 	bl	801253c <prvIsQueueEmpty>
 801230e:	4603      	mov	r3, r0
 8012310:	2b00      	cmp	r3, #0
 8012312:	d017      	beq.n	8012344 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012316:	3324      	adds	r3, #36	; 0x24
 8012318:	687a      	ldr	r2, [r7, #4]
 801231a:	4611      	mov	r1, r2
 801231c:	4618      	mov	r0, r3
 801231e:	f000 fec3 	bl	80130a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012324:	f000 f8b8 	bl	8012498 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012328:	f000 fcf8 	bl	8012d1c <xTaskResumeAll>
 801232c:	4603      	mov	r3, r0
 801232e:	2b00      	cmp	r3, #0
 8012330:	d189      	bne.n	8012246 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8012332:	4b10      	ldr	r3, [pc, #64]	; (8012374 <xQueueReceive+0x1bc>)
 8012334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012338:	601a      	str	r2, [r3, #0]
 801233a:	f3bf 8f4f 	dsb	sy
 801233e:	f3bf 8f6f 	isb	sy
 8012342:	e780      	b.n	8012246 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012346:	f000 f8a7 	bl	8012498 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801234a:	f000 fce7 	bl	8012d1c <xTaskResumeAll>
 801234e:	e77a      	b.n	8012246 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012352:	f000 f8a1 	bl	8012498 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012356:	f000 fce1 	bl	8012d1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801235a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801235c:	f000 f8ee 	bl	801253c <prvIsQueueEmpty>
 8012360:	4603      	mov	r3, r0
 8012362:	2b00      	cmp	r3, #0
 8012364:	f43f af6f 	beq.w	8012246 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012368:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801236a:	4618      	mov	r0, r3
 801236c:	3730      	adds	r7, #48	; 0x30
 801236e:	46bd      	mov	sp, r7
 8012370:	bd80      	pop	{r7, pc}
 8012372:	bf00      	nop
 8012374:	e000ed04 	.word	0xe000ed04

08012378 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b086      	sub	sp, #24
 801237c:	af00      	add	r7, sp, #0
 801237e:	60f8      	str	r0, [r7, #12]
 8012380:	60b9      	str	r1, [r7, #8]
 8012382:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012384:	2300      	movs	r3, #0
 8012386:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801238c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012392:	2b00      	cmp	r3, #0
 8012394:	d10d      	bne.n	80123b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d14d      	bne.n	801243a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	689b      	ldr	r3, [r3, #8]
 80123a2:	4618      	mov	r0, r3
 80123a4:	f001 f94a 	bl	801363c <xTaskPriorityDisinherit>
 80123a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	2200      	movs	r2, #0
 80123ae:	609a      	str	r2, [r3, #8]
 80123b0:	e043      	b.n	801243a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d119      	bne.n	80123ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	6858      	ldr	r0, [r3, #4]
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123c0:	461a      	mov	r2, r3
 80123c2:	68b9      	ldr	r1, [r7, #8]
 80123c4:	f002 f9f4 	bl	80147b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	685a      	ldr	r2, [r3, #4]
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123d0:	441a      	add	r2, r3
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	685a      	ldr	r2, [r3, #4]
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	689b      	ldr	r3, [r3, #8]
 80123de:	429a      	cmp	r2, r3
 80123e0:	d32b      	bcc.n	801243a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	681a      	ldr	r2, [r3, #0]
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	605a      	str	r2, [r3, #4]
 80123ea:	e026      	b.n	801243a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	68d8      	ldr	r0, [r3, #12]
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123f4:	461a      	mov	r2, r3
 80123f6:	68b9      	ldr	r1, [r7, #8]
 80123f8:	f002 f9da 	bl	80147b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	68da      	ldr	r2, [r3, #12]
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012404:	425b      	negs	r3, r3
 8012406:	441a      	add	r2, r3
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	68da      	ldr	r2, [r3, #12]
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	429a      	cmp	r2, r3
 8012416:	d207      	bcs.n	8012428 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	689a      	ldr	r2, [r3, #8]
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012420:	425b      	negs	r3, r3
 8012422:	441a      	add	r2, r3
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	2b02      	cmp	r3, #2
 801242c:	d105      	bne.n	801243a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801242e:	693b      	ldr	r3, [r7, #16]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d002      	beq.n	801243a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012434:	693b      	ldr	r3, [r7, #16]
 8012436:	3b01      	subs	r3, #1
 8012438:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801243a:	693b      	ldr	r3, [r7, #16]
 801243c:	1c5a      	adds	r2, r3, #1
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012442:	697b      	ldr	r3, [r7, #20]
}
 8012444:	4618      	mov	r0, r3
 8012446:	3718      	adds	r7, #24
 8012448:	46bd      	mov	sp, r7
 801244a:	bd80      	pop	{r7, pc}

0801244c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b082      	sub	sp, #8
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
 8012454:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801245a:	2b00      	cmp	r3, #0
 801245c:	d018      	beq.n	8012490 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	68da      	ldr	r2, [r3, #12]
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012466:	441a      	add	r2, r3
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	68da      	ldr	r2, [r3, #12]
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	689b      	ldr	r3, [r3, #8]
 8012474:	429a      	cmp	r2, r3
 8012476:	d303      	bcc.n	8012480 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	681a      	ldr	r2, [r3, #0]
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	68d9      	ldr	r1, [r3, #12]
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012488:	461a      	mov	r2, r3
 801248a:	6838      	ldr	r0, [r7, #0]
 801248c:	f002 f990 	bl	80147b0 <memcpy>
	}
}
 8012490:	bf00      	nop
 8012492:	3708      	adds	r7, #8
 8012494:	46bd      	mov	sp, r7
 8012496:	bd80      	pop	{r7, pc}

08012498 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b084      	sub	sp, #16
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80124a0:	f001 fe40 	bl	8014124 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80124aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80124ac:	e011      	b.n	80124d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d012      	beq.n	80124dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	3324      	adds	r3, #36	; 0x24
 80124ba:	4618      	mov	r0, r3
 80124bc:	f000 fe80 	bl	80131c0 <xTaskRemoveFromEventList>
 80124c0:	4603      	mov	r3, r0
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d001      	beq.n	80124ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80124c6:	f000 ffb9 	bl	801343c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80124ca:	7bfb      	ldrb	r3, [r7, #15]
 80124cc:	3b01      	subs	r3, #1
 80124ce:	b2db      	uxtb	r3, r3
 80124d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80124d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	dce9      	bgt.n	80124ae <prvUnlockQueue+0x16>
 80124da:	e000      	b.n	80124de <prvUnlockQueue+0x46>
					break;
 80124dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	22ff      	movs	r2, #255	; 0xff
 80124e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80124e6:	f001 fe4d 	bl	8014184 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80124ea:	f001 fe1b 	bl	8014124 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80124f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80124f6:	e011      	b.n	801251c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	691b      	ldr	r3, [r3, #16]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d012      	beq.n	8012526 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	3310      	adds	r3, #16
 8012504:	4618      	mov	r0, r3
 8012506:	f000 fe5b 	bl	80131c0 <xTaskRemoveFromEventList>
 801250a:	4603      	mov	r3, r0
 801250c:	2b00      	cmp	r3, #0
 801250e:	d001      	beq.n	8012514 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012510:	f000 ff94 	bl	801343c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012514:	7bbb      	ldrb	r3, [r7, #14]
 8012516:	3b01      	subs	r3, #1
 8012518:	b2db      	uxtb	r3, r3
 801251a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801251c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012520:	2b00      	cmp	r3, #0
 8012522:	dce9      	bgt.n	80124f8 <prvUnlockQueue+0x60>
 8012524:	e000      	b.n	8012528 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012526:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	22ff      	movs	r2, #255	; 0xff
 801252c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012530:	f001 fe28 	bl	8014184 <vPortExitCritical>
}
 8012534:	bf00      	nop
 8012536:	3710      	adds	r7, #16
 8012538:	46bd      	mov	sp, r7
 801253a:	bd80      	pop	{r7, pc}

0801253c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801253c:	b580      	push	{r7, lr}
 801253e:	b084      	sub	sp, #16
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012544:	f001 fdee 	bl	8014124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801254c:	2b00      	cmp	r3, #0
 801254e:	d102      	bne.n	8012556 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012550:	2301      	movs	r3, #1
 8012552:	60fb      	str	r3, [r7, #12]
 8012554:	e001      	b.n	801255a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012556:	2300      	movs	r3, #0
 8012558:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801255a:	f001 fe13 	bl	8014184 <vPortExitCritical>

	return xReturn;
 801255e:	68fb      	ldr	r3, [r7, #12]
}
 8012560:	4618      	mov	r0, r3
 8012562:	3710      	adds	r7, #16
 8012564:	46bd      	mov	sp, r7
 8012566:	bd80      	pop	{r7, pc}

08012568 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b084      	sub	sp, #16
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012570:	f001 fdd8 	bl	8014124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801257c:	429a      	cmp	r2, r3
 801257e:	d102      	bne.n	8012586 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012580:	2301      	movs	r3, #1
 8012582:	60fb      	str	r3, [r7, #12]
 8012584:	e001      	b.n	801258a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012586:	2300      	movs	r3, #0
 8012588:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801258a:	f001 fdfb 	bl	8014184 <vPortExitCritical>

	return xReturn;
 801258e:	68fb      	ldr	r3, [r7, #12]
}
 8012590:	4618      	mov	r0, r3
 8012592:	3710      	adds	r7, #16
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}

08012598 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012598:	b480      	push	{r7}
 801259a:	b085      	sub	sp, #20
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
 80125a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80125a2:	2300      	movs	r3, #0
 80125a4:	60fb      	str	r3, [r7, #12]
 80125a6:	e014      	b.n	80125d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80125a8:	4a0f      	ldr	r2, [pc, #60]	; (80125e8 <vQueueAddToRegistry+0x50>)
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d10b      	bne.n	80125cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80125b4:	490c      	ldr	r1, [pc, #48]	; (80125e8 <vQueueAddToRegistry+0x50>)
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	683a      	ldr	r2, [r7, #0]
 80125ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80125be:	4a0a      	ldr	r2, [pc, #40]	; (80125e8 <vQueueAddToRegistry+0x50>)
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	00db      	lsls	r3, r3, #3
 80125c4:	4413      	add	r3, r2
 80125c6:	687a      	ldr	r2, [r7, #4]
 80125c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80125ca:	e006      	b.n	80125da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	3301      	adds	r3, #1
 80125d0:	60fb      	str	r3, [r7, #12]
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	2b07      	cmp	r3, #7
 80125d6:	d9e7      	bls.n	80125a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80125d8:	bf00      	nop
 80125da:	bf00      	nop
 80125dc:	3714      	adds	r7, #20
 80125de:	46bd      	mov	sp, r7
 80125e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e4:	4770      	bx	lr
 80125e6:	bf00      	nop
 80125e8:	240012f8 	.word	0x240012f8

080125ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b086      	sub	sp, #24
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	60f8      	str	r0, [r7, #12]
 80125f4:	60b9      	str	r1, [r7, #8]
 80125f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80125fc:	f001 fd92 	bl	8014124 <vPortEnterCritical>
 8012600:	697b      	ldr	r3, [r7, #20]
 8012602:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012606:	b25b      	sxtb	r3, r3
 8012608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801260c:	d103      	bne.n	8012616 <vQueueWaitForMessageRestricted+0x2a>
 801260e:	697b      	ldr	r3, [r7, #20]
 8012610:	2200      	movs	r2, #0
 8012612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012616:	697b      	ldr	r3, [r7, #20]
 8012618:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801261c:	b25b      	sxtb	r3, r3
 801261e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012622:	d103      	bne.n	801262c <vQueueWaitForMessageRestricted+0x40>
 8012624:	697b      	ldr	r3, [r7, #20]
 8012626:	2200      	movs	r2, #0
 8012628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801262c:	f001 fdaa 	bl	8014184 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012630:	697b      	ldr	r3, [r7, #20]
 8012632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012634:	2b00      	cmp	r3, #0
 8012636:	d106      	bne.n	8012646 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012638:	697b      	ldr	r3, [r7, #20]
 801263a:	3324      	adds	r3, #36	; 0x24
 801263c:	687a      	ldr	r2, [r7, #4]
 801263e:	68b9      	ldr	r1, [r7, #8]
 8012640:	4618      	mov	r0, r3
 8012642:	f000 fd91 	bl	8013168 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012646:	6978      	ldr	r0, [r7, #20]
 8012648:	f7ff ff26 	bl	8012498 <prvUnlockQueue>
	}
 801264c:	bf00      	nop
 801264e:	3718      	adds	r7, #24
 8012650:	46bd      	mov	sp, r7
 8012652:	bd80      	pop	{r7, pc}

08012654 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012654:	b580      	push	{r7, lr}
 8012656:	b08e      	sub	sp, #56	; 0x38
 8012658:	af04      	add	r7, sp, #16
 801265a:	60f8      	str	r0, [r7, #12]
 801265c:	60b9      	str	r1, [r7, #8]
 801265e:	607a      	str	r2, [r7, #4]
 8012660:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012664:	2b00      	cmp	r3, #0
 8012666:	d10a      	bne.n	801267e <xTaskCreateStatic+0x2a>
	__asm volatile
 8012668:	f04f 0350 	mov.w	r3, #80	; 0x50
 801266c:	f383 8811 	msr	BASEPRI, r3
 8012670:	f3bf 8f6f 	isb	sy
 8012674:	f3bf 8f4f 	dsb	sy
 8012678:	623b      	str	r3, [r7, #32]
}
 801267a:	bf00      	nop
 801267c:	e7fe      	b.n	801267c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801267e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012680:	2b00      	cmp	r3, #0
 8012682:	d10a      	bne.n	801269a <xTaskCreateStatic+0x46>
	__asm volatile
 8012684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012688:	f383 8811 	msr	BASEPRI, r3
 801268c:	f3bf 8f6f 	isb	sy
 8012690:	f3bf 8f4f 	dsb	sy
 8012694:	61fb      	str	r3, [r7, #28]
}
 8012696:	bf00      	nop
 8012698:	e7fe      	b.n	8012698 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801269a:	235c      	movs	r3, #92	; 0x5c
 801269c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801269e:	693b      	ldr	r3, [r7, #16]
 80126a0:	2b5c      	cmp	r3, #92	; 0x5c
 80126a2:	d00a      	beq.n	80126ba <xTaskCreateStatic+0x66>
	__asm volatile
 80126a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126a8:	f383 8811 	msr	BASEPRI, r3
 80126ac:	f3bf 8f6f 	isb	sy
 80126b0:	f3bf 8f4f 	dsb	sy
 80126b4:	61bb      	str	r3, [r7, #24]
}
 80126b6:	bf00      	nop
 80126b8:	e7fe      	b.n	80126b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80126ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80126bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d01e      	beq.n	8012700 <xTaskCreateStatic+0xac>
 80126c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d01b      	beq.n	8012700 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80126c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80126cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80126d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80126d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d4:	2202      	movs	r2, #2
 80126d6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80126da:	2300      	movs	r3, #0
 80126dc:	9303      	str	r3, [sp, #12]
 80126de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e0:	9302      	str	r3, [sp, #8]
 80126e2:	f107 0314 	add.w	r3, r7, #20
 80126e6:	9301      	str	r3, [sp, #4]
 80126e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ea:	9300      	str	r3, [sp, #0]
 80126ec:	683b      	ldr	r3, [r7, #0]
 80126ee:	687a      	ldr	r2, [r7, #4]
 80126f0:	68b9      	ldr	r1, [r7, #8]
 80126f2:	68f8      	ldr	r0, [r7, #12]
 80126f4:	f000 f850 	bl	8012798 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80126f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80126fa:	f000 f8dd 	bl	80128b8 <prvAddNewTaskToReadyList>
 80126fe:	e001      	b.n	8012704 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8012700:	2300      	movs	r3, #0
 8012702:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012704:	697b      	ldr	r3, [r7, #20]
	}
 8012706:	4618      	mov	r0, r3
 8012708:	3728      	adds	r7, #40	; 0x28
 801270a:	46bd      	mov	sp, r7
 801270c:	bd80      	pop	{r7, pc}

0801270e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801270e:	b580      	push	{r7, lr}
 8012710:	b08c      	sub	sp, #48	; 0x30
 8012712:	af04      	add	r7, sp, #16
 8012714:	60f8      	str	r0, [r7, #12]
 8012716:	60b9      	str	r1, [r7, #8]
 8012718:	603b      	str	r3, [r7, #0]
 801271a:	4613      	mov	r3, r2
 801271c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801271e:	88fb      	ldrh	r3, [r7, #6]
 8012720:	009b      	lsls	r3, r3, #2
 8012722:	4618      	mov	r0, r3
 8012724:	f001 fe20 	bl	8014368 <pvPortMalloc>
 8012728:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801272a:	697b      	ldr	r3, [r7, #20]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d00e      	beq.n	801274e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012730:	205c      	movs	r0, #92	; 0x5c
 8012732:	f001 fe19 	bl	8014368 <pvPortMalloc>
 8012736:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012738:	69fb      	ldr	r3, [r7, #28]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d003      	beq.n	8012746 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801273e:	69fb      	ldr	r3, [r7, #28]
 8012740:	697a      	ldr	r2, [r7, #20]
 8012742:	631a      	str	r2, [r3, #48]	; 0x30
 8012744:	e005      	b.n	8012752 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012746:	6978      	ldr	r0, [r7, #20]
 8012748:	f001 feda 	bl	8014500 <vPortFree>
 801274c:	e001      	b.n	8012752 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801274e:	2300      	movs	r3, #0
 8012750:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012752:	69fb      	ldr	r3, [r7, #28]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d017      	beq.n	8012788 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012758:	69fb      	ldr	r3, [r7, #28]
 801275a:	2200      	movs	r2, #0
 801275c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012760:	88fa      	ldrh	r2, [r7, #6]
 8012762:	2300      	movs	r3, #0
 8012764:	9303      	str	r3, [sp, #12]
 8012766:	69fb      	ldr	r3, [r7, #28]
 8012768:	9302      	str	r3, [sp, #8]
 801276a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801276c:	9301      	str	r3, [sp, #4]
 801276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012770:	9300      	str	r3, [sp, #0]
 8012772:	683b      	ldr	r3, [r7, #0]
 8012774:	68b9      	ldr	r1, [r7, #8]
 8012776:	68f8      	ldr	r0, [r7, #12]
 8012778:	f000 f80e 	bl	8012798 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801277c:	69f8      	ldr	r0, [r7, #28]
 801277e:	f000 f89b 	bl	80128b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012782:	2301      	movs	r3, #1
 8012784:	61bb      	str	r3, [r7, #24]
 8012786:	e002      	b.n	801278e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801278c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801278e:	69bb      	ldr	r3, [r7, #24]
	}
 8012790:	4618      	mov	r0, r3
 8012792:	3720      	adds	r7, #32
 8012794:	46bd      	mov	sp, r7
 8012796:	bd80      	pop	{r7, pc}

08012798 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b088      	sub	sp, #32
 801279c:	af00      	add	r7, sp, #0
 801279e:	60f8      	str	r0, [r7, #12]
 80127a0:	60b9      	str	r1, [r7, #8]
 80127a2:	607a      	str	r2, [r7, #4]
 80127a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80127a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	009b      	lsls	r3, r3, #2
 80127ae:	461a      	mov	r2, r3
 80127b0:	21a5      	movs	r1, #165	; 0xa5
 80127b2:	f002 f80b 	bl	80147cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80127b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80127ba:	6879      	ldr	r1, [r7, #4]
 80127bc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80127c0:	440b      	add	r3, r1
 80127c2:	009b      	lsls	r3, r3, #2
 80127c4:	4413      	add	r3, r2
 80127c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80127c8:	69bb      	ldr	r3, [r7, #24]
 80127ca:	f023 0307 	bic.w	r3, r3, #7
 80127ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80127d0:	69bb      	ldr	r3, [r7, #24]
 80127d2:	f003 0307 	and.w	r3, r3, #7
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d00a      	beq.n	80127f0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80127da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127de:	f383 8811 	msr	BASEPRI, r3
 80127e2:	f3bf 8f6f 	isb	sy
 80127e6:	f3bf 8f4f 	dsb	sy
 80127ea:	617b      	str	r3, [r7, #20]
}
 80127ec:	bf00      	nop
 80127ee:	e7fe      	b.n	80127ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80127f0:	68bb      	ldr	r3, [r7, #8]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d01f      	beq.n	8012836 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80127f6:	2300      	movs	r3, #0
 80127f8:	61fb      	str	r3, [r7, #28]
 80127fa:	e012      	b.n	8012822 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80127fc:	68ba      	ldr	r2, [r7, #8]
 80127fe:	69fb      	ldr	r3, [r7, #28]
 8012800:	4413      	add	r3, r2
 8012802:	7819      	ldrb	r1, [r3, #0]
 8012804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012806:	69fb      	ldr	r3, [r7, #28]
 8012808:	4413      	add	r3, r2
 801280a:	3334      	adds	r3, #52	; 0x34
 801280c:	460a      	mov	r2, r1
 801280e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012810:	68ba      	ldr	r2, [r7, #8]
 8012812:	69fb      	ldr	r3, [r7, #28]
 8012814:	4413      	add	r3, r2
 8012816:	781b      	ldrb	r3, [r3, #0]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d006      	beq.n	801282a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801281c:	69fb      	ldr	r3, [r7, #28]
 801281e:	3301      	adds	r3, #1
 8012820:	61fb      	str	r3, [r7, #28]
 8012822:	69fb      	ldr	r3, [r7, #28]
 8012824:	2b0f      	cmp	r3, #15
 8012826:	d9e9      	bls.n	80127fc <prvInitialiseNewTask+0x64>
 8012828:	e000      	b.n	801282c <prvInitialiseNewTask+0x94>
			{
				break;
 801282a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801282c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801282e:	2200      	movs	r2, #0
 8012830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012834:	e003      	b.n	801283e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012838:	2200      	movs	r2, #0
 801283a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801283e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012840:	2b37      	cmp	r3, #55	; 0x37
 8012842:	d901      	bls.n	8012848 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012844:	2337      	movs	r3, #55	; 0x37
 8012846:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801284a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801284c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012852:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012856:	2200      	movs	r2, #0
 8012858:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801285a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801285c:	3304      	adds	r3, #4
 801285e:	4618      	mov	r0, r3
 8012860:	f7ff f978 	bl	8011b54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012866:	3318      	adds	r3, #24
 8012868:	4618      	mov	r0, r3
 801286a:	f7ff f973 	bl	8011b54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801286e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012872:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012876:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801287a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801287c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801287e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012882:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012886:	2200      	movs	r2, #0
 8012888:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801288a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801288c:	2200      	movs	r2, #0
 801288e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012892:	683a      	ldr	r2, [r7, #0]
 8012894:	68f9      	ldr	r1, [r7, #12]
 8012896:	69b8      	ldr	r0, [r7, #24]
 8012898:	f001 fb18 	bl	8013ecc <pxPortInitialiseStack>
 801289c:	4602      	mov	r2, r0
 801289e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80128a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d002      	beq.n	80128ae <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80128a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80128ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80128ae:	bf00      	nop
 80128b0:	3720      	adds	r7, #32
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd80      	pop	{r7, pc}
	...

080128b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b082      	sub	sp, #8
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80128c0:	f001 fc30 	bl	8014124 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80128c4:	4b2d      	ldr	r3, [pc, #180]	; (801297c <prvAddNewTaskToReadyList+0xc4>)
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	3301      	adds	r3, #1
 80128ca:	4a2c      	ldr	r2, [pc, #176]	; (801297c <prvAddNewTaskToReadyList+0xc4>)
 80128cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80128ce:	4b2c      	ldr	r3, [pc, #176]	; (8012980 <prvAddNewTaskToReadyList+0xc8>)
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d109      	bne.n	80128ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80128d6:	4a2a      	ldr	r2, [pc, #168]	; (8012980 <prvAddNewTaskToReadyList+0xc8>)
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80128dc:	4b27      	ldr	r3, [pc, #156]	; (801297c <prvAddNewTaskToReadyList+0xc4>)
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	2b01      	cmp	r3, #1
 80128e2:	d110      	bne.n	8012906 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80128e4:	f000 fdce 	bl	8013484 <prvInitialiseTaskLists>
 80128e8:	e00d      	b.n	8012906 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80128ea:	4b26      	ldr	r3, [pc, #152]	; (8012984 <prvAddNewTaskToReadyList+0xcc>)
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d109      	bne.n	8012906 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80128f2:	4b23      	ldr	r3, [pc, #140]	; (8012980 <prvAddNewTaskToReadyList+0xc8>)
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128fc:	429a      	cmp	r2, r3
 80128fe:	d802      	bhi.n	8012906 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012900:	4a1f      	ldr	r2, [pc, #124]	; (8012980 <prvAddNewTaskToReadyList+0xc8>)
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012906:	4b20      	ldr	r3, [pc, #128]	; (8012988 <prvAddNewTaskToReadyList+0xd0>)
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	3301      	adds	r3, #1
 801290c:	4a1e      	ldr	r2, [pc, #120]	; (8012988 <prvAddNewTaskToReadyList+0xd0>)
 801290e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012910:	4b1d      	ldr	r3, [pc, #116]	; (8012988 <prvAddNewTaskToReadyList+0xd0>)
 8012912:	681a      	ldr	r2, [r3, #0]
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801291c:	4b1b      	ldr	r3, [pc, #108]	; (801298c <prvAddNewTaskToReadyList+0xd4>)
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	429a      	cmp	r2, r3
 8012922:	d903      	bls.n	801292c <prvAddNewTaskToReadyList+0x74>
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012928:	4a18      	ldr	r2, [pc, #96]	; (801298c <prvAddNewTaskToReadyList+0xd4>)
 801292a:	6013      	str	r3, [r2, #0]
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012930:	4613      	mov	r3, r2
 8012932:	009b      	lsls	r3, r3, #2
 8012934:	4413      	add	r3, r2
 8012936:	009b      	lsls	r3, r3, #2
 8012938:	4a15      	ldr	r2, [pc, #84]	; (8012990 <prvAddNewTaskToReadyList+0xd8>)
 801293a:	441a      	add	r2, r3
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	3304      	adds	r3, #4
 8012940:	4619      	mov	r1, r3
 8012942:	4610      	mov	r0, r2
 8012944:	f7ff f913 	bl	8011b6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012948:	f001 fc1c 	bl	8014184 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801294c:	4b0d      	ldr	r3, [pc, #52]	; (8012984 <prvAddNewTaskToReadyList+0xcc>)
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d00e      	beq.n	8012972 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012954:	4b0a      	ldr	r3, [pc, #40]	; (8012980 <prvAddNewTaskToReadyList+0xc8>)
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801295e:	429a      	cmp	r2, r3
 8012960:	d207      	bcs.n	8012972 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012962:	4b0c      	ldr	r3, [pc, #48]	; (8012994 <prvAddNewTaskToReadyList+0xdc>)
 8012964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012968:	601a      	str	r2, [r3, #0]
 801296a:	f3bf 8f4f 	dsb	sy
 801296e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012972:	bf00      	nop
 8012974:	3708      	adds	r7, #8
 8012976:	46bd      	mov	sp, r7
 8012978:	bd80      	pop	{r7, pc}
 801297a:	bf00      	nop
 801297c:	2400180c 	.word	0x2400180c
 8012980:	24001338 	.word	0x24001338
 8012984:	24001818 	.word	0x24001818
 8012988:	24001828 	.word	0x24001828
 801298c:	24001814 	.word	0x24001814
 8012990:	2400133c 	.word	0x2400133c
 8012994:	e000ed04 	.word	0xe000ed04

08012998 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012998:	b580      	push	{r7, lr}
 801299a:	b084      	sub	sp, #16
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80129a0:	2300      	movs	r3, #0
 80129a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d017      	beq.n	80129da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80129aa:	4b13      	ldr	r3, [pc, #76]	; (80129f8 <vTaskDelay+0x60>)
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d00a      	beq.n	80129c8 <vTaskDelay+0x30>
	__asm volatile
 80129b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129b6:	f383 8811 	msr	BASEPRI, r3
 80129ba:	f3bf 8f6f 	isb	sy
 80129be:	f3bf 8f4f 	dsb	sy
 80129c2:	60bb      	str	r3, [r7, #8]
}
 80129c4:	bf00      	nop
 80129c6:	e7fe      	b.n	80129c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80129c8:	f000 f99a 	bl	8012d00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80129cc:	2100      	movs	r1, #0
 80129ce:	6878      	ldr	r0, [r7, #4]
 80129d0:	f000 feba 	bl	8013748 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80129d4:	f000 f9a2 	bl	8012d1c <xTaskResumeAll>
 80129d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d107      	bne.n	80129f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80129e0:	4b06      	ldr	r3, [pc, #24]	; (80129fc <vTaskDelay+0x64>)
 80129e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129e6:	601a      	str	r2, [r3, #0]
 80129e8:	f3bf 8f4f 	dsb	sy
 80129ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80129f0:	bf00      	nop
 80129f2:	3710      	adds	r7, #16
 80129f4:	46bd      	mov	sp, r7
 80129f6:	bd80      	pop	{r7, pc}
 80129f8:	24001834 	.word	0x24001834
 80129fc:	e000ed04 	.word	0xe000ed04

08012a00 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b084      	sub	sp, #16
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8012a08:	f001 fb8c 	bl	8014124 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d102      	bne.n	8012a18 <vTaskSuspend+0x18>
 8012a12:	4b30      	ldr	r3, [pc, #192]	; (8012ad4 <vTaskSuspend+0xd4>)
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	e000      	b.n	8012a1a <vTaskSuspend+0x1a>
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	3304      	adds	r3, #4
 8012a20:	4618      	mov	r0, r3
 8012a22:	f7ff f901 	bl	8011c28 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d004      	beq.n	8012a38 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	3318      	adds	r3, #24
 8012a32:	4618      	mov	r0, r3
 8012a34:	f7ff f8f8 	bl	8011c28 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	3304      	adds	r3, #4
 8012a3c:	4619      	mov	r1, r3
 8012a3e:	4826      	ldr	r0, [pc, #152]	; (8012ad8 <vTaskSuspend+0xd8>)
 8012a40:	f7ff f895 	bl	8011b6e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012a4a:	b2db      	uxtb	r3, r3
 8012a4c:	2b01      	cmp	r3, #1
 8012a4e:	d103      	bne.n	8012a58 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	2200      	movs	r2, #0
 8012a54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8012a58:	f001 fb94 	bl	8014184 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8012a5c:	4b1f      	ldr	r3, [pc, #124]	; (8012adc <vTaskSuspend+0xdc>)
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d005      	beq.n	8012a70 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8012a64:	f001 fb5e 	bl	8014124 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8012a68:	f000 fdaa 	bl	80135c0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8012a6c:	f001 fb8a 	bl	8014184 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8012a70:	4b18      	ldr	r3, [pc, #96]	; (8012ad4 <vTaskSuspend+0xd4>)
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	68fa      	ldr	r2, [r7, #12]
 8012a76:	429a      	cmp	r2, r3
 8012a78:	d127      	bne.n	8012aca <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8012a7a:	4b18      	ldr	r3, [pc, #96]	; (8012adc <vTaskSuspend+0xdc>)
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d017      	beq.n	8012ab2 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8012a82:	4b17      	ldr	r3, [pc, #92]	; (8012ae0 <vTaskSuspend+0xe0>)
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d00a      	beq.n	8012aa0 <vTaskSuspend+0xa0>
	__asm volatile
 8012a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a8e:	f383 8811 	msr	BASEPRI, r3
 8012a92:	f3bf 8f6f 	isb	sy
 8012a96:	f3bf 8f4f 	dsb	sy
 8012a9a:	60bb      	str	r3, [r7, #8]
}
 8012a9c:	bf00      	nop
 8012a9e:	e7fe      	b.n	8012a9e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8012aa0:	4b10      	ldr	r3, [pc, #64]	; (8012ae4 <vTaskSuspend+0xe4>)
 8012aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012aa6:	601a      	str	r2, [r3, #0]
 8012aa8:	f3bf 8f4f 	dsb	sy
 8012aac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012ab0:	e00b      	b.n	8012aca <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8012ab2:	4b09      	ldr	r3, [pc, #36]	; (8012ad8 <vTaskSuspend+0xd8>)
 8012ab4:	681a      	ldr	r2, [r3, #0]
 8012ab6:	4b0c      	ldr	r3, [pc, #48]	; (8012ae8 <vTaskSuspend+0xe8>)
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	429a      	cmp	r2, r3
 8012abc:	d103      	bne.n	8012ac6 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8012abe:	4b05      	ldr	r3, [pc, #20]	; (8012ad4 <vTaskSuspend+0xd4>)
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	601a      	str	r2, [r3, #0]
	}
 8012ac4:	e001      	b.n	8012aca <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8012ac6:	f000 fa91 	bl	8012fec <vTaskSwitchContext>
	}
 8012aca:	bf00      	nop
 8012acc:	3710      	adds	r7, #16
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	bd80      	pop	{r7, pc}
 8012ad2:	bf00      	nop
 8012ad4:	24001338 	.word	0x24001338
 8012ad8:	240017f8 	.word	0x240017f8
 8012adc:	24001818 	.word	0x24001818
 8012ae0:	24001834 	.word	0x24001834
 8012ae4:	e000ed04 	.word	0xe000ed04
 8012ae8:	2400180c 	.word	0x2400180c

08012aec <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8012aec:	b480      	push	{r7}
 8012aee:	b087      	sub	sp, #28
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8012af4:	2300      	movs	r3, #0
 8012af6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d10a      	bne.n	8012b18 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8012b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b06:	f383 8811 	msr	BASEPRI, r3
 8012b0a:	f3bf 8f6f 	isb	sy
 8012b0e:	f3bf 8f4f 	dsb	sy
 8012b12:	60fb      	str	r3, [r7, #12]
}
 8012b14:	bf00      	nop
 8012b16:	e7fe      	b.n	8012b16 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012b18:	693b      	ldr	r3, [r7, #16]
 8012b1a:	695b      	ldr	r3, [r3, #20]
 8012b1c:	4a0a      	ldr	r2, [pc, #40]	; (8012b48 <prvTaskIsTaskSuspended+0x5c>)
 8012b1e:	4293      	cmp	r3, r2
 8012b20:	d10a      	bne.n	8012b38 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8012b22:	693b      	ldr	r3, [r7, #16]
 8012b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b26:	4a09      	ldr	r2, [pc, #36]	; (8012b4c <prvTaskIsTaskSuspended+0x60>)
 8012b28:	4293      	cmp	r3, r2
 8012b2a:	d005      	beq.n	8012b38 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8012b2c:	693b      	ldr	r3, [r7, #16]
 8012b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d101      	bne.n	8012b38 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8012b34:	2301      	movs	r3, #1
 8012b36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012b38:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	371c      	adds	r7, #28
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b44:	4770      	bx	lr
 8012b46:	bf00      	nop
 8012b48:	240017f8 	.word	0x240017f8
 8012b4c:	240017cc 	.word	0x240017cc

08012b50 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b08a      	sub	sp, #40	; 0x28
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8012b58:	2300      	movs	r3, #0
 8012b5a:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d10a      	bne.n	8012b7c <xTaskResumeFromISR+0x2c>
	__asm volatile
 8012b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b6a:	f383 8811 	msr	BASEPRI, r3
 8012b6e:	f3bf 8f6f 	isb	sy
 8012b72:	f3bf 8f4f 	dsb	sy
 8012b76:	61bb      	str	r3, [r7, #24]
}
 8012b78:	bf00      	nop
 8012b7a:	e7fe      	b.n	8012b7a <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012b7c:	f001 fbb4 	bl	80142e8 <vPortValidateInterruptPriority>
	__asm volatile
 8012b80:	f3ef 8211 	mrs	r2, BASEPRI
 8012b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b88:	f383 8811 	msr	BASEPRI, r3
 8012b8c:	f3bf 8f6f 	isb	sy
 8012b90:	f3bf 8f4f 	dsb	sy
 8012b94:	617a      	str	r2, [r7, #20]
 8012b96:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012b98:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012b9a:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8012b9c:	6a38      	ldr	r0, [r7, #32]
 8012b9e:	f7ff ffa5 	bl	8012aec <prvTaskIsTaskSuspended>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d030      	beq.n	8012c0a <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012ba8:	4b1d      	ldr	r3, [pc, #116]	; (8012c20 <xTaskResumeFromISR+0xd0>)
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d126      	bne.n	8012bfe <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012bb0:	6a3b      	ldr	r3, [r7, #32]
 8012bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bb4:	4b1b      	ldr	r3, [pc, #108]	; (8012c24 <xTaskResumeFromISR+0xd4>)
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bba:	429a      	cmp	r2, r3
 8012bbc:	d301      	bcc.n	8012bc2 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8012bbe:	2301      	movs	r3, #1
 8012bc0:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012bc2:	6a3b      	ldr	r3, [r7, #32]
 8012bc4:	3304      	adds	r3, #4
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f7ff f82e 	bl	8011c28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012bcc:	6a3b      	ldr	r3, [r7, #32]
 8012bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bd0:	4b15      	ldr	r3, [pc, #84]	; (8012c28 <xTaskResumeFromISR+0xd8>)
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	429a      	cmp	r2, r3
 8012bd6:	d903      	bls.n	8012be0 <xTaskResumeFromISR+0x90>
 8012bd8:	6a3b      	ldr	r3, [r7, #32]
 8012bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bdc:	4a12      	ldr	r2, [pc, #72]	; (8012c28 <xTaskResumeFromISR+0xd8>)
 8012bde:	6013      	str	r3, [r2, #0]
 8012be0:	6a3b      	ldr	r3, [r7, #32]
 8012be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012be4:	4613      	mov	r3, r2
 8012be6:	009b      	lsls	r3, r3, #2
 8012be8:	4413      	add	r3, r2
 8012bea:	009b      	lsls	r3, r3, #2
 8012bec:	4a0f      	ldr	r2, [pc, #60]	; (8012c2c <xTaskResumeFromISR+0xdc>)
 8012bee:	441a      	add	r2, r3
 8012bf0:	6a3b      	ldr	r3, [r7, #32]
 8012bf2:	3304      	adds	r3, #4
 8012bf4:	4619      	mov	r1, r3
 8012bf6:	4610      	mov	r0, r2
 8012bf8:	f7fe ffb9 	bl	8011b6e <vListInsertEnd>
 8012bfc:	e005      	b.n	8012c0a <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8012bfe:	6a3b      	ldr	r3, [r7, #32]
 8012c00:	3318      	adds	r3, #24
 8012c02:	4619      	mov	r1, r3
 8012c04:	480a      	ldr	r0, [pc, #40]	; (8012c30 <xTaskResumeFromISR+0xe0>)
 8012c06:	f7fe ffb2 	bl	8011b6e <vListInsertEnd>
 8012c0a:	69fb      	ldr	r3, [r7, #28]
 8012c0c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	f383 8811 	msr	BASEPRI, r3
}
 8012c14:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8012c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8012c18:	4618      	mov	r0, r3
 8012c1a:	3728      	adds	r7, #40	; 0x28
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	bd80      	pop	{r7, pc}
 8012c20:	24001834 	.word	0x24001834
 8012c24:	24001338 	.word	0x24001338
 8012c28:	24001814 	.word	0x24001814
 8012c2c:	2400133c 	.word	0x2400133c
 8012c30:	240017cc 	.word	0x240017cc

08012c34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012c34:	b580      	push	{r7, lr}
 8012c36:	b08a      	sub	sp, #40	; 0x28
 8012c38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012c3e:	2300      	movs	r3, #0
 8012c40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012c42:	463a      	mov	r2, r7
 8012c44:	1d39      	adds	r1, r7, #4
 8012c46:	f107 0308 	add.w	r3, r7, #8
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	f7fe fd40 	bl	80116d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012c50:	6839      	ldr	r1, [r7, #0]
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	68ba      	ldr	r2, [r7, #8]
 8012c56:	9202      	str	r2, [sp, #8]
 8012c58:	9301      	str	r3, [sp, #4]
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	9300      	str	r3, [sp, #0]
 8012c5e:	2300      	movs	r3, #0
 8012c60:	460a      	mov	r2, r1
 8012c62:	4921      	ldr	r1, [pc, #132]	; (8012ce8 <vTaskStartScheduler+0xb4>)
 8012c64:	4821      	ldr	r0, [pc, #132]	; (8012cec <vTaskStartScheduler+0xb8>)
 8012c66:	f7ff fcf5 	bl	8012654 <xTaskCreateStatic>
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	4a20      	ldr	r2, [pc, #128]	; (8012cf0 <vTaskStartScheduler+0xbc>)
 8012c6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012c70:	4b1f      	ldr	r3, [pc, #124]	; (8012cf0 <vTaskStartScheduler+0xbc>)
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d002      	beq.n	8012c7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012c78:	2301      	movs	r3, #1
 8012c7a:	617b      	str	r3, [r7, #20]
 8012c7c:	e001      	b.n	8012c82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012c7e:	2300      	movs	r3, #0
 8012c80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012c82:	697b      	ldr	r3, [r7, #20]
 8012c84:	2b01      	cmp	r3, #1
 8012c86:	d102      	bne.n	8012c8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012c88:	f000 fdb2 	bl	80137f0 <xTimerCreateTimerTask>
 8012c8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012c8e:	697b      	ldr	r3, [r7, #20]
 8012c90:	2b01      	cmp	r3, #1
 8012c92:	d116      	bne.n	8012cc2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8012c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c98:	f383 8811 	msr	BASEPRI, r3
 8012c9c:	f3bf 8f6f 	isb	sy
 8012ca0:	f3bf 8f4f 	dsb	sy
 8012ca4:	613b      	str	r3, [r7, #16]
}
 8012ca6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012ca8:	4b12      	ldr	r3, [pc, #72]	; (8012cf4 <vTaskStartScheduler+0xc0>)
 8012caa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012cae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012cb0:	4b11      	ldr	r3, [pc, #68]	; (8012cf8 <vTaskStartScheduler+0xc4>)
 8012cb2:	2201      	movs	r2, #1
 8012cb4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012cb6:	4b11      	ldr	r3, [pc, #68]	; (8012cfc <vTaskStartScheduler+0xc8>)
 8012cb8:	2200      	movs	r2, #0
 8012cba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012cbc:	f001 f990 	bl	8013fe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012cc0:	e00e      	b.n	8012ce0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012cc2:	697b      	ldr	r3, [r7, #20]
 8012cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012cc8:	d10a      	bne.n	8012ce0 <vTaskStartScheduler+0xac>
	__asm volatile
 8012cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cce:	f383 8811 	msr	BASEPRI, r3
 8012cd2:	f3bf 8f6f 	isb	sy
 8012cd6:	f3bf 8f4f 	dsb	sy
 8012cda:	60fb      	str	r3, [r7, #12]
}
 8012cdc:	bf00      	nop
 8012cde:	e7fe      	b.n	8012cde <vTaskStartScheduler+0xaa>
}
 8012ce0:	bf00      	nop
 8012ce2:	3718      	adds	r7, #24
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	bd80      	pop	{r7, pc}
 8012ce8:	0801543c 	.word	0x0801543c
 8012cec:	08013455 	.word	0x08013455
 8012cf0:	24001830 	.word	0x24001830
 8012cf4:	2400182c 	.word	0x2400182c
 8012cf8:	24001818 	.word	0x24001818
 8012cfc:	24001810 	.word	0x24001810

08012d00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012d00:	b480      	push	{r7}
 8012d02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012d04:	4b04      	ldr	r3, [pc, #16]	; (8012d18 <vTaskSuspendAll+0x18>)
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	3301      	adds	r3, #1
 8012d0a:	4a03      	ldr	r2, [pc, #12]	; (8012d18 <vTaskSuspendAll+0x18>)
 8012d0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012d0e:	bf00      	nop
 8012d10:	46bd      	mov	sp, r7
 8012d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d16:	4770      	bx	lr
 8012d18:	24001834 	.word	0x24001834

08012d1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b084      	sub	sp, #16
 8012d20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012d22:	2300      	movs	r3, #0
 8012d24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012d26:	2300      	movs	r3, #0
 8012d28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012d2a:	4b42      	ldr	r3, [pc, #264]	; (8012e34 <xTaskResumeAll+0x118>)
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d10a      	bne.n	8012d48 <xTaskResumeAll+0x2c>
	__asm volatile
 8012d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d36:	f383 8811 	msr	BASEPRI, r3
 8012d3a:	f3bf 8f6f 	isb	sy
 8012d3e:	f3bf 8f4f 	dsb	sy
 8012d42:	603b      	str	r3, [r7, #0]
}
 8012d44:	bf00      	nop
 8012d46:	e7fe      	b.n	8012d46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012d48:	f001 f9ec 	bl	8014124 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012d4c:	4b39      	ldr	r3, [pc, #228]	; (8012e34 <xTaskResumeAll+0x118>)
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	3b01      	subs	r3, #1
 8012d52:	4a38      	ldr	r2, [pc, #224]	; (8012e34 <xTaskResumeAll+0x118>)
 8012d54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012d56:	4b37      	ldr	r3, [pc, #220]	; (8012e34 <xTaskResumeAll+0x118>)
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d162      	bne.n	8012e24 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012d5e:	4b36      	ldr	r3, [pc, #216]	; (8012e38 <xTaskResumeAll+0x11c>)
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d05e      	beq.n	8012e24 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012d66:	e02f      	b.n	8012dc8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d68:	4b34      	ldr	r3, [pc, #208]	; (8012e3c <xTaskResumeAll+0x120>)
 8012d6a:	68db      	ldr	r3, [r3, #12]
 8012d6c:	68db      	ldr	r3, [r3, #12]
 8012d6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	3318      	adds	r3, #24
 8012d74:	4618      	mov	r0, r3
 8012d76:	f7fe ff57 	bl	8011c28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	3304      	adds	r3, #4
 8012d7e:	4618      	mov	r0, r3
 8012d80:	f7fe ff52 	bl	8011c28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d88:	4b2d      	ldr	r3, [pc, #180]	; (8012e40 <xTaskResumeAll+0x124>)
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	429a      	cmp	r2, r3
 8012d8e:	d903      	bls.n	8012d98 <xTaskResumeAll+0x7c>
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d94:	4a2a      	ldr	r2, [pc, #168]	; (8012e40 <xTaskResumeAll+0x124>)
 8012d96:	6013      	str	r3, [r2, #0]
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d9c:	4613      	mov	r3, r2
 8012d9e:	009b      	lsls	r3, r3, #2
 8012da0:	4413      	add	r3, r2
 8012da2:	009b      	lsls	r3, r3, #2
 8012da4:	4a27      	ldr	r2, [pc, #156]	; (8012e44 <xTaskResumeAll+0x128>)
 8012da6:	441a      	add	r2, r3
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	3304      	adds	r3, #4
 8012dac:	4619      	mov	r1, r3
 8012dae:	4610      	mov	r0, r2
 8012db0:	f7fe fedd 	bl	8011b6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012db8:	4b23      	ldr	r3, [pc, #140]	; (8012e48 <xTaskResumeAll+0x12c>)
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dbe:	429a      	cmp	r2, r3
 8012dc0:	d302      	bcc.n	8012dc8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8012dc2:	4b22      	ldr	r3, [pc, #136]	; (8012e4c <xTaskResumeAll+0x130>)
 8012dc4:	2201      	movs	r2, #1
 8012dc6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012dc8:	4b1c      	ldr	r3, [pc, #112]	; (8012e3c <xTaskResumeAll+0x120>)
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d1cb      	bne.n	8012d68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d001      	beq.n	8012dda <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012dd6:	f000 fbf3 	bl	80135c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012dda:	4b1d      	ldr	r3, [pc, #116]	; (8012e50 <xTaskResumeAll+0x134>)
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d010      	beq.n	8012e08 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012de6:	f000 f847 	bl	8012e78 <xTaskIncrementTick>
 8012dea:	4603      	mov	r3, r0
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d002      	beq.n	8012df6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8012df0:	4b16      	ldr	r3, [pc, #88]	; (8012e4c <xTaskResumeAll+0x130>)
 8012df2:	2201      	movs	r2, #1
 8012df4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	3b01      	subs	r3, #1
 8012dfa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d1f1      	bne.n	8012de6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8012e02:	4b13      	ldr	r3, [pc, #76]	; (8012e50 <xTaskResumeAll+0x134>)
 8012e04:	2200      	movs	r2, #0
 8012e06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012e08:	4b10      	ldr	r3, [pc, #64]	; (8012e4c <xTaskResumeAll+0x130>)
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d009      	beq.n	8012e24 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012e10:	2301      	movs	r3, #1
 8012e12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012e14:	4b0f      	ldr	r3, [pc, #60]	; (8012e54 <xTaskResumeAll+0x138>)
 8012e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e1a:	601a      	str	r2, [r3, #0]
 8012e1c:	f3bf 8f4f 	dsb	sy
 8012e20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012e24:	f001 f9ae 	bl	8014184 <vPortExitCritical>

	return xAlreadyYielded;
 8012e28:	68bb      	ldr	r3, [r7, #8]
}
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	3710      	adds	r7, #16
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	bd80      	pop	{r7, pc}
 8012e32:	bf00      	nop
 8012e34:	24001834 	.word	0x24001834
 8012e38:	2400180c 	.word	0x2400180c
 8012e3c:	240017cc 	.word	0x240017cc
 8012e40:	24001814 	.word	0x24001814
 8012e44:	2400133c 	.word	0x2400133c
 8012e48:	24001338 	.word	0x24001338
 8012e4c:	24001820 	.word	0x24001820
 8012e50:	2400181c 	.word	0x2400181c
 8012e54:	e000ed04 	.word	0xe000ed04

08012e58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012e58:	b480      	push	{r7}
 8012e5a:	b083      	sub	sp, #12
 8012e5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012e5e:	4b05      	ldr	r3, [pc, #20]	; (8012e74 <xTaskGetTickCount+0x1c>)
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012e64:	687b      	ldr	r3, [r7, #4]
}
 8012e66:	4618      	mov	r0, r3
 8012e68:	370c      	adds	r7, #12
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e70:	4770      	bx	lr
 8012e72:	bf00      	nop
 8012e74:	24001810 	.word	0x24001810

08012e78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	b086      	sub	sp, #24
 8012e7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012e7e:	2300      	movs	r3, #0
 8012e80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012e82:	4b4f      	ldr	r3, [pc, #316]	; (8012fc0 <xTaskIncrementTick+0x148>)
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	f040 808f 	bne.w	8012faa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012e8c:	4b4d      	ldr	r3, [pc, #308]	; (8012fc4 <xTaskIncrementTick+0x14c>)
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	3301      	adds	r3, #1
 8012e92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012e94:	4a4b      	ldr	r2, [pc, #300]	; (8012fc4 <xTaskIncrementTick+0x14c>)
 8012e96:	693b      	ldr	r3, [r7, #16]
 8012e98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012e9a:	693b      	ldr	r3, [r7, #16]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d120      	bne.n	8012ee2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012ea0:	4b49      	ldr	r3, [pc, #292]	; (8012fc8 <xTaskIncrementTick+0x150>)
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d00a      	beq.n	8012ec0 <xTaskIncrementTick+0x48>
	__asm volatile
 8012eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eae:	f383 8811 	msr	BASEPRI, r3
 8012eb2:	f3bf 8f6f 	isb	sy
 8012eb6:	f3bf 8f4f 	dsb	sy
 8012eba:	603b      	str	r3, [r7, #0]
}
 8012ebc:	bf00      	nop
 8012ebe:	e7fe      	b.n	8012ebe <xTaskIncrementTick+0x46>
 8012ec0:	4b41      	ldr	r3, [pc, #260]	; (8012fc8 <xTaskIncrementTick+0x150>)
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	60fb      	str	r3, [r7, #12]
 8012ec6:	4b41      	ldr	r3, [pc, #260]	; (8012fcc <xTaskIncrementTick+0x154>)
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	4a3f      	ldr	r2, [pc, #252]	; (8012fc8 <xTaskIncrementTick+0x150>)
 8012ecc:	6013      	str	r3, [r2, #0]
 8012ece:	4a3f      	ldr	r2, [pc, #252]	; (8012fcc <xTaskIncrementTick+0x154>)
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	6013      	str	r3, [r2, #0]
 8012ed4:	4b3e      	ldr	r3, [pc, #248]	; (8012fd0 <xTaskIncrementTick+0x158>)
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	3301      	adds	r3, #1
 8012eda:	4a3d      	ldr	r2, [pc, #244]	; (8012fd0 <xTaskIncrementTick+0x158>)
 8012edc:	6013      	str	r3, [r2, #0]
 8012ede:	f000 fb6f 	bl	80135c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012ee2:	4b3c      	ldr	r3, [pc, #240]	; (8012fd4 <xTaskIncrementTick+0x15c>)
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	693a      	ldr	r2, [r7, #16]
 8012ee8:	429a      	cmp	r2, r3
 8012eea:	d349      	bcc.n	8012f80 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012eec:	4b36      	ldr	r3, [pc, #216]	; (8012fc8 <xTaskIncrementTick+0x150>)
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d104      	bne.n	8012f00 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012ef6:	4b37      	ldr	r3, [pc, #220]	; (8012fd4 <xTaskIncrementTick+0x15c>)
 8012ef8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012efc:	601a      	str	r2, [r3, #0]
					break;
 8012efe:	e03f      	b.n	8012f80 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f00:	4b31      	ldr	r3, [pc, #196]	; (8012fc8 <xTaskIncrementTick+0x150>)
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	68db      	ldr	r3, [r3, #12]
 8012f06:	68db      	ldr	r3, [r3, #12]
 8012f08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012f0a:	68bb      	ldr	r3, [r7, #8]
 8012f0c:	685b      	ldr	r3, [r3, #4]
 8012f0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012f10:	693a      	ldr	r2, [r7, #16]
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	429a      	cmp	r2, r3
 8012f16:	d203      	bcs.n	8012f20 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012f18:	4a2e      	ldr	r2, [pc, #184]	; (8012fd4 <xTaskIncrementTick+0x15c>)
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012f1e:	e02f      	b.n	8012f80 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012f20:	68bb      	ldr	r3, [r7, #8]
 8012f22:	3304      	adds	r3, #4
 8012f24:	4618      	mov	r0, r3
 8012f26:	f7fe fe7f 	bl	8011c28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012f2a:	68bb      	ldr	r3, [r7, #8]
 8012f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d004      	beq.n	8012f3c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012f32:	68bb      	ldr	r3, [r7, #8]
 8012f34:	3318      	adds	r3, #24
 8012f36:	4618      	mov	r0, r3
 8012f38:	f7fe fe76 	bl	8011c28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012f3c:	68bb      	ldr	r3, [r7, #8]
 8012f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f40:	4b25      	ldr	r3, [pc, #148]	; (8012fd8 <xTaskIncrementTick+0x160>)
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	429a      	cmp	r2, r3
 8012f46:	d903      	bls.n	8012f50 <xTaskIncrementTick+0xd8>
 8012f48:	68bb      	ldr	r3, [r7, #8]
 8012f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f4c:	4a22      	ldr	r2, [pc, #136]	; (8012fd8 <xTaskIncrementTick+0x160>)
 8012f4e:	6013      	str	r3, [r2, #0]
 8012f50:	68bb      	ldr	r3, [r7, #8]
 8012f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f54:	4613      	mov	r3, r2
 8012f56:	009b      	lsls	r3, r3, #2
 8012f58:	4413      	add	r3, r2
 8012f5a:	009b      	lsls	r3, r3, #2
 8012f5c:	4a1f      	ldr	r2, [pc, #124]	; (8012fdc <xTaskIncrementTick+0x164>)
 8012f5e:	441a      	add	r2, r3
 8012f60:	68bb      	ldr	r3, [r7, #8]
 8012f62:	3304      	adds	r3, #4
 8012f64:	4619      	mov	r1, r3
 8012f66:	4610      	mov	r0, r2
 8012f68:	f7fe fe01 	bl	8011b6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012f6c:	68bb      	ldr	r3, [r7, #8]
 8012f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f70:	4b1b      	ldr	r3, [pc, #108]	; (8012fe0 <xTaskIncrementTick+0x168>)
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f76:	429a      	cmp	r2, r3
 8012f78:	d3b8      	bcc.n	8012eec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8012f7a:	2301      	movs	r3, #1
 8012f7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012f7e:	e7b5      	b.n	8012eec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012f80:	4b17      	ldr	r3, [pc, #92]	; (8012fe0 <xTaskIncrementTick+0x168>)
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f86:	4915      	ldr	r1, [pc, #84]	; (8012fdc <xTaskIncrementTick+0x164>)
 8012f88:	4613      	mov	r3, r2
 8012f8a:	009b      	lsls	r3, r3, #2
 8012f8c:	4413      	add	r3, r2
 8012f8e:	009b      	lsls	r3, r3, #2
 8012f90:	440b      	add	r3, r1
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	2b01      	cmp	r3, #1
 8012f96:	d901      	bls.n	8012f9c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8012f98:	2301      	movs	r3, #1
 8012f9a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012f9c:	4b11      	ldr	r3, [pc, #68]	; (8012fe4 <xTaskIncrementTick+0x16c>)
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d007      	beq.n	8012fb4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8012fa4:	2301      	movs	r3, #1
 8012fa6:	617b      	str	r3, [r7, #20]
 8012fa8:	e004      	b.n	8012fb4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012faa:	4b0f      	ldr	r3, [pc, #60]	; (8012fe8 <xTaskIncrementTick+0x170>)
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	3301      	adds	r3, #1
 8012fb0:	4a0d      	ldr	r2, [pc, #52]	; (8012fe8 <xTaskIncrementTick+0x170>)
 8012fb2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012fb4:	697b      	ldr	r3, [r7, #20]
}
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	3718      	adds	r7, #24
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	bd80      	pop	{r7, pc}
 8012fbe:	bf00      	nop
 8012fc0:	24001834 	.word	0x24001834
 8012fc4:	24001810 	.word	0x24001810
 8012fc8:	240017c4 	.word	0x240017c4
 8012fcc:	240017c8 	.word	0x240017c8
 8012fd0:	24001824 	.word	0x24001824
 8012fd4:	2400182c 	.word	0x2400182c
 8012fd8:	24001814 	.word	0x24001814
 8012fdc:	2400133c 	.word	0x2400133c
 8012fe0:	24001338 	.word	0x24001338
 8012fe4:	24001820 	.word	0x24001820
 8012fe8:	2400181c 	.word	0x2400181c

08012fec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012fec:	b480      	push	{r7}
 8012fee:	b085      	sub	sp, #20
 8012ff0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012ff2:	4b28      	ldr	r3, [pc, #160]	; (8013094 <vTaskSwitchContext+0xa8>)
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d003      	beq.n	8013002 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012ffa:	4b27      	ldr	r3, [pc, #156]	; (8013098 <vTaskSwitchContext+0xac>)
 8012ffc:	2201      	movs	r2, #1
 8012ffe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013000:	e041      	b.n	8013086 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8013002:	4b25      	ldr	r3, [pc, #148]	; (8013098 <vTaskSwitchContext+0xac>)
 8013004:	2200      	movs	r2, #0
 8013006:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013008:	4b24      	ldr	r3, [pc, #144]	; (801309c <vTaskSwitchContext+0xb0>)
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	60fb      	str	r3, [r7, #12]
 801300e:	e010      	b.n	8013032 <vTaskSwitchContext+0x46>
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d10a      	bne.n	801302c <vTaskSwitchContext+0x40>
	__asm volatile
 8013016:	f04f 0350 	mov.w	r3, #80	; 0x50
 801301a:	f383 8811 	msr	BASEPRI, r3
 801301e:	f3bf 8f6f 	isb	sy
 8013022:	f3bf 8f4f 	dsb	sy
 8013026:	607b      	str	r3, [r7, #4]
}
 8013028:	bf00      	nop
 801302a:	e7fe      	b.n	801302a <vTaskSwitchContext+0x3e>
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	3b01      	subs	r3, #1
 8013030:	60fb      	str	r3, [r7, #12]
 8013032:	491b      	ldr	r1, [pc, #108]	; (80130a0 <vTaskSwitchContext+0xb4>)
 8013034:	68fa      	ldr	r2, [r7, #12]
 8013036:	4613      	mov	r3, r2
 8013038:	009b      	lsls	r3, r3, #2
 801303a:	4413      	add	r3, r2
 801303c:	009b      	lsls	r3, r3, #2
 801303e:	440b      	add	r3, r1
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d0e4      	beq.n	8013010 <vTaskSwitchContext+0x24>
 8013046:	68fa      	ldr	r2, [r7, #12]
 8013048:	4613      	mov	r3, r2
 801304a:	009b      	lsls	r3, r3, #2
 801304c:	4413      	add	r3, r2
 801304e:	009b      	lsls	r3, r3, #2
 8013050:	4a13      	ldr	r2, [pc, #76]	; (80130a0 <vTaskSwitchContext+0xb4>)
 8013052:	4413      	add	r3, r2
 8013054:	60bb      	str	r3, [r7, #8]
 8013056:	68bb      	ldr	r3, [r7, #8]
 8013058:	685b      	ldr	r3, [r3, #4]
 801305a:	685a      	ldr	r2, [r3, #4]
 801305c:	68bb      	ldr	r3, [r7, #8]
 801305e:	605a      	str	r2, [r3, #4]
 8013060:	68bb      	ldr	r3, [r7, #8]
 8013062:	685a      	ldr	r2, [r3, #4]
 8013064:	68bb      	ldr	r3, [r7, #8]
 8013066:	3308      	adds	r3, #8
 8013068:	429a      	cmp	r2, r3
 801306a:	d104      	bne.n	8013076 <vTaskSwitchContext+0x8a>
 801306c:	68bb      	ldr	r3, [r7, #8]
 801306e:	685b      	ldr	r3, [r3, #4]
 8013070:	685a      	ldr	r2, [r3, #4]
 8013072:	68bb      	ldr	r3, [r7, #8]
 8013074:	605a      	str	r2, [r3, #4]
 8013076:	68bb      	ldr	r3, [r7, #8]
 8013078:	685b      	ldr	r3, [r3, #4]
 801307a:	68db      	ldr	r3, [r3, #12]
 801307c:	4a09      	ldr	r2, [pc, #36]	; (80130a4 <vTaskSwitchContext+0xb8>)
 801307e:	6013      	str	r3, [r2, #0]
 8013080:	4a06      	ldr	r2, [pc, #24]	; (801309c <vTaskSwitchContext+0xb0>)
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	6013      	str	r3, [r2, #0]
}
 8013086:	bf00      	nop
 8013088:	3714      	adds	r7, #20
 801308a:	46bd      	mov	sp, r7
 801308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013090:	4770      	bx	lr
 8013092:	bf00      	nop
 8013094:	24001834 	.word	0x24001834
 8013098:	24001820 	.word	0x24001820
 801309c:	24001814 	.word	0x24001814
 80130a0:	2400133c 	.word	0x2400133c
 80130a4:	24001338 	.word	0x24001338

080130a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b084      	sub	sp, #16
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
 80130b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d10a      	bne.n	80130ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80130b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130bc:	f383 8811 	msr	BASEPRI, r3
 80130c0:	f3bf 8f6f 	isb	sy
 80130c4:	f3bf 8f4f 	dsb	sy
 80130c8:	60fb      	str	r3, [r7, #12]
}
 80130ca:	bf00      	nop
 80130cc:	e7fe      	b.n	80130cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80130ce:	4b07      	ldr	r3, [pc, #28]	; (80130ec <vTaskPlaceOnEventList+0x44>)
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	3318      	adds	r3, #24
 80130d4:	4619      	mov	r1, r3
 80130d6:	6878      	ldr	r0, [r7, #4]
 80130d8:	f7fe fd6d 	bl	8011bb6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80130dc:	2101      	movs	r1, #1
 80130de:	6838      	ldr	r0, [r7, #0]
 80130e0:	f000 fb32 	bl	8013748 <prvAddCurrentTaskToDelayedList>
}
 80130e4:	bf00      	nop
 80130e6:	3710      	adds	r7, #16
 80130e8:	46bd      	mov	sp, r7
 80130ea:	bd80      	pop	{r7, pc}
 80130ec:	24001338 	.word	0x24001338

080130f0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b086      	sub	sp, #24
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	60f8      	str	r0, [r7, #12]
 80130f8:	60b9      	str	r1, [r7, #8]
 80130fa:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d10a      	bne.n	8013118 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8013102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013106:	f383 8811 	msr	BASEPRI, r3
 801310a:	f3bf 8f6f 	isb	sy
 801310e:	f3bf 8f4f 	dsb	sy
 8013112:	617b      	str	r3, [r7, #20]
}
 8013114:	bf00      	nop
 8013116:	e7fe      	b.n	8013116 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8013118:	4b11      	ldr	r3, [pc, #68]	; (8013160 <vTaskPlaceOnUnorderedEventList+0x70>)
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d10a      	bne.n	8013136 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8013120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013124:	f383 8811 	msr	BASEPRI, r3
 8013128:	f3bf 8f6f 	isb	sy
 801312c:	f3bf 8f4f 	dsb	sy
 8013130:	613b      	str	r3, [r7, #16]
}
 8013132:	bf00      	nop
 8013134:	e7fe      	b.n	8013134 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8013136:	4b0b      	ldr	r3, [pc, #44]	; (8013164 <vTaskPlaceOnUnorderedEventList+0x74>)
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	68ba      	ldr	r2, [r7, #8]
 801313c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8013140:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013142:	4b08      	ldr	r3, [pc, #32]	; (8013164 <vTaskPlaceOnUnorderedEventList+0x74>)
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	3318      	adds	r3, #24
 8013148:	4619      	mov	r1, r3
 801314a:	68f8      	ldr	r0, [r7, #12]
 801314c:	f7fe fd0f 	bl	8011b6e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013150:	2101      	movs	r1, #1
 8013152:	6878      	ldr	r0, [r7, #4]
 8013154:	f000 faf8 	bl	8013748 <prvAddCurrentTaskToDelayedList>
}
 8013158:	bf00      	nop
 801315a:	3718      	adds	r7, #24
 801315c:	46bd      	mov	sp, r7
 801315e:	bd80      	pop	{r7, pc}
 8013160:	24001834 	.word	0x24001834
 8013164:	24001338 	.word	0x24001338

08013168 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013168:	b580      	push	{r7, lr}
 801316a:	b086      	sub	sp, #24
 801316c:	af00      	add	r7, sp, #0
 801316e:	60f8      	str	r0, [r7, #12]
 8013170:	60b9      	str	r1, [r7, #8]
 8013172:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d10a      	bne.n	8013190 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801317a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801317e:	f383 8811 	msr	BASEPRI, r3
 8013182:	f3bf 8f6f 	isb	sy
 8013186:	f3bf 8f4f 	dsb	sy
 801318a:	617b      	str	r3, [r7, #20]
}
 801318c:	bf00      	nop
 801318e:	e7fe      	b.n	801318e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013190:	4b0a      	ldr	r3, [pc, #40]	; (80131bc <vTaskPlaceOnEventListRestricted+0x54>)
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	3318      	adds	r3, #24
 8013196:	4619      	mov	r1, r3
 8013198:	68f8      	ldr	r0, [r7, #12]
 801319a:	f7fe fce8 	bl	8011b6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d002      	beq.n	80131aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80131a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80131a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80131aa:	6879      	ldr	r1, [r7, #4]
 80131ac:	68b8      	ldr	r0, [r7, #8]
 80131ae:	f000 facb 	bl	8013748 <prvAddCurrentTaskToDelayedList>
	}
 80131b2:	bf00      	nop
 80131b4:	3718      	adds	r7, #24
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd80      	pop	{r7, pc}
 80131ba:	bf00      	nop
 80131bc:	24001338 	.word	0x24001338

080131c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b086      	sub	sp, #24
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	68db      	ldr	r3, [r3, #12]
 80131cc:	68db      	ldr	r3, [r3, #12]
 80131ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80131d0:	693b      	ldr	r3, [r7, #16]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d10a      	bne.n	80131ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80131d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131da:	f383 8811 	msr	BASEPRI, r3
 80131de:	f3bf 8f6f 	isb	sy
 80131e2:	f3bf 8f4f 	dsb	sy
 80131e6:	60fb      	str	r3, [r7, #12]
}
 80131e8:	bf00      	nop
 80131ea:	e7fe      	b.n	80131ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80131ec:	693b      	ldr	r3, [r7, #16]
 80131ee:	3318      	adds	r3, #24
 80131f0:	4618      	mov	r0, r3
 80131f2:	f7fe fd19 	bl	8011c28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80131f6:	4b1e      	ldr	r3, [pc, #120]	; (8013270 <xTaskRemoveFromEventList+0xb0>)
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d11d      	bne.n	801323a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80131fe:	693b      	ldr	r3, [r7, #16]
 8013200:	3304      	adds	r3, #4
 8013202:	4618      	mov	r0, r3
 8013204:	f7fe fd10 	bl	8011c28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013208:	693b      	ldr	r3, [r7, #16]
 801320a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801320c:	4b19      	ldr	r3, [pc, #100]	; (8013274 <xTaskRemoveFromEventList+0xb4>)
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	429a      	cmp	r2, r3
 8013212:	d903      	bls.n	801321c <xTaskRemoveFromEventList+0x5c>
 8013214:	693b      	ldr	r3, [r7, #16]
 8013216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013218:	4a16      	ldr	r2, [pc, #88]	; (8013274 <xTaskRemoveFromEventList+0xb4>)
 801321a:	6013      	str	r3, [r2, #0]
 801321c:	693b      	ldr	r3, [r7, #16]
 801321e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013220:	4613      	mov	r3, r2
 8013222:	009b      	lsls	r3, r3, #2
 8013224:	4413      	add	r3, r2
 8013226:	009b      	lsls	r3, r3, #2
 8013228:	4a13      	ldr	r2, [pc, #76]	; (8013278 <xTaskRemoveFromEventList+0xb8>)
 801322a:	441a      	add	r2, r3
 801322c:	693b      	ldr	r3, [r7, #16]
 801322e:	3304      	adds	r3, #4
 8013230:	4619      	mov	r1, r3
 8013232:	4610      	mov	r0, r2
 8013234:	f7fe fc9b 	bl	8011b6e <vListInsertEnd>
 8013238:	e005      	b.n	8013246 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801323a:	693b      	ldr	r3, [r7, #16]
 801323c:	3318      	adds	r3, #24
 801323e:	4619      	mov	r1, r3
 8013240:	480e      	ldr	r0, [pc, #56]	; (801327c <xTaskRemoveFromEventList+0xbc>)
 8013242:	f7fe fc94 	bl	8011b6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013246:	693b      	ldr	r3, [r7, #16]
 8013248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801324a:	4b0d      	ldr	r3, [pc, #52]	; (8013280 <xTaskRemoveFromEventList+0xc0>)
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013250:	429a      	cmp	r2, r3
 8013252:	d905      	bls.n	8013260 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013254:	2301      	movs	r3, #1
 8013256:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013258:	4b0a      	ldr	r3, [pc, #40]	; (8013284 <xTaskRemoveFromEventList+0xc4>)
 801325a:	2201      	movs	r2, #1
 801325c:	601a      	str	r2, [r3, #0]
 801325e:	e001      	b.n	8013264 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8013260:	2300      	movs	r3, #0
 8013262:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013264:	697b      	ldr	r3, [r7, #20]
}
 8013266:	4618      	mov	r0, r3
 8013268:	3718      	adds	r7, #24
 801326a:	46bd      	mov	sp, r7
 801326c:	bd80      	pop	{r7, pc}
 801326e:	bf00      	nop
 8013270:	24001834 	.word	0x24001834
 8013274:	24001814 	.word	0x24001814
 8013278:	2400133c 	.word	0x2400133c
 801327c:	240017cc 	.word	0x240017cc
 8013280:	24001338 	.word	0x24001338
 8013284:	24001820 	.word	0x24001820

08013288 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8013288:	b580      	push	{r7, lr}
 801328a:	b086      	sub	sp, #24
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
 8013290:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8013292:	4b29      	ldr	r3, [pc, #164]	; (8013338 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d10a      	bne.n	80132b0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 801329a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801329e:	f383 8811 	msr	BASEPRI, r3
 80132a2:	f3bf 8f6f 	isb	sy
 80132a6:	f3bf 8f4f 	dsb	sy
 80132aa:	613b      	str	r3, [r7, #16]
}
 80132ac:	bf00      	nop
 80132ae:	e7fe      	b.n	80132ae <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80132b0:	683b      	ldr	r3, [r7, #0]
 80132b2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	68db      	ldr	r3, [r3, #12]
 80132be:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80132c0:	697b      	ldr	r3, [r7, #20]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d10a      	bne.n	80132dc <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80132c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132ca:	f383 8811 	msr	BASEPRI, r3
 80132ce:	f3bf 8f6f 	isb	sy
 80132d2:	f3bf 8f4f 	dsb	sy
 80132d6:	60fb      	str	r3, [r7, #12]
}
 80132d8:	bf00      	nop
 80132da:	e7fe      	b.n	80132da <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80132dc:	6878      	ldr	r0, [r7, #4]
 80132de:	f7fe fca3 	bl	8011c28 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80132e2:	697b      	ldr	r3, [r7, #20]
 80132e4:	3304      	adds	r3, #4
 80132e6:	4618      	mov	r0, r3
 80132e8:	f7fe fc9e 	bl	8011c28 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80132ec:	697b      	ldr	r3, [r7, #20]
 80132ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132f0:	4b12      	ldr	r3, [pc, #72]	; (801333c <vTaskRemoveFromUnorderedEventList+0xb4>)
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	429a      	cmp	r2, r3
 80132f6:	d903      	bls.n	8013300 <vTaskRemoveFromUnorderedEventList+0x78>
 80132f8:	697b      	ldr	r3, [r7, #20]
 80132fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132fc:	4a0f      	ldr	r2, [pc, #60]	; (801333c <vTaskRemoveFromUnorderedEventList+0xb4>)
 80132fe:	6013      	str	r3, [r2, #0]
 8013300:	697b      	ldr	r3, [r7, #20]
 8013302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013304:	4613      	mov	r3, r2
 8013306:	009b      	lsls	r3, r3, #2
 8013308:	4413      	add	r3, r2
 801330a:	009b      	lsls	r3, r3, #2
 801330c:	4a0c      	ldr	r2, [pc, #48]	; (8013340 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801330e:	441a      	add	r2, r3
 8013310:	697b      	ldr	r3, [r7, #20]
 8013312:	3304      	adds	r3, #4
 8013314:	4619      	mov	r1, r3
 8013316:	4610      	mov	r0, r2
 8013318:	f7fe fc29 	bl	8011b6e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801331c:	697b      	ldr	r3, [r7, #20]
 801331e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013320:	4b08      	ldr	r3, [pc, #32]	; (8013344 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013326:	429a      	cmp	r2, r3
 8013328:	d902      	bls.n	8013330 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801332a:	4b07      	ldr	r3, [pc, #28]	; (8013348 <vTaskRemoveFromUnorderedEventList+0xc0>)
 801332c:	2201      	movs	r2, #1
 801332e:	601a      	str	r2, [r3, #0]
	}
}
 8013330:	bf00      	nop
 8013332:	3718      	adds	r7, #24
 8013334:	46bd      	mov	sp, r7
 8013336:	bd80      	pop	{r7, pc}
 8013338:	24001834 	.word	0x24001834
 801333c:	24001814 	.word	0x24001814
 8013340:	2400133c 	.word	0x2400133c
 8013344:	24001338 	.word	0x24001338
 8013348:	24001820 	.word	0x24001820

0801334c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801334c:	b480      	push	{r7}
 801334e:	b083      	sub	sp, #12
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013354:	4b06      	ldr	r3, [pc, #24]	; (8013370 <vTaskInternalSetTimeOutState+0x24>)
 8013356:	681a      	ldr	r2, [r3, #0]
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801335c:	4b05      	ldr	r3, [pc, #20]	; (8013374 <vTaskInternalSetTimeOutState+0x28>)
 801335e:	681a      	ldr	r2, [r3, #0]
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	605a      	str	r2, [r3, #4]
}
 8013364:	bf00      	nop
 8013366:	370c      	adds	r7, #12
 8013368:	46bd      	mov	sp, r7
 801336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801336e:	4770      	bx	lr
 8013370:	24001824 	.word	0x24001824
 8013374:	24001810 	.word	0x24001810

08013378 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013378:	b580      	push	{r7, lr}
 801337a:	b088      	sub	sp, #32
 801337c:	af00      	add	r7, sp, #0
 801337e:	6078      	str	r0, [r7, #4]
 8013380:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d10a      	bne.n	801339e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8013388:	f04f 0350 	mov.w	r3, #80	; 0x50
 801338c:	f383 8811 	msr	BASEPRI, r3
 8013390:	f3bf 8f6f 	isb	sy
 8013394:	f3bf 8f4f 	dsb	sy
 8013398:	613b      	str	r3, [r7, #16]
}
 801339a:	bf00      	nop
 801339c:	e7fe      	b.n	801339c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801339e:	683b      	ldr	r3, [r7, #0]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d10a      	bne.n	80133ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80133a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133a8:	f383 8811 	msr	BASEPRI, r3
 80133ac:	f3bf 8f6f 	isb	sy
 80133b0:	f3bf 8f4f 	dsb	sy
 80133b4:	60fb      	str	r3, [r7, #12]
}
 80133b6:	bf00      	nop
 80133b8:	e7fe      	b.n	80133b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80133ba:	f000 feb3 	bl	8014124 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80133be:	4b1d      	ldr	r3, [pc, #116]	; (8013434 <xTaskCheckForTimeOut+0xbc>)
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	685b      	ldr	r3, [r3, #4]
 80133c8:	69ba      	ldr	r2, [r7, #24]
 80133ca:	1ad3      	subs	r3, r2, r3
 80133cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80133d6:	d102      	bne.n	80133de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80133d8:	2300      	movs	r3, #0
 80133da:	61fb      	str	r3, [r7, #28]
 80133dc:	e023      	b.n	8013426 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	681a      	ldr	r2, [r3, #0]
 80133e2:	4b15      	ldr	r3, [pc, #84]	; (8013438 <xTaskCheckForTimeOut+0xc0>)
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	429a      	cmp	r2, r3
 80133e8:	d007      	beq.n	80133fa <xTaskCheckForTimeOut+0x82>
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	685b      	ldr	r3, [r3, #4]
 80133ee:	69ba      	ldr	r2, [r7, #24]
 80133f0:	429a      	cmp	r2, r3
 80133f2:	d302      	bcc.n	80133fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80133f4:	2301      	movs	r3, #1
 80133f6:	61fb      	str	r3, [r7, #28]
 80133f8:	e015      	b.n	8013426 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80133fa:	683b      	ldr	r3, [r7, #0]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	697a      	ldr	r2, [r7, #20]
 8013400:	429a      	cmp	r2, r3
 8013402:	d20b      	bcs.n	801341c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	681a      	ldr	r2, [r3, #0]
 8013408:	697b      	ldr	r3, [r7, #20]
 801340a:	1ad2      	subs	r2, r2, r3
 801340c:	683b      	ldr	r3, [r7, #0]
 801340e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013410:	6878      	ldr	r0, [r7, #4]
 8013412:	f7ff ff9b 	bl	801334c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013416:	2300      	movs	r3, #0
 8013418:	61fb      	str	r3, [r7, #28]
 801341a:	e004      	b.n	8013426 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801341c:	683b      	ldr	r3, [r7, #0]
 801341e:	2200      	movs	r2, #0
 8013420:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013422:	2301      	movs	r3, #1
 8013424:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013426:	f000 fead 	bl	8014184 <vPortExitCritical>

	return xReturn;
 801342a:	69fb      	ldr	r3, [r7, #28]
}
 801342c:	4618      	mov	r0, r3
 801342e:	3720      	adds	r7, #32
 8013430:	46bd      	mov	sp, r7
 8013432:	bd80      	pop	{r7, pc}
 8013434:	24001810 	.word	0x24001810
 8013438:	24001824 	.word	0x24001824

0801343c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801343c:	b480      	push	{r7}
 801343e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013440:	4b03      	ldr	r3, [pc, #12]	; (8013450 <vTaskMissedYield+0x14>)
 8013442:	2201      	movs	r2, #1
 8013444:	601a      	str	r2, [r3, #0]
}
 8013446:	bf00      	nop
 8013448:	46bd      	mov	sp, r7
 801344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344e:	4770      	bx	lr
 8013450:	24001820 	.word	0x24001820

08013454 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013454:	b580      	push	{r7, lr}
 8013456:	b082      	sub	sp, #8
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801345c:	f000 f852 	bl	8013504 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013460:	4b06      	ldr	r3, [pc, #24]	; (801347c <prvIdleTask+0x28>)
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	2b01      	cmp	r3, #1
 8013466:	d9f9      	bls.n	801345c <prvIdleTask+0x8>
			{
				taskYIELD();
 8013468:	4b05      	ldr	r3, [pc, #20]	; (8013480 <prvIdleTask+0x2c>)
 801346a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801346e:	601a      	str	r2, [r3, #0]
 8013470:	f3bf 8f4f 	dsb	sy
 8013474:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013478:	e7f0      	b.n	801345c <prvIdleTask+0x8>
 801347a:	bf00      	nop
 801347c:	2400133c 	.word	0x2400133c
 8013480:	e000ed04 	.word	0xe000ed04

08013484 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013484:	b580      	push	{r7, lr}
 8013486:	b082      	sub	sp, #8
 8013488:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801348a:	2300      	movs	r3, #0
 801348c:	607b      	str	r3, [r7, #4]
 801348e:	e00c      	b.n	80134aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013490:	687a      	ldr	r2, [r7, #4]
 8013492:	4613      	mov	r3, r2
 8013494:	009b      	lsls	r3, r3, #2
 8013496:	4413      	add	r3, r2
 8013498:	009b      	lsls	r3, r3, #2
 801349a:	4a12      	ldr	r2, [pc, #72]	; (80134e4 <prvInitialiseTaskLists+0x60>)
 801349c:	4413      	add	r3, r2
 801349e:	4618      	mov	r0, r3
 80134a0:	f7fe fb38 	bl	8011b14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	3301      	adds	r3, #1
 80134a8:	607b      	str	r3, [r7, #4]
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	2b37      	cmp	r3, #55	; 0x37
 80134ae:	d9ef      	bls.n	8013490 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80134b0:	480d      	ldr	r0, [pc, #52]	; (80134e8 <prvInitialiseTaskLists+0x64>)
 80134b2:	f7fe fb2f 	bl	8011b14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80134b6:	480d      	ldr	r0, [pc, #52]	; (80134ec <prvInitialiseTaskLists+0x68>)
 80134b8:	f7fe fb2c 	bl	8011b14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80134bc:	480c      	ldr	r0, [pc, #48]	; (80134f0 <prvInitialiseTaskLists+0x6c>)
 80134be:	f7fe fb29 	bl	8011b14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80134c2:	480c      	ldr	r0, [pc, #48]	; (80134f4 <prvInitialiseTaskLists+0x70>)
 80134c4:	f7fe fb26 	bl	8011b14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80134c8:	480b      	ldr	r0, [pc, #44]	; (80134f8 <prvInitialiseTaskLists+0x74>)
 80134ca:	f7fe fb23 	bl	8011b14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80134ce:	4b0b      	ldr	r3, [pc, #44]	; (80134fc <prvInitialiseTaskLists+0x78>)
 80134d0:	4a05      	ldr	r2, [pc, #20]	; (80134e8 <prvInitialiseTaskLists+0x64>)
 80134d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80134d4:	4b0a      	ldr	r3, [pc, #40]	; (8013500 <prvInitialiseTaskLists+0x7c>)
 80134d6:	4a05      	ldr	r2, [pc, #20]	; (80134ec <prvInitialiseTaskLists+0x68>)
 80134d8:	601a      	str	r2, [r3, #0]
}
 80134da:	bf00      	nop
 80134dc:	3708      	adds	r7, #8
 80134de:	46bd      	mov	sp, r7
 80134e0:	bd80      	pop	{r7, pc}
 80134e2:	bf00      	nop
 80134e4:	2400133c 	.word	0x2400133c
 80134e8:	2400179c 	.word	0x2400179c
 80134ec:	240017b0 	.word	0x240017b0
 80134f0:	240017cc 	.word	0x240017cc
 80134f4:	240017e0 	.word	0x240017e0
 80134f8:	240017f8 	.word	0x240017f8
 80134fc:	240017c4 	.word	0x240017c4
 8013500:	240017c8 	.word	0x240017c8

08013504 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013504:	b580      	push	{r7, lr}
 8013506:	b082      	sub	sp, #8
 8013508:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801350a:	e019      	b.n	8013540 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801350c:	f000 fe0a 	bl	8014124 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013510:	4b10      	ldr	r3, [pc, #64]	; (8013554 <prvCheckTasksWaitingTermination+0x50>)
 8013512:	68db      	ldr	r3, [r3, #12]
 8013514:	68db      	ldr	r3, [r3, #12]
 8013516:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	3304      	adds	r3, #4
 801351c:	4618      	mov	r0, r3
 801351e:	f7fe fb83 	bl	8011c28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013522:	4b0d      	ldr	r3, [pc, #52]	; (8013558 <prvCheckTasksWaitingTermination+0x54>)
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	3b01      	subs	r3, #1
 8013528:	4a0b      	ldr	r2, [pc, #44]	; (8013558 <prvCheckTasksWaitingTermination+0x54>)
 801352a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801352c:	4b0b      	ldr	r3, [pc, #44]	; (801355c <prvCheckTasksWaitingTermination+0x58>)
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	3b01      	subs	r3, #1
 8013532:	4a0a      	ldr	r2, [pc, #40]	; (801355c <prvCheckTasksWaitingTermination+0x58>)
 8013534:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013536:	f000 fe25 	bl	8014184 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801353a:	6878      	ldr	r0, [r7, #4]
 801353c:	f000 f810 	bl	8013560 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013540:	4b06      	ldr	r3, [pc, #24]	; (801355c <prvCheckTasksWaitingTermination+0x58>)
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d1e1      	bne.n	801350c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013548:	bf00      	nop
 801354a:	bf00      	nop
 801354c:	3708      	adds	r7, #8
 801354e:	46bd      	mov	sp, r7
 8013550:	bd80      	pop	{r7, pc}
 8013552:	bf00      	nop
 8013554:	240017e0 	.word	0x240017e0
 8013558:	2400180c 	.word	0x2400180c
 801355c:	240017f4 	.word	0x240017f4

08013560 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013560:	b580      	push	{r7, lr}
 8013562:	b084      	sub	sp, #16
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801356e:	2b00      	cmp	r3, #0
 8013570:	d108      	bne.n	8013584 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013576:	4618      	mov	r0, r3
 8013578:	f000 ffc2 	bl	8014500 <vPortFree>
				vPortFree( pxTCB );
 801357c:	6878      	ldr	r0, [r7, #4]
 801357e:	f000 ffbf 	bl	8014500 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013582:	e018      	b.n	80135b6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801358a:	2b01      	cmp	r3, #1
 801358c:	d103      	bne.n	8013596 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801358e:	6878      	ldr	r0, [r7, #4]
 8013590:	f000 ffb6 	bl	8014500 <vPortFree>
	}
 8013594:	e00f      	b.n	80135b6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801359c:	2b02      	cmp	r3, #2
 801359e:	d00a      	beq.n	80135b6 <prvDeleteTCB+0x56>
	__asm volatile
 80135a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135a4:	f383 8811 	msr	BASEPRI, r3
 80135a8:	f3bf 8f6f 	isb	sy
 80135ac:	f3bf 8f4f 	dsb	sy
 80135b0:	60fb      	str	r3, [r7, #12]
}
 80135b2:	bf00      	nop
 80135b4:	e7fe      	b.n	80135b4 <prvDeleteTCB+0x54>
	}
 80135b6:	bf00      	nop
 80135b8:	3710      	adds	r7, #16
 80135ba:	46bd      	mov	sp, r7
 80135bc:	bd80      	pop	{r7, pc}
	...

080135c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80135c0:	b480      	push	{r7}
 80135c2:	b083      	sub	sp, #12
 80135c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80135c6:	4b0c      	ldr	r3, [pc, #48]	; (80135f8 <prvResetNextTaskUnblockTime+0x38>)
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d104      	bne.n	80135da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80135d0:	4b0a      	ldr	r3, [pc, #40]	; (80135fc <prvResetNextTaskUnblockTime+0x3c>)
 80135d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80135d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80135d8:	e008      	b.n	80135ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80135da:	4b07      	ldr	r3, [pc, #28]	; (80135f8 <prvResetNextTaskUnblockTime+0x38>)
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	68db      	ldr	r3, [r3, #12]
 80135e0:	68db      	ldr	r3, [r3, #12]
 80135e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	685b      	ldr	r3, [r3, #4]
 80135e8:	4a04      	ldr	r2, [pc, #16]	; (80135fc <prvResetNextTaskUnblockTime+0x3c>)
 80135ea:	6013      	str	r3, [r2, #0]
}
 80135ec:	bf00      	nop
 80135ee:	370c      	adds	r7, #12
 80135f0:	46bd      	mov	sp, r7
 80135f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f6:	4770      	bx	lr
 80135f8:	240017c4 	.word	0x240017c4
 80135fc:	2400182c 	.word	0x2400182c

08013600 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013600:	b480      	push	{r7}
 8013602:	b083      	sub	sp, #12
 8013604:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013606:	4b0b      	ldr	r3, [pc, #44]	; (8013634 <xTaskGetSchedulerState+0x34>)
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d102      	bne.n	8013614 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801360e:	2301      	movs	r3, #1
 8013610:	607b      	str	r3, [r7, #4]
 8013612:	e008      	b.n	8013626 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013614:	4b08      	ldr	r3, [pc, #32]	; (8013638 <xTaskGetSchedulerState+0x38>)
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	2b00      	cmp	r3, #0
 801361a:	d102      	bne.n	8013622 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801361c:	2302      	movs	r3, #2
 801361e:	607b      	str	r3, [r7, #4]
 8013620:	e001      	b.n	8013626 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013622:	2300      	movs	r3, #0
 8013624:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013626:	687b      	ldr	r3, [r7, #4]
	}
 8013628:	4618      	mov	r0, r3
 801362a:	370c      	adds	r7, #12
 801362c:	46bd      	mov	sp, r7
 801362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013632:	4770      	bx	lr
 8013634:	24001818 	.word	0x24001818
 8013638:	24001834 	.word	0x24001834

0801363c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801363c:	b580      	push	{r7, lr}
 801363e:	b086      	sub	sp, #24
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013648:	2300      	movs	r3, #0
 801364a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d056      	beq.n	8013700 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013652:	4b2e      	ldr	r3, [pc, #184]	; (801370c <xTaskPriorityDisinherit+0xd0>)
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	693a      	ldr	r2, [r7, #16]
 8013658:	429a      	cmp	r2, r3
 801365a:	d00a      	beq.n	8013672 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013660:	f383 8811 	msr	BASEPRI, r3
 8013664:	f3bf 8f6f 	isb	sy
 8013668:	f3bf 8f4f 	dsb	sy
 801366c:	60fb      	str	r3, [r7, #12]
}
 801366e:	bf00      	nop
 8013670:	e7fe      	b.n	8013670 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013672:	693b      	ldr	r3, [r7, #16]
 8013674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013676:	2b00      	cmp	r3, #0
 8013678:	d10a      	bne.n	8013690 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801367a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801367e:	f383 8811 	msr	BASEPRI, r3
 8013682:	f3bf 8f6f 	isb	sy
 8013686:	f3bf 8f4f 	dsb	sy
 801368a:	60bb      	str	r3, [r7, #8]
}
 801368c:	bf00      	nop
 801368e:	e7fe      	b.n	801368e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8013690:	693b      	ldr	r3, [r7, #16]
 8013692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013694:	1e5a      	subs	r2, r3, #1
 8013696:	693b      	ldr	r3, [r7, #16]
 8013698:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801369a:	693b      	ldr	r3, [r7, #16]
 801369c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801369e:	693b      	ldr	r3, [r7, #16]
 80136a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80136a2:	429a      	cmp	r2, r3
 80136a4:	d02c      	beq.n	8013700 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80136a6:	693b      	ldr	r3, [r7, #16]
 80136a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d128      	bne.n	8013700 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80136ae:	693b      	ldr	r3, [r7, #16]
 80136b0:	3304      	adds	r3, #4
 80136b2:	4618      	mov	r0, r3
 80136b4:	f7fe fab8 	bl	8011c28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80136b8:	693b      	ldr	r3, [r7, #16]
 80136ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80136bc:	693b      	ldr	r3, [r7, #16]
 80136be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80136c0:	693b      	ldr	r3, [r7, #16]
 80136c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80136c8:	693b      	ldr	r3, [r7, #16]
 80136ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80136cc:	693b      	ldr	r3, [r7, #16]
 80136ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136d0:	4b0f      	ldr	r3, [pc, #60]	; (8013710 <xTaskPriorityDisinherit+0xd4>)
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	429a      	cmp	r2, r3
 80136d6:	d903      	bls.n	80136e0 <xTaskPriorityDisinherit+0xa4>
 80136d8:	693b      	ldr	r3, [r7, #16]
 80136da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136dc:	4a0c      	ldr	r2, [pc, #48]	; (8013710 <xTaskPriorityDisinherit+0xd4>)
 80136de:	6013      	str	r3, [r2, #0]
 80136e0:	693b      	ldr	r3, [r7, #16]
 80136e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136e4:	4613      	mov	r3, r2
 80136e6:	009b      	lsls	r3, r3, #2
 80136e8:	4413      	add	r3, r2
 80136ea:	009b      	lsls	r3, r3, #2
 80136ec:	4a09      	ldr	r2, [pc, #36]	; (8013714 <xTaskPriorityDisinherit+0xd8>)
 80136ee:	441a      	add	r2, r3
 80136f0:	693b      	ldr	r3, [r7, #16]
 80136f2:	3304      	adds	r3, #4
 80136f4:	4619      	mov	r1, r3
 80136f6:	4610      	mov	r0, r2
 80136f8:	f7fe fa39 	bl	8011b6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80136fc:	2301      	movs	r3, #1
 80136fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013700:	697b      	ldr	r3, [r7, #20]
	}
 8013702:	4618      	mov	r0, r3
 8013704:	3718      	adds	r7, #24
 8013706:	46bd      	mov	sp, r7
 8013708:	bd80      	pop	{r7, pc}
 801370a:	bf00      	nop
 801370c:	24001338 	.word	0x24001338
 8013710:	24001814 	.word	0x24001814
 8013714:	2400133c 	.word	0x2400133c

08013718 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8013718:	b480      	push	{r7}
 801371a:	b083      	sub	sp, #12
 801371c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801371e:	4b09      	ldr	r3, [pc, #36]	; (8013744 <uxTaskResetEventItemValue+0x2c>)
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	699b      	ldr	r3, [r3, #24]
 8013724:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013726:	4b07      	ldr	r3, [pc, #28]	; (8013744 <uxTaskResetEventItemValue+0x2c>)
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801372c:	4b05      	ldr	r3, [pc, #20]	; (8013744 <uxTaskResetEventItemValue+0x2c>)
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8013734:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8013736:	687b      	ldr	r3, [r7, #4]
}
 8013738:	4618      	mov	r0, r3
 801373a:	370c      	adds	r7, #12
 801373c:	46bd      	mov	sp, r7
 801373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013742:	4770      	bx	lr
 8013744:	24001338 	.word	0x24001338

08013748 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013748:	b580      	push	{r7, lr}
 801374a:	b084      	sub	sp, #16
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
 8013750:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013752:	4b21      	ldr	r3, [pc, #132]	; (80137d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013758:	4b20      	ldr	r3, [pc, #128]	; (80137dc <prvAddCurrentTaskToDelayedList+0x94>)
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	3304      	adds	r3, #4
 801375e:	4618      	mov	r0, r3
 8013760:	f7fe fa62 	bl	8011c28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801376a:	d10a      	bne.n	8013782 <prvAddCurrentTaskToDelayedList+0x3a>
 801376c:	683b      	ldr	r3, [r7, #0]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d007      	beq.n	8013782 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013772:	4b1a      	ldr	r3, [pc, #104]	; (80137dc <prvAddCurrentTaskToDelayedList+0x94>)
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	3304      	adds	r3, #4
 8013778:	4619      	mov	r1, r3
 801377a:	4819      	ldr	r0, [pc, #100]	; (80137e0 <prvAddCurrentTaskToDelayedList+0x98>)
 801377c:	f7fe f9f7 	bl	8011b6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013780:	e026      	b.n	80137d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013782:	68fa      	ldr	r2, [r7, #12]
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	4413      	add	r3, r2
 8013788:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801378a:	4b14      	ldr	r3, [pc, #80]	; (80137dc <prvAddCurrentTaskToDelayedList+0x94>)
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	68ba      	ldr	r2, [r7, #8]
 8013790:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013792:	68ba      	ldr	r2, [r7, #8]
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	429a      	cmp	r2, r3
 8013798:	d209      	bcs.n	80137ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801379a:	4b12      	ldr	r3, [pc, #72]	; (80137e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801379c:	681a      	ldr	r2, [r3, #0]
 801379e:	4b0f      	ldr	r3, [pc, #60]	; (80137dc <prvAddCurrentTaskToDelayedList+0x94>)
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	3304      	adds	r3, #4
 80137a4:	4619      	mov	r1, r3
 80137a6:	4610      	mov	r0, r2
 80137a8:	f7fe fa05 	bl	8011bb6 <vListInsert>
}
 80137ac:	e010      	b.n	80137d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80137ae:	4b0e      	ldr	r3, [pc, #56]	; (80137e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80137b0:	681a      	ldr	r2, [r3, #0]
 80137b2:	4b0a      	ldr	r3, [pc, #40]	; (80137dc <prvAddCurrentTaskToDelayedList+0x94>)
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	3304      	adds	r3, #4
 80137b8:	4619      	mov	r1, r3
 80137ba:	4610      	mov	r0, r2
 80137bc:	f7fe f9fb 	bl	8011bb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80137c0:	4b0a      	ldr	r3, [pc, #40]	; (80137ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	68ba      	ldr	r2, [r7, #8]
 80137c6:	429a      	cmp	r2, r3
 80137c8:	d202      	bcs.n	80137d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80137ca:	4a08      	ldr	r2, [pc, #32]	; (80137ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80137cc:	68bb      	ldr	r3, [r7, #8]
 80137ce:	6013      	str	r3, [r2, #0]
}
 80137d0:	bf00      	nop
 80137d2:	3710      	adds	r7, #16
 80137d4:	46bd      	mov	sp, r7
 80137d6:	bd80      	pop	{r7, pc}
 80137d8:	24001810 	.word	0x24001810
 80137dc:	24001338 	.word	0x24001338
 80137e0:	240017f8 	.word	0x240017f8
 80137e4:	240017c8 	.word	0x240017c8
 80137e8:	240017c4 	.word	0x240017c4
 80137ec:	2400182c 	.word	0x2400182c

080137f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b08a      	sub	sp, #40	; 0x28
 80137f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80137f6:	2300      	movs	r3, #0
 80137f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80137fa:	f000 fb07 	bl	8013e0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80137fe:	4b1c      	ldr	r3, [pc, #112]	; (8013870 <xTimerCreateTimerTask+0x80>)
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d021      	beq.n	801384a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013806:	2300      	movs	r3, #0
 8013808:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801380a:	2300      	movs	r3, #0
 801380c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801380e:	1d3a      	adds	r2, r7, #4
 8013810:	f107 0108 	add.w	r1, r7, #8
 8013814:	f107 030c 	add.w	r3, r7, #12
 8013818:	4618      	mov	r0, r3
 801381a:	f7fd ff73 	bl	8011704 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801381e:	6879      	ldr	r1, [r7, #4]
 8013820:	68bb      	ldr	r3, [r7, #8]
 8013822:	68fa      	ldr	r2, [r7, #12]
 8013824:	9202      	str	r2, [sp, #8]
 8013826:	9301      	str	r3, [sp, #4]
 8013828:	2302      	movs	r3, #2
 801382a:	9300      	str	r3, [sp, #0]
 801382c:	2300      	movs	r3, #0
 801382e:	460a      	mov	r2, r1
 8013830:	4910      	ldr	r1, [pc, #64]	; (8013874 <xTimerCreateTimerTask+0x84>)
 8013832:	4811      	ldr	r0, [pc, #68]	; (8013878 <xTimerCreateTimerTask+0x88>)
 8013834:	f7fe ff0e 	bl	8012654 <xTaskCreateStatic>
 8013838:	4603      	mov	r3, r0
 801383a:	4a10      	ldr	r2, [pc, #64]	; (801387c <xTimerCreateTimerTask+0x8c>)
 801383c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801383e:	4b0f      	ldr	r3, [pc, #60]	; (801387c <xTimerCreateTimerTask+0x8c>)
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d001      	beq.n	801384a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013846:	2301      	movs	r3, #1
 8013848:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801384a:	697b      	ldr	r3, [r7, #20]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d10a      	bne.n	8013866 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8013850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013854:	f383 8811 	msr	BASEPRI, r3
 8013858:	f3bf 8f6f 	isb	sy
 801385c:	f3bf 8f4f 	dsb	sy
 8013860:	613b      	str	r3, [r7, #16]
}
 8013862:	bf00      	nop
 8013864:	e7fe      	b.n	8013864 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8013866:	697b      	ldr	r3, [r7, #20]
}
 8013868:	4618      	mov	r0, r3
 801386a:	3718      	adds	r7, #24
 801386c:	46bd      	mov	sp, r7
 801386e:	bd80      	pop	{r7, pc}
 8013870:	24001868 	.word	0x24001868
 8013874:	08015444 	.word	0x08015444
 8013878:	080139b5 	.word	0x080139b5
 801387c:	2400186c 	.word	0x2400186c

08013880 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013880:	b580      	push	{r7, lr}
 8013882:	b08a      	sub	sp, #40	; 0x28
 8013884:	af00      	add	r7, sp, #0
 8013886:	60f8      	str	r0, [r7, #12]
 8013888:	60b9      	str	r1, [r7, #8]
 801388a:	607a      	str	r2, [r7, #4]
 801388c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801388e:	2300      	movs	r3, #0
 8013890:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d10a      	bne.n	80138ae <xTimerGenericCommand+0x2e>
	__asm volatile
 8013898:	f04f 0350 	mov.w	r3, #80	; 0x50
 801389c:	f383 8811 	msr	BASEPRI, r3
 80138a0:	f3bf 8f6f 	isb	sy
 80138a4:	f3bf 8f4f 	dsb	sy
 80138a8:	623b      	str	r3, [r7, #32]
}
 80138aa:	bf00      	nop
 80138ac:	e7fe      	b.n	80138ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80138ae:	4b1a      	ldr	r3, [pc, #104]	; (8013918 <xTimerGenericCommand+0x98>)
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d02a      	beq.n	801390c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80138b6:	68bb      	ldr	r3, [r7, #8]
 80138b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80138c2:	68bb      	ldr	r3, [r7, #8]
 80138c4:	2b05      	cmp	r3, #5
 80138c6:	dc18      	bgt.n	80138fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80138c8:	f7ff fe9a 	bl	8013600 <xTaskGetSchedulerState>
 80138cc:	4603      	mov	r3, r0
 80138ce:	2b02      	cmp	r3, #2
 80138d0:	d109      	bne.n	80138e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80138d2:	4b11      	ldr	r3, [pc, #68]	; (8013918 <xTimerGenericCommand+0x98>)
 80138d4:	6818      	ldr	r0, [r3, #0]
 80138d6:	f107 0110 	add.w	r1, r7, #16
 80138da:	2300      	movs	r3, #0
 80138dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138de:	f7fe fad1 	bl	8011e84 <xQueueGenericSend>
 80138e2:	6278      	str	r0, [r7, #36]	; 0x24
 80138e4:	e012      	b.n	801390c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80138e6:	4b0c      	ldr	r3, [pc, #48]	; (8013918 <xTimerGenericCommand+0x98>)
 80138e8:	6818      	ldr	r0, [r3, #0]
 80138ea:	f107 0110 	add.w	r1, r7, #16
 80138ee:	2300      	movs	r3, #0
 80138f0:	2200      	movs	r2, #0
 80138f2:	f7fe fac7 	bl	8011e84 <xQueueGenericSend>
 80138f6:	6278      	str	r0, [r7, #36]	; 0x24
 80138f8:	e008      	b.n	801390c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80138fa:	4b07      	ldr	r3, [pc, #28]	; (8013918 <xTimerGenericCommand+0x98>)
 80138fc:	6818      	ldr	r0, [r3, #0]
 80138fe:	f107 0110 	add.w	r1, r7, #16
 8013902:	2300      	movs	r3, #0
 8013904:	683a      	ldr	r2, [r7, #0]
 8013906:	f7fe fbbb 	bl	8012080 <xQueueGenericSendFromISR>
 801390a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801390e:	4618      	mov	r0, r3
 8013910:	3728      	adds	r7, #40	; 0x28
 8013912:	46bd      	mov	sp, r7
 8013914:	bd80      	pop	{r7, pc}
 8013916:	bf00      	nop
 8013918:	24001868 	.word	0x24001868

0801391c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801391c:	b580      	push	{r7, lr}
 801391e:	b088      	sub	sp, #32
 8013920:	af02      	add	r7, sp, #8
 8013922:	6078      	str	r0, [r7, #4]
 8013924:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013926:	4b22      	ldr	r3, [pc, #136]	; (80139b0 <prvProcessExpiredTimer+0x94>)
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	68db      	ldr	r3, [r3, #12]
 801392c:	68db      	ldr	r3, [r3, #12]
 801392e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013930:	697b      	ldr	r3, [r7, #20]
 8013932:	3304      	adds	r3, #4
 8013934:	4618      	mov	r0, r3
 8013936:	f7fe f977 	bl	8011c28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801393a:	697b      	ldr	r3, [r7, #20]
 801393c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013940:	f003 0304 	and.w	r3, r3, #4
 8013944:	2b00      	cmp	r3, #0
 8013946:	d022      	beq.n	801398e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013948:	697b      	ldr	r3, [r7, #20]
 801394a:	699a      	ldr	r2, [r3, #24]
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	18d1      	adds	r1, r2, r3
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	683a      	ldr	r2, [r7, #0]
 8013954:	6978      	ldr	r0, [r7, #20]
 8013956:	f000 f8d1 	bl	8013afc <prvInsertTimerInActiveList>
 801395a:	4603      	mov	r3, r0
 801395c:	2b00      	cmp	r3, #0
 801395e:	d01f      	beq.n	80139a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013960:	2300      	movs	r3, #0
 8013962:	9300      	str	r3, [sp, #0]
 8013964:	2300      	movs	r3, #0
 8013966:	687a      	ldr	r2, [r7, #4]
 8013968:	2100      	movs	r1, #0
 801396a:	6978      	ldr	r0, [r7, #20]
 801396c:	f7ff ff88 	bl	8013880 <xTimerGenericCommand>
 8013970:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013972:	693b      	ldr	r3, [r7, #16]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d113      	bne.n	80139a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8013978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801397c:	f383 8811 	msr	BASEPRI, r3
 8013980:	f3bf 8f6f 	isb	sy
 8013984:	f3bf 8f4f 	dsb	sy
 8013988:	60fb      	str	r3, [r7, #12]
}
 801398a:	bf00      	nop
 801398c:	e7fe      	b.n	801398c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801398e:	697b      	ldr	r3, [r7, #20]
 8013990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013994:	f023 0301 	bic.w	r3, r3, #1
 8013998:	b2da      	uxtb	r2, r3
 801399a:	697b      	ldr	r3, [r7, #20]
 801399c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80139a0:	697b      	ldr	r3, [r7, #20]
 80139a2:	6a1b      	ldr	r3, [r3, #32]
 80139a4:	6978      	ldr	r0, [r7, #20]
 80139a6:	4798      	blx	r3
}
 80139a8:	bf00      	nop
 80139aa:	3718      	adds	r7, #24
 80139ac:	46bd      	mov	sp, r7
 80139ae:	bd80      	pop	{r7, pc}
 80139b0:	24001860 	.word	0x24001860

080139b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b084      	sub	sp, #16
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80139bc:	f107 0308 	add.w	r3, r7, #8
 80139c0:	4618      	mov	r0, r3
 80139c2:	f000 f857 	bl	8013a74 <prvGetNextExpireTime>
 80139c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80139c8:	68bb      	ldr	r3, [r7, #8]
 80139ca:	4619      	mov	r1, r3
 80139cc:	68f8      	ldr	r0, [r7, #12]
 80139ce:	f000 f803 	bl	80139d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80139d2:	f000 f8d5 	bl	8013b80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80139d6:	e7f1      	b.n	80139bc <prvTimerTask+0x8>

080139d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80139d8:	b580      	push	{r7, lr}
 80139da:	b084      	sub	sp, #16
 80139dc:	af00      	add	r7, sp, #0
 80139de:	6078      	str	r0, [r7, #4]
 80139e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80139e2:	f7ff f98d 	bl	8012d00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80139e6:	f107 0308 	add.w	r3, r7, #8
 80139ea:	4618      	mov	r0, r3
 80139ec:	f000 f866 	bl	8013abc <prvSampleTimeNow>
 80139f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80139f2:	68bb      	ldr	r3, [r7, #8]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d130      	bne.n	8013a5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80139f8:	683b      	ldr	r3, [r7, #0]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d10a      	bne.n	8013a14 <prvProcessTimerOrBlockTask+0x3c>
 80139fe:	687a      	ldr	r2, [r7, #4]
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	429a      	cmp	r2, r3
 8013a04:	d806      	bhi.n	8013a14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013a06:	f7ff f989 	bl	8012d1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013a0a:	68f9      	ldr	r1, [r7, #12]
 8013a0c:	6878      	ldr	r0, [r7, #4]
 8013a0e:	f7ff ff85 	bl	801391c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013a12:	e024      	b.n	8013a5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013a14:	683b      	ldr	r3, [r7, #0]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d008      	beq.n	8013a2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013a1a:	4b13      	ldr	r3, [pc, #76]	; (8013a68 <prvProcessTimerOrBlockTask+0x90>)
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d101      	bne.n	8013a28 <prvProcessTimerOrBlockTask+0x50>
 8013a24:	2301      	movs	r3, #1
 8013a26:	e000      	b.n	8013a2a <prvProcessTimerOrBlockTask+0x52>
 8013a28:	2300      	movs	r3, #0
 8013a2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013a2c:	4b0f      	ldr	r3, [pc, #60]	; (8013a6c <prvProcessTimerOrBlockTask+0x94>)
 8013a2e:	6818      	ldr	r0, [r3, #0]
 8013a30:	687a      	ldr	r2, [r7, #4]
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	1ad3      	subs	r3, r2, r3
 8013a36:	683a      	ldr	r2, [r7, #0]
 8013a38:	4619      	mov	r1, r3
 8013a3a:	f7fe fdd7 	bl	80125ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013a3e:	f7ff f96d 	bl	8012d1c <xTaskResumeAll>
 8013a42:	4603      	mov	r3, r0
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d10a      	bne.n	8013a5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013a48:	4b09      	ldr	r3, [pc, #36]	; (8013a70 <prvProcessTimerOrBlockTask+0x98>)
 8013a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a4e:	601a      	str	r2, [r3, #0]
 8013a50:	f3bf 8f4f 	dsb	sy
 8013a54:	f3bf 8f6f 	isb	sy
}
 8013a58:	e001      	b.n	8013a5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013a5a:	f7ff f95f 	bl	8012d1c <xTaskResumeAll>
}
 8013a5e:	bf00      	nop
 8013a60:	3710      	adds	r7, #16
 8013a62:	46bd      	mov	sp, r7
 8013a64:	bd80      	pop	{r7, pc}
 8013a66:	bf00      	nop
 8013a68:	24001864 	.word	0x24001864
 8013a6c:	24001868 	.word	0x24001868
 8013a70:	e000ed04 	.word	0xe000ed04

08013a74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013a74:	b480      	push	{r7}
 8013a76:	b085      	sub	sp, #20
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013a7c:	4b0e      	ldr	r3, [pc, #56]	; (8013ab8 <prvGetNextExpireTime+0x44>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d101      	bne.n	8013a8a <prvGetNextExpireTime+0x16>
 8013a86:	2201      	movs	r2, #1
 8013a88:	e000      	b.n	8013a8c <prvGetNextExpireTime+0x18>
 8013a8a:	2200      	movs	r2, #0
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d105      	bne.n	8013aa4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013a98:	4b07      	ldr	r3, [pc, #28]	; (8013ab8 <prvGetNextExpireTime+0x44>)
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	68db      	ldr	r3, [r3, #12]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	60fb      	str	r3, [r7, #12]
 8013aa2:	e001      	b.n	8013aa8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013aa8:	68fb      	ldr	r3, [r7, #12]
}
 8013aaa:	4618      	mov	r0, r3
 8013aac:	3714      	adds	r7, #20
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab4:	4770      	bx	lr
 8013ab6:	bf00      	nop
 8013ab8:	24001860 	.word	0x24001860

08013abc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013abc:	b580      	push	{r7, lr}
 8013abe:	b084      	sub	sp, #16
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013ac4:	f7ff f9c8 	bl	8012e58 <xTaskGetTickCount>
 8013ac8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013aca:	4b0b      	ldr	r3, [pc, #44]	; (8013af8 <prvSampleTimeNow+0x3c>)
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	68fa      	ldr	r2, [r7, #12]
 8013ad0:	429a      	cmp	r2, r3
 8013ad2:	d205      	bcs.n	8013ae0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013ad4:	f000 f936 	bl	8013d44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	2201      	movs	r2, #1
 8013adc:	601a      	str	r2, [r3, #0]
 8013ade:	e002      	b.n	8013ae6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	2200      	movs	r2, #0
 8013ae4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013ae6:	4a04      	ldr	r2, [pc, #16]	; (8013af8 <prvSampleTimeNow+0x3c>)
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013aec:	68fb      	ldr	r3, [r7, #12]
}
 8013aee:	4618      	mov	r0, r3
 8013af0:	3710      	adds	r7, #16
 8013af2:	46bd      	mov	sp, r7
 8013af4:	bd80      	pop	{r7, pc}
 8013af6:	bf00      	nop
 8013af8:	24001870 	.word	0x24001870

08013afc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b086      	sub	sp, #24
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	60f8      	str	r0, [r7, #12]
 8013b04:	60b9      	str	r1, [r7, #8]
 8013b06:	607a      	str	r2, [r7, #4]
 8013b08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	68ba      	ldr	r2, [r7, #8]
 8013b12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	68fa      	ldr	r2, [r7, #12]
 8013b18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013b1a:	68ba      	ldr	r2, [r7, #8]
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	429a      	cmp	r2, r3
 8013b20:	d812      	bhi.n	8013b48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013b22:	687a      	ldr	r2, [r7, #4]
 8013b24:	683b      	ldr	r3, [r7, #0]
 8013b26:	1ad2      	subs	r2, r2, r3
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	699b      	ldr	r3, [r3, #24]
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d302      	bcc.n	8013b36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013b30:	2301      	movs	r3, #1
 8013b32:	617b      	str	r3, [r7, #20]
 8013b34:	e01b      	b.n	8013b6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013b36:	4b10      	ldr	r3, [pc, #64]	; (8013b78 <prvInsertTimerInActiveList+0x7c>)
 8013b38:	681a      	ldr	r2, [r3, #0]
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	3304      	adds	r3, #4
 8013b3e:	4619      	mov	r1, r3
 8013b40:	4610      	mov	r0, r2
 8013b42:	f7fe f838 	bl	8011bb6 <vListInsert>
 8013b46:	e012      	b.n	8013b6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013b48:	687a      	ldr	r2, [r7, #4]
 8013b4a:	683b      	ldr	r3, [r7, #0]
 8013b4c:	429a      	cmp	r2, r3
 8013b4e:	d206      	bcs.n	8013b5e <prvInsertTimerInActiveList+0x62>
 8013b50:	68ba      	ldr	r2, [r7, #8]
 8013b52:	683b      	ldr	r3, [r7, #0]
 8013b54:	429a      	cmp	r2, r3
 8013b56:	d302      	bcc.n	8013b5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013b58:	2301      	movs	r3, #1
 8013b5a:	617b      	str	r3, [r7, #20]
 8013b5c:	e007      	b.n	8013b6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013b5e:	4b07      	ldr	r3, [pc, #28]	; (8013b7c <prvInsertTimerInActiveList+0x80>)
 8013b60:	681a      	ldr	r2, [r3, #0]
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	3304      	adds	r3, #4
 8013b66:	4619      	mov	r1, r3
 8013b68:	4610      	mov	r0, r2
 8013b6a:	f7fe f824 	bl	8011bb6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013b6e:	697b      	ldr	r3, [r7, #20]
}
 8013b70:	4618      	mov	r0, r3
 8013b72:	3718      	adds	r7, #24
 8013b74:	46bd      	mov	sp, r7
 8013b76:	bd80      	pop	{r7, pc}
 8013b78:	24001864 	.word	0x24001864
 8013b7c:	24001860 	.word	0x24001860

08013b80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b08e      	sub	sp, #56	; 0x38
 8013b84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013b86:	e0ca      	b.n	8013d1e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	da18      	bge.n	8013bc0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013b8e:	1d3b      	adds	r3, r7, #4
 8013b90:	3304      	adds	r3, #4
 8013b92:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d10a      	bne.n	8013bb0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8013b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b9e:	f383 8811 	msr	BASEPRI, r3
 8013ba2:	f3bf 8f6f 	isb	sy
 8013ba6:	f3bf 8f4f 	dsb	sy
 8013baa:	61fb      	str	r3, [r7, #28]
}
 8013bac:	bf00      	nop
 8013bae:	e7fe      	b.n	8013bae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bb6:	6850      	ldr	r0, [r2, #4]
 8013bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bba:	6892      	ldr	r2, [r2, #8]
 8013bbc:	4611      	mov	r1, r2
 8013bbe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	f2c0 80aa 	blt.w	8013d1c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bce:	695b      	ldr	r3, [r3, #20]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d004      	beq.n	8013bde <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bd6:	3304      	adds	r3, #4
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f7fe f825 	bl	8011c28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013bde:	463b      	mov	r3, r7
 8013be0:	4618      	mov	r0, r3
 8013be2:	f7ff ff6b 	bl	8013abc <prvSampleTimeNow>
 8013be6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	2b09      	cmp	r3, #9
 8013bec:	f200 8097 	bhi.w	8013d1e <prvProcessReceivedCommands+0x19e>
 8013bf0:	a201      	add	r2, pc, #4	; (adr r2, 8013bf8 <prvProcessReceivedCommands+0x78>)
 8013bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bf6:	bf00      	nop
 8013bf8:	08013c21 	.word	0x08013c21
 8013bfc:	08013c21 	.word	0x08013c21
 8013c00:	08013c21 	.word	0x08013c21
 8013c04:	08013c95 	.word	0x08013c95
 8013c08:	08013ca9 	.word	0x08013ca9
 8013c0c:	08013cf3 	.word	0x08013cf3
 8013c10:	08013c21 	.word	0x08013c21
 8013c14:	08013c21 	.word	0x08013c21
 8013c18:	08013c95 	.word	0x08013c95
 8013c1c:	08013ca9 	.word	0x08013ca9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c26:	f043 0301 	orr.w	r3, r3, #1
 8013c2a:	b2da      	uxtb	r2, r3
 8013c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013c32:	68ba      	ldr	r2, [r7, #8]
 8013c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c36:	699b      	ldr	r3, [r3, #24]
 8013c38:	18d1      	adds	r1, r2, r3
 8013c3a:	68bb      	ldr	r3, [r7, #8]
 8013c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c40:	f7ff ff5c 	bl	8013afc <prvInsertTimerInActiveList>
 8013c44:	4603      	mov	r3, r0
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d069      	beq.n	8013d1e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c4c:	6a1b      	ldr	r3, [r3, #32]
 8013c4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c58:	f003 0304 	and.w	r3, r3, #4
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d05e      	beq.n	8013d1e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013c60:	68ba      	ldr	r2, [r7, #8]
 8013c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c64:	699b      	ldr	r3, [r3, #24]
 8013c66:	441a      	add	r2, r3
 8013c68:	2300      	movs	r3, #0
 8013c6a:	9300      	str	r3, [sp, #0]
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	2100      	movs	r1, #0
 8013c70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c72:	f7ff fe05 	bl	8013880 <xTimerGenericCommand>
 8013c76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013c78:	6a3b      	ldr	r3, [r7, #32]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d14f      	bne.n	8013d1e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8013c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c82:	f383 8811 	msr	BASEPRI, r3
 8013c86:	f3bf 8f6f 	isb	sy
 8013c8a:	f3bf 8f4f 	dsb	sy
 8013c8e:	61bb      	str	r3, [r7, #24]
}
 8013c90:	bf00      	nop
 8013c92:	e7fe      	b.n	8013c92 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c9a:	f023 0301 	bic.w	r3, r3, #1
 8013c9e:	b2da      	uxtb	r2, r3
 8013ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ca2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013ca6:	e03a      	b.n	8013d1e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013caa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013cae:	f043 0301 	orr.w	r3, r3, #1
 8013cb2:	b2da      	uxtb	r2, r3
 8013cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013cba:	68ba      	ldr	r2, [r7, #8]
 8013cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cbe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cc2:	699b      	ldr	r3, [r3, #24]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d10a      	bne.n	8013cde <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8013cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ccc:	f383 8811 	msr	BASEPRI, r3
 8013cd0:	f3bf 8f6f 	isb	sy
 8013cd4:	f3bf 8f4f 	dsb	sy
 8013cd8:	617b      	str	r3, [r7, #20]
}
 8013cda:	bf00      	nop
 8013cdc:	e7fe      	b.n	8013cdc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ce0:	699a      	ldr	r2, [r3, #24]
 8013ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ce4:	18d1      	adds	r1, r2, r3
 8013ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013cec:	f7ff ff06 	bl	8013afc <prvInsertTimerInActiveList>
					break;
 8013cf0:	e015      	b.n	8013d1e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013cf8:	f003 0302 	and.w	r3, r3, #2
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d103      	bne.n	8013d08 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8013d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d02:	f000 fbfd 	bl	8014500 <vPortFree>
 8013d06:	e00a      	b.n	8013d1e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d0e:	f023 0301 	bic.w	r3, r3, #1
 8013d12:	b2da      	uxtb	r2, r3
 8013d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013d1a:	e000      	b.n	8013d1e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013d1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013d1e:	4b08      	ldr	r3, [pc, #32]	; (8013d40 <prvProcessReceivedCommands+0x1c0>)
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	1d39      	adds	r1, r7, #4
 8013d24:	2200      	movs	r2, #0
 8013d26:	4618      	mov	r0, r3
 8013d28:	f7fe fa46 	bl	80121b8 <xQueueReceive>
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	f47f af2a 	bne.w	8013b88 <prvProcessReceivedCommands+0x8>
	}
}
 8013d34:	bf00      	nop
 8013d36:	bf00      	nop
 8013d38:	3730      	adds	r7, #48	; 0x30
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	bd80      	pop	{r7, pc}
 8013d3e:	bf00      	nop
 8013d40:	24001868 	.word	0x24001868

08013d44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b088      	sub	sp, #32
 8013d48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013d4a:	e048      	b.n	8013dde <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013d4c:	4b2d      	ldr	r3, [pc, #180]	; (8013e04 <prvSwitchTimerLists+0xc0>)
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	68db      	ldr	r3, [r3, #12]
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d56:	4b2b      	ldr	r3, [pc, #172]	; (8013e04 <prvSwitchTimerLists+0xc0>)
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	68db      	ldr	r3, [r3, #12]
 8013d5c:	68db      	ldr	r3, [r3, #12]
 8013d5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	3304      	adds	r3, #4
 8013d64:	4618      	mov	r0, r3
 8013d66:	f7fd ff5f 	bl	8011c28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	6a1b      	ldr	r3, [r3, #32]
 8013d6e:	68f8      	ldr	r0, [r7, #12]
 8013d70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d78:	f003 0304 	and.w	r3, r3, #4
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d02e      	beq.n	8013dde <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	699b      	ldr	r3, [r3, #24]
 8013d84:	693a      	ldr	r2, [r7, #16]
 8013d86:	4413      	add	r3, r2
 8013d88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013d8a:	68ba      	ldr	r2, [r7, #8]
 8013d8c:	693b      	ldr	r3, [r7, #16]
 8013d8e:	429a      	cmp	r2, r3
 8013d90:	d90e      	bls.n	8013db0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	68ba      	ldr	r2, [r7, #8]
 8013d96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	68fa      	ldr	r2, [r7, #12]
 8013d9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013d9e:	4b19      	ldr	r3, [pc, #100]	; (8013e04 <prvSwitchTimerLists+0xc0>)
 8013da0:	681a      	ldr	r2, [r3, #0]
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	3304      	adds	r3, #4
 8013da6:	4619      	mov	r1, r3
 8013da8:	4610      	mov	r0, r2
 8013daa:	f7fd ff04 	bl	8011bb6 <vListInsert>
 8013dae:	e016      	b.n	8013dde <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013db0:	2300      	movs	r3, #0
 8013db2:	9300      	str	r3, [sp, #0]
 8013db4:	2300      	movs	r3, #0
 8013db6:	693a      	ldr	r2, [r7, #16]
 8013db8:	2100      	movs	r1, #0
 8013dba:	68f8      	ldr	r0, [r7, #12]
 8013dbc:	f7ff fd60 	bl	8013880 <xTimerGenericCommand>
 8013dc0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d10a      	bne.n	8013dde <prvSwitchTimerLists+0x9a>
	__asm volatile
 8013dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dcc:	f383 8811 	msr	BASEPRI, r3
 8013dd0:	f3bf 8f6f 	isb	sy
 8013dd4:	f3bf 8f4f 	dsb	sy
 8013dd8:	603b      	str	r3, [r7, #0]
}
 8013dda:	bf00      	nop
 8013ddc:	e7fe      	b.n	8013ddc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013dde:	4b09      	ldr	r3, [pc, #36]	; (8013e04 <prvSwitchTimerLists+0xc0>)
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d1b1      	bne.n	8013d4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013de8:	4b06      	ldr	r3, [pc, #24]	; (8013e04 <prvSwitchTimerLists+0xc0>)
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013dee:	4b06      	ldr	r3, [pc, #24]	; (8013e08 <prvSwitchTimerLists+0xc4>)
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	4a04      	ldr	r2, [pc, #16]	; (8013e04 <prvSwitchTimerLists+0xc0>)
 8013df4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013df6:	4a04      	ldr	r2, [pc, #16]	; (8013e08 <prvSwitchTimerLists+0xc4>)
 8013df8:	697b      	ldr	r3, [r7, #20]
 8013dfa:	6013      	str	r3, [r2, #0]
}
 8013dfc:	bf00      	nop
 8013dfe:	3718      	adds	r7, #24
 8013e00:	46bd      	mov	sp, r7
 8013e02:	bd80      	pop	{r7, pc}
 8013e04:	24001860 	.word	0x24001860
 8013e08:	24001864 	.word	0x24001864

08013e0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	b082      	sub	sp, #8
 8013e10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013e12:	f000 f987 	bl	8014124 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013e16:	4b15      	ldr	r3, [pc, #84]	; (8013e6c <prvCheckForValidListAndQueue+0x60>)
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d120      	bne.n	8013e60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013e1e:	4814      	ldr	r0, [pc, #80]	; (8013e70 <prvCheckForValidListAndQueue+0x64>)
 8013e20:	f7fd fe78 	bl	8011b14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013e24:	4813      	ldr	r0, [pc, #76]	; (8013e74 <prvCheckForValidListAndQueue+0x68>)
 8013e26:	f7fd fe75 	bl	8011b14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013e2a:	4b13      	ldr	r3, [pc, #76]	; (8013e78 <prvCheckForValidListAndQueue+0x6c>)
 8013e2c:	4a10      	ldr	r2, [pc, #64]	; (8013e70 <prvCheckForValidListAndQueue+0x64>)
 8013e2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013e30:	4b12      	ldr	r3, [pc, #72]	; (8013e7c <prvCheckForValidListAndQueue+0x70>)
 8013e32:	4a10      	ldr	r2, [pc, #64]	; (8013e74 <prvCheckForValidListAndQueue+0x68>)
 8013e34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013e36:	2300      	movs	r3, #0
 8013e38:	9300      	str	r3, [sp, #0]
 8013e3a:	4b11      	ldr	r3, [pc, #68]	; (8013e80 <prvCheckForValidListAndQueue+0x74>)
 8013e3c:	4a11      	ldr	r2, [pc, #68]	; (8013e84 <prvCheckForValidListAndQueue+0x78>)
 8013e3e:	2110      	movs	r1, #16
 8013e40:	200a      	movs	r0, #10
 8013e42:	f7fd ff83 	bl	8011d4c <xQueueGenericCreateStatic>
 8013e46:	4603      	mov	r3, r0
 8013e48:	4a08      	ldr	r2, [pc, #32]	; (8013e6c <prvCheckForValidListAndQueue+0x60>)
 8013e4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013e4c:	4b07      	ldr	r3, [pc, #28]	; (8013e6c <prvCheckForValidListAndQueue+0x60>)
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d005      	beq.n	8013e60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013e54:	4b05      	ldr	r3, [pc, #20]	; (8013e6c <prvCheckForValidListAndQueue+0x60>)
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	490b      	ldr	r1, [pc, #44]	; (8013e88 <prvCheckForValidListAndQueue+0x7c>)
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	f7fe fb9c 	bl	8012598 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013e60:	f000 f990 	bl	8014184 <vPortExitCritical>
}
 8013e64:	bf00      	nop
 8013e66:	46bd      	mov	sp, r7
 8013e68:	bd80      	pop	{r7, pc}
 8013e6a:	bf00      	nop
 8013e6c:	24001868 	.word	0x24001868
 8013e70:	24001838 	.word	0x24001838
 8013e74:	2400184c 	.word	0x2400184c
 8013e78:	24001860 	.word	0x24001860
 8013e7c:	24001864 	.word	0x24001864
 8013e80:	24001914 	.word	0x24001914
 8013e84:	24001874 	.word	0x24001874
 8013e88:	0801544c 	.word	0x0801544c

08013e8c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013e8c:	b580      	push	{r7, lr}
 8013e8e:	b08a      	sub	sp, #40	; 0x28
 8013e90:	af00      	add	r7, sp, #0
 8013e92:	60f8      	str	r0, [r7, #12]
 8013e94:	60b9      	str	r1, [r7, #8]
 8013e96:	607a      	str	r2, [r7, #4]
 8013e98:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8013e9a:	f06f 0301 	mvn.w	r3, #1
 8013e9e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8013ea4:	68bb      	ldr	r3, [r7, #8]
 8013ea6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013eac:	4b06      	ldr	r3, [pc, #24]	; (8013ec8 <xTimerPendFunctionCallFromISR+0x3c>)
 8013eae:	6818      	ldr	r0, [r3, #0]
 8013eb0:	f107 0114 	add.w	r1, r7, #20
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	683a      	ldr	r2, [r7, #0]
 8013eb8:	f7fe f8e2 	bl	8012080 <xQueueGenericSendFromISR>
 8013ebc:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8013ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	3728      	adds	r7, #40	; 0x28
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	bd80      	pop	{r7, pc}
 8013ec8:	24001868 	.word	0x24001868

08013ecc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013ecc:	b480      	push	{r7}
 8013ece:	b085      	sub	sp, #20
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	60f8      	str	r0, [r7, #12]
 8013ed4:	60b9      	str	r1, [r7, #8]
 8013ed6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	3b04      	subs	r3, #4
 8013edc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013ee4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	3b04      	subs	r3, #4
 8013eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013eec:	68bb      	ldr	r3, [r7, #8]
 8013eee:	f023 0201 	bic.w	r2, r3, #1
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	3b04      	subs	r3, #4
 8013efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013efc:	4a0c      	ldr	r2, [pc, #48]	; (8013f30 <pxPortInitialiseStack+0x64>)
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	3b14      	subs	r3, #20
 8013f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013f08:	687a      	ldr	r2, [r7, #4]
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	3b04      	subs	r3, #4
 8013f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	f06f 0202 	mvn.w	r2, #2
 8013f1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	3b20      	subs	r3, #32
 8013f20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013f22:	68fb      	ldr	r3, [r7, #12]
}
 8013f24:	4618      	mov	r0, r3
 8013f26:	3714      	adds	r7, #20
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f2e:	4770      	bx	lr
 8013f30:	08013f35 	.word	0x08013f35

08013f34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013f34:	b480      	push	{r7}
 8013f36:	b085      	sub	sp, #20
 8013f38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013f3e:	4b12      	ldr	r3, [pc, #72]	; (8013f88 <prvTaskExitError+0x54>)
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013f46:	d00a      	beq.n	8013f5e <prvTaskExitError+0x2a>
	__asm volatile
 8013f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f4c:	f383 8811 	msr	BASEPRI, r3
 8013f50:	f3bf 8f6f 	isb	sy
 8013f54:	f3bf 8f4f 	dsb	sy
 8013f58:	60fb      	str	r3, [r7, #12]
}
 8013f5a:	bf00      	nop
 8013f5c:	e7fe      	b.n	8013f5c <prvTaskExitError+0x28>
	__asm volatile
 8013f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f62:	f383 8811 	msr	BASEPRI, r3
 8013f66:	f3bf 8f6f 	isb	sy
 8013f6a:	f3bf 8f4f 	dsb	sy
 8013f6e:	60bb      	str	r3, [r7, #8]
}
 8013f70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013f72:	bf00      	nop
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d0fc      	beq.n	8013f74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013f7a:	bf00      	nop
 8013f7c:	bf00      	nop
 8013f7e:	3714      	adds	r7, #20
 8013f80:	46bd      	mov	sp, r7
 8013f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f86:	4770      	bx	lr
 8013f88:	24000098 	.word	0x24000098
 8013f8c:	00000000 	.word	0x00000000

08013f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013f90:	4b07      	ldr	r3, [pc, #28]	; (8013fb0 <pxCurrentTCBConst2>)
 8013f92:	6819      	ldr	r1, [r3, #0]
 8013f94:	6808      	ldr	r0, [r1, #0]
 8013f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f9a:	f380 8809 	msr	PSP, r0
 8013f9e:	f3bf 8f6f 	isb	sy
 8013fa2:	f04f 0000 	mov.w	r0, #0
 8013fa6:	f380 8811 	msr	BASEPRI, r0
 8013faa:	4770      	bx	lr
 8013fac:	f3af 8000 	nop.w

08013fb0 <pxCurrentTCBConst2>:
 8013fb0:	24001338 	.word	0x24001338
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013fb4:	bf00      	nop
 8013fb6:	bf00      	nop

08013fb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013fb8:	4808      	ldr	r0, [pc, #32]	; (8013fdc <prvPortStartFirstTask+0x24>)
 8013fba:	6800      	ldr	r0, [r0, #0]
 8013fbc:	6800      	ldr	r0, [r0, #0]
 8013fbe:	f380 8808 	msr	MSP, r0
 8013fc2:	f04f 0000 	mov.w	r0, #0
 8013fc6:	f380 8814 	msr	CONTROL, r0
 8013fca:	b662      	cpsie	i
 8013fcc:	b661      	cpsie	f
 8013fce:	f3bf 8f4f 	dsb	sy
 8013fd2:	f3bf 8f6f 	isb	sy
 8013fd6:	df00      	svc	0
 8013fd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013fda:	bf00      	nop
 8013fdc:	e000ed08 	.word	0xe000ed08

08013fe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b086      	sub	sp, #24
 8013fe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013fe6:	4b46      	ldr	r3, [pc, #280]	; (8014100 <xPortStartScheduler+0x120>)
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	4a46      	ldr	r2, [pc, #280]	; (8014104 <xPortStartScheduler+0x124>)
 8013fec:	4293      	cmp	r3, r2
 8013fee:	d10a      	bne.n	8014006 <xPortStartScheduler+0x26>
	__asm volatile
 8013ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ff4:	f383 8811 	msr	BASEPRI, r3
 8013ff8:	f3bf 8f6f 	isb	sy
 8013ffc:	f3bf 8f4f 	dsb	sy
 8014000:	613b      	str	r3, [r7, #16]
}
 8014002:	bf00      	nop
 8014004:	e7fe      	b.n	8014004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014006:	4b3e      	ldr	r3, [pc, #248]	; (8014100 <xPortStartScheduler+0x120>)
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	4a3f      	ldr	r2, [pc, #252]	; (8014108 <xPortStartScheduler+0x128>)
 801400c:	4293      	cmp	r3, r2
 801400e:	d10a      	bne.n	8014026 <xPortStartScheduler+0x46>
	__asm volatile
 8014010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014014:	f383 8811 	msr	BASEPRI, r3
 8014018:	f3bf 8f6f 	isb	sy
 801401c:	f3bf 8f4f 	dsb	sy
 8014020:	60fb      	str	r3, [r7, #12]
}
 8014022:	bf00      	nop
 8014024:	e7fe      	b.n	8014024 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014026:	4b39      	ldr	r3, [pc, #228]	; (801410c <xPortStartScheduler+0x12c>)
 8014028:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801402a:	697b      	ldr	r3, [r7, #20]
 801402c:	781b      	ldrb	r3, [r3, #0]
 801402e:	b2db      	uxtb	r3, r3
 8014030:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014032:	697b      	ldr	r3, [r7, #20]
 8014034:	22ff      	movs	r2, #255	; 0xff
 8014036:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014038:	697b      	ldr	r3, [r7, #20]
 801403a:	781b      	ldrb	r3, [r3, #0]
 801403c:	b2db      	uxtb	r3, r3
 801403e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014040:	78fb      	ldrb	r3, [r7, #3]
 8014042:	b2db      	uxtb	r3, r3
 8014044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014048:	b2da      	uxtb	r2, r3
 801404a:	4b31      	ldr	r3, [pc, #196]	; (8014110 <xPortStartScheduler+0x130>)
 801404c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801404e:	4b31      	ldr	r3, [pc, #196]	; (8014114 <xPortStartScheduler+0x134>)
 8014050:	2207      	movs	r2, #7
 8014052:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014054:	e009      	b.n	801406a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014056:	4b2f      	ldr	r3, [pc, #188]	; (8014114 <xPortStartScheduler+0x134>)
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	3b01      	subs	r3, #1
 801405c:	4a2d      	ldr	r2, [pc, #180]	; (8014114 <xPortStartScheduler+0x134>)
 801405e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014060:	78fb      	ldrb	r3, [r7, #3]
 8014062:	b2db      	uxtb	r3, r3
 8014064:	005b      	lsls	r3, r3, #1
 8014066:	b2db      	uxtb	r3, r3
 8014068:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801406a:	78fb      	ldrb	r3, [r7, #3]
 801406c:	b2db      	uxtb	r3, r3
 801406e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014072:	2b80      	cmp	r3, #128	; 0x80
 8014074:	d0ef      	beq.n	8014056 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014076:	4b27      	ldr	r3, [pc, #156]	; (8014114 <xPortStartScheduler+0x134>)
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	f1c3 0307 	rsb	r3, r3, #7
 801407e:	2b04      	cmp	r3, #4
 8014080:	d00a      	beq.n	8014098 <xPortStartScheduler+0xb8>
	__asm volatile
 8014082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014086:	f383 8811 	msr	BASEPRI, r3
 801408a:	f3bf 8f6f 	isb	sy
 801408e:	f3bf 8f4f 	dsb	sy
 8014092:	60bb      	str	r3, [r7, #8]
}
 8014094:	bf00      	nop
 8014096:	e7fe      	b.n	8014096 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014098:	4b1e      	ldr	r3, [pc, #120]	; (8014114 <xPortStartScheduler+0x134>)
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	021b      	lsls	r3, r3, #8
 801409e:	4a1d      	ldr	r2, [pc, #116]	; (8014114 <xPortStartScheduler+0x134>)
 80140a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80140a2:	4b1c      	ldr	r3, [pc, #112]	; (8014114 <xPortStartScheduler+0x134>)
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80140aa:	4a1a      	ldr	r2, [pc, #104]	; (8014114 <xPortStartScheduler+0x134>)
 80140ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	b2da      	uxtb	r2, r3
 80140b2:	697b      	ldr	r3, [r7, #20]
 80140b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80140b6:	4b18      	ldr	r3, [pc, #96]	; (8014118 <xPortStartScheduler+0x138>)
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	4a17      	ldr	r2, [pc, #92]	; (8014118 <xPortStartScheduler+0x138>)
 80140bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80140c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80140c2:	4b15      	ldr	r3, [pc, #84]	; (8014118 <xPortStartScheduler+0x138>)
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	4a14      	ldr	r2, [pc, #80]	; (8014118 <xPortStartScheduler+0x138>)
 80140c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80140cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80140ce:	f000 f8dd 	bl	801428c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80140d2:	4b12      	ldr	r3, [pc, #72]	; (801411c <xPortStartScheduler+0x13c>)
 80140d4:	2200      	movs	r2, #0
 80140d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80140d8:	f000 f8fc 	bl	80142d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80140dc:	4b10      	ldr	r3, [pc, #64]	; (8014120 <xPortStartScheduler+0x140>)
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	4a0f      	ldr	r2, [pc, #60]	; (8014120 <xPortStartScheduler+0x140>)
 80140e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80140e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80140e8:	f7ff ff66 	bl	8013fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80140ec:	f7fe ff7e 	bl	8012fec <vTaskSwitchContext>
	prvTaskExitError();
 80140f0:	f7ff ff20 	bl	8013f34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80140f4:	2300      	movs	r3, #0
}
 80140f6:	4618      	mov	r0, r3
 80140f8:	3718      	adds	r7, #24
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bd80      	pop	{r7, pc}
 80140fe:	bf00      	nop
 8014100:	e000ed00 	.word	0xe000ed00
 8014104:	410fc271 	.word	0x410fc271
 8014108:	410fc270 	.word	0x410fc270
 801410c:	e000e400 	.word	0xe000e400
 8014110:	24001964 	.word	0x24001964
 8014114:	24001968 	.word	0x24001968
 8014118:	e000ed20 	.word	0xe000ed20
 801411c:	24000098 	.word	0x24000098
 8014120:	e000ef34 	.word	0xe000ef34

08014124 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014124:	b480      	push	{r7}
 8014126:	b083      	sub	sp, #12
 8014128:	af00      	add	r7, sp, #0
	__asm volatile
 801412a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801412e:	f383 8811 	msr	BASEPRI, r3
 8014132:	f3bf 8f6f 	isb	sy
 8014136:	f3bf 8f4f 	dsb	sy
 801413a:	607b      	str	r3, [r7, #4]
}
 801413c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801413e:	4b0f      	ldr	r3, [pc, #60]	; (801417c <vPortEnterCritical+0x58>)
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	3301      	adds	r3, #1
 8014144:	4a0d      	ldr	r2, [pc, #52]	; (801417c <vPortEnterCritical+0x58>)
 8014146:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014148:	4b0c      	ldr	r3, [pc, #48]	; (801417c <vPortEnterCritical+0x58>)
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	2b01      	cmp	r3, #1
 801414e:	d10f      	bne.n	8014170 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014150:	4b0b      	ldr	r3, [pc, #44]	; (8014180 <vPortEnterCritical+0x5c>)
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	b2db      	uxtb	r3, r3
 8014156:	2b00      	cmp	r3, #0
 8014158:	d00a      	beq.n	8014170 <vPortEnterCritical+0x4c>
	__asm volatile
 801415a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801415e:	f383 8811 	msr	BASEPRI, r3
 8014162:	f3bf 8f6f 	isb	sy
 8014166:	f3bf 8f4f 	dsb	sy
 801416a:	603b      	str	r3, [r7, #0]
}
 801416c:	bf00      	nop
 801416e:	e7fe      	b.n	801416e <vPortEnterCritical+0x4a>
	}
}
 8014170:	bf00      	nop
 8014172:	370c      	adds	r7, #12
 8014174:	46bd      	mov	sp, r7
 8014176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801417a:	4770      	bx	lr
 801417c:	24000098 	.word	0x24000098
 8014180:	e000ed04 	.word	0xe000ed04

08014184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014184:	b480      	push	{r7}
 8014186:	b083      	sub	sp, #12
 8014188:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801418a:	4b12      	ldr	r3, [pc, #72]	; (80141d4 <vPortExitCritical+0x50>)
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d10a      	bne.n	80141a8 <vPortExitCritical+0x24>
	__asm volatile
 8014192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014196:	f383 8811 	msr	BASEPRI, r3
 801419a:	f3bf 8f6f 	isb	sy
 801419e:	f3bf 8f4f 	dsb	sy
 80141a2:	607b      	str	r3, [r7, #4]
}
 80141a4:	bf00      	nop
 80141a6:	e7fe      	b.n	80141a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80141a8:	4b0a      	ldr	r3, [pc, #40]	; (80141d4 <vPortExitCritical+0x50>)
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	3b01      	subs	r3, #1
 80141ae:	4a09      	ldr	r2, [pc, #36]	; (80141d4 <vPortExitCritical+0x50>)
 80141b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80141b2:	4b08      	ldr	r3, [pc, #32]	; (80141d4 <vPortExitCritical+0x50>)
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d105      	bne.n	80141c6 <vPortExitCritical+0x42>
 80141ba:	2300      	movs	r3, #0
 80141bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80141be:	683b      	ldr	r3, [r7, #0]
 80141c0:	f383 8811 	msr	BASEPRI, r3
}
 80141c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80141c6:	bf00      	nop
 80141c8:	370c      	adds	r7, #12
 80141ca:	46bd      	mov	sp, r7
 80141cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d0:	4770      	bx	lr
 80141d2:	bf00      	nop
 80141d4:	24000098 	.word	0x24000098
	...

080141e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80141e0:	f3ef 8009 	mrs	r0, PSP
 80141e4:	f3bf 8f6f 	isb	sy
 80141e8:	4b15      	ldr	r3, [pc, #84]	; (8014240 <pxCurrentTCBConst>)
 80141ea:	681a      	ldr	r2, [r3, #0]
 80141ec:	f01e 0f10 	tst.w	lr, #16
 80141f0:	bf08      	it	eq
 80141f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80141f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141fa:	6010      	str	r0, [r2, #0]
 80141fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014200:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014204:	f380 8811 	msr	BASEPRI, r0
 8014208:	f3bf 8f4f 	dsb	sy
 801420c:	f3bf 8f6f 	isb	sy
 8014210:	f7fe feec 	bl	8012fec <vTaskSwitchContext>
 8014214:	f04f 0000 	mov.w	r0, #0
 8014218:	f380 8811 	msr	BASEPRI, r0
 801421c:	bc09      	pop	{r0, r3}
 801421e:	6819      	ldr	r1, [r3, #0]
 8014220:	6808      	ldr	r0, [r1, #0]
 8014222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014226:	f01e 0f10 	tst.w	lr, #16
 801422a:	bf08      	it	eq
 801422c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014230:	f380 8809 	msr	PSP, r0
 8014234:	f3bf 8f6f 	isb	sy
 8014238:	4770      	bx	lr
 801423a:	bf00      	nop
 801423c:	f3af 8000 	nop.w

08014240 <pxCurrentTCBConst>:
 8014240:	24001338 	.word	0x24001338
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014244:	bf00      	nop
 8014246:	bf00      	nop

08014248 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b082      	sub	sp, #8
 801424c:	af00      	add	r7, sp, #0
	__asm volatile
 801424e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014252:	f383 8811 	msr	BASEPRI, r3
 8014256:	f3bf 8f6f 	isb	sy
 801425a:	f3bf 8f4f 	dsb	sy
 801425e:	607b      	str	r3, [r7, #4]
}
 8014260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014262:	f7fe fe09 	bl	8012e78 <xTaskIncrementTick>
 8014266:	4603      	mov	r3, r0
 8014268:	2b00      	cmp	r3, #0
 801426a:	d003      	beq.n	8014274 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801426c:	4b06      	ldr	r3, [pc, #24]	; (8014288 <xPortSysTickHandler+0x40>)
 801426e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014272:	601a      	str	r2, [r3, #0]
 8014274:	2300      	movs	r3, #0
 8014276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014278:	683b      	ldr	r3, [r7, #0]
 801427a:	f383 8811 	msr	BASEPRI, r3
}
 801427e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014280:	bf00      	nop
 8014282:	3708      	adds	r7, #8
 8014284:	46bd      	mov	sp, r7
 8014286:	bd80      	pop	{r7, pc}
 8014288:	e000ed04 	.word	0xe000ed04

0801428c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801428c:	b480      	push	{r7}
 801428e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014290:	4b0b      	ldr	r3, [pc, #44]	; (80142c0 <vPortSetupTimerInterrupt+0x34>)
 8014292:	2200      	movs	r2, #0
 8014294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014296:	4b0b      	ldr	r3, [pc, #44]	; (80142c4 <vPortSetupTimerInterrupt+0x38>)
 8014298:	2200      	movs	r2, #0
 801429a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801429c:	4b0a      	ldr	r3, [pc, #40]	; (80142c8 <vPortSetupTimerInterrupt+0x3c>)
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	4a0a      	ldr	r2, [pc, #40]	; (80142cc <vPortSetupTimerInterrupt+0x40>)
 80142a2:	fba2 2303 	umull	r2, r3, r2, r3
 80142a6:	099b      	lsrs	r3, r3, #6
 80142a8:	4a09      	ldr	r2, [pc, #36]	; (80142d0 <vPortSetupTimerInterrupt+0x44>)
 80142aa:	3b01      	subs	r3, #1
 80142ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80142ae:	4b04      	ldr	r3, [pc, #16]	; (80142c0 <vPortSetupTimerInterrupt+0x34>)
 80142b0:	2207      	movs	r2, #7
 80142b2:	601a      	str	r2, [r3, #0]
}
 80142b4:	bf00      	nop
 80142b6:	46bd      	mov	sp, r7
 80142b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142bc:	4770      	bx	lr
 80142be:	bf00      	nop
 80142c0:	e000e010 	.word	0xe000e010
 80142c4:	e000e018 	.word	0xe000e018
 80142c8:	24000088 	.word	0x24000088
 80142cc:	10624dd3 	.word	0x10624dd3
 80142d0:	e000e014 	.word	0xe000e014

080142d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80142d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80142e4 <vPortEnableVFP+0x10>
 80142d8:	6801      	ldr	r1, [r0, #0]
 80142da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80142de:	6001      	str	r1, [r0, #0]
 80142e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80142e2:	bf00      	nop
 80142e4:	e000ed88 	.word	0xe000ed88

080142e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80142e8:	b480      	push	{r7}
 80142ea:	b085      	sub	sp, #20
 80142ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80142ee:	f3ef 8305 	mrs	r3, IPSR
 80142f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	2b0f      	cmp	r3, #15
 80142f8:	d914      	bls.n	8014324 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80142fa:	4a17      	ldr	r2, [pc, #92]	; (8014358 <vPortValidateInterruptPriority+0x70>)
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	4413      	add	r3, r2
 8014300:	781b      	ldrb	r3, [r3, #0]
 8014302:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014304:	4b15      	ldr	r3, [pc, #84]	; (801435c <vPortValidateInterruptPriority+0x74>)
 8014306:	781b      	ldrb	r3, [r3, #0]
 8014308:	7afa      	ldrb	r2, [r7, #11]
 801430a:	429a      	cmp	r2, r3
 801430c:	d20a      	bcs.n	8014324 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014312:	f383 8811 	msr	BASEPRI, r3
 8014316:	f3bf 8f6f 	isb	sy
 801431a:	f3bf 8f4f 	dsb	sy
 801431e:	607b      	str	r3, [r7, #4]
}
 8014320:	bf00      	nop
 8014322:	e7fe      	b.n	8014322 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014324:	4b0e      	ldr	r3, [pc, #56]	; (8014360 <vPortValidateInterruptPriority+0x78>)
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801432c:	4b0d      	ldr	r3, [pc, #52]	; (8014364 <vPortValidateInterruptPriority+0x7c>)
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	429a      	cmp	r2, r3
 8014332:	d90a      	bls.n	801434a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014338:	f383 8811 	msr	BASEPRI, r3
 801433c:	f3bf 8f6f 	isb	sy
 8014340:	f3bf 8f4f 	dsb	sy
 8014344:	603b      	str	r3, [r7, #0]
}
 8014346:	bf00      	nop
 8014348:	e7fe      	b.n	8014348 <vPortValidateInterruptPriority+0x60>
	}
 801434a:	bf00      	nop
 801434c:	3714      	adds	r7, #20
 801434e:	46bd      	mov	sp, r7
 8014350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014354:	4770      	bx	lr
 8014356:	bf00      	nop
 8014358:	e000e3f0 	.word	0xe000e3f0
 801435c:	24001964 	.word	0x24001964
 8014360:	e000ed0c 	.word	0xe000ed0c
 8014364:	24001968 	.word	0x24001968

08014368 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014368:	b580      	push	{r7, lr}
 801436a:	b08a      	sub	sp, #40	; 0x28
 801436c:	af00      	add	r7, sp, #0
 801436e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014370:	2300      	movs	r3, #0
 8014372:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014374:	f7fe fcc4 	bl	8012d00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014378:	4b5b      	ldr	r3, [pc, #364]	; (80144e8 <pvPortMalloc+0x180>)
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d101      	bne.n	8014384 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014380:	f000 f920 	bl	80145c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014384:	4b59      	ldr	r3, [pc, #356]	; (80144ec <pvPortMalloc+0x184>)
 8014386:	681a      	ldr	r2, [r3, #0]
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	4013      	ands	r3, r2
 801438c:	2b00      	cmp	r3, #0
 801438e:	f040 8093 	bne.w	80144b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	2b00      	cmp	r3, #0
 8014396:	d01d      	beq.n	80143d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014398:	2208      	movs	r2, #8
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	4413      	add	r3, r2
 801439e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	f003 0307 	and.w	r3, r3, #7
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d014      	beq.n	80143d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	f023 0307 	bic.w	r3, r3, #7
 80143b0:	3308      	adds	r3, #8
 80143b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	f003 0307 	and.w	r3, r3, #7
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d00a      	beq.n	80143d4 <pvPortMalloc+0x6c>
	__asm volatile
 80143be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143c2:	f383 8811 	msr	BASEPRI, r3
 80143c6:	f3bf 8f6f 	isb	sy
 80143ca:	f3bf 8f4f 	dsb	sy
 80143ce:	617b      	str	r3, [r7, #20]
}
 80143d0:	bf00      	nop
 80143d2:	e7fe      	b.n	80143d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d06e      	beq.n	80144b8 <pvPortMalloc+0x150>
 80143da:	4b45      	ldr	r3, [pc, #276]	; (80144f0 <pvPortMalloc+0x188>)
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	687a      	ldr	r2, [r7, #4]
 80143e0:	429a      	cmp	r2, r3
 80143e2:	d869      	bhi.n	80144b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80143e4:	4b43      	ldr	r3, [pc, #268]	; (80144f4 <pvPortMalloc+0x18c>)
 80143e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80143e8:	4b42      	ldr	r3, [pc, #264]	; (80144f4 <pvPortMalloc+0x18c>)
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80143ee:	e004      	b.n	80143fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80143f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80143f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80143fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143fc:	685b      	ldr	r3, [r3, #4]
 80143fe:	687a      	ldr	r2, [r7, #4]
 8014400:	429a      	cmp	r2, r3
 8014402:	d903      	bls.n	801440c <pvPortMalloc+0xa4>
 8014404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d1f1      	bne.n	80143f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801440c:	4b36      	ldr	r3, [pc, #216]	; (80144e8 <pvPortMalloc+0x180>)
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014412:	429a      	cmp	r2, r3
 8014414:	d050      	beq.n	80144b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014416:	6a3b      	ldr	r3, [r7, #32]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	2208      	movs	r2, #8
 801441c:	4413      	add	r3, r2
 801441e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014422:	681a      	ldr	r2, [r3, #0]
 8014424:	6a3b      	ldr	r3, [r7, #32]
 8014426:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801442a:	685a      	ldr	r2, [r3, #4]
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	1ad2      	subs	r2, r2, r3
 8014430:	2308      	movs	r3, #8
 8014432:	005b      	lsls	r3, r3, #1
 8014434:	429a      	cmp	r2, r3
 8014436:	d91f      	bls.n	8014478 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	4413      	add	r3, r2
 801443e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014440:	69bb      	ldr	r3, [r7, #24]
 8014442:	f003 0307 	and.w	r3, r3, #7
 8014446:	2b00      	cmp	r3, #0
 8014448:	d00a      	beq.n	8014460 <pvPortMalloc+0xf8>
	__asm volatile
 801444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801444e:	f383 8811 	msr	BASEPRI, r3
 8014452:	f3bf 8f6f 	isb	sy
 8014456:	f3bf 8f4f 	dsb	sy
 801445a:	613b      	str	r3, [r7, #16]
}
 801445c:	bf00      	nop
 801445e:	e7fe      	b.n	801445e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014462:	685a      	ldr	r2, [r3, #4]
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	1ad2      	subs	r2, r2, r3
 8014468:	69bb      	ldr	r3, [r7, #24]
 801446a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801446e:	687a      	ldr	r2, [r7, #4]
 8014470:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014472:	69b8      	ldr	r0, [r7, #24]
 8014474:	f000 f908 	bl	8014688 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014478:	4b1d      	ldr	r3, [pc, #116]	; (80144f0 <pvPortMalloc+0x188>)
 801447a:	681a      	ldr	r2, [r3, #0]
 801447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801447e:	685b      	ldr	r3, [r3, #4]
 8014480:	1ad3      	subs	r3, r2, r3
 8014482:	4a1b      	ldr	r2, [pc, #108]	; (80144f0 <pvPortMalloc+0x188>)
 8014484:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014486:	4b1a      	ldr	r3, [pc, #104]	; (80144f0 <pvPortMalloc+0x188>)
 8014488:	681a      	ldr	r2, [r3, #0]
 801448a:	4b1b      	ldr	r3, [pc, #108]	; (80144f8 <pvPortMalloc+0x190>)
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	429a      	cmp	r2, r3
 8014490:	d203      	bcs.n	801449a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014492:	4b17      	ldr	r3, [pc, #92]	; (80144f0 <pvPortMalloc+0x188>)
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	4a18      	ldr	r2, [pc, #96]	; (80144f8 <pvPortMalloc+0x190>)
 8014498:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801449c:	685a      	ldr	r2, [r3, #4]
 801449e:	4b13      	ldr	r3, [pc, #76]	; (80144ec <pvPortMalloc+0x184>)
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	431a      	orrs	r2, r3
 80144a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80144a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144aa:	2200      	movs	r2, #0
 80144ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80144ae:	4b13      	ldr	r3, [pc, #76]	; (80144fc <pvPortMalloc+0x194>)
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	3301      	adds	r3, #1
 80144b4:	4a11      	ldr	r2, [pc, #68]	; (80144fc <pvPortMalloc+0x194>)
 80144b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80144b8:	f7fe fc30 	bl	8012d1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80144bc:	69fb      	ldr	r3, [r7, #28]
 80144be:	f003 0307 	and.w	r3, r3, #7
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d00a      	beq.n	80144dc <pvPortMalloc+0x174>
	__asm volatile
 80144c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144ca:	f383 8811 	msr	BASEPRI, r3
 80144ce:	f3bf 8f6f 	isb	sy
 80144d2:	f3bf 8f4f 	dsb	sy
 80144d6:	60fb      	str	r3, [r7, #12]
}
 80144d8:	bf00      	nop
 80144da:	e7fe      	b.n	80144da <pvPortMalloc+0x172>
	return pvReturn;
 80144dc:	69fb      	ldr	r3, [r7, #28]
}
 80144de:	4618      	mov	r0, r3
 80144e0:	3728      	adds	r7, #40	; 0x28
 80144e2:	46bd      	mov	sp, r7
 80144e4:	bd80      	pop	{r7, pc}
 80144e6:	bf00      	nop
 80144e8:	24005574 	.word	0x24005574
 80144ec:	24005588 	.word	0x24005588
 80144f0:	24005578 	.word	0x24005578
 80144f4:	2400556c 	.word	0x2400556c
 80144f8:	2400557c 	.word	0x2400557c
 80144fc:	24005580 	.word	0x24005580

08014500 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b086      	sub	sp, #24
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d04d      	beq.n	80145ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014512:	2308      	movs	r3, #8
 8014514:	425b      	negs	r3, r3
 8014516:	697a      	ldr	r2, [r7, #20]
 8014518:	4413      	add	r3, r2
 801451a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801451c:	697b      	ldr	r3, [r7, #20]
 801451e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014520:	693b      	ldr	r3, [r7, #16]
 8014522:	685a      	ldr	r2, [r3, #4]
 8014524:	4b24      	ldr	r3, [pc, #144]	; (80145b8 <vPortFree+0xb8>)
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	4013      	ands	r3, r2
 801452a:	2b00      	cmp	r3, #0
 801452c:	d10a      	bne.n	8014544 <vPortFree+0x44>
	__asm volatile
 801452e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014532:	f383 8811 	msr	BASEPRI, r3
 8014536:	f3bf 8f6f 	isb	sy
 801453a:	f3bf 8f4f 	dsb	sy
 801453e:	60fb      	str	r3, [r7, #12]
}
 8014540:	bf00      	nop
 8014542:	e7fe      	b.n	8014542 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014544:	693b      	ldr	r3, [r7, #16]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	2b00      	cmp	r3, #0
 801454a:	d00a      	beq.n	8014562 <vPortFree+0x62>
	__asm volatile
 801454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014550:	f383 8811 	msr	BASEPRI, r3
 8014554:	f3bf 8f6f 	isb	sy
 8014558:	f3bf 8f4f 	dsb	sy
 801455c:	60bb      	str	r3, [r7, #8]
}
 801455e:	bf00      	nop
 8014560:	e7fe      	b.n	8014560 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014562:	693b      	ldr	r3, [r7, #16]
 8014564:	685a      	ldr	r2, [r3, #4]
 8014566:	4b14      	ldr	r3, [pc, #80]	; (80145b8 <vPortFree+0xb8>)
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	4013      	ands	r3, r2
 801456c:	2b00      	cmp	r3, #0
 801456e:	d01e      	beq.n	80145ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014570:	693b      	ldr	r3, [r7, #16]
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d11a      	bne.n	80145ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014578:	693b      	ldr	r3, [r7, #16]
 801457a:	685a      	ldr	r2, [r3, #4]
 801457c:	4b0e      	ldr	r3, [pc, #56]	; (80145b8 <vPortFree+0xb8>)
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	43db      	mvns	r3, r3
 8014582:	401a      	ands	r2, r3
 8014584:	693b      	ldr	r3, [r7, #16]
 8014586:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014588:	f7fe fbba 	bl	8012d00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801458c:	693b      	ldr	r3, [r7, #16]
 801458e:	685a      	ldr	r2, [r3, #4]
 8014590:	4b0a      	ldr	r3, [pc, #40]	; (80145bc <vPortFree+0xbc>)
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	4413      	add	r3, r2
 8014596:	4a09      	ldr	r2, [pc, #36]	; (80145bc <vPortFree+0xbc>)
 8014598:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801459a:	6938      	ldr	r0, [r7, #16]
 801459c:	f000 f874 	bl	8014688 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80145a0:	4b07      	ldr	r3, [pc, #28]	; (80145c0 <vPortFree+0xc0>)
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	3301      	adds	r3, #1
 80145a6:	4a06      	ldr	r2, [pc, #24]	; (80145c0 <vPortFree+0xc0>)
 80145a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80145aa:	f7fe fbb7 	bl	8012d1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80145ae:	bf00      	nop
 80145b0:	3718      	adds	r7, #24
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bd80      	pop	{r7, pc}
 80145b6:	bf00      	nop
 80145b8:	24005588 	.word	0x24005588
 80145bc:	24005578 	.word	0x24005578
 80145c0:	24005584 	.word	0x24005584

080145c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80145c4:	b480      	push	{r7}
 80145c6:	b085      	sub	sp, #20
 80145c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80145ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80145ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80145d0:	4b27      	ldr	r3, [pc, #156]	; (8014670 <prvHeapInit+0xac>)
 80145d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	f003 0307 	and.w	r3, r3, #7
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d00c      	beq.n	80145f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	3307      	adds	r3, #7
 80145e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	f023 0307 	bic.w	r3, r3, #7
 80145ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80145ec:	68ba      	ldr	r2, [r7, #8]
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	1ad3      	subs	r3, r2, r3
 80145f2:	4a1f      	ldr	r2, [pc, #124]	; (8014670 <prvHeapInit+0xac>)
 80145f4:	4413      	add	r3, r2
 80145f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80145fc:	4a1d      	ldr	r2, [pc, #116]	; (8014674 <prvHeapInit+0xb0>)
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014602:	4b1c      	ldr	r3, [pc, #112]	; (8014674 <prvHeapInit+0xb0>)
 8014604:	2200      	movs	r2, #0
 8014606:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	68ba      	ldr	r2, [r7, #8]
 801460c:	4413      	add	r3, r2
 801460e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014610:	2208      	movs	r2, #8
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	1a9b      	subs	r3, r3, r2
 8014616:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	f023 0307 	bic.w	r3, r3, #7
 801461e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	4a15      	ldr	r2, [pc, #84]	; (8014678 <prvHeapInit+0xb4>)
 8014624:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014626:	4b14      	ldr	r3, [pc, #80]	; (8014678 <prvHeapInit+0xb4>)
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	2200      	movs	r2, #0
 801462c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801462e:	4b12      	ldr	r3, [pc, #72]	; (8014678 <prvHeapInit+0xb4>)
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	2200      	movs	r2, #0
 8014634:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801463a:	683b      	ldr	r3, [r7, #0]
 801463c:	68fa      	ldr	r2, [r7, #12]
 801463e:	1ad2      	subs	r2, r2, r3
 8014640:	683b      	ldr	r3, [r7, #0]
 8014642:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014644:	4b0c      	ldr	r3, [pc, #48]	; (8014678 <prvHeapInit+0xb4>)
 8014646:	681a      	ldr	r2, [r3, #0]
 8014648:	683b      	ldr	r3, [r7, #0]
 801464a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801464c:	683b      	ldr	r3, [r7, #0]
 801464e:	685b      	ldr	r3, [r3, #4]
 8014650:	4a0a      	ldr	r2, [pc, #40]	; (801467c <prvHeapInit+0xb8>)
 8014652:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014654:	683b      	ldr	r3, [r7, #0]
 8014656:	685b      	ldr	r3, [r3, #4]
 8014658:	4a09      	ldr	r2, [pc, #36]	; (8014680 <prvHeapInit+0xbc>)
 801465a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801465c:	4b09      	ldr	r3, [pc, #36]	; (8014684 <prvHeapInit+0xc0>)
 801465e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014662:	601a      	str	r2, [r3, #0]
}
 8014664:	bf00      	nop
 8014666:	3714      	adds	r7, #20
 8014668:	46bd      	mov	sp, r7
 801466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801466e:	4770      	bx	lr
 8014670:	2400196c 	.word	0x2400196c
 8014674:	2400556c 	.word	0x2400556c
 8014678:	24005574 	.word	0x24005574
 801467c:	2400557c 	.word	0x2400557c
 8014680:	24005578 	.word	0x24005578
 8014684:	24005588 	.word	0x24005588

08014688 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014688:	b480      	push	{r7}
 801468a:	b085      	sub	sp, #20
 801468c:	af00      	add	r7, sp, #0
 801468e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014690:	4b28      	ldr	r3, [pc, #160]	; (8014734 <prvInsertBlockIntoFreeList+0xac>)
 8014692:	60fb      	str	r3, [r7, #12]
 8014694:	e002      	b.n	801469c <prvInsertBlockIntoFreeList+0x14>
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	60fb      	str	r3, [r7, #12]
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	687a      	ldr	r2, [r7, #4]
 80146a2:	429a      	cmp	r2, r3
 80146a4:	d8f7      	bhi.n	8014696 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	685b      	ldr	r3, [r3, #4]
 80146ae:	68ba      	ldr	r2, [r7, #8]
 80146b0:	4413      	add	r3, r2
 80146b2:	687a      	ldr	r2, [r7, #4]
 80146b4:	429a      	cmp	r2, r3
 80146b6:	d108      	bne.n	80146ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	685a      	ldr	r2, [r3, #4]
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	685b      	ldr	r3, [r3, #4]
 80146c0:	441a      	add	r2, r3
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	685b      	ldr	r3, [r3, #4]
 80146d2:	68ba      	ldr	r2, [r7, #8]
 80146d4:	441a      	add	r2, r3
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	429a      	cmp	r2, r3
 80146dc:	d118      	bne.n	8014710 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	681a      	ldr	r2, [r3, #0]
 80146e2:	4b15      	ldr	r3, [pc, #84]	; (8014738 <prvInsertBlockIntoFreeList+0xb0>)
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	429a      	cmp	r2, r3
 80146e8:	d00d      	beq.n	8014706 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	685a      	ldr	r2, [r3, #4]
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	685b      	ldr	r3, [r3, #4]
 80146f4:	441a      	add	r2, r3
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	681a      	ldr	r2, [r3, #0]
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	601a      	str	r2, [r3, #0]
 8014704:	e008      	b.n	8014718 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014706:	4b0c      	ldr	r3, [pc, #48]	; (8014738 <prvInsertBlockIntoFreeList+0xb0>)
 8014708:	681a      	ldr	r2, [r3, #0]
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	601a      	str	r2, [r3, #0]
 801470e:	e003      	b.n	8014718 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	681a      	ldr	r2, [r3, #0]
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014718:	68fa      	ldr	r2, [r7, #12]
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	429a      	cmp	r2, r3
 801471e:	d002      	beq.n	8014726 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	687a      	ldr	r2, [r7, #4]
 8014724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014726:	bf00      	nop
 8014728:	3714      	adds	r7, #20
 801472a:	46bd      	mov	sp, r7
 801472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014730:	4770      	bx	lr
 8014732:	bf00      	nop
 8014734:	2400556c 	.word	0x2400556c
 8014738:	24005574 	.word	0x24005574

0801473c <__errno>:
 801473c:	4b01      	ldr	r3, [pc, #4]	; (8014744 <__errno+0x8>)
 801473e:	6818      	ldr	r0, [r3, #0]
 8014740:	4770      	bx	lr
 8014742:	bf00      	nop
 8014744:	2400009c 	.word	0x2400009c

08014748 <__libc_init_array>:
 8014748:	b570      	push	{r4, r5, r6, lr}
 801474a:	4d0d      	ldr	r5, [pc, #52]	; (8014780 <__libc_init_array+0x38>)
 801474c:	4c0d      	ldr	r4, [pc, #52]	; (8014784 <__libc_init_array+0x3c>)
 801474e:	1b64      	subs	r4, r4, r5
 8014750:	10a4      	asrs	r4, r4, #2
 8014752:	2600      	movs	r6, #0
 8014754:	42a6      	cmp	r6, r4
 8014756:	d109      	bne.n	801476c <__libc_init_array+0x24>
 8014758:	4d0b      	ldr	r5, [pc, #44]	; (8014788 <__libc_init_array+0x40>)
 801475a:	4c0c      	ldr	r4, [pc, #48]	; (801478c <__libc_init_array+0x44>)
 801475c:	f000 fd3c 	bl	80151d8 <_init>
 8014760:	1b64      	subs	r4, r4, r5
 8014762:	10a4      	asrs	r4, r4, #2
 8014764:	2600      	movs	r6, #0
 8014766:	42a6      	cmp	r6, r4
 8014768:	d105      	bne.n	8014776 <__libc_init_array+0x2e>
 801476a:	bd70      	pop	{r4, r5, r6, pc}
 801476c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014770:	4798      	blx	r3
 8014772:	3601      	adds	r6, #1
 8014774:	e7ee      	b.n	8014754 <__libc_init_array+0xc>
 8014776:	f855 3b04 	ldr.w	r3, [r5], #4
 801477a:	4798      	blx	r3
 801477c:	3601      	adds	r6, #1
 801477e:	e7f2      	b.n	8014766 <__libc_init_array+0x1e>
 8014780:	080155d8 	.word	0x080155d8
 8014784:	080155d8 	.word	0x080155d8
 8014788:	080155d8 	.word	0x080155d8
 801478c:	080155dc 	.word	0x080155dc

08014790 <malloc>:
 8014790:	4b02      	ldr	r3, [pc, #8]	; (801479c <malloc+0xc>)
 8014792:	4601      	mov	r1, r0
 8014794:	6818      	ldr	r0, [r3, #0]
 8014796:	f000 b88d 	b.w	80148b4 <_malloc_r>
 801479a:	bf00      	nop
 801479c:	2400009c 	.word	0x2400009c

080147a0 <free>:
 80147a0:	4b02      	ldr	r3, [pc, #8]	; (80147ac <free+0xc>)
 80147a2:	4601      	mov	r1, r0
 80147a4:	6818      	ldr	r0, [r3, #0]
 80147a6:	f000 b819 	b.w	80147dc <_free_r>
 80147aa:	bf00      	nop
 80147ac:	2400009c 	.word	0x2400009c

080147b0 <memcpy>:
 80147b0:	440a      	add	r2, r1
 80147b2:	4291      	cmp	r1, r2
 80147b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80147b8:	d100      	bne.n	80147bc <memcpy+0xc>
 80147ba:	4770      	bx	lr
 80147bc:	b510      	push	{r4, lr}
 80147be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80147c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80147c6:	4291      	cmp	r1, r2
 80147c8:	d1f9      	bne.n	80147be <memcpy+0xe>
 80147ca:	bd10      	pop	{r4, pc}

080147cc <memset>:
 80147cc:	4402      	add	r2, r0
 80147ce:	4603      	mov	r3, r0
 80147d0:	4293      	cmp	r3, r2
 80147d2:	d100      	bne.n	80147d6 <memset+0xa>
 80147d4:	4770      	bx	lr
 80147d6:	f803 1b01 	strb.w	r1, [r3], #1
 80147da:	e7f9      	b.n	80147d0 <memset+0x4>

080147dc <_free_r>:
 80147dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80147de:	2900      	cmp	r1, #0
 80147e0:	d044      	beq.n	801486c <_free_r+0x90>
 80147e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80147e6:	9001      	str	r0, [sp, #4]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	f1a1 0404 	sub.w	r4, r1, #4
 80147ee:	bfb8      	it	lt
 80147f0:	18e4      	addlt	r4, r4, r3
 80147f2:	f000 fc39 	bl	8015068 <__malloc_lock>
 80147f6:	4a1e      	ldr	r2, [pc, #120]	; (8014870 <_free_r+0x94>)
 80147f8:	9801      	ldr	r0, [sp, #4]
 80147fa:	6813      	ldr	r3, [r2, #0]
 80147fc:	b933      	cbnz	r3, 801480c <_free_r+0x30>
 80147fe:	6063      	str	r3, [r4, #4]
 8014800:	6014      	str	r4, [r2, #0]
 8014802:	b003      	add	sp, #12
 8014804:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014808:	f000 bc34 	b.w	8015074 <__malloc_unlock>
 801480c:	42a3      	cmp	r3, r4
 801480e:	d908      	bls.n	8014822 <_free_r+0x46>
 8014810:	6825      	ldr	r5, [r4, #0]
 8014812:	1961      	adds	r1, r4, r5
 8014814:	428b      	cmp	r3, r1
 8014816:	bf01      	itttt	eq
 8014818:	6819      	ldreq	r1, [r3, #0]
 801481a:	685b      	ldreq	r3, [r3, #4]
 801481c:	1949      	addeq	r1, r1, r5
 801481e:	6021      	streq	r1, [r4, #0]
 8014820:	e7ed      	b.n	80147fe <_free_r+0x22>
 8014822:	461a      	mov	r2, r3
 8014824:	685b      	ldr	r3, [r3, #4]
 8014826:	b10b      	cbz	r3, 801482c <_free_r+0x50>
 8014828:	42a3      	cmp	r3, r4
 801482a:	d9fa      	bls.n	8014822 <_free_r+0x46>
 801482c:	6811      	ldr	r1, [r2, #0]
 801482e:	1855      	adds	r5, r2, r1
 8014830:	42a5      	cmp	r5, r4
 8014832:	d10b      	bne.n	801484c <_free_r+0x70>
 8014834:	6824      	ldr	r4, [r4, #0]
 8014836:	4421      	add	r1, r4
 8014838:	1854      	adds	r4, r2, r1
 801483a:	42a3      	cmp	r3, r4
 801483c:	6011      	str	r1, [r2, #0]
 801483e:	d1e0      	bne.n	8014802 <_free_r+0x26>
 8014840:	681c      	ldr	r4, [r3, #0]
 8014842:	685b      	ldr	r3, [r3, #4]
 8014844:	6053      	str	r3, [r2, #4]
 8014846:	4421      	add	r1, r4
 8014848:	6011      	str	r1, [r2, #0]
 801484a:	e7da      	b.n	8014802 <_free_r+0x26>
 801484c:	d902      	bls.n	8014854 <_free_r+0x78>
 801484e:	230c      	movs	r3, #12
 8014850:	6003      	str	r3, [r0, #0]
 8014852:	e7d6      	b.n	8014802 <_free_r+0x26>
 8014854:	6825      	ldr	r5, [r4, #0]
 8014856:	1961      	adds	r1, r4, r5
 8014858:	428b      	cmp	r3, r1
 801485a:	bf04      	itt	eq
 801485c:	6819      	ldreq	r1, [r3, #0]
 801485e:	685b      	ldreq	r3, [r3, #4]
 8014860:	6063      	str	r3, [r4, #4]
 8014862:	bf04      	itt	eq
 8014864:	1949      	addeq	r1, r1, r5
 8014866:	6021      	streq	r1, [r4, #0]
 8014868:	6054      	str	r4, [r2, #4]
 801486a:	e7ca      	b.n	8014802 <_free_r+0x26>
 801486c:	b003      	add	sp, #12
 801486e:	bd30      	pop	{r4, r5, pc}
 8014870:	2400558c 	.word	0x2400558c

08014874 <sbrk_aligned>:
 8014874:	b570      	push	{r4, r5, r6, lr}
 8014876:	4e0e      	ldr	r6, [pc, #56]	; (80148b0 <sbrk_aligned+0x3c>)
 8014878:	460c      	mov	r4, r1
 801487a:	6831      	ldr	r1, [r6, #0]
 801487c:	4605      	mov	r5, r0
 801487e:	b911      	cbnz	r1, 8014886 <sbrk_aligned+0x12>
 8014880:	f000 f902 	bl	8014a88 <_sbrk_r>
 8014884:	6030      	str	r0, [r6, #0]
 8014886:	4621      	mov	r1, r4
 8014888:	4628      	mov	r0, r5
 801488a:	f000 f8fd 	bl	8014a88 <_sbrk_r>
 801488e:	1c43      	adds	r3, r0, #1
 8014890:	d00a      	beq.n	80148a8 <sbrk_aligned+0x34>
 8014892:	1cc4      	adds	r4, r0, #3
 8014894:	f024 0403 	bic.w	r4, r4, #3
 8014898:	42a0      	cmp	r0, r4
 801489a:	d007      	beq.n	80148ac <sbrk_aligned+0x38>
 801489c:	1a21      	subs	r1, r4, r0
 801489e:	4628      	mov	r0, r5
 80148a0:	f000 f8f2 	bl	8014a88 <_sbrk_r>
 80148a4:	3001      	adds	r0, #1
 80148a6:	d101      	bne.n	80148ac <sbrk_aligned+0x38>
 80148a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80148ac:	4620      	mov	r0, r4
 80148ae:	bd70      	pop	{r4, r5, r6, pc}
 80148b0:	24005590 	.word	0x24005590

080148b4 <_malloc_r>:
 80148b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148b8:	1ccd      	adds	r5, r1, #3
 80148ba:	f025 0503 	bic.w	r5, r5, #3
 80148be:	3508      	adds	r5, #8
 80148c0:	2d0c      	cmp	r5, #12
 80148c2:	bf38      	it	cc
 80148c4:	250c      	movcc	r5, #12
 80148c6:	2d00      	cmp	r5, #0
 80148c8:	4607      	mov	r7, r0
 80148ca:	db01      	blt.n	80148d0 <_malloc_r+0x1c>
 80148cc:	42a9      	cmp	r1, r5
 80148ce:	d905      	bls.n	80148dc <_malloc_r+0x28>
 80148d0:	230c      	movs	r3, #12
 80148d2:	603b      	str	r3, [r7, #0]
 80148d4:	2600      	movs	r6, #0
 80148d6:	4630      	mov	r0, r6
 80148d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148dc:	4e2e      	ldr	r6, [pc, #184]	; (8014998 <_malloc_r+0xe4>)
 80148de:	f000 fbc3 	bl	8015068 <__malloc_lock>
 80148e2:	6833      	ldr	r3, [r6, #0]
 80148e4:	461c      	mov	r4, r3
 80148e6:	bb34      	cbnz	r4, 8014936 <_malloc_r+0x82>
 80148e8:	4629      	mov	r1, r5
 80148ea:	4638      	mov	r0, r7
 80148ec:	f7ff ffc2 	bl	8014874 <sbrk_aligned>
 80148f0:	1c43      	adds	r3, r0, #1
 80148f2:	4604      	mov	r4, r0
 80148f4:	d14d      	bne.n	8014992 <_malloc_r+0xde>
 80148f6:	6834      	ldr	r4, [r6, #0]
 80148f8:	4626      	mov	r6, r4
 80148fa:	2e00      	cmp	r6, #0
 80148fc:	d140      	bne.n	8014980 <_malloc_r+0xcc>
 80148fe:	6823      	ldr	r3, [r4, #0]
 8014900:	4631      	mov	r1, r6
 8014902:	4638      	mov	r0, r7
 8014904:	eb04 0803 	add.w	r8, r4, r3
 8014908:	f000 f8be 	bl	8014a88 <_sbrk_r>
 801490c:	4580      	cmp	r8, r0
 801490e:	d13a      	bne.n	8014986 <_malloc_r+0xd2>
 8014910:	6821      	ldr	r1, [r4, #0]
 8014912:	3503      	adds	r5, #3
 8014914:	1a6d      	subs	r5, r5, r1
 8014916:	f025 0503 	bic.w	r5, r5, #3
 801491a:	3508      	adds	r5, #8
 801491c:	2d0c      	cmp	r5, #12
 801491e:	bf38      	it	cc
 8014920:	250c      	movcc	r5, #12
 8014922:	4629      	mov	r1, r5
 8014924:	4638      	mov	r0, r7
 8014926:	f7ff ffa5 	bl	8014874 <sbrk_aligned>
 801492a:	3001      	adds	r0, #1
 801492c:	d02b      	beq.n	8014986 <_malloc_r+0xd2>
 801492e:	6823      	ldr	r3, [r4, #0]
 8014930:	442b      	add	r3, r5
 8014932:	6023      	str	r3, [r4, #0]
 8014934:	e00e      	b.n	8014954 <_malloc_r+0xa0>
 8014936:	6822      	ldr	r2, [r4, #0]
 8014938:	1b52      	subs	r2, r2, r5
 801493a:	d41e      	bmi.n	801497a <_malloc_r+0xc6>
 801493c:	2a0b      	cmp	r2, #11
 801493e:	d916      	bls.n	801496e <_malloc_r+0xba>
 8014940:	1961      	adds	r1, r4, r5
 8014942:	42a3      	cmp	r3, r4
 8014944:	6025      	str	r5, [r4, #0]
 8014946:	bf18      	it	ne
 8014948:	6059      	strne	r1, [r3, #4]
 801494a:	6863      	ldr	r3, [r4, #4]
 801494c:	bf08      	it	eq
 801494e:	6031      	streq	r1, [r6, #0]
 8014950:	5162      	str	r2, [r4, r5]
 8014952:	604b      	str	r3, [r1, #4]
 8014954:	4638      	mov	r0, r7
 8014956:	f104 060b 	add.w	r6, r4, #11
 801495a:	f000 fb8b 	bl	8015074 <__malloc_unlock>
 801495e:	f026 0607 	bic.w	r6, r6, #7
 8014962:	1d23      	adds	r3, r4, #4
 8014964:	1af2      	subs	r2, r6, r3
 8014966:	d0b6      	beq.n	80148d6 <_malloc_r+0x22>
 8014968:	1b9b      	subs	r3, r3, r6
 801496a:	50a3      	str	r3, [r4, r2]
 801496c:	e7b3      	b.n	80148d6 <_malloc_r+0x22>
 801496e:	6862      	ldr	r2, [r4, #4]
 8014970:	42a3      	cmp	r3, r4
 8014972:	bf0c      	ite	eq
 8014974:	6032      	streq	r2, [r6, #0]
 8014976:	605a      	strne	r2, [r3, #4]
 8014978:	e7ec      	b.n	8014954 <_malloc_r+0xa0>
 801497a:	4623      	mov	r3, r4
 801497c:	6864      	ldr	r4, [r4, #4]
 801497e:	e7b2      	b.n	80148e6 <_malloc_r+0x32>
 8014980:	4634      	mov	r4, r6
 8014982:	6876      	ldr	r6, [r6, #4]
 8014984:	e7b9      	b.n	80148fa <_malloc_r+0x46>
 8014986:	230c      	movs	r3, #12
 8014988:	603b      	str	r3, [r7, #0]
 801498a:	4638      	mov	r0, r7
 801498c:	f000 fb72 	bl	8015074 <__malloc_unlock>
 8014990:	e7a1      	b.n	80148d6 <_malloc_r+0x22>
 8014992:	6025      	str	r5, [r4, #0]
 8014994:	e7de      	b.n	8014954 <_malloc_r+0xa0>
 8014996:	bf00      	nop
 8014998:	2400558c 	.word	0x2400558c

0801499c <_puts_r>:
 801499c:	b570      	push	{r4, r5, r6, lr}
 801499e:	460e      	mov	r6, r1
 80149a0:	4605      	mov	r5, r0
 80149a2:	b118      	cbz	r0, 80149ac <_puts_r+0x10>
 80149a4:	6983      	ldr	r3, [r0, #24]
 80149a6:	b90b      	cbnz	r3, 80149ac <_puts_r+0x10>
 80149a8:	f000 fa58 	bl	8014e5c <__sinit>
 80149ac:	69ab      	ldr	r3, [r5, #24]
 80149ae:	68ac      	ldr	r4, [r5, #8]
 80149b0:	b913      	cbnz	r3, 80149b8 <_puts_r+0x1c>
 80149b2:	4628      	mov	r0, r5
 80149b4:	f000 fa52 	bl	8014e5c <__sinit>
 80149b8:	4b2c      	ldr	r3, [pc, #176]	; (8014a6c <_puts_r+0xd0>)
 80149ba:	429c      	cmp	r4, r3
 80149bc:	d120      	bne.n	8014a00 <_puts_r+0x64>
 80149be:	686c      	ldr	r4, [r5, #4]
 80149c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80149c2:	07db      	lsls	r3, r3, #31
 80149c4:	d405      	bmi.n	80149d2 <_puts_r+0x36>
 80149c6:	89a3      	ldrh	r3, [r4, #12]
 80149c8:	0598      	lsls	r0, r3, #22
 80149ca:	d402      	bmi.n	80149d2 <_puts_r+0x36>
 80149cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80149ce:	f000 fae3 	bl	8014f98 <__retarget_lock_acquire_recursive>
 80149d2:	89a3      	ldrh	r3, [r4, #12]
 80149d4:	0719      	lsls	r1, r3, #28
 80149d6:	d51d      	bpl.n	8014a14 <_puts_r+0x78>
 80149d8:	6923      	ldr	r3, [r4, #16]
 80149da:	b1db      	cbz	r3, 8014a14 <_puts_r+0x78>
 80149dc:	3e01      	subs	r6, #1
 80149de:	68a3      	ldr	r3, [r4, #8]
 80149e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80149e4:	3b01      	subs	r3, #1
 80149e6:	60a3      	str	r3, [r4, #8]
 80149e8:	bb39      	cbnz	r1, 8014a3a <_puts_r+0x9e>
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	da38      	bge.n	8014a60 <_puts_r+0xc4>
 80149ee:	4622      	mov	r2, r4
 80149f0:	210a      	movs	r1, #10
 80149f2:	4628      	mov	r0, r5
 80149f4:	f000 f858 	bl	8014aa8 <__swbuf_r>
 80149f8:	3001      	adds	r0, #1
 80149fa:	d011      	beq.n	8014a20 <_puts_r+0x84>
 80149fc:	250a      	movs	r5, #10
 80149fe:	e011      	b.n	8014a24 <_puts_r+0x88>
 8014a00:	4b1b      	ldr	r3, [pc, #108]	; (8014a70 <_puts_r+0xd4>)
 8014a02:	429c      	cmp	r4, r3
 8014a04:	d101      	bne.n	8014a0a <_puts_r+0x6e>
 8014a06:	68ac      	ldr	r4, [r5, #8]
 8014a08:	e7da      	b.n	80149c0 <_puts_r+0x24>
 8014a0a:	4b1a      	ldr	r3, [pc, #104]	; (8014a74 <_puts_r+0xd8>)
 8014a0c:	429c      	cmp	r4, r3
 8014a0e:	bf08      	it	eq
 8014a10:	68ec      	ldreq	r4, [r5, #12]
 8014a12:	e7d5      	b.n	80149c0 <_puts_r+0x24>
 8014a14:	4621      	mov	r1, r4
 8014a16:	4628      	mov	r0, r5
 8014a18:	f000 f898 	bl	8014b4c <__swsetup_r>
 8014a1c:	2800      	cmp	r0, #0
 8014a1e:	d0dd      	beq.n	80149dc <_puts_r+0x40>
 8014a20:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8014a24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014a26:	07da      	lsls	r2, r3, #31
 8014a28:	d405      	bmi.n	8014a36 <_puts_r+0x9a>
 8014a2a:	89a3      	ldrh	r3, [r4, #12]
 8014a2c:	059b      	lsls	r3, r3, #22
 8014a2e:	d402      	bmi.n	8014a36 <_puts_r+0x9a>
 8014a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014a32:	f000 fab2 	bl	8014f9a <__retarget_lock_release_recursive>
 8014a36:	4628      	mov	r0, r5
 8014a38:	bd70      	pop	{r4, r5, r6, pc}
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	da04      	bge.n	8014a48 <_puts_r+0xac>
 8014a3e:	69a2      	ldr	r2, [r4, #24]
 8014a40:	429a      	cmp	r2, r3
 8014a42:	dc06      	bgt.n	8014a52 <_puts_r+0xb6>
 8014a44:	290a      	cmp	r1, #10
 8014a46:	d004      	beq.n	8014a52 <_puts_r+0xb6>
 8014a48:	6823      	ldr	r3, [r4, #0]
 8014a4a:	1c5a      	adds	r2, r3, #1
 8014a4c:	6022      	str	r2, [r4, #0]
 8014a4e:	7019      	strb	r1, [r3, #0]
 8014a50:	e7c5      	b.n	80149de <_puts_r+0x42>
 8014a52:	4622      	mov	r2, r4
 8014a54:	4628      	mov	r0, r5
 8014a56:	f000 f827 	bl	8014aa8 <__swbuf_r>
 8014a5a:	3001      	adds	r0, #1
 8014a5c:	d1bf      	bne.n	80149de <_puts_r+0x42>
 8014a5e:	e7df      	b.n	8014a20 <_puts_r+0x84>
 8014a60:	6823      	ldr	r3, [r4, #0]
 8014a62:	250a      	movs	r5, #10
 8014a64:	1c5a      	adds	r2, r3, #1
 8014a66:	6022      	str	r2, [r4, #0]
 8014a68:	701d      	strb	r5, [r3, #0]
 8014a6a:	e7db      	b.n	8014a24 <_puts_r+0x88>
 8014a6c:	08015590 	.word	0x08015590
 8014a70:	080155b0 	.word	0x080155b0
 8014a74:	08015570 	.word	0x08015570

08014a78 <puts>:
 8014a78:	4b02      	ldr	r3, [pc, #8]	; (8014a84 <puts+0xc>)
 8014a7a:	4601      	mov	r1, r0
 8014a7c:	6818      	ldr	r0, [r3, #0]
 8014a7e:	f7ff bf8d 	b.w	801499c <_puts_r>
 8014a82:	bf00      	nop
 8014a84:	2400009c 	.word	0x2400009c

08014a88 <_sbrk_r>:
 8014a88:	b538      	push	{r3, r4, r5, lr}
 8014a8a:	4d06      	ldr	r5, [pc, #24]	; (8014aa4 <_sbrk_r+0x1c>)
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	4604      	mov	r4, r0
 8014a90:	4608      	mov	r0, r1
 8014a92:	602b      	str	r3, [r5, #0]
 8014a94:	f7ee fc5c 	bl	8003350 <_sbrk>
 8014a98:	1c43      	adds	r3, r0, #1
 8014a9a:	d102      	bne.n	8014aa2 <_sbrk_r+0x1a>
 8014a9c:	682b      	ldr	r3, [r5, #0]
 8014a9e:	b103      	cbz	r3, 8014aa2 <_sbrk_r+0x1a>
 8014aa0:	6023      	str	r3, [r4, #0]
 8014aa2:	bd38      	pop	{r3, r4, r5, pc}
 8014aa4:	24005598 	.word	0x24005598

08014aa8 <__swbuf_r>:
 8014aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014aaa:	460e      	mov	r6, r1
 8014aac:	4614      	mov	r4, r2
 8014aae:	4605      	mov	r5, r0
 8014ab0:	b118      	cbz	r0, 8014aba <__swbuf_r+0x12>
 8014ab2:	6983      	ldr	r3, [r0, #24]
 8014ab4:	b90b      	cbnz	r3, 8014aba <__swbuf_r+0x12>
 8014ab6:	f000 f9d1 	bl	8014e5c <__sinit>
 8014aba:	4b21      	ldr	r3, [pc, #132]	; (8014b40 <__swbuf_r+0x98>)
 8014abc:	429c      	cmp	r4, r3
 8014abe:	d12b      	bne.n	8014b18 <__swbuf_r+0x70>
 8014ac0:	686c      	ldr	r4, [r5, #4]
 8014ac2:	69a3      	ldr	r3, [r4, #24]
 8014ac4:	60a3      	str	r3, [r4, #8]
 8014ac6:	89a3      	ldrh	r3, [r4, #12]
 8014ac8:	071a      	lsls	r2, r3, #28
 8014aca:	d52f      	bpl.n	8014b2c <__swbuf_r+0x84>
 8014acc:	6923      	ldr	r3, [r4, #16]
 8014ace:	b36b      	cbz	r3, 8014b2c <__swbuf_r+0x84>
 8014ad0:	6923      	ldr	r3, [r4, #16]
 8014ad2:	6820      	ldr	r0, [r4, #0]
 8014ad4:	1ac0      	subs	r0, r0, r3
 8014ad6:	6963      	ldr	r3, [r4, #20]
 8014ad8:	b2f6      	uxtb	r6, r6
 8014ada:	4283      	cmp	r3, r0
 8014adc:	4637      	mov	r7, r6
 8014ade:	dc04      	bgt.n	8014aea <__swbuf_r+0x42>
 8014ae0:	4621      	mov	r1, r4
 8014ae2:	4628      	mov	r0, r5
 8014ae4:	f000 f926 	bl	8014d34 <_fflush_r>
 8014ae8:	bb30      	cbnz	r0, 8014b38 <__swbuf_r+0x90>
 8014aea:	68a3      	ldr	r3, [r4, #8]
 8014aec:	3b01      	subs	r3, #1
 8014aee:	60a3      	str	r3, [r4, #8]
 8014af0:	6823      	ldr	r3, [r4, #0]
 8014af2:	1c5a      	adds	r2, r3, #1
 8014af4:	6022      	str	r2, [r4, #0]
 8014af6:	701e      	strb	r6, [r3, #0]
 8014af8:	6963      	ldr	r3, [r4, #20]
 8014afa:	3001      	adds	r0, #1
 8014afc:	4283      	cmp	r3, r0
 8014afe:	d004      	beq.n	8014b0a <__swbuf_r+0x62>
 8014b00:	89a3      	ldrh	r3, [r4, #12]
 8014b02:	07db      	lsls	r3, r3, #31
 8014b04:	d506      	bpl.n	8014b14 <__swbuf_r+0x6c>
 8014b06:	2e0a      	cmp	r6, #10
 8014b08:	d104      	bne.n	8014b14 <__swbuf_r+0x6c>
 8014b0a:	4621      	mov	r1, r4
 8014b0c:	4628      	mov	r0, r5
 8014b0e:	f000 f911 	bl	8014d34 <_fflush_r>
 8014b12:	b988      	cbnz	r0, 8014b38 <__swbuf_r+0x90>
 8014b14:	4638      	mov	r0, r7
 8014b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b18:	4b0a      	ldr	r3, [pc, #40]	; (8014b44 <__swbuf_r+0x9c>)
 8014b1a:	429c      	cmp	r4, r3
 8014b1c:	d101      	bne.n	8014b22 <__swbuf_r+0x7a>
 8014b1e:	68ac      	ldr	r4, [r5, #8]
 8014b20:	e7cf      	b.n	8014ac2 <__swbuf_r+0x1a>
 8014b22:	4b09      	ldr	r3, [pc, #36]	; (8014b48 <__swbuf_r+0xa0>)
 8014b24:	429c      	cmp	r4, r3
 8014b26:	bf08      	it	eq
 8014b28:	68ec      	ldreq	r4, [r5, #12]
 8014b2a:	e7ca      	b.n	8014ac2 <__swbuf_r+0x1a>
 8014b2c:	4621      	mov	r1, r4
 8014b2e:	4628      	mov	r0, r5
 8014b30:	f000 f80c 	bl	8014b4c <__swsetup_r>
 8014b34:	2800      	cmp	r0, #0
 8014b36:	d0cb      	beq.n	8014ad0 <__swbuf_r+0x28>
 8014b38:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014b3c:	e7ea      	b.n	8014b14 <__swbuf_r+0x6c>
 8014b3e:	bf00      	nop
 8014b40:	08015590 	.word	0x08015590
 8014b44:	080155b0 	.word	0x080155b0
 8014b48:	08015570 	.word	0x08015570

08014b4c <__swsetup_r>:
 8014b4c:	4b32      	ldr	r3, [pc, #200]	; (8014c18 <__swsetup_r+0xcc>)
 8014b4e:	b570      	push	{r4, r5, r6, lr}
 8014b50:	681d      	ldr	r5, [r3, #0]
 8014b52:	4606      	mov	r6, r0
 8014b54:	460c      	mov	r4, r1
 8014b56:	b125      	cbz	r5, 8014b62 <__swsetup_r+0x16>
 8014b58:	69ab      	ldr	r3, [r5, #24]
 8014b5a:	b913      	cbnz	r3, 8014b62 <__swsetup_r+0x16>
 8014b5c:	4628      	mov	r0, r5
 8014b5e:	f000 f97d 	bl	8014e5c <__sinit>
 8014b62:	4b2e      	ldr	r3, [pc, #184]	; (8014c1c <__swsetup_r+0xd0>)
 8014b64:	429c      	cmp	r4, r3
 8014b66:	d10f      	bne.n	8014b88 <__swsetup_r+0x3c>
 8014b68:	686c      	ldr	r4, [r5, #4]
 8014b6a:	89a3      	ldrh	r3, [r4, #12]
 8014b6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014b70:	0719      	lsls	r1, r3, #28
 8014b72:	d42c      	bmi.n	8014bce <__swsetup_r+0x82>
 8014b74:	06dd      	lsls	r5, r3, #27
 8014b76:	d411      	bmi.n	8014b9c <__swsetup_r+0x50>
 8014b78:	2309      	movs	r3, #9
 8014b7a:	6033      	str	r3, [r6, #0]
 8014b7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014b80:	81a3      	strh	r3, [r4, #12]
 8014b82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b86:	e03e      	b.n	8014c06 <__swsetup_r+0xba>
 8014b88:	4b25      	ldr	r3, [pc, #148]	; (8014c20 <__swsetup_r+0xd4>)
 8014b8a:	429c      	cmp	r4, r3
 8014b8c:	d101      	bne.n	8014b92 <__swsetup_r+0x46>
 8014b8e:	68ac      	ldr	r4, [r5, #8]
 8014b90:	e7eb      	b.n	8014b6a <__swsetup_r+0x1e>
 8014b92:	4b24      	ldr	r3, [pc, #144]	; (8014c24 <__swsetup_r+0xd8>)
 8014b94:	429c      	cmp	r4, r3
 8014b96:	bf08      	it	eq
 8014b98:	68ec      	ldreq	r4, [r5, #12]
 8014b9a:	e7e6      	b.n	8014b6a <__swsetup_r+0x1e>
 8014b9c:	0758      	lsls	r0, r3, #29
 8014b9e:	d512      	bpl.n	8014bc6 <__swsetup_r+0x7a>
 8014ba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014ba2:	b141      	cbz	r1, 8014bb6 <__swsetup_r+0x6a>
 8014ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014ba8:	4299      	cmp	r1, r3
 8014baa:	d002      	beq.n	8014bb2 <__swsetup_r+0x66>
 8014bac:	4630      	mov	r0, r6
 8014bae:	f7ff fe15 	bl	80147dc <_free_r>
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	6363      	str	r3, [r4, #52]	; 0x34
 8014bb6:	89a3      	ldrh	r3, [r4, #12]
 8014bb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014bbc:	81a3      	strh	r3, [r4, #12]
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	6063      	str	r3, [r4, #4]
 8014bc2:	6923      	ldr	r3, [r4, #16]
 8014bc4:	6023      	str	r3, [r4, #0]
 8014bc6:	89a3      	ldrh	r3, [r4, #12]
 8014bc8:	f043 0308 	orr.w	r3, r3, #8
 8014bcc:	81a3      	strh	r3, [r4, #12]
 8014bce:	6923      	ldr	r3, [r4, #16]
 8014bd0:	b94b      	cbnz	r3, 8014be6 <__swsetup_r+0x9a>
 8014bd2:	89a3      	ldrh	r3, [r4, #12]
 8014bd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014bdc:	d003      	beq.n	8014be6 <__swsetup_r+0x9a>
 8014bde:	4621      	mov	r1, r4
 8014be0:	4630      	mov	r0, r6
 8014be2:	f000 fa01 	bl	8014fe8 <__smakebuf_r>
 8014be6:	89a0      	ldrh	r0, [r4, #12]
 8014be8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014bec:	f010 0301 	ands.w	r3, r0, #1
 8014bf0:	d00a      	beq.n	8014c08 <__swsetup_r+0xbc>
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	60a3      	str	r3, [r4, #8]
 8014bf6:	6963      	ldr	r3, [r4, #20]
 8014bf8:	425b      	negs	r3, r3
 8014bfa:	61a3      	str	r3, [r4, #24]
 8014bfc:	6923      	ldr	r3, [r4, #16]
 8014bfe:	b943      	cbnz	r3, 8014c12 <__swsetup_r+0xc6>
 8014c00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014c04:	d1ba      	bne.n	8014b7c <__swsetup_r+0x30>
 8014c06:	bd70      	pop	{r4, r5, r6, pc}
 8014c08:	0781      	lsls	r1, r0, #30
 8014c0a:	bf58      	it	pl
 8014c0c:	6963      	ldrpl	r3, [r4, #20]
 8014c0e:	60a3      	str	r3, [r4, #8]
 8014c10:	e7f4      	b.n	8014bfc <__swsetup_r+0xb0>
 8014c12:	2000      	movs	r0, #0
 8014c14:	e7f7      	b.n	8014c06 <__swsetup_r+0xba>
 8014c16:	bf00      	nop
 8014c18:	2400009c 	.word	0x2400009c
 8014c1c:	08015590 	.word	0x08015590
 8014c20:	080155b0 	.word	0x080155b0
 8014c24:	08015570 	.word	0x08015570

08014c28 <__sflush_r>:
 8014c28:	898a      	ldrh	r2, [r1, #12]
 8014c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c2e:	4605      	mov	r5, r0
 8014c30:	0710      	lsls	r0, r2, #28
 8014c32:	460c      	mov	r4, r1
 8014c34:	d458      	bmi.n	8014ce8 <__sflush_r+0xc0>
 8014c36:	684b      	ldr	r3, [r1, #4]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	dc05      	bgt.n	8014c48 <__sflush_r+0x20>
 8014c3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	dc02      	bgt.n	8014c48 <__sflush_r+0x20>
 8014c42:	2000      	movs	r0, #0
 8014c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014c4a:	2e00      	cmp	r6, #0
 8014c4c:	d0f9      	beq.n	8014c42 <__sflush_r+0x1a>
 8014c4e:	2300      	movs	r3, #0
 8014c50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014c54:	682f      	ldr	r7, [r5, #0]
 8014c56:	602b      	str	r3, [r5, #0]
 8014c58:	d032      	beq.n	8014cc0 <__sflush_r+0x98>
 8014c5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014c5c:	89a3      	ldrh	r3, [r4, #12]
 8014c5e:	075a      	lsls	r2, r3, #29
 8014c60:	d505      	bpl.n	8014c6e <__sflush_r+0x46>
 8014c62:	6863      	ldr	r3, [r4, #4]
 8014c64:	1ac0      	subs	r0, r0, r3
 8014c66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014c68:	b10b      	cbz	r3, 8014c6e <__sflush_r+0x46>
 8014c6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014c6c:	1ac0      	subs	r0, r0, r3
 8014c6e:	2300      	movs	r3, #0
 8014c70:	4602      	mov	r2, r0
 8014c72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014c74:	6a21      	ldr	r1, [r4, #32]
 8014c76:	4628      	mov	r0, r5
 8014c78:	47b0      	blx	r6
 8014c7a:	1c43      	adds	r3, r0, #1
 8014c7c:	89a3      	ldrh	r3, [r4, #12]
 8014c7e:	d106      	bne.n	8014c8e <__sflush_r+0x66>
 8014c80:	6829      	ldr	r1, [r5, #0]
 8014c82:	291d      	cmp	r1, #29
 8014c84:	d82c      	bhi.n	8014ce0 <__sflush_r+0xb8>
 8014c86:	4a2a      	ldr	r2, [pc, #168]	; (8014d30 <__sflush_r+0x108>)
 8014c88:	40ca      	lsrs	r2, r1
 8014c8a:	07d6      	lsls	r6, r2, #31
 8014c8c:	d528      	bpl.n	8014ce0 <__sflush_r+0xb8>
 8014c8e:	2200      	movs	r2, #0
 8014c90:	6062      	str	r2, [r4, #4]
 8014c92:	04d9      	lsls	r1, r3, #19
 8014c94:	6922      	ldr	r2, [r4, #16]
 8014c96:	6022      	str	r2, [r4, #0]
 8014c98:	d504      	bpl.n	8014ca4 <__sflush_r+0x7c>
 8014c9a:	1c42      	adds	r2, r0, #1
 8014c9c:	d101      	bne.n	8014ca2 <__sflush_r+0x7a>
 8014c9e:	682b      	ldr	r3, [r5, #0]
 8014ca0:	b903      	cbnz	r3, 8014ca4 <__sflush_r+0x7c>
 8014ca2:	6560      	str	r0, [r4, #84]	; 0x54
 8014ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014ca6:	602f      	str	r7, [r5, #0]
 8014ca8:	2900      	cmp	r1, #0
 8014caa:	d0ca      	beq.n	8014c42 <__sflush_r+0x1a>
 8014cac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014cb0:	4299      	cmp	r1, r3
 8014cb2:	d002      	beq.n	8014cba <__sflush_r+0x92>
 8014cb4:	4628      	mov	r0, r5
 8014cb6:	f7ff fd91 	bl	80147dc <_free_r>
 8014cba:	2000      	movs	r0, #0
 8014cbc:	6360      	str	r0, [r4, #52]	; 0x34
 8014cbe:	e7c1      	b.n	8014c44 <__sflush_r+0x1c>
 8014cc0:	6a21      	ldr	r1, [r4, #32]
 8014cc2:	2301      	movs	r3, #1
 8014cc4:	4628      	mov	r0, r5
 8014cc6:	47b0      	blx	r6
 8014cc8:	1c41      	adds	r1, r0, #1
 8014cca:	d1c7      	bne.n	8014c5c <__sflush_r+0x34>
 8014ccc:	682b      	ldr	r3, [r5, #0]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d0c4      	beq.n	8014c5c <__sflush_r+0x34>
 8014cd2:	2b1d      	cmp	r3, #29
 8014cd4:	d001      	beq.n	8014cda <__sflush_r+0xb2>
 8014cd6:	2b16      	cmp	r3, #22
 8014cd8:	d101      	bne.n	8014cde <__sflush_r+0xb6>
 8014cda:	602f      	str	r7, [r5, #0]
 8014cdc:	e7b1      	b.n	8014c42 <__sflush_r+0x1a>
 8014cde:	89a3      	ldrh	r3, [r4, #12]
 8014ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ce4:	81a3      	strh	r3, [r4, #12]
 8014ce6:	e7ad      	b.n	8014c44 <__sflush_r+0x1c>
 8014ce8:	690f      	ldr	r7, [r1, #16]
 8014cea:	2f00      	cmp	r7, #0
 8014cec:	d0a9      	beq.n	8014c42 <__sflush_r+0x1a>
 8014cee:	0793      	lsls	r3, r2, #30
 8014cf0:	680e      	ldr	r6, [r1, #0]
 8014cf2:	bf08      	it	eq
 8014cf4:	694b      	ldreq	r3, [r1, #20]
 8014cf6:	600f      	str	r7, [r1, #0]
 8014cf8:	bf18      	it	ne
 8014cfa:	2300      	movne	r3, #0
 8014cfc:	eba6 0807 	sub.w	r8, r6, r7
 8014d00:	608b      	str	r3, [r1, #8]
 8014d02:	f1b8 0f00 	cmp.w	r8, #0
 8014d06:	dd9c      	ble.n	8014c42 <__sflush_r+0x1a>
 8014d08:	6a21      	ldr	r1, [r4, #32]
 8014d0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014d0c:	4643      	mov	r3, r8
 8014d0e:	463a      	mov	r2, r7
 8014d10:	4628      	mov	r0, r5
 8014d12:	47b0      	blx	r6
 8014d14:	2800      	cmp	r0, #0
 8014d16:	dc06      	bgt.n	8014d26 <__sflush_r+0xfe>
 8014d18:	89a3      	ldrh	r3, [r4, #12]
 8014d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d1e:	81a3      	strh	r3, [r4, #12]
 8014d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014d24:	e78e      	b.n	8014c44 <__sflush_r+0x1c>
 8014d26:	4407      	add	r7, r0
 8014d28:	eba8 0800 	sub.w	r8, r8, r0
 8014d2c:	e7e9      	b.n	8014d02 <__sflush_r+0xda>
 8014d2e:	bf00      	nop
 8014d30:	20400001 	.word	0x20400001

08014d34 <_fflush_r>:
 8014d34:	b538      	push	{r3, r4, r5, lr}
 8014d36:	690b      	ldr	r3, [r1, #16]
 8014d38:	4605      	mov	r5, r0
 8014d3a:	460c      	mov	r4, r1
 8014d3c:	b913      	cbnz	r3, 8014d44 <_fflush_r+0x10>
 8014d3e:	2500      	movs	r5, #0
 8014d40:	4628      	mov	r0, r5
 8014d42:	bd38      	pop	{r3, r4, r5, pc}
 8014d44:	b118      	cbz	r0, 8014d4e <_fflush_r+0x1a>
 8014d46:	6983      	ldr	r3, [r0, #24]
 8014d48:	b90b      	cbnz	r3, 8014d4e <_fflush_r+0x1a>
 8014d4a:	f000 f887 	bl	8014e5c <__sinit>
 8014d4e:	4b14      	ldr	r3, [pc, #80]	; (8014da0 <_fflush_r+0x6c>)
 8014d50:	429c      	cmp	r4, r3
 8014d52:	d11b      	bne.n	8014d8c <_fflush_r+0x58>
 8014d54:	686c      	ldr	r4, [r5, #4]
 8014d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d0ef      	beq.n	8014d3e <_fflush_r+0xa>
 8014d5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014d60:	07d0      	lsls	r0, r2, #31
 8014d62:	d404      	bmi.n	8014d6e <_fflush_r+0x3a>
 8014d64:	0599      	lsls	r1, r3, #22
 8014d66:	d402      	bmi.n	8014d6e <_fflush_r+0x3a>
 8014d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014d6a:	f000 f915 	bl	8014f98 <__retarget_lock_acquire_recursive>
 8014d6e:	4628      	mov	r0, r5
 8014d70:	4621      	mov	r1, r4
 8014d72:	f7ff ff59 	bl	8014c28 <__sflush_r>
 8014d76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014d78:	07da      	lsls	r2, r3, #31
 8014d7a:	4605      	mov	r5, r0
 8014d7c:	d4e0      	bmi.n	8014d40 <_fflush_r+0xc>
 8014d7e:	89a3      	ldrh	r3, [r4, #12]
 8014d80:	059b      	lsls	r3, r3, #22
 8014d82:	d4dd      	bmi.n	8014d40 <_fflush_r+0xc>
 8014d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014d86:	f000 f908 	bl	8014f9a <__retarget_lock_release_recursive>
 8014d8a:	e7d9      	b.n	8014d40 <_fflush_r+0xc>
 8014d8c:	4b05      	ldr	r3, [pc, #20]	; (8014da4 <_fflush_r+0x70>)
 8014d8e:	429c      	cmp	r4, r3
 8014d90:	d101      	bne.n	8014d96 <_fflush_r+0x62>
 8014d92:	68ac      	ldr	r4, [r5, #8]
 8014d94:	e7df      	b.n	8014d56 <_fflush_r+0x22>
 8014d96:	4b04      	ldr	r3, [pc, #16]	; (8014da8 <_fflush_r+0x74>)
 8014d98:	429c      	cmp	r4, r3
 8014d9a:	bf08      	it	eq
 8014d9c:	68ec      	ldreq	r4, [r5, #12]
 8014d9e:	e7da      	b.n	8014d56 <_fflush_r+0x22>
 8014da0:	08015590 	.word	0x08015590
 8014da4:	080155b0 	.word	0x080155b0
 8014da8:	08015570 	.word	0x08015570

08014dac <std>:
 8014dac:	2300      	movs	r3, #0
 8014dae:	b510      	push	{r4, lr}
 8014db0:	4604      	mov	r4, r0
 8014db2:	e9c0 3300 	strd	r3, r3, [r0]
 8014db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014dba:	6083      	str	r3, [r0, #8]
 8014dbc:	8181      	strh	r1, [r0, #12]
 8014dbe:	6643      	str	r3, [r0, #100]	; 0x64
 8014dc0:	81c2      	strh	r2, [r0, #14]
 8014dc2:	6183      	str	r3, [r0, #24]
 8014dc4:	4619      	mov	r1, r3
 8014dc6:	2208      	movs	r2, #8
 8014dc8:	305c      	adds	r0, #92	; 0x5c
 8014dca:	f7ff fcff 	bl	80147cc <memset>
 8014dce:	4b05      	ldr	r3, [pc, #20]	; (8014de4 <std+0x38>)
 8014dd0:	6263      	str	r3, [r4, #36]	; 0x24
 8014dd2:	4b05      	ldr	r3, [pc, #20]	; (8014de8 <std+0x3c>)
 8014dd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8014dd6:	4b05      	ldr	r3, [pc, #20]	; (8014dec <std+0x40>)
 8014dd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014dda:	4b05      	ldr	r3, [pc, #20]	; (8014df0 <std+0x44>)
 8014ddc:	6224      	str	r4, [r4, #32]
 8014dde:	6323      	str	r3, [r4, #48]	; 0x30
 8014de0:	bd10      	pop	{r4, pc}
 8014de2:	bf00      	nop
 8014de4:	08015081 	.word	0x08015081
 8014de8:	080150a3 	.word	0x080150a3
 8014dec:	080150db 	.word	0x080150db
 8014df0:	080150ff 	.word	0x080150ff

08014df4 <_cleanup_r>:
 8014df4:	4901      	ldr	r1, [pc, #4]	; (8014dfc <_cleanup_r+0x8>)
 8014df6:	f000 b8af 	b.w	8014f58 <_fwalk_reent>
 8014dfa:	bf00      	nop
 8014dfc:	08014d35 	.word	0x08014d35

08014e00 <__sfmoreglue>:
 8014e00:	b570      	push	{r4, r5, r6, lr}
 8014e02:	2268      	movs	r2, #104	; 0x68
 8014e04:	1e4d      	subs	r5, r1, #1
 8014e06:	4355      	muls	r5, r2
 8014e08:	460e      	mov	r6, r1
 8014e0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014e0e:	f7ff fd51 	bl	80148b4 <_malloc_r>
 8014e12:	4604      	mov	r4, r0
 8014e14:	b140      	cbz	r0, 8014e28 <__sfmoreglue+0x28>
 8014e16:	2100      	movs	r1, #0
 8014e18:	e9c0 1600 	strd	r1, r6, [r0]
 8014e1c:	300c      	adds	r0, #12
 8014e1e:	60a0      	str	r0, [r4, #8]
 8014e20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014e24:	f7ff fcd2 	bl	80147cc <memset>
 8014e28:	4620      	mov	r0, r4
 8014e2a:	bd70      	pop	{r4, r5, r6, pc}

08014e2c <__sfp_lock_acquire>:
 8014e2c:	4801      	ldr	r0, [pc, #4]	; (8014e34 <__sfp_lock_acquire+0x8>)
 8014e2e:	f000 b8b3 	b.w	8014f98 <__retarget_lock_acquire_recursive>
 8014e32:	bf00      	nop
 8014e34:	24005595 	.word	0x24005595

08014e38 <__sfp_lock_release>:
 8014e38:	4801      	ldr	r0, [pc, #4]	; (8014e40 <__sfp_lock_release+0x8>)
 8014e3a:	f000 b8ae 	b.w	8014f9a <__retarget_lock_release_recursive>
 8014e3e:	bf00      	nop
 8014e40:	24005595 	.word	0x24005595

08014e44 <__sinit_lock_acquire>:
 8014e44:	4801      	ldr	r0, [pc, #4]	; (8014e4c <__sinit_lock_acquire+0x8>)
 8014e46:	f000 b8a7 	b.w	8014f98 <__retarget_lock_acquire_recursive>
 8014e4a:	bf00      	nop
 8014e4c:	24005596 	.word	0x24005596

08014e50 <__sinit_lock_release>:
 8014e50:	4801      	ldr	r0, [pc, #4]	; (8014e58 <__sinit_lock_release+0x8>)
 8014e52:	f000 b8a2 	b.w	8014f9a <__retarget_lock_release_recursive>
 8014e56:	bf00      	nop
 8014e58:	24005596 	.word	0x24005596

08014e5c <__sinit>:
 8014e5c:	b510      	push	{r4, lr}
 8014e5e:	4604      	mov	r4, r0
 8014e60:	f7ff fff0 	bl	8014e44 <__sinit_lock_acquire>
 8014e64:	69a3      	ldr	r3, [r4, #24]
 8014e66:	b11b      	cbz	r3, 8014e70 <__sinit+0x14>
 8014e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e6c:	f7ff bff0 	b.w	8014e50 <__sinit_lock_release>
 8014e70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014e74:	6523      	str	r3, [r4, #80]	; 0x50
 8014e76:	4b13      	ldr	r3, [pc, #76]	; (8014ec4 <__sinit+0x68>)
 8014e78:	4a13      	ldr	r2, [pc, #76]	; (8014ec8 <__sinit+0x6c>)
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8014e7e:	42a3      	cmp	r3, r4
 8014e80:	bf04      	itt	eq
 8014e82:	2301      	moveq	r3, #1
 8014e84:	61a3      	streq	r3, [r4, #24]
 8014e86:	4620      	mov	r0, r4
 8014e88:	f000 f820 	bl	8014ecc <__sfp>
 8014e8c:	6060      	str	r0, [r4, #4]
 8014e8e:	4620      	mov	r0, r4
 8014e90:	f000 f81c 	bl	8014ecc <__sfp>
 8014e94:	60a0      	str	r0, [r4, #8]
 8014e96:	4620      	mov	r0, r4
 8014e98:	f000 f818 	bl	8014ecc <__sfp>
 8014e9c:	2200      	movs	r2, #0
 8014e9e:	60e0      	str	r0, [r4, #12]
 8014ea0:	2104      	movs	r1, #4
 8014ea2:	6860      	ldr	r0, [r4, #4]
 8014ea4:	f7ff ff82 	bl	8014dac <std>
 8014ea8:	68a0      	ldr	r0, [r4, #8]
 8014eaa:	2201      	movs	r2, #1
 8014eac:	2109      	movs	r1, #9
 8014eae:	f7ff ff7d 	bl	8014dac <std>
 8014eb2:	68e0      	ldr	r0, [r4, #12]
 8014eb4:	2202      	movs	r2, #2
 8014eb6:	2112      	movs	r1, #18
 8014eb8:	f7ff ff78 	bl	8014dac <std>
 8014ebc:	2301      	movs	r3, #1
 8014ebe:	61a3      	str	r3, [r4, #24]
 8014ec0:	e7d2      	b.n	8014e68 <__sinit+0xc>
 8014ec2:	bf00      	nop
 8014ec4:	0801556c 	.word	0x0801556c
 8014ec8:	08014df5 	.word	0x08014df5

08014ecc <__sfp>:
 8014ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ece:	4607      	mov	r7, r0
 8014ed0:	f7ff ffac 	bl	8014e2c <__sfp_lock_acquire>
 8014ed4:	4b1e      	ldr	r3, [pc, #120]	; (8014f50 <__sfp+0x84>)
 8014ed6:	681e      	ldr	r6, [r3, #0]
 8014ed8:	69b3      	ldr	r3, [r6, #24]
 8014eda:	b913      	cbnz	r3, 8014ee2 <__sfp+0x16>
 8014edc:	4630      	mov	r0, r6
 8014ede:	f7ff ffbd 	bl	8014e5c <__sinit>
 8014ee2:	3648      	adds	r6, #72	; 0x48
 8014ee4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014ee8:	3b01      	subs	r3, #1
 8014eea:	d503      	bpl.n	8014ef4 <__sfp+0x28>
 8014eec:	6833      	ldr	r3, [r6, #0]
 8014eee:	b30b      	cbz	r3, 8014f34 <__sfp+0x68>
 8014ef0:	6836      	ldr	r6, [r6, #0]
 8014ef2:	e7f7      	b.n	8014ee4 <__sfp+0x18>
 8014ef4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014ef8:	b9d5      	cbnz	r5, 8014f30 <__sfp+0x64>
 8014efa:	4b16      	ldr	r3, [pc, #88]	; (8014f54 <__sfp+0x88>)
 8014efc:	60e3      	str	r3, [r4, #12]
 8014efe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014f02:	6665      	str	r5, [r4, #100]	; 0x64
 8014f04:	f000 f847 	bl	8014f96 <__retarget_lock_init_recursive>
 8014f08:	f7ff ff96 	bl	8014e38 <__sfp_lock_release>
 8014f0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014f10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014f14:	6025      	str	r5, [r4, #0]
 8014f16:	61a5      	str	r5, [r4, #24]
 8014f18:	2208      	movs	r2, #8
 8014f1a:	4629      	mov	r1, r5
 8014f1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014f20:	f7ff fc54 	bl	80147cc <memset>
 8014f24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014f28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014f2c:	4620      	mov	r0, r4
 8014f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f30:	3468      	adds	r4, #104	; 0x68
 8014f32:	e7d9      	b.n	8014ee8 <__sfp+0x1c>
 8014f34:	2104      	movs	r1, #4
 8014f36:	4638      	mov	r0, r7
 8014f38:	f7ff ff62 	bl	8014e00 <__sfmoreglue>
 8014f3c:	4604      	mov	r4, r0
 8014f3e:	6030      	str	r0, [r6, #0]
 8014f40:	2800      	cmp	r0, #0
 8014f42:	d1d5      	bne.n	8014ef0 <__sfp+0x24>
 8014f44:	f7ff ff78 	bl	8014e38 <__sfp_lock_release>
 8014f48:	230c      	movs	r3, #12
 8014f4a:	603b      	str	r3, [r7, #0]
 8014f4c:	e7ee      	b.n	8014f2c <__sfp+0x60>
 8014f4e:	bf00      	nop
 8014f50:	0801556c 	.word	0x0801556c
 8014f54:	ffff0001 	.word	0xffff0001

08014f58 <_fwalk_reent>:
 8014f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f5c:	4606      	mov	r6, r0
 8014f5e:	4688      	mov	r8, r1
 8014f60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014f64:	2700      	movs	r7, #0
 8014f66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014f6a:	f1b9 0901 	subs.w	r9, r9, #1
 8014f6e:	d505      	bpl.n	8014f7c <_fwalk_reent+0x24>
 8014f70:	6824      	ldr	r4, [r4, #0]
 8014f72:	2c00      	cmp	r4, #0
 8014f74:	d1f7      	bne.n	8014f66 <_fwalk_reent+0xe>
 8014f76:	4638      	mov	r0, r7
 8014f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f7c:	89ab      	ldrh	r3, [r5, #12]
 8014f7e:	2b01      	cmp	r3, #1
 8014f80:	d907      	bls.n	8014f92 <_fwalk_reent+0x3a>
 8014f82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014f86:	3301      	adds	r3, #1
 8014f88:	d003      	beq.n	8014f92 <_fwalk_reent+0x3a>
 8014f8a:	4629      	mov	r1, r5
 8014f8c:	4630      	mov	r0, r6
 8014f8e:	47c0      	blx	r8
 8014f90:	4307      	orrs	r7, r0
 8014f92:	3568      	adds	r5, #104	; 0x68
 8014f94:	e7e9      	b.n	8014f6a <_fwalk_reent+0x12>

08014f96 <__retarget_lock_init_recursive>:
 8014f96:	4770      	bx	lr

08014f98 <__retarget_lock_acquire_recursive>:
 8014f98:	4770      	bx	lr

08014f9a <__retarget_lock_release_recursive>:
 8014f9a:	4770      	bx	lr

08014f9c <__swhatbuf_r>:
 8014f9c:	b570      	push	{r4, r5, r6, lr}
 8014f9e:	460e      	mov	r6, r1
 8014fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fa4:	2900      	cmp	r1, #0
 8014fa6:	b096      	sub	sp, #88	; 0x58
 8014fa8:	4614      	mov	r4, r2
 8014faa:	461d      	mov	r5, r3
 8014fac:	da08      	bge.n	8014fc0 <__swhatbuf_r+0x24>
 8014fae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	602a      	str	r2, [r5, #0]
 8014fb6:	061a      	lsls	r2, r3, #24
 8014fb8:	d410      	bmi.n	8014fdc <__swhatbuf_r+0x40>
 8014fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014fbe:	e00e      	b.n	8014fde <__swhatbuf_r+0x42>
 8014fc0:	466a      	mov	r2, sp
 8014fc2:	f000 f8c3 	bl	801514c <_fstat_r>
 8014fc6:	2800      	cmp	r0, #0
 8014fc8:	dbf1      	blt.n	8014fae <__swhatbuf_r+0x12>
 8014fca:	9a01      	ldr	r2, [sp, #4]
 8014fcc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014fd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014fd4:	425a      	negs	r2, r3
 8014fd6:	415a      	adcs	r2, r3
 8014fd8:	602a      	str	r2, [r5, #0]
 8014fda:	e7ee      	b.n	8014fba <__swhatbuf_r+0x1e>
 8014fdc:	2340      	movs	r3, #64	; 0x40
 8014fde:	2000      	movs	r0, #0
 8014fe0:	6023      	str	r3, [r4, #0]
 8014fe2:	b016      	add	sp, #88	; 0x58
 8014fe4:	bd70      	pop	{r4, r5, r6, pc}
	...

08014fe8 <__smakebuf_r>:
 8014fe8:	898b      	ldrh	r3, [r1, #12]
 8014fea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014fec:	079d      	lsls	r5, r3, #30
 8014fee:	4606      	mov	r6, r0
 8014ff0:	460c      	mov	r4, r1
 8014ff2:	d507      	bpl.n	8015004 <__smakebuf_r+0x1c>
 8014ff4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014ff8:	6023      	str	r3, [r4, #0]
 8014ffa:	6123      	str	r3, [r4, #16]
 8014ffc:	2301      	movs	r3, #1
 8014ffe:	6163      	str	r3, [r4, #20]
 8015000:	b002      	add	sp, #8
 8015002:	bd70      	pop	{r4, r5, r6, pc}
 8015004:	ab01      	add	r3, sp, #4
 8015006:	466a      	mov	r2, sp
 8015008:	f7ff ffc8 	bl	8014f9c <__swhatbuf_r>
 801500c:	9900      	ldr	r1, [sp, #0]
 801500e:	4605      	mov	r5, r0
 8015010:	4630      	mov	r0, r6
 8015012:	f7ff fc4f 	bl	80148b4 <_malloc_r>
 8015016:	b948      	cbnz	r0, 801502c <__smakebuf_r+0x44>
 8015018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801501c:	059a      	lsls	r2, r3, #22
 801501e:	d4ef      	bmi.n	8015000 <__smakebuf_r+0x18>
 8015020:	f023 0303 	bic.w	r3, r3, #3
 8015024:	f043 0302 	orr.w	r3, r3, #2
 8015028:	81a3      	strh	r3, [r4, #12]
 801502a:	e7e3      	b.n	8014ff4 <__smakebuf_r+0xc>
 801502c:	4b0d      	ldr	r3, [pc, #52]	; (8015064 <__smakebuf_r+0x7c>)
 801502e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015030:	89a3      	ldrh	r3, [r4, #12]
 8015032:	6020      	str	r0, [r4, #0]
 8015034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015038:	81a3      	strh	r3, [r4, #12]
 801503a:	9b00      	ldr	r3, [sp, #0]
 801503c:	6163      	str	r3, [r4, #20]
 801503e:	9b01      	ldr	r3, [sp, #4]
 8015040:	6120      	str	r0, [r4, #16]
 8015042:	b15b      	cbz	r3, 801505c <__smakebuf_r+0x74>
 8015044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015048:	4630      	mov	r0, r6
 801504a:	f000 f891 	bl	8015170 <_isatty_r>
 801504e:	b128      	cbz	r0, 801505c <__smakebuf_r+0x74>
 8015050:	89a3      	ldrh	r3, [r4, #12]
 8015052:	f023 0303 	bic.w	r3, r3, #3
 8015056:	f043 0301 	orr.w	r3, r3, #1
 801505a:	81a3      	strh	r3, [r4, #12]
 801505c:	89a0      	ldrh	r0, [r4, #12]
 801505e:	4305      	orrs	r5, r0
 8015060:	81a5      	strh	r5, [r4, #12]
 8015062:	e7cd      	b.n	8015000 <__smakebuf_r+0x18>
 8015064:	08014df5 	.word	0x08014df5

08015068 <__malloc_lock>:
 8015068:	4801      	ldr	r0, [pc, #4]	; (8015070 <__malloc_lock+0x8>)
 801506a:	f7ff bf95 	b.w	8014f98 <__retarget_lock_acquire_recursive>
 801506e:	bf00      	nop
 8015070:	24005594 	.word	0x24005594

08015074 <__malloc_unlock>:
 8015074:	4801      	ldr	r0, [pc, #4]	; (801507c <__malloc_unlock+0x8>)
 8015076:	f7ff bf90 	b.w	8014f9a <__retarget_lock_release_recursive>
 801507a:	bf00      	nop
 801507c:	24005594 	.word	0x24005594

08015080 <__sread>:
 8015080:	b510      	push	{r4, lr}
 8015082:	460c      	mov	r4, r1
 8015084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015088:	f000 f894 	bl	80151b4 <_read_r>
 801508c:	2800      	cmp	r0, #0
 801508e:	bfab      	itete	ge
 8015090:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015092:	89a3      	ldrhlt	r3, [r4, #12]
 8015094:	181b      	addge	r3, r3, r0
 8015096:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801509a:	bfac      	ite	ge
 801509c:	6563      	strge	r3, [r4, #84]	; 0x54
 801509e:	81a3      	strhlt	r3, [r4, #12]
 80150a0:	bd10      	pop	{r4, pc}

080150a2 <__swrite>:
 80150a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150a6:	461f      	mov	r7, r3
 80150a8:	898b      	ldrh	r3, [r1, #12]
 80150aa:	05db      	lsls	r3, r3, #23
 80150ac:	4605      	mov	r5, r0
 80150ae:	460c      	mov	r4, r1
 80150b0:	4616      	mov	r6, r2
 80150b2:	d505      	bpl.n	80150c0 <__swrite+0x1e>
 80150b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150b8:	2302      	movs	r3, #2
 80150ba:	2200      	movs	r2, #0
 80150bc:	f000 f868 	bl	8015190 <_lseek_r>
 80150c0:	89a3      	ldrh	r3, [r4, #12]
 80150c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80150c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80150ca:	81a3      	strh	r3, [r4, #12]
 80150cc:	4632      	mov	r2, r6
 80150ce:	463b      	mov	r3, r7
 80150d0:	4628      	mov	r0, r5
 80150d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80150d6:	f000 b817 	b.w	8015108 <_write_r>

080150da <__sseek>:
 80150da:	b510      	push	{r4, lr}
 80150dc:	460c      	mov	r4, r1
 80150de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150e2:	f000 f855 	bl	8015190 <_lseek_r>
 80150e6:	1c43      	adds	r3, r0, #1
 80150e8:	89a3      	ldrh	r3, [r4, #12]
 80150ea:	bf15      	itete	ne
 80150ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80150ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80150f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80150f6:	81a3      	strheq	r3, [r4, #12]
 80150f8:	bf18      	it	ne
 80150fa:	81a3      	strhne	r3, [r4, #12]
 80150fc:	bd10      	pop	{r4, pc}

080150fe <__sclose>:
 80150fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015102:	f000 b813 	b.w	801512c <_close_r>
	...

08015108 <_write_r>:
 8015108:	b538      	push	{r3, r4, r5, lr}
 801510a:	4d07      	ldr	r5, [pc, #28]	; (8015128 <_write_r+0x20>)
 801510c:	4604      	mov	r4, r0
 801510e:	4608      	mov	r0, r1
 8015110:	4611      	mov	r1, r2
 8015112:	2200      	movs	r2, #0
 8015114:	602a      	str	r2, [r5, #0]
 8015116:	461a      	mov	r2, r3
 8015118:	f7ee f8c9 	bl	80032ae <_write>
 801511c:	1c43      	adds	r3, r0, #1
 801511e:	d102      	bne.n	8015126 <_write_r+0x1e>
 8015120:	682b      	ldr	r3, [r5, #0]
 8015122:	b103      	cbz	r3, 8015126 <_write_r+0x1e>
 8015124:	6023      	str	r3, [r4, #0]
 8015126:	bd38      	pop	{r3, r4, r5, pc}
 8015128:	24005598 	.word	0x24005598

0801512c <_close_r>:
 801512c:	b538      	push	{r3, r4, r5, lr}
 801512e:	4d06      	ldr	r5, [pc, #24]	; (8015148 <_close_r+0x1c>)
 8015130:	2300      	movs	r3, #0
 8015132:	4604      	mov	r4, r0
 8015134:	4608      	mov	r0, r1
 8015136:	602b      	str	r3, [r5, #0]
 8015138:	f7ee f8d5 	bl	80032e6 <_close>
 801513c:	1c43      	adds	r3, r0, #1
 801513e:	d102      	bne.n	8015146 <_close_r+0x1a>
 8015140:	682b      	ldr	r3, [r5, #0]
 8015142:	b103      	cbz	r3, 8015146 <_close_r+0x1a>
 8015144:	6023      	str	r3, [r4, #0]
 8015146:	bd38      	pop	{r3, r4, r5, pc}
 8015148:	24005598 	.word	0x24005598

0801514c <_fstat_r>:
 801514c:	b538      	push	{r3, r4, r5, lr}
 801514e:	4d07      	ldr	r5, [pc, #28]	; (801516c <_fstat_r+0x20>)
 8015150:	2300      	movs	r3, #0
 8015152:	4604      	mov	r4, r0
 8015154:	4608      	mov	r0, r1
 8015156:	4611      	mov	r1, r2
 8015158:	602b      	str	r3, [r5, #0]
 801515a:	f7ee f8d0 	bl	80032fe <_fstat>
 801515e:	1c43      	adds	r3, r0, #1
 8015160:	d102      	bne.n	8015168 <_fstat_r+0x1c>
 8015162:	682b      	ldr	r3, [r5, #0]
 8015164:	b103      	cbz	r3, 8015168 <_fstat_r+0x1c>
 8015166:	6023      	str	r3, [r4, #0]
 8015168:	bd38      	pop	{r3, r4, r5, pc}
 801516a:	bf00      	nop
 801516c:	24005598 	.word	0x24005598

08015170 <_isatty_r>:
 8015170:	b538      	push	{r3, r4, r5, lr}
 8015172:	4d06      	ldr	r5, [pc, #24]	; (801518c <_isatty_r+0x1c>)
 8015174:	2300      	movs	r3, #0
 8015176:	4604      	mov	r4, r0
 8015178:	4608      	mov	r0, r1
 801517a:	602b      	str	r3, [r5, #0]
 801517c:	f7ee f8cf 	bl	800331e <_isatty>
 8015180:	1c43      	adds	r3, r0, #1
 8015182:	d102      	bne.n	801518a <_isatty_r+0x1a>
 8015184:	682b      	ldr	r3, [r5, #0]
 8015186:	b103      	cbz	r3, 801518a <_isatty_r+0x1a>
 8015188:	6023      	str	r3, [r4, #0]
 801518a:	bd38      	pop	{r3, r4, r5, pc}
 801518c:	24005598 	.word	0x24005598

08015190 <_lseek_r>:
 8015190:	b538      	push	{r3, r4, r5, lr}
 8015192:	4d07      	ldr	r5, [pc, #28]	; (80151b0 <_lseek_r+0x20>)
 8015194:	4604      	mov	r4, r0
 8015196:	4608      	mov	r0, r1
 8015198:	4611      	mov	r1, r2
 801519a:	2200      	movs	r2, #0
 801519c:	602a      	str	r2, [r5, #0]
 801519e:	461a      	mov	r2, r3
 80151a0:	f7ee f8c8 	bl	8003334 <_lseek>
 80151a4:	1c43      	adds	r3, r0, #1
 80151a6:	d102      	bne.n	80151ae <_lseek_r+0x1e>
 80151a8:	682b      	ldr	r3, [r5, #0]
 80151aa:	b103      	cbz	r3, 80151ae <_lseek_r+0x1e>
 80151ac:	6023      	str	r3, [r4, #0]
 80151ae:	bd38      	pop	{r3, r4, r5, pc}
 80151b0:	24005598 	.word	0x24005598

080151b4 <_read_r>:
 80151b4:	b538      	push	{r3, r4, r5, lr}
 80151b6:	4d07      	ldr	r5, [pc, #28]	; (80151d4 <_read_r+0x20>)
 80151b8:	4604      	mov	r4, r0
 80151ba:	4608      	mov	r0, r1
 80151bc:	4611      	mov	r1, r2
 80151be:	2200      	movs	r2, #0
 80151c0:	602a      	str	r2, [r5, #0]
 80151c2:	461a      	mov	r2, r3
 80151c4:	f7ee f856 	bl	8003274 <_read>
 80151c8:	1c43      	adds	r3, r0, #1
 80151ca:	d102      	bne.n	80151d2 <_read_r+0x1e>
 80151cc:	682b      	ldr	r3, [r5, #0]
 80151ce:	b103      	cbz	r3, 80151d2 <_read_r+0x1e>
 80151d0:	6023      	str	r3, [r4, #0]
 80151d2:	bd38      	pop	{r3, r4, r5, pc}
 80151d4:	24005598 	.word	0x24005598

080151d8 <_init>:
 80151d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151da:	bf00      	nop
 80151dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80151de:	bc08      	pop	{r3}
 80151e0:	469e      	mov	lr, r3
 80151e2:	4770      	bx	lr

080151e4 <_fini>:
 80151e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151e6:	bf00      	nop
 80151e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80151ea:	bc08      	pop	{r3}
 80151ec:	469e      	mov	lr, r3
 80151ee:	4770      	bx	lr
