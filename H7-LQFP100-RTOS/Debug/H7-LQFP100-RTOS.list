
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019b20  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08019dc0  08019dc0  00029dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a258  0801a258  0002a258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a260  0801a260  0002a260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801a264  0801a264  0002a264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000134  24000000  0801a268  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000687c  24000140  0801a39c  00030140  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  240069bc  0801a39c  000369bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY
 10 .debug_info   00040d6f  00000000  00000000  00030162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007cf8  00000000  00000000  00070ed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b98  00000000  00000000  00078bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002850  00000000  00000000  0007b768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000467e3  00000000  00000000  0007dfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000432e3  00000000  00000000  000c479b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001969c9  00000000  00000000  00107a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0029e447  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bc60  00000000  00000000  0029e498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000140 	.word	0x24000140
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08019da8 	.word	0x08019da8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000144 	.word	0x24000144
 80002dc:	08019da8 	.word	0x08019da8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f004 fdcf 	bl	800520c <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f002 fb72 	bl	8002d5c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f005 feea 	bl	800645c <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f002 fb65 	bl	8002d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f005 f82d 	bl	8005714 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f002 fb4c 	bl	8002d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f005 f81f 	bl	8005714 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f002 fb3e 	bl	8002d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f005 f811 	bl	8005714 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f002 fb30 	bl	8002d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f005 f803 	bl	8005714 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f002 fb22 	bl	8002d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f004 fff4 	bl	8005714 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f002 fb13 	bl	8002d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f004 ffe5 	bl	8005714 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f002 fb04 	bl	8002d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f004 ffd6 	bl	8005714 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f002 faf5 	bl	8002d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f004 ffc7 	bl	8005714 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f002 fae6 	bl	8002d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f004 ffb8 	bl	8005714 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f002 fad7 	bl	8002d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f004 ffa9 	bl	8005714 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f002 fac8 	bl	8002d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f004 ff9a 	bl	8005714 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f002 fab9 	bl	8002d5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400015c 	.word	0x2400015c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f004 fcb7 	bl	800520c <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f002 fa5a 	bl	8002d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f004 ff22 	bl	8005714 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f002 fa41 	bl	8002d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f004 ff14 	bl	8005714 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f002 fa33 	bl	8002d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f004 ff06 	bl	8005714 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f002 fa25 	bl	8002d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f004 fef8 	bl	8005714 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f002 fa17 	bl	8002d5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001c0 	.word	0x240001c0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f009 fc9a 	bl	800a334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f009 fc8e 	bl	800a334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f009 fc82 	bl	800a334 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f006 fb2d 	bl	80070d4 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f002 f96c 	bl	8002d5c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f004 f970 	bl	8004dc4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f004 f96a 	bl	8004dc4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f006 facd 	bl	80070d4 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f002 f90c 	bl	8002d5c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000224 	.word	0x24000224
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400029c 	.word	0x2400029c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f018 fc05 	bl	801939c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f005 fe95 	bl	80068c8 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f002 f8da 	bl	8002d5c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f006 f8b0 	bl	8006d28 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f002 f8c5 	bl	8002d5c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000314 	.word	0x24000314
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f009 fb6d 	bl	800a334 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f006 fa18 	bl	80070d4 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f002 f857 	bl	8002d5c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f005 fd62 	bl	8006788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f005 fd79 	bl	80067bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000328 	.word	0x24000328
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f005 fd39 	bl	8006788 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f005 fd50 	bl	80067bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f005 fd31 	bl	8006788 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f005 fd48 	bl	80067bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f005 fd29 	bl	8006788 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f005 fd40 	bl	80067bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f005 fd21 	bl	8006788 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f005 fd38 	bl	80067bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f005 fd19 	bl	8006788 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f005 fd30 	bl	80067bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f005 fd11 	bl	8006788 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f005 fd28 	bl	80067bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2011      	movs	r0, #17
 8000d72:	f005 fd09 	bl	8006788 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d76:	2011      	movs	r0, #17
 8000d78:	f005 fd20 	bl	80067bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	202f      	movs	r0, #47	; 0x2f
 8000d82:	f005 fd01 	bl	8006788 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d86:	202f      	movs	r0, #47	; 0x2f
 8000d88:	f005 fd18 	bl	80067bc <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8000da8:	f245 5355 	movw	r3, #21845	; 0x5555
 8000dac:	81bb      	strh	r3, [r7, #12]
 8000dae:	2301      	movs	r3, #1
 8000db0:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8000db2:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <EE_ReadVariable+0x88>)
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <EE_ReadVariable+0x88>)
 8000db8:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f000 f856 	bl	8000e6c <EE_FindValidPage>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000dc4:	89fb      	ldrh	r3, [r7, #14]
 8000dc6:	2bab      	cmp	r3, #171	; 0xab
 8000dc8:	d101      	bne.n	8000dce <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8000dca:	23ab      	movs	r3, #171	; 0xab
 8000dcc:	e024      	b.n	8000e18 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000dce:	89fb      	ldrh	r3, [r7, #14]
 8000dd0:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8000dd4:	045b      	lsls	r3, r3, #17
 8000dd6:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8000dd8:	89fb      	ldrh	r3, [r7, #14]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	045a      	lsls	r2, r3, #17
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <EE_ReadVariable+0x8c>)
 8000de0:	4413      	add	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 8000de4:	e012      	b.n	8000e0c <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8000dec:	89ba      	ldrh	r2, [r7, #12]
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d108      	bne.n	8000e06 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	3b20      	subs	r3, #32
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	82fb      	strh	r3, [r7, #22]

      break;
 8000e04:	e007      	b.n	8000e16 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	3b40      	subs	r3, #64	; 0x40
 8000e0a:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	3320      	adds	r3, #32
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d8e7      	bhi.n	8000de6 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8000e16:	8afb      	ldrh	r3, [r7, #22]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	081c0000 	.word	0x081c0000
 8000e24:	081bffe0 	.word	0x081bffe0

08000e28 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	460a      	mov	r2, r1
 8000e32:	80fb      	strh	r3, [r7, #6]
 8000e34:	4613      	mov	r3, r2
 8000e36:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000e3c:	88ba      	ldrh	r2, [r7, #4]
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f858 	bl	8000ef8 <EE_VerifyPageFullWriteVariable>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8000e4c:	89fb      	ldrh	r3, [r7, #14]
 8000e4e:	2b80      	cmp	r3, #128	; 0x80
 8000e50:	d107      	bne.n	8000e62 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8000e52:	88ba      	ldrh	r2, [r7, #4]
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 f8ff 	bl	800105c <EE_PageTransfer>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 8000e62:	89fb      	ldrh	r3, [r7, #14]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000e76:	2306      	movs	r3, #6
 8000e78:	81fb      	strh	r3, [r7, #14]
 8000e7a:	2306      	movs	r3, #6
 8000e7c:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <EE_FindValidPage+0x84>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <EE_FindValidPage+0x88>)
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d01b      	beq.n	8000ec8 <EE_FindValidPage+0x5c>
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d125      	bne.n	8000ee0 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8000e94:	89bb      	ldrh	r3, [r7, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d108      	bne.n	8000eac <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8000e9a:	89fb      	ldrh	r3, [r7, #14]
 8000e9c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d101      	bne.n	8000ea8 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	e01c      	b.n	8000ee2 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e01a      	b.n	8000ee2 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8000eac:	89fb      	ldrh	r3, [r7, #14]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d108      	bne.n	8000ec4 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8000eb2:	89bb      	ldrh	r3, [r7, #12]
 8000eb4:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d101      	bne.n	8000ec0 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e010      	b.n	8000ee2 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	e00e      	b.n	8000ee2 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8000ec4:	23ab      	movs	r3, #171	; 0xab
 8000ec6:	e00c      	b.n	8000ee2 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8000ec8:	89fb      	ldrh	r3, [r7, #14]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e007      	b.n	8000ee2 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8000ed2:	89bb      	ldrh	r3, [r7, #12]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d101      	bne.n	8000edc <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e002      	b.n	8000ee2 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8000edc:	23ab      	movs	r3, #171	; 0xab
 8000ede:	e000      	b.n	8000ee2 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8000ee0:	2300      	movs	r3, #0
  }
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	081c0000 	.word	0x081c0000
 8000ef4:	081e0000 	.word	0x081e0000

08000ef8 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b096      	sub	sp, #88	; 0x58
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	460a      	mov	r2, r1
 8000f02:	80fb      	strh	r3, [r7, #6]
 8000f04:	4613      	mov	r3, r2
 8000f06:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8000f14:	4b4d      	ldr	r3, [pc, #308]	; (800104c <EE_VerifyPageFullWriteVariable+0x154>)
 8000f16:	657b      	str	r3, [r7, #84]	; 0x54
 8000f18:	4b4d      	ldr	r3, [pc, #308]	; (8001050 <EE_VerifyPageFullWriteVariable+0x158>)
 8000f1a:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t data32[8] = {Data};
 8000f1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f20:	2220      	movs	r2, #32
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f018 fa39 	bl	801939c <memset>
 8000f2a:	88bb      	ldrh	r3, [r7, #4]
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	2220      	movs	r2, #32
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f018 fa30 	bl	801939c <memset>
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8000f40:	2001      	movs	r0, #1
 8000f42:	f7ff ff93 	bl	8000e6c <EE_FindValidPage>
 8000f46:	4603      	mov	r3, r0
 8000f48:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000f4c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000f50:	2bab      	cmp	r3, #171	; 0xab
 8000f52:	d101      	bne.n	8000f58 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 8000f54:	23ab      	movs	r3, #171	; 0xab
 8000f56:	e075      	b.n	8001044 <EE_VerifyPageFullWriteVariable+0x14c>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000f58:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000f5c:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8000f60:	045b      	lsls	r3, r3, #17
 8000f62:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8000f64:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000f68:	3301      	adds	r3, #1
 8000f6a:	045a      	lsls	r2, r3, #17
 8000f6c:	4b39      	ldr	r3, [pc, #228]	; (8001054 <EE_VerifyPageFullWriteVariable+0x15c>)
 8000f6e:	4413      	add	r3, r2
 8000f70:	64fb      	str	r3, [r7, #76]	; 0x4c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f72:	f3bf 8f4f 	dsb	sy
}
 8000f76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f78:	f3bf 8f6f 	isb	sy
}
 8000f7c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f7e:	4b36      	ldr	r3, [pc, #216]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	4a35      	ldr	r2, [pc, #212]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 8000f84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f88:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f8a:	4b33      	ldr	r3, [pc, #204]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f92:	f3bf 8f4f 	dsb	sy
}
 8000f96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f98:	f3bf 8f6f 	isb	sy
}
 8000f9c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000f9e:	bf00      	nop

  SCB_DisableICache();

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8000fa0:	e028      	b.n	8000ff4 <EE_VerifyPageFullWriteVariable+0xfc>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8000fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000faa:	d120      	bne.n	8000fee <EE_VerifyPageFullWriteVariable+0xf6>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8000fac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f008 fee3 	bl	8009d80 <HAL_FLASH_Program>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8000fc0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <EE_VerifyPageFullWriteVariable+0xd8>
      {
        return FlashStatus;
 8000fc8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	e039      	b.n	8001044 <EE_VerifyPageFullWriteVariable+0x14c>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8000fd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fd2:	3320      	adds	r3, #32
 8000fd4:	f107 020c 	add.w	r2, r7, #12
 8000fd8:	4619      	mov	r1, r3
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f008 fed0 	bl	8009d80 <HAL_FLASH_Program>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 8000fe6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	e02a      	b.n	8001044 <EE_VerifyPageFullWriteVariable+0x14c>
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 8000fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ff0:	3340      	adds	r3, #64	; 0x40
 8000ff2:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 8000ff4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d3d2      	bcc.n	8000fa2 <EE_VerifyPageFullWriteVariable+0xaa>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d11b      	bne.n	8001040 <EE_VerifyPageFullWriteVariable+0x148>
  __ASM volatile ("dsb 0xF":::"memory");
 8001008:	f3bf 8f4f 	dsb	sy
}
 800100c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800100e:	f3bf 8f6f 	isb	sy
}
 8001012:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001014:	4b10      	ldr	r3, [pc, #64]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 8001016:	2200      	movs	r2, #0
 8001018:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800101c:	f3bf 8f4f 	dsb	sy
}
 8001020:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001022:	f3bf 8f6f 	isb	sy
}
 8001026:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 800102e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001032:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001034:	f3bf 8f4f 	dsb	sy
}
 8001038:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800103a:	f3bf 8f6f 	isb	sy
}
 800103e:	e000      	b.n	8001042 <EE_VerifyPageFullWriteVariable+0x14a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001040:	bf00      	nop
    }
  }
  SCB_EnableICache();

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001042:	2380      	movs	r3, #128	; 0x80
}
 8001044:	4618      	mov	r0, r3
 8001046:	3758      	adds	r7, #88	; 0x58
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	081c0000 	.word	0x081c0000
 8001050:	081e0000 	.word	0x081e0000
 8001054:	081bffff 	.word	0x081bffff
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b09c      	sub	sp, #112	; 0x70
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	460a      	mov	r2, r1
 8001066:	80fb      	strh	r3, [r7, #6]
 8001068:	4613      	mov	r3, r2
 800106a:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001072:	4bc3      	ldr	r3, [pc, #780]	; (8001380 <EE_PageTransfer+0x324>)
 8001074:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint16_t OldPageId=0;
 8001076:	2300      	movs	r3, #0
 8001078:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001082:	2300      	movs	r3, #0
 8001084:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800108e:	2300      	movs	r3, #0
 8001090:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  uint32_t SectorError = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	65fb      	str	r3, [r7, #92]	; 0x5c
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8001098:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109c:	2220      	movs	r2, #32
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f018 f97b 	bl	801939c <memset>
  uint32_t receive[8] = {0xEEEE};
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	2220      	movs	r2, #32
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f018 f974 	bl	801939c <memset>
 80010b4:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 80010b8:	60bb      	str	r3, [r7, #8]
  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80010ba:	2000      	movs	r0, #0
 80010bc:	f7ff fed6 	bl	8000e6c <EE_FindValidPage>
 80010c0:	4603      	mov	r3, r0
 80010c2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  if (ValidPage == PAGE1)       /* Page1 valid */
 80010c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d105      	bne.n	80010da <EE_PageTransfer+0x7e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 80010ce:	4bac      	ldr	r3, [pc, #688]	; (8001380 <EE_PageTransfer+0x324>)
 80010d0:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 80010d2:	2307      	movs	r3, #7
 80010d4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80010d8:	e00b      	b.n	80010f2 <EE_PageTransfer+0x96>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 80010da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d105      	bne.n	80010ee <EE_PageTransfer+0x92>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 80010e2:	4ba8      	ldr	r3, [pc, #672]	; (8001384 <EE_PageTransfer+0x328>)
 80010e4:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 80010e6:	2306      	movs	r3, #6
 80010e8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80010ec:	e001      	b.n	80010f2 <EE_PageTransfer+0x96>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 80010ee:	23ab      	movs	r3, #171	; 0xab
 80010f0:	e142      	b.n	8001378 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 80010f2:	f3bf 8f4f 	dsb	sy
}
 80010f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010f8:	f3bf 8f6f 	isb	sy
}
 80010fc:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80010fe:	4ba2      	ldr	r3, [pc, #648]	; (8001388 <EE_PageTransfer+0x32c>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	4aa1      	ldr	r2, [pc, #644]	; (8001388 <EE_PageTransfer+0x32c>)
 8001104:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001108:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800110a:	4b9f      	ldr	r3, [pc, #636]	; (8001388 <EE_PageTransfer+0x32c>)
 800110c:	2200      	movs	r2, #0
 800110e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001112:	f3bf 8f4f 	dsb	sy
}
 8001116:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001118:	f3bf 8f6f 	isb	sy
}
 800111c:	bf00      	nop
}
 800111e:	bf00      	nop
  }

  /* Set the new Page status to RECEIVE_DATA status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8001120:	f107 0308 	add.w	r3, r7, #8
 8001124:	461a      	mov	r2, r3
 8001126:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001128:	2001      	movs	r0, #1
 800112a:	f008 fe29 	bl	8009d80 <HAL_FLASH_Program>
 800112e:	4603      	mov	r3, r0
 8001130:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001134:	4b94      	ldr	r3, [pc, #592]	; (8001388 <EE_PageTransfer+0x32c>)
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d11b      	bne.n	8001178 <EE_PageTransfer+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001140:	f3bf 8f4f 	dsb	sy
}
 8001144:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001146:	f3bf 8f6f 	isb	sy
}
 800114a:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800114c:	4b8e      	ldr	r3, [pc, #568]	; (8001388 <EE_PageTransfer+0x32c>)
 800114e:	2200      	movs	r2, #0
 8001150:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001154:	f3bf 8f4f 	dsb	sy
}
 8001158:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800115a:	f3bf 8f6f 	isb	sy
}
 800115e:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001160:	4b89      	ldr	r3, [pc, #548]	; (8001388 <EE_PageTransfer+0x32c>)
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	4a88      	ldr	r2, [pc, #544]	; (8001388 <EE_PageTransfer+0x32c>)
 8001166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800116a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800116c:	f3bf 8f4f 	dsb	sy
}
 8001170:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001172:	f3bf 8f6f 	isb	sy
}
 8001176:	e000      	b.n	800117a <EE_PageTransfer+0x11e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001178:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800117a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <EE_PageTransfer+0x12e>
  {
    return FlashStatus;
 8001182:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001186:	b29b      	uxth	r3, r3
 8001188:	e0f6      	b.n	8001378 <EE_PageTransfer+0x31c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800118a:	88ba      	ldrh	r2, [r7, #4]
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff feb1 	bl	8000ef8 <EE_VerifyPageFullWriteVariable>
 8001196:	4603      	mov	r3, r0
 8001198:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 800119c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <EE_PageTransfer+0x14e>
  {
    return EepromStatus;
 80011a4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80011a8:	e0e6      	b.n	8001378 <EE_PageTransfer+0x31c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80011b0:	e031      	b.n	8001216 <EE_PageTransfer+0x1ba>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 80011b2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80011b6:	4a75      	ldr	r2, [pc, #468]	; (800138c <EE_PageTransfer+0x330>)
 80011b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011bc:	88fa      	ldrh	r2, [r7, #6]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d024      	beq.n	800120c <EE_PageTransfer+0x1b0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80011c2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80011c6:	4a71      	ldr	r2, [pc, #452]	; (800138c <EE_PageTransfer+0x330>)
 80011c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011cc:	4970      	ldr	r1, [pc, #448]	; (8001390 <EE_PageTransfer+0x334>)
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fde2 	bl	8000d98 <EE_ReadVariable>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 80011da:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d014      	beq.n	800120c <EE_PageTransfer+0x1b0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80011e2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80011e6:	4a69      	ldr	r2, [pc, #420]	; (800138c <EE_PageTransfer+0x330>)
 80011e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011ec:	4a68      	ldr	r2, [pc, #416]	; (8001390 <EE_PageTransfer+0x334>)
 80011ee:	8812      	ldrh	r2, [r2, #0]
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fe80 	bl	8000ef8 <EE_VerifyPageFullWriteVariable>
 80011f8:	4603      	mov	r3, r0
 80011fa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 80011fe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <EE_PageTransfer+0x1b0>
        {
          return EepromStatus;
 8001206:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800120a:	e0b5      	b.n	8001378 <EE_PageTransfer+0x31c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800120c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001210:	3301      	adds	r3, #1
 8001212:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001216:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800121a:	2b1a      	cmp	r3, #26
 800121c:	d9c9      	bls.n	80011b2 <EE_PageTransfer+0x156>
        }
      }
    }
  }

  HAL_FLASH_Unlock();
 800121e:	f008 fe41 	bl	8009ea4 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001222:	4b5c      	ldr	r3, [pc, #368]	; (8001394 <EE_PageTransfer+0x338>)
 8001224:	f44f 028e 	mov.w	r2, #4653056	; 0x470000
 8001228:	615a      	str	r2, [r3, #20]
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 800122a:	2300      	movs	r3, #0
 800122c:	64bb      	str	r3, [r7, #72]	; 0x48
  pEraseInit.Banks = FLASH_BANK_2 ;
 800122e:	2302      	movs	r3, #2
 8001230:	64fb      	str	r3, [r7, #76]	; 0x4c
  pEraseInit.Sector = OldPageId;
 8001232:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001236:	653b      	str	r3, [r7, #80]	; 0x50
  pEraseInit.NbSectors = 1;
 8001238:	2301      	movs	r3, #1
 800123a:	657b      	str	r3, [r7, #84]	; 0x54
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800123c:	2320      	movs	r3, #32
 800123e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8001240:	f3bf 8f4f 	dsb	sy
}
 8001244:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001246:	f3bf 8f6f 	isb	sy
}
 800124a:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800124c:	4b4e      	ldr	r3, [pc, #312]	; (8001388 <EE_PageTransfer+0x32c>)
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	4a4d      	ldr	r2, [pc, #308]	; (8001388 <EE_PageTransfer+0x32c>)
 8001252:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001256:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001258:	4b4b      	ldr	r3, [pc, #300]	; (8001388 <EE_PageTransfer+0x32c>)
 800125a:	2200      	movs	r2, #0
 800125c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001260:	f3bf 8f4f 	dsb	sy
}
 8001264:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001266:	f3bf 8f6f 	isb	sy
}
 800126a:	bf00      	nop
}
 800126c:	bf00      	nop

  /* Erase the old Page: Set old Page status to ERASED status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800126e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001272:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f008 fee9 	bl	800a050 <HAL_FLASHEx_Erase>
 800127e:	4603      	mov	r3, r0
 8001280:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001284:	4b40      	ldr	r3, [pc, #256]	; (8001388 <EE_PageTransfer+0x32c>)
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d11b      	bne.n	80012c8 <EE_PageTransfer+0x26c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001290:	f3bf 8f4f 	dsb	sy
}
 8001294:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001296:	f3bf 8f6f 	isb	sy
}
 800129a:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800129c:	4b3a      	ldr	r3, [pc, #232]	; (8001388 <EE_PageTransfer+0x32c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
}
 80012a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012aa:	f3bf 8f6f 	isb	sy
}
 80012ae:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012b0:	4b35      	ldr	r3, [pc, #212]	; (8001388 <EE_PageTransfer+0x32c>)
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	4a34      	ldr	r2, [pc, #208]	; (8001388 <EE_PageTransfer+0x32c>)
 80012b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ba:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012bc:	f3bf 8f4f 	dsb	sy
}
 80012c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012c2:	f3bf 8f6f 	isb	sy
}
 80012c6:	e000      	b.n	80012ca <EE_PageTransfer+0x26e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012c8:	bf00      	nop
  SCB_EnableICache();
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80012ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <EE_PageTransfer+0x27e>
  {
    return FlashStatus;
 80012d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	e04e      	b.n	8001378 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 80012da:	f3bf 8f4f 	dsb	sy
}
 80012de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012e0:	f3bf 8f6f 	isb	sy
}
 80012e4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80012e6:	4b28      	ldr	r3, [pc, #160]	; (8001388 <EE_PageTransfer+0x32c>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	4a27      	ldr	r2, [pc, #156]	; (8001388 <EE_PageTransfer+0x32c>)
 80012ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80012f0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012f2:	4b25      	ldr	r3, [pc, #148]	; (8001388 <EE_PageTransfer+0x32c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012fa:	f3bf 8f4f 	dsb	sy
}
 80012fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001300:	f3bf 8f6f 	isb	sy
}
 8001304:	bf00      	nop
}
 8001306:	bf00      	nop
  }

  /* Set new Page status to VALID_PAGE status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8001308:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800130c:	461a      	mov	r2, r3
 800130e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001310:	2001      	movs	r0, #1
 8001312:	f008 fd35 	bl	8009d80 <HAL_FLASH_Program>
 8001316:	4603      	mov	r3, r0
 8001318:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <EE_PageTransfer+0x32c>)
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d11b      	bne.n	8001360 <EE_PageTransfer+0x304>
  __ASM volatile ("dsb 0xF":::"memory");
 8001328:	f3bf 8f4f 	dsb	sy
}
 800132c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800132e:	f3bf 8f6f 	isb	sy
}
 8001332:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <EE_PageTransfer+0x32c>)
 8001336:	2200      	movs	r2, #0
 8001338:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800133c:	f3bf 8f4f 	dsb	sy
}
 8001340:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001342:	f3bf 8f6f 	isb	sy
}
 8001346:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <EE_PageTransfer+0x32c>)
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <EE_PageTransfer+0x32c>)
 800134e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001352:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001354:	f3bf 8f4f 	dsb	sy
}
 8001358:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800135a:	f3bf 8f6f 	isb	sy
}
 800135e:	e000      	b.n	8001362 <EE_PageTransfer+0x306>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001360:	bf00      	nop
  SCB_EnableICache();
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001362:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <EE_PageTransfer+0x316>
  {
    return FlashStatus;
 800136a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800136e:	b29b      	uxth	r3, r3
 8001370:	e002      	b.n	8001378 <EE_PageTransfer+0x31c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001372:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001376:	b29b      	uxth	r3, r3
}
 8001378:	4618      	mov	r0, r3
 800137a:	3770      	adds	r7, #112	; 0x70
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	081c0000 	.word	0x081c0000
 8001384:	081e0000 	.word	0x081e0000
 8001388:	e000ed00 	.word	0xe000ed00
 800138c:	24000000 	.word	0x24000000
 8001390:	240003a0 	.word	0x240003a0
 8001394:	52002000 	.word	0x52002000

08001398 <handle_error>:
uint16_t VirtAddVarTab[NB_OF_VAR] = {0x5550, 0x5551, 0x5552, 0x5553, 0x5554, 0x5555, 0x5556, 0x5557, 0x5558, 0x5559, 0x555A, 0x555B, 0x555C, 0x555D, 0x555E, 0x555F, 0x6660, 0x6661, 0x6662, 0x6663, 0x6664, 0x6665, 0x6666, 0x6667, 0x6668, 0x6669, 0x666A};
uint16_t VarDataTab[NB_OF_VAR] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

uint16_t local_cpy[NB_OF_VAR];

void handle_error(ERROR_STRUCT error) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	80b8      	strh	r0, [r7, #4]

	switch (error.category) {
 80013a0:	793b      	ldrb	r3, [r7, #4]
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d826      	bhi.n	80013f4 <handle_error+0x5c>
 80013a6:	a201      	add	r2, pc, #4	; (adr r2, 80013ac <handle_error+0x14>)
 80013a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ac:	080013c1 	.word	0x080013c1
 80013b0:	080013d5 	.word	0x080013d5
 80013b4:	080013dd 	.word	0x080013dd
 80013b8:	080013e5 	.word	0x080013e5
 80013bc:	080013ed 	.word	0x080013ed
	case EC_power_supply_rail:
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <handle_error+0x68>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2102      	movs	r1, #2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f014 ff24 	bl	8016214 <osEventFlagsSet>
		increment_error_counter(error);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 f819 	bl	8001404 <increment_error_counter>

		//send_error_packet(error);
		//NVIC_SystemReset();
		break;
 80013d2:	e010      	b.n	80013f6 <handle_error+0x5e>
	case EC_seu:
		increment_error_counter(error);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 f815 	bl	8001404 <increment_error_counter>
		//send_error_packet(error);
		//NVIC_SystemReset();
		break;
 80013da:	e00c      	b.n	80013f6 <handle_error+0x5e>
	case EC_peripheral:
		increment_error_counter(error);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f811 	bl	8001404 <increment_error_counter>
		//send_error_packet(error);
		//NVIC_SystemReset();
		break;
 80013e2:	e008      	b.n	80013f6 <handle_error+0x5e>
	case EC_brownout:
		increment_error_counter(error);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 f80d 	bl	8001404 <increment_error_counter>
		break;
 80013ea:	e004      	b.n	80013f6 <handle_error+0x5e>
	case EC_watchdog:
		increment_error_counter(error);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 f809 	bl	8001404 <increment_error_counter>
		break;
 80013f2:	e000      	b.n	80013f6 <handle_error+0x5e>
	default:
		//send_error_packet(error);
		break;
 80013f4:	bf00      	nop
	}
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	24001ad0 	.word	0x24001ad0

08001404 <increment_error_counter>:


}


void increment_error_counter(ERROR_STRUCT error) {
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	80b8      	strh	r0, [r7, #4]
	local_cpy[error.category]++;
 800140c:	793b      	ldrb	r3, [r7, #4]
 800140e:	4a0b      	ldr	r2, [pc, #44]	; (800143c <increment_error_counter+0x38>)
 8001410:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001414:	3201      	adds	r2, #1
 8001416:	b291      	uxth	r1, r2
 8001418:	4a08      	ldr	r2, [pc, #32]	; (800143c <increment_error_counter+0x38>)
 800141a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	local_cpy[error.detail]++;
 800141e:	797b      	ldrb	r3, [r7, #5]
 8001420:	4a06      	ldr	r2, [pc, #24]	; (800143c <increment_error_counter+0x38>)
 8001422:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001426:	3201      	adds	r2, #1
 8001428:	b291      	uxth	r1, r2
 800142a:	4a04      	ldr	r2, [pc, #16]	; (800143c <increment_error_counter+0x38>)
 800142c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//update_error_counter();
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	240003dc 	.word	0x240003dc

08001440 <reset_error_counters>:
		}
	}
}


void reset_error_counters() {
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
	// Resets all error counters to 0
	for (int i = 0; i < NB_OF_VAR; i++) {
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	e013      	b.n	8001474 <reset_error_counters+0x34>
		if ((EE_WriteVariable(VirtAddVarTab[i], VarDataTab[i])) != HAL_OK) {
 800144c:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <reset_error_counters+0x44>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001454:	490c      	ldr	r1, [pc, #48]	; (8001488 <reset_error_counters+0x48>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800145c:	4619      	mov	r1, r3
 800145e:	4610      	mov	r0, r2
 8001460:	f7ff fce2 	bl	8000e28 <EE_WriteVariable>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <reset_error_counters+0x2e>
			Error_Handler();
 800146a:	f001 fc77 	bl	8002d5c <Error_Handler>
	for (int i = 0; i < NB_OF_VAR; i++) {
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3301      	adds	r3, #1
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b1a      	cmp	r3, #26
 8001478:	dde8      	ble.n	800144c <reset_error_counters+0xc>
		}
	}
}
 800147a:	bf00      	nop
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	24000000 	.word	0x24000000
 8001488:	240003a4 	.word	0x240003a4

0800148c <send_previous_error_packet>:

void send_previous_error_packet() {
 800148c:	b580      	push	{r7, lr}
 800148e:	b08e      	sub	sp, #56	; 0x38
 8001490:	af00      	add	r7, sp, #0
	uint8_t buffer[ERROR_PACKET_SIZE];

	local_cpy[14] = 927;
 8001492:	4b9c      	ldr	r3, [pc, #624]	; (8001704 <send_previous_error_packet+0x278>)
 8001494:	f240 329f 	movw	r2, #927	; 0x39f
 8001498:	839a      	strh	r2, [r3, #28]

	buffer[0] = ERROR_PACKET_SYNC;
 800149a:	23dd      	movs	r3, #221	; 0xdd
 800149c:	703b      	strb	r3, [r7, #0]
	buffer[1] = ERROR_PACKET_SYNC;
 800149e:	23dd      	movs	r3, #221	; 0xdd
 80014a0:	707b      	strb	r3, [r7, #1]
	buffer[2] = ((local_cpy[0] & 0xFF00) >> 8);
 80014a2:	4b98      	ldr	r3, [pc, #608]	; (8001704 <send_previous_error_packet+0x278>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	0a1b      	lsrs	r3, r3, #8
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	70bb      	strb	r3, [r7, #2]
	buffer[3] = (local_cpy[0] & 0xFF);
 80014ae:	4b95      	ldr	r3, [pc, #596]	; (8001704 <send_previous_error_packet+0x278>)
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	70fb      	strb	r3, [r7, #3]
	buffer[4] = ((local_cpy[1] & 0xFF00) >> 8);
 80014b6:	4b93      	ldr	r3, [pc, #588]	; (8001704 <send_previous_error_packet+0x278>)
 80014b8:	885b      	ldrh	r3, [r3, #2]
 80014ba:	0a1b      	lsrs	r3, r3, #8
 80014bc:	b29b      	uxth	r3, r3
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	713b      	strb	r3, [r7, #4]
	buffer[5] = (local_cpy[1] & 0xFF);
 80014c2:	4b90      	ldr	r3, [pc, #576]	; (8001704 <send_previous_error_packet+0x278>)
 80014c4:	885b      	ldrh	r3, [r3, #2]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	717b      	strb	r3, [r7, #5]
	buffer[6] = ((local_cpy[2] & 0xFF00) >> 8);
 80014ca:	4b8e      	ldr	r3, [pc, #568]	; (8001704 <send_previous_error_packet+0x278>)
 80014cc:	889b      	ldrh	r3, [r3, #4]
 80014ce:	0a1b      	lsrs	r3, r3, #8
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	71bb      	strb	r3, [r7, #6]
	buffer[7] = (local_cpy[2] & 0xFF);
 80014d6:	4b8b      	ldr	r3, [pc, #556]	; (8001704 <send_previous_error_packet+0x278>)
 80014d8:	889b      	ldrh	r3, [r3, #4]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	71fb      	strb	r3, [r7, #7]
	buffer[8] = ((local_cpy[3] & 0xFF00) >> 8);
 80014de:	4b89      	ldr	r3, [pc, #548]	; (8001704 <send_previous_error_packet+0x278>)
 80014e0:	88db      	ldrh	r3, [r3, #6]
 80014e2:	0a1b      	lsrs	r3, r3, #8
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	723b      	strb	r3, [r7, #8]
	buffer[9] = (local_cpy[3] & 0xFF);
 80014ea:	4b86      	ldr	r3, [pc, #536]	; (8001704 <send_previous_error_packet+0x278>)
 80014ec:	88db      	ldrh	r3, [r3, #6]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	727b      	strb	r3, [r7, #9]
	buffer[10] = ((local_cpy[4] & 0xFF00) >> 8);
 80014f2:	4b84      	ldr	r3, [pc, #528]	; (8001704 <send_previous_error_packet+0x278>)
 80014f4:	891b      	ldrh	r3, [r3, #8]
 80014f6:	0a1b      	lsrs	r3, r3, #8
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	72bb      	strb	r3, [r7, #10]
	buffer[11] = (local_cpy[4] & 0xFF);
 80014fe:	4b81      	ldr	r3, [pc, #516]	; (8001704 <send_previous_error_packet+0x278>)
 8001500:	891b      	ldrh	r3, [r3, #8]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	72fb      	strb	r3, [r7, #11]
	buffer[12] = ((local_cpy[5] & 0xFF00) >> 8);
 8001506:	4b7f      	ldr	r3, [pc, #508]	; (8001704 <send_previous_error_packet+0x278>)
 8001508:	895b      	ldrh	r3, [r3, #10]
 800150a:	0a1b      	lsrs	r3, r3, #8
 800150c:	b29b      	uxth	r3, r3
 800150e:	b2db      	uxtb	r3, r3
 8001510:	733b      	strb	r3, [r7, #12]
	buffer[13] = (local_cpy[5] & 0xFF);
 8001512:	4b7c      	ldr	r3, [pc, #496]	; (8001704 <send_previous_error_packet+0x278>)
 8001514:	895b      	ldrh	r3, [r3, #10]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	737b      	strb	r3, [r7, #13]
	buffer[14] = ((local_cpy[6] & 0xFF00) >> 8);
 800151a:	4b7a      	ldr	r3, [pc, #488]	; (8001704 <send_previous_error_packet+0x278>)
 800151c:	899b      	ldrh	r3, [r3, #12]
 800151e:	0a1b      	lsrs	r3, r3, #8
 8001520:	b29b      	uxth	r3, r3
 8001522:	b2db      	uxtb	r3, r3
 8001524:	73bb      	strb	r3, [r7, #14]
	buffer[15] = (local_cpy[6] & 0xFF);
 8001526:	4b77      	ldr	r3, [pc, #476]	; (8001704 <send_previous_error_packet+0x278>)
 8001528:	899b      	ldrh	r3, [r3, #12]
 800152a:	b2db      	uxtb	r3, r3
 800152c:	73fb      	strb	r3, [r7, #15]
	buffer[16] = ((local_cpy[7] & 0xFF00) >> 8);
 800152e:	4b75      	ldr	r3, [pc, #468]	; (8001704 <send_previous_error_packet+0x278>)
 8001530:	89db      	ldrh	r3, [r3, #14]
 8001532:	0a1b      	lsrs	r3, r3, #8
 8001534:	b29b      	uxth	r3, r3
 8001536:	b2db      	uxtb	r3, r3
 8001538:	743b      	strb	r3, [r7, #16]
	buffer[17] = (local_cpy[7] & 0xFF);
 800153a:	4b72      	ldr	r3, [pc, #456]	; (8001704 <send_previous_error_packet+0x278>)
 800153c:	89db      	ldrh	r3, [r3, #14]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	747b      	strb	r3, [r7, #17]
	buffer[18] = ((local_cpy[8] & 0xFF00) >> 8);
 8001542:	4b70      	ldr	r3, [pc, #448]	; (8001704 <send_previous_error_packet+0x278>)
 8001544:	8a1b      	ldrh	r3, [r3, #16]
 8001546:	0a1b      	lsrs	r3, r3, #8
 8001548:	b29b      	uxth	r3, r3
 800154a:	b2db      	uxtb	r3, r3
 800154c:	74bb      	strb	r3, [r7, #18]
	buffer[19] = (local_cpy[8] & 0xFF);
 800154e:	4b6d      	ldr	r3, [pc, #436]	; (8001704 <send_previous_error_packet+0x278>)
 8001550:	8a1b      	ldrh	r3, [r3, #16]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	74fb      	strb	r3, [r7, #19]
	buffer[20] = ((local_cpy[9] & 0xFF00) >> 8);
 8001556:	4b6b      	ldr	r3, [pc, #428]	; (8001704 <send_previous_error_packet+0x278>)
 8001558:	8a5b      	ldrh	r3, [r3, #18]
 800155a:	0a1b      	lsrs	r3, r3, #8
 800155c:	b29b      	uxth	r3, r3
 800155e:	b2db      	uxtb	r3, r3
 8001560:	753b      	strb	r3, [r7, #20]
	buffer[21] = (local_cpy[9] & 0xFF);
 8001562:	4b68      	ldr	r3, [pc, #416]	; (8001704 <send_previous_error_packet+0x278>)
 8001564:	8a5b      	ldrh	r3, [r3, #18]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	757b      	strb	r3, [r7, #21]
	buffer[22] = ((local_cpy[10] & 0xFF00) >> 8);
 800156a:	4b66      	ldr	r3, [pc, #408]	; (8001704 <send_previous_error_packet+0x278>)
 800156c:	8a9b      	ldrh	r3, [r3, #20]
 800156e:	0a1b      	lsrs	r3, r3, #8
 8001570:	b29b      	uxth	r3, r3
 8001572:	b2db      	uxtb	r3, r3
 8001574:	75bb      	strb	r3, [r7, #22]
	buffer[23] = (local_cpy[10] & 0xFF);
 8001576:	4b63      	ldr	r3, [pc, #396]	; (8001704 <send_previous_error_packet+0x278>)
 8001578:	8a9b      	ldrh	r3, [r3, #20]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	75fb      	strb	r3, [r7, #23]
	buffer[24] = ((local_cpy[11] & 0xFF00) >> 8);
 800157e:	4b61      	ldr	r3, [pc, #388]	; (8001704 <send_previous_error_packet+0x278>)
 8001580:	8adb      	ldrh	r3, [r3, #22]
 8001582:	0a1b      	lsrs	r3, r3, #8
 8001584:	b29b      	uxth	r3, r3
 8001586:	b2db      	uxtb	r3, r3
 8001588:	763b      	strb	r3, [r7, #24]
	buffer[25] = (local_cpy[11] & 0xFF);
 800158a:	4b5e      	ldr	r3, [pc, #376]	; (8001704 <send_previous_error_packet+0x278>)
 800158c:	8adb      	ldrh	r3, [r3, #22]
 800158e:	b2db      	uxtb	r3, r3
 8001590:	767b      	strb	r3, [r7, #25]
	buffer[26] = ((local_cpy[12] & 0xFF00) >> 8);
 8001592:	4b5c      	ldr	r3, [pc, #368]	; (8001704 <send_previous_error_packet+0x278>)
 8001594:	8b1b      	ldrh	r3, [r3, #24]
 8001596:	0a1b      	lsrs	r3, r3, #8
 8001598:	b29b      	uxth	r3, r3
 800159a:	b2db      	uxtb	r3, r3
 800159c:	76bb      	strb	r3, [r7, #26]
	buffer[27] = (local_cpy[12] & 0xFF);
 800159e:	4b59      	ldr	r3, [pc, #356]	; (8001704 <send_previous_error_packet+0x278>)
 80015a0:	8b1b      	ldrh	r3, [r3, #24]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	76fb      	strb	r3, [r7, #27]
	buffer[28] = ((local_cpy[13] & 0xFF00) >> 8);
 80015a6:	4b57      	ldr	r3, [pc, #348]	; (8001704 <send_previous_error_packet+0x278>)
 80015a8:	8b5b      	ldrh	r3, [r3, #26]
 80015aa:	0a1b      	lsrs	r3, r3, #8
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	773b      	strb	r3, [r7, #28]
	buffer[29] = (local_cpy[13] & 0xFF);
 80015b2:	4b54      	ldr	r3, [pc, #336]	; (8001704 <send_previous_error_packet+0x278>)
 80015b4:	8b5b      	ldrh	r3, [r3, #26]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	777b      	strb	r3, [r7, #29]
	buffer[30] = ((local_cpy[14] & 0xFF00) >> 8);
 80015ba:	4b52      	ldr	r3, [pc, #328]	; (8001704 <send_previous_error_packet+0x278>)
 80015bc:	8b9b      	ldrh	r3, [r3, #28]
 80015be:	0a1b      	lsrs	r3, r3, #8
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	77bb      	strb	r3, [r7, #30]
	buffer[31] = (local_cpy[14] & 0xFF);
 80015c6:	4b4f      	ldr	r3, [pc, #316]	; (8001704 <send_previous_error_packet+0x278>)
 80015c8:	8b9b      	ldrh	r3, [r3, #28]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	77fb      	strb	r3, [r7, #31]
	buffer[32] = ((local_cpy[15] & 0xFF00) >> 8);
 80015ce:	4b4d      	ldr	r3, [pc, #308]	; (8001704 <send_previous_error_packet+0x278>)
 80015d0:	8bdb      	ldrh	r3, [r3, #30]
 80015d2:	0a1b      	lsrs	r3, r3, #8
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[33] = (local_cpy[15] & 0xFF);
 80015dc:	4b49      	ldr	r3, [pc, #292]	; (8001704 <send_previous_error_packet+0x278>)
 80015de:	8bdb      	ldrh	r3, [r3, #30]
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[34] = ((local_cpy[16] & 0xFF00) >> 8);
 80015e6:	4b47      	ldr	r3, [pc, #284]	; (8001704 <send_previous_error_packet+0x278>)
 80015e8:	8c1b      	ldrh	r3, [r3, #32]
 80015ea:	0a1b      	lsrs	r3, r3, #8
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[35] = (local_cpy[16] & 0xFF);
 80015f4:	4b43      	ldr	r3, [pc, #268]	; (8001704 <send_previous_error_packet+0x278>)
 80015f6:	8c1b      	ldrh	r3, [r3, #32]
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[36] = ((local_cpy[17] & 0xFF00) >> 8);
 80015fe:	4b41      	ldr	r3, [pc, #260]	; (8001704 <send_previous_error_packet+0x278>)
 8001600:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001602:	0a1b      	lsrs	r3, r3, #8
 8001604:	b29b      	uxth	r3, r3
 8001606:	b2db      	uxtb	r3, r3
 8001608:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[37] = (local_cpy[17] & 0xFF);
 800160c:	4b3d      	ldr	r3, [pc, #244]	; (8001704 <send_previous_error_packet+0x278>)
 800160e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001610:	b2db      	uxtb	r3, r3
 8001612:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[38] = ((local_cpy[18] & 0xFF00) >> 8);
 8001616:	4b3b      	ldr	r3, [pc, #236]	; (8001704 <send_previous_error_packet+0x278>)
 8001618:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800161a:	0a1b      	lsrs	r3, r3, #8
 800161c:	b29b      	uxth	r3, r3
 800161e:	b2db      	uxtb	r3, r3
 8001620:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[39] = (local_cpy[18] & 0xFF);
 8001624:	4b37      	ldr	r3, [pc, #220]	; (8001704 <send_previous_error_packet+0x278>)
 8001626:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001628:	b2db      	uxtb	r3, r3
 800162a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[40] = ((local_cpy[19] & 0xFF00) >> 8);
 800162e:	4b35      	ldr	r3, [pc, #212]	; (8001704 <send_previous_error_packet+0x278>)
 8001630:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001632:	0a1b      	lsrs	r3, r3, #8
 8001634:	b29b      	uxth	r3, r3
 8001636:	b2db      	uxtb	r3, r3
 8001638:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[41] = (local_cpy[19] & 0xFF);
 800163c:	4b31      	ldr	r3, [pc, #196]	; (8001704 <send_previous_error_packet+0x278>)
 800163e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001640:	b2db      	uxtb	r3, r3
 8001642:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[42] = ((local_cpy[20] & 0xFF00) >> 8);
 8001646:	4b2f      	ldr	r3, [pc, #188]	; (8001704 <send_previous_error_packet+0x278>)
 8001648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800164a:	0a1b      	lsrs	r3, r3, #8
 800164c:	b29b      	uxth	r3, r3
 800164e:	b2db      	uxtb	r3, r3
 8001650:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[43] = (local_cpy[20] & 0xFF);
 8001654:	4b2b      	ldr	r3, [pc, #172]	; (8001704 <send_previous_error_packet+0x278>)
 8001656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[44] = ((local_cpy[21] & 0xFF00) >> 8);
 800165e:	4b29      	ldr	r3, [pc, #164]	; (8001704 <send_previous_error_packet+0x278>)
 8001660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001662:	0a1b      	lsrs	r3, r3, #8
 8001664:	b29b      	uxth	r3, r3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[45] = (local_cpy[21] & 0xFF);
 800166c:	4b25      	ldr	r3, [pc, #148]	; (8001704 <send_previous_error_packet+0x278>)
 800166e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001670:	b2db      	uxtb	r3, r3
 8001672:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[46] = ((local_cpy[22] & 0xFF00) >> 8);
 8001676:	4b23      	ldr	r3, [pc, #140]	; (8001704 <send_previous_error_packet+0x278>)
 8001678:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800167a:	0a1b      	lsrs	r3, r3, #8
 800167c:	b29b      	uxth	r3, r3
 800167e:	b2db      	uxtb	r3, r3
 8001680:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[47] = (local_cpy[22] & 0xFF);
 8001684:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <send_previous_error_packet+0x278>)
 8001686:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001688:	b2db      	uxtb	r3, r3
 800168a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[48] = ((local_cpy[23] & 0xFF00) >> 8);
 800168e:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <send_previous_error_packet+0x278>)
 8001690:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001692:	0a1b      	lsrs	r3, r3, #8
 8001694:	b29b      	uxth	r3, r3
 8001696:	b2db      	uxtb	r3, r3
 8001698:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[49] = (local_cpy[23] & 0xFF);
 800169c:	4b19      	ldr	r3, [pc, #100]	; (8001704 <send_previous_error_packet+0x278>)
 800169e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[50] = ((local_cpy[24] & 0xFF00) >> 8);
 80016a6:	4b17      	ldr	r3, [pc, #92]	; (8001704 <send_previous_error_packet+0x278>)
 80016a8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80016aa:	0a1b      	lsrs	r3, r3, #8
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[51] = (local_cpy[24] & 0xFF);
 80016b4:	4b13      	ldr	r3, [pc, #76]	; (8001704 <send_previous_error_packet+0x278>)
 80016b6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[52] = ((local_cpy[25] & 0xFF00) >> 8);
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <send_previous_error_packet+0x278>)
 80016c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80016c2:	0a1b      	lsrs	r3, r3, #8
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[53] = (local_cpy[25] & 0xFF);
 80016cc:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <send_previous_error_packet+0x278>)
 80016ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[54] = ((local_cpy[26] & 0xFF00) >> 8);
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <send_previous_error_packet+0x278>)
 80016d8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80016da:	0a1b      	lsrs	r3, r3, #8
 80016dc:	b29b      	uxth	r3, r3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[55] = (local_cpy[26] & 0xFF);
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <send_previous_error_packet+0x278>)
 80016e6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


	HAL_UART_Transmit(&huart1, buffer, ERROR_PACKET_SIZE, 100);
 80016ee:	4639      	mov	r1, r7
 80016f0:	2364      	movs	r3, #100	; 0x64
 80016f2:	2238      	movs	r2, #56	; 0x38
 80016f4:	4804      	ldr	r0, [pc, #16]	; (8001708 <send_previous_error_packet+0x27c>)
 80016f6:	f011 fe29 	bl	801334c <HAL_UART_Transmit>
}
 80016fa:	bf00      	nop
 80016fc:	3738      	adds	r7, #56	; 0x38
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	240003dc 	.word	0x240003dc
 8001708:	24001e7c 	.word	0x24001e7c

0800170c <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <vApplicationTickHook+0x18>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	3301      	adds	r3, #1
 8001716:	4a03      	ldr	r2, [pc, #12]	; (8001724 <vApplicationTickHook+0x18>)
 8001718:	6013      	str	r3, [r2, #0]
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	24001b18 	.word	0x24001b18

08001728 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8001744:	4a24      	ldr	r2, [pc, #144]	; (80017d8 <MX_FREERTOS_Init+0x98>)
 8001746:	2100      	movs	r1, #0
 8001748:	4824      	ldr	r0, [pc, #144]	; (80017dc <MX_FREERTOS_Init+0x9c>)
 800174a:	f014 fc57 	bl	8015ffc <osThreadNew>
 800174e:	4603      	mov	r3, r0
 8001750:	4a23      	ldr	r2, [pc, #140]	; (80017e0 <MX_FREERTOS_Init+0xa0>)
 8001752:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8001754:	4a23      	ldr	r2, [pc, #140]	; (80017e4 <MX_FREERTOS_Init+0xa4>)
 8001756:	2100      	movs	r1, #0
 8001758:	4823      	ldr	r0, [pc, #140]	; (80017e8 <MX_FREERTOS_Init+0xa8>)
 800175a:	f014 fc4f 	bl	8015ffc <osThreadNew>
 800175e:	4603      	mov	r3, r0
 8001760:	4a22      	ldr	r2, [pc, #136]	; (80017ec <MX_FREERTOS_Init+0xac>)
 8001762:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8001764:	4a22      	ldr	r2, [pc, #136]	; (80017f0 <MX_FREERTOS_Init+0xb0>)
 8001766:	2100      	movs	r1, #0
 8001768:	4822      	ldr	r0, [pc, #136]	; (80017f4 <MX_FREERTOS_Init+0xb4>)
 800176a:	f014 fc47 	bl	8015ffc <osThreadNew>
 800176e:	4603      	mov	r3, r0
 8001770:	4a21      	ldr	r2, [pc, #132]	; (80017f8 <MX_FREERTOS_Init+0xb8>)
 8001772:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8001774:	4a21      	ldr	r2, [pc, #132]	; (80017fc <MX_FREERTOS_Init+0xbc>)
 8001776:	2100      	movs	r1, #0
 8001778:	4821      	ldr	r0, [pc, #132]	; (8001800 <MX_FREERTOS_Init+0xc0>)
 800177a:	f014 fc3f 	bl	8015ffc <osThreadNew>
 800177e:	4603      	mov	r3, r0
 8001780:	4a20      	ldr	r2, [pc, #128]	; (8001804 <MX_FREERTOS_Init+0xc4>)
 8001782:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8001784:	4a20      	ldr	r2, [pc, #128]	; (8001808 <MX_FREERTOS_Init+0xc8>)
 8001786:	2100      	movs	r1, #0
 8001788:	4820      	ldr	r0, [pc, #128]	; (800180c <MX_FREERTOS_Init+0xcc>)
 800178a:	f014 fc37 	bl	8015ffc <osThreadNew>
 800178e:	4603      	mov	r3, r0
 8001790:	4a1f      	ldr	r2, [pc, #124]	; (8001810 <MX_FREERTOS_Init+0xd0>)
 8001792:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8001794:	4a1f      	ldr	r2, [pc, #124]	; (8001814 <MX_FREERTOS_Init+0xd4>)
 8001796:	2100      	movs	r1, #0
 8001798:	481f      	ldr	r0, [pc, #124]	; (8001818 <MX_FREERTOS_Init+0xd8>)
 800179a:	f014 fc2f 	bl	8015ffc <osThreadNew>
 800179e:	4603      	mov	r3, r0
 80017a0:	4a1e      	ldr	r2, [pc, #120]	; (800181c <MX_FREERTOS_Init+0xdc>)
 80017a2:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 80017a4:	4a1e      	ldr	r2, [pc, #120]	; (8001820 <MX_FREERTOS_Init+0xe0>)
 80017a6:	2100      	movs	r1, #0
 80017a8:	481e      	ldr	r0, [pc, #120]	; (8001824 <MX_FREERTOS_Init+0xe4>)
 80017aa:	f014 fc27 	bl	8015ffc <osThreadNew>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4a1d      	ldr	r2, [pc, #116]	; (8001828 <MX_FREERTOS_Init+0xe8>)
 80017b2:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 80017b4:	4a1d      	ldr	r2, [pc, #116]	; (800182c <MX_FREERTOS_Init+0xec>)
 80017b6:	2100      	movs	r1, #0
 80017b8:	481d      	ldr	r0, [pc, #116]	; (8001830 <MX_FREERTOS_Init+0xf0>)
 80017ba:	f014 fc1f 	bl	8015ffc <osThreadNew>
 80017be:	4603      	mov	r3, r0
 80017c0:	4a1c      	ldr	r2, [pc, #112]	; (8001834 <MX_FREERTOS_Init+0xf4>)
 80017c2:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 80017c4:	4a1c      	ldr	r2, [pc, #112]	; (8001838 <MX_FREERTOS_Init+0xf8>)
 80017c6:	2100      	movs	r1, #0
 80017c8:	481c      	ldr	r0, [pc, #112]	; (800183c <MX_FREERTOS_Init+0xfc>)
 80017ca:	f014 fc17 	bl	8015ffc <osThreadNew>
 80017ce:	4603      	mov	r3, r0
 80017d0:	4a1b      	ldr	r2, [pc, #108]	; (8001840 <MX_FREERTOS_Init+0x100>)
 80017d2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	0801a028 	.word	0x0801a028
 80017dc:	08001845 	.word	0x08001845
 80017e0:	24000414 	.word	0x24000414
 80017e4:	0801a04c 	.word	0x0801a04c
 80017e8:	0800186d 	.word	0x0800186d
 80017ec:	24000674 	.word	0x24000674
 80017f0:	0801a070 	.word	0x0801a070
 80017f4:	08001895 	.word	0x08001895
 80017f8:	240008d4 	.word	0x240008d4
 80017fc:	0801a094 	.word	0x0801a094
 8001800:	080018bd 	.word	0x080018bd
 8001804:	24000b34 	.word	0x24000b34
 8001808:	0801a0b8 	.word	0x0801a0b8
 800180c:	08001935 	.word	0x08001935
 8001810:	24000d94 	.word	0x24000d94
 8001814:	0801a0dc 	.word	0x0801a0dc
 8001818:	080019ad 	.word	0x080019ad
 800181c:	24000ff4 	.word	0x24000ff4
 8001820:	0801a100 	.word	0x0801a100
 8001824:	080019dd 	.word	0x080019dd
 8001828:	24001254 	.word	0x24001254
 800182c:	0801a124 	.word	0x0801a124
 8001830:	08001a0d 	.word	0x08001a0d
 8001834:	240014b4 	.word	0x240014b4
 8001838:	0801a148 	.word	0x0801a148
 800183c:	08001add 	.word	0x08001add
 8001840:	24001714 	.word	0x24001714

08001844 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <PMT_init+0x24>)
 800184e:	6818      	ldr	r0, [r3, #0]
 8001850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001854:	2200      	movs	r2, #0
 8001856:	2101      	movs	r1, #1
 8001858:	f014 fd52 	bl	8016300 <osEventFlagsWait>

		create_pmt_packet();
 800185c:	f001 fa8c 	bl	8002d78 <create_pmt_packet>

		osThreadYield();
 8001860:	f014 fc5e 	bl	8016120 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001864:	e7f2      	b.n	800184c <PMT_init+0x8>
 8001866:	bf00      	nop
 8001868:	24001ac8 	.word	0x24001ac8

0800186c <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <ERPA_init+0x24>)
 8001876:	6818      	ldr	r0, [r3, #0]
 8001878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800187c:	2200      	movs	r2, #0
 800187e:	2102      	movs	r1, #2
 8001880:	f014 fd3e 	bl	8016300 <osEventFlagsWait>

		create_erpa_packet();
 8001884:	f001 fabe 	bl	8002e04 <create_erpa_packet>

		osThreadYield();
 8001888:	f014 fc4a 	bl	8016120 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800188c:	e7f2      	b.n	8001874 <ERPA_init+0x8>
 800188e:	bf00      	nop
 8001890:	24001ac8 	.word	0x24001ac8

08001894 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HK_init+0x24>)
 800189e:	6818      	ldr	r0, [r3, #0]
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018a4:	2200      	movs	r2, #0
 80018a6:	2104      	movs	r1, #4
 80018a8:	f014 fd2a 	bl	8016300 <osEventFlagsWait>

		create_hk_packet();
 80018ac:	f001 fb08 	bl	8002ec0 <create_hk_packet>

		osThreadYield();
 80018b0:	f014 fc36 	bl	8016120 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80018b4:	e7f2      	b.n	800189c <HK_init+0x8>
 80018b6:	bf00      	nop
 80018b8:	24001ac8 	.word	0x24001ac8

080018bc <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80018c4:	4b19      	ldr	r3, [pc, #100]	; (800192c <AUTOINIT_init+0x70>)
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018cc:	2200      	movs	r2, #0
 80018ce:	2104      	movs	r1, #4
 80018d0:	f014 fd16 	bl	8016300 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	e012      	b.n	8001900 <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 80018da:	4a15      	ldr	r2, [pc, #84]	; (8001930 <AUTOINIT_init+0x74>)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80018e2:	4a13      	ldr	r2, [pc, #76]	; (8001930 <AUTOINIT_init+0x74>)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4413      	add	r3, r2
 80018ea:	889b      	ldrh	r3, [r3, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	4619      	mov	r1, r3
 80018f0:	f008 fee8 	bl	800a6c4 <HAL_GPIO_WritePin>
			osDelay(100);
 80018f4:	2064      	movs	r0, #100	; 0x64
 80018f6:	f014 fc33 	bl	8016160 <osDelay>
		for (int i = 0; i < 7; i++) {
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	3301      	adds	r3, #1
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b06      	cmp	r3, #6
 8001904:	dde9      	ble.n	80018da <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8001906:	2308      	movs	r3, #8
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	e008      	b.n	800191e <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2101      	movs	r1, #1
 8001912:	4618      	mov	r0, r3
 8001914:	f003 f850 	bl	80049b8 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	3301      	adds	r3, #1
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2b0d      	cmp	r3, #13
 8001922:	ddf3      	ble.n	800190c <AUTOINIT_init+0x50>
		}
		osThreadYield();
 8001924:	f014 fbfc 	bl	8016120 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8001928:	e7cc      	b.n	80018c4 <AUTOINIT_init+0x8>
 800192a:	bf00      	nop
 800192c:	24001acc 	.word	0x24001acc
 8001930:	0801a16c 	.word	0x0801a16c

08001934 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <AUTODEINIT_init+0x70>)
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001944:	2200      	movs	r2, #0
 8001946:	2108      	movs	r1, #8
 8001948:	f014 fcda 	bl	8016300 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 800194c:	230d      	movs	r3, #13
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	e008      	b.n	8001964 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f003 f82d 	bl	80049b8 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	3b01      	subs	r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2b07      	cmp	r3, #7
 8001968:	dcf3      	bgt.n	8001952 <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 800196a:	2306      	movs	r3, #6
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	e012      	b.n	8001996 <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8001970:	4a0d      	ldr	r2, [pc, #52]	; (80019a8 <AUTODEINIT_init+0x74>)
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001978:	4a0b      	ldr	r2, [pc, #44]	; (80019a8 <AUTODEINIT_init+0x74>)
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	4413      	add	r3, r2
 8001980:	889b      	ldrh	r3, [r3, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	4619      	mov	r1, r3
 8001986:	f008 fe9d 	bl	800a6c4 <HAL_GPIO_WritePin>
			osDelay(100);
 800198a:	2064      	movs	r0, #100	; 0x64
 800198c:	f014 fbe8 	bl	8016160 <osDelay>
		for (int i = 6; i >= 0; i--) {
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	3b01      	subs	r3, #1
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	2b00      	cmp	r3, #0
 800199a:	dae9      	bge.n	8001970 <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 800199c:	f014 fbc0 	bl	8016120 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80019a0:	e7cc      	b.n	800193c <AUTODEINIT_init+0x8>
 80019a2:	bf00      	nop
 80019a4:	24001acc 	.word	0x24001acc
 80019a8:	0801a16c 	.word	0x0801a16c

080019ac <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 80019b4:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <Voltage_Monitor_init+0x28>)
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019bc:	2200      	movs	r2, #0
 80019be:	2101      	movs	r1, #1
 80019c0:	f014 fc9e 	bl	8016300 <osEventFlagsWait>
	  		osWaitForever);
	  HAL_IWDG_Refresh(&hiwdg1);
 80019c4:	4804      	ldr	r0, [pc, #16]	; (80019d8 <Voltage_Monitor_init+0x2c>)
 80019c6:	f00b f9fb 	bl	800cdc0 <HAL_IWDG_Refresh>
	  set_rail_monitor();
 80019ca:	f003 f815 	bl	80049f8 <set_rail_monitor>
	  monitor_rails();
 80019ce:	f003 f897 	bl	8004b00 <monitor_rails>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 80019d2:	e7ef      	b.n	80019b4 <Voltage_Monitor_init+0x8>
 80019d4:	24001acc 	.word	0x24001acc
 80019d8:	24001ab8 	.word	0x24001ab8

080019dc <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <STOP_init+0x2c>)
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ec:	2200      	movs	r2, #0
 80019ee:	2102      	movs	r1, #2
 80019f0:	f014 fc86 	bl	8016300 <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <STOP_init+0x2c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2102      	movs	r1, #2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f014 fc4e 	bl	801629c <osEventFlagsClear>

	  enter_stop();
 8001a00:	f001 f94c 	bl	8002c9c <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 8001a04:	e7ee      	b.n	80019e4 <STOP_init+0x8>
 8001a06:	bf00      	nop
 8001a08:	24001acc 	.word	0x24001acc

08001a0c <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af02      	add	r7, sp, #8
 8001a12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8001a14:	4b29      	ldr	r3, [pc, #164]	; (8001abc <Science_init+0xb0>)
 8001a16:	6818      	ldr	r0, [r3, #0]
 8001a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2101      	movs	r1, #1
 8001a20:	f014 fc6e 	bl	8016300 <osEventFlagsWait>

		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	e012      	b.n	8001a50 <Science_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8001a2a:	4a25      	ldr	r2, [pc, #148]	; (8001ac0 <Science_init+0xb4>)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001a32:	4a23      	ldr	r2, [pc, #140]	; (8001ac0 <Science_init+0xb4>)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4413      	add	r3, r2
 8001a3a:	889b      	ldrh	r3, [r3, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f008 fe40 	bl	800a6c4 <HAL_GPIO_WritePin>
			osDelay(200);
 8001a44:	20c8      	movs	r0, #200	; 0xc8
 8001a46:	f014 fb8b 	bl	8016160 <osDelay>
		for (int i = 0; i < 9; i++) {
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	dde9      	ble.n	8001a2a <Science_init+0x1e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 8001a56:	2308      	movs	r3, #8
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	e008      	b.n	8001a6e <Science_init+0x62>
			set_rail_monitor_enable(i, 1);
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2101      	movs	r1, #1
 8001a62:	4618      	mov	r0, r3
 8001a64:	f002 ffa8 	bl	80049b8 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	2b10      	cmp	r3, #16
 8001a72:	ddf3      	ble.n	8001a5c <Science_init+0x50>
  __ASM volatile ("cpsid i" : : : "memory");
 8001a74:	b672      	cpsid	i
}
 8001a76:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2320      	movs	r3, #32
 8001a7e:	4a11      	ldr	r2, [pc, #68]	; (8001ac4 <Science_init+0xb8>)
 8001a80:	2100      	movs	r1, #0
 8001a82:	4811      	ldr	r0, [pc, #68]	; (8001ac8 <Science_init+0xbc>)
 8001a84:	f004 ff9a 	bl	80069bc <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 8001a88:	4b10      	ldr	r3, [pc, #64]	; (8001acc <Science_init+0xc0>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	701a      	strb	r2, [r3, #0]
		ERPA_ENABLED = 1;
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <Science_init+0xc4>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <Science_init+0xc8>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 8001a9a:	f001 fb5f 	bl	800315c <reset_packet_sequence_numbers>
		TIM2->CCR4 = 312;
 8001a9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aa2:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001aa6:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	480b      	ldr	r0, [pc, #44]	; (8001ad8 <Science_init+0xcc>)
 8001aac:	f010 f8c4 	bl	8011c38 <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 8001ab0:	b662      	cpsie	i
}
 8001ab2:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 8001ab4:	f014 fb34 	bl	8016120 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8001ab8:	e7ac      	b.n	8001a14 <Science_init+0x8>
 8001aba:	bf00      	nop
 8001abc:	24001ad0 	.word	0x24001ad0
 8001ac0:	0801a16c 	.word	0x0801a16c
 8001ac4:	24000038 	.word	0x24000038
 8001ac8:	24000314 	.word	0x24000314
 8001acc:	24001b14 	.word	0x24001b14
 8001ad0:	24001b15 	.word	0x24001b15
 8001ad4:	24001b18 	.word	0x24001b18
 8001ad8:	24001de4 	.word	0x24001de4

08001adc <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8001ae4:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <Idle_init+0x94>)
 8001ae6:	6818      	ldr	r0, [r3, #0]
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aec:	2200      	movs	r2, #0
 8001aee:	2102      	movs	r1, #2
 8001af0:	f014 fc06 	bl	8016300 <osEventFlagsWait>

		ERPA_ENABLED = 0;
 8001af4:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <Idle_init+0x98>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8001afa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001afe:	2200      	movs	r2, #0
 8001b00:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 8001b02:	2100      	movs	r1, #0
 8001b04:	481c      	ldr	r0, [pc, #112]	; (8001b78 <Idle_init+0x9c>)
 8001b06:	f010 f9f1 	bl	8011eec <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 8001b0a:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <Idle_init+0xa0>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 8001b10:	2100      	movs	r1, #0
 8001b12:	481b      	ldr	r0, [pc, #108]	; (8001b80 <Idle_init+0xa4>)
 8001b14:	f005 f812 	bl	8006b3c <HAL_DAC_Stop_DMA>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001b18:	2310      	movs	r3, #16
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	e008      	b.n	8001b30 <Idle_init+0x54>
			set_rail_monitor_enable(i, 0);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2100      	movs	r1, #0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f002 ff47 	bl	80049b8 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2b07      	cmp	r3, #7
 8001b34:	dcf3      	bgt.n	8001b1e <Idle_init+0x42>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 8001b36:	2308      	movs	r3, #8
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	e012      	b.n	8001b62 <Idle_init+0x86>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8001b3c:	4a11      	ldr	r2, [pc, #68]	; (8001b84 <Idle_init+0xa8>)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001b44:	4a0f      	ldr	r2, [pc, #60]	; (8001b84 <Idle_init+0xa8>)
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	889b      	ldrh	r3, [r3, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	4619      	mov	r1, r3
 8001b52:	f008 fdb7 	bl	800a6c4 <HAL_GPIO_WritePin>
			osDelay(200);
 8001b56:	20c8      	movs	r0, #200	; 0xc8
 8001b58:	f014 fb02 	bl	8016160 <osDelay>
		for (int i = 8; i >= 0; i--) {
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	dae9      	bge.n	8001b3c <Idle_init+0x60>
		}

		// Yield thread control
		osThreadYield();
 8001b68:	f014 fada 	bl	8016120 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8001b6c:	e7ba      	b.n	8001ae4 <Idle_init+0x8>
 8001b6e:	bf00      	nop
 8001b70:	24001ad0 	.word	0x24001ad0
 8001b74:	24001b15 	.word	0x24001b15
 8001b78:	24001de4 	.word	0x24001de4
 8001b7c:	24001b14 	.word	0x24001b14
 8001b80:	24000314 	.word	0x24000314
 8001b84:	0801a16c 	.word	0x0801a16c

08001b88 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
 8001b9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9e:	4b34      	ldr	r3, [pc, #208]	; (8001c70 <MX_GPIO_Init+0xe8>)
 8001ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba4:	4a32      	ldr	r2, [pc, #200]	; (8001c70 <MX_GPIO_Init+0xe8>)
 8001ba6:	f043 0304 	orr.w	r3, r3, #4
 8001baa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bae:	4b30      	ldr	r3, [pc, #192]	; (8001c70 <MX_GPIO_Init+0xe8>)
 8001bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bbc:	4b2c      	ldr	r3, [pc, #176]	; (8001c70 <MX_GPIO_Init+0xe8>)
 8001bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc2:	4a2b      	ldr	r2, [pc, #172]	; (8001c70 <MX_GPIO_Init+0xe8>)
 8001bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bcc:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <MX_GPIO_Init+0xe8>)
 8001bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bda:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <MX_GPIO_Init+0xe8>)
 8001bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be0:	4a23      	ldr	r2, [pc, #140]	; (8001c70 <MX_GPIO_Init+0xe8>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bea:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <MX_GPIO_Init+0xe8>)
 8001bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf8:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <MX_GPIO_Init+0xe8>)
 8001bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bfe:	4a1c      	ldr	r2, [pc, #112]	; (8001c70 <MX_GPIO_Init+0xe8>)
 8001c00:	f043 0302 	orr.w	r3, r3, #2
 8001c04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c08:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <MX_GPIO_Init+0xe8>)
 8001c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c16:	2200      	movs	r2, #0
 8001c18:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001c1c:	4815      	ldr	r0, [pc, #84]	; (8001c74 <MX_GPIO_Init+0xec>)
 8001c1e:	f008 fd51 	bl	800a6c4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2164      	movs	r1, #100	; 0x64
 8001c26:	4814      	ldr	r0, [pc, #80]	; (8001c78 <MX_GPIO_Init+0xf0>)
 8001c28:	f008 fd4c 	bl	800a6c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c2c:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001c30:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c32:	2301      	movs	r3, #1
 8001c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c36:	2302      	movs	r3, #2
 8001c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	4619      	mov	r1, r3
 8001c44:	480b      	ldr	r0, [pc, #44]	; (8001c74 <MX_GPIO_Init+0xec>)
 8001c46:	f008 fb75 	bl	800a334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001c4a:	2364      	movs	r3, #100	; 0x64
 8001c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c52:	2302      	movs	r3, #2
 8001c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2300      	movs	r3, #0
 8001c58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4805      	ldr	r0, [pc, #20]	; (8001c78 <MX_GPIO_Init+0xf0>)
 8001c62:	f008 fb67 	bl	800a334 <HAL_GPIO_Init>

}
 8001c66:	bf00      	nop
 8001c68:	3728      	adds	r7, #40	; 0x28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	58024400 	.word	0x58024400
 8001c74:	58020800 	.word	0x58020800
 8001c78:	58020400 	.word	0x58020400

08001c7c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c80:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <MX_I2C1_Init+0x78>)
 8001c82:	4a1d      	ldr	r2, [pc, #116]	; (8001cf8 <MX_I2C1_Init+0x7c>)
 8001c84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 8001c86:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <MX_I2C1_Init+0x78>)
 8001c88:	4a1c      	ldr	r2, [pc, #112]	; (8001cfc <MX_I2C1_Init+0x80>)
 8001c8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c8c:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <MX_I2C1_Init+0x78>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <MX_I2C1_Init+0x78>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c98:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <MX_I2C1_Init+0x78>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <MX_I2C1_Init+0x78>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ca4:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <MX_I2C1_Init+0x78>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001caa:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <MX_I2C1_Init+0x78>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cb0:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <MX_I2C1_Init+0x78>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cb6:	480f      	ldr	r0, [pc, #60]	; (8001cf4 <MX_I2C1_Init+0x78>)
 8001cb8:	f008 fd1e 	bl	800a6f8 <HAL_I2C_Init>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001cc2:	f001 f84b 	bl	8002d5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	480a      	ldr	r0, [pc, #40]	; (8001cf4 <MX_I2C1_Init+0x78>)
 8001cca:	f00a ffbd 	bl	800cc48 <HAL_I2CEx_ConfigAnalogFilter>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001cd4:	f001 f842 	bl	8002d5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4806      	ldr	r0, [pc, #24]	; (8001cf4 <MX_I2C1_Init+0x78>)
 8001cdc:	f00a ffff 	bl	800ccde <HAL_I2CEx_ConfigDigitalFilter>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ce6:	f001 f839 	bl	8002d5c <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001cea:	2001      	movs	r0, #1
 8001cec:	f00b f844 	bl	800cd78 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cf0:	bf00      	nop
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	24001974 	.word	0x24001974
 8001cf8:	40005400 	.word	0x40005400
 8001cfc:	00100517 	.word	0x00100517

08001d00 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b0ba      	sub	sp, #232	; 0xe8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d18:	f107 0310 	add.w	r3, r7, #16
 8001d1c:	22c0      	movs	r2, #192	; 0xc0
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f017 fb3b 	bl	801939c <memset>
  if(i2cHandle->Instance==I2C1)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a5d      	ldr	r2, [pc, #372]	; (8001ea0 <HAL_I2C_MspInit+0x1a0>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	f040 80b3 	bne.w	8001e98 <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d32:	f04f 0208 	mov.w	r2, #8
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d44:	f107 0310 	add.w	r3, r7, #16
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f00c f8e7 	bl	800df1c <HAL_RCCEx_PeriphCLKConfig>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8001d54:	f001 f802 	bl	8002d5c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d58:	4b52      	ldr	r3, [pc, #328]	; (8001ea4 <HAL_I2C_MspInit+0x1a4>)
 8001d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d5e:	4a51      	ldr	r2, [pc, #324]	; (8001ea4 <HAL_I2C_MspInit+0x1a4>)
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d68:	4b4e      	ldr	r3, [pc, #312]	; (8001ea4 <HAL_I2C_MspInit+0x1a4>)
 8001d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d7e:	2312      	movs	r3, #18
 8001d80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d90:	2304      	movs	r3, #4
 8001d92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d96:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4842      	ldr	r0, [pc, #264]	; (8001ea8 <HAL_I2C_MspInit+0x1a8>)
 8001d9e:	f008 fac9 	bl	800a334 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001da2:	4b40      	ldr	r3, [pc, #256]	; (8001ea4 <HAL_I2C_MspInit+0x1a4>)
 8001da4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001da8:	4a3e      	ldr	r2, [pc, #248]	; (8001ea4 <HAL_I2C_MspInit+0x1a4>)
 8001daa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001db2:	4b3c      	ldr	r3, [pc, #240]	; (8001ea4 <HAL_I2C_MspInit+0x1a4>)
 8001db4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001dc0:	4b3a      	ldr	r3, [pc, #232]	; (8001eac <HAL_I2C_MspInit+0x1ac>)
 8001dc2:	4a3b      	ldr	r2, [pc, #236]	; (8001eb0 <HAL_I2C_MspInit+0x1b0>)
 8001dc4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001dc6:	4b39      	ldr	r3, [pc, #228]	; (8001eac <HAL_I2C_MspInit+0x1ac>)
 8001dc8:	2222      	movs	r2, #34	; 0x22
 8001dca:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dcc:	4b37      	ldr	r3, [pc, #220]	; (8001eac <HAL_I2C_MspInit+0x1ac>)
 8001dce:	2240      	movs	r2, #64	; 0x40
 8001dd0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd2:	4b36      	ldr	r3, [pc, #216]	; (8001eac <HAL_I2C_MspInit+0x1ac>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dd8:	4b34      	ldr	r3, [pc, #208]	; (8001eac <HAL_I2C_MspInit+0x1ac>)
 8001dda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dde:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001de0:	4b32      	ldr	r3, [pc, #200]	; (8001eac <HAL_I2C_MspInit+0x1ac>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001de6:	4b31      	ldr	r3, [pc, #196]	; (8001eac <HAL_I2C_MspInit+0x1ac>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001dec:	4b2f      	ldr	r3, [pc, #188]	; (8001eac <HAL_I2C_MspInit+0x1ac>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001df2:	4b2e      	ldr	r3, [pc, #184]	; (8001eac <HAL_I2C_MspInit+0x1ac>)
 8001df4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001df8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dfa:	4b2c      	ldr	r3, [pc, #176]	; (8001eac <HAL_I2C_MspInit+0x1ac>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001e00:	482a      	ldr	r0, [pc, #168]	; (8001eac <HAL_I2C_MspInit+0x1ac>)
 8001e02:	f005 f967 	bl	80070d4 <HAL_DMA_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 8001e0c:	f000 ffa6 	bl	8002d5c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a26      	ldr	r2, [pc, #152]	; (8001eac <HAL_I2C_MspInit+0x1ac>)
 8001e14:	639a      	str	r2, [r3, #56]	; 0x38
 8001e16:	4a25      	ldr	r2, [pc, #148]	; (8001eac <HAL_I2C_MspInit+0x1ac>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 8001e1c:	4b25      	ldr	r3, [pc, #148]	; (8001eb4 <HAL_I2C_MspInit+0x1b4>)
 8001e1e:	4a26      	ldr	r2, [pc, #152]	; (8001eb8 <HAL_I2C_MspInit+0x1b8>)
 8001e20:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001e22:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <HAL_I2C_MspInit+0x1b4>)
 8001e24:	2221      	movs	r2, #33	; 0x21
 8001e26:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e28:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <HAL_I2C_MspInit+0x1b4>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e2e:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <HAL_I2C_MspInit+0x1b4>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e34:	4b1f      	ldr	r3, [pc, #124]	; (8001eb4 <HAL_I2C_MspInit+0x1b4>)
 8001e36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e3a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <HAL_I2C_MspInit+0x1b4>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e42:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <HAL_I2C_MspInit+0x1b4>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001e48:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <HAL_I2C_MspInit+0x1b4>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e4e:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <HAL_I2C_MspInit+0x1b4>)
 8001e50:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001e54:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e56:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <HAL_I2C_MspInit+0x1b4>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001e5c:	4815      	ldr	r0, [pc, #84]	; (8001eb4 <HAL_I2C_MspInit+0x1b4>)
 8001e5e:	f005 f939 	bl	80070d4 <HAL_DMA_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 8001e68:	f000 ff78 	bl	8002d5c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a11      	ldr	r2, [pc, #68]	; (8001eb4 <HAL_I2C_MspInit+0x1b4>)
 8001e70:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e72:	4a10      	ldr	r2, [pc, #64]	; (8001eb4 <HAL_I2C_MspInit+0x1b4>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2105      	movs	r1, #5
 8001e7c:	201f      	movs	r0, #31
 8001e7e:	f004 fc83 	bl	8006788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e82:	201f      	movs	r0, #31
 8001e84:	f004 fc9a 	bl	80067bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2105      	movs	r1, #5
 8001e8c:	2020      	movs	r0, #32
 8001e8e:	f004 fc7b 	bl	8006788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001e92:	2020      	movs	r0, #32
 8001e94:	f004 fc92 	bl	80067bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e98:	bf00      	nop
 8001e9a:	37e8      	adds	r7, #232	; 0xe8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40005400 	.word	0x40005400
 8001ea4:	58024400 	.word	0x58024400
 8001ea8:	58020400 	.word	0x58020400
 8001eac:	240019c8 	.word	0x240019c8
 8001eb0:	400200a0 	.word	0x400200a0
 8001eb4:	24001a40 	.word	0x24001a40
 8001eb8:	400200b8 	.word	0x400200b8

08001ebc <__NVIC_SystemReset>:
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <__NVIC_SystemReset+0x24>)
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ece:	4904      	ldr	r1, [pc, #16]	; (8001ee0 <__NVIC_SystemReset+0x24>)
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <__NVIC_SystemReset+0x28>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed6:	f3bf 8f4f 	dsb	sy
}
 8001eda:	bf00      	nop
    __NOP();
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <__NVIC_SystemReset+0x20>
 8001ee0:	e000ed00 	.word	0xe000ed00
 8001ee4:	05fa0004 	.word	0x05fa0004

08001ee8 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a20      	ldr	r2, [pc, #128]	; (8001f74 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d106      	bne.n	8001f06 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8001ef8:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2101      	movs	r1, #1
 8001efe:	4618      	mov	r0, r3
 8001f00:	f014 f988 	bl	8016214 <osEventFlagsSet>
		HK_100_ms_counter++;

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 8001f04:	e032      	b.n	8001f6c <HAL_TIM_OC_DelayElapsedCallback+0x84>
	else if (htim == &htim2) {
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a1c      	ldr	r2, [pc, #112]	; (8001f7c <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d12b      	bne.n	8001f66 <HAL_TIM_OC_DelayElapsedCallback+0x7e>
		if (ERPA_ENABLED) {
 8001f0e:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001f18:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2102      	movs	r1, #2
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f014 f978 	bl	8016214 <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 8001f24:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b20      	cmp	r3, #32
 8001f2c:	d113      	bne.n	8001f56 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8001f2e:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2101      	movs	r1, #1
 8001f34:	4618      	mov	r0, r3
 8001f36:	f014 f96d 	bl	8016214 <osEventFlagsSet>
			if (HK_ENABLED){
 8001f3a:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_TIM_OC_DelayElapsedCallback+0x68>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2104      	movs	r1, #4
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f014 f962 	bl	8016214 <osEventFlagsSet>
			HK_100_ms_counter = 0;
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 8001f56:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001f62:	701a      	strb	r2, [r3, #0]
}
 8001f64:	e002      	b.n	8001f6c <HAL_TIM_OC_DelayElapsedCallback+0x84>
		printf("Unknown Timer Interrupt\n");
 8001f66:	480a      	ldr	r0, [pc, #40]	; (8001f90 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8001f68:	f017 fa8e 	bl	8019488 <puts>
}
 8001f6c:	bf00      	nop
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	24001de4 	.word	0x24001de4
 8001f78:	24001ac8 	.word	0x24001ac8
 8001f7c:	24001e30 	.word	0x24001e30
 8001f80:	24001b15 	.word	0x24001b15
 8001f84:	24001b1c 	.word	0x24001b1c
 8001f88:	24001acc 	.word	0x24001acc
 8001f8c:	24001b14 	.word	0x24001b14
 8001f90:	08019e38 	.word	0x08019e38

08001f94 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af02      	add	r7, sp, #8
 8001f9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	49f2      	ldr	r1, [pc, #968]	; (8002368 <HAL_UART_RxCpltCallback+0x3d4>)
 8001fa0:	48f2      	ldr	r0, [pc, #968]	; (800236c <HAL_UART_RxCpltCallback+0x3d8>)
 8001fa2:	f011 fb29 	bl	80135f8 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8001fa6:	4bf0      	ldr	r3, [pc, #960]	; (8002368 <HAL_UART_RxCpltCallback+0x3d4>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	2be0      	cmp	r3, #224	; 0xe0
 8001fb0:	f200 8424 	bhi.w	80027fc <HAL_UART_RxCpltCallback+0x868>
 8001fb4:	a201      	add	r2, pc, #4	; (adr r2, 8001fbc <HAL_UART_RxCpltCallback+0x28>)
 8001fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fba:	bf00      	nop
 8001fbc:	08002355 	.word	0x08002355
 8001fc0:	08002399 	.word	0x08002399
 8001fc4:	08002409 	.word	0x08002409
 8001fc8:	08002443 	.word	0x08002443
 8001fcc:	0800247b 	.word	0x0800247b
 8001fd0:	080024b5 	.word	0x080024b5
 8001fd4:	080024f1 	.word	0x080024f1
 8001fd8:	0800252d 	.word	0x0800252d
 8001fdc:	08002567 	.word	0x08002567
 8001fe0:	0800259b 	.word	0x0800259b
 8001fe4:	080025cf 	.word	0x080025cf
 8001fe8:	08002601 	.word	0x08002601
 8001fec:	0800262b 	.word	0x0800262b
 8001ff0:	08002709 	.word	0x08002709
 8001ff4:	08002771 	.word	0x08002771
 8001ff8:	08002799 	.word	0x08002799
 8001ffc:	08002341 	.word	0x08002341
 8002000:	0800237d 	.word	0x0800237d
 8002004:	080023eb 	.word	0x080023eb
 8002008:	08002427 	.word	0x08002427
 800200c:	0800245f 	.word	0x0800245f
 8002010:	08002497 	.word	0x08002497
 8002014:	080024d3 	.word	0x080024d3
 8002018:	0800250f 	.word	0x0800250f
 800201c:	0800254b 	.word	0x0800254b
 8002020:	08002583 	.word	0x08002583
 8002024:	080025ab 	.word	0x080025ab
 8002028:	080025e5 	.word	0x080025e5
 800202c:	08002611 	.word	0x08002611
 8002030:	08002639 	.word	0x08002639
 8002034:	08002749 	.word	0x08002749
 8002038:	080027fd 	.word	0x080027fd
 800203c:	080027fd 	.word	0x080027fd
 8002040:	080027fd 	.word	0x080027fd
 8002044:	080027fd 	.word	0x080027fd
 8002048:	080027fd 	.word	0x080027fd
 800204c:	080027fd 	.word	0x080027fd
 8002050:	080027fd 	.word	0x080027fd
 8002054:	080027fd 	.word	0x080027fd
 8002058:	080027fd 	.word	0x080027fd
 800205c:	080027fd 	.word	0x080027fd
 8002060:	080027fd 	.word	0x080027fd
 8002064:	080027fd 	.word	0x080027fd
 8002068:	080027fd 	.word	0x080027fd
 800206c:	080027fd 	.word	0x080027fd
 8002070:	080027fd 	.word	0x080027fd
 8002074:	080027fd 	.word	0x080027fd
 8002078:	080027fd 	.word	0x080027fd
 800207c:	080027fd 	.word	0x080027fd
 8002080:	080027fd 	.word	0x080027fd
 8002084:	080027fd 	.word	0x080027fd
 8002088:	080027fd 	.word	0x080027fd
 800208c:	080027fd 	.word	0x080027fd
 8002090:	080027fd 	.word	0x080027fd
 8002094:	080027fd 	.word	0x080027fd
 8002098:	080027fd 	.word	0x080027fd
 800209c:	080027fd 	.word	0x080027fd
 80020a0:	080027fd 	.word	0x080027fd
 80020a4:	080027fd 	.word	0x080027fd
 80020a8:	080027fd 	.word	0x080027fd
 80020ac:	080027fd 	.word	0x080027fd
 80020b0:	080027fd 	.word	0x080027fd
 80020b4:	080027fd 	.word	0x080027fd
 80020b8:	080027fd 	.word	0x080027fd
 80020bc:	080027fd 	.word	0x080027fd
 80020c0:	080027fd 	.word	0x080027fd
 80020c4:	080027fd 	.word	0x080027fd
 80020c8:	080027fd 	.word	0x080027fd
 80020cc:	080027fd 	.word	0x080027fd
 80020d0:	080027fd 	.word	0x080027fd
 80020d4:	080027fd 	.word	0x080027fd
 80020d8:	080027fd 	.word	0x080027fd
 80020dc:	080027fd 	.word	0x080027fd
 80020e0:	080027fd 	.word	0x080027fd
 80020e4:	080027fd 	.word	0x080027fd
 80020e8:	080027fd 	.word	0x080027fd
 80020ec:	080027fd 	.word	0x080027fd
 80020f0:	080027fd 	.word	0x080027fd
 80020f4:	080027fd 	.word	0x080027fd
 80020f8:	080027fd 	.word	0x080027fd
 80020fc:	080027fd 	.word	0x080027fd
 8002100:	080027fd 	.word	0x080027fd
 8002104:	080027fd 	.word	0x080027fd
 8002108:	080027fd 	.word	0x080027fd
 800210c:	080027fd 	.word	0x080027fd
 8002110:	080027fd 	.word	0x080027fd
 8002114:	080027fd 	.word	0x080027fd
 8002118:	080027fd 	.word	0x080027fd
 800211c:	080027fd 	.word	0x080027fd
 8002120:	080027fd 	.word	0x080027fd
 8002124:	080027fd 	.word	0x080027fd
 8002128:	080027fd 	.word	0x080027fd
 800212c:	080027fd 	.word	0x080027fd
 8002130:	080027fd 	.word	0x080027fd
 8002134:	080027fd 	.word	0x080027fd
 8002138:	080027fd 	.word	0x080027fd
 800213c:	080027fd 	.word	0x080027fd
 8002140:	080027fd 	.word	0x080027fd
 8002144:	080027fd 	.word	0x080027fd
 8002148:	080027fd 	.word	0x080027fd
 800214c:	080027fd 	.word	0x080027fd
 8002150:	080027fd 	.word	0x080027fd
 8002154:	080027fd 	.word	0x080027fd
 8002158:	080027fd 	.word	0x080027fd
 800215c:	080027fd 	.word	0x080027fd
 8002160:	080027fd 	.word	0x080027fd
 8002164:	080027fd 	.word	0x080027fd
 8002168:	080027fd 	.word	0x080027fd
 800216c:	080027fd 	.word	0x080027fd
 8002170:	080027fd 	.word	0x080027fd
 8002174:	080027fd 	.word	0x080027fd
 8002178:	080027fd 	.word	0x080027fd
 800217c:	080027fd 	.word	0x080027fd
 8002180:	080027fd 	.word	0x080027fd
 8002184:	080027fd 	.word	0x080027fd
 8002188:	080027fd 	.word	0x080027fd
 800218c:	080027fd 	.word	0x080027fd
 8002190:	080027fd 	.word	0x080027fd
 8002194:	080027fd 	.word	0x080027fd
 8002198:	080027fd 	.word	0x080027fd
 800219c:	080027fd 	.word	0x080027fd
 80021a0:	080027fd 	.word	0x080027fd
 80021a4:	080027fd 	.word	0x080027fd
 80021a8:	080027fd 	.word	0x080027fd
 80021ac:	080027fd 	.word	0x080027fd
 80021b0:	080027fd 	.word	0x080027fd
 80021b4:	080027fd 	.word	0x080027fd
 80021b8:	080027fd 	.word	0x080027fd
 80021bc:	080027fd 	.word	0x080027fd
 80021c0:	080027fd 	.word	0x080027fd
 80021c4:	080027fd 	.word	0x080027fd
 80021c8:	080027fd 	.word	0x080027fd
 80021cc:	080027fd 	.word	0x080027fd
 80021d0:	080027fd 	.word	0x080027fd
 80021d4:	080027fd 	.word	0x080027fd
 80021d8:	080027fd 	.word	0x080027fd
 80021dc:	080027fd 	.word	0x080027fd
 80021e0:	080027fd 	.word	0x080027fd
 80021e4:	080027fd 	.word	0x080027fd
 80021e8:	080027fd 	.word	0x080027fd
 80021ec:	080027fd 	.word	0x080027fd
 80021f0:	080027fd 	.word	0x080027fd
 80021f4:	080027fd 	.word	0x080027fd
 80021f8:	080027fd 	.word	0x080027fd
 80021fc:	080027fd 	.word	0x080027fd
 8002200:	080027fd 	.word	0x080027fd
 8002204:	080027fd 	.word	0x080027fd
 8002208:	080027fd 	.word	0x080027fd
 800220c:	080027fd 	.word	0x080027fd
 8002210:	080027fd 	.word	0x080027fd
 8002214:	080027fd 	.word	0x080027fd
 8002218:	080027fd 	.word	0x080027fd
 800221c:	080027fd 	.word	0x080027fd
 8002220:	080027fd 	.word	0x080027fd
 8002224:	080027fd 	.word	0x080027fd
 8002228:	080027fd 	.word	0x080027fd
 800222c:	080027fd 	.word	0x080027fd
 8002230:	080027fd 	.word	0x080027fd
 8002234:	080027fd 	.word	0x080027fd
 8002238:	080027fd 	.word	0x080027fd
 800223c:	080027fd 	.word	0x080027fd
 8002240:	080027fd 	.word	0x080027fd
 8002244:	080027fd 	.word	0x080027fd
 8002248:	080027fd 	.word	0x080027fd
 800224c:	080027fd 	.word	0x080027fd
 8002250:	080027fd 	.word	0x080027fd
 8002254:	080027fd 	.word	0x080027fd
 8002258:	080027fd 	.word	0x080027fd
 800225c:	080027fd 	.word	0x080027fd
 8002260:	080027fd 	.word	0x080027fd
 8002264:	080027fd 	.word	0x080027fd
 8002268:	080027fd 	.word	0x080027fd
 800226c:	080027fd 	.word	0x080027fd
 8002270:	080027fd 	.word	0x080027fd
 8002274:	080027fd 	.word	0x080027fd
 8002278:	080027d5 	.word	0x080027d5
 800227c:	080027fd 	.word	0x080027fd
 8002280:	080027fd 	.word	0x080027fd
 8002284:	080027fd 	.word	0x080027fd
 8002288:	080027fd 	.word	0x080027fd
 800228c:	080027fd 	.word	0x080027fd
 8002290:	080027fd 	.word	0x080027fd
 8002294:	080027fd 	.word	0x080027fd
 8002298:	080027fd 	.word	0x080027fd
 800229c:	080027fd 	.word	0x080027fd
 80022a0:	080027fd 	.word	0x080027fd
 80022a4:	080027fd 	.word	0x080027fd
 80022a8:	080027fd 	.word	0x080027fd
 80022ac:	080027fd 	.word	0x080027fd
 80022b0:	080027fd 	.word	0x080027fd
 80022b4:	080027fd 	.word	0x080027fd
 80022b8:	080027db 	.word	0x080027db
 80022bc:	080027fd 	.word	0x080027fd
 80022c0:	080027fd 	.word	0x080027fd
 80022c4:	080027fd 	.word	0x080027fd
 80022c8:	080027fd 	.word	0x080027fd
 80022cc:	080027fd 	.word	0x080027fd
 80022d0:	080027fd 	.word	0x080027fd
 80022d4:	080027fd 	.word	0x080027fd
 80022d8:	080027fd 	.word	0x080027fd
 80022dc:	080027fd 	.word	0x080027fd
 80022e0:	080027fd 	.word	0x080027fd
 80022e4:	080027fd 	.word	0x080027fd
 80022e8:	080027fd 	.word	0x080027fd
 80022ec:	080027fd 	.word	0x080027fd
 80022f0:	080027fd 	.word	0x080027fd
 80022f4:	080027fd 	.word	0x080027fd
 80022f8:	080027e9 	.word	0x080027e9
 80022fc:	080027c1 	.word	0x080027c1
 8002300:	080027fd 	.word	0x080027fd
 8002304:	080027fd 	.word	0x080027fd
 8002308:	080027fd 	.word	0x080027fd
 800230c:	080027fd 	.word	0x080027fd
 8002310:	080027fd 	.word	0x080027fd
 8002314:	080027fd 	.word	0x080027fd
 8002318:	080027fd 	.word	0x080027fd
 800231c:	080027fd 	.word	0x080027fd
 8002320:	080027fd 	.word	0x080027fd
 8002324:	080027fd 	.word	0x080027fd
 8002328:	080027fd 	.word	0x080027fd
 800232c:	080027fd 	.word	0x080027fd
 8002330:	080027fd 	.word	0x080027fd
 8002334:	080027fd 	.word	0x080027fd
 8002338:	080027f7 	.word	0x080027f7
 800233c:	080027ad 	.word	0x080027ad
	case 0x10: {
		printf("SDN1 ON\n");
 8002340:	480b      	ldr	r0, [pc, #44]	; (8002370 <HAL_UART_RxCpltCallback+0x3dc>)
 8002342:	f017 f8a1 	bl	8019488 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8002346:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_UART_RxCpltCallback+0x3e0>)
 8002348:	2104      	movs	r1, #4
 800234a:	2201      	movs	r2, #1
 800234c:	4618      	mov	r0, r3
 800234e:	f008 f9b9 	bl	800a6c4 <HAL_GPIO_WritePin>
		break;
 8002352:	e25e      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8002354:	4808      	ldr	r0, [pc, #32]	; (8002378 <HAL_UART_RxCpltCallback+0x3e4>)
 8002356:	f017 f897 	bl	8019488 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_UART_RxCpltCallback+0x3e0>)
 800235c:	2104      	movs	r1, #4
 800235e:	2200      	movs	r2, #0
 8002360:	4618      	mov	r0, r3
 8002362:	f008 f9af 	bl	800a6c4 <HAL_GPIO_WritePin>
		break;
 8002366:	e254      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
 8002368:	24001ad4 	.word	0x24001ad4
 800236c:	24001e7c 	.word	0x24001e7c
 8002370:	08019e50 	.word	0x08019e50
 8002374:	58020400 	.word	0x58020400
 8002378:	08019e58 	.word	0x08019e58
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 800237c:	48bf      	ldr	r0, [pc, #764]	; (800267c <HAL_UART_RxCpltCallback+0x6e8>)
 800237e:	f017 f883 	bl	8019488 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8002382:	4bbf      	ldr	r3, [pc, #764]	; (8002680 <HAL_UART_RxCpltCallback+0x6ec>)
 8002384:	2120      	movs	r1, #32
 8002386:	2201      	movs	r2, #1
 8002388:	4618      	mov	r0, r3
 800238a:	f008 f99b 	bl	800a6c4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 800238e:	2101      	movs	r1, #1
 8002390:	2008      	movs	r0, #8
 8002392:	f002 fb11 	bl	80049b8 <set_rail_monitor_enable>
		break;
 8002396:	e23c      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8002398:	48ba      	ldr	r0, [pc, #744]	; (8002684 <HAL_UART_RxCpltCallback+0x6f0>)
 800239a:	f017 f875 	bl	8019488 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 800239e:	2308      	movs	r3, #8
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	e00f      	b.n	80023c4 <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80023a4:	4ab8      	ldr	r2, [pc, #736]	; (8002688 <HAL_UART_RxCpltCallback+0x6f4>)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80023ac:	4ab6      	ldr	r2, [pc, #728]	; (8002688 <HAL_UART_RxCpltCallback+0x6f4>)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4413      	add	r3, r2
 80023b4:	889b      	ldrh	r3, [r3, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	4619      	mov	r1, r3
 80023ba:	f008 f983 	bl	800a6c4 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	dcec      	bgt.n	80023a4 <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80023ca:	2310      	movs	r3, #16
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	e008      	b.n	80023e2 <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2100      	movs	r1, #0
 80023d6:	4618      	mov	r0, r3
 80023d8:	f002 faee 	bl	80049b8 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	3b01      	subs	r3, #1
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	2b07      	cmp	r3, #7
 80023e6:	dcf3      	bgt.n	80023d0 <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 80023e8:	e213      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 80023ea:	48a8      	ldr	r0, [pc, #672]	; (800268c <HAL_UART_RxCpltCallback+0x6f8>)
 80023ec:	f017 f84c 	bl	8019488 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 80023f0:	4ba7      	ldr	r3, [pc, #668]	; (8002690 <HAL_UART_RxCpltCallback+0x6fc>)
 80023f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023f6:	2201      	movs	r2, #1
 80023f8:	4618      	mov	r0, r3
 80023fa:	f008 f963 	bl	800a6c4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 80023fe:	2101      	movs	r1, #1
 8002400:	2009      	movs	r0, #9
 8002402:	f002 fad9 	bl	80049b8 <set_rail_monitor_enable>

		break;
 8002406:	e204      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8002408:	48a2      	ldr	r0, [pc, #648]	; (8002694 <HAL_UART_RxCpltCallback+0x700>)
 800240a:	f017 f83d 	bl	8019488 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 800240e:	4ba0      	ldr	r3, [pc, #640]	; (8002690 <HAL_UART_RxCpltCallback+0x6fc>)
 8002410:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002414:	2200      	movs	r2, #0
 8002416:	4618      	mov	r0, r3
 8002418:	f008 f954 	bl	800a6c4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 800241c:	2100      	movs	r1, #0
 800241e:	2009      	movs	r0, #9
 8002420:	f002 faca 	bl	80049b8 <set_rail_monitor_enable>
		break;
 8002424:	e1f5      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8002426:	489c      	ldr	r0, [pc, #624]	; (8002698 <HAL_UART_RxCpltCallback+0x704>)
 8002428:	f017 f82e 	bl	8019488 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 800242c:	4b98      	ldr	r3, [pc, #608]	; (8002690 <HAL_UART_RxCpltCallback+0x6fc>)
 800242e:	2180      	movs	r1, #128	; 0x80
 8002430:	2201      	movs	r2, #1
 8002432:	4618      	mov	r0, r3
 8002434:	f008 f946 	bl	800a6c4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8002438:	2101      	movs	r1, #1
 800243a:	200a      	movs	r0, #10
 800243c:	f002 fabc 	bl	80049b8 <set_rail_monitor_enable>

		break;
 8002440:	e1e7      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8002442:	4896      	ldr	r0, [pc, #600]	; (800269c <HAL_UART_RxCpltCallback+0x708>)
 8002444:	f017 f820 	bl	8019488 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8002448:	4b91      	ldr	r3, [pc, #580]	; (8002690 <HAL_UART_RxCpltCallback+0x6fc>)
 800244a:	2180      	movs	r1, #128	; 0x80
 800244c:	2200      	movs	r2, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f008 f938 	bl	800a6c4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8002454:	2100      	movs	r1, #0
 8002456:	200a      	movs	r0, #10
 8002458:	f002 faae 	bl	80049b8 <set_rail_monitor_enable>
		break;
 800245c:	e1d9      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 800245e:	4890      	ldr	r0, [pc, #576]	; (80026a0 <HAL_UART_RxCpltCallback+0x70c>)
 8002460:	f017 f812 	bl	8019488 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8002464:	4b8a      	ldr	r3, [pc, #552]	; (8002690 <HAL_UART_RxCpltCallback+0x6fc>)
 8002466:	2140      	movs	r1, #64	; 0x40
 8002468:	2201      	movs	r2, #1
 800246a:	4618      	mov	r0, r3
 800246c:	f008 f92a 	bl	800a6c4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8002470:	2101      	movs	r1, #1
 8002472:	200b      	movs	r0, #11
 8002474:	f002 faa0 	bl	80049b8 <set_rail_monitor_enable>

		break;
 8002478:	e1cb      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 800247a:	488a      	ldr	r0, [pc, #552]	; (80026a4 <HAL_UART_RxCpltCallback+0x710>)
 800247c:	f017 f804 	bl	8019488 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8002480:	4b83      	ldr	r3, [pc, #524]	; (8002690 <HAL_UART_RxCpltCallback+0x6fc>)
 8002482:	2140      	movs	r1, #64	; 0x40
 8002484:	2200      	movs	r2, #0
 8002486:	4618      	mov	r0, r3
 8002488:	f008 f91c 	bl	800a6c4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 800248c:	2100      	movs	r1, #0
 800248e:	200b      	movs	r0, #11
 8002490:	f002 fa92 	bl	80049b8 <set_rail_monitor_enable>
		break;
 8002494:	e1bd      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8002496:	4884      	ldr	r0, [pc, #528]	; (80026a8 <HAL_UART_RxCpltCallback+0x714>)
 8002498:	f016 fff6 	bl	8019488 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 800249c:	4b7c      	ldr	r3, [pc, #496]	; (8002690 <HAL_UART_RxCpltCallback+0x6fc>)
 800249e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024a2:	2201      	movs	r2, #1
 80024a4:	4618      	mov	r0, r3
 80024a6:	f008 f90d 	bl	800a6c4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 80024aa:	2101      	movs	r1, #1
 80024ac:	200c      	movs	r0, #12
 80024ae:	f002 fa83 	bl	80049b8 <set_rail_monitor_enable>

		break;
 80024b2:	e1ae      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 80024b4:	487d      	ldr	r0, [pc, #500]	; (80026ac <HAL_UART_RxCpltCallback+0x718>)
 80024b6:	f016 ffe7 	bl	8019488 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 80024ba:	4b75      	ldr	r3, [pc, #468]	; (8002690 <HAL_UART_RxCpltCallback+0x6fc>)
 80024bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024c0:	2200      	movs	r2, #0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f008 f8fe 	bl	800a6c4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 80024c8:	2100      	movs	r1, #0
 80024ca:	200c      	movs	r0, #12
 80024cc:	f002 fa74 	bl	80049b8 <set_rail_monitor_enable>
		break;
 80024d0:	e19f      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 80024d2:	4877      	ldr	r0, [pc, #476]	; (80026b0 <HAL_UART_RxCpltCallback+0x71c>)
 80024d4:	f016 ffd8 	bl	8019488 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 80024d8:	4b6d      	ldr	r3, [pc, #436]	; (8002690 <HAL_UART_RxCpltCallback+0x6fc>)
 80024da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024de:	2201      	movs	r2, #1
 80024e0:	4618      	mov	r0, r3
 80024e2:	f008 f8ef 	bl	800a6c4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 80024e6:	2101      	movs	r1, #1
 80024e8:	200d      	movs	r0, #13
 80024ea:	f002 fa65 	bl	80049b8 <set_rail_monitor_enable>

		break;
 80024ee:	e190      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 80024f0:	4870      	ldr	r0, [pc, #448]	; (80026b4 <HAL_UART_RxCpltCallback+0x720>)
 80024f2:	f016 ffc9 	bl	8019488 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 80024f6:	4b66      	ldr	r3, [pc, #408]	; (8002690 <HAL_UART_RxCpltCallback+0x6fc>)
 80024f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024fc:	2200      	movs	r2, #0
 80024fe:	4618      	mov	r0, r3
 8002500:	f008 f8e0 	bl	800a6c4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 8002504:	2100      	movs	r1, #0
 8002506:	200d      	movs	r0, #13
 8002508:	f002 fa56 	bl	80049b8 <set_rail_monitor_enable>
		break;
 800250c:	e181      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 800250e:	486a      	ldr	r0, [pc, #424]	; (80026b8 <HAL_UART_RxCpltCallback+0x724>)
 8002510:	f016 ffba 	bl	8019488 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8002514:	4b5e      	ldr	r3, [pc, #376]	; (8002690 <HAL_UART_RxCpltCallback+0x6fc>)
 8002516:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800251a:	2201      	movs	r2, #1
 800251c:	4618      	mov	r0, r3
 800251e:	f008 f8d1 	bl	800a6c4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 8002522:	2101      	movs	r1, #1
 8002524:	200f      	movs	r0, #15
 8002526:	f002 fa47 	bl	80049b8 <set_rail_monitor_enable>

		break;
 800252a:	e172      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 800252c:	4863      	ldr	r0, [pc, #396]	; (80026bc <HAL_UART_RxCpltCallback+0x728>)
 800252e:	f016 ffab 	bl	8019488 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8002532:	4b57      	ldr	r3, [pc, #348]	; (8002690 <HAL_UART_RxCpltCallback+0x6fc>)
 8002534:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002538:	2200      	movs	r2, #0
 800253a:	4618      	mov	r0, r3
 800253c:	f008 f8c2 	bl	800a6c4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8002540:	2100      	movs	r1, #0
 8002542:	200f      	movs	r0, #15
 8002544:	f002 fa38 	bl	80049b8 <set_rail_monitor_enable>
		break;
 8002548:	e163      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 800254a:	485d      	ldr	r0, [pc, #372]	; (80026c0 <HAL_UART_RxCpltCallback+0x72c>)
 800254c:	f016 ff9c 	bl	8019488 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8002550:	4b4b      	ldr	r3, [pc, #300]	; (8002680 <HAL_UART_RxCpltCallback+0x6ec>)
 8002552:	2140      	movs	r1, #64	; 0x40
 8002554:	2201      	movs	r2, #1
 8002556:	4618      	mov	r0, r3
 8002558:	f008 f8b4 	bl	800a6c4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 800255c:	2101      	movs	r1, #1
 800255e:	2010      	movs	r0, #16
 8002560:	f002 fa2a 	bl	80049b8 <set_rail_monitor_enable>

		break;
 8002564:	e155      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8002566:	4857      	ldr	r0, [pc, #348]	; (80026c4 <HAL_UART_RxCpltCallback+0x730>)
 8002568:	f016 ff8e 	bl	8019488 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 800256c:	4b44      	ldr	r3, [pc, #272]	; (8002680 <HAL_UART_RxCpltCallback+0x6ec>)
 800256e:	2140      	movs	r1, #64	; 0x40
 8002570:	2200      	movs	r2, #0
 8002572:	4618      	mov	r0, r3
 8002574:	f008 f8a6 	bl	800a6c4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8002578:	2100      	movs	r1, #0
 800257a:	2010      	movs	r0, #16
 800257c:	f002 fa1c 	bl	80049b8 <set_rail_monitor_enable>
		break;
 8002580:	e147      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8002582:	4851      	ldr	r0, [pc, #324]	; (80026c8 <HAL_UART_RxCpltCallback+0x734>)
 8002584:	f016 ff80 	bl	8019488 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8002588:	2300      	movs	r3, #0
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	2320      	movs	r3, #32
 800258e:	4a4f      	ldr	r2, [pc, #316]	; (80026cc <HAL_UART_RxCpltCallback+0x738>)
 8002590:	2100      	movs	r1, #0
 8002592:	484f      	ldr	r0, [pc, #316]	; (80026d0 <HAL_UART_RxCpltCallback+0x73c>)
 8002594:	f004 fa12 	bl	80069bc <HAL_DAC_Start_DMA>
		break;
 8002598:	e13b      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 800259a:	484e      	ldr	r0, [pc, #312]	; (80026d4 <HAL_UART_RxCpltCallback+0x740>)
 800259c:	f016 ff74 	bl	8019488 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80025a0:	2100      	movs	r1, #0
 80025a2:	484b      	ldr	r0, [pc, #300]	; (80026d0 <HAL_UART_RxCpltCallback+0x73c>)
 80025a4:	f004 faca 	bl	8006b3c <HAL_DAC_Stop_DMA>
		break;
 80025a8:	e133      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 80025aa:	484b      	ldr	r0, [pc, #300]	; (80026d8 <HAL_UART_RxCpltCallback+0x744>)
 80025ac:	f016 ff6c 	bl	8019488 <puts>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 80025b0:	4b4a      	ldr	r3, [pc, #296]	; (80026dc <HAL_UART_RxCpltCallback+0x748>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2102      	movs	r1, #2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f013 fe2c 	bl	8016214 <osEventFlagsSet>
		TIM2->CCR4 = 312;
 80025bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025c0:	f44f 729c 	mov.w	r2, #312	; 0x138
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
		ERPA_ENABLED = 1;
 80025c6:	4b46      	ldr	r3, [pc, #280]	; (80026e0 <HAL_UART_RxCpltCallback+0x74c>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	701a      	strb	r2, [r3, #0]

		break;
 80025cc:	e121      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 80025ce:	4845      	ldr	r0, [pc, #276]	; (80026e4 <HAL_UART_RxCpltCallback+0x750>)
 80025d0:	f016 ff5a 	bl	8019488 <puts>
		ERPA_ENABLED = 0;
 80025d4:	4b42      	ldr	r3, [pc, #264]	; (80026e0 <HAL_UART_RxCpltCallback+0x74c>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 80025da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025de:	2200      	movs	r2, #0
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80025e2:	e116      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1B: {
		printf("PMT ON\n");
 80025e4:	4840      	ldr	r0, [pc, #256]	; (80026e8 <HAL_UART_RxCpltCallback+0x754>)
 80025e6:	f016 ff4f 	bl	8019488 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80025ea:	2100      	movs	r1, #0
 80025ec:	483f      	ldr	r0, [pc, #252]	; (80026ec <HAL_UART_RxCpltCallback+0x758>)
 80025ee:	f00f fb23 	bl	8011c38 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 80025f2:	4b3a      	ldr	r3, [pc, #232]	; (80026dc <HAL_UART_RxCpltCallback+0x748>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2101      	movs	r1, #1
 80025f8:	4618      	mov	r0, r3
 80025fa:	f013 fe0b 	bl	8016214 <osEventFlagsSet>
		break;
 80025fe:	e108      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8002600:	483b      	ldr	r0, [pc, #236]	; (80026f0 <HAL_UART_RxCpltCallback+0x75c>)
 8002602:	f016 ff41 	bl	8019488 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8002606:	2100      	movs	r1, #0
 8002608:	4838      	ldr	r0, [pc, #224]	; (80026ec <HAL_UART_RxCpltCallback+0x758>)
 800260a:	f00f fc6f 	bl	8011eec <HAL_TIM_OC_Stop_IT>
		break;
 800260e:	e100      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1C: {
		printf("HK ON \n");
 8002610:	4838      	ldr	r0, [pc, #224]	; (80026f4 <HAL_UART_RxCpltCallback+0x760>)
 8002612:	f016 ff39 	bl	8019488 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8002616:	4b31      	ldr	r3, [pc, #196]	; (80026dc <HAL_UART_RxCpltCallback+0x748>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2104      	movs	r1, #4
 800261c:	4618      	mov	r0, r3
 800261e:	f013 fdf9 	bl	8016214 <osEventFlagsSet>
		HK_ENABLED = 1;
 8002622:	4b35      	ldr	r3, [pc, #212]	; (80026f8 <HAL_UART_RxCpltCallback+0x764>)
 8002624:	2201      	movs	r2, #1
 8002626:	701a      	strb	r2, [r3, #0]
		break;
 8002628:	e0f3      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x0C: {
		printf("HK OFF\n");
 800262a:	4834      	ldr	r0, [pc, #208]	; (80026fc <HAL_UART_RxCpltCallback+0x768>)
 800262c:	f016 ff2c 	bl	8019488 <puts>
		HK_ENABLED = 0;
 8002630:	4b31      	ldr	r3, [pc, #196]	; (80026f8 <HAL_UART_RxCpltCallback+0x764>)
 8002632:	2200      	movs	r2, #0
 8002634:	701a      	strb	r2, [r3, #0]
		break;
 8002636:	e0ec      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1D: {
		printf("Step Up\n");
 8002638:	4831      	ldr	r0, [pc, #196]	; (8002700 <HAL_UART_RxCpltCallback+0x76c>)
 800263a:	f016 ff25 	bl	8019488 <puts>
		if (step < 14) {
 800263e:	4b31      	ldr	r3, [pc, #196]	; (8002704 <HAL_UART_RxCpltCallback+0x770>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b0d      	cmp	r3, #13
 8002646:	f200 80dd 	bhi.w	8002804 <HAL_UART_RxCpltCallback+0x870>
			step += 2;
 800264a:	4b2e      	ldr	r3, [pc, #184]	; (8002704 <HAL_UART_RxCpltCallback+0x770>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	b2db      	uxtb	r3, r3
 8002650:	3302      	adds	r3, #2
 8002652:	b2da      	uxtb	r2, r3
 8002654:	4b2b      	ldr	r3, [pc, #172]	; (8002704 <HAL_UART_RxCpltCallback+0x770>)
 8002656:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8002658:	4b2a      	ldr	r3, [pc, #168]	; (8002704 <HAL_UART_RxCpltCallback+0x770>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	461a      	mov	r2, r3
 8002660:	4b1a      	ldr	r3, [pc, #104]	; (80026cc <HAL_UART_RxCpltCallback+0x738>)
 8002662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002666:	2200      	movs	r2, #0
 8002668:	2100      	movs	r1, #0
 800266a:	4819      	ldr	r0, [pc, #100]	; (80026d0 <HAL_UART_RxCpltCallback+0x73c>)
 800266c:	f004 fb09 	bl	8006c82 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002670:	2100      	movs	r1, #0
 8002672:	4817      	ldr	r0, [pc, #92]	; (80026d0 <HAL_UART_RxCpltCallback+0x73c>)
 8002674:	f004 f94a 	bl	800690c <HAL_DAC_Start>
		}
		break;
 8002678:	e0c4      	b.n	8002804 <HAL_UART_RxCpltCallback+0x870>
 800267a:	bf00      	nop
 800267c:	08019e64 	.word	0x08019e64
 8002680:	58020400 	.word	0x58020400
 8002684:	08019e70 	.word	0x08019e70
 8002688:	0801a16c 	.word	0x0801a16c
 800268c:	08019e7c 	.word	0x08019e7c
 8002690:	58020800 	.word	0x58020800
 8002694:	08019e88 	.word	0x08019e88
 8002698:	08019e98 	.word	0x08019e98
 800269c:	08019ea4 	.word	0x08019ea4
 80026a0:	08019eb0 	.word	0x08019eb0
 80026a4:	08019ebc 	.word	0x08019ebc
 80026a8:	08019ecc 	.word	0x08019ecc
 80026ac:	08019ed8 	.word	0x08019ed8
 80026b0:	08019ee4 	.word	0x08019ee4
 80026b4:	08019ef0 	.word	0x08019ef0
 80026b8:	08019efc 	.word	0x08019efc
 80026bc:	08019f0c 	.word	0x08019f0c
 80026c0:	08019f1c 	.word	0x08019f1c
 80026c4:	08019f28 	.word	0x08019f28
 80026c8:	08019f38 	.word	0x08019f38
 80026cc:	24000038 	.word	0x24000038
 80026d0:	24000314 	.word	0x24000314
 80026d4:	08019f48 	.word	0x08019f48
 80026d8:	08019f58 	.word	0x08019f58
 80026dc:	24001ac8 	.word	0x24001ac8
 80026e0:	24001b15 	.word	0x24001b15
 80026e4:	08019f60 	.word	0x08019f60
 80026e8:	08019f6c 	.word	0x08019f6c
 80026ec:	24001de4 	.word	0x24001de4
 80026f0:	08019f74 	.word	0x08019f74
 80026f4:	08019f7c 	.word	0x08019f7c
 80026f8:	24001b14 	.word	0x24001b14
 80026fc:	08019f84 	.word	0x08019f84
 8002700:	08019f8c 	.word	0x08019f8c
 8002704:	24001b16 	.word	0x24001b16
	}
	case 0x0D: {
		printf("Step Down\n");
 8002708:	4844      	ldr	r0, [pc, #272]	; (800281c <HAL_UART_RxCpltCallback+0x888>)
 800270a:	f016 febd 	bl	8019488 <puts>
		if (step > 1) {
 800270e:	4b44      	ldr	r3, [pc, #272]	; (8002820 <HAL_UART_RxCpltCallback+0x88c>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b01      	cmp	r3, #1
 8002716:	d977      	bls.n	8002808 <HAL_UART_RxCpltCallback+0x874>
			step -= 2;
 8002718:	4b41      	ldr	r3, [pc, #260]	; (8002820 <HAL_UART_RxCpltCallback+0x88c>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	3b02      	subs	r3, #2
 8002720:	b2da      	uxtb	r2, r3
 8002722:	4b3f      	ldr	r3, [pc, #252]	; (8002820 <HAL_UART_RxCpltCallback+0x88c>)
 8002724:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8002726:	4b3e      	ldr	r3, [pc, #248]	; (8002820 <HAL_UART_RxCpltCallback+0x88c>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	461a      	mov	r2, r3
 800272e:	4b3d      	ldr	r3, [pc, #244]	; (8002824 <HAL_UART_RxCpltCallback+0x890>)
 8002730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002734:	2200      	movs	r2, #0
 8002736:	2100      	movs	r1, #0
 8002738:	483b      	ldr	r0, [pc, #236]	; (8002828 <HAL_UART_RxCpltCallback+0x894>)
 800273a:	f004 faa2 	bl	8006c82 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800273e:	2100      	movs	r1, #0
 8002740:	4839      	ldr	r0, [pc, #228]	; (8002828 <HAL_UART_RxCpltCallback+0x894>)
 8002742:	f004 f8e3 	bl	800690c <HAL_DAC_Start>
		}
		break;
 8002746:	e05f      	b.n	8002808 <HAL_UART_RxCpltCallback+0x874>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8002748:	4838      	ldr	r0, [pc, #224]	; (800282c <HAL_UART_RxCpltCallback+0x898>)
 800274a:	f016 fe9d 	bl	8019488 <puts>
		if (cadence <= 50000) {
 800274e:	4b38      	ldr	r3, [pc, #224]	; (8002830 <HAL_UART_RxCpltCallback+0x89c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002756:	4293      	cmp	r3, r2
 8002758:	d858      	bhi.n	800280c <HAL_UART_RxCpltCallback+0x878>
			cadence *= 2;
 800275a:	4b35      	ldr	r3, [pc, #212]	; (8002830 <HAL_UART_RxCpltCallback+0x89c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	4a33      	ldr	r2, [pc, #204]	; (8002830 <HAL_UART_RxCpltCallback+0x89c>)
 8002762:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8002764:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002768:	4b31      	ldr	r3, [pc, #196]	; (8002830 <HAL_UART_RxCpltCallback+0x89c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 800276e:	e04d      	b.n	800280c <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8002770:	4830      	ldr	r0, [pc, #192]	; (8002834 <HAL_UART_RxCpltCallback+0x8a0>)
 8002772:	f016 fe89 	bl	8019488 <puts>
		if (cadence >= 6250) {
 8002776:	4b2e      	ldr	r3, [pc, #184]	; (8002830 <HAL_UART_RxCpltCallback+0x89c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f641 0269 	movw	r2, #6249	; 0x1869
 800277e:	4293      	cmp	r3, r2
 8002780:	d946      	bls.n	8002810 <HAL_UART_RxCpltCallback+0x87c>
			cadence /= 2;
 8002782:	4b2b      	ldr	r3, [pc, #172]	; (8002830 <HAL_UART_RxCpltCallback+0x89c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	085b      	lsrs	r3, r3, #1
 8002788:	4a29      	ldr	r2, [pc, #164]	; (8002830 <HAL_UART_RxCpltCallback+0x89c>)
 800278a:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 800278c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002790:	4b27      	ldr	r3, [pc, #156]	; (8002830 <HAL_UART_RxCpltCallback+0x89c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8002796:	e03b      	b.n	8002810 <HAL_UART_RxCpltCallback+0x87c>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8002798:	4827      	ldr	r0, [pc, #156]	; (8002838 <HAL_UART_RxCpltCallback+0x8a4>)
 800279a:	f016 fe75 	bl	8019488 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 800279e:	4b27      	ldr	r3, [pc, #156]	; (800283c <HAL_UART_RxCpltCallback+0x8a8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2102      	movs	r1, #2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f013 fd35 	bl	8016214 <osEventFlagsSet>
		break;
 80027aa:	e032      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xE0: {
		printf("Auto Init\n");
 80027ac:	4824      	ldr	r0, [pc, #144]	; (8002840 <HAL_UART_RxCpltCallback+0x8ac>)
 80027ae:	f016 fe6b 	bl	8019488 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 80027b2:	4b22      	ldr	r3, [pc, #136]	; (800283c <HAL_UART_RxCpltCallback+0x8a8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2104      	movs	r1, #4
 80027b8:	4618      	mov	r0, r3
 80027ba:	f013 fd2b 	bl	8016214 <osEventFlagsSet>
		break;
 80027be:	e028      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 80027c0:	4820      	ldr	r0, [pc, #128]	; (8002844 <HAL_UART_RxCpltCallback+0x8b0>)
 80027c2:	f016 fe61 	bl	8019488 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 80027c6:	4b1d      	ldr	r3, [pc, #116]	; (800283c <HAL_UART_RxCpltCallback+0x8a8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2108      	movs	r1, #8
 80027cc:	4618      	mov	r0, r3
 80027ce:	f013 fd21 	bl	8016214 <osEventFlagsSet>
		break;
 80027d2:	e01e      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xAF: {
		sync();
 80027d4:	f000 f9ca 	bl	8002b6c <sync>
		break;
 80027d8:	e01b      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_UART_RxCpltCallback+0x8b4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2101      	movs	r1, #1
 80027e0:	4618      	mov	r0, r3
 80027e2:	f013 fd17 	bl	8016214 <osEventFlagsSet>
		break;
 80027e6:	e014      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 80027e8:	4b17      	ldr	r3, [pc, #92]	; (8002848 <HAL_UART_RxCpltCallback+0x8b4>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2102      	movs	r1, #2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f013 fd10 	bl	8016214 <osEventFlagsSet>
		break;
 80027f4:	e00d      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xDF: {
		reset_error_counters();
 80027f6:	f7fe fe23 	bl	8001440 <reset_error_counters>
		break;
 80027fa:	e00a      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
	}
	default: {
		printf("Unknown Command\n");
 80027fc:	4813      	ldr	r0, [pc, #76]	; (800284c <HAL_UART_RxCpltCallback+0x8b8>)
 80027fe:	f016 fe43 	bl	8019488 <puts>
		break;
 8002802:	e006      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
		break;
 8002804:	bf00      	nop
 8002806:	e004      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
		break;
 8002808:	bf00      	nop
 800280a:	e002      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
		break;
 800280c:	bf00      	nop
 800280e:	e000      	b.n	8002812 <HAL_UART_RxCpltCallback+0x87e>
		break;
 8002810:	bf00      	nop
	}
	}
}
 8002812:	bf00      	nop
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	08019f94 	.word	0x08019f94
 8002820:	24001b16 	.word	0x24001b16
 8002824:	24000038 	.word	0x24000038
 8002828:	24000314 	.word	0x24000314
 800282c:	08019fa0 	.word	0x08019fa0
 8002830:	240000b8 	.word	0x240000b8
 8002834:	08019fac 	.word	0x08019fac
 8002838:	08019fb8 	.word	0x08019fb8
 800283c:	24001acc 	.word	0x24001acc
 8002840:	08019fc8 	.word	0x08019fc8
 8002844:	08019fd4 	.word	0x08019fd4
 8002848:	24001ad0 	.word	0x24001ad0
 800284c:	08019fe0 	.word	0x08019fe0

08002850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002856:	f000 fa2d 	bl	8002cb4 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800285a:	4b45      	ldr	r3, [pc, #276]	; (8002970 <main+0x120>)
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d11b      	bne.n	800289e <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 8002866:	f3bf 8f4f 	dsb	sy
}
 800286a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800286c:	f3bf 8f6f 	isb	sy
}
 8002870:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002872:	4b3f      	ldr	r3, [pc, #252]	; (8002970 <main+0x120>)
 8002874:	2200      	movs	r2, #0
 8002876:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800287a:	f3bf 8f4f 	dsb	sy
}
 800287e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002880:	f3bf 8f6f 	isb	sy
}
 8002884:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002886:	4b3a      	ldr	r3, [pc, #232]	; (8002970 <main+0x120>)
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	4a39      	ldr	r2, [pc, #228]	; (8002970 <main+0x120>)
 800288c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002890:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002892:	f3bf 8f4f 	dsb	sy
}
 8002896:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002898:	f3bf 8f6f 	isb	sy
}
 800289c:	e000      	b.n	80028a0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800289e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80028a0:	4b33      	ldr	r3, [pc, #204]	; (8002970 <main+0x120>)
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d138      	bne.n	800291e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80028ac:	4b30      	ldr	r3, [pc, #192]	; (8002970 <main+0x120>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80028b4:	f3bf 8f4f 	dsb	sy
}
 80028b8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80028ba:	4b2d      	ldr	r3, [pc, #180]	; (8002970 <main+0x120>)
 80028bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028c0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	0b5b      	lsrs	r3, r3, #13
 80028c6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80028ca:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	08db      	lsrs	r3, r3, #3
 80028d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028d4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80028de:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80028e4:	4922      	ldr	r1, [pc, #136]	; (8002970 <main+0x120>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	1e5a      	subs	r2, r3, #1
 80028f0:	607a      	str	r2, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1ef      	bne.n	80028d6 <main+0x86>
    } while(sets-- != 0U);
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	1e5a      	subs	r2, r3, #1
 80028fa:	60ba      	str	r2, [r7, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1e5      	bne.n	80028cc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8002900:	f3bf 8f4f 	dsb	sy
}
 8002904:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002906:	4b1a      	ldr	r3, [pc, #104]	; (8002970 <main+0x120>)
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	4a19      	ldr	r2, [pc, #100]	; (8002970 <main+0x120>)
 800290c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002910:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002912:	f3bf 8f4f 	dsb	sy
}
 8002916:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002918:	f3bf 8f6f 	isb	sy
}
 800291c:	e000      	b.n	8002920 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800291e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002920:	f002 f9e8 	bl	8004cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002924:	f000 f826 	bl	8002974 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002928:	f000 f8a6 	bl	8002a78 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800292c:	f7ff f92c 	bl	8001b88 <MX_GPIO_Init>
  MX_DMA_Init();
 8002930:	f7fe f9da 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002934:	f001 fd78 	bl	8004428 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002938:	f7ff f9a0 	bl	8001c7c <MX_I2C1_Init>
  MX_SPI2_Init();
 800293c:	f000 feae 	bl	800369c <MX_SPI2_Init>
  MX_TIM2_Init();
 8002940:	f001 fb9a 	bl	8004078 <MX_TIM2_Init>
  MX_TIM1_Init();
 8002944:	f001 faea 	bl	8003f1c <MX_TIM1_Init>
  MX_ADC3_Init();
 8002948:	f7fd ff6e 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 800294c:	f7fd fe4a 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8002950:	f7fe f916 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8002954:	f000 fe4a 	bl	80035ec <MX_SPI1_Init>
  MX_RTC_Init();
 8002958:	f000 fc16 	bl	8003188 <MX_RTC_Init>
//  MX_IWDG1_Init();
  /* USER CODE BEGIN 2 */
  //get_reset_cause();
  system_setup();
 800295c:	f000 f8bc 	bl	8002ad8 <system_setup>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002960:	f013 fb02 	bl	8015f68 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002964:	f7fe feec 	bl	8001740 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002968:	f013 fb22 	bl	8015fb0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800296c:	e7fe      	b.n	800296c <main+0x11c>
 800296e:	bf00      	nop
 8002970:	e000ed00 	.word	0xe000ed00

08002974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b09c      	sub	sp, #112	; 0x70
 8002978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800297a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800297e:	224c      	movs	r2, #76	; 0x4c
 8002980:	2100      	movs	r1, #0
 8002982:	4618      	mov	r0, r3
 8002984:	f016 fd0a 	bl	801939c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002988:	1d3b      	adds	r3, r7, #4
 800298a:	2220      	movs	r2, #32
 800298c:	2100      	movs	r1, #0
 800298e:	4618      	mov	r0, r3
 8002990:	f016 fd04 	bl	801939c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002994:	2002      	movs	r0, #2
 8002996:	f00a fa5f 	bl	800ce58 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800299a:	2300      	movs	r3, #0
 800299c:	603b      	str	r3, [r7, #0]
 800299e:	4b34      	ldr	r3, [pc, #208]	; (8002a70 <SystemClock_Config+0xfc>)
 80029a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a2:	4a33      	ldr	r2, [pc, #204]	; (8002a70 <SystemClock_Config+0xfc>)
 80029a4:	f023 0301 	bic.w	r3, r3, #1
 80029a8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80029aa:	4b31      	ldr	r3, [pc, #196]	; (8002a70 <SystemClock_Config+0xfc>)
 80029ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	4b2f      	ldr	r3, [pc, #188]	; (8002a74 <SystemClock_Config+0x100>)
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80029bc:	4a2d      	ldr	r2, [pc, #180]	; (8002a74 <SystemClock_Config+0x100>)
 80029be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c2:	6193      	str	r3, [r2, #24]
 80029c4:	4b2b      	ldr	r3, [pc, #172]	; (8002a74 <SystemClock_Config+0x100>)
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029cc:	603b      	str	r3, [r7, #0]
 80029ce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80029d0:	bf00      	nop
 80029d2:	4b28      	ldr	r3, [pc, #160]	; (8002a74 <SystemClock_Config+0x100>)
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029de:	d1f8      	bne.n	80029d2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80029e0:	230b      	movs	r3, #11
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 80029ea:	2309      	movs	r3, #9
 80029ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029ee:	2340      	movs	r3, #64	; 0x40
 80029f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80029f2:	2301      	movs	r3, #1
 80029f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029f6:	2302      	movs	r3, #2
 80029f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029fa:	2302      	movs	r3, #2
 80029fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80029fe:	2304      	movs	r3, #4
 8002a00:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8002a02:	2318      	movs	r3, #24
 8002a04:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002a06:	2302      	movs	r3, #2
 8002a08:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002a12:	2308      	movs	r3, #8
 8002a14:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8002a16:	2302      	movs	r3, #2
 8002a18:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a22:	4618      	mov	r0, r3
 8002a24:	f00a fa52 	bl	800cecc <HAL_RCC_OscConfig>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8002a2e:	f000 f995 	bl	8002d5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a32:	233f      	movs	r3, #63	; 0x3f
 8002a34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a36:	2303      	movs	r3, #3
 8002a38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002a46:	2340      	movs	r3, #64	; 0x40
 8002a48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a52:	1d3b      	adds	r3, r7, #4
 8002a54:	2101      	movs	r1, #1
 8002a56:	4618      	mov	r0, r3
 8002a58:	f00a fe92 	bl	800d780 <HAL_RCC_ClockConfig>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8002a62:	f000 f97b 	bl	8002d5c <Error_Handler>
  }
}
 8002a66:	bf00      	nop
 8002a68:	3770      	adds	r7, #112	; 0x70
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	58000400 	.word	0x58000400
 8002a74:	58024800 	.word	0x58024800

08002a78 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b0b0      	sub	sp, #192	; 0xc0
 8002a7c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a7e:	463b      	mov	r3, r7
 8002a80:	22c0      	movs	r2, #192	; 0xc0
 8002a82:	2100      	movs	r1, #0
 8002a84:	4618      	mov	r0, r3
 8002a86:	f016 fc89 	bl	801939c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002a8a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8002a96:	2304      	movs	r3, #4
 8002a98:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8002a9a:	2318      	movs	r3, #24
 8002a9c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8002a9e:	2308      	movs	r3, #8
 8002aa0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8002aaa:	2380      	movs	r3, #128	; 0x80
 8002aac:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002aae:	2320      	movs	r3, #32
 8002ab0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002abc:	463b      	mov	r3, r7
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f00b fa2c 	bl	800df1c <HAL_RCCEx_PeriphCLKConfig>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8002aca:	f000 f947 	bl	8002d5c <Error_Handler>
  }
}
 8002ace:	bf00      	nop
 8002ad0:	37c0      	adds	r7, #192	; 0xc0
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts
  	//error_counter_init();


	packet_event_flags = osEventFlagsNew(NULL);
 8002adc:	2000      	movs	r0, #0
 8002ade:	f013 fb5a 	bl	8016196 <osEventFlagsNew>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	4a1b      	ldr	r2, [pc, #108]	; (8002b54 <system_setup+0x7c>)
 8002ae6:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8002ae8:	4b1a      	ldr	r3, [pc, #104]	; (8002b54 <system_setup+0x7c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d100      	bne.n	8002af2 <system_setup+0x1a>
        while (1);
 8002af0:	e7fe      	b.n	8002af0 <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 8002af2:	2000      	movs	r0, #0
 8002af4:	f013 fb4f 	bl	8016196 <osEventFlagsNew>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4a17      	ldr	r2, [pc, #92]	; (8002b58 <system_setup+0x80>)
 8002afc:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 8002afe:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <system_setup+0x80>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d100      	bne.n	8002b08 <system_setup+0x30>
        while (1);
 8002b06:	e7fe      	b.n	8002b06 <system_setup+0x2e>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f013 fb44 	bl	8016196 <osEventFlagsNew>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	4a12      	ldr	r2, [pc, #72]	; (8002b5c <system_setup+0x84>)
 8002b12:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 8002b14:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <system_setup+0x84>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d100      	bne.n	8002b1e <system_setup+0x46>
        while (1);
 8002b1c:	e7fe      	b.n	8002b1c <system_setup+0x44>
    }

    TIM2->CCR4 = 0;
 8002b1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b22:	2200      	movs	r2, #0
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8002b26:	210c      	movs	r1, #12
 8002b28:	480d      	ldr	r0, [pc, #52]	; (8002b60 <system_setup+0x88>)
 8002b2a:	f00f f885 	bl	8011c38 <HAL_TIM_OC_Start_IT>

	if (!voltage_monitor_init()) {
 8002b2e:	f001 fd85 	bl	800463c <voltage_monitor_init>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d100      	bne.n	8002b3a <system_setup+0x62>
		while (1);
 8002b38:	e7fe      	b.n	8002b38 <system_setup+0x60>
	}

	if (!init_adc_dma()) {
 8002b3a:	f000 fbb7 	bl	80032ac <init_adc_dma>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d100      	bne.n	8002b46 <system_setup+0x6e>
		while (1);
 8002b44:	e7fe      	b.n	8002b44 <system_setup+0x6c>
	}

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002b46:	2201      	movs	r2, #1
 8002b48:	4906      	ldr	r1, [pc, #24]	; (8002b64 <system_setup+0x8c>)
 8002b4a:	4807      	ldr	r0, [pc, #28]	; (8002b68 <system_setup+0x90>)
 8002b4c:	f010 fd54 	bl	80135f8 <HAL_UART_Receive_IT>

}
 8002b50:	bf00      	nop
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	24001ac8 	.word	0x24001ac8
 8002b58:	24001acc 	.word	0x24001acc
 8002b5c:	24001ad0 	.word	0x24001ad0
 8002b60:	24001e30 	.word	0x24001e30
 8002b64:	24001ad4 	.word	0x24001ad4
 8002b68:	24001e7c 	.word	0x24001e7c

08002b6c <sync>:

void sync() {
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
	send_ACK();
 8002b72:	f000 f81f 	bl	8002bb4 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 8002b76:	480d      	ldr	r0, [pc, #52]	; (8002bac <sync+0x40>)
 8002b78:	f010 fd8a 	bl	8013690 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8002b7c:	2364      	movs	r3, #100	; 0x64
 8002b7e:	2209      	movs	r2, #9
 8002b80:	490b      	ldr	r1, [pc, #44]	; (8002bb0 <sync+0x44>)
 8002b82:	480a      	ldr	r0, [pc, #40]	; (8002bac <sync+0x40>)
 8002b84:	f010 fc70 	bl	8013468 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8002b88:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <sync+0x44>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	2bff      	cmp	r3, #255	; 0xff
 8002b92:	d1f3      	bne.n	8002b7c <sync+0x10>

	//calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002b94:	2201      	movs	r2, #1
 8002b96:	4906      	ldr	r1, [pc, #24]	; (8002bb0 <sync+0x44>)
 8002b98:	4804      	ldr	r0, [pc, #16]	; (8002bac <sync+0x40>)
 8002b9a:	f010 fd2d 	bl	80135f8 <HAL_UART_Receive_IT>
	send_previous_error_packet();
 8002b9e:	f7fe fc75 	bl	800148c <send_previous_error_packet>
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	24001e7c 	.word	0x24001e7c
 8002bb0:	24001ad4 	.word	0x24001ad4

08002bb4 <send_ACK>:

void send_ACK() {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <send_ACK+0x1c>)
 8002bba:	22ff      	movs	r2, #255	; 0xff
 8002bbc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 8002bbe:	2364      	movs	r3, #100	; 0x64
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	4903      	ldr	r1, [pc, #12]	; (8002bd0 <send_ACK+0x1c>)
 8002bc4:	4803      	ldr	r0, [pc, #12]	; (8002bd4 <send_ACK+0x20>)
 8002bc6:	f010 fbc1 	bl	801334c <HAL_UART_Transmit>
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	24001b20 	.word	0x24001b20
 8002bd4:	24001e7c 	.word	0x24001e7c

08002bd8 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 8002bde:	4b2e      	ldr	r3, [pc, #184]	; (8002c98 <get_current_step+0xc0>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d04a      	beq.n	8002c84 <get_current_step+0xac>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf4:	da48      	bge.n	8002c88 <get_current_step+0xb0>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f640 628b 	movw	r2, #3723	; 0xe8b
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d03f      	beq.n	8002c80 <get_current_step+0xa8>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f640 628b 	movw	r2, #3723	; 0xe8b
 8002c06:	4293      	cmp	r3, r2
 8002c08:	dc3e      	bgt.n	8002c88 <get_current_step+0xb0>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f640 421f 	movw	r2, #3103	; 0xc1f
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d033      	beq.n	8002c7c <get_current_step+0xa4>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 8002c1a:	da35      	bge.n	8002c88 <get_current_step+0xb0>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d028      	beq.n	8002c78 <get_current_step+0xa0>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	dc2b      	bgt.n	8002c88 <get_current_step+0xb0>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f240 7245 	movw	r2, #1861	; 0x745
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d01c      	beq.n	8002c74 <get_current_step+0x9c>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f240 7245 	movw	r2, #1861	; 0x745
 8002c40:	4293      	cmp	r3, r2
 8002c42:	dc21      	bgt.n	8002c88 <get_current_step+0xb0>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d010      	beq.n	8002c70 <get_current_step+0x98>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002c54:	4293      	cmp	r3, r2
 8002c56:	dc17      	bgt.n	8002c88 <get_current_step+0xb0>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d004      	beq.n	8002c68 <get_current_step+0x90>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002c64:	d002      	beq.n	8002c6c <get_current_step+0x94>
 8002c66:	e00f      	b.n	8002c88 <get_current_step+0xb0>
	case 0:
		return 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	e00e      	b.n	8002c8a <get_current_step+0xb2>
	case 620:
		return 1;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e00c      	b.n	8002c8a <get_current_step+0xb2>
	case 1241:
		return 2;
 8002c70:	2302      	movs	r3, #2
 8002c72:	e00a      	b.n	8002c8a <get_current_step+0xb2>
	case 1861:
		return 3;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e008      	b.n	8002c8a <get_current_step+0xb2>
	case 2482:
		return 4;
 8002c78:	2304      	movs	r3, #4
 8002c7a:	e006      	b.n	8002c8a <get_current_step+0xb2>
	case 3103:
		return 5;
 8002c7c:	2305      	movs	r3, #5
 8002c7e:	e004      	b.n	8002c8a <get_current_step+0xb2>
	case 3723:
		return 6;
 8002c80:	2306      	movs	r3, #6
 8002c82:	e002      	b.n	8002c8a <get_current_step+0xb2>
	case 4095:
		return 7;
 8002c84:	2307      	movs	r3, #7
 8002c86:	e000      	b.n	8002c8a <get_current_step+0xb2>
	default:
		return -1;
 8002c88:	23ff      	movs	r3, #255	; 0xff
	}
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40007400 	.word	0x40007400

08002c9c <enter_stop>:

void enter_stop() {
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
	  send_ACK();
 8002ca0:	f7ff ff88 	bl	8002bb4 <send_ACK>

	  vTaskSuspendAll();
 8002ca4:	f014 fe0e 	bl	80178c4 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002ca8:	2101      	movs	r1, #1
 8002caa:	2001      	movs	r0, #1
 8002cac:	f00a f898 	bl	800cde0 <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 8002cb0:	f7ff f904 	bl	8001ebc <__NVIC_SystemReset>

08002cb4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002cba:	463b      	mov	r3, r7
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002cc6:	f003 fd87 	bl	80067d8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x00;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002cd6:	231f      	movs	r3, #31
 8002cd8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002cda:	2387      	movs	r3, #135	; 0x87
 8002cdc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002cea:	2301      	movs	r3, #1
 8002cec:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002cf6:	463b      	mov	r3, r7
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f003 fda5 	bl	8006848 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x081C0000;
 8002d02:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <MPU_Config+0x80>)
 8002d04:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8002d06:	2311      	movs	r3, #17
 8002d08:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002d12:	2303      	movs	r3, #3
 8002d14:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002d16:	2300      	movs	r3, #0
 8002d18:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002d1e:	463b      	mov	r3, r7
 8002d20:	4618      	mov	r0, r3
 8002d22:	f003 fd91 	bl	8006848 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002d26:	2004      	movs	r0, #4
 8002d28:	f003 fd6e 	bl	8006808 <HAL_MPU_Enable>

}
 8002d2c:	bf00      	nop
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	081c0000 	.word	0x081c0000

08002d38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a04      	ldr	r2, [pc, #16]	; (8002d58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d101      	bne.n	8002d4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d4a:	f002 f80f 	bl	8004d6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40001000 	.word	0x40001000

08002d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	ERROR_STRUCT error;
	error.category = EC_peripheral;
 8002d62:	2302      	movs	r3, #2
 8002d64:	713b      	strb	r3, [r7, #4]
	error.detail = ED_UNDEFINED;
 8002d66:	231a      	movs	r3, #26
 8002d68:	717b      	strb	r3, [r7, #5]
	handle_error(error);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fe fb14 	bl	8001398 <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8002d70:	bf00      	nop
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8002d7e:	bf00      	nop
 8002d80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d84:	481c      	ldr	r0, [pc, #112]	; (8002df8 <create_pmt_packet+0x80>)
 8002d86:	f007 fc85 	bl	800a694 <HAL_GPIO_ReadPin>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f7      	bne.n	8002d80 <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8002d90:	1d3b      	adds	r3, r7, #4
 8002d92:	4618      	mov	r0, r3
 8002d94:	f001 faa8 	bl	80042e8 <get_uptime>
	sample_pmt_spi(pmt_spi);
 8002d98:	f107 0308 	add.w	r3, r7, #8
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 fad9 	bl	8003354 <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 8002da2:	23bb      	movs	r3, #187	; 0xbb
 8002da4:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 8002da6:	23bb      	movs	r3, #187	; 0xbb
 8002da8:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8002daa:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <create_pmt_packet+0x84>)
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	0a1b      	lsrs	r3, r3, #8
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 8002db6:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <create_pmt_packet+0x84>)
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 8002dbe:	7a3b      	ldrb	r3, [r7, #8]
 8002dc0:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 8002dc2:	7a7b      	ldrb	r3, [r7, #9]
 8002dc4:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 8002dc6:	793b      	ldrb	r3, [r7, #4]
 8002dc8:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 8002dca:	797b      	ldrb	r3, [r7, #5]
 8002dcc:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 8002dce:	79bb      	ldrb	r3, [r7, #6]
 8002dd0:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 8002dd6:	f107 010c 	add.w	r1, r7, #12
 8002dda:	2364      	movs	r3, #100	; 0x64
 8002ddc:	220a      	movs	r2, #10
 8002dde:	4808      	ldr	r0, [pc, #32]	; (8002e00 <create_pmt_packet+0x88>)
 8002de0:	f010 fab4 	bl	801334c <HAL_UART_Transmit>

	pmt_seq++;
 8002de4:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <create_pmt_packet+0x84>)
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	3301      	adds	r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	4b03      	ldr	r3, [pc, #12]	; (8002dfc <create_pmt_packet+0x84>)
 8002dee:	801a      	strh	r2, [r3, #0]
}
 8002df0:	bf00      	nop
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	58020000 	.word	0x58020000
 8002dfc:	24001b22 	.word	0x24001b22
 8002e00:	24001e7c 	.word	0x24001e7c

08002e04 <create_erpa_packet>:


void create_erpa_packet() {
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8002e0a:	bf00      	nop
 8002e0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e10:	4828      	ldr	r0, [pc, #160]	; (8002eb4 <create_erpa_packet+0xb0>)
 8002e12:	f007 fc3f 	bl	800a694 <HAL_GPIO_ReadPin>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1f7      	bne.n	8002e0c <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 8002e1c:	23ff      	movs	r3, #255	; 0xff
 8002e1e:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 8002e20:	1d3b      	adds	r3, r7, #4
 8002e22:	4618      	mov	r0, r3
 8002e24:	f001 fa60 	bl	80042e8 <get_uptime>
	sweep_step = get_current_step();
 8002e28:	f7ff fed6 	bl	8002bd8 <get_current_step>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 8002e30:	f107 030c 	add.w	r3, r7, #12
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 faad 	bl	8003394 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8002e3a:	f107 0308 	add.w	r3, r7, #8
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 fac8 	bl	80033d4 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 8002e44:	23aa      	movs	r3, #170	; 0xaa
 8002e46:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 8002e48:	23aa      	movs	r3, #170	; 0xaa
 8002e4a:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8002e4c:	4b1a      	ldr	r3, [pc, #104]	; (8002eb8 <create_erpa_packet+0xb4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	0c1b      	lsrs	r3, r3, #16
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 8002e56:	4b18      	ldr	r3, [pc, #96]	; (8002eb8 <create_erpa_packet+0xb4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	0a1b      	lsrs	r3, r3, #8
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 8002e60:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <create_erpa_packet+0xb4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 8002e68:	7ffb      	ldrb	r3, [r7, #31]
 8002e6a:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002e6c:	893b      	ldrh	r3, [r7, #8]
 8002e6e:	0a1b      	lsrs	r3, r3, #8
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002e76:	893b      	ldrh	r3, [r7, #8]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8002e7c:	7b3b      	ldrb	r3, [r7, #12]
 8002e7e:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8002e80:	7b7b      	ldrb	r3, [r7, #13]
 8002e82:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 8002e84:	793b      	ldrb	r3, [r7, #4]
 8002e86:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 8002e88:	797b      	ldrb	r3, [r7, #5]
 8002e8a:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 8002e8c:	79bb      	ldrb	r3, [r7, #6]
 8002e8e:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 8002e94:	f107 0110 	add.w	r1, r7, #16
 8002e98:	2364      	movs	r3, #100	; 0x64
 8002e9a:	220e      	movs	r2, #14
 8002e9c:	4807      	ldr	r0, [pc, #28]	; (8002ebc <create_erpa_packet+0xb8>)
 8002e9e:	f010 fa55 	bl	801334c <HAL_UART_Transmit>

	erpa_seq++;
 8002ea2:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <create_erpa_packet+0xb4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	4a03      	ldr	r2, [pc, #12]	; (8002eb8 <create_erpa_packet+0xb4>)
 8002eaa:	6013      	str	r3, [r2, #0]
}
 8002eac:	bf00      	nop
 8002eae:	3720      	adds	r7, #32
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	58020400 	.word	0x58020400
 8002eb8:	24001b24 	.word	0x24001b24
 8002ebc:	24001e7c 	.word	0x24001e7c

08002ec0 <create_hk_packet>:


void create_hk_packet() {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b094      	sub	sp, #80	; 0x50
 8002ec4:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8002ec6:	1d3b      	adds	r3, r7, #4
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f001 fa0d 	bl	80042e8 <get_uptime>
	get_timestamp(timestamp);
 8002ece:	f107 0308 	add.w	r3, r7, #8
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f001 fa58 	bl	8004388 <get_timestamp>
	rail_monitor_ptr = get_rail_monitor();
 8002ed8:	f001 fdf0 	bl	8004abc <get_rail_monitor>
 8002edc:	64f8      	str	r0, [r7, #76]	; 0x4c


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8002ede:	23cc      	movs	r3, #204	; 0xcc
 8002ee0:	753b      	strb	r3, [r7, #20]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8002ee2:	23cc      	movs	r3, #204	; 0xcc
 8002ee4:	757b      	strb	r3, [r7, #21]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8002ee6:	4b9b      	ldr	r3, [pc, #620]	; (8003154 <create_hk_packet+0x294>)
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	0a1b      	lsrs	r3, r3, #8
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	75bb      	strb	r3, [r7, #22]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8002ef2:	4b98      	ldr	r3, [pc, #608]	; (8003154 <create_hk_packet+0x294>)
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	75fb      	strb	r3, [r7, #23]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8002efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002efc:	889b      	ldrh	r3, [r3, #4]
 8002efe:	0a1b      	lsrs	r3, r3, #8
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	763b      	strb	r3, [r7, #24]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 8002f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f08:	889b      	ldrh	r3, [r3, #4]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	767b      	strb	r3, [r7, #25]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8002f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f10:	330a      	adds	r3, #10
 8002f12:	889b      	ldrh	r3, [r3, #4]
 8002f14:	0a1b      	lsrs	r3, r3, #8
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	76bb      	strb	r3, [r7, #26]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8002f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f1e:	330a      	adds	r3, #10
 8002f20:	889b      	ldrh	r3, [r3, #4]
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	76fb      	strb	r3, [r7, #27]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8002f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f28:	3314      	adds	r3, #20
 8002f2a:	889b      	ldrh	r3, [r3, #4]
 8002f2c:	0a1b      	lsrs	r3, r3, #8
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	773b      	strb	r3, [r7, #28]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8002f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f36:	3314      	adds	r3, #20
 8002f38:	889b      	ldrh	r3, [r3, #4]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	777b      	strb	r3, [r7, #29]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f40:	331e      	adds	r3, #30
 8002f42:	889b      	ldrh	r3, [r3, #4]
 8002f44:	0a1b      	lsrs	r3, r3, #8
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	77bb      	strb	r3, [r7, #30]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 8002f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f4e:	331e      	adds	r3, #30
 8002f50:	889b      	ldrh	r3, [r3, #4]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	77fb      	strb	r3, [r7, #31]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 8002f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f58:	3328      	adds	r3, #40	; 0x28
 8002f5a:	889b      	ldrh	r3, [r3, #4]
 8002f5c:	0a1b      	lsrs	r3, r3, #8
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 8002f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f68:	3328      	adds	r3, #40	; 0x28
 8002f6a:	889b      	ldrh	r3, [r3, #4]
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 8002f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f74:	3332      	adds	r3, #50	; 0x32
 8002f76:	889b      	ldrh	r3, [r3, #4]
 8002f78:	0a1b      	lsrs	r3, r3, #8
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 8002f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f84:	3332      	adds	r3, #50	; 0x32
 8002f86:	889b      	ldrh	r3, [r3, #4]
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8002f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f90:	333c      	adds	r3, #60	; 0x3c
 8002f92:	889b      	ldrh	r3, [r3, #4]
 8002f94:	0a1b      	lsrs	r3, r3, #8
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8002f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa0:	333c      	adds	r3, #60	; 0x3c
 8002fa2:	889b      	ldrh	r3, [r3, #4]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8002faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fac:	3346      	adds	r3, #70	; 0x46
 8002fae:	889b      	ldrh	r3, [r3, #4]
 8002fb0:	0a1b      	lsrs	r3, r3, #8
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8002fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fbc:	3346      	adds	r3, #70	; 0x46
 8002fbe:	889b      	ldrh	r3, [r3, #4]
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8002fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc8:	3350      	adds	r3, #80	; 0x50
 8002fca:	889b      	ldrh	r3, [r3, #4]
 8002fcc:	0a1b      	lsrs	r3, r3, #8
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8002fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd8:	3350      	adds	r3, #80	; 0x50
 8002fda:	889b      	ldrh	r3, [r3, #4]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8002fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe4:	335a      	adds	r3, #90	; 0x5a
 8002fe6:	889b      	ldrh	r3, [r3, #4]
 8002fe8:	0a1b      	lsrs	r3, r3, #8
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8002ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff4:	335a      	adds	r3, #90	; 0x5a
 8002ff6:	889b      	ldrh	r3, [r3, #4]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8002ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003000:	3364      	adds	r3, #100	; 0x64
 8003002:	889b      	ldrh	r3, [r3, #4]
 8003004:	0a1b      	lsrs	r3, r3, #8
 8003006:	b29b      	uxth	r3, r3
 8003008:	b2db      	uxtb	r3, r3
 800300a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 800300e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003010:	3364      	adds	r3, #100	; 0x64
 8003012:	889b      	ldrh	r3, [r3, #4]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 800301a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800301c:	336e      	adds	r3, #110	; 0x6e
 800301e:	889b      	ldrh	r3, [r3, #4]
 8003020:	0a1b      	lsrs	r3, r3, #8
 8003022:	b29b      	uxth	r3, r3
 8003024:	b2db      	uxtb	r3, r3
 8003026:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 800302a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800302c:	336e      	adds	r3, #110	; 0x6e
 800302e:	889b      	ldrh	r3, [r3, #4]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 8003036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003038:	3378      	adds	r3, #120	; 0x78
 800303a:	889b      	ldrh	r3, [r3, #4]
 800303c:	0a1b      	lsrs	r3, r3, #8
 800303e:	b29b      	uxth	r3, r3
 8003040:	b2db      	uxtb	r3, r3
 8003042:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 8003046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003048:	3378      	adds	r3, #120	; 0x78
 800304a:	889b      	ldrh	r3, [r3, #4]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 8003052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003054:	3382      	adds	r3, #130	; 0x82
 8003056:	889b      	ldrh	r3, [r3, #4]
 8003058:	0a1b      	lsrs	r3, r3, #8
 800305a:	b29b      	uxth	r3, r3
 800305c:	b2db      	uxtb	r3, r3
 800305e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 8003062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003064:	3382      	adds	r3, #130	; 0x82
 8003066:	889b      	ldrh	r3, [r3, #4]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 800306e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003070:	338c      	adds	r3, #140	; 0x8c
 8003072:	889b      	ldrh	r3, [r3, #4]
 8003074:	0a1b      	lsrs	r3, r3, #8
 8003076:	b29b      	uxth	r3, r3
 8003078:	b2db      	uxtb	r3, r3
 800307a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 800307e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003080:	338c      	adds	r3, #140	; 0x8c
 8003082:	889b      	ldrh	r3, [r3, #4]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 800308a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800308c:	3396      	adds	r3, #150	; 0x96
 800308e:	889b      	ldrh	r3, [r3, #4]
 8003090:	0a1b      	lsrs	r3, r3, #8
 8003092:	b29b      	uxth	r3, r3
 8003094:	b2db      	uxtb	r3, r3
 8003096:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 800309a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309c:	3396      	adds	r3, #150	; 0x96
 800309e:	889b      	ldrh	r3, [r3, #4]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 80030a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a8:	33a0      	adds	r3, #160	; 0xa0
 80030aa:	889b      	ldrh	r3, [r3, #4]
 80030ac:	0a1b      	lsrs	r3, r3, #8
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 80030b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b8:	33a0      	adds	r3, #160	; 0xa0
 80030ba:	889b      	ldrh	r3, [r3, #4]
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 80030c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c4:	33aa      	adds	r3, #170	; 0xaa
 80030c6:	889b      	ldrh	r3, [r3, #4]
 80030c8:	0a1b      	lsrs	r3, r3, #8
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 80030d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d4:	33aa      	adds	r3, #170	; 0xaa
 80030d6:	889b      	ldrh	r3, [r3, #4]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[40] = timestamp[0];
 80030de:	7a3b      	ldrb	r3, [r7, #8]
 80030e0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[41] = timestamp[1];
 80030e4:	7a7b      	ldrb	r3, [r7, #9]
 80030e6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[42] = timestamp[2];
 80030ea:	7abb      	ldrb	r3, [r7, #10]
 80030ec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[43] = timestamp[3];
 80030f0:	7afb      	ldrb	r3, [r7, #11]
 80030f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[44] = timestamp[4];
 80030f6:	7b3b      	ldrb	r3, [r7, #12]
 80030f8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[45] = timestamp[5];
 80030fc:	7b7b      	ldrb	r3, [r7, #13]
 80030fe:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	buffer[46] = timestamp[6];
 8003102:	7bbb      	ldrb	r3, [r7, #14]
 8003104:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	buffer[47] = timestamp[7];
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	buffer[48] = timestamp[8];
 800310e:	7c3b      	ldrb	r3, [r7, #16]
 8003110:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	buffer[49] = timestamp[9];
 8003114:	7c7b      	ldrb	r3, [r7, #17]
 8003116:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	buffer[50] = uptime[0];
 800311a:	793b      	ldrb	r3, [r7, #4]
 800311c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	buffer[51] = uptime[1];
 8003120:	797b      	ldrb	r3, [r7, #5]
 8003122:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	buffer[52] = uptime[2];
 8003126:	79bb      	ldrb	r3, [r7, #6]
 8003128:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	buffer[53] = uptime[3];
 800312c:	79fb      	ldrb	r3, [r7, #7]
 800312e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 8003132:	f107 0114 	add.w	r1, r7, #20
 8003136:	2364      	movs	r3, #100	; 0x64
 8003138:	2236      	movs	r2, #54	; 0x36
 800313a:	4807      	ldr	r0, [pc, #28]	; (8003158 <create_hk_packet+0x298>)
 800313c:	f010 f906 	bl	801334c <HAL_UART_Transmit>

	hk_seq++;
 8003140:	4b04      	ldr	r3, [pc, #16]	; (8003154 <create_hk_packet+0x294>)
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	3301      	adds	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	4b02      	ldr	r3, [pc, #8]	; (8003154 <create_hk_packet+0x294>)
 800314a:	801a      	strh	r2, [r3, #0]
}
 800314c:	bf00      	nop
 800314e:	3750      	adds	r7, #80	; 0x50
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	24001b28 	.word	0x24001b28
 8003158:	24001e7c 	.word	0x24001e7c

0800315c <reset_packet_sequence_numbers>:

void reset_packet_sequence_numbers() {
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 8003160:	4b06      	ldr	r3, [pc, #24]	; (800317c <reset_packet_sequence_numbers+0x20>)
 8003162:	2200      	movs	r2, #0
 8003164:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 8003166:	4b06      	ldr	r3, [pc, #24]	; (8003180 <reset_packet_sequence_numbers+0x24>)
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <reset_packet_sequence_numbers+0x28>)
 800316e:	2200      	movs	r2, #0
 8003170:	801a      	strh	r2, [r3, #0]
}
 8003172:	bf00      	nop
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	24001b22 	.word	0x24001b22
 8003180:	24001b24 	.word	0x24001b24
 8003184:	24001b28 	.word	0x24001b28

08003188 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800318e:	1d3b      	adds	r3, r7, #4
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	60da      	str	r2, [r3, #12]
 800319a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800319c:	2300      	movs	r3, #0
 800319e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80031a0:	4b26      	ldr	r3, [pc, #152]	; (800323c <MX_RTC_Init+0xb4>)
 80031a2:	4a27      	ldr	r2, [pc, #156]	; (8003240 <MX_RTC_Init+0xb8>)
 80031a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80031a6:	4b25      	ldr	r3, [pc, #148]	; (800323c <MX_RTC_Init+0xb4>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 80031ac:	4b23      	ldr	r3, [pc, #140]	; (800323c <MX_RTC_Init+0xb4>)
 80031ae:	2263      	movs	r2, #99	; 0x63
 80031b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 80031b2:	4b22      	ldr	r3, [pc, #136]	; (800323c <MX_RTC_Init+0xb4>)
 80031b4:	f242 720f 	movw	r2, #9999	; 0x270f
 80031b8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80031ba:	4b20      	ldr	r3, [pc, #128]	; (800323c <MX_RTC_Init+0xb4>)
 80031bc:	2200      	movs	r2, #0
 80031be:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80031c0:	4b1e      	ldr	r3, [pc, #120]	; (800323c <MX_RTC_Init+0xb4>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80031c6:	4b1d      	ldr	r3, [pc, #116]	; (800323c <MX_RTC_Init+0xb4>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80031cc:	4b1b      	ldr	r3, [pc, #108]	; (800323c <MX_RTC_Init+0xb4>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80031d2:	481a      	ldr	r0, [pc, #104]	; (800323c <MX_RTC_Init+0xb4>)
 80031d4:	f00d fba0 	bl	8010918 <HAL_RTC_Init>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80031de:	f7ff fdbd 	bl	8002d5c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80031e6:	2300      	movs	r3, #0
 80031e8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80031ee:	2300      	movs	r3, #0
 80031f0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80031f6:	1d3b      	adds	r3, r7, #4
 80031f8:	2201      	movs	r2, #1
 80031fa:	4619      	mov	r1, r3
 80031fc:	480f      	ldr	r0, [pc, #60]	; (800323c <MX_RTC_Init+0xb4>)
 80031fe:	f00d fc0d 	bl	8010a1c <HAL_RTC_SetTime>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003208:	f7ff fda8 	bl	8002d5c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800320c:	2301      	movs	r3, #1
 800320e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003210:	2301      	movs	r3, #1
 8003212:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003214:	2301      	movs	r3, #1
 8003216:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003218:	2300      	movs	r3, #0
 800321a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800321c:	463b      	mov	r3, r7
 800321e:	2201      	movs	r2, #1
 8003220:	4619      	mov	r1, r3
 8003222:	4806      	ldr	r0, [pc, #24]	; (800323c <MX_RTC_Init+0xb4>)
 8003224:	f00d fcf4 	bl	8010c10 <HAL_RTC_SetDate>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800322e:	f7ff fd95 	bl	8002d5c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003232:	bf00      	nop
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	24001b2c 	.word	0x24001b2c
 8003240:	58004000 	.word	0x58004000

08003244 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b0b2      	sub	sp, #200	; 0xc8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800324c:	f107 0308 	add.w	r3, r7, #8
 8003250:	22c0      	movs	r2, #192	; 0xc0
 8003252:	2100      	movs	r1, #0
 8003254:	4618      	mov	r0, r3
 8003256:	f016 f8a1 	bl	801939c <memset>
  if(rtcHandle->Instance==RTC)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a10      	ldr	r2, [pc, #64]	; (80032a0 <HAL_RTC_MspInit+0x5c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d118      	bne.n	8003296 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003264:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003268:	f04f 0300 	mov.w	r3, #0
 800326c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003270:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <HAL_RTC_MspInit+0x60>)
 8003272:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003276:	f107 0308 	add.w	r3, r7, #8
 800327a:	4618      	mov	r0, r3
 800327c:	f00a fe4e 	bl	800df1c <HAL_RCCEx_PeriphCLKConfig>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003286:	f7ff fd69 	bl	8002d5c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800328a:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <HAL_RTC_MspInit+0x64>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	4a06      	ldr	r2, [pc, #24]	; (80032a8 <HAL_RTC_MspInit+0x64>)
 8003290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003294:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003296:	bf00      	nop
 8003298:	37c8      	adds	r7, #200	; 0xc8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	58004000 	.word	0x58004000
 80032a4:	00019300 	.word	0x00019300
 80032a8:	58024400 	.word	0x58024400

080032ac <init_adc_dma>:
static uint16_t erpa_spi_raw_data[1];
static uint16_t pmt_spi_raw_data[1];
static uint8_t raw_i2c[2];

// Public Functions
uint8_t init_adc_dma() {
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80032b6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80032ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032be:	481f      	ldr	r0, [pc, #124]	; (800333c <init_adc_dma+0x90>)
 80032c0:	f003 f868 	bl	8006394 <HAL_ADCEx_Calibration_Start>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80032ca:	f7ff fd47 	bl	8002d5c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80032ce:	220b      	movs	r2, #11
 80032d0:	491b      	ldr	r1, [pc, #108]	; (8003340 <init_adc_dma+0x94>)
 80032d2:	481a      	ldr	r0, [pc, #104]	; (800333c <init_adc_dma+0x90>)
 80032d4:	f002 f93c 	bl	8005550 <HAL_ADC_Start_DMA>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80032de:	f7ff fd3d 	bl	8002d5c <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80032e2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80032e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032ea:	4816      	ldr	r0, [pc, #88]	; (8003344 <init_adc_dma+0x98>)
 80032ec:	f003 f852 	bl	8006394 <HAL_ADCEx_Calibration_Start>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80032f6:	f7ff fd31 	bl	8002d5c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80032fa:	2204      	movs	r2, #4
 80032fc:	4912      	ldr	r1, [pc, #72]	; (8003348 <init_adc_dma+0x9c>)
 80032fe:	4811      	ldr	r0, [pc, #68]	; (8003344 <init_adc_dma+0x98>)
 8003300:	f002 f926 	bl	8005550 <HAL_ADC_Start_DMA>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800330a:	f7ff fd27 	bl	8002d5c <Error_Handler>
	}
	hspi2.Instance->CR1 |= 1 << 10;
 800330e:	4b0f      	ldr	r3, [pc, #60]	; (800334c <init_adc_dma+0xa0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4b0d      	ldr	r3, [pc, #52]	; (800334c <init_adc_dma+0xa0>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800331c:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 800331e:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <init_adc_dma+0xa4>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	4b0a      	ldr	r3, [pc, #40]	; (8003350 <init_adc_dma+0xa4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800332c:	601a      	str	r2, [r3, #0]


	status = 1;
 800332e:	2301      	movs	r3, #1
 8003330:	71fb      	strb	r3, [r7, #7]

	return status;
 8003332:	79fb      	ldrb	r3, [r7, #7]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	2400015c 	.word	0x2400015c
 8003340:	24001b60 	.word	0x24001b60
 8003344:	240001c0 	.word	0x240001c0
 8003348:	24001b80 	.word	0x24001b80
 800334c:	24001c1c 	.word	0x24001c1c
 8003350:	24001b94 	.word	0x24001b94

08003354 <sample_pmt_spi>:
//{
//	HAL_SPI_Receive_IT(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
//
//}

void sample_pmt_spi(uint8_t *buffer) {
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 800335c:	2201      	movs	r2, #1
 800335e:	490b      	ldr	r1, [pc, #44]	; (800338c <sample_pmt_spi+0x38>)
 8003360:	480b      	ldr	r0, [pc, #44]	; (8003390 <sample_pmt_spi+0x3c>)
 8003362:	f00d ff1f 	bl	80111a4 <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 8003366:	4b09      	ldr	r3, [pc, #36]	; (800338c <sample_pmt_spi+0x38>)
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	0a1b      	lsrs	r3, r3, #8
 800336c:	b29b      	uxth	r3, r3
 800336e:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 8003370:	4b06      	ldr	r3, [pc, #24]	; (800338c <sample_pmt_spi+0x38>)
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	7bfa      	ldrb	r2, [r7, #15]
 800337a:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3301      	adds	r3, #1
 8003380:	7bba      	ldrb	r2, [r7, #14]
 8003382:	701a      	strb	r2, [r3, #0]
}
 8003384:	bf00      	nop
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	24001b8c 	.word	0x24001b8c
 8003390:	24001b94 	.word	0x24001b94

08003394 <sample_erpa_spi>:


void sample_erpa_spi(uint8_t *buffer) {
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 800339c:	2201      	movs	r2, #1
 800339e:	490b      	ldr	r1, [pc, #44]	; (80033cc <sample_erpa_spi+0x38>)
 80033a0:	480b      	ldr	r0, [pc, #44]	; (80033d0 <sample_erpa_spi+0x3c>)
 80033a2:	f00d feff 	bl	80111a4 <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 80033a6:	4b09      	ldr	r3, [pc, #36]	; (80033cc <sample_erpa_spi+0x38>)
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	0a1b      	lsrs	r3, r3, #8
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 80033b0:	4b06      	ldr	r3, [pc, #24]	; (80033cc <sample_erpa_spi+0x38>)
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	7bfa      	ldrb	r2, [r7, #15]
 80033ba:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3301      	adds	r3, #1
 80033c0:	7bba      	ldrb	r2, [r7, #14]
 80033c2:	701a      	strb	r2, [r3, #0]
}
 80033c4:	bf00      	nop
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	24001b88 	.word	0x24001b88
 80033d0:	24001c1c 	.word	0x24001c1c

080033d4 <sample_erpa_adc>:




void sample_erpa_adc(uint16_t *buffer) {
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <sample_erpa_adc+0x20>)
 80033de:	885b      	ldrh	r3, [r3, #2]
 80033e0:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	89fa      	ldrh	r2, [r7, #14]
 80033e6:	801a      	strh	r2, [r3, #0]
}
 80033e8:	bf00      	nop
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	24001b60 	.word	0x24001b60

080033f8 <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8003400:	2390      	movs	r3, #144	; 0x90
 8003402:	4618      	mov	r0, r3
 8003404:	f000 f8a2 	bl	800354c <poll_i2c_sensor>
 8003408:	4603      	mov	r3, r0
 800340a:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 800340c:	2394      	movs	r3, #148	; 0x94
 800340e:	4618      	mov	r0, r3
 8003410:	f000 f89c 	bl	800354c <poll_i2c_sensor>
 8003414:	4603      	mov	r3, r0
 8003416:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8003418:	2392      	movs	r3, #146	; 0x92
 800341a:	4618      	mov	r0, r3
 800341c:	f000 f896 	bl	800354c <poll_i2c_sensor>
 8003420:	4603      	mov	r3, r0
 8003422:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8003424:	2396      	movs	r3, #150	; 0x96
 8003426:	4618      	mov	r0, r3
 8003428:	f000 f890 	bl	800354c <poll_i2c_sensor>
 800342c:	4603      	mov	r3, r0
 800342e:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	89fa      	ldrh	r2, [r7, #14]
 8003434:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3302      	adds	r3, #2
 800343a:	89ba      	ldrh	r2, [r7, #12]
 800343c:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3304      	adds	r3, #4
 8003442:	897a      	ldrh	r2, [r7, #10]
 8003444:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3306      	adds	r3, #6
 800344a:	893a      	ldrh	r2, [r7, #8]
 800344c:	801a      	strh	r2, [r3, #0]
}
 800344e:	bf00      	nop
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 8003458:	b480      	push	{r7}
 800345a:	b089      	sub	sp, #36	; 0x24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8003460:	4b25      	ldr	r3, [pc, #148]	; (80034f8 <sample_hk_adc1+0xa0>)
 8003462:	8a9b      	ldrh	r3, [r3, #20]
 8003464:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8003466:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <sample_hk_adc1+0xa0>)
 8003468:	8a1b      	ldrh	r3, [r3, #16]
 800346a:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 800346c:	4b22      	ldr	r3, [pc, #136]	; (80034f8 <sample_hk_adc1+0xa0>)
 800346e:	899b      	ldrh	r3, [r3, #12]
 8003470:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8003472:	4b21      	ldr	r3, [pc, #132]	; (80034f8 <sample_hk_adc1+0xa0>)
 8003474:	8a5b      	ldrh	r3, [r3, #18]
 8003476:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8003478:	4b1f      	ldr	r3, [pc, #124]	; (80034f8 <sample_hk_adc1+0xa0>)
 800347a:	889b      	ldrh	r3, [r3, #4]
 800347c:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 800347e:	4b1e      	ldr	r3, [pc, #120]	; (80034f8 <sample_hk_adc1+0xa0>)
 8003480:	88db      	ldrh	r3, [r3, #6]
 8003482:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8003484:	4b1c      	ldr	r3, [pc, #112]	; (80034f8 <sample_hk_adc1+0xa0>)
 8003486:	89db      	ldrh	r3, [r3, #14]
 8003488:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 800348a:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <sample_hk_adc1+0xa0>)
 800348c:	891b      	ldrh	r3, [r3, #8]
 800348e:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8003490:	4b19      	ldr	r3, [pc, #100]	; (80034f8 <sample_hk_adc1+0xa0>)
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8003496:	4b18      	ldr	r3, [pc, #96]	; (80034f8 <sample_hk_adc1+0xa0>)
 8003498:	895b      	ldrh	r3, [r3, #10]
 800349a:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	8bfa      	ldrh	r2, [r7, #30]
 80034a0:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3302      	adds	r3, #2
 80034a6:	8bba      	ldrh	r2, [r7, #28]
 80034a8:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3304      	adds	r3, #4
 80034ae:	8b7a      	ldrh	r2, [r7, #26]
 80034b0:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3306      	adds	r3, #6
 80034b6:	8b3a      	ldrh	r2, [r7, #24]
 80034b8:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3308      	adds	r3, #8
 80034be:	8afa      	ldrh	r2, [r7, #22]
 80034c0:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	330a      	adds	r3, #10
 80034c6:	8aba      	ldrh	r2, [r7, #20]
 80034c8:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	330c      	adds	r3, #12
 80034ce:	8a7a      	ldrh	r2, [r7, #18]
 80034d0:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	330e      	adds	r3, #14
 80034d6:	8a3a      	ldrh	r2, [r7, #16]
 80034d8:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3310      	adds	r3, #16
 80034de:	89fa      	ldrh	r2, [r7, #14]
 80034e0:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3312      	adds	r3, #18
 80034e6:	89ba      	ldrh	r2, [r7, #12]
 80034e8:	801a      	strh	r2, [r3, #0]
}
 80034ea:	bf00      	nop
 80034ec:	3724      	adds	r7, #36	; 0x24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	24001b60 	.word	0x24001b60

080034fc <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8003504:	4b10      	ldr	r3, [pc, #64]	; (8003548 <sample_hk_adc3+0x4c>)
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 800350a:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <sample_hk_adc3+0x4c>)
 800350c:	885b      	ldrh	r3, [r3, #2]
 800350e:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8003510:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <sample_hk_adc3+0x4c>)
 8003512:	889b      	ldrh	r3, [r3, #4]
 8003514:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8003516:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <sample_hk_adc3+0x4c>)
 8003518:	88db      	ldrh	r3, [r3, #6]
 800351a:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	89fa      	ldrh	r2, [r7, #14]
 8003520:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3302      	adds	r3, #2
 8003526:	89ba      	ldrh	r2, [r7, #12]
 8003528:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3304      	adds	r3, #4
 800352e:	897a      	ldrh	r2, [r7, #10]
 8003530:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3306      	adds	r3, #6
 8003536:	893a      	ldrh	r2, [r7, #8]
 8003538:	801a      	strh	r2, [r3, #0]
}
 800353a:	bf00      	nop
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	24001b80 	.word	0x24001b80

0800354c <poll_i2c_sensor>:


int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 8003556:	2200      	movs	r2, #0
 8003558:	4b20      	ldr	r3, [pc, #128]	; (80035dc <poll_i2c_sensor+0x90>)
 800355a:	701a      	strb	r2, [r3, #0]


	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	b299      	uxth	r1, r3
 8003560:	2301      	movs	r3, #1
 8003562:	4a1e      	ldr	r2, [pc, #120]	; (80035dc <poll_i2c_sensor+0x90>)
 8003564:	481e      	ldr	r0, [pc, #120]	; (80035e0 <poll_i2c_sensor+0x94>)
 8003566:	f007 f963 	bl	800a830 <HAL_I2C_Master_Transmit_DMA>
 800356a:	4603      	mov	r3, r0
 800356c:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 800356e:	7b7b      	ldrb	r3, [r7, #13]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <poll_i2c_sensor+0x30>
		printf("I2C TX Error\n");
 8003574:	481b      	ldr	r0, [pc, #108]	; (80035e4 <poll_i2c_sensor+0x98>)
 8003576:	f015 ff87 	bl	8019488 <puts>
 800357a:	e028      	b.n	80035ce <poll_i2c_sensor+0x82>
	} else {
		/* Read 2 bytes from the temperature register */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 800357c:	bf00      	nop
 800357e:	4818      	ldr	r0, [pc, #96]	; (80035e0 <poll_i2c_sensor+0x94>)
 8003580:	f007 fc3d 	bl	800adfe <HAL_I2C_GetState>
 8003584:	4603      	mov	r3, r0
 8003586:	2b20      	cmp	r3, #32
 8003588:	d1f9      	bne.n	800357e <poll_i2c_sensor+0x32>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 800358a:	79fb      	ldrb	r3, [r7, #7]
 800358c:	b299      	uxth	r1, r3
 800358e:	2302      	movs	r3, #2
 8003590:	4a12      	ldr	r2, [pc, #72]	; (80035dc <poll_i2c_sensor+0x90>)
 8003592:	4813      	ldr	r0, [pc, #76]	; (80035e0 <poll_i2c_sensor+0x94>)
 8003594:	f007 fa60 	bl	800aa58 <HAL_I2C_Master_Receive_DMA>
 8003598:	4603      	mov	r3, r0
 800359a:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 800359c:	7b7b      	ldrb	r3, [r7, #13]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 80035a2:	4811      	ldr	r0, [pc, #68]	; (80035e8 <poll_i2c_sensor+0x9c>)
 80035a4:	f015 ff70 	bl	8019488 <puts>
 80035a8:	e011      	b.n	80035ce <poll_i2c_sensor+0x82>
		} else {
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 80035aa:	bf00      	nop
 80035ac:	480c      	ldr	r0, [pc, #48]	; (80035e0 <poll_i2c_sensor+0x94>)
 80035ae:	f007 fc26 	bl	800adfe <HAL_I2C_GetState>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d1f9      	bne.n	80035ac <poll_i2c_sensor+0x60>
			output = (int16_t) (raw_i2c[0] << 8);
 80035b8:	4b08      	ldr	r3, [pc, #32]	; (80035dc <poll_i2c_sensor+0x90>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	021b      	lsls	r3, r3, #8
 80035be:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 80035c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035c4:	4a05      	ldr	r2, [pc, #20]	; (80035dc <poll_i2c_sensor+0x90>)
 80035c6:	7852      	ldrb	r2, [r2, #1]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	10db      	asrs	r3, r3, #3
 80035cc:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 80035ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	24001b90 	.word	0x24001b90
 80035e0:	24001974 	.word	0x24001974
 80035e4:	08019ff0 	.word	0x08019ff0
 80035e8:	0801a000 	.word	0x0801a000

080035ec <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80035f0:	4b28      	ldr	r3, [pc, #160]	; (8003694 <MX_SPI1_Init+0xa8>)
 80035f2:	4a29      	ldr	r2, [pc, #164]	; (8003698 <MX_SPI1_Init+0xac>)
 80035f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80035f6:	4b27      	ldr	r3, [pc, #156]	; (8003694 <MX_SPI1_Init+0xa8>)
 80035f8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80035fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80035fe:	4b25      	ldr	r3, [pc, #148]	; (8003694 <MX_SPI1_Init+0xa8>)
 8003600:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003604:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003606:	4b23      	ldr	r3, [pc, #140]	; (8003694 <MX_SPI1_Init+0xa8>)
 8003608:	220f      	movs	r2, #15
 800360a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800360c:	4b21      	ldr	r3, [pc, #132]	; (8003694 <MX_SPI1_Init+0xa8>)
 800360e:	2200      	movs	r2, #0
 8003610:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003612:	4b20      	ldr	r3, [pc, #128]	; (8003694 <MX_SPI1_Init+0xa8>)
 8003614:	2200      	movs	r2, #0
 8003616:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003618:	4b1e      	ldr	r3, [pc, #120]	; (8003694 <MX_SPI1_Init+0xa8>)
 800361a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800361e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003620:	4b1c      	ldr	r3, [pc, #112]	; (8003694 <MX_SPI1_Init+0xa8>)
 8003622:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8003626:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003628:	4b1a      	ldr	r3, [pc, #104]	; (8003694 <MX_SPI1_Init+0xa8>)
 800362a:	2200      	movs	r2, #0
 800362c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800362e:	4b19      	ldr	r3, [pc, #100]	; (8003694 <MX_SPI1_Init+0xa8>)
 8003630:	2200      	movs	r2, #0
 8003632:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003634:	4b17      	ldr	r3, [pc, #92]	; (8003694 <MX_SPI1_Init+0xa8>)
 8003636:	2200      	movs	r2, #0
 8003638:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800363a:	4b16      	ldr	r3, [pc, #88]	; (8003694 <MX_SPI1_Init+0xa8>)
 800363c:	2200      	movs	r2, #0
 800363e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003640:	4b14      	ldr	r3, [pc, #80]	; (8003694 <MX_SPI1_Init+0xa8>)
 8003642:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003646:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003648:	4b12      	ldr	r3, [pc, #72]	; (8003694 <MX_SPI1_Init+0xa8>)
 800364a:	2200      	movs	r2, #0
 800364c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800364e:	4b11      	ldr	r3, [pc, #68]	; (8003694 <MX_SPI1_Init+0xa8>)
 8003650:	2200      	movs	r2, #0
 8003652:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003654:	4b0f      	ldr	r3, [pc, #60]	; (8003694 <MX_SPI1_Init+0xa8>)
 8003656:	2200      	movs	r2, #0
 8003658:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800365a:	4b0e      	ldr	r3, [pc, #56]	; (8003694 <MX_SPI1_Init+0xa8>)
 800365c:	2200      	movs	r2, #0
 800365e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003660:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <MX_SPI1_Init+0xa8>)
 8003662:	2200      	movs	r2, #0
 8003664:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003666:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <MX_SPI1_Init+0xa8>)
 8003668:	2200      	movs	r2, #0
 800366a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800366c:	4b09      	ldr	r3, [pc, #36]	; (8003694 <MX_SPI1_Init+0xa8>)
 800366e:	2200      	movs	r2, #0
 8003670:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003672:	4b08      	ldr	r3, [pc, #32]	; (8003694 <MX_SPI1_Init+0xa8>)
 8003674:	2200      	movs	r2, #0
 8003676:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003678:	4b06      	ldr	r3, [pc, #24]	; (8003694 <MX_SPI1_Init+0xa8>)
 800367a:	2200      	movs	r2, #0
 800367c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800367e:	4805      	ldr	r0, [pc, #20]	; (8003694 <MX_SPI1_Init+0xa8>)
 8003680:	f00d fc6c 	bl	8010f5c <HAL_SPI_Init>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800368a:	f7ff fb67 	bl	8002d5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	24001b94 	.word	0x24001b94
 8003698:	40013000 	.word	0x40013000

0800369c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80036a0:	4b28      	ldr	r3, [pc, #160]	; (8003744 <MX_SPI2_Init+0xa8>)
 80036a2:	4a29      	ldr	r2, [pc, #164]	; (8003748 <MX_SPI2_Init+0xac>)
 80036a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80036a6:	4b27      	ldr	r3, [pc, #156]	; (8003744 <MX_SPI2_Init+0xa8>)
 80036a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80036ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80036ae:	4b25      	ldr	r3, [pc, #148]	; (8003744 <MX_SPI2_Init+0xa8>)
 80036b0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80036b4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80036b6:	4b23      	ldr	r3, [pc, #140]	; (8003744 <MX_SPI2_Init+0xa8>)
 80036b8:	220f      	movs	r2, #15
 80036ba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036bc:	4b21      	ldr	r3, [pc, #132]	; (8003744 <MX_SPI2_Init+0xa8>)
 80036be:	2200      	movs	r2, #0
 80036c0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036c2:	4b20      	ldr	r3, [pc, #128]	; (8003744 <MX_SPI2_Init+0xa8>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80036c8:	4b1e      	ldr	r3, [pc, #120]	; (8003744 <MX_SPI2_Init+0xa8>)
 80036ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80036ce:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80036d0:	4b1c      	ldr	r3, [pc, #112]	; (8003744 <MX_SPI2_Init+0xa8>)
 80036d2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80036d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036d8:	4b1a      	ldr	r3, [pc, #104]	; (8003744 <MX_SPI2_Init+0xa8>)
 80036da:	2200      	movs	r2, #0
 80036dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80036de:	4b19      	ldr	r3, [pc, #100]	; (8003744 <MX_SPI2_Init+0xa8>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036e4:	4b17      	ldr	r3, [pc, #92]	; (8003744 <MX_SPI2_Init+0xa8>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80036ea:	4b16      	ldr	r3, [pc, #88]	; (8003744 <MX_SPI2_Init+0xa8>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80036f0:	4b14      	ldr	r3, [pc, #80]	; (8003744 <MX_SPI2_Init+0xa8>)
 80036f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036f6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80036f8:	4b12      	ldr	r3, [pc, #72]	; (8003744 <MX_SPI2_Init+0xa8>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80036fe:	4b11      	ldr	r3, [pc, #68]	; (8003744 <MX_SPI2_Init+0xa8>)
 8003700:	2200      	movs	r2, #0
 8003702:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003704:	4b0f      	ldr	r3, [pc, #60]	; (8003744 <MX_SPI2_Init+0xa8>)
 8003706:	2200      	movs	r2, #0
 8003708:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800370a:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <MX_SPI2_Init+0xa8>)
 800370c:	2200      	movs	r2, #0
 800370e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003710:	4b0c      	ldr	r3, [pc, #48]	; (8003744 <MX_SPI2_Init+0xa8>)
 8003712:	2200      	movs	r2, #0
 8003714:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003716:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <MX_SPI2_Init+0xa8>)
 8003718:	2200      	movs	r2, #0
 800371a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800371c:	4b09      	ldr	r3, [pc, #36]	; (8003744 <MX_SPI2_Init+0xa8>)
 800371e:	2200      	movs	r2, #0
 8003720:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003722:	4b08      	ldr	r3, [pc, #32]	; (8003744 <MX_SPI2_Init+0xa8>)
 8003724:	2200      	movs	r2, #0
 8003726:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003728:	4b06      	ldr	r3, [pc, #24]	; (8003744 <MX_SPI2_Init+0xa8>)
 800372a:	2200      	movs	r2, #0
 800372c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800372e:	4805      	ldr	r0, [pc, #20]	; (8003744 <MX_SPI2_Init+0xa8>)
 8003730:	f00d fc14 	bl	8010f5c <HAL_SPI_Init>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800373a:	f7ff fb0f 	bl	8002d5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800373e:	bf00      	nop
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	24001c1c 	.word	0x24001c1c
 8003748:	40003800 	.word	0x40003800

0800374c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b0bc      	sub	sp, #240	; 0xf0
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003754:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	60da      	str	r2, [r3, #12]
 8003762:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003764:	f107 0318 	add.w	r3, r7, #24
 8003768:	22c0      	movs	r2, #192	; 0xc0
 800376a:	2100      	movs	r1, #0
 800376c:	4618      	mov	r0, r3
 800376e:	f015 fe15 	bl	801939c <memset>
  if(spiHandle->Instance==SPI1)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a83      	ldr	r2, [pc, #524]	; (8003984 <HAL_SPI_MspInit+0x238>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d17c      	bne.n	8003876 <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800377c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003788:	2300      	movs	r3, #0
 800378a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800378c:	f107 0318 	add.w	r3, r7, #24
 8003790:	4618      	mov	r0, r3
 8003792:	f00a fbc3 	bl	800df1c <HAL_RCCEx_PeriphCLKConfig>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800379c:	f7ff fade 	bl	8002d5c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80037a0:	4b79      	ldr	r3, [pc, #484]	; (8003988 <HAL_SPI_MspInit+0x23c>)
 80037a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037a6:	4a78      	ldr	r2, [pc, #480]	; (8003988 <HAL_SPI_MspInit+0x23c>)
 80037a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80037b0:	4b75      	ldr	r3, [pc, #468]	; (8003988 <HAL_SPI_MspInit+0x23c>)
 80037b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037be:	4b72      	ldr	r3, [pc, #456]	; (8003988 <HAL_SPI_MspInit+0x23c>)
 80037c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037c4:	4a70      	ldr	r2, [pc, #448]	; (8003988 <HAL_SPI_MspInit+0x23c>)
 80037c6:	f043 0302 	orr.w	r3, r3, #2
 80037ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037ce:	4b6e      	ldr	r3, [pc, #440]	; (8003988 <HAL_SPI_MspInit+0x23c>)
 80037d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	613b      	str	r3, [r7, #16]
 80037da:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80037dc:	2318      	movs	r3, #24
 80037de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e2:	2302      	movs	r3, #2
 80037e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e8:	2300      	movs	r3, #0
 80037ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ee:	2300      	movs	r3, #0
 80037f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80037f4:	2305      	movs	r3, #5
 80037f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037fa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80037fe:	4619      	mov	r1, r3
 8003800:	4862      	ldr	r0, [pc, #392]	; (800398c <HAL_SPI_MspInit+0x240>)
 8003802:	f006 fd97 	bl	800a334 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8003806:	4b62      	ldr	r3, [pc, #392]	; (8003990 <HAL_SPI_MspInit+0x244>)
 8003808:	4a62      	ldr	r2, [pc, #392]	; (8003994 <HAL_SPI_MspInit+0x248>)
 800380a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800380c:	4b60      	ldr	r3, [pc, #384]	; (8003990 <HAL_SPI_MspInit+0x244>)
 800380e:	2225      	movs	r2, #37	; 0x25
 8003810:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003812:	4b5f      	ldr	r3, [pc, #380]	; (8003990 <HAL_SPI_MspInit+0x244>)
 8003814:	2200      	movs	r2, #0
 8003816:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003818:	4b5d      	ldr	r3, [pc, #372]	; (8003990 <HAL_SPI_MspInit+0x244>)
 800381a:	2200      	movs	r2, #0
 800381c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800381e:	4b5c      	ldr	r3, [pc, #368]	; (8003990 <HAL_SPI_MspInit+0x244>)
 8003820:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003824:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003826:	4b5a      	ldr	r3, [pc, #360]	; (8003990 <HAL_SPI_MspInit+0x244>)
 8003828:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800382c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800382e:	4b58      	ldr	r3, [pc, #352]	; (8003990 <HAL_SPI_MspInit+0x244>)
 8003830:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003834:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003836:	4b56      	ldr	r3, [pc, #344]	; (8003990 <HAL_SPI_MspInit+0x244>)
 8003838:	2200      	movs	r2, #0
 800383a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800383c:	4b54      	ldr	r3, [pc, #336]	; (8003990 <HAL_SPI_MspInit+0x244>)
 800383e:	2200      	movs	r2, #0
 8003840:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003842:	4b53      	ldr	r3, [pc, #332]	; (8003990 <HAL_SPI_MspInit+0x244>)
 8003844:	2200      	movs	r2, #0
 8003846:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003848:	4851      	ldr	r0, [pc, #324]	; (8003990 <HAL_SPI_MspInit+0x244>)
 800384a:	f003 fc43 	bl	80070d4 <HAL_DMA_Init>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8003854:	f7ff fa82 	bl	8002d5c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a4d      	ldr	r2, [pc, #308]	; (8003990 <HAL_SPI_MspInit+0x244>)
 800385c:	67da      	str	r2, [r3, #124]	; 0x7c
 800385e:	4a4c      	ldr	r2, [pc, #304]	; (8003990 <HAL_SPI_MspInit+0x244>)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8003864:	2200      	movs	r2, #0
 8003866:	2105      	movs	r1, #5
 8003868:	2023      	movs	r0, #35	; 0x23
 800386a:	f002 ff8d 	bl	8006788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800386e:	2023      	movs	r0, #35	; 0x23
 8003870:	f002 ffa4 	bl	80067bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003874:	e081      	b.n	800397a <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a47      	ldr	r2, [pc, #284]	; (8003998 <HAL_SPI_MspInit+0x24c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d17c      	bne.n	800397a <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003880:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800388c:	2300      	movs	r3, #0
 800388e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003890:	f107 0318 	add.w	r3, r7, #24
 8003894:	4618      	mov	r0, r3
 8003896:	f00a fb41 	bl	800df1c <HAL_RCCEx_PeriphCLKConfig>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <HAL_SPI_MspInit+0x158>
      Error_Handler();
 80038a0:	f7ff fa5c 	bl	8002d5c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80038a4:	4b38      	ldr	r3, [pc, #224]	; (8003988 <HAL_SPI_MspInit+0x23c>)
 80038a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038aa:	4a37      	ldr	r2, [pc, #220]	; (8003988 <HAL_SPI_MspInit+0x23c>)
 80038ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038b4:	4b34      	ldr	r3, [pc, #208]	; (8003988 <HAL_SPI_MspInit+0x23c>)
 80038b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038c2:	4b31      	ldr	r3, [pc, #196]	; (8003988 <HAL_SPI_MspInit+0x23c>)
 80038c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038c8:	4a2f      	ldr	r2, [pc, #188]	; (8003988 <HAL_SPI_MspInit+0x23c>)
 80038ca:	f043 0302 	orr.w	r3, r3, #2
 80038ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038d2:	4b2d      	ldr	r3, [pc, #180]	; (8003988 <HAL_SPI_MspInit+0x23c>)
 80038d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80038e0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80038e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e8:	2302      	movs	r3, #2
 80038ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f4:	2300      	movs	r3, #0
 80038f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80038fa:	2305      	movs	r3, #5
 80038fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003900:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003904:	4619      	mov	r1, r3
 8003906:	4821      	ldr	r0, [pc, #132]	; (800398c <HAL_SPI_MspInit+0x240>)
 8003908:	f006 fd14 	bl	800a334 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800390c:	4b23      	ldr	r3, [pc, #140]	; (800399c <HAL_SPI_MspInit+0x250>)
 800390e:	4a24      	ldr	r2, [pc, #144]	; (80039a0 <HAL_SPI_MspInit+0x254>)
 8003910:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8003912:	4b22      	ldr	r3, [pc, #136]	; (800399c <HAL_SPI_MspInit+0x250>)
 8003914:	2227      	movs	r2, #39	; 0x27
 8003916:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003918:	4b20      	ldr	r3, [pc, #128]	; (800399c <HAL_SPI_MspInit+0x250>)
 800391a:	2200      	movs	r2, #0
 800391c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800391e:	4b1f      	ldr	r3, [pc, #124]	; (800399c <HAL_SPI_MspInit+0x250>)
 8003920:	2200      	movs	r2, #0
 8003922:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003924:	4b1d      	ldr	r3, [pc, #116]	; (800399c <HAL_SPI_MspInit+0x250>)
 8003926:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800392a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800392c:	4b1b      	ldr	r3, [pc, #108]	; (800399c <HAL_SPI_MspInit+0x250>)
 800392e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003932:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003934:	4b19      	ldr	r3, [pc, #100]	; (800399c <HAL_SPI_MspInit+0x250>)
 8003936:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800393a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800393c:	4b17      	ldr	r3, [pc, #92]	; (800399c <HAL_SPI_MspInit+0x250>)
 800393e:	2200      	movs	r2, #0
 8003940:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003942:	4b16      	ldr	r3, [pc, #88]	; (800399c <HAL_SPI_MspInit+0x250>)
 8003944:	2200      	movs	r2, #0
 8003946:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003948:	4b14      	ldr	r3, [pc, #80]	; (800399c <HAL_SPI_MspInit+0x250>)
 800394a:	2200      	movs	r2, #0
 800394c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800394e:	4813      	ldr	r0, [pc, #76]	; (800399c <HAL_SPI_MspInit+0x250>)
 8003950:	f003 fbc0 	bl	80070d4 <HAL_DMA_Init>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_SPI_MspInit+0x212>
      Error_Handler();
 800395a:	f7ff f9ff 	bl	8002d5c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a0e      	ldr	r2, [pc, #56]	; (800399c <HAL_SPI_MspInit+0x250>)
 8003962:	67da      	str	r2, [r3, #124]	; 0x7c
 8003964:	4a0d      	ldr	r2, [pc, #52]	; (800399c <HAL_SPI_MspInit+0x250>)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800396a:	2200      	movs	r2, #0
 800396c:	2105      	movs	r1, #5
 800396e:	2024      	movs	r0, #36	; 0x24
 8003970:	f002 ff0a 	bl	8006788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003974:	2024      	movs	r0, #36	; 0x24
 8003976:	f002 ff21 	bl	80067bc <HAL_NVIC_EnableIRQ>
}
 800397a:	bf00      	nop
 800397c:	37f0      	adds	r7, #240	; 0xf0
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40013000 	.word	0x40013000
 8003988:	58024400 	.word	0x58024400
 800398c:	58020400 	.word	0x58020400
 8003990:	24001ca4 	.word	0x24001ca4
 8003994:	40020070 	.word	0x40020070
 8003998:	40003800 	.word	0x40003800
 800399c:	24001d1c 	.word	0x24001d1c
 80039a0:	40020058 	.word	0x40020058

080039a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039aa:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <HAL_MspInit+0x38>)
 80039ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039b0:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <HAL_MspInit+0x38>)
 80039b2:	f043 0302 	orr.w	r3, r3, #2
 80039b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80039ba:	4b08      	ldr	r3, [pc, #32]	; (80039dc <HAL_MspInit+0x38>)
 80039bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	607b      	str	r3, [r7, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80039c8:	2200      	movs	r2, #0
 80039ca:	210f      	movs	r1, #15
 80039cc:	f06f 0001 	mvn.w	r0, #1
 80039d0:	f002 feda 	bl	8006788 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039d4:	bf00      	nop
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	58024400 	.word	0x58024400

080039e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b090      	sub	sp, #64	; 0x40
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b0f      	cmp	r3, #15
 80039ec:	d827      	bhi.n	8003a3e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80039ee:	2200      	movs	r2, #0
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	2036      	movs	r0, #54	; 0x36
 80039f4:	f002 fec8 	bl	8006788 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80039f8:	2036      	movs	r0, #54	; 0x36
 80039fa:	f002 fedf 	bl	80067bc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80039fe:	4a29      	ldr	r2, [pc, #164]	; (8003aa4 <HAL_InitTick+0xc4>)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003a04:	4b28      	ldr	r3, [pc, #160]	; (8003aa8 <HAL_InitTick+0xc8>)
 8003a06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a0a:	4a27      	ldr	r2, [pc, #156]	; (8003aa8 <HAL_InitTick+0xc8>)
 8003a0c:	f043 0310 	orr.w	r3, r3, #16
 8003a10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a14:	4b24      	ldr	r3, [pc, #144]	; (8003aa8 <HAL_InitTick+0xc8>)
 8003a16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a1a:	f003 0310 	and.w	r3, r3, #16
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a22:	f107 0210 	add.w	r2, r7, #16
 8003a26:	f107 0314 	add.w	r3, r7, #20
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f00a fa33 	bl	800de98 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a34:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d106      	bne.n	8003a4a <HAL_InitTick+0x6a>
 8003a3c:	e001      	b.n	8003a42 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e02b      	b.n	8003a9a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003a42:	f00a f9fd 	bl	800de40 <HAL_RCC_GetPCLK1Freq>
 8003a46:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003a48:	e004      	b.n	8003a54 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003a4a:	f00a f9f9 	bl	800de40 <HAL_RCC_GetPCLK1Freq>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a56:	4a15      	ldr	r2, [pc, #84]	; (8003aac <HAL_InitTick+0xcc>)
 8003a58:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5c:	0c9b      	lsrs	r3, r3, #18
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003a62:	4b13      	ldr	r3, [pc, #76]	; (8003ab0 <HAL_InitTick+0xd0>)
 8003a64:	4a13      	ldr	r2, [pc, #76]	; (8003ab4 <HAL_InitTick+0xd4>)
 8003a66:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003a68:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <HAL_InitTick+0xd0>)
 8003a6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a6e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003a70:	4a0f      	ldr	r2, [pc, #60]	; (8003ab0 <HAL_InitTick+0xd0>)
 8003a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a74:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003a76:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <HAL_InitTick+0xd0>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <HAL_InitTick+0xd0>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003a82:	480b      	ldr	r0, [pc, #44]	; (8003ab0 <HAL_InitTick+0xd0>)
 8003a84:	f00e f809 	bl	8011a9a <HAL_TIM_Base_Init>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d104      	bne.n	8003a98 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003a8e:	4808      	ldr	r0, [pc, #32]	; (8003ab0 <HAL_InitTick+0xd0>)
 8003a90:	f00e f85a 	bl	8011b48 <HAL_TIM_Base_Start_IT>
 8003a94:	4603      	mov	r3, r0
 8003a96:	e000      	b.n	8003a9a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3740      	adds	r7, #64	; 0x40
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	240000c4 	.word	0x240000c4
 8003aa8:	58024400 	.word	0x58024400
 8003aac:	431bde83 	.word	0x431bde83
 8003ab0:	24001d94 	.word	0x24001d94
 8003ab4:	40001000 	.word	0x40001000

08003ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003abc:	e7fe      	b.n	8003abc <NMI_Handler+0x4>

08003abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ac2:	e7fe      	b.n	8003ac2 <HardFault_Handler+0x4>

08003ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ac8:	e7fe      	b.n	8003ac8 <MemManage_Handler+0x4>

08003aca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003aca:	b480      	push	{r7}
 8003acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ace:	e7fe      	b.n	8003ace <BusFault_Handler+0x4>

08003ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ad4:	e7fe      	b.n	8003ad4 <UsageFault_Handler+0x4>

08003ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ada:	bf00      	nop
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003ae8:	4802      	ldr	r0, [pc, #8]	; (8003af4 <DMA1_Stream0_IRQHandler+0x10>)
 8003aea:	f004 fe1d 	bl	8008728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003aee:	bf00      	nop
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	24000224 	.word	0x24000224

08003af8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003afc:	4802      	ldr	r0, [pc, #8]	; (8003b08 <DMA1_Stream1_IRQHandler+0x10>)
 8003afe:	f004 fe13 	bl	8008728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	2400029c 	.word	0x2400029c

08003b0c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003b10:	4802      	ldr	r0, [pc, #8]	; (8003b1c <DMA1_Stream2_IRQHandler+0x10>)
 8003b12:	f004 fe09 	bl	8008728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	24001f10 	.word	0x24001f10

08003b20 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003b24:	4802      	ldr	r0, [pc, #8]	; (8003b30 <DMA1_Stream3_IRQHandler+0x10>)
 8003b26:	f004 fdff 	bl	8008728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	24001d1c 	.word	0x24001d1c

08003b34 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003b38:	4802      	ldr	r0, [pc, #8]	; (8003b44 <DMA1_Stream4_IRQHandler+0x10>)
 8003b3a:	f004 fdf5 	bl	8008728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003b3e:	bf00      	nop
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	24001ca4 	.word	0x24001ca4

08003b48 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003b4c:	4802      	ldr	r0, [pc, #8]	; (8003b58 <DMA1_Stream5_IRQHandler+0x10>)
 8003b4e:	f004 fdeb 	bl	8008728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003b52:	bf00      	nop
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	24000328 	.word	0x24000328

08003b5c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003b60:	4802      	ldr	r0, [pc, #8]	; (8003b6c <DMA1_Stream6_IRQHandler+0x10>)
 8003b62:	f004 fde1 	bl	8008728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003b66:	bf00      	nop
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	240019c8 	.word	0x240019c8

08003b70 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b74:	4802      	ldr	r0, [pc, #8]	; (8003b80 <TIM1_BRK_IRQHandler+0x10>)
 8003b76:	f00e fafe 	bl	8012176 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8003b7a:	bf00      	nop
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	24001de4 	.word	0x24001de4

08003b84 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b88:	4802      	ldr	r0, [pc, #8]	; (8003b94 <TIM1_UP_IRQHandler+0x10>)
 8003b8a:	f00e faf4 	bl	8012176 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003b8e:	bf00      	nop
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	24001de4 	.word	0x24001de4

08003b98 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b9c:	4802      	ldr	r0, [pc, #8]	; (8003ba8 <TIM1_TRG_COM_IRQHandler+0x10>)
 8003b9e:	f00e faea 	bl	8012176 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003ba2:	bf00      	nop
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	24001de4 	.word	0x24001de4

08003bac <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003bb0:	4802      	ldr	r0, [pc, #8]	; (8003bbc <TIM1_CC_IRQHandler+0x10>)
 8003bb2:	f00e fae0 	bl	8012176 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003bb6:	bf00      	nop
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	24001de4 	.word	0x24001de4

08003bc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003bc4:	4802      	ldr	r0, [pc, #8]	; (8003bd0 <TIM2_IRQHandler+0x10>)
 8003bc6:	f00e fad6 	bl	8012176 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003bca:	bf00      	nop
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	24001e30 	.word	0x24001e30

08003bd4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003bd8:	4802      	ldr	r0, [pc, #8]	; (8003be4 <I2C1_EV_IRQHandler+0x10>)
 8003bda:	f007 f82d 	bl	800ac38 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	24001974 	.word	0x24001974

08003be8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003bec:	4802      	ldr	r0, [pc, #8]	; (8003bf8 <I2C1_ER_IRQHandler+0x10>)
 8003bee:	f007 f83d 	bl	800ac6c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003bf2:	bf00      	nop
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	24001974 	.word	0x24001974

08003bfc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003c00:	4802      	ldr	r0, [pc, #8]	; (8003c0c <SPI1_IRQHandler+0x10>)
 8003c02:	f00d fc17 	bl	8011434 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003c06:	bf00      	nop
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	24001b94 	.word	0x24001b94

08003c10 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003c14:	4802      	ldr	r0, [pc, #8]	; (8003c20 <SPI2_IRQHandler+0x10>)
 8003c16:	f00d fc0d 	bl	8011434 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003c1a:	bf00      	nop
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	24001c1c 	.word	0x24001c1c

08003c24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c28:	4802      	ldr	r0, [pc, #8]	; (8003c34 <USART1_IRQHandler+0x10>)
 8003c2a:	f00f fde7 	bl	80137fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c2e:	bf00      	nop
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	24001e7c 	.word	0x24001e7c

08003c38 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003c3c:	4802      	ldr	r0, [pc, #8]	; (8003c48 <DMA1_Stream7_IRQHandler+0x10>)
 8003c3e:	f004 fd73 	bl	8008728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003c42:	bf00      	nop
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	24001a40 	.word	0x24001a40

08003c4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003c50:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <TIM6_DAC_IRQHandler+0x20>)
 8003c52:	791b      	ldrb	r3, [r3, #4]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8003c5a:	4804      	ldr	r0, [pc, #16]	; (8003c6c <TIM6_DAC_IRQHandler+0x20>)
 8003c5c:	f002 ffbb 	bl	8006bd6 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003c60:	4803      	ldr	r0, [pc, #12]	; (8003c70 <TIM6_DAC_IRQHandler+0x24>)
 8003c62:	f00e fa88 	bl	8012176 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003c66:	bf00      	nop
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	24000314 	.word	0x24000314
 8003c70:	24001d94 	.word	0x24001d94

08003c74 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8003c7e:	4b0f      	ldr	r3, [pc, #60]	; (8003cbc <ITM_SendChar+0x48>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a0e      	ldr	r2, [pc, #56]	; (8003cbc <ITM_SendChar+0x48>)
 8003c84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c88:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8003c8a:	4b0d      	ldr	r3, [pc, #52]	; (8003cc0 <ITM_SendChar+0x4c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a0c      	ldr	r2, [pc, #48]	; (8003cc0 <ITM_SendChar+0x4c>)
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8003c96:	bf00      	nop
 8003c98:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f8      	beq.n	8003c98 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8003ca6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	6013      	str	r3, [r2, #0]
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	e000edfc 	.word	0xe000edfc
 8003cc0:	e0000e00 	.word	0xe0000e00

08003cc4 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	e00a      	b.n	8003cec <_read+0x28>
		*ptr++ = __io_getchar();
 8003cd6:	f3af 8000 	nop.w
 8003cda:	4601      	mov	r1, r0
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	60ba      	str	r2, [r7, #8]
 8003ce2:	b2ca      	uxtb	r2, r1
 8003ce4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	dbf0      	blt.n	8003cd6 <_read+0x12>
	}

	return len;
 8003cf4:	687b      	ldr	r3, [r7, #4]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b086      	sub	sp, #24
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	e009      	b.n	8003d24 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	60ba      	str	r2, [r7, #8]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff ffab 	bl	8003c74 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	3301      	adds	r3, #1
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	dbf1      	blt.n	8003d10 <_write+0x12>
	}
	return len;
 8003d2c:	687b      	ldr	r3, [r7, #4]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <_close>:

int _close(int file) {
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8003d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <_fstat>:

int _fstat(int file, struct stat *st) {
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d5e:	605a      	str	r2, [r3, #4]
	return 0;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <_isatty>:

int _isatty(int file) {
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8003d76:	2301      	movs	r3, #1
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
	...

08003da0 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8003da8:	4a14      	ldr	r2, [pc, #80]	; (8003dfc <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8003daa:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003db4:	4b13      	ldr	r3, [pc, #76]	; (8003e04 <_sbrk+0x64>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d102      	bne.n	8003dc2 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8003dbc:	4b11      	ldr	r3, [pc, #68]	; (8003e04 <_sbrk+0x64>)
 8003dbe:	4a12      	ldr	r2, [pc, #72]	; (8003e08 <_sbrk+0x68>)
 8003dc0:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003dc2:	4b10      	ldr	r3, [pc, #64]	; (8003e04 <_sbrk+0x64>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4413      	add	r3, r2
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d207      	bcs.n	8003de0 <_sbrk+0x40>
		errno = ENOMEM;
 8003dd0:	f015 faac 	bl	801932c <__errno>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	220c      	movs	r2, #12
 8003dd8:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8003dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003dde:	e009      	b.n	8003df4 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003de0:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <_sbrk+0x64>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003de6:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <_sbrk+0x64>)
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4413      	add	r3, r2
 8003dee:	4a05      	ldr	r2, [pc, #20]	; (8003e04 <_sbrk+0x64>)
 8003df0:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003df2:	68fb      	ldr	r3, [r7, #12]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	24080000 	.word	0x24080000
 8003e00:	00000400 	.word	0x00000400
 8003e04:	24001de0 	.word	0x24001de0
 8003e08:	240069c0 	.word	0x240069c0

08003e0c <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003e10:	4b37      	ldr	r3, [pc, #220]	; (8003ef0 <SystemInit+0xe4>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e16:	4a36      	ldr	r2, [pc, #216]	; (8003ef0 <SystemInit+0xe4>)
 8003e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003e20:	4b34      	ldr	r3, [pc, #208]	; (8003ef4 <SystemInit+0xe8>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 030f 	and.w	r3, r3, #15
 8003e28:	2b06      	cmp	r3, #6
 8003e2a:	d807      	bhi.n	8003e3c <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003e2c:	4b31      	ldr	r3, [pc, #196]	; (8003ef4 <SystemInit+0xe8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f023 030f 	bic.w	r3, r3, #15
 8003e34:	4a2f      	ldr	r2, [pc, #188]	; (8003ef4 <SystemInit+0xe8>)
 8003e36:	f043 0307 	orr.w	r3, r3, #7
 8003e3a:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003e3c:	4b2e      	ldr	r3, [pc, #184]	; (8003ef8 <SystemInit+0xec>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a2d      	ldr	r2, [pc, #180]	; (8003ef8 <SystemInit+0xec>)
 8003e42:	f043 0301 	orr.w	r3, r3, #1
 8003e46:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003e48:	4b2b      	ldr	r3, [pc, #172]	; (8003ef8 <SystemInit+0xec>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003e4e:	4b2a      	ldr	r3, [pc, #168]	; (8003ef8 <SystemInit+0xec>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	4929      	ldr	r1, [pc, #164]	; (8003ef8 <SystemInit+0xec>)
 8003e54:	4b29      	ldr	r3, [pc, #164]	; (8003efc <SystemInit+0xf0>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003e5a:	4b26      	ldr	r3, [pc, #152]	; (8003ef4 <SystemInit+0xe8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d007      	beq.n	8003e76 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003e66:	4b23      	ldr	r3, [pc, #140]	; (8003ef4 <SystemInit+0xe8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f023 030f 	bic.w	r3, r3, #15
 8003e6e:	4a21      	ldr	r2, [pc, #132]	; (8003ef4 <SystemInit+0xe8>)
 8003e70:	f043 0307 	orr.w	r3, r3, #7
 8003e74:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003e76:	4b20      	ldr	r3, [pc, #128]	; (8003ef8 <SystemInit+0xec>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003e7c:	4b1e      	ldr	r3, [pc, #120]	; (8003ef8 <SystemInit+0xec>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003e82:	4b1d      	ldr	r3, [pc, #116]	; (8003ef8 <SystemInit+0xec>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003e88:	4b1b      	ldr	r3, [pc, #108]	; (8003ef8 <SystemInit+0xec>)
 8003e8a:	4a1d      	ldr	r2, [pc, #116]	; (8003f00 <SystemInit+0xf4>)
 8003e8c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003e8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ef8 <SystemInit+0xec>)
 8003e90:	4a1c      	ldr	r2, [pc, #112]	; (8003f04 <SystemInit+0xf8>)
 8003e92:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003e94:	4b18      	ldr	r3, [pc, #96]	; (8003ef8 <SystemInit+0xec>)
 8003e96:	4a1c      	ldr	r2, [pc, #112]	; (8003f08 <SystemInit+0xfc>)
 8003e98:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003e9a:	4b17      	ldr	r3, [pc, #92]	; (8003ef8 <SystemInit+0xec>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003ea0:	4b15      	ldr	r3, [pc, #84]	; (8003ef8 <SystemInit+0xec>)
 8003ea2:	4a19      	ldr	r2, [pc, #100]	; (8003f08 <SystemInit+0xfc>)
 8003ea4:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003ea6:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <SystemInit+0xec>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003eac:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <SystemInit+0xec>)
 8003eae:	4a16      	ldr	r2, [pc, #88]	; (8003f08 <SystemInit+0xfc>)
 8003eb0:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003eb2:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <SystemInit+0xec>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <SystemInit+0xec>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a0e      	ldr	r2, [pc, #56]	; (8003ef8 <SystemInit+0xec>)
 8003ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ec2:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003ec4:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <SystemInit+0xec>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003eca:	4b10      	ldr	r3, [pc, #64]	; (8003f0c <SystemInit+0x100>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <SystemInit+0x104>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ed6:	d202      	bcs.n	8003ede <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003ed8:	4b0e      	ldr	r3, [pc, #56]	; (8003f14 <SystemInit+0x108>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003ede:	4b0e      	ldr	r3, [pc, #56]	; (8003f18 <SystemInit+0x10c>)
 8003ee0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003ee4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003ee6:	bf00      	nop
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	e000ed00 	.word	0xe000ed00
 8003ef4:	52002000 	.word	0x52002000
 8003ef8:	58024400 	.word	0x58024400
 8003efc:	eaf6ed7f 	.word	0xeaf6ed7f
 8003f00:	02020200 	.word	0x02020200
 8003f04:	01ff0000 	.word	0x01ff0000
 8003f08:	01010280 	.word	0x01010280
 8003f0c:	5c001000 	.word	0x5c001000
 8003f10:	ffff0000 	.word	0xffff0000
 8003f14:	51008108 	.word	0x51008108
 8003f18:	52004000 	.word	0x52004000

08003f1c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b09a      	sub	sp, #104	; 0x68
 8003f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	605a      	str	r2, [r3, #4]
 8003f2c:	609a      	str	r2, [r3, #8]
 8003f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	605a      	str	r2, [r3, #4]
 8003f3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	605a      	str	r2, [r3, #4]
 8003f46:	609a      	str	r2, [r3, #8]
 8003f48:	60da      	str	r2, [r3, #12]
 8003f4a:	611a      	str	r2, [r3, #16]
 8003f4c:	615a      	str	r2, [r3, #20]
 8003f4e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f50:	1d3b      	adds	r3, r7, #4
 8003f52:	222c      	movs	r2, #44	; 0x2c
 8003f54:	2100      	movs	r1, #0
 8003f56:	4618      	mov	r0, r3
 8003f58:	f015 fa20 	bl	801939c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f5c:	4b44      	ldr	r3, [pc, #272]	; (8004070 <MX_TIM1_Init+0x154>)
 8003f5e:	4a45      	ldr	r2, [pc, #276]	; (8004074 <MX_TIM1_Init+0x158>)
 8003f60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 8003f62:	4b43      	ldr	r3, [pc, #268]	; (8004070 <MX_TIM1_Init+0x154>)
 8003f64:	224a      	movs	r2, #74	; 0x4a
 8003f66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f68:	4b41      	ldr	r3, [pc, #260]	; (8004070 <MX_TIM1_Init+0x154>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8003f6e:	4b40      	ldr	r3, [pc, #256]	; (8004070 <MX_TIM1_Init+0x154>)
 8003f70:	f24f 4223 	movw	r2, #62499	; 0xf423
 8003f74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f76:	4b3e      	ldr	r3, [pc, #248]	; (8004070 <MX_TIM1_Init+0x154>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003f7c:	4b3c      	ldr	r3, [pc, #240]	; (8004070 <MX_TIM1_Init+0x154>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f82:	4b3b      	ldr	r3, [pc, #236]	; (8004070 <MX_TIM1_Init+0x154>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003f88:	4839      	ldr	r0, [pc, #228]	; (8004070 <MX_TIM1_Init+0x154>)
 8003f8a:	f00d fd86 	bl	8011a9a <HAL_TIM_Base_Init>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003f94:	f7fe fee2 	bl	8002d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f9c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003f9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4832      	ldr	r0, [pc, #200]	; (8004070 <MX_TIM1_Init+0x154>)
 8003fa6:	f00e fb01 	bl	80125ac <HAL_TIM_ConfigClockSource>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003fb0:	f7fe fed4 	bl	8002d5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003fb4:	482e      	ldr	r0, [pc, #184]	; (8004070 <MX_TIM1_Init+0x154>)
 8003fb6:	f00e f87d 	bl	80120b4 <HAL_TIM_PWM_Init>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003fc0:	f7fe fecc 	bl	8002d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003fd0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4826      	ldr	r0, [pc, #152]	; (8004070 <MX_TIM1_Init+0x154>)
 8003fd8:	f00f f83e 	bl	8013058 <HAL_TIMEx_MasterConfigSynchronization>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003fe2:	f7fe febb 	bl	8002d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fe6:	2360      	movs	r3, #96	; 0x60
 8003fe8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8003fea:	f240 13df 	movw	r3, #479	; 0x1df
 8003fee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004000:	2300      	movs	r3, #0
 8004002:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004004:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004008:	2200      	movs	r2, #0
 800400a:	4619      	mov	r1, r3
 800400c:	4818      	ldr	r0, [pc, #96]	; (8004070 <MX_TIM1_Init+0x154>)
 800400e:	f00e f9b9 	bl	8012384 <HAL_TIM_PWM_ConfigChannel>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8004018:	f7fe fea0 	bl	8002d5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800401c:	2300      	movs	r3, #0
 800401e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004020:	2300      	movs	r3, #0
 8004022:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004028:	2300      	movs	r3, #0
 800402a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800402c:	2300      	movs	r3, #0
 800402e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004034:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004036:	2300      	movs	r3, #0
 8004038:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800403a:	2300      	movs	r3, #0
 800403c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800403e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004044:	2300      	movs	r3, #0
 8004046:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004048:	2300      	movs	r3, #0
 800404a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800404c:	1d3b      	adds	r3, r7, #4
 800404e:	4619      	mov	r1, r3
 8004050:	4807      	ldr	r0, [pc, #28]	; (8004070 <MX_TIM1_Init+0x154>)
 8004052:	f00f f88f 	bl	8013174 <HAL_TIMEx_ConfigBreakDeadTime>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800405c:	f7fe fe7e 	bl	8002d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004060:	4803      	ldr	r0, [pc, #12]	; (8004070 <MX_TIM1_Init+0x154>)
 8004062:	f000 f8dd 	bl	8004220 <HAL_TIM_MspPostInit>

}
 8004066:	bf00      	nop
 8004068:	3768      	adds	r7, #104	; 0x68
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	24001de4 	.word	0x24001de4
 8004074:	40010000 	.word	0x40010000

08004078 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b08e      	sub	sp, #56	; 0x38
 800407c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800407e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	605a      	str	r2, [r3, #4]
 8004088:	609a      	str	r2, [r3, #8]
 800408a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800408c:	f107 031c 	add.w	r3, r7, #28
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	605a      	str	r2, [r3, #4]
 8004096:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004098:	463b      	mov	r3, r7
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	605a      	str	r2, [r3, #4]
 80040a0:	609a      	str	r2, [r3, #8]
 80040a2:	60da      	str	r2, [r3, #12]
 80040a4:	611a      	str	r2, [r3, #16]
 80040a6:	615a      	str	r2, [r3, #20]
 80040a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80040aa:	4b2d      	ldr	r3, [pc, #180]	; (8004160 <MX_TIM2_Init+0xe8>)
 80040ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80040b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 80040b2:	4b2b      	ldr	r3, [pc, #172]	; (8004160 <MX_TIM2_Init+0xe8>)
 80040b4:	224a      	movs	r2, #74	; 0x4a
 80040b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040b8:	4b29      	ldr	r3, [pc, #164]	; (8004160 <MX_TIM2_Init+0xe8>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 80040be:	4b28      	ldr	r3, [pc, #160]	; (8004160 <MX_TIM2_Init+0xe8>)
 80040c0:	f640 4234 	movw	r2, #3124	; 0xc34
 80040c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040c6:	4b26      	ldr	r3, [pc, #152]	; (8004160 <MX_TIM2_Init+0xe8>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80040cc:	4b24      	ldr	r3, [pc, #144]	; (8004160 <MX_TIM2_Init+0xe8>)
 80040ce:	2280      	movs	r2, #128	; 0x80
 80040d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80040d2:	4823      	ldr	r0, [pc, #140]	; (8004160 <MX_TIM2_Init+0xe8>)
 80040d4:	f00d fce1 	bl	8011a9a <HAL_TIM_Base_Init>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80040de:	f7fe fe3d 	bl	8002d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80040e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040ec:	4619      	mov	r1, r3
 80040ee:	481c      	ldr	r0, [pc, #112]	; (8004160 <MX_TIM2_Init+0xe8>)
 80040f0:	f00e fa5c 	bl	80125ac <HAL_TIM_ConfigClockSource>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80040fa:	f7fe fe2f 	bl	8002d5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80040fe:	4818      	ldr	r0, [pc, #96]	; (8004160 <MX_TIM2_Init+0xe8>)
 8004100:	f00d ffd8 	bl	80120b4 <HAL_TIM_PWM_Init>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800410a:	f7fe fe27 	bl	8002d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800410e:	2320      	movs	r3, #32
 8004110:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004112:	2300      	movs	r3, #0
 8004114:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004116:	f107 031c 	add.w	r3, r7, #28
 800411a:	4619      	mov	r1, r3
 800411c:	4810      	ldr	r0, [pc, #64]	; (8004160 <MX_TIM2_Init+0xe8>)
 800411e:	f00e ff9b 	bl	8013058 <HAL_TIMEx_MasterConfigSynchronization>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004128:	f7fe fe18 	bl	8002d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800412c:	2360      	movs	r3, #96	; 0x60
 800412e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004130:	2300      	movs	r3, #0
 8004132:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004134:	2300      	movs	r3, #0
 8004136:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004138:	2300      	movs	r3, #0
 800413a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800413c:	463b      	mov	r3, r7
 800413e:	220c      	movs	r2, #12
 8004140:	4619      	mov	r1, r3
 8004142:	4807      	ldr	r0, [pc, #28]	; (8004160 <MX_TIM2_Init+0xe8>)
 8004144:	f00e f91e 	bl	8012384 <HAL_TIM_PWM_ConfigChannel>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800414e:	f7fe fe05 	bl	8002d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004152:	4803      	ldr	r0, [pc, #12]	; (8004160 <MX_TIM2_Init+0xe8>)
 8004154:	f000 f864 	bl	8004220 <HAL_TIM_MspPostInit>

}
 8004158:	bf00      	nop
 800415a:	3738      	adds	r7, #56	; 0x38
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	24001e30 	.word	0x24001e30

08004164 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a29      	ldr	r2, [pc, #164]	; (8004218 <HAL_TIM_Base_MspInit+0xb4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d12f      	bne.n	80041d6 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004176:	4b29      	ldr	r3, [pc, #164]	; (800421c <HAL_TIM_Base_MspInit+0xb8>)
 8004178:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800417c:	4a27      	ldr	r2, [pc, #156]	; (800421c <HAL_TIM_Base_MspInit+0xb8>)
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004186:	4b25      	ldr	r3, [pc, #148]	; (800421c <HAL_TIM_Base_MspInit+0xb8>)
 8004188:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8004194:	2200      	movs	r2, #0
 8004196:	2105      	movs	r1, #5
 8004198:	2018      	movs	r0, #24
 800419a:	f002 faf5 	bl	8006788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800419e:	2018      	movs	r0, #24
 80041a0:	f002 fb0c 	bl	80067bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80041a4:	2200      	movs	r2, #0
 80041a6:	2105      	movs	r1, #5
 80041a8:	2019      	movs	r0, #25
 80041aa:	f002 faed 	bl	8006788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80041ae:	2019      	movs	r0, #25
 80041b0:	f002 fb04 	bl	80067bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80041b4:	2200      	movs	r2, #0
 80041b6:	2105      	movs	r1, #5
 80041b8:	201a      	movs	r0, #26
 80041ba:	f002 fae5 	bl	8006788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80041be:	201a      	movs	r0, #26
 80041c0:	f002 fafc 	bl	80067bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80041c4:	2200      	movs	r2, #0
 80041c6:	2105      	movs	r1, #5
 80041c8:	201b      	movs	r0, #27
 80041ca:	f002 fadd 	bl	8006788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80041ce:	201b      	movs	r0, #27
 80041d0:	f002 faf4 	bl	80067bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80041d4:	e01b      	b.n	800420e <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041de:	d116      	bne.n	800420e <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041e0:	4b0e      	ldr	r3, [pc, #56]	; (800421c <HAL_TIM_Base_MspInit+0xb8>)
 80041e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041e6:	4a0d      	ldr	r2, [pc, #52]	; (800421c <HAL_TIM_Base_MspInit+0xb8>)
 80041e8:	f043 0301 	orr.w	r3, r3, #1
 80041ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80041f0:	4b0a      	ldr	r3, [pc, #40]	; (800421c <HAL_TIM_Base_MspInit+0xb8>)
 80041f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	60bb      	str	r3, [r7, #8]
 80041fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80041fe:	2200      	movs	r2, #0
 8004200:	2105      	movs	r1, #5
 8004202:	201c      	movs	r0, #28
 8004204:	f002 fac0 	bl	8006788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004208:	201c      	movs	r0, #28
 800420a:	f002 fad7 	bl	80067bc <HAL_NVIC_EnableIRQ>
}
 800420e:	bf00      	nop
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	40010000 	.word	0x40010000
 800421c:	58024400 	.word	0x58024400

08004220 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b08a      	sub	sp, #40	; 0x28
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004228:	f107 0314 	add.w	r3, r7, #20
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	605a      	str	r2, [r3, #4]
 8004232:	609a      	str	r2, [r3, #8]
 8004234:	60da      	str	r2, [r3, #12]
 8004236:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a26      	ldr	r2, [pc, #152]	; (80042d8 <HAL_TIM_MspPostInit+0xb8>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d120      	bne.n	8004284 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004242:	4b26      	ldr	r3, [pc, #152]	; (80042dc <HAL_TIM_MspPostInit+0xbc>)
 8004244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004248:	4a24      	ldr	r2, [pc, #144]	; (80042dc <HAL_TIM_MspPostInit+0xbc>)
 800424a:	f043 0301 	orr.w	r3, r3, #1
 800424e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004252:	4b22      	ldr	r3, [pc, #136]	; (80042dc <HAL_TIM_MspPostInit+0xbc>)
 8004254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004266:	2302      	movs	r3, #2
 8004268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426a:	2300      	movs	r3, #0
 800426c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800426e:	2300      	movs	r3, #0
 8004270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004272:	2301      	movs	r3, #1
 8004274:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004276:	f107 0314 	add.w	r3, r7, #20
 800427a:	4619      	mov	r1, r3
 800427c:	4818      	ldr	r0, [pc, #96]	; (80042e0 <HAL_TIM_MspPostInit+0xc0>)
 800427e:	f006 f859 	bl	800a334 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004282:	e024      	b.n	80042ce <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800428c:	d11f      	bne.n	80042ce <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800428e:	4b13      	ldr	r3, [pc, #76]	; (80042dc <HAL_TIM_MspPostInit+0xbc>)
 8004290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004294:	4a11      	ldr	r2, [pc, #68]	; (80042dc <HAL_TIM_MspPostInit+0xbc>)
 8004296:	f043 0302 	orr.w	r3, r3, #2
 800429a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800429e:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <HAL_TIM_MspPostInit+0xbc>)
 80042a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80042ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b2:	2302      	movs	r3, #2
 80042b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b6:	2300      	movs	r3, #0
 80042b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ba:	2300      	movs	r3, #0
 80042bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80042be:	2301      	movs	r3, #1
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042c2:	f107 0314 	add.w	r3, r7, #20
 80042c6:	4619      	mov	r1, r3
 80042c8:	4806      	ldr	r0, [pc, #24]	; (80042e4 <HAL_TIM_MspPostInit+0xc4>)
 80042ca:	f006 f833 	bl	800a334 <HAL_GPIO_Init>
}
 80042ce:	bf00      	nop
 80042d0:	3728      	adds	r7, #40	; 0x28
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40010000 	.word	0x40010000
 80042dc:	58024400 	.word	0x58024400
 80042e0:	58020000 	.word	0x58020000
 80042e4:	58020400 	.word	0x58020400

080042e8 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 80042f4:	4b21      	ldr	r3, [pc, #132]	; (800437c <get_uptime+0x94>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 80042fa:	4b21      	ldr	r3, [pc, #132]	; (8004380 <get_uptime+0x98>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8004300:	4b1e      	ldr	r3, [pc, #120]	; (800437c <get_uptime+0x94>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	429a      	cmp	r2, r3
 8004308:	d005      	beq.n	8004316 <get_uptime+0x2e>
		ms = uptime_millis;
 800430a:	4b1c      	ldr	r3, [pc, #112]	; (800437c <get_uptime+0x94>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 8004310:	4b1b      	ldr	r3, [pc, #108]	; (8004380 <get_uptime+0x98>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800431c:	fb03 f202 	mul.w	r2, r3, r2
 8004320:	4b17      	ldr	r3, [pc, #92]	; (8004380 <get_uptime+0x98>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	3301      	adds	r3, #1
 8004326:	4917      	ldr	r1, [pc, #92]	; (8004384 <get_uptime+0x9c>)
 8004328:	fba1 1303 	umull	r1, r3, r1, r3
 800432c:	099b      	lsrs	r3, r3, #6
 800432e:	68f9      	ldr	r1, [r7, #12]
 8004330:	fbb1 f3f3 	udiv	r3, r1, r3
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <get_uptime+0x5a>
		uptime = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	0e1b      	lsrs	r3, r3, #24
 8004346:	b2da      	uxtb	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	0c1a      	lsrs	r2, r3, #16
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3301      	adds	r3, #1
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	0a1a      	lsrs	r2, r3, #8
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3302      	adds	r3, #2
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3303      	adds	r3, #3
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]
}
 800436e:	bf00      	nop
 8004370:	371c      	adds	r7, #28
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	24001b18 	.word	0x24001b18
 8004380:	e000e010 	.word	0xe000e010
 8004384:	10624dd3 	.word	0x10624dd3

08004388 <get_timestamp>:

void get_timestamp(uint8_t *buffer) {
 8004388:	b580      	push	{r7, lr}
 800438a:	b08a      	sub	sp, #40	; 0x28
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8004390:	f107 0310 	add.w	r3, r7, #16
 8004394:	2200      	movs	r2, #0
 8004396:	4619      	mov	r1, r3
 8004398:	4821      	ldr	r0, [pc, #132]	; (8004420 <get_timestamp+0x98>)
 800439a:	f00c fbdd 	bl	8010b58 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 800439e:	f107 030c 	add.w	r3, r7, #12
 80043a2:	2200      	movs	r2, #0
 80043a4:	4619      	mov	r1, r3
 80043a6:	481e      	ldr	r0, [pc, #120]	; (8004420 <get_timestamp+0x98>)
 80043a8:	f00c fcba 	bl	8010d20 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2264      	movs	r2, #100	; 0x64
 80043b0:	fb03 f202 	mul.w	r2, r3, r2
 80043b4:	4b1b      	ldr	r3, [pc, #108]	; (8004424 <get_timestamp+0x9c>)
 80043b6:	1a9b      	subs	r3, r3, r2
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 80043ba:	7bfa      	ldrb	r2, [r7, #15]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3301      	adds	r3, #1
 80043c4:	7b7a      	ldrb	r2, [r7, #13]
 80043c6:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3302      	adds	r3, #2
 80043cc:	7bba      	ldrb	r2, [r7, #14]
 80043ce:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3303      	adds	r3, #3
 80043d4:	7c3a      	ldrb	r2, [r7, #16]
 80043d6:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3304      	adds	r3, #4
 80043dc:	7c7a      	ldrb	r2, [r7, #17]
 80043de:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3305      	adds	r3, #5
 80043e4:	7cba      	ldrb	r2, [r7, #18]
 80043e6:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	0e1a      	lsrs	r2, r3, #24
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3306      	adds	r3, #6
 80043f0:	b2d2      	uxtb	r2, r2
 80043f2:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	0c1a      	lsrs	r2, r3, #16
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3307      	adds	r3, #7
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	0a1a      	lsrs	r2, r3, #8
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3308      	adds	r3, #8
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3309      	adds	r3, #9
 8004410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	701a      	strb	r2, [r3, #0]
}
 8004416:	bf00      	nop
 8004418:	3728      	adds	r7, #40	; 0x28
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	24001b2c 	.word	0x24001b2c
 8004424:	000f4240 	.word	0x000f4240

08004428 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800442c:	4b30      	ldr	r3, [pc, #192]	; (80044f0 <MX_USART1_UART_Init+0xc8>)
 800442e:	4a31      	ldr	r2, [pc, #196]	; (80044f4 <MX_USART1_UART_Init+0xcc>)
 8004430:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8004432:	4b2f      	ldr	r3, [pc, #188]	; (80044f0 <MX_USART1_UART_Init+0xc8>)
 8004434:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8004438:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800443a:	4b2d      	ldr	r3, [pc, #180]	; (80044f0 <MX_USART1_UART_Init+0xc8>)
 800443c:	2200      	movs	r2, #0
 800443e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004440:	4b2b      	ldr	r3, [pc, #172]	; (80044f0 <MX_USART1_UART_Init+0xc8>)
 8004442:	2200      	movs	r2, #0
 8004444:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004446:	4b2a      	ldr	r3, [pc, #168]	; (80044f0 <MX_USART1_UART_Init+0xc8>)
 8004448:	2200      	movs	r2, #0
 800444a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800444c:	4b28      	ldr	r3, [pc, #160]	; (80044f0 <MX_USART1_UART_Init+0xc8>)
 800444e:	220c      	movs	r2, #12
 8004450:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004452:	4b27      	ldr	r3, [pc, #156]	; (80044f0 <MX_USART1_UART_Init+0xc8>)
 8004454:	2200      	movs	r2, #0
 8004456:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004458:	4b25      	ldr	r3, [pc, #148]	; (80044f0 <MX_USART1_UART_Init+0xc8>)
 800445a:	2200      	movs	r2, #0
 800445c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800445e:	4b24      	ldr	r3, [pc, #144]	; (80044f0 <MX_USART1_UART_Init+0xc8>)
 8004460:	2200      	movs	r2, #0
 8004462:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004464:	4b22      	ldr	r3, [pc, #136]	; (80044f0 <MX_USART1_UART_Init+0xc8>)
 8004466:	2200      	movs	r2, #0
 8004468:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800446a:	4b21      	ldr	r3, [pc, #132]	; (80044f0 <MX_USART1_UART_Init+0xc8>)
 800446c:	2200      	movs	r2, #0
 800446e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004470:	481f      	ldr	r0, [pc, #124]	; (80044f0 <MX_USART1_UART_Init+0xc8>)
 8004472:	f00e ff1b 	bl	80132ac <HAL_UART_Init>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800447c:	f7fe fc6e 	bl	8002d5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004480:	2100      	movs	r1, #0
 8004482:	481b      	ldr	r0, [pc, #108]	; (80044f0 <MX_USART1_UART_Init+0xc8>)
 8004484:	f011 fc61 	bl	8015d4a <HAL_UARTEx_SetTxFifoThreshold>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800448e:	f7fe fc65 	bl	8002d5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004492:	2100      	movs	r1, #0
 8004494:	4816      	ldr	r0, [pc, #88]	; (80044f0 <MX_USART1_UART_Init+0xc8>)
 8004496:	f011 fc96 	bl	8015dc6 <HAL_UARTEx_SetRxFifoThreshold>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80044a0:	f7fe fc5c 	bl	8002d5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80044a4:	4812      	ldr	r0, [pc, #72]	; (80044f0 <MX_USART1_UART_Init+0xc8>)
 80044a6:	f011 fc17 	bl	8015cd8 <HAL_UARTEx_DisableFifoMode>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80044b0:	f7fe fc54 	bl	8002d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 80044b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80044b8:	480d      	ldr	r0, [pc, #52]	; (80044f0 <MX_USART1_UART_Init+0xc8>)
 80044ba:	f011 fc84 	bl	8015dc6 <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 80044be:	480c      	ldr	r0, [pc, #48]	; (80044f0 <MX_USART1_UART_Init+0xc8>)
 80044c0:	f011 fbcf 	bl	8015c62 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 80044c4:	480a      	ldr	r0, [pc, #40]	; (80044f0 <MX_USART1_UART_Init+0xc8>)
 80044c6:	f011 fb99 	bl	8015bfc <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 80044ca:	4b09      	ldr	r3, [pc, #36]	; (80044f0 <MX_USART1_UART_Init+0xc8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <MX_USART1_UART_Init+0xc8>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80044d8:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80044da:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <MX_USART1_UART_Init+0xc8>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	4b03      	ldr	r3, [pc, #12]	; (80044f0 <MX_USART1_UART_Init+0xc8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80044e8:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 80044ea:	bf00      	nop
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	24001e7c 	.word	0x24001e7c
 80044f4:	40011000 	.word	0x40011000

080044f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b0ba      	sub	sp, #232	; 0xe8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004500:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	605a      	str	r2, [r3, #4]
 800450a:	609a      	str	r2, [r3, #8]
 800450c:	60da      	str	r2, [r3, #12]
 800450e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004510:	f107 0310 	add.w	r3, r7, #16
 8004514:	22c0      	movs	r2, #192	; 0xc0
 8004516:	2100      	movs	r1, #0
 8004518:	4618      	mov	r0, r3
 800451a:	f014 ff3f 	bl	801939c <memset>
  if(uartHandle->Instance==USART1)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a41      	ldr	r2, [pc, #260]	; (8004628 <HAL_UART_MspInit+0x130>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d17b      	bne.n	8004620 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004528:	f04f 0201 	mov.w	r2, #1
 800452c:	f04f 0300 	mov.w	r3, #0
 8004530:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8004534:	2318      	movs	r3, #24
 8004536:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800453a:	f107 0310 	add.w	r3, r7, #16
 800453e:	4618      	mov	r0, r3
 8004540:	f009 fcec 	bl	800df1c <HAL_RCCEx_PeriphCLKConfig>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800454a:	f7fe fc07 	bl	8002d5c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800454e:	4b37      	ldr	r3, [pc, #220]	; (800462c <HAL_UART_MspInit+0x134>)
 8004550:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004554:	4a35      	ldr	r2, [pc, #212]	; (800462c <HAL_UART_MspInit+0x134>)
 8004556:	f043 0310 	orr.w	r3, r3, #16
 800455a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800455e:	4b33      	ldr	r3, [pc, #204]	; (800462c <HAL_UART_MspInit+0x134>)
 8004560:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004564:	f003 0310 	and.w	r3, r3, #16
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800456c:	4b2f      	ldr	r3, [pc, #188]	; (800462c <HAL_UART_MspInit+0x134>)
 800456e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004572:	4a2e      	ldr	r2, [pc, #184]	; (800462c <HAL_UART_MspInit+0x134>)
 8004574:	f043 0301 	orr.w	r3, r3, #1
 8004578:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800457c:	4b2b      	ldr	r3, [pc, #172]	; (800462c <HAL_UART_MspInit+0x134>)
 800457e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	60bb      	str	r3, [r7, #8]
 8004588:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800458a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800458e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004592:	2302      	movs	r3, #2
 8004594:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004598:	2300      	movs	r3, #0
 800459a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800459e:	2300      	movs	r3, #0
 80045a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80045a4:	2307      	movs	r3, #7
 80045a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80045ae:	4619      	mov	r1, r3
 80045b0:	481f      	ldr	r0, [pc, #124]	; (8004630 <HAL_UART_MspInit+0x138>)
 80045b2:	f005 febf 	bl	800a334 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 80045b6:	4b1f      	ldr	r3, [pc, #124]	; (8004634 <HAL_UART_MspInit+0x13c>)
 80045b8:	4a1f      	ldr	r2, [pc, #124]	; (8004638 <HAL_UART_MspInit+0x140>)
 80045ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80045bc:	4b1d      	ldr	r3, [pc, #116]	; (8004634 <HAL_UART_MspInit+0x13c>)
 80045be:	222a      	movs	r2, #42	; 0x2a
 80045c0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80045c2:	4b1c      	ldr	r3, [pc, #112]	; (8004634 <HAL_UART_MspInit+0x13c>)
 80045c4:	2240      	movs	r2, #64	; 0x40
 80045c6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045c8:	4b1a      	ldr	r3, [pc, #104]	; (8004634 <HAL_UART_MspInit+0x13c>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80045ce:	4b19      	ldr	r3, [pc, #100]	; (8004634 <HAL_UART_MspInit+0x13c>)
 80045d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045d4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045d6:	4b17      	ldr	r3, [pc, #92]	; (8004634 <HAL_UART_MspInit+0x13c>)
 80045d8:	2200      	movs	r2, #0
 80045da:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80045dc:	4b15      	ldr	r3, [pc, #84]	; (8004634 <HAL_UART_MspInit+0x13c>)
 80045de:	2200      	movs	r2, #0
 80045e0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80045e2:	4b14      	ldr	r3, [pc, #80]	; (8004634 <HAL_UART_MspInit+0x13c>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80045e8:	4b12      	ldr	r3, [pc, #72]	; (8004634 <HAL_UART_MspInit+0x13c>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045ee:	4b11      	ldr	r3, [pc, #68]	; (8004634 <HAL_UART_MspInit+0x13c>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80045f4:	480f      	ldr	r0, [pc, #60]	; (8004634 <HAL_UART_MspInit+0x13c>)
 80045f6:	f002 fd6d 	bl	80070d4 <HAL_DMA_Init>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8004600:	f7fe fbac 	bl	8002d5c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a0b      	ldr	r2, [pc, #44]	; (8004634 <HAL_UART_MspInit+0x13c>)
 8004608:	67da      	str	r2, [r3, #124]	; 0x7c
 800460a:	4a0a      	ldr	r2, [pc, #40]	; (8004634 <HAL_UART_MspInit+0x13c>)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004610:	2200      	movs	r2, #0
 8004612:	2105      	movs	r1, #5
 8004614:	2025      	movs	r0, #37	; 0x25
 8004616:	f002 f8b7 	bl	8006788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800461a:	2025      	movs	r0, #37	; 0x25
 800461c:	f002 f8ce 	bl	80067bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004620:	bf00      	nop
 8004622:	37e8      	adds	r7, #232	; 0xe8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	40011000 	.word	0x40011000
 800462c:	58024400 	.word	0x58024400
 8004630:	58020000 	.word	0x58020000
 8004634:	24001f10 	.word	0x24001f10
 8004638:	40020040 	.word	0x40020040

0800463c <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8004646:	4bc2      	ldr	r3, [pc, #776]	; (8004950 <voltage_monitor_init+0x314>)
 8004648:	2200      	movs	r2, #0
 800464a:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 800464c:	4bc0      	ldr	r3, [pc, #768]	; (8004950 <voltage_monitor_init+0x314>)
 800464e:	2200      	movs	r2, #0
 8004650:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 8004652:	4bbf      	ldr	r3, [pc, #764]	; (8004950 <voltage_monitor_init+0x314>)
 8004654:	2201      	movs	r2, #1
 8004656:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8004658:	4bbd      	ldr	r3, [pc, #756]	; (8004950 <voltage_monitor_init+0x314>)
 800465a:	2200      	movs	r2, #0
 800465c:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 800465e:	4bbc      	ldr	r3, [pc, #752]	; (8004950 <voltage_monitor_init+0x314>)
 8004660:	f242 7210 	movw	r2, #10000	; 0x2710
 8004664:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 8004666:	4bba      	ldr	r3, [pc, #744]	; (8004950 <voltage_monitor_init+0x314>)
 8004668:	2200      	movs	r2, #0
 800466a:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 800466c:	4bb8      	ldr	r3, [pc, #736]	; (8004950 <voltage_monitor_init+0x314>)
 800466e:	2201      	movs	r2, #1
 8004670:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8004672:	4bb7      	ldr	r3, [pc, #732]	; (8004950 <voltage_monitor_init+0x314>)
 8004674:	2200      	movs	r2, #0
 8004676:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8004678:	4bb5      	ldr	r3, [pc, #724]	; (8004950 <voltage_monitor_init+0x314>)
 800467a:	2201      	movs	r2, #1
 800467c:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 800467e:	4bb4      	ldr	r3, [pc, #720]	; (8004950 <voltage_monitor_init+0x314>)
 8004680:	2200      	movs	r2, #0
 8004682:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 8004684:	4bb2      	ldr	r3, [pc, #712]	; (8004950 <voltage_monitor_init+0x314>)
 8004686:	f242 7210 	movw	r2, #10000	; 0x2710
 800468a:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 800468c:	4bb0      	ldr	r3, [pc, #704]	; (8004950 <voltage_monitor_init+0x314>)
 800468e:	2200      	movs	r2, #0
 8004690:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 8004692:	4baf      	ldr	r3, [pc, #700]	; (8004950 <voltage_monitor_init+0x314>)
 8004694:	2202      	movs	r2, #2
 8004696:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8004698:	4bad      	ldr	r3, [pc, #692]	; (8004950 <voltage_monitor_init+0x314>)
 800469a:	2200      	movs	r2, #0
 800469c:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 800469e:	4bac      	ldr	r3, [pc, #688]	; (8004950 <voltage_monitor_init+0x314>)
 80046a0:	2201      	movs	r2, #1
 80046a2:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 80046a4:	4baa      	ldr	r3, [pc, #680]	; (8004950 <voltage_monitor_init+0x314>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 80046aa:	4ba9      	ldr	r3, [pc, #676]	; (8004950 <voltage_monitor_init+0x314>)
 80046ac:	f242 7210 	movw	r2, #10000	; 0x2710
 80046b0:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 80046b2:	4ba7      	ldr	r3, [pc, #668]	; (8004950 <voltage_monitor_init+0x314>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 80046b8:	4ba5      	ldr	r3, [pc, #660]	; (8004950 <voltage_monitor_init+0x314>)
 80046ba:	2203      	movs	r2, #3
 80046bc:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 80046be:	4ba4      	ldr	r3, [pc, #656]	; (8004950 <voltage_monitor_init+0x314>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 80046c4:	4ba2      	ldr	r3, [pc, #648]	; (8004950 <voltage_monitor_init+0x314>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 80046cc:	4ba0      	ldr	r3, [pc, #640]	; (8004950 <voltage_monitor_init+0x314>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 80046d2:	4b9f      	ldr	r3, [pc, #636]	; (8004950 <voltage_monitor_init+0x314>)
 80046d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80046d8:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 80046da:	4b9d      	ldr	r3, [pc, #628]	; (8004950 <voltage_monitor_init+0x314>)
 80046dc:	2200      	movs	r2, #0
 80046de:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 80046e0:	4b9b      	ldr	r3, [pc, #620]	; (8004950 <voltage_monitor_init+0x314>)
 80046e2:	2204      	movs	r2, #4
 80046e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 80046e8:	4b99      	ldr	r3, [pc, #612]	; (8004950 <voltage_monitor_init+0x314>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 80046f0:	4b97      	ldr	r3, [pc, #604]	; (8004950 <voltage_monitor_init+0x314>)
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 80046f8:	4b95      	ldr	r3, [pc, #596]	; (8004950 <voltage_monitor_init+0x314>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 80046fe:	4b94      	ldr	r3, [pc, #592]	; (8004950 <voltage_monitor_init+0x314>)
 8004700:	f242 7210 	movw	r2, #10000	; 0x2710
 8004704:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8004706:	4b92      	ldr	r3, [pc, #584]	; (8004950 <voltage_monitor_init+0x314>)
 8004708:	2200      	movs	r2, #0
 800470a:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 800470c:	4b90      	ldr	r3, [pc, #576]	; (8004950 <voltage_monitor_init+0x314>)
 800470e:	2205      	movs	r2, #5
 8004710:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8004714:	4b8e      	ldr	r3, [pc, #568]	; (8004950 <voltage_monitor_init+0x314>)
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 800471c:	4b8c      	ldr	r3, [pc, #560]	; (8004950 <voltage_monitor_init+0x314>)
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8004724:	4b8a      	ldr	r3, [pc, #552]	; (8004950 <voltage_monitor_init+0x314>)
 8004726:	2200      	movs	r2, #0
 8004728:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 800472a:	4b89      	ldr	r3, [pc, #548]	; (8004950 <voltage_monitor_init+0x314>)
 800472c:	f242 7210 	movw	r2, #10000	; 0x2710
 8004730:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 8004732:	4b87      	ldr	r3, [pc, #540]	; (8004950 <voltage_monitor_init+0x314>)
 8004734:	2200      	movs	r2, #0
 8004736:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8004738:	4b85      	ldr	r3, [pc, #532]	; (8004950 <voltage_monitor_init+0x314>)
 800473a:	2206      	movs	r2, #6
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 8004740:	4b83      	ldr	r3, [pc, #524]	; (8004950 <voltage_monitor_init+0x314>)
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 8004748:	4b81      	ldr	r3, [pc, #516]	; (8004950 <voltage_monitor_init+0x314>)
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 8004750:	4b7f      	ldr	r3, [pc, #508]	; (8004950 <voltage_monitor_init+0x314>)
 8004752:	2200      	movs	r2, #0
 8004754:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8004758:	4b7d      	ldr	r3, [pc, #500]	; (8004950 <voltage_monitor_init+0x314>)
 800475a:	f242 7210 	movw	r2, #10000	; 0x2710
 800475e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 8004762:	4b7b      	ldr	r3, [pc, #492]	; (8004950 <voltage_monitor_init+0x314>)
 8004764:	2200      	movs	r2, #0
 8004766:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 800476a:	4b79      	ldr	r3, [pc, #484]	; (8004950 <voltage_monitor_init+0x314>)
 800476c:	2207      	movs	r2, #7
 800476e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 8004772:	4b77      	ldr	r3, [pc, #476]	; (8004950 <voltage_monitor_init+0x314>)
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 800477a:	4b75      	ldr	r3, [pc, #468]	; (8004950 <voltage_monitor_init+0x314>)
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 8004782:	4b73      	ldr	r3, [pc, #460]	; (8004950 <voltage_monitor_init+0x314>)
 8004784:	2200      	movs	r2, #0
 8004786:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 800478a:	4b71      	ldr	r3, [pc, #452]	; (8004950 <voltage_monitor_init+0x314>)
 800478c:	f242 7210 	movw	r2, #10000	; 0x2710
 8004790:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 8004794:	4b6e      	ldr	r3, [pc, #440]	; (8004950 <voltage_monitor_init+0x314>)
 8004796:	2200      	movs	r2, #0
 8004798:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 800479c:	4b6c      	ldr	r3, [pc, #432]	; (8004950 <voltage_monitor_init+0x314>)
 800479e:	2208      	movs	r2, #8
 80047a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 80047a4:	4b6a      	ldr	r3, [pc, #424]	; (8004950 <voltage_monitor_init+0x314>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 80047ac:	4b68      	ldr	r3, [pc, #416]	; (8004950 <voltage_monitor_init+0x314>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 80047b4:	4b66      	ldr	r3, [pc, #408]	; (8004950 <voltage_monitor_init+0x314>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 80047bc:	4b64      	ldr	r3, [pc, #400]	; (8004950 <voltage_monitor_init+0x314>)
 80047be:	f640 42b9 	movw	r2, #3257	; 0xcb9
 80047c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 80047c6:	4b62      	ldr	r3, [pc, #392]	; (8004950 <voltage_monitor_init+0x314>)
 80047c8:	f640 3283 	movw	r2, #2947	; 0xb83
 80047cc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58


	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 80047d0:	4b5f      	ldr	r3, [pc, #380]	; (8004950 <voltage_monitor_init+0x314>)
 80047d2:	2209      	movs	r2, #9
 80047d4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 80047d8:	4b5d      	ldr	r3, [pc, #372]	; (8004950 <voltage_monitor_init+0x314>)
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 80047e0:	4b5b      	ldr	r3, [pc, #364]	; (8004950 <voltage_monitor_init+0x314>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 80047e8:	4b59      	ldr	r3, [pc, #356]	; (8004950 <voltage_monitor_init+0x314>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 80047f0:	4b57      	ldr	r3, [pc, #348]	; (8004950 <voltage_monitor_init+0x314>)
 80047f2:	f640 7245 	movw	r2, #3909	; 0xf45
 80047f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 80047fa:	4b55      	ldr	r3, [pc, #340]	; (8004950 <voltage_monitor_init+0x314>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8004802:	4b53      	ldr	r3, [pc, #332]	; (8004950 <voltage_monitor_init+0x314>)
 8004804:	220a      	movs	r2, #10
 8004806:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 800480a:	4b51      	ldr	r3, [pc, #324]	; (8004950 <voltage_monitor_init+0x314>)
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 8004812:	4b4f      	ldr	r3, [pc, #316]	; (8004950 <voltage_monitor_init+0x314>)
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 800481a:	4b4d      	ldr	r3, [pc, #308]	; (8004950 <voltage_monitor_init+0x314>)
 800481c:	2200      	movs	r2, #0
 800481e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 8004822:	4b4b      	ldr	r3, [pc, #300]	; (8004950 <voltage_monitor_init+0x314>)
 8004824:	f640 7245 	movw	r2, #3909	; 0xf45
 8004828:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 800482c:	4b48      	ldr	r3, [pc, #288]	; (8004950 <voltage_monitor_init+0x314>)
 800482e:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8004832:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8004836:	4b46      	ldr	r3, [pc, #280]	; (8004950 <voltage_monitor_init+0x314>)
 8004838:	220b      	movs	r2, #11
 800483a:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 800483e:	4b44      	ldr	r3, [pc, #272]	; (8004950 <voltage_monitor_init+0x314>)
 8004840:	2200      	movs	r2, #0
 8004842:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8004846:	4b42      	ldr	r3, [pc, #264]	; (8004950 <voltage_monitor_init+0x314>)
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 800484e:	4b40      	ldr	r3, [pc, #256]	; (8004950 <voltage_monitor_init+0x314>)
 8004850:	2200      	movs	r2, #0
 8004852:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 8004856:	4b3e      	ldr	r3, [pc, #248]	; (8004950 <voltage_monitor_init+0x314>)
 8004858:	f640 72fb 	movw	r2, #4091	; 0xffb
 800485c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 8004860:	4b3b      	ldr	r3, [pc, #236]	; (8004950 <voltage_monitor_init+0x314>)
 8004862:	f640 6276 	movw	r2, #3702	; 0xe76
 8004866:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 800486a:	4b39      	ldr	r3, [pc, #228]	; (8004950 <voltage_monitor_init+0x314>)
 800486c:	220c      	movs	r2, #12
 800486e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 8004872:	4b37      	ldr	r3, [pc, #220]	; (8004950 <voltage_monitor_init+0x314>)
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 800487a:	4b35      	ldr	r3, [pc, #212]	; (8004950 <voltage_monitor_init+0x314>)
 800487c:	2200      	movs	r2, #0
 800487e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 8004882:	4b33      	ldr	r3, [pc, #204]	; (8004950 <voltage_monitor_init+0x314>)
 8004884:	2200      	movs	r2, #0
 8004886:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 800488a:	4b31      	ldr	r3, [pc, #196]	; (8004950 <voltage_monitor_init+0x314>)
 800488c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004890:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8004894:	4b2e      	ldr	r3, [pc, #184]	; (8004950 <voltage_monitor_init+0x314>)
 8004896:	2200      	movs	r2, #0
 8004898:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 800489c:	4b2c      	ldr	r3, [pc, #176]	; (8004950 <voltage_monitor_init+0x314>)
 800489e:	220d      	movs	r2, #13
 80048a0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 80048a4:	4b2a      	ldr	r3, [pc, #168]	; (8004950 <voltage_monitor_init+0x314>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 80048ac:	4b28      	ldr	r3, [pc, #160]	; (8004950 <voltage_monitor_init+0x314>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 80048b4:	4b26      	ldr	r3, [pc, #152]	; (8004950 <voltage_monitor_init+0x314>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 80048bc:	4b24      	ldr	r3, [pc, #144]	; (8004950 <voltage_monitor_init+0x314>)
 80048be:	f640 7238 	movw	r2, #3896	; 0xf38
 80048c2:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 80048c6:	4b22      	ldr	r3, [pc, #136]	; (8004950 <voltage_monitor_init+0x314>)
 80048c8:	f640 52c5 	movw	r2, #3525	; 0xdc5
 80048cc:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 80048d0:	4b1f      	ldr	r3, [pc, #124]	; (8004950 <voltage_monitor_init+0x314>)
 80048d2:	220e      	movs	r2, #14
 80048d4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 80048d8:	4b1d      	ldr	r3, [pc, #116]	; (8004950 <voltage_monitor_init+0x314>)
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 80048e0:	4b1b      	ldr	r3, [pc, #108]	; (8004950 <voltage_monitor_init+0x314>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 80048e8:	4b19      	ldr	r3, [pc, #100]	; (8004950 <voltage_monitor_init+0x314>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 80048f0:	4b17      	ldr	r3, [pc, #92]	; (8004950 <voltage_monitor_init+0x314>)
 80048f2:	f640 7245 	movw	r2, #3909	; 0xf45
 80048f6:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 80048fa:	4b15      	ldr	r3, [pc, #84]	; (8004950 <voltage_monitor_init+0x314>)
 80048fc:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8004900:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8004904:	4b12      	ldr	r3, [pc, #72]	; (8004950 <voltage_monitor_init+0x314>)
 8004906:	220f      	movs	r2, #15
 8004908:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 800490c:	4b10      	ldr	r3, [pc, #64]	; (8004950 <voltage_monitor_init+0x314>)
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8004914:	4b0e      	ldr	r3, [pc, #56]	; (8004950 <voltage_monitor_init+0x314>)
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 800491c:	4b0c      	ldr	r3, [pc, #48]	; (8004950 <voltage_monitor_init+0x314>)
 800491e:	2200      	movs	r2, #0
 8004920:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 8004924:	4b0a      	ldr	r3, [pc, #40]	; (8004950 <voltage_monitor_init+0x314>)
 8004926:	f241 0264 	movw	r2, #4196	; 0x1064
 800492a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 800492e:	4b08      	ldr	r3, [pc, #32]	; (8004950 <voltage_monitor_init+0x314>)
 8004930:	2200      	movs	r2, #0
 8004932:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8004936:	4b06      	ldr	r3, [pc, #24]	; (8004950 <voltage_monitor_init+0x314>)
 8004938:	2210      	movs	r2, #16
 800493a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 800493e:	4b04      	ldr	r3, [pc, #16]	; (8004950 <voltage_monitor_init+0x314>)
 8004940:	2200      	movs	r2, #0
 8004942:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 8004946:	4b02      	ldr	r3, [pc, #8]	; (8004950 <voltage_monitor_init+0x314>)
 8004948:	2200      	movs	r2, #0
 800494a:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 800494e:	e001      	b.n	8004954 <voltage_monitor_init+0x318>
 8004950:	24001f88 	.word	0x24001f88
	rail_monitor[RAIL_n800v].data = 0;
 8004954:	4b17      	ldr	r3, [pc, #92]	; (80049b4 <voltage_monitor_init+0x378>)
 8004956:	2200      	movs	r2, #0
 8004958:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 800495c:	4b15      	ldr	r3, [pc, #84]	; (80049b4 <voltage_monitor_init+0x378>)
 800495e:	f640 5208 	movw	r2, #3336	; 0xd08
 8004962:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 8004966:	4b13      	ldr	r3, [pc, #76]	; (80049b4 <voltage_monitor_init+0x378>)
 8004968:	f640 32ca 	movw	r2, #3018	; 0xbca
 800496c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8004970:	4b10      	ldr	r3, [pc, #64]	; (80049b4 <voltage_monitor_init+0x378>)
 8004972:	2211      	movs	r2, #17
 8004974:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 8004978:	4b0e      	ldr	r3, [pc, #56]	; (80049b4 <voltage_monitor_init+0x378>)
 800497a:	2200      	movs	r2, #0
 800497c:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 8004980:	4b0c      	ldr	r3, [pc, #48]	; (80049b4 <voltage_monitor_init+0x378>)
 8004982:	2201      	movs	r2, #1
 8004984:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 8004988:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <voltage_monitor_init+0x378>)
 800498a:	2200      	movs	r2, #0
 800498c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8004990:	4b08      	ldr	r3, [pc, #32]	; (80049b4 <voltage_monitor_init+0x378>)
 8004992:	f242 7210 	movw	r2, #10000	; 0x2710
 8004996:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 800499a:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <voltage_monitor_init+0x378>)
 800499c:	2200      	movs	r2, #0
 800499e:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 80049a2:	2301      	movs	r3, #1
 80049a4:	71fb      	strb	r3, [r7, #7]

	return status;
 80049a6:	79fb      	ldrb	r3, [r7, #7]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	24001f88 	.word	0x24001f88

080049b8 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	4603      	mov	r3, r0
 80049c0:	460a      	mov	r2, r1
 80049c2:	71fb      	strb	r3, [r7, #7]
 80049c4:	4613      	mov	r3, r2
 80049c6:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 80049c8:	2300      	movs	r3, #0
 80049ca:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 80049cc:	79fa      	ldrb	r2, [r7, #7]
 80049ce:	4909      	ldr	r1, [pc, #36]	; (80049f4 <set_rail_monitor_enable+0x3c>)
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	440b      	add	r3, r1
 80049da:	3302      	adds	r3, #2
 80049dc:	79ba      	ldrb	r2, [r7, #6]
 80049de:	701a      	strb	r2, [r3, #0]
	status = 1;
 80049e0:	2301      	movs	r3, #1
 80049e2:	73fb      	strb	r3, [r7, #15]

	return status;
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	24001f88 	.word	0x24001f88

080049f8 <set_rail_monitor>:


uint8_t set_rail_monitor() {
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08a      	sub	sp, #40	; 0x28
 80049fc:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80049fe:	2300      	movs	r3, #0
 8004a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 8004a04:	463b      	mov	r3, r7
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fe fcf6 	bl	80033f8 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8004a0c:	f107 0310 	add.w	r3, r7, #16
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fe fd21 	bl	8003458 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8004a16:	f107 0308 	add.w	r3, r7, #8
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fe fd6e 	bl	80034fc <sample_hk_adc3>
 8004a20:	897a      	ldrh	r2, [r7, #10]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[1], sizeof(uint16_t));
 8004a22:	4b25      	ldr	r3, [pc, #148]	; (8004ab8 <set_rail_monitor+0xc0>)
 8004a24:	809a      	strh	r2, [r3, #4]
 8004a26:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[0], sizeof(uint16_t));
 8004a28:	4b23      	ldr	r3, [pc, #140]	; (8004ab8 <set_rail_monitor+0xc0>)
 8004a2a:	81da      	strh	r2, [r3, #14]
 8004a2c:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 8004a2e:	4b22      	ldr	r3, [pc, #136]	; (8004ab8 <set_rail_monitor+0xc0>)
 8004a30:	831a      	strh	r2, [r3, #24]
 8004a32:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 8004a34:	4b20      	ldr	r3, [pc, #128]	; (8004ab8 <set_rail_monitor+0xc0>)
 8004a36:	845a      	strh	r2, [r3, #34]	; 0x22
 8004a38:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 8004a3a:	4b1f      	ldr	r3, [pc, #124]	; (8004ab8 <set_rail_monitor+0xc0>)
 8004a3c:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004a3e:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 8004a40:	4b1d      	ldr	r3, [pc, #116]	; (8004ab8 <set_rail_monitor+0xc0>)
 8004a42:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a44:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 8004a46:	4b1c      	ldr	r3, [pc, #112]	; (8004ab8 <set_rail_monitor+0xc0>)
 8004a48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8004a4c:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 8004a4e:	4b1a      	ldr	r3, [pc, #104]	; (8004ab8 <set_rail_monitor+0xc0>)
 8004a50:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8004a54:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 8004a56:	4b18      	ldr	r3, [pc, #96]	; (8004ab8 <set_rail_monitor+0xc0>)
 8004a58:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8004a5c:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 8004a5e:	4b16      	ldr	r3, [pc, #88]	; (8004ab8 <set_rail_monitor+0xc0>)
 8004a60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8004a64:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 8004a66:	4b14      	ldr	r3, [pc, #80]	; (8004ab8 <set_rail_monitor+0xc0>)
 8004a68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8004a6c:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 8004a6e:	4b12      	ldr	r3, [pc, #72]	; (8004ab8 <set_rail_monitor+0xc0>)
 8004a70:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8004a74:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 8004a76:	4b10      	ldr	r3, [pc, #64]	; (8004ab8 <set_rail_monitor+0xc0>)
 8004a78:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8004a7c:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 8004a7e:	4b0e      	ldr	r3, [pc, #56]	; (8004ab8 <set_rail_monitor+0xc0>)
 8004a80:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8004a84:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 8004a86:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <set_rail_monitor+0xc0>)
 8004a88:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8004a8c:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 8004a8e:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <set_rail_monitor+0xc0>)
 8004a90:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8004a94:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 8004a96:	4b08      	ldr	r3, [pc, #32]	; (8004ab8 <set_rail_monitor+0xc0>)
 8004a98:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8004a9c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 8004a9e:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <set_rail_monitor+0xc0>)
 8004aa0:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	status = 1;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 8004aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3728      	adds	r7, #40	; 0x28
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	24001f88 	.word	0x24001f88

08004abc <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
	return rail_monitor;
 8004ac0:	4b02      	ldr	r3, [pc, #8]	; (8004acc <get_rail_monitor+0x10>)
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	24001f88 	.word	0x24001f88

08004ad0 <in_range>:

uint8_t in_range(uint16_t raw, int min, int max) {
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 8004ade:	89fb      	ldrh	r3, [r7, #14]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	db05      	blt.n	8004af2 <in_range+0x22>
 8004ae6:	89fb      	ldrh	r3, [r7, #14]
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	dc01      	bgt.n	8004af2 <in_range+0x22>
		return 1;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <in_range+0x24>
	}
	return 0;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <monitor_rails>:


void monitor_rails() {
 8004b00:	b590      	push	{r4, r7, lr}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
	// Iterate through all voltage rails
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8004b06:	2300      	movs	r3, #0
 8004b08:	607b      	str	r3, [r7, #4]
 8004b0a:	e062      	b.n	8004bd2 <monitor_rails+0xd2>
		if (rail_monitor[i].is_enabled){
 8004b0c:	4935      	ldr	r1, [pc, #212]	; (8004be4 <monitor_rails+0xe4>)
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	4613      	mov	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	440b      	add	r3, r1
 8004b1a:	3302      	adds	r3, #2
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d054      	beq.n	8004bcc <monitor_rails+0xcc>
			// If current rail is not in range...
			if (!in_range(rail_monitor[i].data, rail_monitor[i].min_voltage, rail_monitor[i].max_voltage)){
 8004b22:	4930      	ldr	r1, [pc, #192]	; (8004be4 <monitor_rails+0xe4>)
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	4613      	mov	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	440b      	add	r3, r1
 8004b30:	3304      	adds	r3, #4
 8004b32:	8818      	ldrh	r0, [r3, #0]
 8004b34:	492b      	ldr	r1, [pc, #172]	; (8004be4 <monitor_rails+0xe4>)
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	440b      	add	r3, r1
 8004b42:	3308      	adds	r3, #8
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	461c      	mov	r4, r3
 8004b48:	4926      	ldr	r1, [pc, #152]	; (8004be4 <monitor_rails+0xe4>)
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	440b      	add	r3, r1
 8004b56:	3306      	adds	r3, #6
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	4621      	mov	r1, r4
 8004b5e:	f7ff ffb7 	bl	8004ad0 <in_range>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d131      	bne.n	8004bcc <monitor_rails+0xcc>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 8004b68:	491e      	ldr	r1, [pc, #120]	; (8004be4 <monitor_rails+0xe4>)
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	440b      	add	r3, r1
 8004b76:	3301      	adds	r3, #1
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	b2d8      	uxtb	r0, r3
 8004b7e:	4919      	ldr	r1, [pc, #100]	; (8004be4 <monitor_rails+0xe4>)
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	4613      	mov	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	440b      	add	r3, r1
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	4602      	mov	r2, r0
 8004b90:	701a      	strb	r2, [r3, #0]
				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 8004b92:	4914      	ldr	r1, [pc, #80]	; (8004be4 <monitor_rails+0xe4>)
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	4613      	mov	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	440b      	add	r3, r1
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	2b03      	cmp	r3, #3
 8004ba6:	d111      	bne.n	8004bcc <monitor_rails+0xcc>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 8004ba8:	490e      	ldr	r1, [pc, #56]	; (8004be4 <monitor_rails+0xe4>)
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	440b      	add	r3, r1
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 f815 	bl	8004be8 <get_rail_name_error_detail>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	707b      	strb	r3, [r7, #1]
					error.category = EC_power_supply_rail;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	703b      	strb	r3, [r7, #0]
					handle_error(error);
 8004bc6:	6838      	ldr	r0, [r7, #0]
 8004bc8:	f7fc fbe6 	bl	8001398 <handle_error>
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	607b      	str	r3, [r7, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b11      	cmp	r3, #17
 8004bd6:	dd99      	ble.n	8004b0c <monitor_rails+0xc>
				}
			}
		}
	}
}
 8004bd8:	bf00      	nop
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd90      	pop	{r4, r7, pc}
 8004be2:	bf00      	nop
 8004be4:	24001f88 	.word	0x24001f88

08004be8 <get_rail_name_error_detail>:

ERROR_DETAIL get_rail_name_error_detail(VOLTAGE_RAIL_NAME rail_name) {
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	4603      	mov	r3, r0
 8004bf0:	71fb      	strb	r3, [r7, #7]
	switch (rail_name) {
 8004bf2:	79fb      	ldrb	r3, [r7, #7]
 8004bf4:	2b11      	cmp	r3, #17
 8004bf6:	d84b      	bhi.n	8004c90 <get_rail_name_error_detail+0xa8>
 8004bf8:	a201      	add	r2, pc, #4	; (adr r2, 8004c00 <get_rail_name_error_detail+0x18>)
 8004bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfe:	bf00      	nop
 8004c00:	08004c49 	.word	0x08004c49
 8004c04:	08004c4d 	.word	0x08004c4d
 8004c08:	08004c51 	.word	0x08004c51
 8004c0c:	08004c55 	.word	0x08004c55
 8004c10:	08004c59 	.word	0x08004c59
 8004c14:	08004c5d 	.word	0x08004c5d
 8004c18:	08004c61 	.word	0x08004c61
 8004c1c:	08004c65 	.word	0x08004c65
 8004c20:	08004c69 	.word	0x08004c69
 8004c24:	08004c6d 	.word	0x08004c6d
 8004c28:	08004c71 	.word	0x08004c71
 8004c2c:	08004c75 	.word	0x08004c75
 8004c30:	08004c79 	.word	0x08004c79
 8004c34:	08004c7d 	.word	0x08004c7d
 8004c38:	08004c81 	.word	0x08004c81
 8004c3c:	08004c85 	.word	0x08004c85
 8004c40:	08004c89 	.word	0x08004c89
 8004c44:	08004c8d 	.word	0x08004c8d
	case RAIL_vsense:
		return ED_vsense;
 8004c48:	2306      	movs	r3, #6
 8004c4a:	e022      	b.n	8004c92 <get_rail_name_error_detail+0xaa>

	case RAIL_vrefint:
		return ED_vrefint;
 8004c4c:	2307      	movs	r3, #7
 8004c4e:	e020      	b.n	8004c92 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP1:
		return ED_TEMP1;
 8004c50:	2308      	movs	r3, #8
 8004c52:	e01e      	b.n	8004c92 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP2:
		return ED_TEMP2;
 8004c54:	2309      	movs	r3, #9
 8004c56:	e01c      	b.n	8004c92 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP3:
		return ED_TEMP3;
 8004c58:	230a      	movs	r3, #10
 8004c5a:	e01a      	b.n	8004c92 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP4:
		return ED_TEMP4;
 8004c5c:	230b      	movs	r3, #11
 8004c5e:	e018      	b.n	8004c92 <get_rail_name_error_detail+0xaa>

	case RAIL_busvmon:
		return ED_busvmon;
 8004c60:	230c      	movs	r3, #12
 8004c62:	e016      	b.n	8004c92 <get_rail_name_error_detail+0xaa>

	case RAIL_busimon:
		return ED_busimon;
 8004c64:	230d      	movs	r3, #13
 8004c66:	e014      	b.n	8004c92 <get_rail_name_error_detail+0xaa>

	case RAIL_2v5:
		return ED_2v5;
 8004c68:	230e      	movs	r3, #14
 8004c6a:	e012      	b.n	8004c92 <get_rail_name_error_detail+0xaa>

	case RAIL_3v3:
		return ED_3v3;
 8004c6c:	230f      	movs	r3, #15
 8004c6e:	e010      	b.n	8004c92 <get_rail_name_error_detail+0xaa>

	case RAIL_5v:
		return ED_5v;
 8004c70:	2310      	movs	r3, #16
 8004c72:	e00e      	b.n	8004c92 <get_rail_name_error_detail+0xaa>

	case RAIL_n3v3:
		return ED_n3v3;
 8004c74:	2311      	movs	r3, #17
 8004c76:	e00c      	b.n	8004c92 <get_rail_name_error_detail+0xaa>

	case RAIL_n5v:
		return ED_n5v;
 8004c78:	2312      	movs	r3, #18
 8004c7a:	e00a      	b.n	8004c92 <get_rail_name_error_detail+0xaa>

	case RAIL_15v:
		return ED_15v;
 8004c7c:	2313      	movs	r3, #19
 8004c7e:	e008      	b.n	8004c92 <get_rail_name_error_detail+0xaa>

	case RAIL_5vref:
		return ED_5vref;
 8004c80:	2314      	movs	r3, #20
 8004c82:	e006      	b.n	8004c92 <get_rail_name_error_detail+0xaa>

	case RAIL_n200v:
		return ED_n200v;
 8004c84:	2315      	movs	r3, #21
 8004c86:	e004      	b.n	8004c92 <get_rail_name_error_detail+0xaa>

	case RAIL_n800v:
		return ED_n800v;
 8004c88:	2316      	movs	r3, #22
 8004c8a:	e002      	b.n	8004c92 <get_rail_name_error_detail+0xaa>

	case RAIL_TMP1:
		return ED_TMP1;
 8004c8c:	2317      	movs	r3, #23
 8004c8e:	e000      	b.n	8004c92 <get_rail_name_error_detail+0xaa>

	default:
		return ED_UNDEFINED;
 8004c90:	231a      	movs	r3, #26
	}
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop

08004ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004cd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004ca4:	f7ff f8b2 	bl	8003e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ca8:	480c      	ldr	r0, [pc, #48]	; (8004cdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004caa:	490d      	ldr	r1, [pc, #52]	; (8004ce0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004cac:	4a0d      	ldr	r2, [pc, #52]	; (8004ce4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004cb0:	e002      	b.n	8004cb8 <LoopCopyDataInit>

08004cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cb6:	3304      	adds	r3, #4

08004cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004cbc:	d3f9      	bcc.n	8004cb2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cbe:	4a0a      	ldr	r2, [pc, #40]	; (8004ce8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004cc0:	4c0a      	ldr	r4, [pc, #40]	; (8004cec <LoopFillZerobss+0x22>)
  movs r3, #0
 8004cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cc4:	e001      	b.n	8004cca <LoopFillZerobss>

08004cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cc8:	3204      	adds	r2, #4

08004cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ccc:	d3fb      	bcc.n	8004cc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004cce:	f014 fb33 	bl	8019338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004cd2:	f7fd fdbd 	bl	8002850 <main>
  bx  lr
 8004cd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004cd8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004cdc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004ce0:	24000134 	.word	0x24000134
  ldr r2, =_sidata
 8004ce4:	0801a268 	.word	0x0801a268
  ldr r2, =_sbss
 8004ce8:	24000140 	.word	0x24000140
  ldr r4, =_ebss
 8004cec:	240069bc 	.word	0x240069bc

08004cf0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004cf0:	e7fe      	b.n	8004cf0 <ADC3_IRQHandler>
	...

08004cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cfa:	2003      	movs	r0, #3
 8004cfc:	f001 fd39 	bl	8006772 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004d00:	f008 fef4 	bl	800daec <HAL_RCC_GetSysClockFreq>
 8004d04:	4602      	mov	r2, r0
 8004d06:	4b15      	ldr	r3, [pc, #84]	; (8004d5c <HAL_Init+0x68>)
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	0a1b      	lsrs	r3, r3, #8
 8004d0c:	f003 030f 	and.w	r3, r3, #15
 8004d10:	4913      	ldr	r1, [pc, #76]	; (8004d60 <HAL_Init+0x6c>)
 8004d12:	5ccb      	ldrb	r3, [r1, r3]
 8004d14:	f003 031f 	and.w	r3, r3, #31
 8004d18:	fa22 f303 	lsr.w	r3, r2, r3
 8004d1c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d1e:	4b0f      	ldr	r3, [pc, #60]	; (8004d5c <HAL_Init+0x68>)
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	4a0e      	ldr	r2, [pc, #56]	; (8004d60 <HAL_Init+0x6c>)
 8004d28:	5cd3      	ldrb	r3, [r2, r3]
 8004d2a:	f003 031f 	and.w	r3, r3, #31
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	fa22 f303 	lsr.w	r3, r2, r3
 8004d34:	4a0b      	ldr	r2, [pc, #44]	; (8004d64 <HAL_Init+0x70>)
 8004d36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d38:	4a0b      	ldr	r2, [pc, #44]	; (8004d68 <HAL_Init+0x74>)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004d3e:	2005      	movs	r0, #5
 8004d40:	f7fe fe4e 	bl	80039e0 <HAL_InitTick>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e002      	b.n	8004d54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004d4e:	f7fe fe29 	bl	80039a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	58024400 	.word	0x58024400
 8004d60:	0801a1b4 	.word	0x0801a1b4
 8004d64:	240000c0 	.word	0x240000c0
 8004d68:	240000bc 	.word	0x240000bc

08004d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004d70:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <HAL_IncTick+0x20>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	461a      	mov	r2, r3
 8004d76:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <HAL_IncTick+0x24>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	4a04      	ldr	r2, [pc, #16]	; (8004d90 <HAL_IncTick+0x24>)
 8004d7e:	6013      	str	r3, [r2, #0]
}
 8004d80:	bf00      	nop
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	240000c8 	.word	0x240000c8
 8004d90:	2400203c 	.word	0x2400203c

08004d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  return uwTick;
 8004d98:	4b03      	ldr	r3, [pc, #12]	; (8004da8 <HAL_GetTick+0x14>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	2400203c 	.word	0x2400203c

08004dac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004db0:	4b03      	ldr	r3, [pc, #12]	; (8004dc0 <HAL_GetREVID+0x14>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	0c1b      	lsrs	r3, r3, #16
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	5c001000 	.word	0x5c001000

08004dc4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004dce:	4b07      	ldr	r3, [pc, #28]	; (8004dec <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	43db      	mvns	r3, r3
 8004dd6:	401a      	ands	r2, r3
 8004dd8:	4904      	ldr	r1, [pc, #16]	; (8004dec <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	604b      	str	r3, [r1, #4]
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	58000400 	.word	0x58000400

08004df0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	431a      	orrs	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	609a      	str	r2, [r3, #8]
}
 8004e0a:	bf00      	nop
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
 8004e1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	609a      	str	r2, [r3, #8]
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b087      	sub	sp, #28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
 8004e64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	3360      	adds	r3, #96	; 0x60
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	430b      	orrs	r3, r1
 8004e86:	431a      	orrs	r2, r3
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004e8c:	bf00      	nop
 8004e8e:	371c      	adds	r7, #28
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f003 031f 	and.w	r3, r3, #31
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	611a      	str	r2, [r3, #16]
}
 8004ebe:	bf00      	nop
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b087      	sub	sp, #28
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	3360      	adds	r3, #96	; 0x60
 8004eda:	461a      	mov	r2, r3
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	601a      	str	r2, [r3, #0]
  }
}
 8004ef4:	bf00      	nop
 8004ef6:	371c      	adds	r7, #28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004f14:	2301      	movs	r3, #1
 8004f16:	e000      	b.n	8004f1a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b087      	sub	sp, #28
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	60f8      	str	r0, [r7, #12]
 8004f2e:	60b9      	str	r1, [r7, #8]
 8004f30:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	3330      	adds	r3, #48	; 0x30
 8004f36:	461a      	mov	r2, r3
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	0a1b      	lsrs	r3, r3, #8
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	f003 030c 	and.w	r3, r3, #12
 8004f42:	4413      	add	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	f003 031f 	and.w	r3, r3, #31
 8004f50:	211f      	movs	r1, #31
 8004f52:	fa01 f303 	lsl.w	r3, r1, r3
 8004f56:	43db      	mvns	r3, r3
 8004f58:	401a      	ands	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	0e9b      	lsrs	r3, r3, #26
 8004f5e:	f003 011f 	and.w	r1, r3, #31
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f003 031f 	and.w	r3, r3, #31
 8004f68:	fa01 f303 	lsl.w	r3, r1, r3
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004f72:	bf00      	nop
 8004f74:	371c      	adds	r7, #28
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
 8004f86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f023 0203 	bic.w	r2, r3, #3
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	60da      	str	r2, [r3, #12]
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	3314      	adds	r3, #20
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	0e5b      	lsrs	r3, r3, #25
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	4413      	add	r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	0d1b      	lsrs	r3, r3, #20
 8004fcc:	f003 031f 	and.w	r3, r3, #31
 8004fd0:	2107      	movs	r1, #7
 8004fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd6:	43db      	mvns	r3, r3
 8004fd8:	401a      	ands	r2, r3
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	0d1b      	lsrs	r3, r3, #20
 8004fde:	f003 031f 	and.w	r3, r3, #31
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004fee:	bf00      	nop
 8004ff0:	371c      	adds	r7, #28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
	...

08004ffc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005014:	43db      	mvns	r3, r3
 8005016:	401a      	ands	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f003 0318 	and.w	r3, r3, #24
 800501e:	4908      	ldr	r1, [pc, #32]	; (8005040 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005020:	40d9      	lsrs	r1, r3
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	400b      	ands	r3, r1
 8005026:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800502a:	431a      	orrs	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8005032:	bf00      	nop
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	000fffff 	.word	0x000fffff

08005044 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f003 031f 	and.w	r3, r3, #31
}
 8005054:	4618      	mov	r0, r3
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	4b04      	ldr	r3, [pc, #16]	; (8005080 <LL_ADC_DisableDeepPowerDown+0x20>)
 800506e:	4013      	ands	r3, r2
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6093      	str	r3, [r2, #8]
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	5fffffc0 	.word	0x5fffffc0

08005084 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005098:	d101      	bne.n	800509e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800509a:	2301      	movs	r3, #1
 800509c:	e000      	b.n	80050a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	4b05      	ldr	r3, [pc, #20]	; (80050d0 <LL_ADC_EnableInternalRegulator+0x24>)
 80050ba:	4013      	ands	r3, r2
 80050bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	6fffffc0 	.word	0x6fffffc0

080050d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050e8:	d101      	bne.n	80050ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e000      	b.n	80050f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	4b05      	ldr	r3, [pc, #20]	; (8005120 <LL_ADC_Enable+0x24>)
 800510a:	4013      	ands	r3, r2
 800510c:	f043 0201 	orr.w	r2, r3, #1
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	7fffffc0 	.word	0x7fffffc0

08005124 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	4b05      	ldr	r3, [pc, #20]	; (8005148 <LL_ADC_Disable+0x24>)
 8005132:	4013      	ands	r3, r2
 8005134:	f043 0202 	orr.w	r2, r3, #2
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	7fffffc0 	.word	0x7fffffc0

0800514c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <LL_ADC_IsEnabled+0x18>
 8005160:	2301      	movs	r3, #1
 8005162:	e000      	b.n	8005166 <LL_ADC_IsEnabled+0x1a>
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b02      	cmp	r3, #2
 8005184:	d101      	bne.n	800518a <LL_ADC_IsDisableOngoing+0x18>
 8005186:	2301      	movs	r3, #1
 8005188:	e000      	b.n	800518c <LL_ADC_IsDisableOngoing+0x1a>
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	4b05      	ldr	r3, [pc, #20]	; (80051bc <LL_ADC_REG_StartConversion+0x24>)
 80051a6:	4013      	ands	r3, r2
 80051a8:	f043 0204 	orr.w	r2, r3, #4
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	7fffffc0 	.word	0x7fffffc0

080051c0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d101      	bne.n	80051d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80051d4:	2301      	movs	r3, #1
 80051d6:	e000      	b.n	80051da <LL_ADC_REG_IsConversionOngoing+0x1a>
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b083      	sub	sp, #12
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	2b08      	cmp	r3, #8
 80051f8:	d101      	bne.n	80051fe <LL_ADC_INJ_IsConversionOngoing+0x18>
 80051fa:	2301      	movs	r3, #1
 80051fc:	e000      	b.n	8005200 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800520c:	b590      	push	{r4, r7, lr}
 800520e:	b089      	sub	sp, #36	; 0x24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005214:	2300      	movs	r3, #0
 8005216:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005218:	2300      	movs	r3, #0
 800521a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e18f      	b.n	8005546 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005230:	2b00      	cmp	r3, #0
 8005232:	d109      	bne.n	8005248 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7fb fb89 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4618      	mov	r0, r3
 800524e:	f7ff ff19 	bl	8005084 <LL_ADC_IsDeepPowerDownEnabled>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d004      	beq.n	8005262 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff feff 	bl	8005060 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4618      	mov	r0, r3
 8005268:	f7ff ff34 	bl	80050d4 <LL_ADC_IsInternalRegulatorEnabled>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d114      	bne.n	800529c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff ff18 	bl	80050ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800527c:	4b87      	ldr	r3, [pc, #540]	; (800549c <HAL_ADC_Init+0x290>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	099b      	lsrs	r3, r3, #6
 8005282:	4a87      	ldr	r2, [pc, #540]	; (80054a0 <HAL_ADC_Init+0x294>)
 8005284:	fba2 2303 	umull	r2, r3, r2, r3
 8005288:	099b      	lsrs	r3, r3, #6
 800528a:	3301      	adds	r3, #1
 800528c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800528e:	e002      	b.n	8005296 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	3b01      	subs	r3, #1
 8005294:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1f9      	bne.n	8005290 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7ff ff17 	bl	80050d4 <LL_ADC_IsInternalRegulatorEnabled>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10d      	bne.n	80052c8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b0:	f043 0210 	orr.w	r2, r3, #16
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052bc:	f043 0201 	orr.w	r2, r3, #1
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7ff ff77 	bl	80051c0 <LL_ADC_REG_IsConversionOngoing>
 80052d2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d8:	f003 0310 	and.w	r3, r3, #16
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f040 8129 	bne.w	8005534 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f040 8125 	bne.w	8005534 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ee:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80052f2:	f043 0202 	orr.w	r2, r3, #2
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4618      	mov	r0, r3
 8005300:	f7ff ff24 	bl	800514c <LL_ADC_IsEnabled>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d136      	bne.n	8005378 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a65      	ldr	r2, [pc, #404]	; (80054a4 <HAL_ADC_Init+0x298>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d004      	beq.n	800531e <HAL_ADC_Init+0x112>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a63      	ldr	r2, [pc, #396]	; (80054a8 <HAL_ADC_Init+0x29c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d10e      	bne.n	800533c <HAL_ADC_Init+0x130>
 800531e:	4861      	ldr	r0, [pc, #388]	; (80054a4 <HAL_ADC_Init+0x298>)
 8005320:	f7ff ff14 	bl	800514c <LL_ADC_IsEnabled>
 8005324:	4604      	mov	r4, r0
 8005326:	4860      	ldr	r0, [pc, #384]	; (80054a8 <HAL_ADC_Init+0x29c>)
 8005328:	f7ff ff10 	bl	800514c <LL_ADC_IsEnabled>
 800532c:	4603      	mov	r3, r0
 800532e:	4323      	orrs	r3, r4
 8005330:	2b00      	cmp	r3, #0
 8005332:	bf0c      	ite	eq
 8005334:	2301      	moveq	r3, #1
 8005336:	2300      	movne	r3, #0
 8005338:	b2db      	uxtb	r3, r3
 800533a:	e008      	b.n	800534e <HAL_ADC_Init+0x142>
 800533c:	485b      	ldr	r0, [pc, #364]	; (80054ac <HAL_ADC_Init+0x2a0>)
 800533e:	f7ff ff05 	bl	800514c <LL_ADC_IsEnabled>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	bf0c      	ite	eq
 8005348:	2301      	moveq	r3, #1
 800534a:	2300      	movne	r3, #0
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d012      	beq.n	8005378 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a53      	ldr	r2, [pc, #332]	; (80054a4 <HAL_ADC_Init+0x298>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d004      	beq.n	8005366 <HAL_ADC_Init+0x15a>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a51      	ldr	r2, [pc, #324]	; (80054a8 <HAL_ADC_Init+0x29c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d101      	bne.n	800536a <HAL_ADC_Init+0x15e>
 8005366:	4a52      	ldr	r2, [pc, #328]	; (80054b0 <HAL_ADC_Init+0x2a4>)
 8005368:	e000      	b.n	800536c <HAL_ADC_Init+0x160>
 800536a:	4a52      	ldr	r2, [pc, #328]	; (80054b4 <HAL_ADC_Init+0x2a8>)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	4619      	mov	r1, r3
 8005372:	4610      	mov	r0, r2
 8005374:	f7ff fd3c 	bl	8004df0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005378:	f7ff fd18 	bl	8004dac <HAL_GetREVID>
 800537c:	4603      	mov	r3, r0
 800537e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005382:	4293      	cmp	r3, r2
 8005384:	d914      	bls.n	80053b0 <HAL_ADC_Init+0x1a4>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	2b10      	cmp	r3, #16
 800538c:	d110      	bne.n	80053b0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	7d5b      	ldrb	r3, [r3, #21]
 8005392:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005398:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800539e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	7f1b      	ldrb	r3, [r3, #28]
 80053a4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80053a6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80053a8:	f043 030c 	orr.w	r3, r3, #12
 80053ac:	61bb      	str	r3, [r7, #24]
 80053ae:	e00d      	b.n	80053cc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	7d5b      	ldrb	r3, [r3, #21]
 80053b4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80053ba:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80053c0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	7f1b      	ldrb	r3, [r3, #28]
 80053c6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80053c8:	4313      	orrs	r3, r2
 80053ca:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	7f1b      	ldrb	r3, [r3, #28]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d106      	bne.n	80053e2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	3b01      	subs	r3, #1
 80053da:	045b      	lsls	r3, r3, #17
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	4313      	orrs	r3, r2
 80053e0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d009      	beq.n	80053fe <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68da      	ldr	r2, [r3, #12]
 8005404:	4b2c      	ldr	r3, [pc, #176]	; (80054b8 <HAL_ADC_Init+0x2ac>)
 8005406:	4013      	ands	r3, r2
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6812      	ldr	r2, [r2, #0]
 800540c:	69b9      	ldr	r1, [r7, #24]
 800540e:	430b      	orrs	r3, r1
 8005410:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff fed2 	bl	80051c0 <LL_ADC_REG_IsConversionOngoing>
 800541c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4618      	mov	r0, r3
 8005424:	f7ff fedf 	bl	80051e6 <LL_ADC_INJ_IsConversionOngoing>
 8005428:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d15f      	bne.n	80054f0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d15c      	bne.n	80054f0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	7d1b      	ldrb	r3, [r3, #20]
 800543a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8005440:	4313      	orrs	r3, r2
 8005442:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68da      	ldr	r2, [r3, #12]
 800544a:	4b1c      	ldr	r3, [pc, #112]	; (80054bc <HAL_ADC_Init+0x2b0>)
 800544c:	4013      	ands	r3, r2
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	6812      	ldr	r2, [r2, #0]
 8005452:	69b9      	ldr	r1, [r7, #24]
 8005454:	430b      	orrs	r3, r1
 8005456:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800545e:	2b01      	cmp	r3, #1
 8005460:	d130      	bne.n	80054c4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	691a      	ldr	r2, [r3, #16]
 800546e:	4b14      	ldr	r3, [pc, #80]	; (80054c0 <HAL_ADC_Init+0x2b4>)
 8005470:	4013      	ands	r3, r2
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005476:	3a01      	subs	r2, #1
 8005478:	0411      	lsls	r1, r2, #16
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800547e:	4311      	orrs	r1, r2
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005484:	4311      	orrs	r1, r2
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800548a:	430a      	orrs	r2, r1
 800548c:	431a      	orrs	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0201 	orr.w	r2, r2, #1
 8005496:	611a      	str	r2, [r3, #16]
 8005498:	e01c      	b.n	80054d4 <HAL_ADC_Init+0x2c8>
 800549a:	bf00      	nop
 800549c:	240000bc 	.word	0x240000bc
 80054a0:	053e2d63 	.word	0x053e2d63
 80054a4:	40022000 	.word	0x40022000
 80054a8:	40022100 	.word	0x40022100
 80054ac:	58026000 	.word	0x58026000
 80054b0:	40022300 	.word	0x40022300
 80054b4:	58026300 	.word	0x58026300
 80054b8:	fff0c003 	.word	0xfff0c003
 80054bc:	ffffbffc 	.word	0xffffbffc
 80054c0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691a      	ldr	r2, [r3, #16]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f022 0201 	bic.w	r2, r2, #1
 80054d2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fdec 	bl	80060c8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d10c      	bne.n	8005512 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fe:	f023 010f 	bic.w	r1, r3, #15
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	1e5a      	subs	r2, r3, #1
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	631a      	str	r2, [r3, #48]	; 0x30
 8005510:	e007      	b.n	8005522 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 020f 	bic.w	r2, r2, #15
 8005520:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005526:	f023 0303 	bic.w	r3, r3, #3
 800552a:	f043 0201 	orr.w	r2, r3, #1
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	655a      	str	r2, [r3, #84]	; 0x54
 8005532:	e007      	b.n	8005544 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005538:	f043 0210 	orr.w	r2, r3, #16
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005544:	7ffb      	ldrb	r3, [r7, #31]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3724      	adds	r7, #36	; 0x24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd90      	pop	{r4, r7, pc}
 800554e:	bf00      	nop

08005550 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a55      	ldr	r2, [pc, #340]	; (80056b8 <HAL_ADC_Start_DMA+0x168>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d004      	beq.n	8005570 <HAL_ADC_Start_DMA+0x20>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a54      	ldr	r2, [pc, #336]	; (80056bc <HAL_ADC_Start_DMA+0x16c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d101      	bne.n	8005574 <HAL_ADC_Start_DMA+0x24>
 8005570:	4b53      	ldr	r3, [pc, #332]	; (80056c0 <HAL_ADC_Start_DMA+0x170>)
 8005572:	e000      	b.n	8005576 <HAL_ADC_Start_DMA+0x26>
 8005574:	4b53      	ldr	r3, [pc, #332]	; (80056c4 <HAL_ADC_Start_DMA+0x174>)
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff fd64 	bl	8005044 <LL_ADC_GetMultimode>
 800557c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f7ff fe1c 	bl	80051c0 <LL_ADC_REG_IsConversionOngoing>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	f040 808c 	bne.w	80056a8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005596:	2b01      	cmp	r3, #1
 8005598:	d101      	bne.n	800559e <HAL_ADC_Start_DMA+0x4e>
 800559a:	2302      	movs	r3, #2
 800559c:	e087      	b.n	80056ae <HAL_ADC_Start_DMA+0x15e>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d005      	beq.n	80055b8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	2b05      	cmp	r3, #5
 80055b0:	d002      	beq.n	80055b8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	2b09      	cmp	r3, #9
 80055b6:	d170      	bne.n	800569a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f000 fc07 	bl	8005dcc <ADC_Enable>
 80055be:	4603      	mov	r3, r0
 80055c0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80055c2:	7dfb      	ldrb	r3, [r7, #23]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d163      	bne.n	8005690 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055cc:	4b3e      	ldr	r3, [pc, #248]	; (80056c8 <HAL_ADC_Start_DMA+0x178>)
 80055ce:	4013      	ands	r3, r2
 80055d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a37      	ldr	r2, [pc, #220]	; (80056bc <HAL_ADC_Start_DMA+0x16c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d002      	beq.n	80055e8 <HAL_ADC_Start_DMA+0x98>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	e000      	b.n	80055ea <HAL_ADC_Start_DMA+0x9a>
 80055e8:	4b33      	ldr	r3, [pc, #204]	; (80056b8 <HAL_ADC_Start_DMA+0x168>)
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	6812      	ldr	r2, [r2, #0]
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d002      	beq.n	80055f8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d105      	bne.n	8005604 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005608:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d006      	beq.n	800561e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005614:	f023 0206 	bic.w	r2, r3, #6
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	659a      	str	r2, [r3, #88]	; 0x58
 800561c:	e002      	b.n	8005624 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005628:	4a28      	ldr	r2, [pc, #160]	; (80056cc <HAL_ADC_Start_DMA+0x17c>)
 800562a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005630:	4a27      	ldr	r2, [pc, #156]	; (80056d0 <HAL_ADC_Start_DMA+0x180>)
 8005632:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005638:	4a26      	ldr	r2, [pc, #152]	; (80056d4 <HAL_ADC_Start_DMA+0x184>)
 800563a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	221c      	movs	r2, #28
 8005642:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f042 0210 	orr.w	r2, r2, #16
 800565a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005664:	4619      	mov	r1, r3
 8005666:	4610      	mov	r0, r2
 8005668:	f7ff fc89 	bl	8004f7e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	3340      	adds	r3, #64	; 0x40
 8005676:	4619      	mov	r1, r3
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f002 f886 	bl	800778c <HAL_DMA_Start_IT>
 8005680:	4603      	mov	r3, r0
 8005682:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4618      	mov	r0, r3
 800568a:	f7ff fd85 	bl	8005198 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800568e:	e00d      	b.n	80056ac <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8005698:	e008      	b.n	80056ac <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80056a6:	e001      	b.n	80056ac <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80056a8:	2302      	movs	r3, #2
 80056aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80056ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	40022000 	.word	0x40022000
 80056bc:	40022100 	.word	0x40022100
 80056c0:	40022300 	.word	0x40022300
 80056c4:	58026300 	.word	0x58026300
 80056c8:	fffff0fe 	.word	0xfffff0fe
 80056cc:	08005f9f 	.word	0x08005f9f
 80056d0:	08006077 	.word	0x08006077
 80056d4:	08006093 	.word	0x08006093

080056d8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005714:	b590      	push	{r4, r7, lr}
 8005716:	b0a1      	sub	sp, #132	; 0x84
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800571e:	2300      	movs	r3, #0
 8005720:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005724:	2300      	movs	r3, #0
 8005726:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	4a65      	ldr	r2, [pc, #404]	; (80058c4 <HAL_ADC_ConfigChannel+0x1b0>)
 800572e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005736:	2b01      	cmp	r3, #1
 8005738:	d101      	bne.n	800573e <HAL_ADC_ConfigChannel+0x2a>
 800573a:	2302      	movs	r3, #2
 800573c:	e32e      	b.n	8005d9c <HAL_ADC_ConfigChannel+0x688>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4618      	mov	r0, r3
 800574c:	f7ff fd38 	bl	80051c0 <LL_ADC_REG_IsConversionOngoing>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	f040 8313 	bne.w	8005d7e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	db2c      	blt.n	80057ba <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005768:	2b00      	cmp	r3, #0
 800576a:	d108      	bne.n	800577e <HAL_ADC_ConfigChannel+0x6a>
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	0e9b      	lsrs	r3, r3, #26
 8005772:	f003 031f 	and.w	r3, r3, #31
 8005776:	2201      	movs	r2, #1
 8005778:	fa02 f303 	lsl.w	r3, r2, r3
 800577c:	e016      	b.n	80057ac <HAL_ADC_ConfigChannel+0x98>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005786:	fa93 f3a3 	rbit	r3, r3
 800578a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800578c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800578e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005790:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8005796:	2320      	movs	r3, #32
 8005798:	e003      	b.n	80057a2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800579a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800579c:	fab3 f383 	clz	r3, r3
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	f003 031f 	and.w	r3, r3, #31
 80057a6:	2201      	movs	r2, #1
 80057a8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	6812      	ldr	r2, [r2, #0]
 80057b0:	69d1      	ldr	r1, [r2, #28]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6812      	ldr	r2, [r2, #0]
 80057b6:	430b      	orrs	r3, r1
 80057b8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6818      	ldr	r0, [r3, #0]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	6859      	ldr	r1, [r3, #4]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	461a      	mov	r2, r3
 80057c8:	f7ff fbad 	bl	8004f26 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7ff fcf5 	bl	80051c0 <LL_ADC_REG_IsConversionOngoing>
 80057d6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4618      	mov	r0, r3
 80057de:	f7ff fd02 	bl	80051e6 <LL_ADC_INJ_IsConversionOngoing>
 80057e2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80057e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f040 80b8 	bne.w	800595c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80057ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f040 80b4 	bne.w	800595c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6818      	ldr	r0, [r3, #0]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	6819      	ldr	r1, [r3, #0]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	461a      	mov	r2, r3
 8005802:	f7ff fbcf 	bl	8004fa4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005806:	4b30      	ldr	r3, [pc, #192]	; (80058c8 <HAL_ADC_ConfigChannel+0x1b4>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800580e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005812:	d10b      	bne.n	800582c <HAL_ADC_ConfigChannel+0x118>
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	695a      	ldr	r2, [r3, #20]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	089b      	lsrs	r3, r3, #2
 8005820:	f003 0307 	and.w	r3, r3, #7
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	fa02 f303 	lsl.w	r3, r2, r3
 800582a:	e01d      	b.n	8005868 <HAL_ADC_ConfigChannel+0x154>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f003 0310 	and.w	r3, r3, #16
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10b      	bne.n	8005852 <HAL_ADC_ConfigChannel+0x13e>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	695a      	ldr	r2, [r3, #20]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	089b      	lsrs	r3, r3, #2
 8005846:	f003 0307 	and.w	r3, r3, #7
 800584a:	005b      	lsls	r3, r3, #1
 800584c:	fa02 f303 	lsl.w	r3, r2, r3
 8005850:	e00a      	b.n	8005868 <HAL_ADC_ConfigChannel+0x154>
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	695a      	ldr	r2, [r3, #20]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	089b      	lsrs	r3, r3, #2
 800585e:	f003 0304 	and.w	r3, r3, #4
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	fa02 f303 	lsl.w	r3, r2, r3
 8005868:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	2b04      	cmp	r3, #4
 8005870:	d02c      	beq.n	80058cc <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6818      	ldr	r0, [r3, #0]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	6919      	ldr	r1, [r3, #16]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005880:	f7ff faea 	bl	8004e58 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6818      	ldr	r0, [r3, #0]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	6919      	ldr	r1, [r3, #16]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	7e5b      	ldrb	r3, [r3, #25]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d102      	bne.n	800589a <HAL_ADC_ConfigChannel+0x186>
 8005894:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005898:	e000      	b.n	800589c <HAL_ADC_ConfigChannel+0x188>
 800589a:	2300      	movs	r3, #0
 800589c:	461a      	mov	r2, r3
 800589e:	f7ff fb14 	bl	8004eca <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6818      	ldr	r0, [r3, #0]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	6919      	ldr	r1, [r3, #16]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	7e1b      	ldrb	r3, [r3, #24]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d102      	bne.n	80058b8 <HAL_ADC_ConfigChannel+0x1a4>
 80058b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80058b6:	e000      	b.n	80058ba <HAL_ADC_ConfigChannel+0x1a6>
 80058b8:	2300      	movs	r3, #0
 80058ba:	461a      	mov	r2, r3
 80058bc:	f7ff faec 	bl	8004e98 <LL_ADC_SetDataRightShift>
 80058c0:	e04c      	b.n	800595c <HAL_ADC_ConfigChannel+0x248>
 80058c2:	bf00      	nop
 80058c4:	47ff0000 	.word	0x47ff0000
 80058c8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	069b      	lsls	r3, r3, #26
 80058dc:	429a      	cmp	r2, r3
 80058de:	d107      	bne.n	80058f0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80058ee:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	069b      	lsls	r3, r3, #26
 8005900:	429a      	cmp	r2, r3
 8005902:	d107      	bne.n	8005914 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005912:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800591a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	069b      	lsls	r3, r3, #26
 8005924:	429a      	cmp	r2, r3
 8005926:	d107      	bne.n	8005938 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005936:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800593e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	069b      	lsls	r3, r3, #26
 8005948:	429a      	cmp	r2, r3
 800594a:	d107      	bne.n	800595c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800595a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4618      	mov	r0, r3
 8005962:	f7ff fbf3 	bl	800514c <LL_ADC_IsEnabled>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	f040 8211 	bne.w	8005d90 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6818      	ldr	r0, [r3, #0]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	6819      	ldr	r1, [r3, #0]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	461a      	mov	r2, r3
 800597c:	f7ff fb3e 	bl	8004ffc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	4aa1      	ldr	r2, [pc, #644]	; (8005c0c <HAL_ADC_ConfigChannel+0x4f8>)
 8005986:	4293      	cmp	r3, r2
 8005988:	f040 812e 	bne.w	8005be8 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10b      	bne.n	80059b4 <HAL_ADC_ConfigChannel+0x2a0>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	0e9b      	lsrs	r3, r3, #26
 80059a2:	3301      	adds	r3, #1
 80059a4:	f003 031f 	and.w	r3, r3, #31
 80059a8:	2b09      	cmp	r3, #9
 80059aa:	bf94      	ite	ls
 80059ac:	2301      	movls	r3, #1
 80059ae:	2300      	movhi	r3, #0
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	e019      	b.n	80059e8 <HAL_ADC_ConfigChannel+0x2d4>
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059bc:	fa93 f3a3 	rbit	r3, r3
 80059c0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80059c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80059c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80059cc:	2320      	movs	r3, #32
 80059ce:	e003      	b.n	80059d8 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80059d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059d2:	fab3 f383 	clz	r3, r3
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	3301      	adds	r3, #1
 80059da:	f003 031f 	and.w	r3, r3, #31
 80059de:	2b09      	cmp	r3, #9
 80059e0:	bf94      	ite	ls
 80059e2:	2301      	movls	r3, #1
 80059e4:	2300      	movhi	r3, #0
 80059e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d079      	beq.n	8005ae0 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d107      	bne.n	8005a08 <HAL_ADC_ConfigChannel+0x2f4>
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	0e9b      	lsrs	r3, r3, #26
 80059fe:	3301      	adds	r3, #1
 8005a00:	069b      	lsls	r3, r3, #26
 8005a02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a06:	e015      	b.n	8005a34 <HAL_ADC_ConfigChannel+0x320>
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a10:	fa93 f3a3 	rbit	r3, r3
 8005a14:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a18:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8005a20:	2320      	movs	r3, #32
 8005a22:	e003      	b.n	8005a2c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8005a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a26:	fab3 f383 	clz	r3, r3
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	069b      	lsls	r3, r3, #26
 8005a30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d109      	bne.n	8005a54 <HAL_ADC_ConfigChannel+0x340>
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	0e9b      	lsrs	r3, r3, #26
 8005a46:	3301      	adds	r3, #1
 8005a48:	f003 031f 	and.w	r3, r3, #31
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a52:	e017      	b.n	8005a84 <HAL_ADC_ConfigChannel+0x370>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a5c:	fa93 f3a3 	rbit	r3, r3
 8005a60:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a64:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8005a6c:	2320      	movs	r3, #32
 8005a6e:	e003      	b.n	8005a78 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8005a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a72:	fab3 f383 	clz	r3, r3
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	3301      	adds	r3, #1
 8005a7a:	f003 031f 	and.w	r3, r3, #31
 8005a7e:	2101      	movs	r1, #1
 8005a80:	fa01 f303 	lsl.w	r3, r1, r3
 8005a84:	ea42 0103 	orr.w	r1, r2, r3
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10a      	bne.n	8005aaa <HAL_ADC_ConfigChannel+0x396>
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	0e9b      	lsrs	r3, r3, #26
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	f003 021f 	and.w	r2, r3, #31
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	4413      	add	r3, r2
 8005aa6:	051b      	lsls	r3, r3, #20
 8005aa8:	e018      	b.n	8005adc <HAL_ADC_ConfigChannel+0x3c8>
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab2:	fa93 f3a3 	rbit	r3, r3
 8005ab6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8005ac2:	2320      	movs	r3, #32
 8005ac4:	e003      	b.n	8005ace <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac8:	fab3 f383 	clz	r3, r3
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	3301      	adds	r3, #1
 8005ad0:	f003 021f 	and.w	r2, r3, #31
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	4413      	add	r3, r2
 8005ada:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005adc:	430b      	orrs	r3, r1
 8005ade:	e07e      	b.n	8005bde <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d107      	bne.n	8005afc <HAL_ADC_ConfigChannel+0x3e8>
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	0e9b      	lsrs	r3, r3, #26
 8005af2:	3301      	adds	r3, #1
 8005af4:	069b      	lsls	r3, r3, #26
 8005af6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005afa:	e015      	b.n	8005b28 <HAL_ADC_ConfigChannel+0x414>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b04:	fa93 f3a3 	rbit	r3, r3
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8005b14:	2320      	movs	r3, #32
 8005b16:	e003      	b.n	8005b20 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8005b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1a:	fab3 f383 	clz	r3, r3
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	3301      	adds	r3, #1
 8005b22:	069b      	lsls	r3, r3, #26
 8005b24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d109      	bne.n	8005b48 <HAL_ADC_ConfigChannel+0x434>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	0e9b      	lsrs	r3, r3, #26
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	f003 031f 	and.w	r3, r3, #31
 8005b40:	2101      	movs	r1, #1
 8005b42:	fa01 f303 	lsl.w	r3, r1, r3
 8005b46:	e017      	b.n	8005b78 <HAL_ADC_ConfigChannel+0x464>
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	fa93 f3a3 	rbit	r3, r3
 8005b54:	61bb      	str	r3, [r7, #24]
  return result;
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8005b60:	2320      	movs	r3, #32
 8005b62:	e003      	b.n	8005b6c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	fab3 f383 	clz	r3, r3
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	f003 031f 	and.w	r3, r3, #31
 8005b72:	2101      	movs	r1, #1
 8005b74:	fa01 f303 	lsl.w	r3, r1, r3
 8005b78:	ea42 0103 	orr.w	r1, r2, r3
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10d      	bne.n	8005ba4 <HAL_ADC_ConfigChannel+0x490>
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	0e9b      	lsrs	r3, r3, #26
 8005b8e:	3301      	adds	r3, #1
 8005b90:	f003 021f 	and.w	r2, r3, #31
 8005b94:	4613      	mov	r3, r2
 8005b96:	005b      	lsls	r3, r3, #1
 8005b98:	4413      	add	r3, r2
 8005b9a:	3b1e      	subs	r3, #30
 8005b9c:	051b      	lsls	r3, r3, #20
 8005b9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005ba2:	e01b      	b.n	8005bdc <HAL_ADC_ConfigChannel+0x4c8>
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	fa93 f3a3 	rbit	r3, r3
 8005bb0:	60fb      	str	r3, [r7, #12]
  return result;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8005bbc:	2320      	movs	r3, #32
 8005bbe:	e003      	b.n	8005bc8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	fab3 f383 	clz	r3, r3
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	3301      	adds	r3, #1
 8005bca:	f003 021f 	and.w	r2, r3, #31
 8005bce:	4613      	mov	r3, r2
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	4413      	add	r3, r2
 8005bd4:	3b1e      	subs	r3, #30
 8005bd6:	051b      	lsls	r3, r3, #20
 8005bd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005bdc:	430b      	orrs	r3, r1
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	6892      	ldr	r2, [r2, #8]
 8005be2:	4619      	mov	r1, r3
 8005be4:	f7ff f9de 	bl	8004fa4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f280 80cf 	bge.w	8005d90 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a06      	ldr	r2, [pc, #24]	; (8005c10 <HAL_ADC_ConfigChannel+0x4fc>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d004      	beq.n	8005c06 <HAL_ADC_ConfigChannel+0x4f2>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a04      	ldr	r2, [pc, #16]	; (8005c14 <HAL_ADC_ConfigChannel+0x500>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d10a      	bne.n	8005c1c <HAL_ADC_ConfigChannel+0x508>
 8005c06:	4b04      	ldr	r3, [pc, #16]	; (8005c18 <HAL_ADC_ConfigChannel+0x504>)
 8005c08:	e009      	b.n	8005c1e <HAL_ADC_ConfigChannel+0x50a>
 8005c0a:	bf00      	nop
 8005c0c:	47ff0000 	.word	0x47ff0000
 8005c10:	40022000 	.word	0x40022000
 8005c14:	40022100 	.word	0x40022100
 8005c18:	40022300 	.word	0x40022300
 8005c1c:	4b61      	ldr	r3, [pc, #388]	; (8005da4 <HAL_ADC_ConfigChannel+0x690>)
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7ff f90c 	bl	8004e3c <LL_ADC_GetCommonPathInternalCh>
 8005c24:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a5f      	ldr	r2, [pc, #380]	; (8005da8 <HAL_ADC_ConfigChannel+0x694>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d004      	beq.n	8005c3a <HAL_ADC_ConfigChannel+0x526>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a5d      	ldr	r2, [pc, #372]	; (8005dac <HAL_ADC_ConfigChannel+0x698>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d10e      	bne.n	8005c58 <HAL_ADC_ConfigChannel+0x544>
 8005c3a:	485b      	ldr	r0, [pc, #364]	; (8005da8 <HAL_ADC_ConfigChannel+0x694>)
 8005c3c:	f7ff fa86 	bl	800514c <LL_ADC_IsEnabled>
 8005c40:	4604      	mov	r4, r0
 8005c42:	485a      	ldr	r0, [pc, #360]	; (8005dac <HAL_ADC_ConfigChannel+0x698>)
 8005c44:	f7ff fa82 	bl	800514c <LL_ADC_IsEnabled>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	4323      	orrs	r3, r4
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	bf0c      	ite	eq
 8005c50:	2301      	moveq	r3, #1
 8005c52:	2300      	movne	r3, #0
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	e008      	b.n	8005c6a <HAL_ADC_ConfigChannel+0x556>
 8005c58:	4855      	ldr	r0, [pc, #340]	; (8005db0 <HAL_ADC_ConfigChannel+0x69c>)
 8005c5a:	f7ff fa77 	bl	800514c <LL_ADC_IsEnabled>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	bf0c      	ite	eq
 8005c64:	2301      	moveq	r3, #1
 8005c66:	2300      	movne	r3, #0
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d07d      	beq.n	8005d6a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a50      	ldr	r2, [pc, #320]	; (8005db4 <HAL_ADC_ConfigChannel+0x6a0>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d130      	bne.n	8005cda <HAL_ADC_ConfigChannel+0x5c6>
 8005c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d12b      	bne.n	8005cda <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a4a      	ldr	r2, [pc, #296]	; (8005db0 <HAL_ADC_ConfigChannel+0x69c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	f040 8081 	bne.w	8005d90 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a45      	ldr	r2, [pc, #276]	; (8005da8 <HAL_ADC_ConfigChannel+0x694>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d004      	beq.n	8005ca2 <HAL_ADC_ConfigChannel+0x58e>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a43      	ldr	r2, [pc, #268]	; (8005dac <HAL_ADC_ConfigChannel+0x698>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d101      	bne.n	8005ca6 <HAL_ADC_ConfigChannel+0x592>
 8005ca2:	4a45      	ldr	r2, [pc, #276]	; (8005db8 <HAL_ADC_ConfigChannel+0x6a4>)
 8005ca4:	e000      	b.n	8005ca8 <HAL_ADC_ConfigChannel+0x594>
 8005ca6:	4a3f      	ldr	r2, [pc, #252]	; (8005da4 <HAL_ADC_ConfigChannel+0x690>)
 8005ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005caa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	f7ff f8b0 	bl	8004e16 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005cb6:	4b41      	ldr	r3, [pc, #260]	; (8005dbc <HAL_ADC_ConfigChannel+0x6a8>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	099b      	lsrs	r3, r3, #6
 8005cbc:	4a40      	ldr	r2, [pc, #256]	; (8005dc0 <HAL_ADC_ConfigChannel+0x6ac>)
 8005cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc2:	099b      	lsrs	r3, r3, #6
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005cca:	e002      	b.n	8005cd2 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1f9      	bne.n	8005ccc <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005cd8:	e05a      	b.n	8005d90 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a39      	ldr	r2, [pc, #228]	; (8005dc4 <HAL_ADC_ConfigChannel+0x6b0>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d11e      	bne.n	8005d22 <HAL_ADC_ConfigChannel+0x60e>
 8005ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ce6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d119      	bne.n	8005d22 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a2f      	ldr	r2, [pc, #188]	; (8005db0 <HAL_ADC_ConfigChannel+0x69c>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d14b      	bne.n	8005d90 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a2a      	ldr	r2, [pc, #168]	; (8005da8 <HAL_ADC_ConfigChannel+0x694>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d004      	beq.n	8005d0c <HAL_ADC_ConfigChannel+0x5f8>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a29      	ldr	r2, [pc, #164]	; (8005dac <HAL_ADC_ConfigChannel+0x698>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d101      	bne.n	8005d10 <HAL_ADC_ConfigChannel+0x5fc>
 8005d0c:	4a2a      	ldr	r2, [pc, #168]	; (8005db8 <HAL_ADC_ConfigChannel+0x6a4>)
 8005d0e:	e000      	b.n	8005d12 <HAL_ADC_ConfigChannel+0x5fe>
 8005d10:	4a24      	ldr	r2, [pc, #144]	; (8005da4 <HAL_ADC_ConfigChannel+0x690>)
 8005d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d18:	4619      	mov	r1, r3
 8005d1a:	4610      	mov	r0, r2
 8005d1c:	f7ff f87b 	bl	8004e16 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d20:	e036      	b.n	8005d90 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a28      	ldr	r2, [pc, #160]	; (8005dc8 <HAL_ADC_ConfigChannel+0x6b4>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d131      	bne.n	8005d90 <HAL_ADC_ConfigChannel+0x67c>
 8005d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d12c      	bne.n	8005d90 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a1d      	ldr	r2, [pc, #116]	; (8005db0 <HAL_ADC_ConfigChannel+0x69c>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d127      	bne.n	8005d90 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a18      	ldr	r2, [pc, #96]	; (8005da8 <HAL_ADC_ConfigChannel+0x694>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d004      	beq.n	8005d54 <HAL_ADC_ConfigChannel+0x640>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a17      	ldr	r2, [pc, #92]	; (8005dac <HAL_ADC_ConfigChannel+0x698>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d101      	bne.n	8005d58 <HAL_ADC_ConfigChannel+0x644>
 8005d54:	4a18      	ldr	r2, [pc, #96]	; (8005db8 <HAL_ADC_ConfigChannel+0x6a4>)
 8005d56:	e000      	b.n	8005d5a <HAL_ADC_ConfigChannel+0x646>
 8005d58:	4a12      	ldr	r2, [pc, #72]	; (8005da4 <HAL_ADC_ConfigChannel+0x690>)
 8005d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005d60:	4619      	mov	r1, r3
 8005d62:	4610      	mov	r0, r2
 8005d64:	f7ff f857 	bl	8004e16 <LL_ADC_SetCommonPathInternalCh>
 8005d68:	e012      	b.n	8005d90 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d6e:	f043 0220 	orr.w	r2, r3, #32
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005d7c:	e008      	b.n	8005d90 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d82:	f043 0220 	orr.w	r2, r3, #32
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005d98:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3784      	adds	r7, #132	; 0x84
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd90      	pop	{r4, r7, pc}
 8005da4:	58026300 	.word	0x58026300
 8005da8:	40022000 	.word	0x40022000
 8005dac:	40022100 	.word	0x40022100
 8005db0:	58026000 	.word	0x58026000
 8005db4:	cb840000 	.word	0xcb840000
 8005db8:	40022300 	.word	0x40022300
 8005dbc:	240000bc 	.word	0x240000bc
 8005dc0:	053e2d63 	.word	0x053e2d63
 8005dc4:	c7520000 	.word	0xc7520000
 8005dc8:	cfb80000 	.word	0xcfb80000

08005dcc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7ff f9b7 	bl	800514c <LL_ADC_IsEnabled>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d16e      	bne.n	8005ec2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689a      	ldr	r2, [r3, #8]
 8005dea:	4b38      	ldr	r3, [pc, #224]	; (8005ecc <ADC_Enable+0x100>)
 8005dec:	4013      	ands	r3, r2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00d      	beq.n	8005e0e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df6:	f043 0210 	orr.w	r2, r3, #16
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e02:	f043 0201 	orr.w	r2, r3, #1
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e05a      	b.n	8005ec4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7ff f972 	bl	80050fc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005e18:	f7fe ffbc 	bl	8004d94 <HAL_GetTick>
 8005e1c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a2b      	ldr	r2, [pc, #172]	; (8005ed0 <ADC_Enable+0x104>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d004      	beq.n	8005e32 <ADC_Enable+0x66>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a29      	ldr	r2, [pc, #164]	; (8005ed4 <ADC_Enable+0x108>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d101      	bne.n	8005e36 <ADC_Enable+0x6a>
 8005e32:	4b29      	ldr	r3, [pc, #164]	; (8005ed8 <ADC_Enable+0x10c>)
 8005e34:	e000      	b.n	8005e38 <ADC_Enable+0x6c>
 8005e36:	4b29      	ldr	r3, [pc, #164]	; (8005edc <ADC_Enable+0x110>)
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7ff f903 	bl	8005044 <LL_ADC_GetMultimode>
 8005e3e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a23      	ldr	r2, [pc, #140]	; (8005ed4 <ADC_Enable+0x108>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d002      	beq.n	8005e50 <ADC_Enable+0x84>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	e000      	b.n	8005e52 <ADC_Enable+0x86>
 8005e50:	4b1f      	ldr	r3, [pc, #124]	; (8005ed0 <ADC_Enable+0x104>)
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	6812      	ldr	r2, [r2, #0]
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d02c      	beq.n	8005eb4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d130      	bne.n	8005ec2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e60:	e028      	b.n	8005eb4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff f970 	bl	800514c <LL_ADC_IsEnabled>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d104      	bne.n	8005e7c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7ff f940 	bl	80050fc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005e7c:	f7fe ff8a 	bl	8004d94 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d914      	bls.n	8005eb4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d00d      	beq.n	8005eb4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9c:	f043 0210 	orr.w	r2, r3, #16
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea8:	f043 0201 	orr.w	r2, r3, #1
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e007      	b.n	8005ec4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d1cf      	bne.n	8005e62 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	8000003f 	.word	0x8000003f
 8005ed0:	40022000 	.word	0x40022000
 8005ed4:	40022100 	.word	0x40022100
 8005ed8:	40022300 	.word	0x40022300
 8005edc:	58026300 	.word	0x58026300

08005ee0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7ff f940 	bl	8005172 <LL_ADC_IsDisableOngoing>
 8005ef2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7ff f927 	bl	800514c <LL_ADC_IsEnabled>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d047      	beq.n	8005f94 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d144      	bne.n	8005f94 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f003 030d 	and.w	r3, r3, #13
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d10c      	bne.n	8005f32 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7ff f901 	bl	8005124 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2203      	movs	r2, #3
 8005f28:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005f2a:	f7fe ff33 	bl	8004d94 <HAL_GetTick>
 8005f2e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f30:	e029      	b.n	8005f86 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f36:	f043 0210 	orr.w	r2, r3, #16
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f42:	f043 0201 	orr.w	r2, r3, #1
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e023      	b.n	8005f96 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005f4e:	f7fe ff21 	bl	8004d94 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d914      	bls.n	8005f86 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00d      	beq.n	8005f86 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6e:	f043 0210 	orr.w	r2, r3, #16
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f7a:	f043 0201 	orr.w	r2, r3, #1
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e007      	b.n	8005f96 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1dc      	bne.n	8005f4e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d14b      	bne.n	8006050 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fbc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0308 	and.w	r3, r3, #8
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d021      	beq.n	8006016 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fe ff92 	bl	8004f00 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d032      	beq.n	8006048 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d12b      	bne.n	8006048 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d11f      	bne.n	8006048 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600c:	f043 0201 	orr.w	r2, r3, #1
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	655a      	str	r2, [r3, #84]	; 0x54
 8006014:	e018      	b.n	8006048 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	f003 0303 	and.w	r3, r3, #3
 8006020:	2b00      	cmp	r3, #0
 8006022:	d111      	bne.n	8006048 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006028:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d105      	bne.n	8006048 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006040:	f043 0201 	orr.w	r2, r3, #1
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f7ff fb45 	bl	80056d8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800604e:	e00e      	b.n	800606e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006054:	f003 0310 	and.w	r3, r3, #16
 8006058:	2b00      	cmp	r3, #0
 800605a:	d003      	beq.n	8006064 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f7ff fb4f 	bl	8005700 <HAL_ADC_ErrorCallback>
}
 8006062:	e004      	b.n	800606e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	4798      	blx	r3
}
 800606e:	bf00      	nop
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b084      	sub	sp, #16
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006082:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f7ff fb31 	bl	80056ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800608a:	bf00      	nop
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b084      	sub	sp, #16
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b0:	f043 0204 	orr.w	r2, r3, #4
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f7ff fb21 	bl	8005700 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80060be:	bf00      	nop
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
	...

080060c8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a7a      	ldr	r2, [pc, #488]	; (80062c0 <ADC_ConfigureBoostMode+0x1f8>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d004      	beq.n	80060e4 <ADC_ConfigureBoostMode+0x1c>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a79      	ldr	r2, [pc, #484]	; (80062c4 <ADC_ConfigureBoostMode+0x1fc>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d109      	bne.n	80060f8 <ADC_ConfigureBoostMode+0x30>
 80060e4:	4b78      	ldr	r3, [pc, #480]	; (80062c8 <ADC_ConfigureBoostMode+0x200>)
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	bf14      	ite	ne
 80060f0:	2301      	movne	r3, #1
 80060f2:	2300      	moveq	r3, #0
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	e008      	b.n	800610a <ADC_ConfigureBoostMode+0x42>
 80060f8:	4b74      	ldr	r3, [pc, #464]	; (80062cc <ADC_ConfigureBoostMode+0x204>)
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006100:	2b00      	cmp	r3, #0
 8006102:	bf14      	ite	ne
 8006104:	2301      	movne	r3, #1
 8006106:	2300      	moveq	r3, #0
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d01c      	beq.n	8006148 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800610e:	f007 fe67 	bl	800dde0 <HAL_RCC_GetHCLKFreq>
 8006112:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800611c:	d010      	beq.n	8006140 <ADC_ConfigureBoostMode+0x78>
 800611e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006122:	d873      	bhi.n	800620c <ADC_ConfigureBoostMode+0x144>
 8006124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006128:	d002      	beq.n	8006130 <ADC_ConfigureBoostMode+0x68>
 800612a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800612e:	d16d      	bne.n	800620c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	0c1b      	lsrs	r3, r3, #16
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	fbb2 f3f3 	udiv	r3, r2, r3
 800613c:	60fb      	str	r3, [r7, #12]
        break;
 800613e:	e068      	b.n	8006212 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	089b      	lsrs	r3, r3, #2
 8006144:	60fb      	str	r3, [r7, #12]
        break;
 8006146:	e064      	b.n	8006212 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006148:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800614c:	f04f 0100 	mov.w	r1, #0
 8006150:	f009 f8ee 	bl	800f330 <HAL_RCCEx_GetPeriphCLKFreq>
 8006154:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800615e:	d051      	beq.n	8006204 <ADC_ConfigureBoostMode+0x13c>
 8006160:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006164:	d854      	bhi.n	8006210 <ADC_ConfigureBoostMode+0x148>
 8006166:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800616a:	d047      	beq.n	80061fc <ADC_ConfigureBoostMode+0x134>
 800616c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006170:	d84e      	bhi.n	8006210 <ADC_ConfigureBoostMode+0x148>
 8006172:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006176:	d03d      	beq.n	80061f4 <ADC_ConfigureBoostMode+0x12c>
 8006178:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800617c:	d848      	bhi.n	8006210 <ADC_ConfigureBoostMode+0x148>
 800617e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006182:	d033      	beq.n	80061ec <ADC_ConfigureBoostMode+0x124>
 8006184:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006188:	d842      	bhi.n	8006210 <ADC_ConfigureBoostMode+0x148>
 800618a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800618e:	d029      	beq.n	80061e4 <ADC_ConfigureBoostMode+0x11c>
 8006190:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006194:	d83c      	bhi.n	8006210 <ADC_ConfigureBoostMode+0x148>
 8006196:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800619a:	d01a      	beq.n	80061d2 <ADC_ConfigureBoostMode+0x10a>
 800619c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80061a0:	d836      	bhi.n	8006210 <ADC_ConfigureBoostMode+0x148>
 80061a2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80061a6:	d014      	beq.n	80061d2 <ADC_ConfigureBoostMode+0x10a>
 80061a8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80061ac:	d830      	bhi.n	8006210 <ADC_ConfigureBoostMode+0x148>
 80061ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061b2:	d00e      	beq.n	80061d2 <ADC_ConfigureBoostMode+0x10a>
 80061b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061b8:	d82a      	bhi.n	8006210 <ADC_ConfigureBoostMode+0x148>
 80061ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80061be:	d008      	beq.n	80061d2 <ADC_ConfigureBoostMode+0x10a>
 80061c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80061c4:	d824      	bhi.n	8006210 <ADC_ConfigureBoostMode+0x148>
 80061c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80061ca:	d002      	beq.n	80061d2 <ADC_ConfigureBoostMode+0x10a>
 80061cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061d0:	d11e      	bne.n	8006210 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	0c9b      	lsrs	r3, r3, #18
 80061d8:	005b      	lsls	r3, r3, #1
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e0:	60fb      	str	r3, [r7, #12]
        break;
 80061e2:	e016      	b.n	8006212 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	091b      	lsrs	r3, r3, #4
 80061e8:	60fb      	str	r3, [r7, #12]
        break;
 80061ea:	e012      	b.n	8006212 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	095b      	lsrs	r3, r3, #5
 80061f0:	60fb      	str	r3, [r7, #12]
        break;
 80061f2:	e00e      	b.n	8006212 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	099b      	lsrs	r3, r3, #6
 80061f8:	60fb      	str	r3, [r7, #12]
        break;
 80061fa:	e00a      	b.n	8006212 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	09db      	lsrs	r3, r3, #7
 8006200:	60fb      	str	r3, [r7, #12]
        break;
 8006202:	e006      	b.n	8006212 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	0a1b      	lsrs	r3, r3, #8
 8006208:	60fb      	str	r3, [r7, #12]
        break;
 800620a:	e002      	b.n	8006212 <ADC_ConfigureBoostMode+0x14a>
        break;
 800620c:	bf00      	nop
 800620e:	e000      	b.n	8006212 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006210:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006212:	f7fe fdcb 	bl	8004dac <HAL_GetREVID>
 8006216:	4603      	mov	r3, r0
 8006218:	f241 0203 	movw	r2, #4099	; 0x1003
 800621c:	4293      	cmp	r3, r2
 800621e:	d815      	bhi.n	800624c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4a2b      	ldr	r2, [pc, #172]	; (80062d0 <ADC_ConfigureBoostMode+0x208>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d908      	bls.n	800623a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689a      	ldr	r2, [r3, #8]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006236:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006238:	e03e      	b.n	80062b8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006248:	609a      	str	r2, [r3, #8]
}
 800624a:	e035      	b.n	80062b8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	085b      	lsrs	r3, r3, #1
 8006250:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	4a1f      	ldr	r2, [pc, #124]	; (80062d4 <ADC_ConfigureBoostMode+0x20c>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d808      	bhi.n	800626c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006268:	609a      	str	r2, [r3, #8]
}
 800626a:	e025      	b.n	80062b8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4a1a      	ldr	r2, [pc, #104]	; (80062d8 <ADC_ConfigureBoostMode+0x210>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d80a      	bhi.n	800628a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006286:	609a      	str	r2, [r3, #8]
}
 8006288:	e016      	b.n	80062b8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4a13      	ldr	r2, [pc, #76]	; (80062dc <ADC_ConfigureBoostMode+0x214>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d80a      	bhi.n	80062a8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062a4:	609a      	str	r2, [r3, #8]
}
 80062a6:	e007      	b.n	80062b8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689a      	ldr	r2, [r3, #8]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80062b6:	609a      	str	r2, [r3, #8]
}
 80062b8:	bf00      	nop
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	40022000 	.word	0x40022000
 80062c4:	40022100 	.word	0x40022100
 80062c8:	40022300 	.word	0x40022300
 80062cc:	58026300 	.word	0x58026300
 80062d0:	01312d00 	.word	0x01312d00
 80062d4:	005f5e10 	.word	0x005f5e10
 80062d8:	00bebc20 	.word	0x00bebc20
 80062dc:	017d7840 	.word	0x017d7840

080062e0 <LL_ADC_IsEnabled>:
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d101      	bne.n	80062f8 <LL_ADC_IsEnabled+0x18>
 80062f4:	2301      	movs	r3, #1
 80062f6:	e000      	b.n	80062fa <LL_ADC_IsEnabled+0x1a>
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
	...

08006308 <LL_ADC_StartCalibration>:
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	689a      	ldr	r2, [r3, #8]
 8006318:	4b09      	ldr	r3, [pc, #36]	; (8006340 <LL_ADC_StartCalibration+0x38>)
 800631a:	4013      	ands	r3, r2
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006328:	430a      	orrs	r2, r1
 800632a:	4313      	orrs	r3, r2
 800632c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	609a      	str	r2, [r3, #8]
}
 8006334:	bf00      	nop
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	3ffeffc0 	.word	0x3ffeffc0

08006344 <LL_ADC_IsCalibrationOnGoing>:
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006354:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006358:	d101      	bne.n	800635e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800635a:	2301      	movs	r3, #1
 800635c:	e000      	b.n	8006360 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <LL_ADC_REG_IsConversionOngoing>:
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f003 0304 	and.w	r3, r3, #4
 800637c:	2b04      	cmp	r3, #4
 800637e:	d101      	bne.n	8006384 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006380:	2301      	movs	r3, #1
 8006382:	e000      	b.n	8006386 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
	...

08006394 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80063a0:	2300      	movs	r3, #0
 80063a2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d101      	bne.n	80063b2 <HAL_ADCEx_Calibration_Start+0x1e>
 80063ae:	2302      	movs	r3, #2
 80063b0:	e04c      	b.n	800644c <HAL_ADCEx_Calibration_Start+0xb8>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f7ff fd90 	bl	8005ee0 <ADC_Disable>
 80063c0:	4603      	mov	r3, r0
 80063c2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80063c4:	7dfb      	ldrb	r3, [r7, #23]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d135      	bne.n	8006436 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063ce:	4b21      	ldr	r3, [pc, #132]	; (8006454 <HAL_ADCEx_Calibration_Start+0xc0>)
 80063d0:	4013      	ands	r3, r2
 80063d2:	f043 0202 	orr.w	r2, r3, #2
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	68b9      	ldr	r1, [r7, #8]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7ff ff90 	bl	8006308 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80063e8:	e014      	b.n	8006414 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	3301      	adds	r3, #1
 80063ee:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	4a19      	ldr	r2, [pc, #100]	; (8006458 <HAL_ADCEx_Calibration_Start+0xc4>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d30d      	bcc.n	8006414 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063fc:	f023 0312 	bic.w	r3, r3, #18
 8006400:	f043 0210 	orr.w	r2, r3, #16
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e01b      	b.n	800644c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4618      	mov	r0, r3
 800641a:	f7ff ff93 	bl	8006344 <LL_ADC_IsCalibrationOnGoing>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1e2      	bne.n	80063ea <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006428:	f023 0303 	bic.w	r3, r3, #3
 800642c:	f043 0201 	orr.w	r2, r3, #1
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	655a      	str	r2, [r3, #84]	; 0x54
 8006434:	e005      	b.n	8006442 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800643a:	f043 0210 	orr.w	r2, r3, #16
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800644a:	7dfb      	ldrb	r3, [r7, #23]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3718      	adds	r7, #24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	ffffeefd 	.word	0xffffeefd
 8006458:	25c3f800 	.word	0x25c3f800

0800645c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800645c:	b590      	push	{r4, r7, lr}
 800645e:	b09f      	sub	sp, #124	; 0x7c
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006466:	2300      	movs	r3, #0
 8006468:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006472:	2b01      	cmp	r3, #1
 8006474:	d101      	bne.n	800647a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006476:	2302      	movs	r3, #2
 8006478:	e0be      	b.n	80065f8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006482:	2300      	movs	r3, #0
 8006484:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006486:	2300      	movs	r3, #0
 8006488:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a5c      	ldr	r2, [pc, #368]	; (8006600 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d102      	bne.n	800649a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006494:	4b5b      	ldr	r3, [pc, #364]	; (8006604 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006496:	60bb      	str	r3, [r7, #8]
 8006498:	e001      	b.n	800649e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800649a:	2300      	movs	r3, #0
 800649c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10b      	bne.n	80064bc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a8:	f043 0220 	orr.w	r2, r3, #32
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e09d      	b.n	80065f8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	4618      	mov	r0, r3
 80064c0:	f7ff ff54 	bl	800636c <LL_ADC_REG_IsConversionOngoing>
 80064c4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7ff ff4e 	bl	800636c <LL_ADC_REG_IsConversionOngoing>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d17f      	bne.n	80065d6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80064d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d17c      	bne.n	80065d6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a47      	ldr	r2, [pc, #284]	; (8006600 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d004      	beq.n	80064f0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a46      	ldr	r2, [pc, #280]	; (8006604 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d101      	bne.n	80064f4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80064f0:	4b45      	ldr	r3, [pc, #276]	; (8006608 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80064f2:	e000      	b.n	80064f6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80064f4:	4b45      	ldr	r3, [pc, #276]	; (800660c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80064f6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d039      	beq.n	8006574 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	431a      	orrs	r2, r3
 800650e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006510:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a3a      	ldr	r2, [pc, #232]	; (8006600 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d004      	beq.n	8006526 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a38      	ldr	r2, [pc, #224]	; (8006604 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d10e      	bne.n	8006544 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006526:	4836      	ldr	r0, [pc, #216]	; (8006600 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006528:	f7ff feda 	bl	80062e0 <LL_ADC_IsEnabled>
 800652c:	4604      	mov	r4, r0
 800652e:	4835      	ldr	r0, [pc, #212]	; (8006604 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006530:	f7ff fed6 	bl	80062e0 <LL_ADC_IsEnabled>
 8006534:	4603      	mov	r3, r0
 8006536:	4323      	orrs	r3, r4
 8006538:	2b00      	cmp	r3, #0
 800653a:	bf0c      	ite	eq
 800653c:	2301      	moveq	r3, #1
 800653e:	2300      	movne	r3, #0
 8006540:	b2db      	uxtb	r3, r3
 8006542:	e008      	b.n	8006556 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8006544:	4832      	ldr	r0, [pc, #200]	; (8006610 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006546:	f7ff fecb 	bl	80062e0 <LL_ADC_IsEnabled>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	bf0c      	ite	eq
 8006550:	2301      	moveq	r3, #1
 8006552:	2300      	movne	r3, #0
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d047      	beq.n	80065ea <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800655a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800655c:	689a      	ldr	r2, [r3, #8]
 800655e:	4b2d      	ldr	r3, [pc, #180]	; (8006614 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006560:	4013      	ands	r3, r2
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	6811      	ldr	r1, [r2, #0]
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	6892      	ldr	r2, [r2, #8]
 800656a:	430a      	orrs	r2, r1
 800656c:	431a      	orrs	r2, r3
 800656e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006570:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006572:	e03a      	b.n	80065ea <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800657c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800657e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a1e      	ldr	r2, [pc, #120]	; (8006600 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d004      	beq.n	8006594 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a1d      	ldr	r2, [pc, #116]	; (8006604 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d10e      	bne.n	80065b2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8006594:	481a      	ldr	r0, [pc, #104]	; (8006600 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006596:	f7ff fea3 	bl	80062e0 <LL_ADC_IsEnabled>
 800659a:	4604      	mov	r4, r0
 800659c:	4819      	ldr	r0, [pc, #100]	; (8006604 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800659e:	f7ff fe9f 	bl	80062e0 <LL_ADC_IsEnabled>
 80065a2:	4603      	mov	r3, r0
 80065a4:	4323      	orrs	r3, r4
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	bf0c      	ite	eq
 80065aa:	2301      	moveq	r3, #1
 80065ac:	2300      	movne	r3, #0
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	e008      	b.n	80065c4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80065b2:	4817      	ldr	r0, [pc, #92]	; (8006610 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80065b4:	f7ff fe94 	bl	80062e0 <LL_ADC_IsEnabled>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	bf0c      	ite	eq
 80065be:	2301      	moveq	r3, #1
 80065c0:	2300      	movne	r3, #0
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d010      	beq.n	80065ea <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80065c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ca:	689a      	ldr	r2, [r3, #8]
 80065cc:	4b11      	ldr	r3, [pc, #68]	; (8006614 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80065ce:	4013      	ands	r3, r2
 80065d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065d2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80065d4:	e009      	b.n	80065ea <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065da:	f043 0220 	orr.w	r2, r3, #32
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80065e8:	e000      	b.n	80065ec <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80065ea:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80065f4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	377c      	adds	r7, #124	; 0x7c
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd90      	pop	{r4, r7, pc}
 8006600:	40022000 	.word	0x40022000
 8006604:	40022100 	.word	0x40022100
 8006608:	40022300 	.word	0x40022300
 800660c:	58026300 	.word	0x58026300
 8006610:	58026000 	.word	0x58026000
 8006614:	fffff0e0 	.word	0xfffff0e0

08006618 <__NVIC_SetPriorityGrouping>:
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f003 0307 	and.w	r3, r3, #7
 8006626:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006628:	4b0b      	ldr	r3, [pc, #44]	; (8006658 <__NVIC_SetPriorityGrouping+0x40>)
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006634:	4013      	ands	r3, r2
 8006636:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006640:	4b06      	ldr	r3, [pc, #24]	; (800665c <__NVIC_SetPriorityGrouping+0x44>)
 8006642:	4313      	orrs	r3, r2
 8006644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006646:	4a04      	ldr	r2, [pc, #16]	; (8006658 <__NVIC_SetPriorityGrouping+0x40>)
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	60d3      	str	r3, [r2, #12]
}
 800664c:	bf00      	nop
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	e000ed00 	.word	0xe000ed00
 800665c:	05fa0000 	.word	0x05fa0000

08006660 <__NVIC_GetPriorityGrouping>:
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006664:	4b04      	ldr	r3, [pc, #16]	; (8006678 <__NVIC_GetPriorityGrouping+0x18>)
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	0a1b      	lsrs	r3, r3, #8
 800666a:	f003 0307 	and.w	r3, r3, #7
}
 800666e:	4618      	mov	r0, r3
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	e000ed00 	.word	0xe000ed00

0800667c <__NVIC_EnableIRQ>:
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	4603      	mov	r3, r0
 8006684:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800668a:	2b00      	cmp	r3, #0
 800668c:	db0b      	blt.n	80066a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800668e:	88fb      	ldrh	r3, [r7, #6]
 8006690:	f003 021f 	and.w	r2, r3, #31
 8006694:	4907      	ldr	r1, [pc, #28]	; (80066b4 <__NVIC_EnableIRQ+0x38>)
 8006696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800669a:	095b      	lsrs	r3, r3, #5
 800669c:	2001      	movs	r0, #1
 800669e:	fa00 f202 	lsl.w	r2, r0, r2
 80066a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80066a6:	bf00      	nop
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	e000e100 	.word	0xe000e100

080066b8 <__NVIC_SetPriority>:
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	4603      	mov	r3, r0
 80066c0:	6039      	str	r1, [r7, #0]
 80066c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80066c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	db0a      	blt.n	80066e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	490c      	ldr	r1, [pc, #48]	; (8006704 <__NVIC_SetPriority+0x4c>)
 80066d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066d6:	0112      	lsls	r2, r2, #4
 80066d8:	b2d2      	uxtb	r2, r2
 80066da:	440b      	add	r3, r1
 80066dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80066e0:	e00a      	b.n	80066f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	4908      	ldr	r1, [pc, #32]	; (8006708 <__NVIC_SetPriority+0x50>)
 80066e8:	88fb      	ldrh	r3, [r7, #6]
 80066ea:	f003 030f 	and.w	r3, r3, #15
 80066ee:	3b04      	subs	r3, #4
 80066f0:	0112      	lsls	r2, r2, #4
 80066f2:	b2d2      	uxtb	r2, r2
 80066f4:	440b      	add	r3, r1
 80066f6:	761a      	strb	r2, [r3, #24]
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	e000e100 	.word	0xe000e100
 8006708:	e000ed00 	.word	0xe000ed00

0800670c <NVIC_EncodePriority>:
{
 800670c:	b480      	push	{r7}
 800670e:	b089      	sub	sp, #36	; 0x24
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f003 0307 	and.w	r3, r3, #7
 800671e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	f1c3 0307 	rsb	r3, r3, #7
 8006726:	2b04      	cmp	r3, #4
 8006728:	bf28      	it	cs
 800672a:	2304      	movcs	r3, #4
 800672c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	3304      	adds	r3, #4
 8006732:	2b06      	cmp	r3, #6
 8006734:	d902      	bls.n	800673c <NVIC_EncodePriority+0x30>
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	3b03      	subs	r3, #3
 800673a:	e000      	b.n	800673e <NVIC_EncodePriority+0x32>
 800673c:	2300      	movs	r3, #0
 800673e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	fa02 f303 	lsl.w	r3, r2, r3
 800674a:	43da      	mvns	r2, r3
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	401a      	ands	r2, r3
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006754:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	fa01 f303 	lsl.w	r3, r1, r3
 800675e:	43d9      	mvns	r1, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006764:	4313      	orrs	r3, r2
}
 8006766:	4618      	mov	r0, r3
 8006768:	3724      	adds	r7, #36	; 0x24
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b082      	sub	sp, #8
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7ff ff4c 	bl	8006618 <__NVIC_SetPriorityGrouping>
}
 8006780:	bf00      	nop
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	4603      	mov	r3, r0
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
 8006794:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006796:	f7ff ff63 	bl	8006660 <__NVIC_GetPriorityGrouping>
 800679a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	68b9      	ldr	r1, [r7, #8]
 80067a0:	6978      	ldr	r0, [r7, #20]
 80067a2:	f7ff ffb3 	bl	800670c <NVIC_EncodePriority>
 80067a6:	4602      	mov	r2, r0
 80067a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80067ac:	4611      	mov	r1, r2
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7ff ff82 	bl	80066b8 <__NVIC_SetPriority>
}
 80067b4:	bf00      	nop
 80067b6:	3718      	adds	r7, #24
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	4603      	mov	r3, r0
 80067c4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff ff56 	bl	800667c <__NVIC_EnableIRQ>
}
 80067d0:	bf00      	nop
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80067d8:	b480      	push	{r7}
 80067da:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80067dc:	f3bf 8f5f 	dmb	sy
}
 80067e0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80067e2:	4b07      	ldr	r3, [pc, #28]	; (8006800 <HAL_MPU_Disable+0x28>)
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	4a06      	ldr	r2, [pc, #24]	; (8006800 <HAL_MPU_Disable+0x28>)
 80067e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067ec:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80067ee:	4b05      	ldr	r3, [pc, #20]	; (8006804 <HAL_MPU_Disable+0x2c>)
 80067f0:	2200      	movs	r2, #0
 80067f2:	605a      	str	r2, [r3, #4]
}
 80067f4:	bf00      	nop
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	e000ed00 	.word	0xe000ed00
 8006804:	e000ed90 	.word	0xe000ed90

08006808 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006810:	4a0b      	ldr	r2, [pc, #44]	; (8006840 <HAL_MPU_Enable+0x38>)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f043 0301 	orr.w	r3, r3, #1
 8006818:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800681a:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <HAL_MPU_Enable+0x3c>)
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	4a09      	ldr	r2, [pc, #36]	; (8006844 <HAL_MPU_Enable+0x3c>)
 8006820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006824:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006826:	f3bf 8f4f 	dsb	sy
}
 800682a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800682c:	f3bf 8f6f 	isb	sy
}
 8006830:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006832:	bf00      	nop
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	e000ed90 	.word	0xe000ed90
 8006844:	e000ed00 	.word	0xe000ed00

08006848 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	785a      	ldrb	r2, [r3, #1]
 8006854:	4b1b      	ldr	r3, [pc, #108]	; (80068c4 <HAL_MPU_ConfigRegion+0x7c>)
 8006856:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006858:	4b1a      	ldr	r3, [pc, #104]	; (80068c4 <HAL_MPU_ConfigRegion+0x7c>)
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	4a19      	ldr	r2, [pc, #100]	; (80068c4 <HAL_MPU_ConfigRegion+0x7c>)
 800685e:	f023 0301 	bic.w	r3, r3, #1
 8006862:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006864:	4a17      	ldr	r2, [pc, #92]	; (80068c4 <HAL_MPU_ConfigRegion+0x7c>)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	7b1b      	ldrb	r3, [r3, #12]
 8006870:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	7adb      	ldrb	r3, [r3, #11]
 8006876:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006878:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	7a9b      	ldrb	r3, [r3, #10]
 800687e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006880:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	7b5b      	ldrb	r3, [r3, #13]
 8006886:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006888:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	7b9b      	ldrb	r3, [r3, #14]
 800688e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006890:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	7bdb      	ldrb	r3, [r3, #15]
 8006896:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006898:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	7a5b      	ldrb	r3, [r3, #9]
 800689e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80068a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	7a1b      	ldrb	r3, [r3, #8]
 80068a6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80068a8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	7812      	ldrb	r2, [r2, #0]
 80068ae:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80068b0:	4a04      	ldr	r2, [pc, #16]	; (80068c4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80068b2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80068b4:	6113      	str	r3, [r2, #16]
}
 80068b6:	bf00      	nop
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	e000ed90 	.word	0xe000ed90

080068c8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e014      	b.n	8006904 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	791b      	ldrb	r3, [r3, #4]
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d105      	bne.n	80068f0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7fa f97a 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2202      	movs	r2, #2
 80068f4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e046      	b.n	80069ae <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	795b      	ldrb	r3, [r3, #5]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d101      	bne.n	800692c <HAL_DAC_Start+0x20>
 8006928:	2302      	movs	r3, #2
 800692a:	e040      	b.n	80069ae <HAL_DAC_Start+0xa2>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2202      	movs	r2, #2
 8006936:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	6819      	ldr	r1, [r3, #0]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	f003 0310 	and.w	r3, r3, #16
 8006944:	2201      	movs	r2, #1
 8006946:	409a      	lsls	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10f      	bne.n	8006976 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8006960:	2b02      	cmp	r3, #2
 8006962:	d11d      	bne.n	80069a0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f042 0201 	orr.w	r2, r2, #1
 8006972:	605a      	str	r2, [r3, #4]
 8006974:	e014      	b.n	80069a0 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	f003 0310 	and.w	r3, r3, #16
 8006986:	2102      	movs	r1, #2
 8006988:	fa01 f303 	lsl.w	r3, r1, r3
 800698c:	429a      	cmp	r2, r3
 800698e:	d107      	bne.n	80069a0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f042 0202 	orr.w	r2, r2, #2
 800699e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
	...

080069bc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
 80069c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d101      	bne.n	80069d4 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e0a2      	b.n	8006b1a <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	795b      	ldrb	r3, [r3, #5]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d101      	bne.n	80069e0 <HAL_DAC_Start_DMA+0x24>
 80069dc:	2302      	movs	r3, #2
 80069de:	e09c      	b.n	8006b1a <HAL_DAC_Start_DMA+0x15e>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2201      	movs	r2, #1
 80069e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2202      	movs	r2, #2
 80069ea:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d129      	bne.n	8006a46 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	4a4b      	ldr	r2, [pc, #300]	; (8006b24 <HAL_DAC_Start_DMA+0x168>)
 80069f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	4a4a      	ldr	r2, [pc, #296]	; (8006b28 <HAL_DAC_Start_DMA+0x16c>)
 8006a00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	4a49      	ldr	r2, [pc, #292]	; (8006b2c <HAL_DAC_Start_DMA+0x170>)
 8006a08:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a18:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d003      	beq.n	8006a28 <HAL_DAC_Start_DMA+0x6c>
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	2b04      	cmp	r3, #4
 8006a24:	d005      	beq.n	8006a32 <HAL_DAC_Start_DMA+0x76>
 8006a26:	e009      	b.n	8006a3c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3308      	adds	r3, #8
 8006a2e:	613b      	str	r3, [r7, #16]
        break;
 8006a30:	e033      	b.n	8006a9a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	330c      	adds	r3, #12
 8006a38:	613b      	str	r3, [r7, #16]
        break;
 8006a3a:	e02e      	b.n	8006a9a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	3310      	adds	r3, #16
 8006a42:	613b      	str	r3, [r7, #16]
        break;
 8006a44:	e029      	b.n	8006a9a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	4a39      	ldr	r2, [pc, #228]	; (8006b30 <HAL_DAC_Start_DMA+0x174>)
 8006a4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	4a38      	ldr	r2, [pc, #224]	; (8006b34 <HAL_DAC_Start_DMA+0x178>)
 8006a54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	4a37      	ldr	r2, [pc, #220]	; (8006b38 <HAL_DAC_Start_DMA+0x17c>)
 8006a5c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006a6c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d003      	beq.n	8006a7c <HAL_DAC_Start_DMA+0xc0>
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	d005      	beq.n	8006a86 <HAL_DAC_Start_DMA+0xca>
 8006a7a:	e009      	b.n	8006a90 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3314      	adds	r3, #20
 8006a82:	613b      	str	r3, [r7, #16]
        break;
 8006a84:	e009      	b.n	8006a9a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3318      	adds	r3, #24
 8006a8c:	613b      	str	r3, [r7, #16]
        break;
 8006a8e:	e004      	b.n	8006a9a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	331c      	adds	r3, #28
 8006a96:	613b      	str	r3, [r7, #16]
        break;
 8006a98:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d111      	bne.n	8006ac4 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006aae:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6898      	ldr	r0, [r3, #8]
 8006ab4:	6879      	ldr	r1, [r7, #4]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	f000 fe67 	bl	800778c <HAL_DMA_Start_IT>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	75fb      	strb	r3, [r7, #23]
 8006ac2:	e010      	b.n	8006ae6 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006ad2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	68d8      	ldr	r0, [r3, #12]
 8006ad8:	6879      	ldr	r1, [r7, #4]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	f000 fe55 	bl	800778c <HAL_DMA_Start_IT>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8006aec:	7dfb      	ldrb	r3, [r7, #23]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10c      	bne.n	8006b0c <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	6819      	ldr	r1, [r3, #0]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	f003 0310 	and.w	r3, r3, #16
 8006afe:	2201      	movs	r2, #1
 8006b00:	409a      	lsls	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	601a      	str	r2, [r3, #0]
 8006b0a:	e005      	b.n	8006b18 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	f043 0204 	orr.w	r2, r3, #4
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8006b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3718      	adds	r7, #24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	08006fad 	.word	0x08006fad
 8006b28:	08006fcf 	.word	0x08006fcf
 8006b2c:	08006feb 	.word	0x08006feb
 8006b30:	08007069 	.word	0x08007069
 8006b34:	0800708b 	.word	0x0800708b
 8006b38:	080070a7 	.word	0x080070a7

08006b3c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e03e      	b.n	8006bce <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6819      	ldr	r1, [r3, #0]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	f003 0310 	and.w	r3, r3, #16
 8006b5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b60:	fa02 f303 	lsl.w	r3, r2, r3
 8006b64:	43da      	mvns	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	400a      	ands	r2, r1
 8006b6c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6819      	ldr	r1, [r3, #0]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	f003 0310 	and.w	r3, r3, #16
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b80:	43da      	mvns	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	400a      	ands	r2, r1
 8006b88:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10d      	bne.n	8006bac <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f001 f863 	bl	8007c60 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ba8:	601a      	str	r2, [r3, #0]
 8006baa:	e00c      	b.n	8006bc6 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f001 f855 	bl	8007c60 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8006bc4:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b084      	sub	sp, #16
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bec:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d01d      	beq.n	8006c34 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d018      	beq.n	8006c34 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2204      	movs	r2, #4
 8006c06:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	f043 0201 	orr.w	r2, r3, #1
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006c1c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c2c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f86f 	bl	8006d12 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d01d      	beq.n	8006c7a <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d018      	beq.n	8006c7a <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2204      	movs	r2, #4
 8006c4c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f043 0202 	orr.w	r2, r3, #2
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006c62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006c72:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f9ed 	bl	8007054 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8006c7a:	bf00      	nop
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b087      	sub	sp, #28
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	60f8      	str	r0, [r7, #12]
 8006c8a:	60b9      	str	r1, [r7, #8]
 8006c8c:	607a      	str	r2, [r7, #4]
 8006c8e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8006c90:	2300      	movs	r3, #0
 8006c92:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d101      	bne.n	8006c9e <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e015      	b.n	8006cca <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d105      	bne.n	8006cb6 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4413      	add	r3, r2
 8006cb0:	3308      	adds	r3, #8
 8006cb2:	617b      	str	r3, [r7, #20]
 8006cb4:	e004      	b.n	8006cc0 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4413      	add	r3, r2
 8006cbc:	3314      	adds	r3, #20
 8006cbe:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	371c      	adds	r7, #28
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8006cde:	bf00      	nop
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b083      	sub	sp, #12
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8006cf2:	bf00      	nop
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b083      	sub	sp, #12
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8006d06:	bf00      	nop
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b083      	sub	sp, #12
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006d1a:	bf00      	nop
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
	...

08006d28 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b08a      	sub	sp, #40	; 0x28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d34:	2300      	movs	r3, #0
 8006d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d002      	beq.n	8006d46 <HAL_DAC_ConfigChannel+0x1e>
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d101      	bne.n	8006d4a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e12a      	b.n	8006fa0 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	795b      	ldrb	r3, [r3, #5]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d101      	bne.n	8006d56 <HAL_DAC_ConfigChannel+0x2e>
 8006d52:	2302      	movs	r3, #2
 8006d54:	e124      	b.n	8006fa0 <HAL_DAC_ConfigChannel+0x278>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2b04      	cmp	r3, #4
 8006d68:	d17a      	bne.n	8006e60 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006d6a:	f7fe f813 	bl	8004d94 <HAL_GetTick>
 8006d6e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d13d      	bne.n	8006df2 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006d76:	e018      	b.n	8006daa <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006d78:	f7fe f80c 	bl	8004d94 <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d911      	bls.n	8006daa <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d8c:	4b86      	ldr	r3, [pc, #536]	; (8006fa8 <HAL_DAC_ConfigChannel+0x280>)
 8006d8e:	4013      	ands	r3, r2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00a      	beq.n	8006daa <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	f043 0208 	orr.w	r2, r3, #8
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2203      	movs	r2, #3
 8006da4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e0fa      	b.n	8006fa0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006db0:	4b7d      	ldr	r3, [pc, #500]	; (8006fa8 <HAL_DAC_ConfigChannel+0x280>)
 8006db2:	4013      	ands	r3, r2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1df      	bne.n	8006d78 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	6992      	ldr	r2, [r2, #24]
 8006dc0:	641a      	str	r2, [r3, #64]	; 0x40
 8006dc2:	e020      	b.n	8006e06 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006dc4:	f7fd ffe6 	bl	8004d94 <HAL_GetTick>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d90f      	bls.n	8006df2 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	da0a      	bge.n	8006df2 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	f043 0208 	orr.w	r2, r3, #8
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2203      	movs	r2, #3
 8006dec:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e0d6      	b.n	8006fa0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	dbe3      	blt.n	8006dc4 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	6992      	ldr	r2, [r2, #24]
 8006e04:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f003 0310 	and.w	r3, r3, #16
 8006e12:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006e16:	fa01 f303 	lsl.w	r3, r1, r3
 8006e1a:	43db      	mvns	r3, r3
 8006e1c:	ea02 0103 	and.w	r1, r2, r3
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	69da      	ldr	r2, [r3, #28]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f003 0310 	and.w	r3, r3, #16
 8006e2a:	409a      	lsls	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	430a      	orrs	r2, r1
 8006e32:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f003 0310 	and.w	r3, r3, #16
 8006e40:	21ff      	movs	r1, #255	; 0xff
 8006e42:	fa01 f303 	lsl.w	r3, r1, r3
 8006e46:	43db      	mvns	r3, r3
 8006e48:	ea02 0103 	and.w	r1, r2, r3
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	6a1a      	ldr	r2, [r3, #32]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f003 0310 	and.w	r3, r3, #16
 8006e56:	409a      	lsls	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d11d      	bne.n	8006ea4 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f003 0310 	and.w	r3, r3, #16
 8006e76:	221f      	movs	r2, #31
 8006e78:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7c:	43db      	mvns	r3, r3
 8006e7e:	69ba      	ldr	r2, [r7, #24]
 8006e80:	4013      	ands	r3, r2
 8006e82:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f003 0310 	and.w	r3, r3, #16
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	fa02 f303 	lsl.w	r3, r2, r3
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	69ba      	ldr	r2, [r7, #24]
 8006ea2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eaa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f003 0310 	and.w	r3, r3, #16
 8006eb2:	2207      	movs	r2, #7
 8006eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb8:	43db      	mvns	r3, r3
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d102      	bne.n	8006ece <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	627b      	str	r3, [r7, #36]	; 0x24
 8006ecc:	e00f      	b.n	8006eee <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d102      	bne.n	8006edc <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8006eda:	e008      	b.n	8006eee <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d102      	bne.n	8006eea <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ee8:	e001      	b.n	8006eee <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006eea:	2300      	movs	r3, #0
 8006eec:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006efa:	4313      	orrs	r3, r2
 8006efc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f003 0310 	and.w	r3, r3, #16
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0a:	69ba      	ldr	r2, [r7, #24]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6819      	ldr	r1, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f003 0310 	and.w	r3, r3, #16
 8006f24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006f28:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2c:	43da      	mvns	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	400a      	ands	r2, r1
 8006f34:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f003 0310 	and.w	r3, r3, #16
 8006f44:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006f48:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4c:	43db      	mvns	r3, r3
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	4013      	ands	r3, r2
 8006f52:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f003 0310 	and.w	r3, r3, #16
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	fa02 f303 	lsl.w	r3, r2, r3
 8006f66:	69ba      	ldr	r2, [r7, #24]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6819      	ldr	r1, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f003 0310 	and.w	r3, r3, #16
 8006f80:	22c0      	movs	r2, #192	; 0xc0
 8006f82:	fa02 f303 	lsl.w	r3, r2, r3
 8006f86:	43da      	mvns	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	400a      	ands	r2, r1
 8006f8e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2201      	movs	r2, #1
 8006f94:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006f9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3728      	adds	r7, #40	; 0x28
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	20008000 	.word	0x20008000

08006fac <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f7ff fe8b 	bl	8006cd6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	711a      	strb	r2, [r3, #4]
}
 8006fc6:	bf00      	nop
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b084      	sub	sp, #16
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fda:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f7ff fe84 	bl	8006cea <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006fe2:	bf00      	nop
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b084      	sub	sp, #16
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	f043 0204 	orr.w	r2, r3, #4
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f7ff fe7a 	bl	8006cfe <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2201      	movs	r2, #1
 800700e:	711a      	strb	r2, [r3, #4]
}
 8007010:	bf00      	nop
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007074:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f7ff ffce 	bl	8007018 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2201      	movs	r2, #1
 8007080:	711a      	strb	r2, [r3, #4]
}
 8007082:	bf00      	nop
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b084      	sub	sp, #16
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007096:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f7ff ffc7 	bl	800702c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800709e:	bf00      	nop
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b084      	sub	sp, #16
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	f043 0204 	orr.w	r2, r3, #4
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f7ff ffbd 	bl	8007040 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2201      	movs	r2, #1
 80070ca:	711a      	strb	r2, [r3, #4]
}
 80070cc:	bf00      	nop
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80070dc:	f7fd fe5a 	bl	8004d94 <HAL_GetTick>
 80070e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d101      	bne.n	80070ec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e316      	b.n	800771a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a66      	ldr	r2, [pc, #408]	; (800728c <HAL_DMA_Init+0x1b8>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d04a      	beq.n	800718c <HAL_DMA_Init+0xb8>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a65      	ldr	r2, [pc, #404]	; (8007290 <HAL_DMA_Init+0x1bc>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d045      	beq.n	800718c <HAL_DMA_Init+0xb8>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a63      	ldr	r2, [pc, #396]	; (8007294 <HAL_DMA_Init+0x1c0>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d040      	beq.n	800718c <HAL_DMA_Init+0xb8>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a62      	ldr	r2, [pc, #392]	; (8007298 <HAL_DMA_Init+0x1c4>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d03b      	beq.n	800718c <HAL_DMA_Init+0xb8>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a60      	ldr	r2, [pc, #384]	; (800729c <HAL_DMA_Init+0x1c8>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d036      	beq.n	800718c <HAL_DMA_Init+0xb8>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a5f      	ldr	r2, [pc, #380]	; (80072a0 <HAL_DMA_Init+0x1cc>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d031      	beq.n	800718c <HAL_DMA_Init+0xb8>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a5d      	ldr	r2, [pc, #372]	; (80072a4 <HAL_DMA_Init+0x1d0>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d02c      	beq.n	800718c <HAL_DMA_Init+0xb8>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a5c      	ldr	r2, [pc, #368]	; (80072a8 <HAL_DMA_Init+0x1d4>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d027      	beq.n	800718c <HAL_DMA_Init+0xb8>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a5a      	ldr	r2, [pc, #360]	; (80072ac <HAL_DMA_Init+0x1d8>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d022      	beq.n	800718c <HAL_DMA_Init+0xb8>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a59      	ldr	r2, [pc, #356]	; (80072b0 <HAL_DMA_Init+0x1dc>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d01d      	beq.n	800718c <HAL_DMA_Init+0xb8>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a57      	ldr	r2, [pc, #348]	; (80072b4 <HAL_DMA_Init+0x1e0>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d018      	beq.n	800718c <HAL_DMA_Init+0xb8>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a56      	ldr	r2, [pc, #344]	; (80072b8 <HAL_DMA_Init+0x1e4>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d013      	beq.n	800718c <HAL_DMA_Init+0xb8>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a54      	ldr	r2, [pc, #336]	; (80072bc <HAL_DMA_Init+0x1e8>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d00e      	beq.n	800718c <HAL_DMA_Init+0xb8>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a53      	ldr	r2, [pc, #332]	; (80072c0 <HAL_DMA_Init+0x1ec>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d009      	beq.n	800718c <HAL_DMA_Init+0xb8>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a51      	ldr	r2, [pc, #324]	; (80072c4 <HAL_DMA_Init+0x1f0>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d004      	beq.n	800718c <HAL_DMA_Init+0xb8>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a50      	ldr	r2, [pc, #320]	; (80072c8 <HAL_DMA_Init+0x1f4>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d101      	bne.n	8007190 <HAL_DMA_Init+0xbc>
 800718c:	2301      	movs	r3, #1
 800718e:	e000      	b.n	8007192 <HAL_DMA_Init+0xbe>
 8007190:	2300      	movs	r3, #0
 8007192:	2b00      	cmp	r3, #0
 8007194:	f000 813b 	beq.w	800740e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2202      	movs	r2, #2
 800719c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a37      	ldr	r2, [pc, #220]	; (800728c <HAL_DMA_Init+0x1b8>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d04a      	beq.n	8007248 <HAL_DMA_Init+0x174>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a36      	ldr	r2, [pc, #216]	; (8007290 <HAL_DMA_Init+0x1bc>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d045      	beq.n	8007248 <HAL_DMA_Init+0x174>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a34      	ldr	r2, [pc, #208]	; (8007294 <HAL_DMA_Init+0x1c0>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d040      	beq.n	8007248 <HAL_DMA_Init+0x174>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a33      	ldr	r2, [pc, #204]	; (8007298 <HAL_DMA_Init+0x1c4>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d03b      	beq.n	8007248 <HAL_DMA_Init+0x174>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a31      	ldr	r2, [pc, #196]	; (800729c <HAL_DMA_Init+0x1c8>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d036      	beq.n	8007248 <HAL_DMA_Init+0x174>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a30      	ldr	r2, [pc, #192]	; (80072a0 <HAL_DMA_Init+0x1cc>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d031      	beq.n	8007248 <HAL_DMA_Init+0x174>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a2e      	ldr	r2, [pc, #184]	; (80072a4 <HAL_DMA_Init+0x1d0>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d02c      	beq.n	8007248 <HAL_DMA_Init+0x174>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a2d      	ldr	r2, [pc, #180]	; (80072a8 <HAL_DMA_Init+0x1d4>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d027      	beq.n	8007248 <HAL_DMA_Init+0x174>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a2b      	ldr	r2, [pc, #172]	; (80072ac <HAL_DMA_Init+0x1d8>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d022      	beq.n	8007248 <HAL_DMA_Init+0x174>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a2a      	ldr	r2, [pc, #168]	; (80072b0 <HAL_DMA_Init+0x1dc>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d01d      	beq.n	8007248 <HAL_DMA_Init+0x174>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a28      	ldr	r2, [pc, #160]	; (80072b4 <HAL_DMA_Init+0x1e0>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d018      	beq.n	8007248 <HAL_DMA_Init+0x174>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a27      	ldr	r2, [pc, #156]	; (80072b8 <HAL_DMA_Init+0x1e4>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d013      	beq.n	8007248 <HAL_DMA_Init+0x174>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a25      	ldr	r2, [pc, #148]	; (80072bc <HAL_DMA_Init+0x1e8>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d00e      	beq.n	8007248 <HAL_DMA_Init+0x174>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a24      	ldr	r2, [pc, #144]	; (80072c0 <HAL_DMA_Init+0x1ec>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d009      	beq.n	8007248 <HAL_DMA_Init+0x174>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a22      	ldr	r2, [pc, #136]	; (80072c4 <HAL_DMA_Init+0x1f0>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d004      	beq.n	8007248 <HAL_DMA_Init+0x174>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a21      	ldr	r2, [pc, #132]	; (80072c8 <HAL_DMA_Init+0x1f4>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d108      	bne.n	800725a <HAL_DMA_Init+0x186>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f022 0201 	bic.w	r2, r2, #1
 8007256:	601a      	str	r2, [r3, #0]
 8007258:	e007      	b.n	800726a <HAL_DMA_Init+0x196>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f022 0201 	bic.w	r2, r2, #1
 8007268:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800726a:	e02f      	b.n	80072cc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800726c:	f7fd fd92 	bl	8004d94 <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b05      	cmp	r3, #5
 8007278:	d928      	bls.n	80072cc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2220      	movs	r2, #32
 800727e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2203      	movs	r2, #3
 8007284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e246      	b.n	800771a <HAL_DMA_Init+0x646>
 800728c:	40020010 	.word	0x40020010
 8007290:	40020028 	.word	0x40020028
 8007294:	40020040 	.word	0x40020040
 8007298:	40020058 	.word	0x40020058
 800729c:	40020070 	.word	0x40020070
 80072a0:	40020088 	.word	0x40020088
 80072a4:	400200a0 	.word	0x400200a0
 80072a8:	400200b8 	.word	0x400200b8
 80072ac:	40020410 	.word	0x40020410
 80072b0:	40020428 	.word	0x40020428
 80072b4:	40020440 	.word	0x40020440
 80072b8:	40020458 	.word	0x40020458
 80072bc:	40020470 	.word	0x40020470
 80072c0:	40020488 	.word	0x40020488
 80072c4:	400204a0 	.word	0x400204a0
 80072c8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1c8      	bne.n	800726c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	4b83      	ldr	r3, [pc, #524]	; (80074f4 <HAL_DMA_Init+0x420>)
 80072e6:	4013      	ands	r3, r2
 80072e8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80072f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800730a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007312:	697a      	ldr	r2, [r7, #20]
 8007314:	4313      	orrs	r3, r2
 8007316:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731c:	2b04      	cmp	r3, #4
 800731e:	d107      	bne.n	8007330 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007328:	4313      	orrs	r3, r2
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	4313      	orrs	r3, r2
 800732e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007330:	4b71      	ldr	r3, [pc, #452]	; (80074f8 <HAL_DMA_Init+0x424>)
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	4b71      	ldr	r3, [pc, #452]	; (80074fc <HAL_DMA_Init+0x428>)
 8007336:	4013      	ands	r3, r2
 8007338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800733c:	d328      	bcc.n	8007390 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	2b28      	cmp	r3, #40	; 0x28
 8007344:	d903      	bls.n	800734e <HAL_DMA_Init+0x27a>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	2b2e      	cmp	r3, #46	; 0x2e
 800734c:	d917      	bls.n	800737e <HAL_DMA_Init+0x2aa>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	2b3e      	cmp	r3, #62	; 0x3e
 8007354:	d903      	bls.n	800735e <HAL_DMA_Init+0x28a>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	2b42      	cmp	r3, #66	; 0x42
 800735c:	d90f      	bls.n	800737e <HAL_DMA_Init+0x2aa>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	2b46      	cmp	r3, #70	; 0x46
 8007364:	d903      	bls.n	800736e <HAL_DMA_Init+0x29a>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	2b48      	cmp	r3, #72	; 0x48
 800736c:	d907      	bls.n	800737e <HAL_DMA_Init+0x2aa>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	2b4e      	cmp	r3, #78	; 0x4e
 8007374:	d905      	bls.n	8007382 <HAL_DMA_Init+0x2ae>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	2b52      	cmp	r3, #82	; 0x52
 800737c:	d801      	bhi.n	8007382 <HAL_DMA_Init+0x2ae>
 800737e:	2301      	movs	r3, #1
 8007380:	e000      	b.n	8007384 <HAL_DMA_Init+0x2b0>
 8007382:	2300      	movs	r3, #0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800738e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	f023 0307 	bic.w	r3, r3, #7
 80073a6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b6:	2b04      	cmp	r3, #4
 80073b8:	d117      	bne.n	80073ea <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00e      	beq.n	80073ea <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f002 fb4d 	bl	8009a6c <DMA_CheckFifoParam>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d008      	beq.n	80073ea <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2240      	movs	r2, #64	; 0x40
 80073dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e197      	b.n	800771a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f002 fa88 	bl	8009908 <DMA_CalcBaseAndBitshift>
 80073f8:	4603      	mov	r3, r0
 80073fa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007400:	f003 031f 	and.w	r3, r3, #31
 8007404:	223f      	movs	r2, #63	; 0x3f
 8007406:	409a      	lsls	r2, r3
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	609a      	str	r2, [r3, #8]
 800740c:	e0cd      	b.n	80075aa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a3b      	ldr	r2, [pc, #236]	; (8007500 <HAL_DMA_Init+0x42c>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d022      	beq.n	800745e <HAL_DMA_Init+0x38a>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a39      	ldr	r2, [pc, #228]	; (8007504 <HAL_DMA_Init+0x430>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d01d      	beq.n	800745e <HAL_DMA_Init+0x38a>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a38      	ldr	r2, [pc, #224]	; (8007508 <HAL_DMA_Init+0x434>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d018      	beq.n	800745e <HAL_DMA_Init+0x38a>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a36      	ldr	r2, [pc, #216]	; (800750c <HAL_DMA_Init+0x438>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d013      	beq.n	800745e <HAL_DMA_Init+0x38a>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a35      	ldr	r2, [pc, #212]	; (8007510 <HAL_DMA_Init+0x43c>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d00e      	beq.n	800745e <HAL_DMA_Init+0x38a>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a33      	ldr	r2, [pc, #204]	; (8007514 <HAL_DMA_Init+0x440>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d009      	beq.n	800745e <HAL_DMA_Init+0x38a>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a32      	ldr	r2, [pc, #200]	; (8007518 <HAL_DMA_Init+0x444>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d004      	beq.n	800745e <HAL_DMA_Init+0x38a>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a30      	ldr	r2, [pc, #192]	; (800751c <HAL_DMA_Init+0x448>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d101      	bne.n	8007462 <HAL_DMA_Init+0x38e>
 800745e:	2301      	movs	r3, #1
 8007460:	e000      	b.n	8007464 <HAL_DMA_Init+0x390>
 8007462:	2300      	movs	r3, #0
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 8097 	beq.w	8007598 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a24      	ldr	r2, [pc, #144]	; (8007500 <HAL_DMA_Init+0x42c>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d021      	beq.n	80074b8 <HAL_DMA_Init+0x3e4>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a22      	ldr	r2, [pc, #136]	; (8007504 <HAL_DMA_Init+0x430>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d01c      	beq.n	80074b8 <HAL_DMA_Init+0x3e4>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a21      	ldr	r2, [pc, #132]	; (8007508 <HAL_DMA_Init+0x434>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d017      	beq.n	80074b8 <HAL_DMA_Init+0x3e4>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a1f      	ldr	r2, [pc, #124]	; (800750c <HAL_DMA_Init+0x438>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d012      	beq.n	80074b8 <HAL_DMA_Init+0x3e4>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a1e      	ldr	r2, [pc, #120]	; (8007510 <HAL_DMA_Init+0x43c>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d00d      	beq.n	80074b8 <HAL_DMA_Init+0x3e4>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a1c      	ldr	r2, [pc, #112]	; (8007514 <HAL_DMA_Init+0x440>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d008      	beq.n	80074b8 <HAL_DMA_Init+0x3e4>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a1b      	ldr	r2, [pc, #108]	; (8007518 <HAL_DMA_Init+0x444>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d003      	beq.n	80074b8 <HAL_DMA_Init+0x3e4>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a19      	ldr	r2, [pc, #100]	; (800751c <HAL_DMA_Init+0x448>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2202      	movs	r2, #2
 80074be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	4b12      	ldr	r3, [pc, #72]	; (8007520 <HAL_DMA_Init+0x44c>)
 80074d6:	4013      	ands	r3, r2
 80074d8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	2b40      	cmp	r3, #64	; 0x40
 80074e0:	d020      	beq.n	8007524 <HAL_DMA_Init+0x450>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	2b80      	cmp	r3, #128	; 0x80
 80074e8:	d102      	bne.n	80074f0 <HAL_DMA_Init+0x41c>
 80074ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80074ee:	e01a      	b.n	8007526 <HAL_DMA_Init+0x452>
 80074f0:	2300      	movs	r3, #0
 80074f2:	e018      	b.n	8007526 <HAL_DMA_Init+0x452>
 80074f4:	fe10803f 	.word	0xfe10803f
 80074f8:	5c001000 	.word	0x5c001000
 80074fc:	ffff0000 	.word	0xffff0000
 8007500:	58025408 	.word	0x58025408
 8007504:	5802541c 	.word	0x5802541c
 8007508:	58025430 	.word	0x58025430
 800750c:	58025444 	.word	0x58025444
 8007510:	58025458 	.word	0x58025458
 8007514:	5802546c 	.word	0x5802546c
 8007518:	58025480 	.word	0x58025480
 800751c:	58025494 	.word	0x58025494
 8007520:	fffe000f 	.word	0xfffe000f
 8007524:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	68d2      	ldr	r2, [r2, #12]
 800752a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800752c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007534:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800753c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007544:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	69db      	ldr	r3, [r3, #28]
 800754a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800754c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007554:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007556:	697a      	ldr	r2, [r7, #20]
 8007558:	4313      	orrs	r3, r2
 800755a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	461a      	mov	r2, r3
 800756a:	4b6e      	ldr	r3, [pc, #440]	; (8007724 <HAL_DMA_Init+0x650>)
 800756c:	4413      	add	r3, r2
 800756e:	4a6e      	ldr	r2, [pc, #440]	; (8007728 <HAL_DMA_Init+0x654>)
 8007570:	fba2 2303 	umull	r2, r3, r2, r3
 8007574:	091b      	lsrs	r3, r3, #4
 8007576:	009a      	lsls	r2, r3, #2
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f002 f9c3 	bl	8009908 <DMA_CalcBaseAndBitshift>
 8007582:	4603      	mov	r3, r0
 8007584:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800758a:	f003 031f 	and.w	r3, r3, #31
 800758e:	2201      	movs	r2, #1
 8007590:	409a      	lsls	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	605a      	str	r2, [r3, #4]
 8007596:	e008      	b.n	80075aa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2240      	movs	r2, #64	; 0x40
 800759c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2203      	movs	r2, #3
 80075a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e0b7      	b.n	800771a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a5f      	ldr	r2, [pc, #380]	; (800772c <HAL_DMA_Init+0x658>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d072      	beq.n	800769a <HAL_DMA_Init+0x5c6>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a5d      	ldr	r2, [pc, #372]	; (8007730 <HAL_DMA_Init+0x65c>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d06d      	beq.n	800769a <HAL_DMA_Init+0x5c6>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a5c      	ldr	r2, [pc, #368]	; (8007734 <HAL_DMA_Init+0x660>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d068      	beq.n	800769a <HAL_DMA_Init+0x5c6>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a5a      	ldr	r2, [pc, #360]	; (8007738 <HAL_DMA_Init+0x664>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d063      	beq.n	800769a <HAL_DMA_Init+0x5c6>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a59      	ldr	r2, [pc, #356]	; (800773c <HAL_DMA_Init+0x668>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d05e      	beq.n	800769a <HAL_DMA_Init+0x5c6>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a57      	ldr	r2, [pc, #348]	; (8007740 <HAL_DMA_Init+0x66c>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d059      	beq.n	800769a <HAL_DMA_Init+0x5c6>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a56      	ldr	r2, [pc, #344]	; (8007744 <HAL_DMA_Init+0x670>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d054      	beq.n	800769a <HAL_DMA_Init+0x5c6>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a54      	ldr	r2, [pc, #336]	; (8007748 <HAL_DMA_Init+0x674>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d04f      	beq.n	800769a <HAL_DMA_Init+0x5c6>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a53      	ldr	r2, [pc, #332]	; (800774c <HAL_DMA_Init+0x678>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d04a      	beq.n	800769a <HAL_DMA_Init+0x5c6>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a51      	ldr	r2, [pc, #324]	; (8007750 <HAL_DMA_Init+0x67c>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d045      	beq.n	800769a <HAL_DMA_Init+0x5c6>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a50      	ldr	r2, [pc, #320]	; (8007754 <HAL_DMA_Init+0x680>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d040      	beq.n	800769a <HAL_DMA_Init+0x5c6>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a4e      	ldr	r2, [pc, #312]	; (8007758 <HAL_DMA_Init+0x684>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d03b      	beq.n	800769a <HAL_DMA_Init+0x5c6>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a4d      	ldr	r2, [pc, #308]	; (800775c <HAL_DMA_Init+0x688>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d036      	beq.n	800769a <HAL_DMA_Init+0x5c6>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a4b      	ldr	r2, [pc, #300]	; (8007760 <HAL_DMA_Init+0x68c>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d031      	beq.n	800769a <HAL_DMA_Init+0x5c6>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a4a      	ldr	r2, [pc, #296]	; (8007764 <HAL_DMA_Init+0x690>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d02c      	beq.n	800769a <HAL_DMA_Init+0x5c6>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a48      	ldr	r2, [pc, #288]	; (8007768 <HAL_DMA_Init+0x694>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d027      	beq.n	800769a <HAL_DMA_Init+0x5c6>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a47      	ldr	r2, [pc, #284]	; (800776c <HAL_DMA_Init+0x698>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d022      	beq.n	800769a <HAL_DMA_Init+0x5c6>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a45      	ldr	r2, [pc, #276]	; (8007770 <HAL_DMA_Init+0x69c>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d01d      	beq.n	800769a <HAL_DMA_Init+0x5c6>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a44      	ldr	r2, [pc, #272]	; (8007774 <HAL_DMA_Init+0x6a0>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d018      	beq.n	800769a <HAL_DMA_Init+0x5c6>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a42      	ldr	r2, [pc, #264]	; (8007778 <HAL_DMA_Init+0x6a4>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d013      	beq.n	800769a <HAL_DMA_Init+0x5c6>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a41      	ldr	r2, [pc, #260]	; (800777c <HAL_DMA_Init+0x6a8>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d00e      	beq.n	800769a <HAL_DMA_Init+0x5c6>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a3f      	ldr	r2, [pc, #252]	; (8007780 <HAL_DMA_Init+0x6ac>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d009      	beq.n	800769a <HAL_DMA_Init+0x5c6>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a3e      	ldr	r2, [pc, #248]	; (8007784 <HAL_DMA_Init+0x6b0>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d004      	beq.n	800769a <HAL_DMA_Init+0x5c6>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a3c      	ldr	r2, [pc, #240]	; (8007788 <HAL_DMA_Init+0x6b4>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d101      	bne.n	800769e <HAL_DMA_Init+0x5ca>
 800769a:	2301      	movs	r3, #1
 800769c:	e000      	b.n	80076a0 <HAL_DMA_Init+0x5cc>
 800769e:	2300      	movs	r3, #0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d032      	beq.n	800770a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f002 fa5d 	bl	8009b64 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	2b80      	cmp	r3, #128	; 0x80
 80076b0:	d102      	bne.n	80076b8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076c0:	b2d2      	uxtb	r2, r2
 80076c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80076cc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d010      	beq.n	80076f8 <HAL_DMA_Init+0x624>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	2b08      	cmp	r3, #8
 80076dc:	d80c      	bhi.n	80076f8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f002 fada 	bl	8009c98 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076e8:	2200      	movs	r2, #0
 80076ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80076f4:	605a      	str	r2, [r3, #4]
 80076f6:	e008      	b.n	800770a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3718      	adds	r7, #24
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	a7fdabf8 	.word	0xa7fdabf8
 8007728:	cccccccd 	.word	0xcccccccd
 800772c:	40020010 	.word	0x40020010
 8007730:	40020028 	.word	0x40020028
 8007734:	40020040 	.word	0x40020040
 8007738:	40020058 	.word	0x40020058
 800773c:	40020070 	.word	0x40020070
 8007740:	40020088 	.word	0x40020088
 8007744:	400200a0 	.word	0x400200a0
 8007748:	400200b8 	.word	0x400200b8
 800774c:	40020410 	.word	0x40020410
 8007750:	40020428 	.word	0x40020428
 8007754:	40020440 	.word	0x40020440
 8007758:	40020458 	.word	0x40020458
 800775c:	40020470 	.word	0x40020470
 8007760:	40020488 	.word	0x40020488
 8007764:	400204a0 	.word	0x400204a0
 8007768:	400204b8 	.word	0x400204b8
 800776c:	58025408 	.word	0x58025408
 8007770:	5802541c 	.word	0x5802541c
 8007774:	58025430 	.word	0x58025430
 8007778:	58025444 	.word	0x58025444
 800777c:	58025458 	.word	0x58025458
 8007780:	5802546c 	.word	0x5802546c
 8007784:	58025480 	.word	0x58025480
 8007788:	58025494 	.word	0x58025494

0800778c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
 8007798:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800779a:	2300      	movs	r3, #0
 800779c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e226      	b.n	8007bf6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d101      	bne.n	80077b6 <HAL_DMA_Start_IT+0x2a>
 80077b2:	2302      	movs	r3, #2
 80077b4:	e21f      	b.n	8007bf6 <HAL_DMA_Start_IT+0x46a>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	f040 820a 	bne.w	8007be0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a68      	ldr	r2, [pc, #416]	; (8007980 <HAL_DMA_Start_IT+0x1f4>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d04a      	beq.n	800787a <HAL_DMA_Start_IT+0xee>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a66      	ldr	r2, [pc, #408]	; (8007984 <HAL_DMA_Start_IT+0x1f8>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d045      	beq.n	800787a <HAL_DMA_Start_IT+0xee>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a65      	ldr	r2, [pc, #404]	; (8007988 <HAL_DMA_Start_IT+0x1fc>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d040      	beq.n	800787a <HAL_DMA_Start_IT+0xee>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a63      	ldr	r2, [pc, #396]	; (800798c <HAL_DMA_Start_IT+0x200>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d03b      	beq.n	800787a <HAL_DMA_Start_IT+0xee>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a62      	ldr	r2, [pc, #392]	; (8007990 <HAL_DMA_Start_IT+0x204>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d036      	beq.n	800787a <HAL_DMA_Start_IT+0xee>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a60      	ldr	r2, [pc, #384]	; (8007994 <HAL_DMA_Start_IT+0x208>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d031      	beq.n	800787a <HAL_DMA_Start_IT+0xee>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a5f      	ldr	r2, [pc, #380]	; (8007998 <HAL_DMA_Start_IT+0x20c>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d02c      	beq.n	800787a <HAL_DMA_Start_IT+0xee>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a5d      	ldr	r2, [pc, #372]	; (800799c <HAL_DMA_Start_IT+0x210>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d027      	beq.n	800787a <HAL_DMA_Start_IT+0xee>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a5c      	ldr	r2, [pc, #368]	; (80079a0 <HAL_DMA_Start_IT+0x214>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d022      	beq.n	800787a <HAL_DMA_Start_IT+0xee>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a5a      	ldr	r2, [pc, #360]	; (80079a4 <HAL_DMA_Start_IT+0x218>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d01d      	beq.n	800787a <HAL_DMA_Start_IT+0xee>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a59      	ldr	r2, [pc, #356]	; (80079a8 <HAL_DMA_Start_IT+0x21c>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d018      	beq.n	800787a <HAL_DMA_Start_IT+0xee>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a57      	ldr	r2, [pc, #348]	; (80079ac <HAL_DMA_Start_IT+0x220>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d013      	beq.n	800787a <HAL_DMA_Start_IT+0xee>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a56      	ldr	r2, [pc, #344]	; (80079b0 <HAL_DMA_Start_IT+0x224>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d00e      	beq.n	800787a <HAL_DMA_Start_IT+0xee>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a54      	ldr	r2, [pc, #336]	; (80079b4 <HAL_DMA_Start_IT+0x228>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d009      	beq.n	800787a <HAL_DMA_Start_IT+0xee>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a53      	ldr	r2, [pc, #332]	; (80079b8 <HAL_DMA_Start_IT+0x22c>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d004      	beq.n	800787a <HAL_DMA_Start_IT+0xee>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a51      	ldr	r2, [pc, #324]	; (80079bc <HAL_DMA_Start_IT+0x230>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d108      	bne.n	800788c <HAL_DMA_Start_IT+0x100>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f022 0201 	bic.w	r2, r2, #1
 8007888:	601a      	str	r2, [r3, #0]
 800788a:	e007      	b.n	800789c <HAL_DMA_Start_IT+0x110>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f022 0201 	bic.w	r2, r2, #1
 800789a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	68b9      	ldr	r1, [r7, #8]
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f001 fe84 	bl	80095b0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a34      	ldr	r2, [pc, #208]	; (8007980 <HAL_DMA_Start_IT+0x1f4>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d04a      	beq.n	8007948 <HAL_DMA_Start_IT+0x1bc>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a33      	ldr	r2, [pc, #204]	; (8007984 <HAL_DMA_Start_IT+0x1f8>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d045      	beq.n	8007948 <HAL_DMA_Start_IT+0x1bc>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a31      	ldr	r2, [pc, #196]	; (8007988 <HAL_DMA_Start_IT+0x1fc>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d040      	beq.n	8007948 <HAL_DMA_Start_IT+0x1bc>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a30      	ldr	r2, [pc, #192]	; (800798c <HAL_DMA_Start_IT+0x200>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d03b      	beq.n	8007948 <HAL_DMA_Start_IT+0x1bc>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a2e      	ldr	r2, [pc, #184]	; (8007990 <HAL_DMA_Start_IT+0x204>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d036      	beq.n	8007948 <HAL_DMA_Start_IT+0x1bc>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a2d      	ldr	r2, [pc, #180]	; (8007994 <HAL_DMA_Start_IT+0x208>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d031      	beq.n	8007948 <HAL_DMA_Start_IT+0x1bc>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a2b      	ldr	r2, [pc, #172]	; (8007998 <HAL_DMA_Start_IT+0x20c>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d02c      	beq.n	8007948 <HAL_DMA_Start_IT+0x1bc>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a2a      	ldr	r2, [pc, #168]	; (800799c <HAL_DMA_Start_IT+0x210>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d027      	beq.n	8007948 <HAL_DMA_Start_IT+0x1bc>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a28      	ldr	r2, [pc, #160]	; (80079a0 <HAL_DMA_Start_IT+0x214>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d022      	beq.n	8007948 <HAL_DMA_Start_IT+0x1bc>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a27      	ldr	r2, [pc, #156]	; (80079a4 <HAL_DMA_Start_IT+0x218>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d01d      	beq.n	8007948 <HAL_DMA_Start_IT+0x1bc>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a25      	ldr	r2, [pc, #148]	; (80079a8 <HAL_DMA_Start_IT+0x21c>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d018      	beq.n	8007948 <HAL_DMA_Start_IT+0x1bc>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a24      	ldr	r2, [pc, #144]	; (80079ac <HAL_DMA_Start_IT+0x220>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d013      	beq.n	8007948 <HAL_DMA_Start_IT+0x1bc>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a22      	ldr	r2, [pc, #136]	; (80079b0 <HAL_DMA_Start_IT+0x224>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d00e      	beq.n	8007948 <HAL_DMA_Start_IT+0x1bc>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a21      	ldr	r2, [pc, #132]	; (80079b4 <HAL_DMA_Start_IT+0x228>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d009      	beq.n	8007948 <HAL_DMA_Start_IT+0x1bc>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a1f      	ldr	r2, [pc, #124]	; (80079b8 <HAL_DMA_Start_IT+0x22c>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d004      	beq.n	8007948 <HAL_DMA_Start_IT+0x1bc>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a1e      	ldr	r2, [pc, #120]	; (80079bc <HAL_DMA_Start_IT+0x230>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d101      	bne.n	800794c <HAL_DMA_Start_IT+0x1c0>
 8007948:	2301      	movs	r3, #1
 800794a:	e000      	b.n	800794e <HAL_DMA_Start_IT+0x1c2>
 800794c:	2300      	movs	r3, #0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d036      	beq.n	80079c0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f023 021e 	bic.w	r2, r3, #30
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f042 0216 	orr.w	r2, r2, #22
 8007964:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796a:	2b00      	cmp	r3, #0
 800796c:	d03e      	beq.n	80079ec <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f042 0208 	orr.w	r2, r2, #8
 800797c:	601a      	str	r2, [r3, #0]
 800797e:	e035      	b.n	80079ec <HAL_DMA_Start_IT+0x260>
 8007980:	40020010 	.word	0x40020010
 8007984:	40020028 	.word	0x40020028
 8007988:	40020040 	.word	0x40020040
 800798c:	40020058 	.word	0x40020058
 8007990:	40020070 	.word	0x40020070
 8007994:	40020088 	.word	0x40020088
 8007998:	400200a0 	.word	0x400200a0
 800799c:	400200b8 	.word	0x400200b8
 80079a0:	40020410 	.word	0x40020410
 80079a4:	40020428 	.word	0x40020428
 80079a8:	40020440 	.word	0x40020440
 80079ac:	40020458 	.word	0x40020458
 80079b0:	40020470 	.word	0x40020470
 80079b4:	40020488 	.word	0x40020488
 80079b8:	400204a0 	.word	0x400204a0
 80079bc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f023 020e 	bic.w	r2, r3, #14
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f042 020a 	orr.w	r2, r2, #10
 80079d2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d007      	beq.n	80079ec <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f042 0204 	orr.w	r2, r2, #4
 80079ea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a83      	ldr	r2, [pc, #524]	; (8007c00 <HAL_DMA_Start_IT+0x474>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d072      	beq.n	8007adc <HAL_DMA_Start_IT+0x350>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a82      	ldr	r2, [pc, #520]	; (8007c04 <HAL_DMA_Start_IT+0x478>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d06d      	beq.n	8007adc <HAL_DMA_Start_IT+0x350>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a80      	ldr	r2, [pc, #512]	; (8007c08 <HAL_DMA_Start_IT+0x47c>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d068      	beq.n	8007adc <HAL_DMA_Start_IT+0x350>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a7f      	ldr	r2, [pc, #508]	; (8007c0c <HAL_DMA_Start_IT+0x480>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d063      	beq.n	8007adc <HAL_DMA_Start_IT+0x350>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a7d      	ldr	r2, [pc, #500]	; (8007c10 <HAL_DMA_Start_IT+0x484>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d05e      	beq.n	8007adc <HAL_DMA_Start_IT+0x350>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a7c      	ldr	r2, [pc, #496]	; (8007c14 <HAL_DMA_Start_IT+0x488>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d059      	beq.n	8007adc <HAL_DMA_Start_IT+0x350>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a7a      	ldr	r2, [pc, #488]	; (8007c18 <HAL_DMA_Start_IT+0x48c>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d054      	beq.n	8007adc <HAL_DMA_Start_IT+0x350>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a79      	ldr	r2, [pc, #484]	; (8007c1c <HAL_DMA_Start_IT+0x490>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d04f      	beq.n	8007adc <HAL_DMA_Start_IT+0x350>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a77      	ldr	r2, [pc, #476]	; (8007c20 <HAL_DMA_Start_IT+0x494>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d04a      	beq.n	8007adc <HAL_DMA_Start_IT+0x350>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a76      	ldr	r2, [pc, #472]	; (8007c24 <HAL_DMA_Start_IT+0x498>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d045      	beq.n	8007adc <HAL_DMA_Start_IT+0x350>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a74      	ldr	r2, [pc, #464]	; (8007c28 <HAL_DMA_Start_IT+0x49c>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d040      	beq.n	8007adc <HAL_DMA_Start_IT+0x350>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a73      	ldr	r2, [pc, #460]	; (8007c2c <HAL_DMA_Start_IT+0x4a0>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d03b      	beq.n	8007adc <HAL_DMA_Start_IT+0x350>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a71      	ldr	r2, [pc, #452]	; (8007c30 <HAL_DMA_Start_IT+0x4a4>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d036      	beq.n	8007adc <HAL_DMA_Start_IT+0x350>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a70      	ldr	r2, [pc, #448]	; (8007c34 <HAL_DMA_Start_IT+0x4a8>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d031      	beq.n	8007adc <HAL_DMA_Start_IT+0x350>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a6e      	ldr	r2, [pc, #440]	; (8007c38 <HAL_DMA_Start_IT+0x4ac>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d02c      	beq.n	8007adc <HAL_DMA_Start_IT+0x350>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a6d      	ldr	r2, [pc, #436]	; (8007c3c <HAL_DMA_Start_IT+0x4b0>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d027      	beq.n	8007adc <HAL_DMA_Start_IT+0x350>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a6b      	ldr	r2, [pc, #428]	; (8007c40 <HAL_DMA_Start_IT+0x4b4>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d022      	beq.n	8007adc <HAL_DMA_Start_IT+0x350>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a6a      	ldr	r2, [pc, #424]	; (8007c44 <HAL_DMA_Start_IT+0x4b8>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d01d      	beq.n	8007adc <HAL_DMA_Start_IT+0x350>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a68      	ldr	r2, [pc, #416]	; (8007c48 <HAL_DMA_Start_IT+0x4bc>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d018      	beq.n	8007adc <HAL_DMA_Start_IT+0x350>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a67      	ldr	r2, [pc, #412]	; (8007c4c <HAL_DMA_Start_IT+0x4c0>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d013      	beq.n	8007adc <HAL_DMA_Start_IT+0x350>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a65      	ldr	r2, [pc, #404]	; (8007c50 <HAL_DMA_Start_IT+0x4c4>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d00e      	beq.n	8007adc <HAL_DMA_Start_IT+0x350>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a64      	ldr	r2, [pc, #400]	; (8007c54 <HAL_DMA_Start_IT+0x4c8>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d009      	beq.n	8007adc <HAL_DMA_Start_IT+0x350>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a62      	ldr	r2, [pc, #392]	; (8007c58 <HAL_DMA_Start_IT+0x4cc>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d004      	beq.n	8007adc <HAL_DMA_Start_IT+0x350>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a61      	ldr	r2, [pc, #388]	; (8007c5c <HAL_DMA_Start_IT+0x4d0>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d101      	bne.n	8007ae0 <HAL_DMA_Start_IT+0x354>
 8007adc:	2301      	movs	r3, #1
 8007ade:	e000      	b.n	8007ae2 <HAL_DMA_Start_IT+0x356>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d01a      	beq.n	8007b1c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d007      	beq.n	8007b04 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007afe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b02:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d007      	beq.n	8007b1c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b1a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a37      	ldr	r2, [pc, #220]	; (8007c00 <HAL_DMA_Start_IT+0x474>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d04a      	beq.n	8007bbc <HAL_DMA_Start_IT+0x430>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a36      	ldr	r2, [pc, #216]	; (8007c04 <HAL_DMA_Start_IT+0x478>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d045      	beq.n	8007bbc <HAL_DMA_Start_IT+0x430>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a34      	ldr	r2, [pc, #208]	; (8007c08 <HAL_DMA_Start_IT+0x47c>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d040      	beq.n	8007bbc <HAL_DMA_Start_IT+0x430>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a33      	ldr	r2, [pc, #204]	; (8007c0c <HAL_DMA_Start_IT+0x480>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d03b      	beq.n	8007bbc <HAL_DMA_Start_IT+0x430>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a31      	ldr	r2, [pc, #196]	; (8007c10 <HAL_DMA_Start_IT+0x484>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d036      	beq.n	8007bbc <HAL_DMA_Start_IT+0x430>
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a30      	ldr	r2, [pc, #192]	; (8007c14 <HAL_DMA_Start_IT+0x488>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d031      	beq.n	8007bbc <HAL_DMA_Start_IT+0x430>
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a2e      	ldr	r2, [pc, #184]	; (8007c18 <HAL_DMA_Start_IT+0x48c>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d02c      	beq.n	8007bbc <HAL_DMA_Start_IT+0x430>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a2d      	ldr	r2, [pc, #180]	; (8007c1c <HAL_DMA_Start_IT+0x490>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d027      	beq.n	8007bbc <HAL_DMA_Start_IT+0x430>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a2b      	ldr	r2, [pc, #172]	; (8007c20 <HAL_DMA_Start_IT+0x494>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d022      	beq.n	8007bbc <HAL_DMA_Start_IT+0x430>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a2a      	ldr	r2, [pc, #168]	; (8007c24 <HAL_DMA_Start_IT+0x498>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d01d      	beq.n	8007bbc <HAL_DMA_Start_IT+0x430>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a28      	ldr	r2, [pc, #160]	; (8007c28 <HAL_DMA_Start_IT+0x49c>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d018      	beq.n	8007bbc <HAL_DMA_Start_IT+0x430>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a27      	ldr	r2, [pc, #156]	; (8007c2c <HAL_DMA_Start_IT+0x4a0>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d013      	beq.n	8007bbc <HAL_DMA_Start_IT+0x430>
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a25      	ldr	r2, [pc, #148]	; (8007c30 <HAL_DMA_Start_IT+0x4a4>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d00e      	beq.n	8007bbc <HAL_DMA_Start_IT+0x430>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a24      	ldr	r2, [pc, #144]	; (8007c34 <HAL_DMA_Start_IT+0x4a8>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d009      	beq.n	8007bbc <HAL_DMA_Start_IT+0x430>
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a22      	ldr	r2, [pc, #136]	; (8007c38 <HAL_DMA_Start_IT+0x4ac>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d004      	beq.n	8007bbc <HAL_DMA_Start_IT+0x430>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a21      	ldr	r2, [pc, #132]	; (8007c3c <HAL_DMA_Start_IT+0x4b0>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d108      	bne.n	8007bce <HAL_DMA_Start_IT+0x442>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f042 0201 	orr.w	r2, r2, #1
 8007bca:	601a      	str	r2, [r3, #0]
 8007bcc:	e012      	b.n	8007bf4 <HAL_DMA_Start_IT+0x468>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f042 0201 	orr.w	r2, r2, #1
 8007bdc:	601a      	str	r2, [r3, #0]
 8007bde:	e009      	b.n	8007bf4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007be6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3718      	adds	r7, #24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	40020010 	.word	0x40020010
 8007c04:	40020028 	.word	0x40020028
 8007c08:	40020040 	.word	0x40020040
 8007c0c:	40020058 	.word	0x40020058
 8007c10:	40020070 	.word	0x40020070
 8007c14:	40020088 	.word	0x40020088
 8007c18:	400200a0 	.word	0x400200a0
 8007c1c:	400200b8 	.word	0x400200b8
 8007c20:	40020410 	.word	0x40020410
 8007c24:	40020428 	.word	0x40020428
 8007c28:	40020440 	.word	0x40020440
 8007c2c:	40020458 	.word	0x40020458
 8007c30:	40020470 	.word	0x40020470
 8007c34:	40020488 	.word	0x40020488
 8007c38:	400204a0 	.word	0x400204a0
 8007c3c:	400204b8 	.word	0x400204b8
 8007c40:	58025408 	.word	0x58025408
 8007c44:	5802541c 	.word	0x5802541c
 8007c48:	58025430 	.word	0x58025430
 8007c4c:	58025444 	.word	0x58025444
 8007c50:	58025458 	.word	0x58025458
 8007c54:	5802546c 	.word	0x5802546c
 8007c58:	58025480 	.word	0x58025480
 8007c5c:	58025494 	.word	0x58025494

08007c60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007c68:	f7fd f894 	bl	8004d94 <HAL_GetTick>
 8007c6c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d101      	bne.n	8007c78 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e2dc      	b.n	8008232 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d008      	beq.n	8007c96 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2280      	movs	r2, #128	; 0x80
 8007c88:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e2cd      	b.n	8008232 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a76      	ldr	r2, [pc, #472]	; (8007e74 <HAL_DMA_Abort+0x214>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d04a      	beq.n	8007d36 <HAL_DMA_Abort+0xd6>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a74      	ldr	r2, [pc, #464]	; (8007e78 <HAL_DMA_Abort+0x218>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d045      	beq.n	8007d36 <HAL_DMA_Abort+0xd6>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a73      	ldr	r2, [pc, #460]	; (8007e7c <HAL_DMA_Abort+0x21c>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d040      	beq.n	8007d36 <HAL_DMA_Abort+0xd6>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a71      	ldr	r2, [pc, #452]	; (8007e80 <HAL_DMA_Abort+0x220>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d03b      	beq.n	8007d36 <HAL_DMA_Abort+0xd6>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a70      	ldr	r2, [pc, #448]	; (8007e84 <HAL_DMA_Abort+0x224>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d036      	beq.n	8007d36 <HAL_DMA_Abort+0xd6>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a6e      	ldr	r2, [pc, #440]	; (8007e88 <HAL_DMA_Abort+0x228>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d031      	beq.n	8007d36 <HAL_DMA_Abort+0xd6>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a6d      	ldr	r2, [pc, #436]	; (8007e8c <HAL_DMA_Abort+0x22c>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d02c      	beq.n	8007d36 <HAL_DMA_Abort+0xd6>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a6b      	ldr	r2, [pc, #428]	; (8007e90 <HAL_DMA_Abort+0x230>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d027      	beq.n	8007d36 <HAL_DMA_Abort+0xd6>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a6a      	ldr	r2, [pc, #424]	; (8007e94 <HAL_DMA_Abort+0x234>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d022      	beq.n	8007d36 <HAL_DMA_Abort+0xd6>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a68      	ldr	r2, [pc, #416]	; (8007e98 <HAL_DMA_Abort+0x238>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d01d      	beq.n	8007d36 <HAL_DMA_Abort+0xd6>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a67      	ldr	r2, [pc, #412]	; (8007e9c <HAL_DMA_Abort+0x23c>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d018      	beq.n	8007d36 <HAL_DMA_Abort+0xd6>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a65      	ldr	r2, [pc, #404]	; (8007ea0 <HAL_DMA_Abort+0x240>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d013      	beq.n	8007d36 <HAL_DMA_Abort+0xd6>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a64      	ldr	r2, [pc, #400]	; (8007ea4 <HAL_DMA_Abort+0x244>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d00e      	beq.n	8007d36 <HAL_DMA_Abort+0xd6>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a62      	ldr	r2, [pc, #392]	; (8007ea8 <HAL_DMA_Abort+0x248>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d009      	beq.n	8007d36 <HAL_DMA_Abort+0xd6>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a61      	ldr	r2, [pc, #388]	; (8007eac <HAL_DMA_Abort+0x24c>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d004      	beq.n	8007d36 <HAL_DMA_Abort+0xd6>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a5f      	ldr	r2, [pc, #380]	; (8007eb0 <HAL_DMA_Abort+0x250>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d101      	bne.n	8007d3a <HAL_DMA_Abort+0xda>
 8007d36:	2301      	movs	r3, #1
 8007d38:	e000      	b.n	8007d3c <HAL_DMA_Abort+0xdc>
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d013      	beq.n	8007d68 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f022 021e 	bic.w	r2, r2, #30
 8007d4e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	695a      	ldr	r2, [r3, #20]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d5e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	617b      	str	r3, [r7, #20]
 8007d66:	e00a      	b.n	8007d7e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f022 020e 	bic.w	r2, r2, #14
 8007d76:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a3c      	ldr	r2, [pc, #240]	; (8007e74 <HAL_DMA_Abort+0x214>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d072      	beq.n	8007e6e <HAL_DMA_Abort+0x20e>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a3a      	ldr	r2, [pc, #232]	; (8007e78 <HAL_DMA_Abort+0x218>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d06d      	beq.n	8007e6e <HAL_DMA_Abort+0x20e>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a39      	ldr	r2, [pc, #228]	; (8007e7c <HAL_DMA_Abort+0x21c>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d068      	beq.n	8007e6e <HAL_DMA_Abort+0x20e>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a37      	ldr	r2, [pc, #220]	; (8007e80 <HAL_DMA_Abort+0x220>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d063      	beq.n	8007e6e <HAL_DMA_Abort+0x20e>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a36      	ldr	r2, [pc, #216]	; (8007e84 <HAL_DMA_Abort+0x224>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d05e      	beq.n	8007e6e <HAL_DMA_Abort+0x20e>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a34      	ldr	r2, [pc, #208]	; (8007e88 <HAL_DMA_Abort+0x228>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d059      	beq.n	8007e6e <HAL_DMA_Abort+0x20e>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a33      	ldr	r2, [pc, #204]	; (8007e8c <HAL_DMA_Abort+0x22c>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d054      	beq.n	8007e6e <HAL_DMA_Abort+0x20e>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a31      	ldr	r2, [pc, #196]	; (8007e90 <HAL_DMA_Abort+0x230>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d04f      	beq.n	8007e6e <HAL_DMA_Abort+0x20e>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a30      	ldr	r2, [pc, #192]	; (8007e94 <HAL_DMA_Abort+0x234>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d04a      	beq.n	8007e6e <HAL_DMA_Abort+0x20e>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a2e      	ldr	r2, [pc, #184]	; (8007e98 <HAL_DMA_Abort+0x238>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d045      	beq.n	8007e6e <HAL_DMA_Abort+0x20e>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a2d      	ldr	r2, [pc, #180]	; (8007e9c <HAL_DMA_Abort+0x23c>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d040      	beq.n	8007e6e <HAL_DMA_Abort+0x20e>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a2b      	ldr	r2, [pc, #172]	; (8007ea0 <HAL_DMA_Abort+0x240>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d03b      	beq.n	8007e6e <HAL_DMA_Abort+0x20e>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a2a      	ldr	r2, [pc, #168]	; (8007ea4 <HAL_DMA_Abort+0x244>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d036      	beq.n	8007e6e <HAL_DMA_Abort+0x20e>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a28      	ldr	r2, [pc, #160]	; (8007ea8 <HAL_DMA_Abort+0x248>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d031      	beq.n	8007e6e <HAL_DMA_Abort+0x20e>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a27      	ldr	r2, [pc, #156]	; (8007eac <HAL_DMA_Abort+0x24c>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d02c      	beq.n	8007e6e <HAL_DMA_Abort+0x20e>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a25      	ldr	r2, [pc, #148]	; (8007eb0 <HAL_DMA_Abort+0x250>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d027      	beq.n	8007e6e <HAL_DMA_Abort+0x20e>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a24      	ldr	r2, [pc, #144]	; (8007eb4 <HAL_DMA_Abort+0x254>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d022      	beq.n	8007e6e <HAL_DMA_Abort+0x20e>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a22      	ldr	r2, [pc, #136]	; (8007eb8 <HAL_DMA_Abort+0x258>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d01d      	beq.n	8007e6e <HAL_DMA_Abort+0x20e>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a21      	ldr	r2, [pc, #132]	; (8007ebc <HAL_DMA_Abort+0x25c>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d018      	beq.n	8007e6e <HAL_DMA_Abort+0x20e>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a1f      	ldr	r2, [pc, #124]	; (8007ec0 <HAL_DMA_Abort+0x260>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d013      	beq.n	8007e6e <HAL_DMA_Abort+0x20e>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a1e      	ldr	r2, [pc, #120]	; (8007ec4 <HAL_DMA_Abort+0x264>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d00e      	beq.n	8007e6e <HAL_DMA_Abort+0x20e>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a1c      	ldr	r2, [pc, #112]	; (8007ec8 <HAL_DMA_Abort+0x268>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d009      	beq.n	8007e6e <HAL_DMA_Abort+0x20e>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a1b      	ldr	r2, [pc, #108]	; (8007ecc <HAL_DMA_Abort+0x26c>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d004      	beq.n	8007e6e <HAL_DMA_Abort+0x20e>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a19      	ldr	r2, [pc, #100]	; (8007ed0 <HAL_DMA_Abort+0x270>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d132      	bne.n	8007ed4 <HAL_DMA_Abort+0x274>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e031      	b.n	8007ed6 <HAL_DMA_Abort+0x276>
 8007e72:	bf00      	nop
 8007e74:	40020010 	.word	0x40020010
 8007e78:	40020028 	.word	0x40020028
 8007e7c:	40020040 	.word	0x40020040
 8007e80:	40020058 	.word	0x40020058
 8007e84:	40020070 	.word	0x40020070
 8007e88:	40020088 	.word	0x40020088
 8007e8c:	400200a0 	.word	0x400200a0
 8007e90:	400200b8 	.word	0x400200b8
 8007e94:	40020410 	.word	0x40020410
 8007e98:	40020428 	.word	0x40020428
 8007e9c:	40020440 	.word	0x40020440
 8007ea0:	40020458 	.word	0x40020458
 8007ea4:	40020470 	.word	0x40020470
 8007ea8:	40020488 	.word	0x40020488
 8007eac:	400204a0 	.word	0x400204a0
 8007eb0:	400204b8 	.word	0x400204b8
 8007eb4:	58025408 	.word	0x58025408
 8007eb8:	5802541c 	.word	0x5802541c
 8007ebc:	58025430 	.word	0x58025430
 8007ec0:	58025444 	.word	0x58025444
 8007ec4:	58025458 	.word	0x58025458
 8007ec8:	5802546c 	.word	0x5802546c
 8007ecc:	58025480 	.word	0x58025480
 8007ed0:	58025494 	.word	0x58025494
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d007      	beq.n	8007eea <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ee4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ee8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a6d      	ldr	r2, [pc, #436]	; (80080a4 <HAL_DMA_Abort+0x444>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d04a      	beq.n	8007f8a <HAL_DMA_Abort+0x32a>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a6b      	ldr	r2, [pc, #428]	; (80080a8 <HAL_DMA_Abort+0x448>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d045      	beq.n	8007f8a <HAL_DMA_Abort+0x32a>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a6a      	ldr	r2, [pc, #424]	; (80080ac <HAL_DMA_Abort+0x44c>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d040      	beq.n	8007f8a <HAL_DMA_Abort+0x32a>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a68      	ldr	r2, [pc, #416]	; (80080b0 <HAL_DMA_Abort+0x450>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d03b      	beq.n	8007f8a <HAL_DMA_Abort+0x32a>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a67      	ldr	r2, [pc, #412]	; (80080b4 <HAL_DMA_Abort+0x454>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d036      	beq.n	8007f8a <HAL_DMA_Abort+0x32a>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a65      	ldr	r2, [pc, #404]	; (80080b8 <HAL_DMA_Abort+0x458>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d031      	beq.n	8007f8a <HAL_DMA_Abort+0x32a>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a64      	ldr	r2, [pc, #400]	; (80080bc <HAL_DMA_Abort+0x45c>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d02c      	beq.n	8007f8a <HAL_DMA_Abort+0x32a>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a62      	ldr	r2, [pc, #392]	; (80080c0 <HAL_DMA_Abort+0x460>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d027      	beq.n	8007f8a <HAL_DMA_Abort+0x32a>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a61      	ldr	r2, [pc, #388]	; (80080c4 <HAL_DMA_Abort+0x464>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d022      	beq.n	8007f8a <HAL_DMA_Abort+0x32a>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a5f      	ldr	r2, [pc, #380]	; (80080c8 <HAL_DMA_Abort+0x468>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d01d      	beq.n	8007f8a <HAL_DMA_Abort+0x32a>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a5e      	ldr	r2, [pc, #376]	; (80080cc <HAL_DMA_Abort+0x46c>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d018      	beq.n	8007f8a <HAL_DMA_Abort+0x32a>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a5c      	ldr	r2, [pc, #368]	; (80080d0 <HAL_DMA_Abort+0x470>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d013      	beq.n	8007f8a <HAL_DMA_Abort+0x32a>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a5b      	ldr	r2, [pc, #364]	; (80080d4 <HAL_DMA_Abort+0x474>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d00e      	beq.n	8007f8a <HAL_DMA_Abort+0x32a>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a59      	ldr	r2, [pc, #356]	; (80080d8 <HAL_DMA_Abort+0x478>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d009      	beq.n	8007f8a <HAL_DMA_Abort+0x32a>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a58      	ldr	r2, [pc, #352]	; (80080dc <HAL_DMA_Abort+0x47c>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d004      	beq.n	8007f8a <HAL_DMA_Abort+0x32a>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a56      	ldr	r2, [pc, #344]	; (80080e0 <HAL_DMA_Abort+0x480>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d108      	bne.n	8007f9c <HAL_DMA_Abort+0x33c>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f022 0201 	bic.w	r2, r2, #1
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	e007      	b.n	8007fac <HAL_DMA_Abort+0x34c>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f022 0201 	bic.w	r2, r2, #1
 8007faa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007fac:	e013      	b.n	8007fd6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007fae:	f7fc fef1 	bl	8004d94 <HAL_GetTick>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	2b05      	cmp	r3, #5
 8007fba:	d90c      	bls.n	8007fd6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2220      	movs	r2, #32
 8007fc0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2203      	movs	r2, #3
 8007fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e12d      	b.n	8008232 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 0301 	and.w	r3, r3, #1
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1e5      	bne.n	8007fae <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a2f      	ldr	r2, [pc, #188]	; (80080a4 <HAL_DMA_Abort+0x444>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d04a      	beq.n	8008082 <HAL_DMA_Abort+0x422>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a2d      	ldr	r2, [pc, #180]	; (80080a8 <HAL_DMA_Abort+0x448>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d045      	beq.n	8008082 <HAL_DMA_Abort+0x422>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a2c      	ldr	r2, [pc, #176]	; (80080ac <HAL_DMA_Abort+0x44c>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d040      	beq.n	8008082 <HAL_DMA_Abort+0x422>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a2a      	ldr	r2, [pc, #168]	; (80080b0 <HAL_DMA_Abort+0x450>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d03b      	beq.n	8008082 <HAL_DMA_Abort+0x422>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a29      	ldr	r2, [pc, #164]	; (80080b4 <HAL_DMA_Abort+0x454>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d036      	beq.n	8008082 <HAL_DMA_Abort+0x422>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a27      	ldr	r2, [pc, #156]	; (80080b8 <HAL_DMA_Abort+0x458>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d031      	beq.n	8008082 <HAL_DMA_Abort+0x422>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a26      	ldr	r2, [pc, #152]	; (80080bc <HAL_DMA_Abort+0x45c>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d02c      	beq.n	8008082 <HAL_DMA_Abort+0x422>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a24      	ldr	r2, [pc, #144]	; (80080c0 <HAL_DMA_Abort+0x460>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d027      	beq.n	8008082 <HAL_DMA_Abort+0x422>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a23      	ldr	r2, [pc, #140]	; (80080c4 <HAL_DMA_Abort+0x464>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d022      	beq.n	8008082 <HAL_DMA_Abort+0x422>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a21      	ldr	r2, [pc, #132]	; (80080c8 <HAL_DMA_Abort+0x468>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d01d      	beq.n	8008082 <HAL_DMA_Abort+0x422>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a20      	ldr	r2, [pc, #128]	; (80080cc <HAL_DMA_Abort+0x46c>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d018      	beq.n	8008082 <HAL_DMA_Abort+0x422>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a1e      	ldr	r2, [pc, #120]	; (80080d0 <HAL_DMA_Abort+0x470>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d013      	beq.n	8008082 <HAL_DMA_Abort+0x422>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a1d      	ldr	r2, [pc, #116]	; (80080d4 <HAL_DMA_Abort+0x474>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d00e      	beq.n	8008082 <HAL_DMA_Abort+0x422>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a1b      	ldr	r2, [pc, #108]	; (80080d8 <HAL_DMA_Abort+0x478>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d009      	beq.n	8008082 <HAL_DMA_Abort+0x422>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a1a      	ldr	r2, [pc, #104]	; (80080dc <HAL_DMA_Abort+0x47c>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d004      	beq.n	8008082 <HAL_DMA_Abort+0x422>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a18      	ldr	r2, [pc, #96]	; (80080e0 <HAL_DMA_Abort+0x480>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d101      	bne.n	8008086 <HAL_DMA_Abort+0x426>
 8008082:	2301      	movs	r3, #1
 8008084:	e000      	b.n	8008088 <HAL_DMA_Abort+0x428>
 8008086:	2300      	movs	r3, #0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d02b      	beq.n	80080e4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008090:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008096:	f003 031f 	and.w	r3, r3, #31
 800809a:	223f      	movs	r2, #63	; 0x3f
 800809c:	409a      	lsls	r2, r3
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	609a      	str	r2, [r3, #8]
 80080a2:	e02a      	b.n	80080fa <HAL_DMA_Abort+0x49a>
 80080a4:	40020010 	.word	0x40020010
 80080a8:	40020028 	.word	0x40020028
 80080ac:	40020040 	.word	0x40020040
 80080b0:	40020058 	.word	0x40020058
 80080b4:	40020070 	.word	0x40020070
 80080b8:	40020088 	.word	0x40020088
 80080bc:	400200a0 	.word	0x400200a0
 80080c0:	400200b8 	.word	0x400200b8
 80080c4:	40020410 	.word	0x40020410
 80080c8:	40020428 	.word	0x40020428
 80080cc:	40020440 	.word	0x40020440
 80080d0:	40020458 	.word	0x40020458
 80080d4:	40020470 	.word	0x40020470
 80080d8:	40020488 	.word	0x40020488
 80080dc:	400204a0 	.word	0x400204a0
 80080e0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080e8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ee:	f003 031f 	and.w	r3, r3, #31
 80080f2:	2201      	movs	r2, #1
 80080f4:	409a      	lsls	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a4f      	ldr	r2, [pc, #316]	; (800823c <HAL_DMA_Abort+0x5dc>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d072      	beq.n	80081ea <HAL_DMA_Abort+0x58a>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a4d      	ldr	r2, [pc, #308]	; (8008240 <HAL_DMA_Abort+0x5e0>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d06d      	beq.n	80081ea <HAL_DMA_Abort+0x58a>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a4c      	ldr	r2, [pc, #304]	; (8008244 <HAL_DMA_Abort+0x5e4>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d068      	beq.n	80081ea <HAL_DMA_Abort+0x58a>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a4a      	ldr	r2, [pc, #296]	; (8008248 <HAL_DMA_Abort+0x5e8>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d063      	beq.n	80081ea <HAL_DMA_Abort+0x58a>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a49      	ldr	r2, [pc, #292]	; (800824c <HAL_DMA_Abort+0x5ec>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d05e      	beq.n	80081ea <HAL_DMA_Abort+0x58a>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a47      	ldr	r2, [pc, #284]	; (8008250 <HAL_DMA_Abort+0x5f0>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d059      	beq.n	80081ea <HAL_DMA_Abort+0x58a>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a46      	ldr	r2, [pc, #280]	; (8008254 <HAL_DMA_Abort+0x5f4>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d054      	beq.n	80081ea <HAL_DMA_Abort+0x58a>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a44      	ldr	r2, [pc, #272]	; (8008258 <HAL_DMA_Abort+0x5f8>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d04f      	beq.n	80081ea <HAL_DMA_Abort+0x58a>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a43      	ldr	r2, [pc, #268]	; (800825c <HAL_DMA_Abort+0x5fc>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d04a      	beq.n	80081ea <HAL_DMA_Abort+0x58a>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a41      	ldr	r2, [pc, #260]	; (8008260 <HAL_DMA_Abort+0x600>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d045      	beq.n	80081ea <HAL_DMA_Abort+0x58a>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a40      	ldr	r2, [pc, #256]	; (8008264 <HAL_DMA_Abort+0x604>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d040      	beq.n	80081ea <HAL_DMA_Abort+0x58a>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a3e      	ldr	r2, [pc, #248]	; (8008268 <HAL_DMA_Abort+0x608>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d03b      	beq.n	80081ea <HAL_DMA_Abort+0x58a>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a3d      	ldr	r2, [pc, #244]	; (800826c <HAL_DMA_Abort+0x60c>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d036      	beq.n	80081ea <HAL_DMA_Abort+0x58a>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a3b      	ldr	r2, [pc, #236]	; (8008270 <HAL_DMA_Abort+0x610>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d031      	beq.n	80081ea <HAL_DMA_Abort+0x58a>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a3a      	ldr	r2, [pc, #232]	; (8008274 <HAL_DMA_Abort+0x614>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d02c      	beq.n	80081ea <HAL_DMA_Abort+0x58a>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a38      	ldr	r2, [pc, #224]	; (8008278 <HAL_DMA_Abort+0x618>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d027      	beq.n	80081ea <HAL_DMA_Abort+0x58a>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a37      	ldr	r2, [pc, #220]	; (800827c <HAL_DMA_Abort+0x61c>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d022      	beq.n	80081ea <HAL_DMA_Abort+0x58a>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a35      	ldr	r2, [pc, #212]	; (8008280 <HAL_DMA_Abort+0x620>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d01d      	beq.n	80081ea <HAL_DMA_Abort+0x58a>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a34      	ldr	r2, [pc, #208]	; (8008284 <HAL_DMA_Abort+0x624>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d018      	beq.n	80081ea <HAL_DMA_Abort+0x58a>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a32      	ldr	r2, [pc, #200]	; (8008288 <HAL_DMA_Abort+0x628>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d013      	beq.n	80081ea <HAL_DMA_Abort+0x58a>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a31      	ldr	r2, [pc, #196]	; (800828c <HAL_DMA_Abort+0x62c>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d00e      	beq.n	80081ea <HAL_DMA_Abort+0x58a>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a2f      	ldr	r2, [pc, #188]	; (8008290 <HAL_DMA_Abort+0x630>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d009      	beq.n	80081ea <HAL_DMA_Abort+0x58a>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a2e      	ldr	r2, [pc, #184]	; (8008294 <HAL_DMA_Abort+0x634>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d004      	beq.n	80081ea <HAL_DMA_Abort+0x58a>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a2c      	ldr	r2, [pc, #176]	; (8008298 <HAL_DMA_Abort+0x638>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d101      	bne.n	80081ee <HAL_DMA_Abort+0x58e>
 80081ea:	2301      	movs	r3, #1
 80081ec:	e000      	b.n	80081f0 <HAL_DMA_Abort+0x590>
 80081ee:	2300      	movs	r3, #0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d015      	beq.n	8008220 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80081fc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00c      	beq.n	8008220 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008210:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008214:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800821e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3718      	adds	r7, #24
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	40020010 	.word	0x40020010
 8008240:	40020028 	.word	0x40020028
 8008244:	40020040 	.word	0x40020040
 8008248:	40020058 	.word	0x40020058
 800824c:	40020070 	.word	0x40020070
 8008250:	40020088 	.word	0x40020088
 8008254:	400200a0 	.word	0x400200a0
 8008258:	400200b8 	.word	0x400200b8
 800825c:	40020410 	.word	0x40020410
 8008260:	40020428 	.word	0x40020428
 8008264:	40020440 	.word	0x40020440
 8008268:	40020458 	.word	0x40020458
 800826c:	40020470 	.word	0x40020470
 8008270:	40020488 	.word	0x40020488
 8008274:	400204a0 	.word	0x400204a0
 8008278:	400204b8 	.word	0x400204b8
 800827c:	58025408 	.word	0x58025408
 8008280:	5802541c 	.word	0x5802541c
 8008284:	58025430 	.word	0x58025430
 8008288:	58025444 	.word	0x58025444
 800828c:	58025458 	.word	0x58025458
 8008290:	5802546c 	.word	0x5802546c
 8008294:	58025480 	.word	0x58025480
 8008298:	58025494 	.word	0x58025494

0800829c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e237      	b.n	800871e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d004      	beq.n	80082c4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2280      	movs	r2, #128	; 0x80
 80082be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	e22c      	b.n	800871e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a5c      	ldr	r2, [pc, #368]	; (800843c <HAL_DMA_Abort_IT+0x1a0>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d04a      	beq.n	8008364 <HAL_DMA_Abort_IT+0xc8>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a5b      	ldr	r2, [pc, #364]	; (8008440 <HAL_DMA_Abort_IT+0x1a4>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d045      	beq.n	8008364 <HAL_DMA_Abort_IT+0xc8>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a59      	ldr	r2, [pc, #356]	; (8008444 <HAL_DMA_Abort_IT+0x1a8>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d040      	beq.n	8008364 <HAL_DMA_Abort_IT+0xc8>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a58      	ldr	r2, [pc, #352]	; (8008448 <HAL_DMA_Abort_IT+0x1ac>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d03b      	beq.n	8008364 <HAL_DMA_Abort_IT+0xc8>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a56      	ldr	r2, [pc, #344]	; (800844c <HAL_DMA_Abort_IT+0x1b0>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d036      	beq.n	8008364 <HAL_DMA_Abort_IT+0xc8>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a55      	ldr	r2, [pc, #340]	; (8008450 <HAL_DMA_Abort_IT+0x1b4>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d031      	beq.n	8008364 <HAL_DMA_Abort_IT+0xc8>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a53      	ldr	r2, [pc, #332]	; (8008454 <HAL_DMA_Abort_IT+0x1b8>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d02c      	beq.n	8008364 <HAL_DMA_Abort_IT+0xc8>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a52      	ldr	r2, [pc, #328]	; (8008458 <HAL_DMA_Abort_IT+0x1bc>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d027      	beq.n	8008364 <HAL_DMA_Abort_IT+0xc8>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a50      	ldr	r2, [pc, #320]	; (800845c <HAL_DMA_Abort_IT+0x1c0>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d022      	beq.n	8008364 <HAL_DMA_Abort_IT+0xc8>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a4f      	ldr	r2, [pc, #316]	; (8008460 <HAL_DMA_Abort_IT+0x1c4>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d01d      	beq.n	8008364 <HAL_DMA_Abort_IT+0xc8>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a4d      	ldr	r2, [pc, #308]	; (8008464 <HAL_DMA_Abort_IT+0x1c8>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d018      	beq.n	8008364 <HAL_DMA_Abort_IT+0xc8>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a4c      	ldr	r2, [pc, #304]	; (8008468 <HAL_DMA_Abort_IT+0x1cc>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d013      	beq.n	8008364 <HAL_DMA_Abort_IT+0xc8>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a4a      	ldr	r2, [pc, #296]	; (800846c <HAL_DMA_Abort_IT+0x1d0>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d00e      	beq.n	8008364 <HAL_DMA_Abort_IT+0xc8>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a49      	ldr	r2, [pc, #292]	; (8008470 <HAL_DMA_Abort_IT+0x1d4>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d009      	beq.n	8008364 <HAL_DMA_Abort_IT+0xc8>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a47      	ldr	r2, [pc, #284]	; (8008474 <HAL_DMA_Abort_IT+0x1d8>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d004      	beq.n	8008364 <HAL_DMA_Abort_IT+0xc8>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a46      	ldr	r2, [pc, #280]	; (8008478 <HAL_DMA_Abort_IT+0x1dc>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d101      	bne.n	8008368 <HAL_DMA_Abort_IT+0xcc>
 8008364:	2301      	movs	r3, #1
 8008366:	e000      	b.n	800836a <HAL_DMA_Abort_IT+0xce>
 8008368:	2300      	movs	r3, #0
 800836a:	2b00      	cmp	r3, #0
 800836c:	f000 8086 	beq.w	800847c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2204      	movs	r2, #4
 8008374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a2f      	ldr	r2, [pc, #188]	; (800843c <HAL_DMA_Abort_IT+0x1a0>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d04a      	beq.n	8008418 <HAL_DMA_Abort_IT+0x17c>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a2e      	ldr	r2, [pc, #184]	; (8008440 <HAL_DMA_Abort_IT+0x1a4>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d045      	beq.n	8008418 <HAL_DMA_Abort_IT+0x17c>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a2c      	ldr	r2, [pc, #176]	; (8008444 <HAL_DMA_Abort_IT+0x1a8>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d040      	beq.n	8008418 <HAL_DMA_Abort_IT+0x17c>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a2b      	ldr	r2, [pc, #172]	; (8008448 <HAL_DMA_Abort_IT+0x1ac>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d03b      	beq.n	8008418 <HAL_DMA_Abort_IT+0x17c>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a29      	ldr	r2, [pc, #164]	; (800844c <HAL_DMA_Abort_IT+0x1b0>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d036      	beq.n	8008418 <HAL_DMA_Abort_IT+0x17c>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a28      	ldr	r2, [pc, #160]	; (8008450 <HAL_DMA_Abort_IT+0x1b4>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d031      	beq.n	8008418 <HAL_DMA_Abort_IT+0x17c>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a26      	ldr	r2, [pc, #152]	; (8008454 <HAL_DMA_Abort_IT+0x1b8>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d02c      	beq.n	8008418 <HAL_DMA_Abort_IT+0x17c>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a25      	ldr	r2, [pc, #148]	; (8008458 <HAL_DMA_Abort_IT+0x1bc>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d027      	beq.n	8008418 <HAL_DMA_Abort_IT+0x17c>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a23      	ldr	r2, [pc, #140]	; (800845c <HAL_DMA_Abort_IT+0x1c0>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d022      	beq.n	8008418 <HAL_DMA_Abort_IT+0x17c>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a22      	ldr	r2, [pc, #136]	; (8008460 <HAL_DMA_Abort_IT+0x1c4>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d01d      	beq.n	8008418 <HAL_DMA_Abort_IT+0x17c>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a20      	ldr	r2, [pc, #128]	; (8008464 <HAL_DMA_Abort_IT+0x1c8>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d018      	beq.n	8008418 <HAL_DMA_Abort_IT+0x17c>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a1f      	ldr	r2, [pc, #124]	; (8008468 <HAL_DMA_Abort_IT+0x1cc>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d013      	beq.n	8008418 <HAL_DMA_Abort_IT+0x17c>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a1d      	ldr	r2, [pc, #116]	; (800846c <HAL_DMA_Abort_IT+0x1d0>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d00e      	beq.n	8008418 <HAL_DMA_Abort_IT+0x17c>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a1c      	ldr	r2, [pc, #112]	; (8008470 <HAL_DMA_Abort_IT+0x1d4>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d009      	beq.n	8008418 <HAL_DMA_Abort_IT+0x17c>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a1a      	ldr	r2, [pc, #104]	; (8008474 <HAL_DMA_Abort_IT+0x1d8>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d004      	beq.n	8008418 <HAL_DMA_Abort_IT+0x17c>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a19      	ldr	r2, [pc, #100]	; (8008478 <HAL_DMA_Abort_IT+0x1dc>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d108      	bne.n	800842a <HAL_DMA_Abort_IT+0x18e>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f022 0201 	bic.w	r2, r2, #1
 8008426:	601a      	str	r2, [r3, #0]
 8008428:	e178      	b.n	800871c <HAL_DMA_Abort_IT+0x480>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f022 0201 	bic.w	r2, r2, #1
 8008438:	601a      	str	r2, [r3, #0]
 800843a:	e16f      	b.n	800871c <HAL_DMA_Abort_IT+0x480>
 800843c:	40020010 	.word	0x40020010
 8008440:	40020028 	.word	0x40020028
 8008444:	40020040 	.word	0x40020040
 8008448:	40020058 	.word	0x40020058
 800844c:	40020070 	.word	0x40020070
 8008450:	40020088 	.word	0x40020088
 8008454:	400200a0 	.word	0x400200a0
 8008458:	400200b8 	.word	0x400200b8
 800845c:	40020410 	.word	0x40020410
 8008460:	40020428 	.word	0x40020428
 8008464:	40020440 	.word	0x40020440
 8008468:	40020458 	.word	0x40020458
 800846c:	40020470 	.word	0x40020470
 8008470:	40020488 	.word	0x40020488
 8008474:	400204a0 	.word	0x400204a0
 8008478:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f022 020e 	bic.w	r2, r2, #14
 800848a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a6c      	ldr	r2, [pc, #432]	; (8008644 <HAL_DMA_Abort_IT+0x3a8>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d04a      	beq.n	800852c <HAL_DMA_Abort_IT+0x290>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a6b      	ldr	r2, [pc, #428]	; (8008648 <HAL_DMA_Abort_IT+0x3ac>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d045      	beq.n	800852c <HAL_DMA_Abort_IT+0x290>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a69      	ldr	r2, [pc, #420]	; (800864c <HAL_DMA_Abort_IT+0x3b0>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d040      	beq.n	800852c <HAL_DMA_Abort_IT+0x290>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a68      	ldr	r2, [pc, #416]	; (8008650 <HAL_DMA_Abort_IT+0x3b4>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d03b      	beq.n	800852c <HAL_DMA_Abort_IT+0x290>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a66      	ldr	r2, [pc, #408]	; (8008654 <HAL_DMA_Abort_IT+0x3b8>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d036      	beq.n	800852c <HAL_DMA_Abort_IT+0x290>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a65      	ldr	r2, [pc, #404]	; (8008658 <HAL_DMA_Abort_IT+0x3bc>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d031      	beq.n	800852c <HAL_DMA_Abort_IT+0x290>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a63      	ldr	r2, [pc, #396]	; (800865c <HAL_DMA_Abort_IT+0x3c0>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d02c      	beq.n	800852c <HAL_DMA_Abort_IT+0x290>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a62      	ldr	r2, [pc, #392]	; (8008660 <HAL_DMA_Abort_IT+0x3c4>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d027      	beq.n	800852c <HAL_DMA_Abort_IT+0x290>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a60      	ldr	r2, [pc, #384]	; (8008664 <HAL_DMA_Abort_IT+0x3c8>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d022      	beq.n	800852c <HAL_DMA_Abort_IT+0x290>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a5f      	ldr	r2, [pc, #380]	; (8008668 <HAL_DMA_Abort_IT+0x3cc>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d01d      	beq.n	800852c <HAL_DMA_Abort_IT+0x290>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a5d      	ldr	r2, [pc, #372]	; (800866c <HAL_DMA_Abort_IT+0x3d0>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d018      	beq.n	800852c <HAL_DMA_Abort_IT+0x290>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a5c      	ldr	r2, [pc, #368]	; (8008670 <HAL_DMA_Abort_IT+0x3d4>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d013      	beq.n	800852c <HAL_DMA_Abort_IT+0x290>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a5a      	ldr	r2, [pc, #360]	; (8008674 <HAL_DMA_Abort_IT+0x3d8>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d00e      	beq.n	800852c <HAL_DMA_Abort_IT+0x290>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a59      	ldr	r2, [pc, #356]	; (8008678 <HAL_DMA_Abort_IT+0x3dc>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d009      	beq.n	800852c <HAL_DMA_Abort_IT+0x290>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a57      	ldr	r2, [pc, #348]	; (800867c <HAL_DMA_Abort_IT+0x3e0>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d004      	beq.n	800852c <HAL_DMA_Abort_IT+0x290>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a56      	ldr	r2, [pc, #344]	; (8008680 <HAL_DMA_Abort_IT+0x3e4>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d108      	bne.n	800853e <HAL_DMA_Abort_IT+0x2a2>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f022 0201 	bic.w	r2, r2, #1
 800853a:	601a      	str	r2, [r3, #0]
 800853c:	e007      	b.n	800854e <HAL_DMA_Abort_IT+0x2b2>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f022 0201 	bic.w	r2, r2, #1
 800854c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a3c      	ldr	r2, [pc, #240]	; (8008644 <HAL_DMA_Abort_IT+0x3a8>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d072      	beq.n	800863e <HAL_DMA_Abort_IT+0x3a2>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a3a      	ldr	r2, [pc, #232]	; (8008648 <HAL_DMA_Abort_IT+0x3ac>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d06d      	beq.n	800863e <HAL_DMA_Abort_IT+0x3a2>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a39      	ldr	r2, [pc, #228]	; (800864c <HAL_DMA_Abort_IT+0x3b0>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d068      	beq.n	800863e <HAL_DMA_Abort_IT+0x3a2>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a37      	ldr	r2, [pc, #220]	; (8008650 <HAL_DMA_Abort_IT+0x3b4>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d063      	beq.n	800863e <HAL_DMA_Abort_IT+0x3a2>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a36      	ldr	r2, [pc, #216]	; (8008654 <HAL_DMA_Abort_IT+0x3b8>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d05e      	beq.n	800863e <HAL_DMA_Abort_IT+0x3a2>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a34      	ldr	r2, [pc, #208]	; (8008658 <HAL_DMA_Abort_IT+0x3bc>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d059      	beq.n	800863e <HAL_DMA_Abort_IT+0x3a2>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a33      	ldr	r2, [pc, #204]	; (800865c <HAL_DMA_Abort_IT+0x3c0>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d054      	beq.n	800863e <HAL_DMA_Abort_IT+0x3a2>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a31      	ldr	r2, [pc, #196]	; (8008660 <HAL_DMA_Abort_IT+0x3c4>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d04f      	beq.n	800863e <HAL_DMA_Abort_IT+0x3a2>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a30      	ldr	r2, [pc, #192]	; (8008664 <HAL_DMA_Abort_IT+0x3c8>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d04a      	beq.n	800863e <HAL_DMA_Abort_IT+0x3a2>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a2e      	ldr	r2, [pc, #184]	; (8008668 <HAL_DMA_Abort_IT+0x3cc>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d045      	beq.n	800863e <HAL_DMA_Abort_IT+0x3a2>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a2d      	ldr	r2, [pc, #180]	; (800866c <HAL_DMA_Abort_IT+0x3d0>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d040      	beq.n	800863e <HAL_DMA_Abort_IT+0x3a2>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a2b      	ldr	r2, [pc, #172]	; (8008670 <HAL_DMA_Abort_IT+0x3d4>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d03b      	beq.n	800863e <HAL_DMA_Abort_IT+0x3a2>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a2a      	ldr	r2, [pc, #168]	; (8008674 <HAL_DMA_Abort_IT+0x3d8>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d036      	beq.n	800863e <HAL_DMA_Abort_IT+0x3a2>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a28      	ldr	r2, [pc, #160]	; (8008678 <HAL_DMA_Abort_IT+0x3dc>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d031      	beq.n	800863e <HAL_DMA_Abort_IT+0x3a2>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a27      	ldr	r2, [pc, #156]	; (800867c <HAL_DMA_Abort_IT+0x3e0>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d02c      	beq.n	800863e <HAL_DMA_Abort_IT+0x3a2>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a25      	ldr	r2, [pc, #148]	; (8008680 <HAL_DMA_Abort_IT+0x3e4>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d027      	beq.n	800863e <HAL_DMA_Abort_IT+0x3a2>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a24      	ldr	r2, [pc, #144]	; (8008684 <HAL_DMA_Abort_IT+0x3e8>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d022      	beq.n	800863e <HAL_DMA_Abort_IT+0x3a2>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a22      	ldr	r2, [pc, #136]	; (8008688 <HAL_DMA_Abort_IT+0x3ec>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d01d      	beq.n	800863e <HAL_DMA_Abort_IT+0x3a2>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a21      	ldr	r2, [pc, #132]	; (800868c <HAL_DMA_Abort_IT+0x3f0>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d018      	beq.n	800863e <HAL_DMA_Abort_IT+0x3a2>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a1f      	ldr	r2, [pc, #124]	; (8008690 <HAL_DMA_Abort_IT+0x3f4>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d013      	beq.n	800863e <HAL_DMA_Abort_IT+0x3a2>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a1e      	ldr	r2, [pc, #120]	; (8008694 <HAL_DMA_Abort_IT+0x3f8>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d00e      	beq.n	800863e <HAL_DMA_Abort_IT+0x3a2>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a1c      	ldr	r2, [pc, #112]	; (8008698 <HAL_DMA_Abort_IT+0x3fc>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d009      	beq.n	800863e <HAL_DMA_Abort_IT+0x3a2>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a1b      	ldr	r2, [pc, #108]	; (800869c <HAL_DMA_Abort_IT+0x400>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d004      	beq.n	800863e <HAL_DMA_Abort_IT+0x3a2>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a19      	ldr	r2, [pc, #100]	; (80086a0 <HAL_DMA_Abort_IT+0x404>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d132      	bne.n	80086a4 <HAL_DMA_Abort_IT+0x408>
 800863e:	2301      	movs	r3, #1
 8008640:	e031      	b.n	80086a6 <HAL_DMA_Abort_IT+0x40a>
 8008642:	bf00      	nop
 8008644:	40020010 	.word	0x40020010
 8008648:	40020028 	.word	0x40020028
 800864c:	40020040 	.word	0x40020040
 8008650:	40020058 	.word	0x40020058
 8008654:	40020070 	.word	0x40020070
 8008658:	40020088 	.word	0x40020088
 800865c:	400200a0 	.word	0x400200a0
 8008660:	400200b8 	.word	0x400200b8
 8008664:	40020410 	.word	0x40020410
 8008668:	40020428 	.word	0x40020428
 800866c:	40020440 	.word	0x40020440
 8008670:	40020458 	.word	0x40020458
 8008674:	40020470 	.word	0x40020470
 8008678:	40020488 	.word	0x40020488
 800867c:	400204a0 	.word	0x400204a0
 8008680:	400204b8 	.word	0x400204b8
 8008684:	58025408 	.word	0x58025408
 8008688:	5802541c 	.word	0x5802541c
 800868c:	58025430 	.word	0x58025430
 8008690:	58025444 	.word	0x58025444
 8008694:	58025458 	.word	0x58025458
 8008698:	5802546c 	.word	0x5802546c
 800869c:	58025480 	.word	0x58025480
 80086a0:	58025494 	.word	0x58025494
 80086a4:	2300      	movs	r3, #0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d028      	beq.n	80086fc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086b8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086be:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086c4:	f003 031f 	and.w	r3, r3, #31
 80086c8:	2201      	movs	r2, #1
 80086ca:	409a      	lsls	r2, r3
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80086d8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00c      	beq.n	80086fc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086f0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80086fa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008710:	2b00      	cmp	r3, #0
 8008712:	d003      	beq.n	800871c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop

08008728 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b08a      	sub	sp, #40	; 0x28
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008730:	2300      	movs	r3, #0
 8008732:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008734:	4b67      	ldr	r3, [pc, #412]	; (80088d4 <HAL_DMA_IRQHandler+0x1ac>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a67      	ldr	r2, [pc, #412]	; (80088d8 <HAL_DMA_IRQHandler+0x1b0>)
 800873a:	fba2 2303 	umull	r2, r3, r2, r3
 800873e:	0a9b      	lsrs	r3, r3, #10
 8008740:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008746:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800874c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800874e:	6a3b      	ldr	r3, [r7, #32]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a5f      	ldr	r2, [pc, #380]	; (80088dc <HAL_DMA_IRQHandler+0x1b4>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d04a      	beq.n	80087fa <HAL_DMA_IRQHandler+0xd2>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a5d      	ldr	r2, [pc, #372]	; (80088e0 <HAL_DMA_IRQHandler+0x1b8>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d045      	beq.n	80087fa <HAL_DMA_IRQHandler+0xd2>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a5c      	ldr	r2, [pc, #368]	; (80088e4 <HAL_DMA_IRQHandler+0x1bc>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d040      	beq.n	80087fa <HAL_DMA_IRQHandler+0xd2>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a5a      	ldr	r2, [pc, #360]	; (80088e8 <HAL_DMA_IRQHandler+0x1c0>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d03b      	beq.n	80087fa <HAL_DMA_IRQHandler+0xd2>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a59      	ldr	r2, [pc, #356]	; (80088ec <HAL_DMA_IRQHandler+0x1c4>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d036      	beq.n	80087fa <HAL_DMA_IRQHandler+0xd2>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a57      	ldr	r2, [pc, #348]	; (80088f0 <HAL_DMA_IRQHandler+0x1c8>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d031      	beq.n	80087fa <HAL_DMA_IRQHandler+0xd2>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a56      	ldr	r2, [pc, #344]	; (80088f4 <HAL_DMA_IRQHandler+0x1cc>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d02c      	beq.n	80087fa <HAL_DMA_IRQHandler+0xd2>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a54      	ldr	r2, [pc, #336]	; (80088f8 <HAL_DMA_IRQHandler+0x1d0>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d027      	beq.n	80087fa <HAL_DMA_IRQHandler+0xd2>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a53      	ldr	r2, [pc, #332]	; (80088fc <HAL_DMA_IRQHandler+0x1d4>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d022      	beq.n	80087fa <HAL_DMA_IRQHandler+0xd2>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a51      	ldr	r2, [pc, #324]	; (8008900 <HAL_DMA_IRQHandler+0x1d8>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d01d      	beq.n	80087fa <HAL_DMA_IRQHandler+0xd2>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a50      	ldr	r2, [pc, #320]	; (8008904 <HAL_DMA_IRQHandler+0x1dc>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d018      	beq.n	80087fa <HAL_DMA_IRQHandler+0xd2>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a4e      	ldr	r2, [pc, #312]	; (8008908 <HAL_DMA_IRQHandler+0x1e0>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d013      	beq.n	80087fa <HAL_DMA_IRQHandler+0xd2>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a4d      	ldr	r2, [pc, #308]	; (800890c <HAL_DMA_IRQHandler+0x1e4>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d00e      	beq.n	80087fa <HAL_DMA_IRQHandler+0xd2>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a4b      	ldr	r2, [pc, #300]	; (8008910 <HAL_DMA_IRQHandler+0x1e8>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d009      	beq.n	80087fa <HAL_DMA_IRQHandler+0xd2>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a4a      	ldr	r2, [pc, #296]	; (8008914 <HAL_DMA_IRQHandler+0x1ec>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d004      	beq.n	80087fa <HAL_DMA_IRQHandler+0xd2>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a48      	ldr	r2, [pc, #288]	; (8008918 <HAL_DMA_IRQHandler+0x1f0>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d101      	bne.n	80087fe <HAL_DMA_IRQHandler+0xd6>
 80087fa:	2301      	movs	r3, #1
 80087fc:	e000      	b.n	8008800 <HAL_DMA_IRQHandler+0xd8>
 80087fe:	2300      	movs	r3, #0
 8008800:	2b00      	cmp	r3, #0
 8008802:	f000 842b 	beq.w	800905c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800880a:	f003 031f 	and.w	r3, r3, #31
 800880e:	2208      	movs	r2, #8
 8008810:	409a      	lsls	r2, r3
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	4013      	ands	r3, r2
 8008816:	2b00      	cmp	r3, #0
 8008818:	f000 80a2 	beq.w	8008960 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a2e      	ldr	r2, [pc, #184]	; (80088dc <HAL_DMA_IRQHandler+0x1b4>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d04a      	beq.n	80088bc <HAL_DMA_IRQHandler+0x194>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a2d      	ldr	r2, [pc, #180]	; (80088e0 <HAL_DMA_IRQHandler+0x1b8>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d045      	beq.n	80088bc <HAL_DMA_IRQHandler+0x194>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a2b      	ldr	r2, [pc, #172]	; (80088e4 <HAL_DMA_IRQHandler+0x1bc>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d040      	beq.n	80088bc <HAL_DMA_IRQHandler+0x194>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a2a      	ldr	r2, [pc, #168]	; (80088e8 <HAL_DMA_IRQHandler+0x1c0>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d03b      	beq.n	80088bc <HAL_DMA_IRQHandler+0x194>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a28      	ldr	r2, [pc, #160]	; (80088ec <HAL_DMA_IRQHandler+0x1c4>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d036      	beq.n	80088bc <HAL_DMA_IRQHandler+0x194>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a27      	ldr	r2, [pc, #156]	; (80088f0 <HAL_DMA_IRQHandler+0x1c8>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d031      	beq.n	80088bc <HAL_DMA_IRQHandler+0x194>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a25      	ldr	r2, [pc, #148]	; (80088f4 <HAL_DMA_IRQHandler+0x1cc>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d02c      	beq.n	80088bc <HAL_DMA_IRQHandler+0x194>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a24      	ldr	r2, [pc, #144]	; (80088f8 <HAL_DMA_IRQHandler+0x1d0>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d027      	beq.n	80088bc <HAL_DMA_IRQHandler+0x194>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a22      	ldr	r2, [pc, #136]	; (80088fc <HAL_DMA_IRQHandler+0x1d4>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d022      	beq.n	80088bc <HAL_DMA_IRQHandler+0x194>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a21      	ldr	r2, [pc, #132]	; (8008900 <HAL_DMA_IRQHandler+0x1d8>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d01d      	beq.n	80088bc <HAL_DMA_IRQHandler+0x194>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a1f      	ldr	r2, [pc, #124]	; (8008904 <HAL_DMA_IRQHandler+0x1dc>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d018      	beq.n	80088bc <HAL_DMA_IRQHandler+0x194>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a1e      	ldr	r2, [pc, #120]	; (8008908 <HAL_DMA_IRQHandler+0x1e0>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d013      	beq.n	80088bc <HAL_DMA_IRQHandler+0x194>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a1c      	ldr	r2, [pc, #112]	; (800890c <HAL_DMA_IRQHandler+0x1e4>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d00e      	beq.n	80088bc <HAL_DMA_IRQHandler+0x194>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a1b      	ldr	r2, [pc, #108]	; (8008910 <HAL_DMA_IRQHandler+0x1e8>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d009      	beq.n	80088bc <HAL_DMA_IRQHandler+0x194>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a19      	ldr	r2, [pc, #100]	; (8008914 <HAL_DMA_IRQHandler+0x1ec>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d004      	beq.n	80088bc <HAL_DMA_IRQHandler+0x194>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a18      	ldr	r2, [pc, #96]	; (8008918 <HAL_DMA_IRQHandler+0x1f0>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d12f      	bne.n	800891c <HAL_DMA_IRQHandler+0x1f4>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 0304 	and.w	r3, r3, #4
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	bf14      	ite	ne
 80088ca:	2301      	movne	r3, #1
 80088cc:	2300      	moveq	r3, #0
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	e02e      	b.n	8008930 <HAL_DMA_IRQHandler+0x208>
 80088d2:	bf00      	nop
 80088d4:	240000bc 	.word	0x240000bc
 80088d8:	1b4e81b5 	.word	0x1b4e81b5
 80088dc:	40020010 	.word	0x40020010
 80088e0:	40020028 	.word	0x40020028
 80088e4:	40020040 	.word	0x40020040
 80088e8:	40020058 	.word	0x40020058
 80088ec:	40020070 	.word	0x40020070
 80088f0:	40020088 	.word	0x40020088
 80088f4:	400200a0 	.word	0x400200a0
 80088f8:	400200b8 	.word	0x400200b8
 80088fc:	40020410 	.word	0x40020410
 8008900:	40020428 	.word	0x40020428
 8008904:	40020440 	.word	0x40020440
 8008908:	40020458 	.word	0x40020458
 800890c:	40020470 	.word	0x40020470
 8008910:	40020488 	.word	0x40020488
 8008914:	400204a0 	.word	0x400204a0
 8008918:	400204b8 	.word	0x400204b8
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 0308 	and.w	r3, r3, #8
 8008926:	2b00      	cmp	r3, #0
 8008928:	bf14      	ite	ne
 800892a:	2301      	movne	r3, #1
 800892c:	2300      	moveq	r3, #0
 800892e:	b2db      	uxtb	r3, r3
 8008930:	2b00      	cmp	r3, #0
 8008932:	d015      	beq.n	8008960 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f022 0204 	bic.w	r2, r2, #4
 8008942:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008948:	f003 031f 	and.w	r3, r3, #31
 800894c:	2208      	movs	r2, #8
 800894e:	409a      	lsls	r2, r3
 8008950:	6a3b      	ldr	r3, [r7, #32]
 8008952:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008958:	f043 0201 	orr.w	r2, r3, #1
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008964:	f003 031f 	and.w	r3, r3, #31
 8008968:	69ba      	ldr	r2, [r7, #24]
 800896a:	fa22 f303 	lsr.w	r3, r2, r3
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	2b00      	cmp	r3, #0
 8008974:	d06e      	beq.n	8008a54 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a69      	ldr	r2, [pc, #420]	; (8008b20 <HAL_DMA_IRQHandler+0x3f8>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d04a      	beq.n	8008a16 <HAL_DMA_IRQHandler+0x2ee>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a67      	ldr	r2, [pc, #412]	; (8008b24 <HAL_DMA_IRQHandler+0x3fc>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d045      	beq.n	8008a16 <HAL_DMA_IRQHandler+0x2ee>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a66      	ldr	r2, [pc, #408]	; (8008b28 <HAL_DMA_IRQHandler+0x400>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d040      	beq.n	8008a16 <HAL_DMA_IRQHandler+0x2ee>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a64      	ldr	r2, [pc, #400]	; (8008b2c <HAL_DMA_IRQHandler+0x404>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d03b      	beq.n	8008a16 <HAL_DMA_IRQHandler+0x2ee>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a63      	ldr	r2, [pc, #396]	; (8008b30 <HAL_DMA_IRQHandler+0x408>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d036      	beq.n	8008a16 <HAL_DMA_IRQHandler+0x2ee>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a61      	ldr	r2, [pc, #388]	; (8008b34 <HAL_DMA_IRQHandler+0x40c>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d031      	beq.n	8008a16 <HAL_DMA_IRQHandler+0x2ee>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a60      	ldr	r2, [pc, #384]	; (8008b38 <HAL_DMA_IRQHandler+0x410>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d02c      	beq.n	8008a16 <HAL_DMA_IRQHandler+0x2ee>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a5e      	ldr	r2, [pc, #376]	; (8008b3c <HAL_DMA_IRQHandler+0x414>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d027      	beq.n	8008a16 <HAL_DMA_IRQHandler+0x2ee>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a5d      	ldr	r2, [pc, #372]	; (8008b40 <HAL_DMA_IRQHandler+0x418>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d022      	beq.n	8008a16 <HAL_DMA_IRQHandler+0x2ee>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a5b      	ldr	r2, [pc, #364]	; (8008b44 <HAL_DMA_IRQHandler+0x41c>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d01d      	beq.n	8008a16 <HAL_DMA_IRQHandler+0x2ee>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a5a      	ldr	r2, [pc, #360]	; (8008b48 <HAL_DMA_IRQHandler+0x420>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d018      	beq.n	8008a16 <HAL_DMA_IRQHandler+0x2ee>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a58      	ldr	r2, [pc, #352]	; (8008b4c <HAL_DMA_IRQHandler+0x424>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d013      	beq.n	8008a16 <HAL_DMA_IRQHandler+0x2ee>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a57      	ldr	r2, [pc, #348]	; (8008b50 <HAL_DMA_IRQHandler+0x428>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d00e      	beq.n	8008a16 <HAL_DMA_IRQHandler+0x2ee>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a55      	ldr	r2, [pc, #340]	; (8008b54 <HAL_DMA_IRQHandler+0x42c>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d009      	beq.n	8008a16 <HAL_DMA_IRQHandler+0x2ee>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a54      	ldr	r2, [pc, #336]	; (8008b58 <HAL_DMA_IRQHandler+0x430>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d004      	beq.n	8008a16 <HAL_DMA_IRQHandler+0x2ee>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a52      	ldr	r2, [pc, #328]	; (8008b5c <HAL_DMA_IRQHandler+0x434>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d10a      	bne.n	8008a2c <HAL_DMA_IRQHandler+0x304>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	695b      	ldr	r3, [r3, #20]
 8008a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	bf14      	ite	ne
 8008a24:	2301      	movne	r3, #1
 8008a26:	2300      	moveq	r3, #0
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	e003      	b.n	8008a34 <HAL_DMA_IRQHandler+0x30c>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2300      	movs	r3, #0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00d      	beq.n	8008a54 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a3c:	f003 031f 	and.w	r3, r3, #31
 8008a40:	2201      	movs	r2, #1
 8008a42:	409a      	lsls	r2, r3
 8008a44:	6a3b      	ldr	r3, [r7, #32]
 8008a46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a4c:	f043 0202 	orr.w	r2, r3, #2
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a58:	f003 031f 	and.w	r3, r3, #31
 8008a5c:	2204      	movs	r2, #4
 8008a5e:	409a      	lsls	r2, r3
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	4013      	ands	r3, r2
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f000 808f 	beq.w	8008b88 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a2c      	ldr	r2, [pc, #176]	; (8008b20 <HAL_DMA_IRQHandler+0x3f8>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d04a      	beq.n	8008b0a <HAL_DMA_IRQHandler+0x3e2>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a2a      	ldr	r2, [pc, #168]	; (8008b24 <HAL_DMA_IRQHandler+0x3fc>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d045      	beq.n	8008b0a <HAL_DMA_IRQHandler+0x3e2>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a29      	ldr	r2, [pc, #164]	; (8008b28 <HAL_DMA_IRQHandler+0x400>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d040      	beq.n	8008b0a <HAL_DMA_IRQHandler+0x3e2>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a27      	ldr	r2, [pc, #156]	; (8008b2c <HAL_DMA_IRQHandler+0x404>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d03b      	beq.n	8008b0a <HAL_DMA_IRQHandler+0x3e2>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a26      	ldr	r2, [pc, #152]	; (8008b30 <HAL_DMA_IRQHandler+0x408>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d036      	beq.n	8008b0a <HAL_DMA_IRQHandler+0x3e2>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a24      	ldr	r2, [pc, #144]	; (8008b34 <HAL_DMA_IRQHandler+0x40c>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d031      	beq.n	8008b0a <HAL_DMA_IRQHandler+0x3e2>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a23      	ldr	r2, [pc, #140]	; (8008b38 <HAL_DMA_IRQHandler+0x410>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d02c      	beq.n	8008b0a <HAL_DMA_IRQHandler+0x3e2>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a21      	ldr	r2, [pc, #132]	; (8008b3c <HAL_DMA_IRQHandler+0x414>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d027      	beq.n	8008b0a <HAL_DMA_IRQHandler+0x3e2>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a20      	ldr	r2, [pc, #128]	; (8008b40 <HAL_DMA_IRQHandler+0x418>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d022      	beq.n	8008b0a <HAL_DMA_IRQHandler+0x3e2>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a1e      	ldr	r2, [pc, #120]	; (8008b44 <HAL_DMA_IRQHandler+0x41c>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d01d      	beq.n	8008b0a <HAL_DMA_IRQHandler+0x3e2>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a1d      	ldr	r2, [pc, #116]	; (8008b48 <HAL_DMA_IRQHandler+0x420>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d018      	beq.n	8008b0a <HAL_DMA_IRQHandler+0x3e2>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a1b      	ldr	r2, [pc, #108]	; (8008b4c <HAL_DMA_IRQHandler+0x424>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d013      	beq.n	8008b0a <HAL_DMA_IRQHandler+0x3e2>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a1a      	ldr	r2, [pc, #104]	; (8008b50 <HAL_DMA_IRQHandler+0x428>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d00e      	beq.n	8008b0a <HAL_DMA_IRQHandler+0x3e2>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a18      	ldr	r2, [pc, #96]	; (8008b54 <HAL_DMA_IRQHandler+0x42c>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d009      	beq.n	8008b0a <HAL_DMA_IRQHandler+0x3e2>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a17      	ldr	r2, [pc, #92]	; (8008b58 <HAL_DMA_IRQHandler+0x430>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d004      	beq.n	8008b0a <HAL_DMA_IRQHandler+0x3e2>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a15      	ldr	r2, [pc, #84]	; (8008b5c <HAL_DMA_IRQHandler+0x434>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d12a      	bne.n	8008b60 <HAL_DMA_IRQHandler+0x438>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 0302 	and.w	r3, r3, #2
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	bf14      	ite	ne
 8008b18:	2301      	movne	r3, #1
 8008b1a:	2300      	moveq	r3, #0
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	e023      	b.n	8008b68 <HAL_DMA_IRQHandler+0x440>
 8008b20:	40020010 	.word	0x40020010
 8008b24:	40020028 	.word	0x40020028
 8008b28:	40020040 	.word	0x40020040
 8008b2c:	40020058 	.word	0x40020058
 8008b30:	40020070 	.word	0x40020070
 8008b34:	40020088 	.word	0x40020088
 8008b38:	400200a0 	.word	0x400200a0
 8008b3c:	400200b8 	.word	0x400200b8
 8008b40:	40020410 	.word	0x40020410
 8008b44:	40020428 	.word	0x40020428
 8008b48:	40020440 	.word	0x40020440
 8008b4c:	40020458 	.word	0x40020458
 8008b50:	40020470 	.word	0x40020470
 8008b54:	40020488 	.word	0x40020488
 8008b58:	400204a0 	.word	0x400204a0
 8008b5c:	400204b8 	.word	0x400204b8
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2300      	movs	r3, #0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d00d      	beq.n	8008b88 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b70:	f003 031f 	and.w	r3, r3, #31
 8008b74:	2204      	movs	r2, #4
 8008b76:	409a      	lsls	r2, r3
 8008b78:	6a3b      	ldr	r3, [r7, #32]
 8008b7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b80:	f043 0204 	orr.w	r2, r3, #4
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b8c:	f003 031f 	and.w	r3, r3, #31
 8008b90:	2210      	movs	r2, #16
 8008b92:	409a      	lsls	r2, r3
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	4013      	ands	r3, r2
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f000 80a6 	beq.w	8008cea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a85      	ldr	r2, [pc, #532]	; (8008db8 <HAL_DMA_IRQHandler+0x690>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d04a      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x516>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a83      	ldr	r2, [pc, #524]	; (8008dbc <HAL_DMA_IRQHandler+0x694>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d045      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x516>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a82      	ldr	r2, [pc, #520]	; (8008dc0 <HAL_DMA_IRQHandler+0x698>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d040      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x516>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a80      	ldr	r2, [pc, #512]	; (8008dc4 <HAL_DMA_IRQHandler+0x69c>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d03b      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x516>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a7f      	ldr	r2, [pc, #508]	; (8008dc8 <HAL_DMA_IRQHandler+0x6a0>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d036      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x516>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a7d      	ldr	r2, [pc, #500]	; (8008dcc <HAL_DMA_IRQHandler+0x6a4>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d031      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x516>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a7c      	ldr	r2, [pc, #496]	; (8008dd0 <HAL_DMA_IRQHandler+0x6a8>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d02c      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x516>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a7a      	ldr	r2, [pc, #488]	; (8008dd4 <HAL_DMA_IRQHandler+0x6ac>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d027      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x516>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a79      	ldr	r2, [pc, #484]	; (8008dd8 <HAL_DMA_IRQHandler+0x6b0>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d022      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x516>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a77      	ldr	r2, [pc, #476]	; (8008ddc <HAL_DMA_IRQHandler+0x6b4>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d01d      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x516>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a76      	ldr	r2, [pc, #472]	; (8008de0 <HAL_DMA_IRQHandler+0x6b8>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d018      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x516>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a74      	ldr	r2, [pc, #464]	; (8008de4 <HAL_DMA_IRQHandler+0x6bc>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d013      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x516>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a73      	ldr	r2, [pc, #460]	; (8008de8 <HAL_DMA_IRQHandler+0x6c0>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d00e      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x516>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a71      	ldr	r2, [pc, #452]	; (8008dec <HAL_DMA_IRQHandler+0x6c4>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d009      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x516>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a70      	ldr	r2, [pc, #448]	; (8008df0 <HAL_DMA_IRQHandler+0x6c8>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d004      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x516>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a6e      	ldr	r2, [pc, #440]	; (8008df4 <HAL_DMA_IRQHandler+0x6cc>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d10a      	bne.n	8008c54 <HAL_DMA_IRQHandler+0x52c>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0308 	and.w	r3, r3, #8
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	bf14      	ite	ne
 8008c4c:	2301      	movne	r3, #1
 8008c4e:	2300      	moveq	r3, #0
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	e009      	b.n	8008c68 <HAL_DMA_IRQHandler+0x540>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 0304 	and.w	r3, r3, #4
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	bf14      	ite	ne
 8008c62:	2301      	movne	r3, #1
 8008c64:	2300      	moveq	r3, #0
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d03e      	beq.n	8008cea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c70:	f003 031f 	and.w	r3, r3, #31
 8008c74:	2210      	movs	r2, #16
 8008c76:	409a      	lsls	r2, r3
 8008c78:	6a3b      	ldr	r3, [r7, #32]
 8008c7a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d018      	beq.n	8008cbc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d108      	bne.n	8008caa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d024      	beq.n	8008cea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	4798      	blx	r3
 8008ca8:	e01f      	b.n	8008cea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d01b      	beq.n	8008cea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	4798      	blx	r3
 8008cba:	e016      	b.n	8008cea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d107      	bne.n	8008cda <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f022 0208 	bic.w	r2, r2, #8
 8008cd8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d003      	beq.n	8008cea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cee:	f003 031f 	and.w	r3, r3, #31
 8008cf2:	2220      	movs	r2, #32
 8008cf4:	409a      	lsls	r2, r3
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	4013      	ands	r3, r2
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f000 8110 	beq.w	8008f20 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a2c      	ldr	r2, [pc, #176]	; (8008db8 <HAL_DMA_IRQHandler+0x690>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d04a      	beq.n	8008da0 <HAL_DMA_IRQHandler+0x678>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a2b      	ldr	r2, [pc, #172]	; (8008dbc <HAL_DMA_IRQHandler+0x694>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d045      	beq.n	8008da0 <HAL_DMA_IRQHandler+0x678>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a29      	ldr	r2, [pc, #164]	; (8008dc0 <HAL_DMA_IRQHandler+0x698>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d040      	beq.n	8008da0 <HAL_DMA_IRQHandler+0x678>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a28      	ldr	r2, [pc, #160]	; (8008dc4 <HAL_DMA_IRQHandler+0x69c>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d03b      	beq.n	8008da0 <HAL_DMA_IRQHandler+0x678>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a26      	ldr	r2, [pc, #152]	; (8008dc8 <HAL_DMA_IRQHandler+0x6a0>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d036      	beq.n	8008da0 <HAL_DMA_IRQHandler+0x678>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a25      	ldr	r2, [pc, #148]	; (8008dcc <HAL_DMA_IRQHandler+0x6a4>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d031      	beq.n	8008da0 <HAL_DMA_IRQHandler+0x678>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a23      	ldr	r2, [pc, #140]	; (8008dd0 <HAL_DMA_IRQHandler+0x6a8>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d02c      	beq.n	8008da0 <HAL_DMA_IRQHandler+0x678>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a22      	ldr	r2, [pc, #136]	; (8008dd4 <HAL_DMA_IRQHandler+0x6ac>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d027      	beq.n	8008da0 <HAL_DMA_IRQHandler+0x678>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a20      	ldr	r2, [pc, #128]	; (8008dd8 <HAL_DMA_IRQHandler+0x6b0>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d022      	beq.n	8008da0 <HAL_DMA_IRQHandler+0x678>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a1f      	ldr	r2, [pc, #124]	; (8008ddc <HAL_DMA_IRQHandler+0x6b4>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d01d      	beq.n	8008da0 <HAL_DMA_IRQHandler+0x678>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a1d      	ldr	r2, [pc, #116]	; (8008de0 <HAL_DMA_IRQHandler+0x6b8>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d018      	beq.n	8008da0 <HAL_DMA_IRQHandler+0x678>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a1c      	ldr	r2, [pc, #112]	; (8008de4 <HAL_DMA_IRQHandler+0x6bc>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d013      	beq.n	8008da0 <HAL_DMA_IRQHandler+0x678>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a1a      	ldr	r2, [pc, #104]	; (8008de8 <HAL_DMA_IRQHandler+0x6c0>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d00e      	beq.n	8008da0 <HAL_DMA_IRQHandler+0x678>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a19      	ldr	r2, [pc, #100]	; (8008dec <HAL_DMA_IRQHandler+0x6c4>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d009      	beq.n	8008da0 <HAL_DMA_IRQHandler+0x678>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a17      	ldr	r2, [pc, #92]	; (8008df0 <HAL_DMA_IRQHandler+0x6c8>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d004      	beq.n	8008da0 <HAL_DMA_IRQHandler+0x678>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a16      	ldr	r2, [pc, #88]	; (8008df4 <HAL_DMA_IRQHandler+0x6cc>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d12b      	bne.n	8008df8 <HAL_DMA_IRQHandler+0x6d0>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f003 0310 	and.w	r3, r3, #16
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	bf14      	ite	ne
 8008dae:	2301      	movne	r3, #1
 8008db0:	2300      	moveq	r3, #0
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	e02a      	b.n	8008e0c <HAL_DMA_IRQHandler+0x6e4>
 8008db6:	bf00      	nop
 8008db8:	40020010 	.word	0x40020010
 8008dbc:	40020028 	.word	0x40020028
 8008dc0:	40020040 	.word	0x40020040
 8008dc4:	40020058 	.word	0x40020058
 8008dc8:	40020070 	.word	0x40020070
 8008dcc:	40020088 	.word	0x40020088
 8008dd0:	400200a0 	.word	0x400200a0
 8008dd4:	400200b8 	.word	0x400200b8
 8008dd8:	40020410 	.word	0x40020410
 8008ddc:	40020428 	.word	0x40020428
 8008de0:	40020440 	.word	0x40020440
 8008de4:	40020458 	.word	0x40020458
 8008de8:	40020470 	.word	0x40020470
 8008dec:	40020488 	.word	0x40020488
 8008df0:	400204a0 	.word	0x400204a0
 8008df4:	400204b8 	.word	0x400204b8
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f003 0302 	and.w	r3, r3, #2
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	bf14      	ite	ne
 8008e06:	2301      	movne	r3, #1
 8008e08:	2300      	moveq	r3, #0
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f000 8087 	beq.w	8008f20 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e16:	f003 031f 	and.w	r3, r3, #31
 8008e1a:	2220      	movs	r2, #32
 8008e1c:	409a      	lsls	r2, r3
 8008e1e:	6a3b      	ldr	r3, [r7, #32]
 8008e20:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	2b04      	cmp	r3, #4
 8008e2c:	d139      	bne.n	8008ea2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f022 0216 	bic.w	r2, r2, #22
 8008e3c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	695a      	ldr	r2, [r3, #20]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e4c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d103      	bne.n	8008e5e <HAL_DMA_IRQHandler+0x736>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d007      	beq.n	8008e6e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f022 0208 	bic.w	r2, r2, #8
 8008e6c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e72:	f003 031f 	and.w	r3, r3, #31
 8008e76:	223f      	movs	r2, #63	; 0x3f
 8008e78:	409a      	lsls	r2, r3
 8008e7a:	6a3b      	ldr	r3, [r7, #32]
 8008e7c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f000 834a 	beq.w	800952c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	4798      	blx	r3
          }
          return;
 8008ea0:	e344      	b.n	800952c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d018      	beq.n	8008ee2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d108      	bne.n	8008ed0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d02c      	beq.n	8008f20 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	4798      	blx	r3
 8008ece:	e027      	b.n	8008f20 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d023      	beq.n	8008f20 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	4798      	blx	r3
 8008ee0:	e01e      	b.n	8008f20 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10f      	bne.n	8008f10 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f022 0210 	bic.w	r2, r2, #16
 8008efe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d003      	beq.n	8008f20 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f000 8306 	beq.w	8009536 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f2e:	f003 0301 	and.w	r3, r3, #1
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	f000 8088 	beq.w	8009048 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2204      	movs	r2, #4
 8008f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a7a      	ldr	r2, [pc, #488]	; (8009130 <HAL_DMA_IRQHandler+0xa08>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d04a      	beq.n	8008fe0 <HAL_DMA_IRQHandler+0x8b8>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a79      	ldr	r2, [pc, #484]	; (8009134 <HAL_DMA_IRQHandler+0xa0c>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d045      	beq.n	8008fe0 <HAL_DMA_IRQHandler+0x8b8>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a77      	ldr	r2, [pc, #476]	; (8009138 <HAL_DMA_IRQHandler+0xa10>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d040      	beq.n	8008fe0 <HAL_DMA_IRQHandler+0x8b8>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a76      	ldr	r2, [pc, #472]	; (800913c <HAL_DMA_IRQHandler+0xa14>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d03b      	beq.n	8008fe0 <HAL_DMA_IRQHandler+0x8b8>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a74      	ldr	r2, [pc, #464]	; (8009140 <HAL_DMA_IRQHandler+0xa18>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d036      	beq.n	8008fe0 <HAL_DMA_IRQHandler+0x8b8>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a73      	ldr	r2, [pc, #460]	; (8009144 <HAL_DMA_IRQHandler+0xa1c>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d031      	beq.n	8008fe0 <HAL_DMA_IRQHandler+0x8b8>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a71      	ldr	r2, [pc, #452]	; (8009148 <HAL_DMA_IRQHandler+0xa20>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d02c      	beq.n	8008fe0 <HAL_DMA_IRQHandler+0x8b8>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a70      	ldr	r2, [pc, #448]	; (800914c <HAL_DMA_IRQHandler+0xa24>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d027      	beq.n	8008fe0 <HAL_DMA_IRQHandler+0x8b8>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a6e      	ldr	r2, [pc, #440]	; (8009150 <HAL_DMA_IRQHandler+0xa28>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d022      	beq.n	8008fe0 <HAL_DMA_IRQHandler+0x8b8>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a6d      	ldr	r2, [pc, #436]	; (8009154 <HAL_DMA_IRQHandler+0xa2c>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d01d      	beq.n	8008fe0 <HAL_DMA_IRQHandler+0x8b8>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a6b      	ldr	r2, [pc, #428]	; (8009158 <HAL_DMA_IRQHandler+0xa30>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d018      	beq.n	8008fe0 <HAL_DMA_IRQHandler+0x8b8>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a6a      	ldr	r2, [pc, #424]	; (800915c <HAL_DMA_IRQHandler+0xa34>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d013      	beq.n	8008fe0 <HAL_DMA_IRQHandler+0x8b8>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a68      	ldr	r2, [pc, #416]	; (8009160 <HAL_DMA_IRQHandler+0xa38>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d00e      	beq.n	8008fe0 <HAL_DMA_IRQHandler+0x8b8>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a67      	ldr	r2, [pc, #412]	; (8009164 <HAL_DMA_IRQHandler+0xa3c>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d009      	beq.n	8008fe0 <HAL_DMA_IRQHandler+0x8b8>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a65      	ldr	r2, [pc, #404]	; (8009168 <HAL_DMA_IRQHandler+0xa40>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d004      	beq.n	8008fe0 <HAL_DMA_IRQHandler+0x8b8>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a64      	ldr	r2, [pc, #400]	; (800916c <HAL_DMA_IRQHandler+0xa44>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d108      	bne.n	8008ff2 <HAL_DMA_IRQHandler+0x8ca>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f022 0201 	bic.w	r2, r2, #1
 8008fee:	601a      	str	r2, [r3, #0]
 8008ff0:	e007      	b.n	8009002 <HAL_DMA_IRQHandler+0x8da>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f022 0201 	bic.w	r2, r2, #1
 8009000:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	3301      	adds	r3, #1
 8009006:	60fb      	str	r3, [r7, #12]
 8009008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800900a:	429a      	cmp	r2, r3
 800900c:	d307      	bcc.n	800901e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 0301 	and.w	r3, r3, #1
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1f2      	bne.n	8009002 <HAL_DMA_IRQHandler+0x8da>
 800901c:	e000      	b.n	8009020 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800901e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	2b00      	cmp	r3, #0
 800902c:	d004      	beq.n	8009038 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2203      	movs	r2, #3
 8009032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8009036:	e003      	b.n	8009040 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800904c:	2b00      	cmp	r3, #0
 800904e:	f000 8272 	beq.w	8009536 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	4798      	blx	r3
 800905a:	e26c      	b.n	8009536 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a43      	ldr	r2, [pc, #268]	; (8009170 <HAL_DMA_IRQHandler+0xa48>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d022      	beq.n	80090ac <HAL_DMA_IRQHandler+0x984>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a42      	ldr	r2, [pc, #264]	; (8009174 <HAL_DMA_IRQHandler+0xa4c>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d01d      	beq.n	80090ac <HAL_DMA_IRQHandler+0x984>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a40      	ldr	r2, [pc, #256]	; (8009178 <HAL_DMA_IRQHandler+0xa50>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d018      	beq.n	80090ac <HAL_DMA_IRQHandler+0x984>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a3f      	ldr	r2, [pc, #252]	; (800917c <HAL_DMA_IRQHandler+0xa54>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d013      	beq.n	80090ac <HAL_DMA_IRQHandler+0x984>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a3d      	ldr	r2, [pc, #244]	; (8009180 <HAL_DMA_IRQHandler+0xa58>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d00e      	beq.n	80090ac <HAL_DMA_IRQHandler+0x984>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a3c      	ldr	r2, [pc, #240]	; (8009184 <HAL_DMA_IRQHandler+0xa5c>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d009      	beq.n	80090ac <HAL_DMA_IRQHandler+0x984>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a3a      	ldr	r2, [pc, #232]	; (8009188 <HAL_DMA_IRQHandler+0xa60>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d004      	beq.n	80090ac <HAL_DMA_IRQHandler+0x984>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a39      	ldr	r2, [pc, #228]	; (800918c <HAL_DMA_IRQHandler+0xa64>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d101      	bne.n	80090b0 <HAL_DMA_IRQHandler+0x988>
 80090ac:	2301      	movs	r3, #1
 80090ae:	e000      	b.n	80090b2 <HAL_DMA_IRQHandler+0x98a>
 80090b0:	2300      	movs	r3, #0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	f000 823f 	beq.w	8009536 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090c4:	f003 031f 	and.w	r3, r3, #31
 80090c8:	2204      	movs	r2, #4
 80090ca:	409a      	lsls	r2, r3
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	4013      	ands	r3, r2
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f000 80cd 	beq.w	8009270 <HAL_DMA_IRQHandler+0xb48>
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	f003 0304 	and.w	r3, r3, #4
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f000 80c7 	beq.w	8009270 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090e6:	f003 031f 	and.w	r3, r3, #31
 80090ea:	2204      	movs	r2, #4
 80090ec:	409a      	lsls	r2, r3
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d049      	beq.n	8009190 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009102:	2b00      	cmp	r3, #0
 8009104:	d109      	bne.n	800911a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800910a:	2b00      	cmp	r3, #0
 800910c:	f000 8210 	beq.w	8009530 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009118:	e20a      	b.n	8009530 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911e:	2b00      	cmp	r3, #0
 8009120:	f000 8206 	beq.w	8009530 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800912c:	e200      	b.n	8009530 <HAL_DMA_IRQHandler+0xe08>
 800912e:	bf00      	nop
 8009130:	40020010 	.word	0x40020010
 8009134:	40020028 	.word	0x40020028
 8009138:	40020040 	.word	0x40020040
 800913c:	40020058 	.word	0x40020058
 8009140:	40020070 	.word	0x40020070
 8009144:	40020088 	.word	0x40020088
 8009148:	400200a0 	.word	0x400200a0
 800914c:	400200b8 	.word	0x400200b8
 8009150:	40020410 	.word	0x40020410
 8009154:	40020428 	.word	0x40020428
 8009158:	40020440 	.word	0x40020440
 800915c:	40020458 	.word	0x40020458
 8009160:	40020470 	.word	0x40020470
 8009164:	40020488 	.word	0x40020488
 8009168:	400204a0 	.word	0x400204a0
 800916c:	400204b8 	.word	0x400204b8
 8009170:	58025408 	.word	0x58025408
 8009174:	5802541c 	.word	0x5802541c
 8009178:	58025430 	.word	0x58025430
 800917c:	58025444 	.word	0x58025444
 8009180:	58025458 	.word	0x58025458
 8009184:	5802546c 	.word	0x5802546c
 8009188:	58025480 	.word	0x58025480
 800918c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	f003 0320 	and.w	r3, r3, #32
 8009196:	2b00      	cmp	r3, #0
 8009198:	d160      	bne.n	800925c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a7f      	ldr	r2, [pc, #508]	; (800939c <HAL_DMA_IRQHandler+0xc74>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d04a      	beq.n	800923a <HAL_DMA_IRQHandler+0xb12>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a7d      	ldr	r2, [pc, #500]	; (80093a0 <HAL_DMA_IRQHandler+0xc78>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d045      	beq.n	800923a <HAL_DMA_IRQHandler+0xb12>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a7c      	ldr	r2, [pc, #496]	; (80093a4 <HAL_DMA_IRQHandler+0xc7c>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d040      	beq.n	800923a <HAL_DMA_IRQHandler+0xb12>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a7a      	ldr	r2, [pc, #488]	; (80093a8 <HAL_DMA_IRQHandler+0xc80>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d03b      	beq.n	800923a <HAL_DMA_IRQHandler+0xb12>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a79      	ldr	r2, [pc, #484]	; (80093ac <HAL_DMA_IRQHandler+0xc84>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d036      	beq.n	800923a <HAL_DMA_IRQHandler+0xb12>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a77      	ldr	r2, [pc, #476]	; (80093b0 <HAL_DMA_IRQHandler+0xc88>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d031      	beq.n	800923a <HAL_DMA_IRQHandler+0xb12>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a76      	ldr	r2, [pc, #472]	; (80093b4 <HAL_DMA_IRQHandler+0xc8c>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d02c      	beq.n	800923a <HAL_DMA_IRQHandler+0xb12>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a74      	ldr	r2, [pc, #464]	; (80093b8 <HAL_DMA_IRQHandler+0xc90>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d027      	beq.n	800923a <HAL_DMA_IRQHandler+0xb12>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a73      	ldr	r2, [pc, #460]	; (80093bc <HAL_DMA_IRQHandler+0xc94>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d022      	beq.n	800923a <HAL_DMA_IRQHandler+0xb12>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a71      	ldr	r2, [pc, #452]	; (80093c0 <HAL_DMA_IRQHandler+0xc98>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d01d      	beq.n	800923a <HAL_DMA_IRQHandler+0xb12>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a70      	ldr	r2, [pc, #448]	; (80093c4 <HAL_DMA_IRQHandler+0xc9c>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d018      	beq.n	800923a <HAL_DMA_IRQHandler+0xb12>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a6e      	ldr	r2, [pc, #440]	; (80093c8 <HAL_DMA_IRQHandler+0xca0>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d013      	beq.n	800923a <HAL_DMA_IRQHandler+0xb12>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a6d      	ldr	r2, [pc, #436]	; (80093cc <HAL_DMA_IRQHandler+0xca4>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d00e      	beq.n	800923a <HAL_DMA_IRQHandler+0xb12>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a6b      	ldr	r2, [pc, #428]	; (80093d0 <HAL_DMA_IRQHandler+0xca8>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d009      	beq.n	800923a <HAL_DMA_IRQHandler+0xb12>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a6a      	ldr	r2, [pc, #424]	; (80093d4 <HAL_DMA_IRQHandler+0xcac>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d004      	beq.n	800923a <HAL_DMA_IRQHandler+0xb12>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a68      	ldr	r2, [pc, #416]	; (80093d8 <HAL_DMA_IRQHandler+0xcb0>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d108      	bne.n	800924c <HAL_DMA_IRQHandler+0xb24>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f022 0208 	bic.w	r2, r2, #8
 8009248:	601a      	str	r2, [r3, #0]
 800924a:	e007      	b.n	800925c <HAL_DMA_IRQHandler+0xb34>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f022 0204 	bic.w	r2, r2, #4
 800925a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009260:	2b00      	cmp	r3, #0
 8009262:	f000 8165 	beq.w	8009530 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800926e:	e15f      	b.n	8009530 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009274:	f003 031f 	and.w	r3, r3, #31
 8009278:	2202      	movs	r2, #2
 800927a:	409a      	lsls	r2, r3
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	4013      	ands	r3, r2
 8009280:	2b00      	cmp	r3, #0
 8009282:	f000 80c5 	beq.w	8009410 <HAL_DMA_IRQHandler+0xce8>
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	f003 0302 	and.w	r3, r3, #2
 800928c:	2b00      	cmp	r3, #0
 800928e:	f000 80bf 	beq.w	8009410 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009296:	f003 031f 	and.w	r3, r3, #31
 800929a:	2202      	movs	r2, #2
 800929c:	409a      	lsls	r2, r3
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d018      	beq.n	80092de <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d109      	bne.n	80092ca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f000 813a 	beq.w	8009534 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80092c8:	e134      	b.n	8009534 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f000 8130 	beq.w	8009534 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80092dc:	e12a      	b.n	8009534 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	f003 0320 	and.w	r3, r3, #32
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f040 8089 	bne.w	80093fc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a2b      	ldr	r2, [pc, #172]	; (800939c <HAL_DMA_IRQHandler+0xc74>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d04a      	beq.n	800938a <HAL_DMA_IRQHandler+0xc62>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a29      	ldr	r2, [pc, #164]	; (80093a0 <HAL_DMA_IRQHandler+0xc78>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d045      	beq.n	800938a <HAL_DMA_IRQHandler+0xc62>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a28      	ldr	r2, [pc, #160]	; (80093a4 <HAL_DMA_IRQHandler+0xc7c>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d040      	beq.n	800938a <HAL_DMA_IRQHandler+0xc62>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a26      	ldr	r2, [pc, #152]	; (80093a8 <HAL_DMA_IRQHandler+0xc80>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d03b      	beq.n	800938a <HAL_DMA_IRQHandler+0xc62>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a25      	ldr	r2, [pc, #148]	; (80093ac <HAL_DMA_IRQHandler+0xc84>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d036      	beq.n	800938a <HAL_DMA_IRQHandler+0xc62>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a23      	ldr	r2, [pc, #140]	; (80093b0 <HAL_DMA_IRQHandler+0xc88>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d031      	beq.n	800938a <HAL_DMA_IRQHandler+0xc62>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a22      	ldr	r2, [pc, #136]	; (80093b4 <HAL_DMA_IRQHandler+0xc8c>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d02c      	beq.n	800938a <HAL_DMA_IRQHandler+0xc62>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a20      	ldr	r2, [pc, #128]	; (80093b8 <HAL_DMA_IRQHandler+0xc90>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d027      	beq.n	800938a <HAL_DMA_IRQHandler+0xc62>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a1f      	ldr	r2, [pc, #124]	; (80093bc <HAL_DMA_IRQHandler+0xc94>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d022      	beq.n	800938a <HAL_DMA_IRQHandler+0xc62>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a1d      	ldr	r2, [pc, #116]	; (80093c0 <HAL_DMA_IRQHandler+0xc98>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d01d      	beq.n	800938a <HAL_DMA_IRQHandler+0xc62>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a1c      	ldr	r2, [pc, #112]	; (80093c4 <HAL_DMA_IRQHandler+0xc9c>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d018      	beq.n	800938a <HAL_DMA_IRQHandler+0xc62>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a1a      	ldr	r2, [pc, #104]	; (80093c8 <HAL_DMA_IRQHandler+0xca0>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d013      	beq.n	800938a <HAL_DMA_IRQHandler+0xc62>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a19      	ldr	r2, [pc, #100]	; (80093cc <HAL_DMA_IRQHandler+0xca4>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d00e      	beq.n	800938a <HAL_DMA_IRQHandler+0xc62>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a17      	ldr	r2, [pc, #92]	; (80093d0 <HAL_DMA_IRQHandler+0xca8>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d009      	beq.n	800938a <HAL_DMA_IRQHandler+0xc62>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a16      	ldr	r2, [pc, #88]	; (80093d4 <HAL_DMA_IRQHandler+0xcac>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d004      	beq.n	800938a <HAL_DMA_IRQHandler+0xc62>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a14      	ldr	r2, [pc, #80]	; (80093d8 <HAL_DMA_IRQHandler+0xcb0>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d128      	bne.n	80093dc <HAL_DMA_IRQHandler+0xcb4>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f022 0214 	bic.w	r2, r2, #20
 8009398:	601a      	str	r2, [r3, #0]
 800939a:	e027      	b.n	80093ec <HAL_DMA_IRQHandler+0xcc4>
 800939c:	40020010 	.word	0x40020010
 80093a0:	40020028 	.word	0x40020028
 80093a4:	40020040 	.word	0x40020040
 80093a8:	40020058 	.word	0x40020058
 80093ac:	40020070 	.word	0x40020070
 80093b0:	40020088 	.word	0x40020088
 80093b4:	400200a0 	.word	0x400200a0
 80093b8:	400200b8 	.word	0x400200b8
 80093bc:	40020410 	.word	0x40020410
 80093c0:	40020428 	.word	0x40020428
 80093c4:	40020440 	.word	0x40020440
 80093c8:	40020458 	.word	0x40020458
 80093cc:	40020470 	.word	0x40020470
 80093d0:	40020488 	.word	0x40020488
 80093d4:	400204a0 	.word	0x400204a0
 80093d8:	400204b8 	.word	0x400204b8
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f022 020a 	bic.w	r2, r2, #10
 80093ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2201      	movs	r2, #1
 80093f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009400:	2b00      	cmp	r3, #0
 8009402:	f000 8097 	beq.w	8009534 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800940e:	e091      	b.n	8009534 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009414:	f003 031f 	and.w	r3, r3, #31
 8009418:	2208      	movs	r2, #8
 800941a:	409a      	lsls	r2, r3
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	4013      	ands	r3, r2
 8009420:	2b00      	cmp	r3, #0
 8009422:	f000 8088 	beq.w	8009536 <HAL_DMA_IRQHandler+0xe0e>
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	f003 0308 	and.w	r3, r3, #8
 800942c:	2b00      	cmp	r3, #0
 800942e:	f000 8082 	beq.w	8009536 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a41      	ldr	r2, [pc, #260]	; (800953c <HAL_DMA_IRQHandler+0xe14>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d04a      	beq.n	80094d2 <HAL_DMA_IRQHandler+0xdaa>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a3f      	ldr	r2, [pc, #252]	; (8009540 <HAL_DMA_IRQHandler+0xe18>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d045      	beq.n	80094d2 <HAL_DMA_IRQHandler+0xdaa>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a3e      	ldr	r2, [pc, #248]	; (8009544 <HAL_DMA_IRQHandler+0xe1c>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d040      	beq.n	80094d2 <HAL_DMA_IRQHandler+0xdaa>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a3c      	ldr	r2, [pc, #240]	; (8009548 <HAL_DMA_IRQHandler+0xe20>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d03b      	beq.n	80094d2 <HAL_DMA_IRQHandler+0xdaa>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a3b      	ldr	r2, [pc, #236]	; (800954c <HAL_DMA_IRQHandler+0xe24>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d036      	beq.n	80094d2 <HAL_DMA_IRQHandler+0xdaa>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a39      	ldr	r2, [pc, #228]	; (8009550 <HAL_DMA_IRQHandler+0xe28>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d031      	beq.n	80094d2 <HAL_DMA_IRQHandler+0xdaa>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a38      	ldr	r2, [pc, #224]	; (8009554 <HAL_DMA_IRQHandler+0xe2c>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d02c      	beq.n	80094d2 <HAL_DMA_IRQHandler+0xdaa>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a36      	ldr	r2, [pc, #216]	; (8009558 <HAL_DMA_IRQHandler+0xe30>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d027      	beq.n	80094d2 <HAL_DMA_IRQHandler+0xdaa>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a35      	ldr	r2, [pc, #212]	; (800955c <HAL_DMA_IRQHandler+0xe34>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d022      	beq.n	80094d2 <HAL_DMA_IRQHandler+0xdaa>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a33      	ldr	r2, [pc, #204]	; (8009560 <HAL_DMA_IRQHandler+0xe38>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d01d      	beq.n	80094d2 <HAL_DMA_IRQHandler+0xdaa>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a32      	ldr	r2, [pc, #200]	; (8009564 <HAL_DMA_IRQHandler+0xe3c>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d018      	beq.n	80094d2 <HAL_DMA_IRQHandler+0xdaa>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a30      	ldr	r2, [pc, #192]	; (8009568 <HAL_DMA_IRQHandler+0xe40>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d013      	beq.n	80094d2 <HAL_DMA_IRQHandler+0xdaa>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a2f      	ldr	r2, [pc, #188]	; (800956c <HAL_DMA_IRQHandler+0xe44>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d00e      	beq.n	80094d2 <HAL_DMA_IRQHandler+0xdaa>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a2d      	ldr	r2, [pc, #180]	; (8009570 <HAL_DMA_IRQHandler+0xe48>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d009      	beq.n	80094d2 <HAL_DMA_IRQHandler+0xdaa>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a2c      	ldr	r2, [pc, #176]	; (8009574 <HAL_DMA_IRQHandler+0xe4c>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d004      	beq.n	80094d2 <HAL_DMA_IRQHandler+0xdaa>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a2a      	ldr	r2, [pc, #168]	; (8009578 <HAL_DMA_IRQHandler+0xe50>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d108      	bne.n	80094e4 <HAL_DMA_IRQHandler+0xdbc>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f022 021c 	bic.w	r2, r2, #28
 80094e0:	601a      	str	r2, [r3, #0]
 80094e2:	e007      	b.n	80094f4 <HAL_DMA_IRQHandler+0xdcc>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f022 020e 	bic.w	r2, r2, #14
 80094f2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094f8:	f003 031f 	and.w	r3, r3, #31
 80094fc:	2201      	movs	r2, #1
 80094fe:	409a      	lsls	r2, r3
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2201      	movs	r2, #1
 800950e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800951e:	2b00      	cmp	r3, #0
 8009520:	d009      	beq.n	8009536 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	4798      	blx	r3
 800952a:	e004      	b.n	8009536 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800952c:	bf00      	nop
 800952e:	e002      	b.n	8009536 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009530:	bf00      	nop
 8009532:	e000      	b.n	8009536 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009534:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009536:	3728      	adds	r7, #40	; 0x28
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}
 800953c:	40020010 	.word	0x40020010
 8009540:	40020028 	.word	0x40020028
 8009544:	40020040 	.word	0x40020040
 8009548:	40020058 	.word	0x40020058
 800954c:	40020070 	.word	0x40020070
 8009550:	40020088 	.word	0x40020088
 8009554:	400200a0 	.word	0x400200a0
 8009558:	400200b8 	.word	0x400200b8
 800955c:	40020410 	.word	0x40020410
 8009560:	40020428 	.word	0x40020428
 8009564:	40020440 	.word	0x40020440
 8009568:	40020458 	.word	0x40020458
 800956c:	40020470 	.word	0x40020470
 8009570:	40020488 	.word	0x40020488
 8009574:	400204a0 	.word	0x400204a0
 8009578:	400204b8 	.word	0x400204b8

0800957c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800958a:	b2db      	uxtb	r3, r3
}
 800958c:	4618      	mov	r0, r3
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b087      	sub	sp, #28
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]
 80095bc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095c2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095c8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a7f      	ldr	r2, [pc, #508]	; (80097cc <DMA_SetConfig+0x21c>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d072      	beq.n	80096ba <DMA_SetConfig+0x10a>
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a7d      	ldr	r2, [pc, #500]	; (80097d0 <DMA_SetConfig+0x220>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d06d      	beq.n	80096ba <DMA_SetConfig+0x10a>
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a7c      	ldr	r2, [pc, #496]	; (80097d4 <DMA_SetConfig+0x224>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d068      	beq.n	80096ba <DMA_SetConfig+0x10a>
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a7a      	ldr	r2, [pc, #488]	; (80097d8 <DMA_SetConfig+0x228>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d063      	beq.n	80096ba <DMA_SetConfig+0x10a>
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a79      	ldr	r2, [pc, #484]	; (80097dc <DMA_SetConfig+0x22c>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d05e      	beq.n	80096ba <DMA_SetConfig+0x10a>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a77      	ldr	r2, [pc, #476]	; (80097e0 <DMA_SetConfig+0x230>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d059      	beq.n	80096ba <DMA_SetConfig+0x10a>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a76      	ldr	r2, [pc, #472]	; (80097e4 <DMA_SetConfig+0x234>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d054      	beq.n	80096ba <DMA_SetConfig+0x10a>
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a74      	ldr	r2, [pc, #464]	; (80097e8 <DMA_SetConfig+0x238>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d04f      	beq.n	80096ba <DMA_SetConfig+0x10a>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a73      	ldr	r2, [pc, #460]	; (80097ec <DMA_SetConfig+0x23c>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d04a      	beq.n	80096ba <DMA_SetConfig+0x10a>
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a71      	ldr	r2, [pc, #452]	; (80097f0 <DMA_SetConfig+0x240>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d045      	beq.n	80096ba <DMA_SetConfig+0x10a>
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a70      	ldr	r2, [pc, #448]	; (80097f4 <DMA_SetConfig+0x244>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d040      	beq.n	80096ba <DMA_SetConfig+0x10a>
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a6e      	ldr	r2, [pc, #440]	; (80097f8 <DMA_SetConfig+0x248>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d03b      	beq.n	80096ba <DMA_SetConfig+0x10a>
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a6d      	ldr	r2, [pc, #436]	; (80097fc <DMA_SetConfig+0x24c>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d036      	beq.n	80096ba <DMA_SetConfig+0x10a>
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a6b      	ldr	r2, [pc, #428]	; (8009800 <DMA_SetConfig+0x250>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d031      	beq.n	80096ba <DMA_SetConfig+0x10a>
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a6a      	ldr	r2, [pc, #424]	; (8009804 <DMA_SetConfig+0x254>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d02c      	beq.n	80096ba <DMA_SetConfig+0x10a>
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a68      	ldr	r2, [pc, #416]	; (8009808 <DMA_SetConfig+0x258>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d027      	beq.n	80096ba <DMA_SetConfig+0x10a>
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a67      	ldr	r2, [pc, #412]	; (800980c <DMA_SetConfig+0x25c>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d022      	beq.n	80096ba <DMA_SetConfig+0x10a>
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a65      	ldr	r2, [pc, #404]	; (8009810 <DMA_SetConfig+0x260>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d01d      	beq.n	80096ba <DMA_SetConfig+0x10a>
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a64      	ldr	r2, [pc, #400]	; (8009814 <DMA_SetConfig+0x264>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d018      	beq.n	80096ba <DMA_SetConfig+0x10a>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a62      	ldr	r2, [pc, #392]	; (8009818 <DMA_SetConfig+0x268>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d013      	beq.n	80096ba <DMA_SetConfig+0x10a>
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a61      	ldr	r2, [pc, #388]	; (800981c <DMA_SetConfig+0x26c>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d00e      	beq.n	80096ba <DMA_SetConfig+0x10a>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a5f      	ldr	r2, [pc, #380]	; (8009820 <DMA_SetConfig+0x270>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d009      	beq.n	80096ba <DMA_SetConfig+0x10a>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a5e      	ldr	r2, [pc, #376]	; (8009824 <DMA_SetConfig+0x274>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d004      	beq.n	80096ba <DMA_SetConfig+0x10a>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a5c      	ldr	r2, [pc, #368]	; (8009828 <DMA_SetConfig+0x278>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d101      	bne.n	80096be <DMA_SetConfig+0x10e>
 80096ba:	2301      	movs	r3, #1
 80096bc:	e000      	b.n	80096c0 <DMA_SetConfig+0x110>
 80096be:	2300      	movs	r3, #0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00d      	beq.n	80096e0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80096cc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d004      	beq.n	80096e0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096da:	68fa      	ldr	r2, [r7, #12]
 80096dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80096de:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a39      	ldr	r2, [pc, #228]	; (80097cc <DMA_SetConfig+0x21c>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d04a      	beq.n	8009780 <DMA_SetConfig+0x1d0>
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a38      	ldr	r2, [pc, #224]	; (80097d0 <DMA_SetConfig+0x220>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d045      	beq.n	8009780 <DMA_SetConfig+0x1d0>
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a36      	ldr	r2, [pc, #216]	; (80097d4 <DMA_SetConfig+0x224>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d040      	beq.n	8009780 <DMA_SetConfig+0x1d0>
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a35      	ldr	r2, [pc, #212]	; (80097d8 <DMA_SetConfig+0x228>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d03b      	beq.n	8009780 <DMA_SetConfig+0x1d0>
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a33      	ldr	r2, [pc, #204]	; (80097dc <DMA_SetConfig+0x22c>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d036      	beq.n	8009780 <DMA_SetConfig+0x1d0>
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a32      	ldr	r2, [pc, #200]	; (80097e0 <DMA_SetConfig+0x230>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d031      	beq.n	8009780 <DMA_SetConfig+0x1d0>
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a30      	ldr	r2, [pc, #192]	; (80097e4 <DMA_SetConfig+0x234>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d02c      	beq.n	8009780 <DMA_SetConfig+0x1d0>
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a2f      	ldr	r2, [pc, #188]	; (80097e8 <DMA_SetConfig+0x238>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d027      	beq.n	8009780 <DMA_SetConfig+0x1d0>
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a2d      	ldr	r2, [pc, #180]	; (80097ec <DMA_SetConfig+0x23c>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d022      	beq.n	8009780 <DMA_SetConfig+0x1d0>
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a2c      	ldr	r2, [pc, #176]	; (80097f0 <DMA_SetConfig+0x240>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d01d      	beq.n	8009780 <DMA_SetConfig+0x1d0>
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a2a      	ldr	r2, [pc, #168]	; (80097f4 <DMA_SetConfig+0x244>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d018      	beq.n	8009780 <DMA_SetConfig+0x1d0>
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a29      	ldr	r2, [pc, #164]	; (80097f8 <DMA_SetConfig+0x248>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d013      	beq.n	8009780 <DMA_SetConfig+0x1d0>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a27      	ldr	r2, [pc, #156]	; (80097fc <DMA_SetConfig+0x24c>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d00e      	beq.n	8009780 <DMA_SetConfig+0x1d0>
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a26      	ldr	r2, [pc, #152]	; (8009800 <DMA_SetConfig+0x250>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d009      	beq.n	8009780 <DMA_SetConfig+0x1d0>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a24      	ldr	r2, [pc, #144]	; (8009804 <DMA_SetConfig+0x254>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d004      	beq.n	8009780 <DMA_SetConfig+0x1d0>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a23      	ldr	r2, [pc, #140]	; (8009808 <DMA_SetConfig+0x258>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d101      	bne.n	8009784 <DMA_SetConfig+0x1d4>
 8009780:	2301      	movs	r3, #1
 8009782:	e000      	b.n	8009786 <DMA_SetConfig+0x1d6>
 8009784:	2300      	movs	r3, #0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d059      	beq.n	800983e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800978e:	f003 031f 	and.w	r3, r3, #31
 8009792:	223f      	movs	r2, #63	; 0x3f
 8009794:	409a      	lsls	r2, r3
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80097a8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	683a      	ldr	r2, [r7, #0]
 80097b0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	2b40      	cmp	r3, #64	; 0x40
 80097b8:	d138      	bne.n	800982c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	68ba      	ldr	r2, [r7, #8]
 80097c8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80097ca:	e086      	b.n	80098da <DMA_SetConfig+0x32a>
 80097cc:	40020010 	.word	0x40020010
 80097d0:	40020028 	.word	0x40020028
 80097d4:	40020040 	.word	0x40020040
 80097d8:	40020058 	.word	0x40020058
 80097dc:	40020070 	.word	0x40020070
 80097e0:	40020088 	.word	0x40020088
 80097e4:	400200a0 	.word	0x400200a0
 80097e8:	400200b8 	.word	0x400200b8
 80097ec:	40020410 	.word	0x40020410
 80097f0:	40020428 	.word	0x40020428
 80097f4:	40020440 	.word	0x40020440
 80097f8:	40020458 	.word	0x40020458
 80097fc:	40020470 	.word	0x40020470
 8009800:	40020488 	.word	0x40020488
 8009804:	400204a0 	.word	0x400204a0
 8009808:	400204b8 	.word	0x400204b8
 800980c:	58025408 	.word	0x58025408
 8009810:	5802541c 	.word	0x5802541c
 8009814:	58025430 	.word	0x58025430
 8009818:	58025444 	.word	0x58025444
 800981c:	58025458 	.word	0x58025458
 8009820:	5802546c 	.word	0x5802546c
 8009824:	58025480 	.word	0x58025480
 8009828:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68ba      	ldr	r2, [r7, #8]
 8009832:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	60da      	str	r2, [r3, #12]
}
 800983c:	e04d      	b.n	80098da <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a29      	ldr	r2, [pc, #164]	; (80098e8 <DMA_SetConfig+0x338>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d022      	beq.n	800988e <DMA_SetConfig+0x2de>
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a27      	ldr	r2, [pc, #156]	; (80098ec <DMA_SetConfig+0x33c>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d01d      	beq.n	800988e <DMA_SetConfig+0x2de>
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a26      	ldr	r2, [pc, #152]	; (80098f0 <DMA_SetConfig+0x340>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d018      	beq.n	800988e <DMA_SetConfig+0x2de>
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a24      	ldr	r2, [pc, #144]	; (80098f4 <DMA_SetConfig+0x344>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d013      	beq.n	800988e <DMA_SetConfig+0x2de>
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a23      	ldr	r2, [pc, #140]	; (80098f8 <DMA_SetConfig+0x348>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d00e      	beq.n	800988e <DMA_SetConfig+0x2de>
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a21      	ldr	r2, [pc, #132]	; (80098fc <DMA_SetConfig+0x34c>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d009      	beq.n	800988e <DMA_SetConfig+0x2de>
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a20      	ldr	r2, [pc, #128]	; (8009900 <DMA_SetConfig+0x350>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d004      	beq.n	800988e <DMA_SetConfig+0x2de>
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a1e      	ldr	r2, [pc, #120]	; (8009904 <DMA_SetConfig+0x354>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d101      	bne.n	8009892 <DMA_SetConfig+0x2e2>
 800988e:	2301      	movs	r3, #1
 8009890:	e000      	b.n	8009894 <DMA_SetConfig+0x2e4>
 8009892:	2300      	movs	r3, #0
 8009894:	2b00      	cmp	r3, #0
 8009896:	d020      	beq.n	80098da <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800989c:	f003 031f 	and.w	r3, r3, #31
 80098a0:	2201      	movs	r2, #1
 80098a2:	409a      	lsls	r2, r3
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	683a      	ldr	r2, [r7, #0]
 80098ae:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	2b40      	cmp	r3, #64	; 0x40
 80098b6:	d108      	bne.n	80098ca <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	68ba      	ldr	r2, [r7, #8]
 80098c6:	60da      	str	r2, [r3, #12]
}
 80098c8:	e007      	b.n	80098da <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	68ba      	ldr	r2, [r7, #8]
 80098d0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	60da      	str	r2, [r3, #12]
}
 80098da:	bf00      	nop
 80098dc:	371c      	adds	r7, #28
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr
 80098e6:	bf00      	nop
 80098e8:	58025408 	.word	0x58025408
 80098ec:	5802541c 	.word	0x5802541c
 80098f0:	58025430 	.word	0x58025430
 80098f4:	58025444 	.word	0x58025444
 80098f8:	58025458 	.word	0x58025458
 80098fc:	5802546c 	.word	0x5802546c
 8009900:	58025480 	.word	0x58025480
 8009904:	58025494 	.word	0x58025494

08009908 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a42      	ldr	r2, [pc, #264]	; (8009a20 <DMA_CalcBaseAndBitshift+0x118>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d04a      	beq.n	80099b0 <DMA_CalcBaseAndBitshift+0xa8>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a41      	ldr	r2, [pc, #260]	; (8009a24 <DMA_CalcBaseAndBitshift+0x11c>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d045      	beq.n	80099b0 <DMA_CalcBaseAndBitshift+0xa8>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a3f      	ldr	r2, [pc, #252]	; (8009a28 <DMA_CalcBaseAndBitshift+0x120>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d040      	beq.n	80099b0 <DMA_CalcBaseAndBitshift+0xa8>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a3e      	ldr	r2, [pc, #248]	; (8009a2c <DMA_CalcBaseAndBitshift+0x124>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d03b      	beq.n	80099b0 <DMA_CalcBaseAndBitshift+0xa8>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a3c      	ldr	r2, [pc, #240]	; (8009a30 <DMA_CalcBaseAndBitshift+0x128>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d036      	beq.n	80099b0 <DMA_CalcBaseAndBitshift+0xa8>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a3b      	ldr	r2, [pc, #236]	; (8009a34 <DMA_CalcBaseAndBitshift+0x12c>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d031      	beq.n	80099b0 <DMA_CalcBaseAndBitshift+0xa8>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a39      	ldr	r2, [pc, #228]	; (8009a38 <DMA_CalcBaseAndBitshift+0x130>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d02c      	beq.n	80099b0 <DMA_CalcBaseAndBitshift+0xa8>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a38      	ldr	r2, [pc, #224]	; (8009a3c <DMA_CalcBaseAndBitshift+0x134>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d027      	beq.n	80099b0 <DMA_CalcBaseAndBitshift+0xa8>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a36      	ldr	r2, [pc, #216]	; (8009a40 <DMA_CalcBaseAndBitshift+0x138>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d022      	beq.n	80099b0 <DMA_CalcBaseAndBitshift+0xa8>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a35      	ldr	r2, [pc, #212]	; (8009a44 <DMA_CalcBaseAndBitshift+0x13c>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d01d      	beq.n	80099b0 <DMA_CalcBaseAndBitshift+0xa8>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a33      	ldr	r2, [pc, #204]	; (8009a48 <DMA_CalcBaseAndBitshift+0x140>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d018      	beq.n	80099b0 <DMA_CalcBaseAndBitshift+0xa8>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a32      	ldr	r2, [pc, #200]	; (8009a4c <DMA_CalcBaseAndBitshift+0x144>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d013      	beq.n	80099b0 <DMA_CalcBaseAndBitshift+0xa8>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a30      	ldr	r2, [pc, #192]	; (8009a50 <DMA_CalcBaseAndBitshift+0x148>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d00e      	beq.n	80099b0 <DMA_CalcBaseAndBitshift+0xa8>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a2f      	ldr	r2, [pc, #188]	; (8009a54 <DMA_CalcBaseAndBitshift+0x14c>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d009      	beq.n	80099b0 <DMA_CalcBaseAndBitshift+0xa8>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a2d      	ldr	r2, [pc, #180]	; (8009a58 <DMA_CalcBaseAndBitshift+0x150>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d004      	beq.n	80099b0 <DMA_CalcBaseAndBitshift+0xa8>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a2c      	ldr	r2, [pc, #176]	; (8009a5c <DMA_CalcBaseAndBitshift+0x154>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d101      	bne.n	80099b4 <DMA_CalcBaseAndBitshift+0xac>
 80099b0:	2301      	movs	r3, #1
 80099b2:	e000      	b.n	80099b6 <DMA_CalcBaseAndBitshift+0xae>
 80099b4:	2300      	movs	r3, #0
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d024      	beq.n	8009a04 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	3b10      	subs	r3, #16
 80099c2:	4a27      	ldr	r2, [pc, #156]	; (8009a60 <DMA_CalcBaseAndBitshift+0x158>)
 80099c4:	fba2 2303 	umull	r2, r3, r2, r3
 80099c8:	091b      	lsrs	r3, r3, #4
 80099ca:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f003 0307 	and.w	r3, r3, #7
 80099d2:	4a24      	ldr	r2, [pc, #144]	; (8009a64 <DMA_CalcBaseAndBitshift+0x15c>)
 80099d4:	5cd3      	ldrb	r3, [r2, r3]
 80099d6:	461a      	mov	r2, r3
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2b03      	cmp	r3, #3
 80099e0:	d908      	bls.n	80099f4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	461a      	mov	r2, r3
 80099e8:	4b1f      	ldr	r3, [pc, #124]	; (8009a68 <DMA_CalcBaseAndBitshift+0x160>)
 80099ea:	4013      	ands	r3, r2
 80099ec:	1d1a      	adds	r2, r3, #4
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	659a      	str	r2, [r3, #88]	; 0x58
 80099f2:	e00d      	b.n	8009a10 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	461a      	mov	r2, r3
 80099fa:	4b1b      	ldr	r3, [pc, #108]	; (8009a68 <DMA_CalcBaseAndBitshift+0x160>)
 80099fc:	4013      	ands	r3, r2
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	6593      	str	r3, [r2, #88]	; 0x58
 8009a02:	e005      	b.n	8009a10 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3714      	adds	r7, #20
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr
 8009a20:	40020010 	.word	0x40020010
 8009a24:	40020028 	.word	0x40020028
 8009a28:	40020040 	.word	0x40020040
 8009a2c:	40020058 	.word	0x40020058
 8009a30:	40020070 	.word	0x40020070
 8009a34:	40020088 	.word	0x40020088
 8009a38:	400200a0 	.word	0x400200a0
 8009a3c:	400200b8 	.word	0x400200b8
 8009a40:	40020410 	.word	0x40020410
 8009a44:	40020428 	.word	0x40020428
 8009a48:	40020440 	.word	0x40020440
 8009a4c:	40020458 	.word	0x40020458
 8009a50:	40020470 	.word	0x40020470
 8009a54:	40020488 	.word	0x40020488
 8009a58:	400204a0 	.word	0x400204a0
 8009a5c:	400204b8 	.word	0x400204b8
 8009a60:	aaaaaaab 	.word	0xaaaaaaab
 8009a64:	0801a1c4 	.word	0x0801a1c4
 8009a68:	fffffc00 	.word	0xfffffc00

08009a6c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b085      	sub	sp, #20
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a74:	2300      	movs	r3, #0
 8009a76:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	699b      	ldr	r3, [r3, #24]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d120      	bne.n	8009ac2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a84:	2b03      	cmp	r3, #3
 8009a86:	d858      	bhi.n	8009b3a <DMA_CheckFifoParam+0xce>
 8009a88:	a201      	add	r2, pc, #4	; (adr r2, 8009a90 <DMA_CheckFifoParam+0x24>)
 8009a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a8e:	bf00      	nop
 8009a90:	08009aa1 	.word	0x08009aa1
 8009a94:	08009ab3 	.word	0x08009ab3
 8009a98:	08009aa1 	.word	0x08009aa1
 8009a9c:	08009b3b 	.word	0x08009b3b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d048      	beq.n	8009b3e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009ab0:	e045      	b.n	8009b3e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009aba:	d142      	bne.n	8009b42 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009ac0:	e03f      	b.n	8009b42 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	699b      	ldr	r3, [r3, #24]
 8009ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009aca:	d123      	bne.n	8009b14 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad0:	2b03      	cmp	r3, #3
 8009ad2:	d838      	bhi.n	8009b46 <DMA_CheckFifoParam+0xda>
 8009ad4:	a201      	add	r2, pc, #4	; (adr r2, 8009adc <DMA_CheckFifoParam+0x70>)
 8009ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ada:	bf00      	nop
 8009adc:	08009aed 	.word	0x08009aed
 8009ae0:	08009af3 	.word	0x08009af3
 8009ae4:	08009aed 	.word	0x08009aed
 8009ae8:	08009b05 	.word	0x08009b05
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009aec:	2301      	movs	r3, #1
 8009aee:	73fb      	strb	r3, [r7, #15]
        break;
 8009af0:	e030      	b.n	8009b54 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d025      	beq.n	8009b4a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009b02:	e022      	b.n	8009b4a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009b0c:	d11f      	bne.n	8009b4e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009b12:	e01c      	b.n	8009b4e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b18:	2b02      	cmp	r3, #2
 8009b1a:	d902      	bls.n	8009b22 <DMA_CheckFifoParam+0xb6>
 8009b1c:	2b03      	cmp	r3, #3
 8009b1e:	d003      	beq.n	8009b28 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009b20:	e018      	b.n	8009b54 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	73fb      	strb	r3, [r7, #15]
        break;
 8009b26:	e015      	b.n	8009b54 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00e      	beq.n	8009b52 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	73fb      	strb	r3, [r7, #15]
    break;
 8009b38:	e00b      	b.n	8009b52 <DMA_CheckFifoParam+0xe6>
        break;
 8009b3a:	bf00      	nop
 8009b3c:	e00a      	b.n	8009b54 <DMA_CheckFifoParam+0xe8>
        break;
 8009b3e:	bf00      	nop
 8009b40:	e008      	b.n	8009b54 <DMA_CheckFifoParam+0xe8>
        break;
 8009b42:	bf00      	nop
 8009b44:	e006      	b.n	8009b54 <DMA_CheckFifoParam+0xe8>
        break;
 8009b46:	bf00      	nop
 8009b48:	e004      	b.n	8009b54 <DMA_CheckFifoParam+0xe8>
        break;
 8009b4a:	bf00      	nop
 8009b4c:	e002      	b.n	8009b54 <DMA_CheckFifoParam+0xe8>
        break;
 8009b4e:	bf00      	nop
 8009b50:	e000      	b.n	8009b54 <DMA_CheckFifoParam+0xe8>
    break;
 8009b52:	bf00      	nop
    }
  }

  return status;
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3714      	adds	r7, #20
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop

08009b64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b085      	sub	sp, #20
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a38      	ldr	r2, [pc, #224]	; (8009c58 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d022      	beq.n	8009bc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a36      	ldr	r2, [pc, #216]	; (8009c5c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d01d      	beq.n	8009bc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a35      	ldr	r2, [pc, #212]	; (8009c60 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d018      	beq.n	8009bc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a33      	ldr	r2, [pc, #204]	; (8009c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d013      	beq.n	8009bc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a32      	ldr	r2, [pc, #200]	; (8009c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d00e      	beq.n	8009bc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a30      	ldr	r2, [pc, #192]	; (8009c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d009      	beq.n	8009bc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a2f      	ldr	r2, [pc, #188]	; (8009c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d004      	beq.n	8009bc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a2d      	ldr	r2, [pc, #180]	; (8009c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d101      	bne.n	8009bc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e000      	b.n	8009bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d01a      	beq.n	8009c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	3b08      	subs	r3, #8
 8009bd4:	4a28      	ldr	r2, [pc, #160]	; (8009c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bda:	091b      	lsrs	r3, r3, #4
 8009bdc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	4b26      	ldr	r3, [pc, #152]	; (8009c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009be2:	4413      	add	r3, r2
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	461a      	mov	r2, r3
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4a24      	ldr	r2, [pc, #144]	; (8009c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009bf0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f003 031f 	and.w	r3, r3, #31
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	409a      	lsls	r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009c00:	e024      	b.n	8009c4c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	3b10      	subs	r3, #16
 8009c0a:	4a1e      	ldr	r2, [pc, #120]	; (8009c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c10:	091b      	lsrs	r3, r3, #4
 8009c12:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	4a1c      	ldr	r2, [pc, #112]	; (8009c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d806      	bhi.n	8009c2a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	4a1b      	ldr	r2, [pc, #108]	; (8009c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d902      	bls.n	8009c2a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	3308      	adds	r3, #8
 8009c28:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	4b18      	ldr	r3, [pc, #96]	; (8009c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009c2e:	4413      	add	r3, r2
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	461a      	mov	r2, r3
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4a16      	ldr	r2, [pc, #88]	; (8009c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009c3c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f003 031f 	and.w	r3, r3, #31
 8009c44:	2201      	movs	r2, #1
 8009c46:	409a      	lsls	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009c4c:	bf00      	nop
 8009c4e:	3714      	adds	r7, #20
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr
 8009c58:	58025408 	.word	0x58025408
 8009c5c:	5802541c 	.word	0x5802541c
 8009c60:	58025430 	.word	0x58025430
 8009c64:	58025444 	.word	0x58025444
 8009c68:	58025458 	.word	0x58025458
 8009c6c:	5802546c 	.word	0x5802546c
 8009c70:	58025480 	.word	0x58025480
 8009c74:	58025494 	.word	0x58025494
 8009c78:	cccccccd 	.word	0xcccccccd
 8009c7c:	16009600 	.word	0x16009600
 8009c80:	58025880 	.word	0x58025880
 8009c84:	aaaaaaab 	.word	0xaaaaaaab
 8009c88:	400204b8 	.word	0x400204b8
 8009c8c:	4002040f 	.word	0x4002040f
 8009c90:	10008200 	.word	0x10008200
 8009c94:	40020880 	.word	0x40020880

08009c98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d04a      	beq.n	8009d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2b08      	cmp	r3, #8
 8009cb2:	d847      	bhi.n	8009d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a25      	ldr	r2, [pc, #148]	; (8009d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d022      	beq.n	8009d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a24      	ldr	r2, [pc, #144]	; (8009d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d01d      	beq.n	8009d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a22      	ldr	r2, [pc, #136]	; (8009d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d018      	beq.n	8009d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a21      	ldr	r2, [pc, #132]	; (8009d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d013      	beq.n	8009d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a1f      	ldr	r2, [pc, #124]	; (8009d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d00e      	beq.n	8009d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a1e      	ldr	r2, [pc, #120]	; (8009d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d009      	beq.n	8009d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a1c      	ldr	r2, [pc, #112]	; (8009d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d004      	beq.n	8009d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a1b      	ldr	r2, [pc, #108]	; (8009d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d101      	bne.n	8009d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009d04:	2301      	movs	r3, #1
 8009d06:	e000      	b.n	8009d0a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00a      	beq.n	8009d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009d0e:	68fa      	ldr	r2, [r7, #12]
 8009d10:	4b17      	ldr	r3, [pc, #92]	; (8009d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009d12:	4413      	add	r3, r2
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	461a      	mov	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a15      	ldr	r2, [pc, #84]	; (8009d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009d20:	671a      	str	r2, [r3, #112]	; 0x70
 8009d22:	e009      	b.n	8009d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	4b14      	ldr	r3, [pc, #80]	; (8009d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009d28:	4413      	add	r3, r2
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	4a11      	ldr	r2, [pc, #68]	; (8009d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009d36:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	3b01      	subs	r3, #1
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	409a      	lsls	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009d44:	bf00      	nop
 8009d46:	3714      	adds	r7, #20
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr
 8009d50:	58025408 	.word	0x58025408
 8009d54:	5802541c 	.word	0x5802541c
 8009d58:	58025430 	.word	0x58025430
 8009d5c:	58025444 	.word	0x58025444
 8009d60:	58025458 	.word	0x58025458
 8009d64:	5802546c 	.word	0x5802546c
 8009d68:	58025480 	.word	0x58025480
 8009d6c:	58025494 	.word	0x58025494
 8009d70:	1600963f 	.word	0x1600963f
 8009d74:	58025940 	.word	0x58025940
 8009d78:	1000823f 	.word	0x1000823f
 8009d7c:	40020940 	.word	0x40020940

08009d80 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b08a      	sub	sp, #40	; 0x28
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8009d94:	2308      	movs	r3, #8
 8009d96:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009d98:	4b40      	ldr	r3, [pc, #256]	; (8009e9c <HAL_FLASH_Program+0x11c>)
 8009d9a:	7d1b      	ldrb	r3, [r3, #20]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d101      	bne.n	8009da4 <HAL_FLASH_Program+0x24>
 8009da0:	2302      	movs	r3, #2
 8009da2:	e076      	b.n	8009e92 <HAL_FLASH_Program+0x112>
 8009da4:	4b3d      	ldr	r3, [pc, #244]	; (8009e9c <HAL_FLASH_Program+0x11c>)
 8009da6:	2201      	movs	r2, #1
 8009da8:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009db0:	d306      	bcc.n	8009dc0 <HAL_FLASH_Program+0x40>
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8009db8:	d202      	bcs.n	8009dc0 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 8009dbe:	e00c      	b.n	8009dda <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8009dc6:	d306      	bcc.n	8009dd6 <HAL_FLASH_Program+0x56>
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 8009dce:	d202      	bcs.n	8009dd6 <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 8009dd0:	2302      	movs	r3, #2
 8009dd2:	61bb      	str	r3, [r7, #24]
 8009dd4:	e001      	b.n	8009dda <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e05b      	b.n	8009e92 <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009dda:	4b30      	ldr	r3, [pc, #192]	; (8009e9c <HAL_FLASH_Program+0x11c>)
 8009ddc:	2200      	movs	r2, #0
 8009dde:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8009de0:	69b9      	ldr	r1, [r7, #24]
 8009de2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009de6:	f000 f897 	bl	8009f18 <FLASH_WaitForLastOperation>
 8009dea:	4603      	mov	r3, r0
 8009dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 8009df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d147      	bne.n	8009e88 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d106      	bne.n	8009e0c <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8009dfe:	4b28      	ldr	r3, [pc, #160]	; (8009ea0 <HAL_FLASH_Program+0x120>)
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	4a27      	ldr	r2, [pc, #156]	; (8009ea0 <HAL_FLASH_Program+0x120>)
 8009e04:	f043 0302 	orr.w	r3, r3, #2
 8009e08:	60d3      	str	r3, [r2, #12]
 8009e0a:	e007      	b.n	8009e1c <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 8009e0c:	4b24      	ldr	r3, [pc, #144]	; (8009ea0 <HAL_FLASH_Program+0x120>)
 8009e0e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009e12:	4a23      	ldr	r2, [pc, #140]	; (8009ea0 <HAL_FLASH_Program+0x120>)
 8009e14:	f043 0302 	orr.w	r3, r3, #2
 8009e18:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 8009e1c:	f3bf 8f6f 	isb	sy
}
 8009e20:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009e22:	f3bf 8f4f 	dsb	sy
}
 8009e26:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	6a3b      	ldr	r3, [r7, #32]
 8009e2e:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8009e30:	6a3b      	ldr	r3, [r7, #32]
 8009e32:	3304      	adds	r3, #4
 8009e34:	623b      	str	r3, [r7, #32]
        src_addr++;
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	3304      	adds	r3, #4
 8009e3a:	61fb      	str	r3, [r7, #28]
        row_index--;
 8009e3c:	7dfb      	ldrb	r3, [r7, #23]
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 8009e42:	7dfb      	ldrb	r3, [r7, #23]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d1ef      	bne.n	8009e28 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 8009e48:	f3bf 8f6f 	isb	sy
}
 8009e4c:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009e4e:	f3bf 8f4f 	dsb	sy
}
 8009e52:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8009e54:	69b9      	ldr	r1, [r7, #24]
 8009e56:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009e5a:	f000 f85d 	bl	8009f18 <FLASH_WaitForLastOperation>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d106      	bne.n	8009e78 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8009e6a:	4b0d      	ldr	r3, [pc, #52]	; (8009ea0 <HAL_FLASH_Program+0x120>)
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	4a0c      	ldr	r2, [pc, #48]	; (8009ea0 <HAL_FLASH_Program+0x120>)
 8009e70:	f023 0302 	bic.w	r3, r3, #2
 8009e74:	60d3      	str	r3, [r2, #12]
 8009e76:	e007      	b.n	8009e88 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 8009e78:	4b09      	ldr	r3, [pc, #36]	; (8009ea0 <HAL_FLASH_Program+0x120>)
 8009e7a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009e7e:	4a08      	ldr	r2, [pc, #32]	; (8009ea0 <HAL_FLASH_Program+0x120>)
 8009e80:	f023 0302 	bic.w	r3, r3, #2
 8009e84:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009e88:	4b04      	ldr	r3, [pc, #16]	; (8009e9c <HAL_FLASH_Program+0x11c>)
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	751a      	strb	r2, [r3, #20]

  return status;
 8009e8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3728      	adds	r7, #40	; 0x28
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	24002040 	.word	0x24002040
 8009ea0:	52002000 	.word	0x52002000

08009ea4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8009ea8:	4b18      	ldr	r3, [pc, #96]	; (8009f0c <HAL_FLASH_Unlock+0x68>)
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	f003 0301 	and.w	r3, r3, #1
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00d      	beq.n	8009ed0 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8009eb4:	4b15      	ldr	r3, [pc, #84]	; (8009f0c <HAL_FLASH_Unlock+0x68>)
 8009eb6:	4a16      	ldr	r2, [pc, #88]	; (8009f10 <HAL_FLASH_Unlock+0x6c>)
 8009eb8:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8009eba:	4b14      	ldr	r3, [pc, #80]	; (8009f0c <HAL_FLASH_Unlock+0x68>)
 8009ebc:	4a15      	ldr	r2, [pc, #84]	; (8009f14 <HAL_FLASH_Unlock+0x70>)
 8009ebe:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8009ec0:	4b12      	ldr	r3, [pc, #72]	; (8009f0c <HAL_FLASH_Unlock+0x68>)
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	f003 0301 	and.w	r3, r3, #1
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d001      	beq.n	8009ed0 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	e018      	b.n	8009f02 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8009ed0:	4b0e      	ldr	r3, [pc, #56]	; (8009f0c <HAL_FLASH_Unlock+0x68>)
 8009ed2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009ed6:	f003 0301 	and.w	r3, r3, #1
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d010      	beq.n	8009f00 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8009ede:	4b0b      	ldr	r3, [pc, #44]	; (8009f0c <HAL_FLASH_Unlock+0x68>)
 8009ee0:	4a0b      	ldr	r2, [pc, #44]	; (8009f10 <HAL_FLASH_Unlock+0x6c>)
 8009ee2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 8009ee6:	4b09      	ldr	r3, [pc, #36]	; (8009f0c <HAL_FLASH_Unlock+0x68>)
 8009ee8:	4a0a      	ldr	r2, [pc, #40]	; (8009f14 <HAL_FLASH_Unlock+0x70>)
 8009eea:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8009eee:	4b07      	ldr	r3, [pc, #28]	; (8009f0c <HAL_FLASH_Unlock+0x68>)
 8009ef0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009ef4:	f003 0301 	and.w	r3, r3, #1
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d001      	beq.n	8009f00 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 8009efc:	2301      	movs	r3, #1
 8009efe:	e000      	b.n	8009f02 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr
 8009f0c:	52002000 	.word	0x52002000
 8009f10:	45670123 	.word	0x45670123
 8009f14:	cdef89ab 	.word	0xcdef89ab

08009f18 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b086      	sub	sp, #24
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8009f22:	2304      	movs	r3, #4
 8009f24:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 8009f26:	2300      	movs	r3, #0
 8009f28:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 8009f2a:	f7fa ff33 	bl	8004d94 <HAL_GetTick>
 8009f2e:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d113      	bne.n	8009f5e <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 8009f36:	4b41      	ldr	r3, [pc, #260]	; (800a03c <FLASH_WaitForLastOperation+0x124>)
 8009f38:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8009f3a:	e010      	b.n	8009f5e <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f42:	d00c      	beq.n	8009f5e <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009f44:	f7fa ff26 	bl	8004d94 <HAL_GetTick>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	1ad3      	subs	r3, r2, r3
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d302      	bcc.n	8009f5a <FLASH_WaitForLastOperation+0x42>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d101      	bne.n	8009f5e <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 8009f5a:	2303      	movs	r3, #3
 8009f5c:	e06a      	b.n	800a034 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8009f5e:	697a      	ldr	r2, [r7, #20]
 8009f60:	4b37      	ldr	r3, [pc, #220]	; (800a040 <FLASH_WaitForLastOperation+0x128>)
 8009f62:	4013      	ands	r3, r2
 8009f64:	697a      	ldr	r2, [r7, #20]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d10a      	bne.n	8009f80 <FLASH_WaitForLastOperation+0x68>
 8009f6a:	4b36      	ldr	r3, [pc, #216]	; (800a044 <FLASH_WaitForLastOperation+0x12c>)
 8009f6c:	691a      	ldr	r2, [r3, #16]
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	4013      	ands	r3, r2
 8009f72:	697a      	ldr	r2, [r7, #20]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	bf0c      	ite	eq
 8009f78:	2301      	moveq	r3, #1
 8009f7a:	2300      	movne	r3, #0
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	e00c      	b.n	8009f9a <FLASH_WaitForLastOperation+0x82>
 8009f80:	4b30      	ldr	r3, [pc, #192]	; (800a044 <FLASH_WaitForLastOperation+0x12c>)
 8009f82:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8009f86:	43da      	mvns	r2, r3
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	bf0c      	ite	eq
 8009f94:	2301      	moveq	r3, #1
 8009f96:	2300      	movne	r3, #0
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d1ce      	bne.n	8009f3c <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d105      	bne.n	8009fb0 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8009fa4:	4b27      	ldr	r3, [pc, #156]	; (800a044 <FLASH_WaitForLastOperation+0x12c>)
 8009fa6:	691a      	ldr	r2, [r3, #16]
 8009fa8:	4b27      	ldr	r3, [pc, #156]	; (800a048 <FLASH_WaitForLastOperation+0x130>)
 8009faa:	4013      	ands	r3, r2
 8009fac:	613b      	str	r3, [r7, #16]
 8009fae:	e007      	b.n	8009fc0 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8009fb0:	4b24      	ldr	r3, [pc, #144]	; (800a044 <FLASH_WaitForLastOperation+0x12c>)
 8009fb2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8009fb6:	4b24      	ldr	r3, [pc, #144]	; (800a048 <FLASH_WaitForLastOperation+0x130>)
 8009fb8:	4013      	ands	r3, r2
 8009fba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009fbe:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d017      	beq.n	8009ffa <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8009fca:	4b20      	ldr	r3, [pc, #128]	; (800a04c <FLASH_WaitForLastOperation+0x134>)
 8009fcc:	699a      	ldr	r2, [r3, #24]
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	4a1e      	ldr	r2, [pc, #120]	; (800a04c <FLASH_WaitForLastOperation+0x134>)
 8009fd4:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8009fd6:	693a      	ldr	r2, [r7, #16]
 8009fd8:	4b19      	ldr	r3, [pc, #100]	; (800a040 <FLASH_WaitForLastOperation+0x128>)
 8009fda:	4013      	ands	r3, r2
 8009fdc:	693a      	ldr	r2, [r7, #16]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d103      	bne.n	8009fea <FLASH_WaitForLastOperation+0xd2>
 8009fe2:	4a18      	ldr	r2, [pc, #96]	; (800a044 <FLASH_WaitForLastOperation+0x12c>)
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	6153      	str	r3, [r2, #20]
 8009fe8:	e005      	b.n	8009ff6 <FLASH_WaitForLastOperation+0xde>
 8009fea:	4a16      	ldr	r2, [pc, #88]	; (800a044 <FLASH_WaitForLastOperation+0x12c>)
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ff2:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e01c      	b.n	800a034 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d10b      	bne.n	800a018 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800a000:	4b10      	ldr	r3, [pc, #64]	; (800a044 <FLASH_WaitForLastOperation+0x12c>)
 800a002:	691b      	ldr	r3, [r3, #16]
 800a004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a00c:	d111      	bne.n	800a032 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800a00e:	4b0d      	ldr	r3, [pc, #52]	; (800a044 <FLASH_WaitForLastOperation+0x12c>)
 800a010:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a014:	615a      	str	r2, [r3, #20]
 800a016:	e00c      	b.n	800a032 <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800a018:	4b0a      	ldr	r3, [pc, #40]	; (800a044 <FLASH_WaitForLastOperation+0x12c>)
 800a01a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800a01e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a026:	d104      	bne.n	800a032 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800a028:	4b06      	ldr	r3, [pc, #24]	; (800a044 <FLASH_WaitForLastOperation+0x12c>)
 800a02a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a02e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3718      	adds	r7, #24
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	80000004 	.word	0x80000004
 800a040:	1fef000f 	.word	0x1fef000f
 800a044:	52002000 	.word	0x52002000
 800a048:	17ee0000 	.word	0x17ee0000
 800a04c:	24002040 	.word	0x24002040

0800a050 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a05a:	2300      	movs	r3, #0
 800a05c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a05e:	4b5e      	ldr	r3, [pc, #376]	; (800a1d8 <HAL_FLASHEx_Erase+0x188>)
 800a060:	7d1b      	ldrb	r3, [r3, #20]
 800a062:	2b01      	cmp	r3, #1
 800a064:	d101      	bne.n	800a06a <HAL_FLASHEx_Erase+0x1a>
 800a066:	2302      	movs	r3, #2
 800a068:	e0b2      	b.n	800a1d0 <HAL_FLASHEx_Erase+0x180>
 800a06a:	4b5b      	ldr	r3, [pc, #364]	; (800a1d8 <HAL_FLASHEx_Erase+0x188>)
 800a06c:	2201      	movs	r2, #1
 800a06e:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a070:	4b59      	ldr	r3, [pc, #356]	; (800a1d8 <HAL_FLASHEx_Erase+0x188>)
 800a072:	2200      	movs	r2, #0
 800a074:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	f003 0301 	and.w	r3, r3, #1
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d009      	beq.n	800a096 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800a082:	2101      	movs	r1, #1
 800a084:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a088:	f7ff ff46 	bl	8009f18 <FLASH_WaitForLastOperation>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d001      	beq.n	800a096 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800a092:	2301      	movs	r3, #1
 800a094:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	f003 0302 	and.w	r3, r3, #2
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d009      	beq.n	800a0b6 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800a0a2:	2102      	movs	r1, #2
 800a0a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a0a8:	f7ff ff36 	bl	8009f18 <FLASH_WaitForLastOperation>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d001      	beq.n	800a0b6 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800a0b6:	7bfb      	ldrb	r3, [r7, #15]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	f040 8085 	bne.w	800a1c8 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d136      	bne.n	800a134 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	691a      	ldr	r2, [r3, #16]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	f000 f887 	bl	800a1e4 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	f003 0301 	and.w	r3, r3, #1
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00f      	beq.n	800a102 <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800a0e2:	2101      	movs	r1, #1
 800a0e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a0e8:	f7ff ff16 	bl	8009f18 <FLASH_WaitForLastOperation>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d001      	beq.n	800a0f6 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800a0f6:	4b39      	ldr	r3, [pc, #228]	; (800a1dc <HAL_FLASHEx_Erase+0x18c>)
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	4a38      	ldr	r2, [pc, #224]	; (800a1dc <HAL_FLASHEx_Erase+0x18c>)
 800a0fc:	f023 0308 	bic.w	r3, r3, #8
 800a100:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	f003 0302 	and.w	r3, r3, #2
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d05c      	beq.n	800a1c8 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800a10e:	2102      	movs	r1, #2
 800a110:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a114:	f7ff ff00 	bl	8009f18 <FLASH_WaitForLastOperation>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d001      	beq.n	800a122 <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800a122:	4b2e      	ldr	r3, [pc, #184]	; (800a1dc <HAL_FLASHEx_Erase+0x18c>)
 800a124:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a128:	4a2c      	ldr	r2, [pc, #176]	; (800a1dc <HAL_FLASHEx_Erase+0x18c>)
 800a12a:	f023 0308 	bic.w	r3, r3, #8
 800a12e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800a132:	e049      	b.n	800a1c8 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a13a:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	60bb      	str	r3, [r7, #8]
 800a142:	e039      	b.n	800a1b8 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6859      	ldr	r1, [r3, #4]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	691b      	ldr	r3, [r3, #16]
 800a14c:	461a      	mov	r2, r3
 800a14e:	68b8      	ldr	r0, [r7, #8]
 800a150:	f000 f8b2 	bl	800a2b8 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	f003 0301 	and.w	r3, r3, #1
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d00c      	beq.n	800a17a <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800a160:	2101      	movs	r1, #1
 800a162:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a166:	f7ff fed7 	bl	8009f18 <FLASH_WaitForLastOperation>
 800a16a:	4603      	mov	r3, r0
 800a16c:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800a16e:	4b1b      	ldr	r3, [pc, #108]	; (800a1dc <HAL_FLASHEx_Erase+0x18c>)
 800a170:	68da      	ldr	r2, [r3, #12]
 800a172:	491a      	ldr	r1, [pc, #104]	; (800a1dc <HAL_FLASHEx_Erase+0x18c>)
 800a174:	4b1a      	ldr	r3, [pc, #104]	; (800a1e0 <HAL_FLASHEx_Erase+0x190>)
 800a176:	4013      	ands	r3, r2
 800a178:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	f003 0302 	and.w	r3, r3, #2
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00e      	beq.n	800a1a4 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800a186:	2102      	movs	r1, #2
 800a188:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a18c:	f7ff fec4 	bl	8009f18 <FLASH_WaitForLastOperation>
 800a190:	4603      	mov	r3, r0
 800a192:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800a194:	4b11      	ldr	r3, [pc, #68]	; (800a1dc <HAL_FLASHEx_Erase+0x18c>)
 800a196:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800a19a:	4910      	ldr	r1, [pc, #64]	; (800a1dc <HAL_FLASHEx_Erase+0x18c>)
 800a19c:	4b10      	ldr	r3, [pc, #64]	; (800a1e0 <HAL_FLASHEx_Erase+0x190>)
 800a19e:	4013      	ands	r3, r2
 800a1a0:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800a1a4:	7bfb      	ldrb	r3, [r7, #15]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d003      	beq.n	800a1b2 <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	68ba      	ldr	r2, [r7, #8]
 800a1ae:	601a      	str	r2, [r3, #0]
          break;
 800a1b0:	e00a      	b.n	800a1c8 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	60bb      	str	r3, [r7, #8]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	68da      	ldr	r2, [r3, #12]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	68ba      	ldr	r2, [r7, #8]
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d3bd      	bcc.n	800a144 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a1c8:	4b03      	ldr	r3, [pc, #12]	; (800a1d8 <HAL_FLASHEx_Erase+0x188>)
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	751a      	strb	r2, [r3, #20]

  return status;
 800a1ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	24002040 	.word	0x24002040
 800a1dc:	52002000 	.word	0x52002000
 800a1e0:	fffff8fb 	.word	0xfffff8fb

0800a1e4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	f003 0303 	and.w	r3, r3, #3
 800a1f4:	2b03      	cmp	r3, #3
 800a1f6:	d122      	bne.n	800a23e <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800a1f8:	4b2e      	ldr	r3, [pc, #184]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	4a2d      	ldr	r2, [pc, #180]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a1fe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a202:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800a204:	4b2b      	ldr	r3, [pc, #172]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a206:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a20a:	4a2a      	ldr	r2, [pc, #168]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a20c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a210:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800a214:	4b27      	ldr	r3, [pc, #156]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a216:	68da      	ldr	r2, [r3, #12]
 800a218:	4926      	ldr	r1, [pc, #152]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	4313      	orrs	r3, r2
 800a21e:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800a220:	4b24      	ldr	r3, [pc, #144]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a222:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800a226:	4923      	ldr	r1, [pc, #140]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800a230:	4b20      	ldr	r3, [pc, #128]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a232:	699b      	ldr	r3, [r3, #24]
 800a234:	4a1f      	ldr	r2, [pc, #124]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a236:	f043 0310 	orr.w	r3, r3, #16
 800a23a:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800a23c:	e033      	b.n	800a2a6 <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	f003 0301 	and.w	r3, r3, #1
 800a244:	2b00      	cmp	r3, #0
 800a246:	d011      	beq.n	800a26c <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800a248:	4b1a      	ldr	r3, [pc, #104]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	4a19      	ldr	r2, [pc, #100]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a24e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a252:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800a254:	4b17      	ldr	r3, [pc, #92]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a256:	68da      	ldr	r2, [r3, #12]
 800a258:	4916      	ldr	r1, [pc, #88]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800a260:	4b14      	ldr	r3, [pc, #80]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	4a13      	ldr	r2, [pc, #76]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a266:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800a26a:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	f003 0302 	and.w	r3, r3, #2
 800a272:	2b00      	cmp	r3, #0
 800a274:	d017      	beq.n	800a2a6 <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800a276:	4b0f      	ldr	r3, [pc, #60]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a278:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a27c:	4a0d      	ldr	r2, [pc, #52]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a27e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a282:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800a286:	4b0b      	ldr	r3, [pc, #44]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a288:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800a28c:	4909      	ldr	r1, [pc, #36]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4313      	orrs	r3, r2
 800a292:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800a296:	4b07      	ldr	r3, [pc, #28]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a298:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a29c:	4a05      	ldr	r2, [pc, #20]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a29e:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800a2a2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800a2a6:	bf00      	nop
 800a2a8:	370c      	adds	r7, #12
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr
 800a2b2:	bf00      	nop
 800a2b4:	52002000 	.word	0x52002000

0800a2b8 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b085      	sub	sp, #20
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	f003 0301 	and.w	r3, r3, #1
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d010      	beq.n	800a2f0 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800a2ce:	4b18      	ldr	r3, [pc, #96]	; (800a330 <FLASH_Erase_Sector+0x78>)
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	4a17      	ldr	r2, [pc, #92]	; (800a330 <FLASH_Erase_Sector+0x78>)
 800a2d4:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800a2d8:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800a2da:	4b15      	ldr	r3, [pc, #84]	; (800a330 <FLASH_Erase_Sector+0x78>)
 800a2dc:	68da      	ldr	r2, [r3, #12]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	0219      	lsls	r1, r3, #8
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	430b      	orrs	r3, r1
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	4a11      	ldr	r2, [pc, #68]	; (800a330 <FLASH_Erase_Sector+0x78>)
 800a2ea:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800a2ee:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	f003 0302 	and.w	r3, r3, #2
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d014      	beq.n	800a324 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800a2fa:	4b0d      	ldr	r3, [pc, #52]	; (800a330 <FLASH_Erase_Sector+0x78>)
 800a2fc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a300:	4a0b      	ldr	r2, [pc, #44]	; (800a330 <FLASH_Erase_Sector+0x78>)
 800a302:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800a306:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800a30a:	4b09      	ldr	r3, [pc, #36]	; (800a330 <FLASH_Erase_Sector+0x78>)
 800a30c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	0219      	lsls	r1, r3, #8
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	430b      	orrs	r3, r1
 800a318:	4313      	orrs	r3, r2
 800a31a:	4a05      	ldr	r2, [pc, #20]	; (800a330 <FLASH_Erase_Sector+0x78>)
 800a31c:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800a320:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800a324:	bf00      	nop
 800a326:	3714      	adds	r7, #20
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr
 800a330:	52002000 	.word	0x52002000

0800a334 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a334:	b480      	push	{r7}
 800a336:	b089      	sub	sp, #36	; 0x24
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a33e:	2300      	movs	r3, #0
 800a340:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a342:	4b89      	ldr	r3, [pc, #548]	; (800a568 <HAL_GPIO_Init+0x234>)
 800a344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a346:	e194      	b.n	800a672 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	2101      	movs	r1, #1
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	fa01 f303 	lsl.w	r3, r1, r3
 800a354:	4013      	ands	r3, r2
 800a356:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	f000 8186 	beq.w	800a66c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	f003 0303 	and.w	r3, r3, #3
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d005      	beq.n	800a378 <HAL_GPIO_Init+0x44>
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	f003 0303 	and.w	r3, r3, #3
 800a374:	2b02      	cmp	r3, #2
 800a376:	d130      	bne.n	800a3da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	005b      	lsls	r3, r3, #1
 800a382:	2203      	movs	r2, #3
 800a384:	fa02 f303 	lsl.w	r3, r2, r3
 800a388:	43db      	mvns	r3, r3
 800a38a:	69ba      	ldr	r2, [r7, #24]
 800a38c:	4013      	ands	r3, r2
 800a38e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	68da      	ldr	r2, [r3, #12]
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	005b      	lsls	r3, r3, #1
 800a398:	fa02 f303 	lsl.w	r3, r2, r3
 800a39c:	69ba      	ldr	r2, [r7, #24]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	69ba      	ldr	r2, [r7, #24]
 800a3a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a3b6:	43db      	mvns	r3, r3
 800a3b8:	69ba      	ldr	r2, [r7, #24]
 800a3ba:	4013      	ands	r3, r2
 800a3bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	091b      	lsrs	r3, r3, #4
 800a3c4:	f003 0201 	and.w	r2, r3, #1
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ce:	69ba      	ldr	r2, [r7, #24]
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	69ba      	ldr	r2, [r7, #24]
 800a3d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	f003 0303 	and.w	r3, r3, #3
 800a3e2:	2b03      	cmp	r3, #3
 800a3e4:	d017      	beq.n	800a416 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a3ec:	69fb      	ldr	r3, [r7, #28]
 800a3ee:	005b      	lsls	r3, r3, #1
 800a3f0:	2203      	movs	r2, #3
 800a3f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f6:	43db      	mvns	r3, r3
 800a3f8:	69ba      	ldr	r2, [r7, #24]
 800a3fa:	4013      	ands	r3, r2
 800a3fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	689a      	ldr	r2, [r3, #8]
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	005b      	lsls	r3, r3, #1
 800a406:	fa02 f303 	lsl.w	r3, r2, r3
 800a40a:	69ba      	ldr	r2, [r7, #24]
 800a40c:	4313      	orrs	r3, r2
 800a40e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	69ba      	ldr	r2, [r7, #24]
 800a414:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	f003 0303 	and.w	r3, r3, #3
 800a41e:	2b02      	cmp	r3, #2
 800a420:	d123      	bne.n	800a46a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a422:	69fb      	ldr	r3, [r7, #28]
 800a424:	08da      	lsrs	r2, r3, #3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	3208      	adds	r2, #8
 800a42a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a42e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	f003 0307 	and.w	r3, r3, #7
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	220f      	movs	r2, #15
 800a43a:	fa02 f303 	lsl.w	r3, r2, r3
 800a43e:	43db      	mvns	r3, r3
 800a440:	69ba      	ldr	r2, [r7, #24]
 800a442:	4013      	ands	r3, r2
 800a444:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	691a      	ldr	r2, [r3, #16]
 800a44a:	69fb      	ldr	r3, [r7, #28]
 800a44c:	f003 0307 	and.w	r3, r3, #7
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	fa02 f303 	lsl.w	r3, r2, r3
 800a456:	69ba      	ldr	r2, [r7, #24]
 800a458:	4313      	orrs	r3, r2
 800a45a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	08da      	lsrs	r2, r3, #3
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	3208      	adds	r2, #8
 800a464:	69b9      	ldr	r1, [r7, #24]
 800a466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a470:	69fb      	ldr	r3, [r7, #28]
 800a472:	005b      	lsls	r3, r3, #1
 800a474:	2203      	movs	r2, #3
 800a476:	fa02 f303 	lsl.w	r3, r2, r3
 800a47a:	43db      	mvns	r3, r3
 800a47c:	69ba      	ldr	r2, [r7, #24]
 800a47e:	4013      	ands	r3, r2
 800a480:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	f003 0203 	and.w	r2, r3, #3
 800a48a:	69fb      	ldr	r3, [r7, #28]
 800a48c:	005b      	lsls	r3, r3, #1
 800a48e:	fa02 f303 	lsl.w	r3, r2, r3
 800a492:	69ba      	ldr	r2, [r7, #24]
 800a494:	4313      	orrs	r3, r2
 800a496:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	69ba      	ldr	r2, [r7, #24]
 800a49c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	f000 80e0 	beq.w	800a66c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a4ac:	4b2f      	ldr	r3, [pc, #188]	; (800a56c <HAL_GPIO_Init+0x238>)
 800a4ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a4b2:	4a2e      	ldr	r2, [pc, #184]	; (800a56c <HAL_GPIO_Init+0x238>)
 800a4b4:	f043 0302 	orr.w	r3, r3, #2
 800a4b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a4bc:	4b2b      	ldr	r3, [pc, #172]	; (800a56c <HAL_GPIO_Init+0x238>)
 800a4be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a4c2:	f003 0302 	and.w	r3, r3, #2
 800a4c6:	60fb      	str	r3, [r7, #12]
 800a4c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a4ca:	4a29      	ldr	r2, [pc, #164]	; (800a570 <HAL_GPIO_Init+0x23c>)
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	089b      	lsrs	r3, r3, #2
 800a4d0:	3302      	adds	r3, #2
 800a4d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	f003 0303 	and.w	r3, r3, #3
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	220f      	movs	r2, #15
 800a4e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a4e6:	43db      	mvns	r3, r3
 800a4e8:	69ba      	ldr	r2, [r7, #24]
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4a20      	ldr	r2, [pc, #128]	; (800a574 <HAL_GPIO_Init+0x240>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d052      	beq.n	800a59c <HAL_GPIO_Init+0x268>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4a1f      	ldr	r2, [pc, #124]	; (800a578 <HAL_GPIO_Init+0x244>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d031      	beq.n	800a562 <HAL_GPIO_Init+0x22e>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	4a1e      	ldr	r2, [pc, #120]	; (800a57c <HAL_GPIO_Init+0x248>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d02b      	beq.n	800a55e <HAL_GPIO_Init+0x22a>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	4a1d      	ldr	r2, [pc, #116]	; (800a580 <HAL_GPIO_Init+0x24c>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d025      	beq.n	800a55a <HAL_GPIO_Init+0x226>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	4a1c      	ldr	r2, [pc, #112]	; (800a584 <HAL_GPIO_Init+0x250>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d01f      	beq.n	800a556 <HAL_GPIO_Init+0x222>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4a1b      	ldr	r2, [pc, #108]	; (800a588 <HAL_GPIO_Init+0x254>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d019      	beq.n	800a552 <HAL_GPIO_Init+0x21e>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4a1a      	ldr	r2, [pc, #104]	; (800a58c <HAL_GPIO_Init+0x258>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d013      	beq.n	800a54e <HAL_GPIO_Init+0x21a>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4a19      	ldr	r2, [pc, #100]	; (800a590 <HAL_GPIO_Init+0x25c>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d00d      	beq.n	800a54a <HAL_GPIO_Init+0x216>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	4a18      	ldr	r2, [pc, #96]	; (800a594 <HAL_GPIO_Init+0x260>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d007      	beq.n	800a546 <HAL_GPIO_Init+0x212>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4a17      	ldr	r2, [pc, #92]	; (800a598 <HAL_GPIO_Init+0x264>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d101      	bne.n	800a542 <HAL_GPIO_Init+0x20e>
 800a53e:	2309      	movs	r3, #9
 800a540:	e02d      	b.n	800a59e <HAL_GPIO_Init+0x26a>
 800a542:	230a      	movs	r3, #10
 800a544:	e02b      	b.n	800a59e <HAL_GPIO_Init+0x26a>
 800a546:	2308      	movs	r3, #8
 800a548:	e029      	b.n	800a59e <HAL_GPIO_Init+0x26a>
 800a54a:	2307      	movs	r3, #7
 800a54c:	e027      	b.n	800a59e <HAL_GPIO_Init+0x26a>
 800a54e:	2306      	movs	r3, #6
 800a550:	e025      	b.n	800a59e <HAL_GPIO_Init+0x26a>
 800a552:	2305      	movs	r3, #5
 800a554:	e023      	b.n	800a59e <HAL_GPIO_Init+0x26a>
 800a556:	2304      	movs	r3, #4
 800a558:	e021      	b.n	800a59e <HAL_GPIO_Init+0x26a>
 800a55a:	2303      	movs	r3, #3
 800a55c:	e01f      	b.n	800a59e <HAL_GPIO_Init+0x26a>
 800a55e:	2302      	movs	r3, #2
 800a560:	e01d      	b.n	800a59e <HAL_GPIO_Init+0x26a>
 800a562:	2301      	movs	r3, #1
 800a564:	e01b      	b.n	800a59e <HAL_GPIO_Init+0x26a>
 800a566:	bf00      	nop
 800a568:	58000080 	.word	0x58000080
 800a56c:	58024400 	.word	0x58024400
 800a570:	58000400 	.word	0x58000400
 800a574:	58020000 	.word	0x58020000
 800a578:	58020400 	.word	0x58020400
 800a57c:	58020800 	.word	0x58020800
 800a580:	58020c00 	.word	0x58020c00
 800a584:	58021000 	.word	0x58021000
 800a588:	58021400 	.word	0x58021400
 800a58c:	58021800 	.word	0x58021800
 800a590:	58021c00 	.word	0x58021c00
 800a594:	58022000 	.word	0x58022000
 800a598:	58022400 	.word	0x58022400
 800a59c:	2300      	movs	r3, #0
 800a59e:	69fa      	ldr	r2, [r7, #28]
 800a5a0:	f002 0203 	and.w	r2, r2, #3
 800a5a4:	0092      	lsls	r2, r2, #2
 800a5a6:	4093      	lsls	r3, r2
 800a5a8:	69ba      	ldr	r2, [r7, #24]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a5ae:	4938      	ldr	r1, [pc, #224]	; (800a690 <HAL_GPIO_Init+0x35c>)
 800a5b0:	69fb      	ldr	r3, [r7, #28]
 800a5b2:	089b      	lsrs	r3, r3, #2
 800a5b4:	3302      	adds	r3, #2
 800a5b6:	69ba      	ldr	r2, [r7, #24]
 800a5b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a5bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	43db      	mvns	r3, r3
 800a5c8:	69ba      	ldr	r2, [r7, #24]
 800a5ca:	4013      	ands	r3, r2
 800a5cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d003      	beq.n	800a5e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a5da:	69ba      	ldr	r2, [r7, #24]
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a5e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a5e6:	69bb      	ldr	r3, [r7, #24]
 800a5e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a5ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	43db      	mvns	r3, r3
 800a5f6:	69ba      	ldr	r2, [r7, #24]
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a604:	2b00      	cmp	r3, #0
 800a606:	d003      	beq.n	800a610 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a608:	69ba      	ldr	r2, [r7, #24]
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a610:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a614:	69bb      	ldr	r3, [r7, #24]
 800a616:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	43db      	mvns	r3, r3
 800a622:	69ba      	ldr	r2, [r7, #24]
 800a624:	4013      	ands	r3, r2
 800a626:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a630:	2b00      	cmp	r3, #0
 800a632:	d003      	beq.n	800a63c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a634:	69ba      	ldr	r2, [r7, #24]
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	4313      	orrs	r3, r2
 800a63a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	69ba      	ldr	r2, [r7, #24]
 800a640:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	43db      	mvns	r3, r3
 800a64c:	69ba      	ldr	r2, [r7, #24]
 800a64e:	4013      	ands	r3, r2
 800a650:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d003      	beq.n	800a666 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a65e:	69ba      	ldr	r2, [r7, #24]
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	4313      	orrs	r3, r2
 800a664:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	69ba      	ldr	r2, [r7, #24]
 800a66a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	3301      	adds	r3, #1
 800a670:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	fa22 f303 	lsr.w	r3, r2, r3
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f47f ae63 	bne.w	800a348 <HAL_GPIO_Init+0x14>
  }
}
 800a682:	bf00      	nop
 800a684:	bf00      	nop
 800a686:	3724      	adds	r7, #36	; 0x24
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr
 800a690:	58000400 	.word	0x58000400

0800a694 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	460b      	mov	r3, r1
 800a69e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	691a      	ldr	r2, [r3, #16]
 800a6a4:	887b      	ldrh	r3, [r7, #2]
 800a6a6:	4013      	ands	r3, r2
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d002      	beq.n	800a6b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	73fb      	strb	r3, [r7, #15]
 800a6b0:	e001      	b.n	800a6b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a6b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3714      	adds	r7, #20
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b083      	sub	sp, #12
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	460b      	mov	r3, r1
 800a6ce:	807b      	strh	r3, [r7, #2]
 800a6d0:	4613      	mov	r3, r2
 800a6d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a6d4:	787b      	ldrb	r3, [r7, #1]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d003      	beq.n	800a6e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a6da:	887a      	ldrh	r2, [r7, #2]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a6e0:	e003      	b.n	800a6ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a6e2:	887b      	ldrh	r3, [r7, #2]
 800a6e4:	041a      	lsls	r2, r3, #16
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	619a      	str	r2, [r3, #24]
}
 800a6ea:	bf00      	nop
 800a6ec:	370c      	adds	r7, #12
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr
	...

0800a6f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d101      	bne.n	800a70a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	e08b      	b.n	800a822 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a710:	b2db      	uxtb	r3, r3
 800a712:	2b00      	cmp	r3, #0
 800a714:	d106      	bne.n	800a724 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f7f7 faee 	bl	8001d00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2224      	movs	r2, #36	; 0x24
 800a728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f022 0201 	bic.w	r2, r2, #1
 800a73a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	685a      	ldr	r2, [r3, #4]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a748:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	689a      	ldr	r2, [r3, #8]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a758:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	68db      	ldr	r3, [r3, #12]
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d107      	bne.n	800a772 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	689a      	ldr	r2, [r3, #8]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a76e:	609a      	str	r2, [r3, #8]
 800a770:	e006      	b.n	800a780 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	689a      	ldr	r2, [r3, #8]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a77e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	2b02      	cmp	r3, #2
 800a786:	d108      	bne.n	800a79a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	685a      	ldr	r2, [r3, #4]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a796:	605a      	str	r2, [r3, #4]
 800a798:	e007      	b.n	800a7aa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	685a      	ldr	r2, [r3, #4]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a7a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	6859      	ldr	r1, [r3, #4]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	4b1d      	ldr	r3, [pc, #116]	; (800a82c <HAL_I2C_Init+0x134>)
 800a7b6:	430b      	orrs	r3, r1
 800a7b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	68da      	ldr	r2, [r3, #12]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a7c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	691a      	ldr	r2, [r3, #16]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	699b      	ldr	r3, [r3, #24]
 800a7da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	430a      	orrs	r2, r1
 800a7e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	69d9      	ldr	r1, [r3, #28]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6a1a      	ldr	r2, [r3, #32]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	430a      	orrs	r2, r1
 800a7f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f042 0201 	orr.w	r2, r2, #1
 800a802:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2220      	movs	r2, #32
 800a80e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	3708      	adds	r7, #8
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	02008000 	.word	0x02008000

0800a830 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b08a      	sub	sp, #40	; 0x28
 800a834:	af02      	add	r7, sp, #8
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	607a      	str	r2, [r7, #4]
 800a83a:	461a      	mov	r2, r3
 800a83c:	460b      	mov	r3, r1
 800a83e:	817b      	strh	r3, [r7, #10]
 800a840:	4613      	mov	r3, r2
 800a842:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800a844:	2300      	movs	r3, #0
 800a846:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	2b20      	cmp	r3, #32
 800a852:	f040 80ef 	bne.w	800aa34 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	699b      	ldr	r3, [r3, #24]
 800a85c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a864:	d101      	bne.n	800a86a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800a866:	2302      	movs	r3, #2
 800a868:	e0e5      	b.n	800aa36 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a870:	2b01      	cmp	r3, #1
 800a872:	d101      	bne.n	800a878 <HAL_I2C_Master_Transmit_DMA+0x48>
 800a874:	2302      	movs	r3, #2
 800a876:	e0de      	b.n	800aa36 <HAL_I2C_Master_Transmit_DMA+0x206>
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2201      	movs	r2, #1
 800a87c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2221      	movs	r2, #33	; 0x21
 800a884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2210      	movs	r2, #16
 800a88c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2200      	movs	r2, #0
 800a894:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	893a      	ldrh	r2, [r7, #8]
 800a8a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	4a66      	ldr	r2, [pc, #408]	; (800aa40 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800a8a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	4a66      	ldr	r2, [pc, #408]	; (800aa44 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800a8ac:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	2bff      	cmp	r3, #255	; 0xff
 800a8b6:	d906      	bls.n	800a8c6 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	22ff      	movs	r2, #255	; 0xff
 800a8bc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800a8be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a8c2:	61fb      	str	r3, [r7, #28]
 800a8c4:	e007      	b.n	800a8d6 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a8d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a8d4:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d01a      	beq.n	800a914 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e2:	781a      	ldrb	r2, [r3, #0]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ee:	1c5a      	adds	r2, r3, #1
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8f8:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	3b01      	subs	r3, #1
 800a902:	b29a      	uxth	r2, r3
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a90c:	3b01      	subs	r3, #1
 800a90e:	b29a      	uxth	r2, r3
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d074      	beq.n	800aa06 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a920:	2b00      	cmp	r3, #0
 800a922:	d022      	beq.n	800a96a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a928:	4a47      	ldr	r2, [pc, #284]	; (800aa48 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800a92a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a930:	4a46      	ldr	r2, [pc, #280]	; (800aa4c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800a932:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a938:	2200      	movs	r2, #0
 800a93a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a940:	2200      	movs	r2, #0
 800a942:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a94c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800a954:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800a95a:	f7fc ff17 	bl	800778c <HAL_DMA_Start_IT>
 800a95e:	4603      	mov	r3, r0
 800a960:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800a962:	7dfb      	ldrb	r3, [r7, #23]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d13a      	bne.n	800a9de <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800a968:	e013      	b.n	800a992 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2220      	movs	r2, #32
 800a96e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2200      	movs	r2, #0
 800a976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a97e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2200      	movs	r2, #0
 800a98a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	e051      	b.n	800aa36 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a996:	b2db      	uxtb	r3, r3
 800a998:	3301      	adds	r3, #1
 800a99a:	b2da      	uxtb	r2, r3
 800a99c:	8979      	ldrh	r1, [r7, #10]
 800a99e:	4b2c      	ldr	r3, [pc, #176]	; (800aa50 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800a9a0:	9300      	str	r3, [sp, #0]
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	68f8      	ldr	r0, [r7, #12]
 800a9a6:	f002 f83b 	bl	800ca20 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9ae:	b29a      	uxth	r2, r3
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9b4:	1ad3      	subs	r3, r2, r3
 800a9b6:	b29a      	uxth	r2, r3
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a9c4:	2110      	movs	r1, #16
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f002 f85c 	bl	800ca84 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9da:	601a      	str	r2, [r3, #0]
 800a9dc:	e028      	b.n	800aa30 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2220      	movs	r2, #32
 800a9e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9f2:	f043 0210 	orr.w	r2, r3, #16
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800aa02:	2301      	movs	r3, #1
 800aa04:	e017      	b.n	800aa36 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	4a12      	ldr	r2, [pc, #72]	; (800aa54 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800aa0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800aa0c:	69bb      	ldr	r3, [r7, #24]
 800aa0e:	b2da      	uxtb	r2, r3
 800aa10:	8979      	ldrh	r1, [r7, #10]
 800aa12:	4b0f      	ldr	r3, [pc, #60]	; (800aa50 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800aa14:	9300      	str	r3, [sp, #0]
 800aa16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f002 f800 	bl	800ca20 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2200      	movs	r2, #0
 800aa24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800aa28:	2101      	movs	r1, #1
 800aa2a:	68f8      	ldr	r0, [r7, #12]
 800aa2c:	f002 f82a 	bl	800ca84 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800aa30:	2300      	movs	r3, #0
 800aa32:	e000      	b.n	800aa36 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800aa34:	2302      	movs	r3, #2
  }
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3720      	adds	r7, #32
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	ffff0000 	.word	0xffff0000
 800aa44:	0800b28b 	.word	0x0800b28b
 800aa48:	0800c643 	.word	0x0800c643
 800aa4c:	0800c771 	.word	0x0800c771
 800aa50:	80002000 	.word	0x80002000
 800aa54:	0800ae1b 	.word	0x0800ae1b

0800aa58 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b088      	sub	sp, #32
 800aa5c:	af02      	add	r7, sp, #8
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	607a      	str	r2, [r7, #4]
 800aa62:	461a      	mov	r2, r3
 800aa64:	460b      	mov	r3, r1
 800aa66:	817b      	strh	r3, [r7, #10]
 800aa68:	4613      	mov	r3, r2
 800aa6a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	2b20      	cmp	r3, #32
 800aa76:	f040 80cd 	bne.w	800ac14 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	699b      	ldr	r3, [r3, #24]
 800aa80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa88:	d101      	bne.n	800aa8e <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800aa8a:	2302      	movs	r3, #2
 800aa8c:	e0c3      	b.n	800ac16 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d101      	bne.n	800aa9c <HAL_I2C_Master_Receive_DMA+0x44>
 800aa98:	2302      	movs	r3, #2
 800aa9a:	e0bc      	b.n	800ac16 <HAL_I2C_Master_Receive_DMA+0x1be>
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2222      	movs	r2, #34	; 0x22
 800aaa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2210      	movs	r2, #16
 800aab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2200      	movs	r2, #0
 800aab8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	893a      	ldrh	r2, [r7, #8]
 800aac4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	4a55      	ldr	r2, [pc, #340]	; (800ac20 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800aaca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	4a55      	ldr	r2, [pc, #340]	; (800ac24 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800aad0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	2bff      	cmp	r3, #255	; 0xff
 800aada:	d906      	bls.n	800aaea <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	22ff      	movs	r2, #255	; 0xff
 800aae0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800aae2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aae6:	617b      	str	r3, [r7, #20]
 800aae8:	e007      	b.n	800aafa <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aaee:	b29a      	uxth	r2, r3
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800aaf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aaf8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d070      	beq.n	800abe4 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d020      	beq.n	800ab4c <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab0e:	4a46      	ldr	r2, [pc, #280]	; (800ac28 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800ab10:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab16:	4a45      	ldr	r2, [pc, #276]	; (800ac2c <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800ab18:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab1e:	2200      	movs	r2, #0
 800ab20:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab26:	2200      	movs	r2, #0
 800ab28:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	3324      	adds	r3, #36	; 0x24
 800ab34:	4619      	mov	r1, r3
 800ab36:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800ab3c:	f7fc fe26 	bl	800778c <HAL_DMA_Start_IT>
 800ab40:	4603      	mov	r3, r0
 800ab42:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800ab44:	7cfb      	ldrb	r3, [r7, #19]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d138      	bne.n	800abbc <HAL_I2C_Master_Receive_DMA+0x164>
 800ab4a:	e013      	b.n	800ab74 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2220      	movs	r2, #32
 800ab50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2200      	movs	r2, #0
 800ab58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab60:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800ab70:	2301      	movs	r3, #1
 800ab72:	e050      	b.n	800ac16 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab78:	b2da      	uxtb	r2, r3
 800ab7a:	8979      	ldrh	r1, [r7, #10]
 800ab7c:	4b2c      	ldr	r3, [pc, #176]	; (800ac30 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800ab7e:	9300      	str	r3, [sp, #0]
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	f001 ff4c 	bl	800ca20 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab8c:	b29a      	uxth	r2, r3
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab92:	1ad3      	subs	r3, r2, r3
 800ab94:	b29a      	uxth	r2, r3
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800aba2:	2110      	movs	r1, #16
 800aba4:	68f8      	ldr	r0, [r7, #12]
 800aba6:	f001 ff6d 	bl	800ca84 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	681a      	ldr	r2, [r3, #0]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800abb8:	601a      	str	r2, [r3, #0]
 800abba:	e029      	b.n	800ac10 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2220      	movs	r2, #32
 800abc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2200      	movs	r2, #0
 800abc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abd0:	f043 0210 	orr.w	r2, r3, #16
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2200      	movs	r2, #0
 800abdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800abe0:	2301      	movs	r3, #1
 800abe2:	e018      	b.n	800ac16 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	4a13      	ldr	r2, [pc, #76]	; (800ac34 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800abe8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abee:	b2da      	uxtb	r2, r3
 800abf0:	8979      	ldrh	r1, [r7, #10]
 800abf2:	4b0f      	ldr	r3, [pc, #60]	; (800ac30 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800abf4:	9300      	str	r3, [sp, #0]
 800abf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800abfa:	68f8      	ldr	r0, [r7, #12]
 800abfc:	f001 ff10 	bl	800ca20 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2200      	movs	r2, #0
 800ac04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ac08:	2102      	movs	r1, #2
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	f001 ff3a 	bl	800ca84 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800ac10:	2300      	movs	r3, #0
 800ac12:	e000      	b.n	800ac16 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800ac14:	2302      	movs	r3, #2
  }
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3718      	adds	r7, #24
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	ffff0000 	.word	0xffff0000
 800ac24:	0800b28b 	.word	0x0800b28b
 800ac28:	0800c6d9 	.word	0x0800c6d9
 800ac2c:	0800c771 	.word	0x0800c771
 800ac30:	80002400 	.word	0x80002400
 800ac34:	0800ae1b 	.word	0x0800ae1b

0800ac38 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	699b      	ldr	r3, [r3, #24]
 800ac46:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d005      	beq.n	800ac64 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac5c:	68ba      	ldr	r2, [r7, #8]
 800ac5e:	68f9      	ldr	r1, [r7, #12]
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	4798      	blx	r3
  }
}
 800ac64:	bf00      	nop
 800ac66:	3710      	adds	r7, #16
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b086      	sub	sp, #24
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	699b      	ldr	r3, [r3, #24]
 800ac7a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	0a1b      	lsrs	r3, r3, #8
 800ac88:	f003 0301 	and.w	r3, r3, #1
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d010      	beq.n	800acb2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	09db      	lsrs	r3, r3, #7
 800ac94:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d00a      	beq.n	800acb2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aca0:	f043 0201 	orr.w	r2, r3, #1
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f44f 7280 	mov.w	r2, #256	; 0x100
 800acb0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	0a9b      	lsrs	r3, r3, #10
 800acb6:	f003 0301 	and.w	r3, r3, #1
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d010      	beq.n	800ace0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	09db      	lsrs	r3, r3, #7
 800acc2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00a      	beq.n	800ace0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acce:	f043 0208 	orr.w	r2, r3, #8
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800acde:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	0a5b      	lsrs	r3, r3, #9
 800ace4:	f003 0301 	and.w	r3, r3, #1
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d010      	beq.n	800ad0e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	09db      	lsrs	r3, r3, #7
 800acf0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d00a      	beq.n	800ad0e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acfc:	f043 0202 	orr.w	r2, r3, #2
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad0c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad12:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f003 030b 	and.w	r3, r3, #11
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d003      	beq.n	800ad26 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800ad1e:	68f9      	ldr	r1, [r7, #12]
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f001 fb53 	bl	800c3cc <I2C_ITError>
  }
}
 800ad26:	bf00      	nop
 800ad28:	3718      	adds	r7, #24
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}

0800ad2e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad2e:	b480      	push	{r7}
 800ad30:	b083      	sub	sp, #12
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800ad36:	bf00      	nop
 800ad38:	370c      	adds	r7, #12
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr

0800ad42 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad42:	b480      	push	{r7}
 800ad44:	b083      	sub	sp, #12
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800ad4a:	bf00      	nop
 800ad4c:	370c      	adds	r7, #12
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad54:	4770      	bx	lr

0800ad56 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad56:	b480      	push	{r7}
 800ad58:	b083      	sub	sp, #12
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800ad5e:	bf00      	nop
 800ad60:	370c      	adds	r7, #12
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr

0800ad6a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad6a:	b480      	push	{r7}
 800ad6c:	b083      	sub	sp, #12
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800ad72:	bf00      	nop
 800ad74:	370c      	adds	r7, #12
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr

0800ad7e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ad7e:	b480      	push	{r7}
 800ad80:	b083      	sub	sp, #12
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
 800ad86:	460b      	mov	r3, r1
 800ad88:	70fb      	strb	r3, [r7, #3]
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800ad8e:	bf00      	nop
 800ad90:	370c      	adds	r7, #12
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr

0800ad9a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad9a:	b480      	push	{r7}
 800ad9c:	b083      	sub	sp, #12
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800ada2:	bf00      	nop
 800ada4:	370c      	adds	r7, #12
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr

0800adae <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800adae:	b480      	push	{r7}
 800adb0:	b083      	sub	sp, #12
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800adb6:	bf00      	nop
 800adb8:	370c      	adds	r7, #12
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr

0800adc2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800adc2:	b480      	push	{r7}
 800adc4:	b083      	sub	sp, #12
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800adca:	bf00      	nop
 800adcc:	370c      	adds	r7, #12
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr

0800add6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800add6:	b480      	push	{r7}
 800add8:	b083      	sub	sp, #12
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800adde:	bf00      	nop
 800ade0:	370c      	adds	r7, #12
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr

0800adea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800adea:	b480      	push	{r7}
 800adec:	b083      	sub	sp, #12
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800adf2:	bf00      	nop
 800adf4:	370c      	adds	r7, #12
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr

0800adfe <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800adfe:	b480      	push	{r7}
 800ae00:	b083      	sub	sp, #12
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae0c:	b2db      	uxtb	r3, r3
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	370c      	adds	r7, #12
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr

0800ae1a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b088      	sub	sp, #32
 800ae1e:	af02      	add	r7, sp, #8
 800ae20:	60f8      	str	r0, [r7, #12]
 800ae22:	60b9      	str	r1, [r7, #8]
 800ae24:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d101      	bne.n	800ae38 <I2C_Master_ISR_IT+0x1e>
 800ae34:	2302      	movs	r3, #2
 800ae36:	e120      	b.n	800b07a <I2C_Master_ISR_IT+0x260>
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	091b      	lsrs	r3, r3, #4
 800ae44:	f003 0301 	and.w	r3, r3, #1
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d013      	beq.n	800ae74 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	091b      	lsrs	r3, r3, #4
 800ae50:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d00d      	beq.n	800ae74 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	2210      	movs	r2, #16
 800ae5e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae64:	f043 0204 	orr.w	r2, r3, #4
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ae6c:	68f8      	ldr	r0, [r7, #12]
 800ae6e:	f001 fbc4 	bl	800c5fa <I2C_Flush_TXDR>
 800ae72:	e0ed      	b.n	800b050 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	089b      	lsrs	r3, r3, #2
 800ae78:	f003 0301 	and.w	r3, r3, #1
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d023      	beq.n	800aec8 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	089b      	lsrs	r3, r3, #2
 800ae84:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d01d      	beq.n	800aec8 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	f023 0304 	bic.w	r3, r3, #4
 800ae92:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9e:	b2d2      	uxtb	r2, r2
 800aea0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea6:	1c5a      	adds	r2, r3, #1
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aeb0:	3b01      	subs	r3, #1
 800aeb2:	b29a      	uxth	r2, r3
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	3b01      	subs	r3, #1
 800aec0:	b29a      	uxth	r2, r3
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aec6:	e0c3      	b.n	800b050 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	099b      	lsrs	r3, r3, #6
 800aecc:	f003 0301 	and.w	r3, r3, #1
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d12a      	bne.n	800af2a <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	085b      	lsrs	r3, r3, #1
 800aed8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d024      	beq.n	800af2a <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	085b      	lsrs	r3, r3, #1
 800aee4:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d01e      	beq.n	800af2a <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	f000 80ac 	beq.w	800b050 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aefc:	781a      	ldrb	r2, [r3, #0]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af08:	1c5a      	adds	r2, r3, #1
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af12:	3b01      	subs	r3, #1
 800af14:	b29a      	uxth	r2, r3
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af1e:	b29b      	uxth	r3, r3
 800af20:	3b01      	subs	r3, #1
 800af22:	b29a      	uxth	r2, r3
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800af28:	e092      	b.n	800b050 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	09db      	lsrs	r3, r3, #7
 800af2e:	f003 0301 	and.w	r3, r3, #1
 800af32:	2b00      	cmp	r3, #0
 800af34:	d05d      	beq.n	800aff2 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	099b      	lsrs	r3, r3, #6
 800af3a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d057      	beq.n	800aff2 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af46:	b29b      	uxth	r3, r3
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d040      	beq.n	800afce <I2C_Master_ISR_IT+0x1b4>
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af50:	2b00      	cmp	r3, #0
 800af52:	d13c      	bne.n	800afce <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af60:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af66:	b29b      	uxth	r3, r3
 800af68:	2bff      	cmp	r3, #255	; 0xff
 800af6a:	d90e      	bls.n	800af8a <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	22ff      	movs	r2, #255	; 0xff
 800af70:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af76:	b2da      	uxtb	r2, r3
 800af78:	8a79      	ldrh	r1, [r7, #18]
 800af7a:	2300      	movs	r3, #0
 800af7c:	9300      	str	r3, [sp, #0]
 800af7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800af82:	68f8      	ldr	r0, [r7, #12]
 800af84:	f001 fd4c 	bl	800ca20 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800af88:	e032      	b.n	800aff0 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af8e:	b29a      	uxth	r2, r3
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800af9c:	d00b      	beq.n	800afb6 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afa2:	b2da      	uxtb	r2, r3
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa8:	8a79      	ldrh	r1, [r7, #18]
 800afaa:	2000      	movs	r0, #0
 800afac:	9000      	str	r0, [sp, #0]
 800afae:	68f8      	ldr	r0, [r7, #12]
 800afb0:	f001 fd36 	bl	800ca20 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800afb4:	e01c      	b.n	800aff0 <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afba:	b2da      	uxtb	r2, r3
 800afbc:	8a79      	ldrh	r1, [r7, #18]
 800afbe:	2300      	movs	r3, #0
 800afc0:	9300      	str	r3, [sp, #0]
 800afc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800afc6:	68f8      	ldr	r0, [r7, #12]
 800afc8:	f001 fd2a 	bl	800ca20 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800afcc:	e010      	b.n	800aff0 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afdc:	d003      	beq.n	800afe6 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800afde:	68f8      	ldr	r0, [r7, #12]
 800afe0:	f000 fdde 	bl	800bba0 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800afe4:	e034      	b.n	800b050 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800afe6:	2140      	movs	r1, #64	; 0x40
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f001 f9ef 	bl	800c3cc <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800afee:	e02f      	b.n	800b050 <I2C_Master_ISR_IT+0x236>
 800aff0:	e02e      	b.n	800b050 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	099b      	lsrs	r3, r3, #6
 800aff6:	f003 0301 	and.w	r3, r3, #1
 800affa:	2b00      	cmp	r3, #0
 800affc:	d028      	beq.n	800b050 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	099b      	lsrs	r3, r3, #6
 800b002:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800b006:	2b00      	cmp	r3, #0
 800b008:	d022      	beq.n	800b050 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b00e:	b29b      	uxth	r3, r3
 800b010:	2b00      	cmp	r3, #0
 800b012:	d119      	bne.n	800b048 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b01e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b022:	d015      	beq.n	800b050 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b028:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b02c:	d108      	bne.n	800b040 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	685a      	ldr	r2, [r3, #4]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b03c:	605a      	str	r2, [r3, #4]
 800b03e:	e007      	b.n	800b050 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800b040:	68f8      	ldr	r0, [r7, #12]
 800b042:	f000 fdad 	bl	800bba0 <I2C_ITMasterSeqCplt>
 800b046:	e003      	b.n	800b050 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b048:	2140      	movs	r1, #64	; 0x40
 800b04a:	68f8      	ldr	r0, [r7, #12]
 800b04c:	f001 f9be 	bl	800c3cc <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	095b      	lsrs	r3, r3, #5
 800b054:	f003 0301 	and.w	r3, r3, #1
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d009      	beq.n	800b070 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	095b      	lsrs	r3, r3, #5
 800b060:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b064:	2b00      	cmp	r3, #0
 800b066:	d003      	beq.n	800b070 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800b068:	6979      	ldr	r1, [r7, #20]
 800b06a:	68f8      	ldr	r0, [r7, #12]
 800b06c:	f000 fe34 	bl	800bcd8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2200      	movs	r2, #0
 800b074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b078:	2300      	movs	r3, #0
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3718      	adds	r7, #24
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}

0800b082 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b086      	sub	sp, #24
 800b086:	af00      	add	r7, sp, #0
 800b088:	60f8      	str	r0, [r7, #12]
 800b08a:	60b9      	str	r1, [r7, #8]
 800b08c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b092:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d101      	bne.n	800b0a6 <I2C_Slave_ISR_IT+0x24>
 800b0a2:	2302      	movs	r3, #2
 800b0a4:	e0ed      	b.n	800b282 <I2C_Slave_ISR_IT+0x200>
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	095b      	lsrs	r3, r3, #5
 800b0b2:	f003 0301 	and.w	r3, r3, #1
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d00a      	beq.n	800b0d0 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	095b      	lsrs	r3, r3, #5
 800b0be:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d004      	beq.n	800b0d0 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800b0c6:	6939      	ldr	r1, [r7, #16]
 800b0c8:	68f8      	ldr	r0, [r7, #12]
 800b0ca:	f000 fecf 	bl	800be6c <I2C_ITSlaveCplt>
 800b0ce:	e0d3      	b.n	800b278 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	091b      	lsrs	r3, r3, #4
 800b0d4:	f003 0301 	and.w	r3, r3, #1
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d04d      	beq.n	800b178 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	091b      	lsrs	r3, r3, #4
 800b0e0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d047      	beq.n	800b178 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d128      	bne.n	800b144 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	2b28      	cmp	r3, #40	; 0x28
 800b0fc:	d108      	bne.n	800b110 <I2C_Slave_ISR_IT+0x8e>
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b104:	d104      	bne.n	800b110 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800b106:	6939      	ldr	r1, [r7, #16]
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	f001 f909 	bl	800c320 <I2C_ITListenCplt>
 800b10e:	e032      	b.n	800b176 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b116:	b2db      	uxtb	r3, r3
 800b118:	2b29      	cmp	r3, #41	; 0x29
 800b11a:	d10e      	bne.n	800b13a <I2C_Slave_ISR_IT+0xb8>
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b122:	d00a      	beq.n	800b13a <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2210      	movs	r2, #16
 800b12a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800b12c:	68f8      	ldr	r0, [r7, #12]
 800b12e:	f001 fa64 	bl	800c5fa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b132:	68f8      	ldr	r0, [r7, #12]
 800b134:	f000 fd71 	bl	800bc1a <I2C_ITSlaveSeqCplt>
 800b138:	e01d      	b.n	800b176 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	2210      	movs	r2, #16
 800b140:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800b142:	e096      	b.n	800b272 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2210      	movs	r2, #16
 800b14a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b150:	f043 0204 	orr.w	r2, r3, #4
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d004      	beq.n	800b168 <I2C_Slave_ISR_IT+0xe6>
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b164:	f040 8085 	bne.w	800b272 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b16c:	4619      	mov	r1, r3
 800b16e:	68f8      	ldr	r0, [r7, #12]
 800b170:	f001 f92c 	bl	800c3cc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b174:	e07d      	b.n	800b272 <I2C_Slave_ISR_IT+0x1f0>
 800b176:	e07c      	b.n	800b272 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	089b      	lsrs	r3, r3, #2
 800b17c:	f003 0301 	and.w	r3, r3, #1
 800b180:	2b00      	cmp	r3, #0
 800b182:	d030      	beq.n	800b1e6 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	089b      	lsrs	r3, r3, #2
 800b188:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d02a      	beq.n	800b1e6 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b194:	b29b      	uxth	r3, r3
 800b196:	2b00      	cmp	r3, #0
 800b198:	d018      	beq.n	800b1cc <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a4:	b2d2      	uxtb	r2, r2
 800b1a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ac:	1c5a      	adds	r2, r3, #1
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1b6:	3b01      	subs	r3, #1
 800b1b8:	b29a      	uxth	r2, r3
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	3b01      	subs	r3, #1
 800b1c6:	b29a      	uxth	r2, r3
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d14f      	bne.n	800b276 <I2C_Slave_ISR_IT+0x1f4>
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b1dc:	d04b      	beq.n	800b276 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800b1de:	68f8      	ldr	r0, [r7, #12]
 800b1e0:	f000 fd1b 	bl	800bc1a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800b1e4:	e047      	b.n	800b276 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	08db      	lsrs	r3, r3, #3
 800b1ea:	f003 0301 	and.w	r3, r3, #1
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d00a      	beq.n	800b208 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	08db      	lsrs	r3, r3, #3
 800b1f6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d004      	beq.n	800b208 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800b1fe:	6939      	ldr	r1, [r7, #16]
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f000 fc49 	bl	800ba98 <I2C_ITAddrCplt>
 800b206:	e037      	b.n	800b278 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	085b      	lsrs	r3, r3, #1
 800b20c:	f003 0301 	and.w	r3, r3, #1
 800b210:	2b00      	cmp	r3, #0
 800b212:	d031      	beq.n	800b278 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	085b      	lsrs	r3, r3, #1
 800b218:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d02b      	beq.n	800b278 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b224:	b29b      	uxth	r3, r3
 800b226:	2b00      	cmp	r3, #0
 800b228:	d018      	beq.n	800b25c <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22e:	781a      	ldrb	r2, [r3, #0]
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b23a:	1c5a      	adds	r2, r3, #1
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b244:	b29b      	uxth	r3, r3
 800b246:	3b01      	subs	r3, #1
 800b248:	b29a      	uxth	r2, r3
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b252:	3b01      	subs	r3, #1
 800b254:	b29a      	uxth	r2, r3
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	851a      	strh	r2, [r3, #40]	; 0x28
 800b25a:	e00d      	b.n	800b278 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b262:	d002      	beq.n	800b26a <I2C_Slave_ISR_IT+0x1e8>
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d106      	bne.n	800b278 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b26a:	68f8      	ldr	r0, [r7, #12]
 800b26c:	f000 fcd5 	bl	800bc1a <I2C_ITSlaveSeqCplt>
 800b270:	e002      	b.n	800b278 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800b272:	bf00      	nop
 800b274:	e000      	b.n	800b278 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800b276:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	3718      	adds	r7, #24
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b088      	sub	sp, #32
 800b28e:	af02      	add	r7, sp, #8
 800b290:	60f8      	str	r0, [r7, #12]
 800b292:	60b9      	str	r1, [r7, #8]
 800b294:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d101      	bne.n	800b2a4 <I2C_Master_ISR_DMA+0x1a>
 800b2a0:	2302      	movs	r3, #2
 800b2a2:	e0e1      	b.n	800b468 <I2C_Master_ISR_DMA+0x1de>
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	091b      	lsrs	r3, r3, #4
 800b2b0:	f003 0301 	and.w	r3, r3, #1
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d017      	beq.n	800b2e8 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	091b      	lsrs	r3, r3, #4
 800b2bc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d011      	beq.n	800b2e8 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	2210      	movs	r2, #16
 800b2ca:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2d0:	f043 0204 	orr.w	r2, r3, #4
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b2d8:	2120      	movs	r1, #32
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	f001 fbd2 	bl	800ca84 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	f001 f98a 	bl	800c5fa <I2C_Flush_TXDR>
 800b2e6:	e0ba      	b.n	800b45e <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	09db      	lsrs	r3, r3, #7
 800b2ec:	f003 0301 	and.w	r3, r3, #1
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d072      	beq.n	800b3da <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	099b      	lsrs	r3, r3, #6
 800b2f8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d06c      	beq.n	800b3da <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	681a      	ldr	r2, [r3, #0]
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b30e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b314:	b29b      	uxth	r3, r3
 800b316:	2b00      	cmp	r3, #0
 800b318:	d04e      	beq.n	800b3b8 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	b29b      	uxth	r3, r3
 800b322:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b326:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	2bff      	cmp	r3, #255	; 0xff
 800b330:	d906      	bls.n	800b340 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	22ff      	movs	r2, #255	; 0xff
 800b336:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800b338:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b33c:	617b      	str	r3, [r7, #20]
 800b33e:	e010      	b.n	800b362 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b344:	b29a      	uxth	r2, r3
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b34e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b352:	d003      	beq.n	800b35c <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b358:	617b      	str	r3, [r7, #20]
 800b35a:	e002      	b.n	800b362 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800b35c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b360:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b366:	b2da      	uxtb	r2, r3
 800b368:	8a79      	ldrh	r1, [r7, #18]
 800b36a:	2300      	movs	r3, #0
 800b36c:	9300      	str	r3, [sp, #0]
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	68f8      	ldr	r0, [r7, #12]
 800b372:	f001 fb55 	bl	800ca20 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b37a:	b29a      	uxth	r2, r3
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b380:	1ad3      	subs	r3, r2, r3
 800b382:	b29a      	uxth	r2, r3
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	2b22      	cmp	r3, #34	; 0x22
 800b392:	d108      	bne.n	800b3a6 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b3a2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b3a4:	e05b      	b.n	800b45e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b3b4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b3b6:	e052      	b.n	800b45e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3c6:	d003      	beq.n	800b3d0 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800b3c8:	68f8      	ldr	r0, [r7, #12]
 800b3ca:	f000 fbe9 	bl	800bba0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800b3ce:	e046      	b.n	800b45e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b3d0:	2140      	movs	r1, #64	; 0x40
 800b3d2:	68f8      	ldr	r0, [r7, #12]
 800b3d4:	f000 fffa 	bl	800c3cc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800b3d8:	e041      	b.n	800b45e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	099b      	lsrs	r3, r3, #6
 800b3de:	f003 0301 	and.w	r3, r3, #1
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d029      	beq.n	800b43a <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	099b      	lsrs	r3, r3, #6
 800b3ea:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d023      	beq.n	800b43a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d119      	bne.n	800b430 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b406:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b40a:	d027      	beq.n	800b45c <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b410:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b414:	d108      	bne.n	800b428 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	685a      	ldr	r2, [r3, #4]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b424:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800b426:	e019      	b.n	800b45c <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800b428:	68f8      	ldr	r0, [r7, #12]
 800b42a:	f000 fbb9 	bl	800bba0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800b42e:	e015      	b.n	800b45c <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b430:	2140      	movs	r1, #64	; 0x40
 800b432:	68f8      	ldr	r0, [r7, #12]
 800b434:	f000 ffca 	bl	800c3cc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b438:	e010      	b.n	800b45c <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	095b      	lsrs	r3, r3, #5
 800b43e:	f003 0301 	and.w	r3, r3, #1
 800b442:	2b00      	cmp	r3, #0
 800b444:	d00b      	beq.n	800b45e <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	095b      	lsrs	r3, r3, #5
 800b44a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d005      	beq.n	800b45e <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800b452:	68b9      	ldr	r1, [r7, #8]
 800b454:	68f8      	ldr	r0, [r7, #12]
 800b456:	f000 fc3f 	bl	800bcd8 <I2C_ITMasterCplt>
 800b45a:	e000      	b.n	800b45e <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800b45c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2200      	movs	r2, #0
 800b462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b466:	2300      	movs	r3, #0
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3718      	adds	r7, #24
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b088      	sub	sp, #32
 800b474:	af02      	add	r7, sp, #8
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800b47c:	4b92      	ldr	r3, [pc, #584]	; (800b6c8 <I2C_Mem_ISR_DMA+0x258>)
 800b47e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b486:	2b01      	cmp	r3, #1
 800b488:	d101      	bne.n	800b48e <I2C_Mem_ISR_DMA+0x1e>
 800b48a:	2302      	movs	r3, #2
 800b48c:	e118      	b.n	800b6c0 <I2C_Mem_ISR_DMA+0x250>
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2201      	movs	r2, #1
 800b492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	091b      	lsrs	r3, r3, #4
 800b49a:	f003 0301 	and.w	r3, r3, #1
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d017      	beq.n	800b4d2 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	091b      	lsrs	r3, r3, #4
 800b4a6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d011      	beq.n	800b4d2 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	2210      	movs	r2, #16
 800b4b4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4ba:	f043 0204 	orr.w	r2, r3, #4
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b4c2:	2120      	movs	r1, #32
 800b4c4:	68f8      	ldr	r0, [r7, #12]
 800b4c6:	f001 fadd 	bl	800ca84 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f001 f895 	bl	800c5fa <I2C_Flush_TXDR>
 800b4d0:	e0f1      	b.n	800b6b6 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	085b      	lsrs	r3, r3, #1
 800b4d6:	f003 0301 	and.w	r3, r3, #1
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00f      	beq.n	800b4fe <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	085b      	lsrs	r3, r3, #1
 800b4e2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d009      	beq.n	800b4fe <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	68fa      	ldr	r2, [r7, #12]
 800b4f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b4f2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4fa:	651a      	str	r2, [r3, #80]	; 0x50
 800b4fc:	e0db      	b.n	800b6b6 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	09db      	lsrs	r3, r3, #7
 800b502:	f003 0301 	and.w	r3, r3, #1
 800b506:	2b00      	cmp	r3, #0
 800b508:	d060      	beq.n	800b5cc <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	099b      	lsrs	r3, r3, #6
 800b50e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b512:	2b00      	cmp	r3, #0
 800b514:	d05a      	beq.n	800b5cc <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b516:	2101      	movs	r1, #1
 800b518:	68f8      	ldr	r0, [r7, #12]
 800b51a:	f001 fb37 	bl	800cb8c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b51e:	2110      	movs	r1, #16
 800b520:	68f8      	ldr	r0, [r7, #12]
 800b522:	f001 faaf 	bl	800ca84 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d048      	beq.n	800b5c2 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b534:	b29b      	uxth	r3, r3
 800b536:	2bff      	cmp	r3, #255	; 0xff
 800b538:	d910      	bls.n	800b55c <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	22ff      	movs	r2, #255	; 0xff
 800b53e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b544:	b299      	uxth	r1, r3
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b54a:	b2da      	uxtb	r2, r3
 800b54c:	2300      	movs	r3, #0
 800b54e:	9300      	str	r3, [sp, #0]
 800b550:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b554:	68f8      	ldr	r0, [r7, #12]
 800b556:	f001 fa63 	bl	800ca20 <I2C_TransferConfig>
 800b55a:	e011      	b.n	800b580 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b560:	b29a      	uxth	r2, r3
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b56a:	b299      	uxth	r1, r3
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b570:	b2da      	uxtb	r2, r3
 800b572:	2300      	movs	r3, #0
 800b574:	9300      	str	r3, [sp, #0]
 800b576:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b57a:	68f8      	ldr	r0, [r7, #12]
 800b57c:	f001 fa50 	bl	800ca20 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b584:	b29a      	uxth	r2, r3
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b58a:	1ad3      	subs	r3, r2, r3
 800b58c:	b29a      	uxth	r2, r3
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	2b22      	cmp	r3, #34	; 0x22
 800b59c:	d108      	bne.n	800b5b0 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	681a      	ldr	r2, [r3, #0]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b5ac:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b5ae:	e082      	b.n	800b6b6 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b5be:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b5c0:	e079      	b.n	800b6b6 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b5c2:	2140      	movs	r1, #64	; 0x40
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	f000 ff01 	bl	800c3cc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800b5ca:	e074      	b.n	800b6b6 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	099b      	lsrs	r3, r3, #6
 800b5d0:	f003 0301 	and.w	r3, r3, #1
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d05e      	beq.n	800b696 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	099b      	lsrs	r3, r3, #6
 800b5dc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d058      	beq.n	800b696 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b5e4:	2101      	movs	r1, #1
 800b5e6:	68f8      	ldr	r0, [r7, #12]
 800b5e8:	f001 fad0 	bl	800cb8c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b5ec:	2110      	movs	r1, #16
 800b5ee:	68f8      	ldr	r0, [r7, #12]
 800b5f0:	f001 fa48 	bl	800ca84 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	2b22      	cmp	r3, #34	; 0x22
 800b5fe:	d101      	bne.n	800b604 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800b600:	4b32      	ldr	r3, [pc, #200]	; (800b6cc <I2C_Mem_ISR_DMA+0x25c>)
 800b602:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b608:	b29b      	uxth	r3, r3
 800b60a:	2bff      	cmp	r3, #255	; 0xff
 800b60c:	d910      	bls.n	800b630 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	22ff      	movs	r2, #255	; 0xff
 800b612:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b618:	b299      	uxth	r1, r3
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b61e:	b2da      	uxtb	r2, r3
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	9300      	str	r3, [sp, #0]
 800b624:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b628:	68f8      	ldr	r0, [r7, #12]
 800b62a:	f001 f9f9 	bl	800ca20 <I2C_TransferConfig>
 800b62e:	e011      	b.n	800b654 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b634:	b29a      	uxth	r2, r3
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b63e:	b299      	uxth	r1, r3
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b644:	b2da      	uxtb	r2, r3
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	9300      	str	r3, [sp, #0]
 800b64a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b64e:	68f8      	ldr	r0, [r7, #12]
 800b650:	f001 f9e6 	bl	800ca20 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b658:	b29a      	uxth	r2, r3
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b65e:	1ad3      	subs	r3, r2, r3
 800b660:	b29a      	uxth	r2, r3
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b66c:	b2db      	uxtb	r3, r3
 800b66e:	2b22      	cmp	r3, #34	; 0x22
 800b670:	d108      	bne.n	800b684 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b680:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b682:	e018      	b.n	800b6b6 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b692:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b694:	e00f      	b.n	800b6b6 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	095b      	lsrs	r3, r3, #5
 800b69a:	f003 0301 	and.w	r3, r3, #1
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d009      	beq.n	800b6b6 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	095b      	lsrs	r3, r3, #5
 800b6a6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d003      	beq.n	800b6b6 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800b6ae:	68b9      	ldr	r1, [r7, #8]
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	f000 fb11 	bl	800bcd8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b6be:	2300      	movs	r3, #0
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3718      	adds	r7, #24
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	80002000 	.word	0x80002000
 800b6cc:	80002400 	.word	0x80002400

0800b6d0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b088      	sub	sp, #32
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d101      	bne.n	800b6f4 <I2C_Slave_ISR_DMA+0x24>
 800b6f0:	2302      	movs	r3, #2
 800b6f2:	e1cc      	b.n	800ba8e <I2C_Slave_ISR_DMA+0x3be>
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	095b      	lsrs	r3, r3, #5
 800b700:	f003 0301 	and.w	r3, r3, #1
 800b704:	2b00      	cmp	r3, #0
 800b706:	d00a      	beq.n	800b71e <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	095b      	lsrs	r3, r3, #5
 800b70c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b710:	2b00      	cmp	r3, #0
 800b712:	d004      	beq.n	800b71e <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800b714:	68b9      	ldr	r1, [r7, #8]
 800b716:	68f8      	ldr	r0, [r7, #12]
 800b718:	f000 fba8 	bl	800be6c <I2C_ITSlaveCplt>
 800b71c:	e1b2      	b.n	800ba84 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	091b      	lsrs	r3, r3, #4
 800b722:	f003 0301 	and.w	r3, r3, #1
 800b726:	2b00      	cmp	r3, #0
 800b728:	f000 819c 	beq.w	800ba64 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	091b      	lsrs	r3, r3, #4
 800b730:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b734:	2b00      	cmp	r3, #0
 800b736:	f000 8195 	beq.w	800ba64 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	0b9b      	lsrs	r3, r3, #14
 800b73e:	f003 0301 	and.w	r3, r3, #1
 800b742:	2b00      	cmp	r3, #0
 800b744:	d106      	bne.n	800b754 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	0bdb      	lsrs	r3, r3, #15
 800b74a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b74e:	2b00      	cmp	r3, #0
 800b750:	f000 8181 	beq.w	800ba56 <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d07c      	beq.n	800b856 <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	0bdb      	lsrs	r3, r3, #15
 800b760:	f003 0301 	and.w	r3, r3, #1
 800b764:	2b00      	cmp	r3, #0
 800b766:	d076      	beq.n	800b856 <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a75      	ldr	r2, [pc, #468]	; (800b944 <I2C_Slave_ISR_DMA+0x274>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d059      	beq.n	800b828 <I2C_Slave_ISR_DMA+0x158>
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4a73      	ldr	r2, [pc, #460]	; (800b948 <I2C_Slave_ISR_DMA+0x278>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d053      	beq.n	800b828 <I2C_Slave_ISR_DMA+0x158>
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	4a71      	ldr	r2, [pc, #452]	; (800b94c <I2C_Slave_ISR_DMA+0x27c>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d04d      	beq.n	800b828 <I2C_Slave_ISR_DMA+0x158>
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a6f      	ldr	r2, [pc, #444]	; (800b950 <I2C_Slave_ISR_DMA+0x280>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d047      	beq.n	800b828 <I2C_Slave_ISR_DMA+0x158>
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4a6d      	ldr	r2, [pc, #436]	; (800b954 <I2C_Slave_ISR_DMA+0x284>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d041      	beq.n	800b828 <I2C_Slave_ISR_DMA+0x158>
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a6b      	ldr	r2, [pc, #428]	; (800b958 <I2C_Slave_ISR_DMA+0x288>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d03b      	beq.n	800b828 <I2C_Slave_ISR_DMA+0x158>
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4a69      	ldr	r2, [pc, #420]	; (800b95c <I2C_Slave_ISR_DMA+0x28c>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d035      	beq.n	800b828 <I2C_Slave_ISR_DMA+0x158>
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4a67      	ldr	r2, [pc, #412]	; (800b960 <I2C_Slave_ISR_DMA+0x290>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d02f      	beq.n	800b828 <I2C_Slave_ISR_DMA+0x158>
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	4a65      	ldr	r2, [pc, #404]	; (800b964 <I2C_Slave_ISR_DMA+0x294>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d029      	beq.n	800b828 <I2C_Slave_ISR_DMA+0x158>
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4a63      	ldr	r2, [pc, #396]	; (800b968 <I2C_Slave_ISR_DMA+0x298>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d023      	beq.n	800b828 <I2C_Slave_ISR_DMA+0x158>
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a61      	ldr	r2, [pc, #388]	; (800b96c <I2C_Slave_ISR_DMA+0x29c>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d01d      	beq.n	800b828 <I2C_Slave_ISR_DMA+0x158>
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4a5f      	ldr	r2, [pc, #380]	; (800b970 <I2C_Slave_ISR_DMA+0x2a0>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d017      	beq.n	800b828 <I2C_Slave_ISR_DMA+0x158>
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4a5d      	ldr	r2, [pc, #372]	; (800b974 <I2C_Slave_ISR_DMA+0x2a4>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d011      	beq.n	800b828 <I2C_Slave_ISR_DMA+0x158>
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4a5b      	ldr	r2, [pc, #364]	; (800b978 <I2C_Slave_ISR_DMA+0x2a8>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d00b      	beq.n	800b828 <I2C_Slave_ISR_DMA+0x158>
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4a59      	ldr	r2, [pc, #356]	; (800b97c <I2C_Slave_ISR_DMA+0x2ac>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d005      	beq.n	800b828 <I2C_Slave_ISR_DMA+0x158>
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	4a57      	ldr	r2, [pc, #348]	; (800b980 <I2C_Slave_ISR_DMA+0x2b0>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d109      	bne.n	800b83c <I2C_Slave_ISR_DMA+0x16c>
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	2b00      	cmp	r3, #0
 800b832:	bf0c      	ite	eq
 800b834:	2301      	moveq	r3, #1
 800b836:	2300      	movne	r3, #0
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	e008      	b.n	800b84e <I2C_Slave_ISR_DMA+0x17e>
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	2b00      	cmp	r3, #0
 800b846:	bf0c      	ite	eq
 800b848:	2301      	moveq	r3, #1
 800b84a:	2300      	movne	r3, #0
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d001      	beq.n	800b856 <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800b852:	2301      	movs	r3, #1
 800b854:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	f000 809f 	beq.w	800b99e <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	0b9b      	lsrs	r3, r3, #14
 800b864:	f003 0301 	and.w	r3, r3, #1
 800b868:	2b00      	cmp	r3, #0
 800b86a:	f000 8098 	beq.w	800b99e <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	4a33      	ldr	r2, [pc, #204]	; (800b944 <I2C_Slave_ISR_DMA+0x274>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d059      	beq.n	800b92e <I2C_Slave_ISR_DMA+0x25e>
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a31      	ldr	r2, [pc, #196]	; (800b948 <I2C_Slave_ISR_DMA+0x278>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d053      	beq.n	800b92e <I2C_Slave_ISR_DMA+0x25e>
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	4a2f      	ldr	r2, [pc, #188]	; (800b94c <I2C_Slave_ISR_DMA+0x27c>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d04d      	beq.n	800b92e <I2C_Slave_ISR_DMA+0x25e>
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4a2d      	ldr	r2, [pc, #180]	; (800b950 <I2C_Slave_ISR_DMA+0x280>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d047      	beq.n	800b92e <I2C_Slave_ISR_DMA+0x25e>
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a2b      	ldr	r2, [pc, #172]	; (800b954 <I2C_Slave_ISR_DMA+0x284>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d041      	beq.n	800b92e <I2C_Slave_ISR_DMA+0x25e>
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4a29      	ldr	r2, [pc, #164]	; (800b958 <I2C_Slave_ISR_DMA+0x288>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d03b      	beq.n	800b92e <I2C_Slave_ISR_DMA+0x25e>
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a27      	ldr	r2, [pc, #156]	; (800b95c <I2C_Slave_ISR_DMA+0x28c>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d035      	beq.n	800b92e <I2C_Slave_ISR_DMA+0x25e>
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a25      	ldr	r2, [pc, #148]	; (800b960 <I2C_Slave_ISR_DMA+0x290>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d02f      	beq.n	800b92e <I2C_Slave_ISR_DMA+0x25e>
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a23      	ldr	r2, [pc, #140]	; (800b964 <I2C_Slave_ISR_DMA+0x294>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d029      	beq.n	800b92e <I2C_Slave_ISR_DMA+0x25e>
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4a21      	ldr	r2, [pc, #132]	; (800b968 <I2C_Slave_ISR_DMA+0x298>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d023      	beq.n	800b92e <I2C_Slave_ISR_DMA+0x25e>
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a1f      	ldr	r2, [pc, #124]	; (800b96c <I2C_Slave_ISR_DMA+0x29c>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d01d      	beq.n	800b92e <I2C_Slave_ISR_DMA+0x25e>
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a1d      	ldr	r2, [pc, #116]	; (800b970 <I2C_Slave_ISR_DMA+0x2a0>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d017      	beq.n	800b92e <I2C_Slave_ISR_DMA+0x25e>
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a1b      	ldr	r2, [pc, #108]	; (800b974 <I2C_Slave_ISR_DMA+0x2a4>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d011      	beq.n	800b92e <I2C_Slave_ISR_DMA+0x25e>
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a19      	ldr	r2, [pc, #100]	; (800b978 <I2C_Slave_ISR_DMA+0x2a8>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d00b      	beq.n	800b92e <I2C_Slave_ISR_DMA+0x25e>
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4a17      	ldr	r2, [pc, #92]	; (800b97c <I2C_Slave_ISR_DMA+0x2ac>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d005      	beq.n	800b92e <I2C_Slave_ISR_DMA+0x25e>
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	4a15      	ldr	r2, [pc, #84]	; (800b980 <I2C_Slave_ISR_DMA+0x2b0>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d12a      	bne.n	800b984 <I2C_Slave_ISR_DMA+0x2b4>
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	2b00      	cmp	r3, #0
 800b938:	bf0c      	ite	eq
 800b93a:	2301      	moveq	r3, #1
 800b93c:	2300      	movne	r3, #0
 800b93e:	b2db      	uxtb	r3, r3
 800b940:	e029      	b.n	800b996 <I2C_Slave_ISR_DMA+0x2c6>
 800b942:	bf00      	nop
 800b944:	40020010 	.word	0x40020010
 800b948:	40020028 	.word	0x40020028
 800b94c:	40020040 	.word	0x40020040
 800b950:	40020058 	.word	0x40020058
 800b954:	40020070 	.word	0x40020070
 800b958:	40020088 	.word	0x40020088
 800b95c:	400200a0 	.word	0x400200a0
 800b960:	400200b8 	.word	0x400200b8
 800b964:	40020410 	.word	0x40020410
 800b968:	40020428 	.word	0x40020428
 800b96c:	40020440 	.word	0x40020440
 800b970:	40020458 	.word	0x40020458
 800b974:	40020470 	.word	0x40020470
 800b978:	40020488 	.word	0x40020488
 800b97c:	400204a0 	.word	0x400204a0
 800b980:	400204b8 	.word	0x400204b8
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	bf0c      	ite	eq
 800b990:	2301      	moveq	r3, #1
 800b992:	2300      	movne	r3, #0
 800b994:	b2db      	uxtb	r3, r3
 800b996:	2b00      	cmp	r3, #0
 800b998:	d001      	beq.n	800b99e <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800b99a:	2301      	movs	r3, #1
 800b99c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800b99e:	69fb      	ldr	r3, [r7, #28]
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d128      	bne.n	800b9f6 <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	2b28      	cmp	r3, #40	; 0x28
 800b9ae:	d108      	bne.n	800b9c2 <I2C_Slave_ISR_DMA+0x2f2>
 800b9b0:	69bb      	ldr	r3, [r7, #24]
 800b9b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b9b6:	d104      	bne.n	800b9c2 <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800b9b8:	68b9      	ldr	r1, [r7, #8]
 800b9ba:	68f8      	ldr	r0, [r7, #12]
 800b9bc:	f000 fcb0 	bl	800c320 <I2C_ITListenCplt>
 800b9c0:	e048      	b.n	800ba54 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	2b29      	cmp	r3, #41	; 0x29
 800b9cc:	d10e      	bne.n	800b9ec <I2C_Slave_ISR_DMA+0x31c>
 800b9ce:	69bb      	ldr	r3, [r7, #24]
 800b9d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b9d4:	d00a      	beq.n	800b9ec <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2210      	movs	r2, #16
 800b9dc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	f000 fe0b 	bl	800c5fa <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f000 f918 	bl	800bc1a <I2C_ITSlaveSeqCplt>
 800b9ea:	e033      	b.n	800ba54 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2210      	movs	r2, #16
 800b9f2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800b9f4:	e034      	b.n	800ba60 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2210      	movs	r2, #16
 800b9fc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba02:	f043 0204 	orr.w	r2, r3, #4
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba10:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d003      	beq.n	800ba20 <I2C_Slave_ISR_DMA+0x350>
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ba1e:	d11f      	bne.n	800ba60 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ba20:	7dfb      	ldrb	r3, [r7, #23]
 800ba22:	2b21      	cmp	r3, #33	; 0x21
 800ba24:	d002      	beq.n	800ba2c <I2C_Slave_ISR_DMA+0x35c>
 800ba26:	7dfb      	ldrb	r3, [r7, #23]
 800ba28:	2b29      	cmp	r3, #41	; 0x29
 800ba2a:	d103      	bne.n	800ba34 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2221      	movs	r2, #33	; 0x21
 800ba30:	631a      	str	r2, [r3, #48]	; 0x30
 800ba32:	e008      	b.n	800ba46 <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ba34:	7dfb      	ldrb	r3, [r7, #23]
 800ba36:	2b22      	cmp	r3, #34	; 0x22
 800ba38:	d002      	beq.n	800ba40 <I2C_Slave_ISR_DMA+0x370>
 800ba3a:	7dfb      	ldrb	r3, [r7, #23]
 800ba3c:	2b2a      	cmp	r3, #42	; 0x2a
 800ba3e:	d102      	bne.n	800ba46 <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2222      	movs	r2, #34	; 0x22
 800ba44:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	68f8      	ldr	r0, [r7, #12]
 800ba4e:	f000 fcbd 	bl	800c3cc <I2C_ITError>
      if (treatdmanack == 1U)
 800ba52:	e005      	b.n	800ba60 <I2C_Slave_ISR_DMA+0x390>
 800ba54:	e004      	b.n	800ba60 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2210      	movs	r2, #16
 800ba5c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ba5e:	e011      	b.n	800ba84 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800ba60:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ba62:	e00f      	b.n	800ba84 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	08db      	lsrs	r3, r3, #3
 800ba68:	f003 0301 	and.w	r3, r3, #1
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d009      	beq.n	800ba84 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	08db      	lsrs	r3, r3, #3
 800ba74:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d003      	beq.n	800ba84 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800ba7c:	68b9      	ldr	r1, [r7, #8]
 800ba7e:	68f8      	ldr	r0, [r7, #12]
 800ba80:	f000 f80a 	bl	800ba98 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2200      	movs	r2, #0
 800ba88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ba8c:	2300      	movs	r3, #0
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3720      	adds	r7, #32
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop

0800ba98 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800baa8:	b2db      	uxtb	r3, r3
 800baaa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800baae:	2b28      	cmp	r3, #40	; 0x28
 800bab0:	d16a      	bne.n	800bb88 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	699b      	ldr	r3, [r3, #24]
 800bab8:	0c1b      	lsrs	r3, r3, #16
 800baba:	b2db      	uxtb	r3, r3
 800babc:	f003 0301 	and.w	r3, r3, #1
 800bac0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	699b      	ldr	r3, [r3, #24]
 800bac8:	0c1b      	lsrs	r3, r3, #16
 800baca:	b29b      	uxth	r3, r3
 800bacc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800bad0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	b29b      	uxth	r3, r3
 800bada:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bade:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	68db      	ldr	r3, [r3, #12]
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800baec:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	68db      	ldr	r3, [r3, #12]
 800baf2:	2b02      	cmp	r3, #2
 800baf4:	d138      	bne.n	800bb68 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800baf6:	897b      	ldrh	r3, [r7, #10]
 800baf8:	09db      	lsrs	r3, r3, #7
 800bafa:	b29a      	uxth	r2, r3
 800bafc:	89bb      	ldrh	r3, [r7, #12]
 800bafe:	4053      	eors	r3, r2
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	f003 0306 	and.w	r3, r3, #6
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d11c      	bne.n	800bb44 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800bb0a:	897b      	ldrh	r3, [r7, #10]
 800bb0c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb12:	1c5a      	adds	r2, r3, #1
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb1c:	2b02      	cmp	r3, #2
 800bb1e:	d13b      	bne.n	800bb98 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2200      	movs	r2, #0
 800bb24:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	2208      	movs	r2, #8
 800bb2c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2200      	movs	r2, #0
 800bb32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800bb36:	89ba      	ldrh	r2, [r7, #12]
 800bb38:	7bfb      	ldrb	r3, [r7, #15]
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f7ff f91e 	bl	800ad7e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800bb42:	e029      	b.n	800bb98 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800bb44:	893b      	ldrh	r3, [r7, #8]
 800bb46:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800bb48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f001 f81d 	bl	800cb8c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2200      	movs	r2, #0
 800bb56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800bb5a:	89ba      	ldrh	r2, [r7, #12]
 800bb5c:	7bfb      	ldrb	r3, [r7, #15]
 800bb5e:	4619      	mov	r1, r3
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f7ff f90c 	bl	800ad7e <HAL_I2C_AddrCallback>
}
 800bb66:	e017      	b.n	800bb98 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800bb68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f001 f80d 	bl	800cb8c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2200      	movs	r2, #0
 800bb76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800bb7a:	89ba      	ldrh	r2, [r7, #12]
 800bb7c:	7bfb      	ldrb	r3, [r7, #15]
 800bb7e:	4619      	mov	r1, r3
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f7ff f8fc 	bl	800ad7e <HAL_I2C_AddrCallback>
}
 800bb86:	e007      	b.n	800bb98 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2208      	movs	r2, #8
 800bb8e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2200      	movs	r2, #0
 800bb94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800bb98:	bf00      	nop
 800bb9a:	3710      	adds	r7, #16
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b082      	sub	sp, #8
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bbb6:	b2db      	uxtb	r3, r3
 800bbb8:	2b21      	cmp	r3, #33	; 0x21
 800bbba:	d115      	bne.n	800bbe8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2220      	movs	r2, #32
 800bbc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2211      	movs	r2, #17
 800bbc8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bbd0:	2101      	movs	r1, #1
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 ffda 	bl	800cb8c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f7ff f8a4 	bl	800ad2e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bbe6:	e014      	b.n	800bc12 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2220      	movs	r2, #32
 800bbec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2212      	movs	r2, #18
 800bbf4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800bbfc:	2102      	movs	r1, #2
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 ffc4 	bl	800cb8c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2200      	movs	r2, #0
 800bc08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f7ff f898 	bl	800ad42 <HAL_I2C_MasterRxCpltCallback>
}
 800bc12:	bf00      	nop
 800bc14:	3708      	adds	r7, #8
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}

0800bc1a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800bc1a:	b580      	push	{r7, lr}
 800bc1c:	b084      	sub	sp, #16
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	0b9b      	lsrs	r3, r3, #14
 800bc36:	f003 0301 	and.w	r3, r3, #1
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d008      	beq.n	800bc50 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bc4c:	601a      	str	r2, [r3, #0]
 800bc4e:	e00d      	b.n	800bc6c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	0bdb      	lsrs	r3, r3, #15
 800bc54:	f003 0301 	and.w	r3, r3, #1
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d007      	beq.n	800bc6c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bc6a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	2b29      	cmp	r3, #41	; 0x29
 800bc76:	d112      	bne.n	800bc9e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2228      	movs	r2, #40	; 0x28
 800bc7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2221      	movs	r2, #33	; 0x21
 800bc84:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bc86:	2101      	movs	r1, #1
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f000 ff7f 	bl	800cb8c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2200      	movs	r2, #0
 800bc92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f7ff f85d 	bl	800ad56 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800bc9c:	e017      	b.n	800bcce <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	2b2a      	cmp	r3, #42	; 0x2a
 800bca8:	d111      	bne.n	800bcce <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2228      	movs	r2, #40	; 0x28
 800bcae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2222      	movs	r2, #34	; 0x22
 800bcb6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800bcb8:	2102      	movs	r1, #2
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f000 ff66 	bl	800cb8c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f7ff f84e 	bl	800ad6a <HAL_I2C_SlaveRxCpltCallback>
}
 800bcce:	bf00      	nop
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
	...

0800bcd8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b086      	sub	sp, #24
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2220      	movs	r2, #32
 800bcec:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bcf4:	b2db      	uxtb	r3, r3
 800bcf6:	2b21      	cmp	r3, #33	; 0x21
 800bcf8:	d107      	bne.n	800bd0a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bcfa:	2101      	movs	r1, #1
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f000 ff45 	bl	800cb8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2211      	movs	r2, #17
 800bd06:	631a      	str	r2, [r3, #48]	; 0x30
 800bd08:	e00c      	b.n	800bd24 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	2b22      	cmp	r3, #34	; 0x22
 800bd14:	d106      	bne.n	800bd24 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800bd16:	2102      	movs	r1, #2
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f000 ff37 	bl	800cb8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2212      	movs	r2, #18
 800bd22:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	6859      	ldr	r1, [r3, #4]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	4b4d      	ldr	r3, [pc, #308]	; (800be64 <I2C_ITMasterCplt+0x18c>)
 800bd30:	400b      	ands	r3, r1
 800bd32:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2200      	movs	r2, #0
 800bd38:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	4a4a      	ldr	r2, [pc, #296]	; (800be68 <I2C_ITMasterCplt+0x190>)
 800bd3e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	091b      	lsrs	r3, r3, #4
 800bd44:	f003 0301 	and.w	r3, r3, #1
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d009      	beq.n	800bd60 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	2210      	movs	r2, #16
 800bd52:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd58:	f043 0204 	orr.w	r2, r3, #4
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	2b60      	cmp	r3, #96	; 0x60
 800bd6a:	d10b      	bne.n	800bd84 <I2C_ITMasterCplt+0xac>
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	089b      	lsrs	r3, r3, #2
 800bd70:	f003 0301 	and.w	r3, r3, #1
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d005      	beq.n	800bd84 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800bd82:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 fc38 	bl	800c5fa <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd8e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd96:	b2db      	uxtb	r3, r3
 800bd98:	2b60      	cmp	r3, #96	; 0x60
 800bd9a:	d002      	beq.n	800bda2 <I2C_ITMasterCplt+0xca>
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d006      	beq.n	800bdb0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bda6:	4619      	mov	r1, r3
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f000 fb0f 	bl	800c3cc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800bdae:	e054      	b.n	800be5a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bdb6:	b2db      	uxtb	r3, r3
 800bdb8:	2b21      	cmp	r3, #33	; 0x21
 800bdba:	d124      	bne.n	800be06 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2220      	movs	r2, #32
 800bdc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bdd0:	b2db      	uxtb	r3, r3
 800bdd2:	2b40      	cmp	r3, #64	; 0x40
 800bdd4:	d10b      	bne.n	800bdee <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2200      	movs	r2, #0
 800bde2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f7fe ffe1 	bl	800adae <HAL_I2C_MemTxCpltCallback>
}
 800bdec:	e035      	b.n	800be5a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f7fe ff95 	bl	800ad2e <HAL_I2C_MasterTxCpltCallback>
}
 800be04:	e029      	b.n	800be5a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	2b22      	cmp	r3, #34	; 0x22
 800be10:	d123      	bne.n	800be5a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2220      	movs	r2, #32
 800be16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2200      	movs	r2, #0
 800be1e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800be26:	b2db      	uxtb	r3, r3
 800be28:	2b40      	cmp	r3, #64	; 0x40
 800be2a:	d10b      	bne.n	800be44 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2200      	movs	r2, #0
 800be30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2200      	movs	r2, #0
 800be38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f7fe ffc0 	bl	800adc2 <HAL_I2C_MemRxCpltCallback>
}
 800be42:	e00a      	b.n	800be5a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2200      	movs	r2, #0
 800be48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2200      	movs	r2, #0
 800be50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f7fe ff74 	bl	800ad42 <HAL_I2C_MasterRxCpltCallback>
}
 800be5a:	bf00      	nop
 800be5c:	3718      	adds	r7, #24
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	fe00e800 	.word	0xfe00e800
 800be68:	ffff0000 	.word	0xffff0000

0800be6c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b086      	sub	sp, #24
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be86:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be8e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	2220      	movs	r2, #32
 800be96:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800be98:	7afb      	ldrb	r3, [r7, #11]
 800be9a:	2b21      	cmp	r3, #33	; 0x21
 800be9c:	d002      	beq.n	800bea4 <I2C_ITSlaveCplt+0x38>
 800be9e:	7afb      	ldrb	r3, [r7, #11]
 800bea0:	2b29      	cmp	r3, #41	; 0x29
 800bea2:	d108      	bne.n	800beb6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800bea4:	f248 0101 	movw	r1, #32769	; 0x8001
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f000 fe6f 	bl	800cb8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2221      	movs	r2, #33	; 0x21
 800beb2:	631a      	str	r2, [r3, #48]	; 0x30
 800beb4:	e019      	b.n	800beea <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800beb6:	7afb      	ldrb	r3, [r7, #11]
 800beb8:	2b22      	cmp	r3, #34	; 0x22
 800beba:	d002      	beq.n	800bec2 <I2C_ITSlaveCplt+0x56>
 800bebc:	7afb      	ldrb	r3, [r7, #11]
 800bebe:	2b2a      	cmp	r3, #42	; 0x2a
 800bec0:	d108      	bne.n	800bed4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800bec2:	f248 0102 	movw	r1, #32770	; 0x8002
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 fe60 	bl	800cb8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2222      	movs	r2, #34	; 0x22
 800bed0:	631a      	str	r2, [r3, #48]	; 0x30
 800bed2:	e00a      	b.n	800beea <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800bed4:	7afb      	ldrb	r3, [r7, #11]
 800bed6:	2b28      	cmp	r3, #40	; 0x28
 800bed8:	d107      	bne.n	800beea <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800beda:	f248 0103 	movw	r1, #32771	; 0x8003
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 fe54 	bl	800cb8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2200      	movs	r2, #0
 800bee8:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	685a      	ldr	r2, [r3, #4]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bef8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	6859      	ldr	r1, [r3, #4]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681a      	ldr	r2, [r3, #0]
 800bf04:	4b80      	ldr	r3, [pc, #512]	; (800c108 <I2C_ITSlaveCplt+0x29c>)
 800bf06:	400b      	ands	r3, r1
 800bf08:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f000 fb75 	bl	800c5fa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	0b9b      	lsrs	r3, r3, #14
 800bf14:	f003 0301 	and.w	r3, r3, #1
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d07a      	beq.n	800c012 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bf2a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	f000 8112 	beq.w	800c15a <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	4a73      	ldr	r2, [pc, #460]	; (800c10c <I2C_ITSlaveCplt+0x2a0>)
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	d059      	beq.n	800bff6 <I2C_ITSlaveCplt+0x18a>
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4a71      	ldr	r2, [pc, #452]	; (800c110 <I2C_ITSlaveCplt+0x2a4>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d053      	beq.n	800bff6 <I2C_ITSlaveCplt+0x18a>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a6f      	ldr	r2, [pc, #444]	; (800c114 <I2C_ITSlaveCplt+0x2a8>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d04d      	beq.n	800bff6 <I2C_ITSlaveCplt+0x18a>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a6d      	ldr	r2, [pc, #436]	; (800c118 <I2C_ITSlaveCplt+0x2ac>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d047      	beq.n	800bff6 <I2C_ITSlaveCplt+0x18a>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4a6b      	ldr	r2, [pc, #428]	; (800c11c <I2C_ITSlaveCplt+0x2b0>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d041      	beq.n	800bff6 <I2C_ITSlaveCplt+0x18a>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	4a69      	ldr	r2, [pc, #420]	; (800c120 <I2C_ITSlaveCplt+0x2b4>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d03b      	beq.n	800bff6 <I2C_ITSlaveCplt+0x18a>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a67      	ldr	r2, [pc, #412]	; (800c124 <I2C_ITSlaveCplt+0x2b8>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d035      	beq.n	800bff6 <I2C_ITSlaveCplt+0x18a>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a65      	ldr	r2, [pc, #404]	; (800c128 <I2C_ITSlaveCplt+0x2bc>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d02f      	beq.n	800bff6 <I2C_ITSlaveCplt+0x18a>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4a63      	ldr	r2, [pc, #396]	; (800c12c <I2C_ITSlaveCplt+0x2c0>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d029      	beq.n	800bff6 <I2C_ITSlaveCplt+0x18a>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4a61      	ldr	r2, [pc, #388]	; (800c130 <I2C_ITSlaveCplt+0x2c4>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d023      	beq.n	800bff6 <I2C_ITSlaveCplt+0x18a>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a5f      	ldr	r2, [pc, #380]	; (800c134 <I2C_ITSlaveCplt+0x2c8>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d01d      	beq.n	800bff6 <I2C_ITSlaveCplt+0x18a>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a5d      	ldr	r2, [pc, #372]	; (800c138 <I2C_ITSlaveCplt+0x2cc>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d017      	beq.n	800bff6 <I2C_ITSlaveCplt+0x18a>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	4a5b      	ldr	r2, [pc, #364]	; (800c13c <I2C_ITSlaveCplt+0x2d0>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d011      	beq.n	800bff6 <I2C_ITSlaveCplt+0x18a>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4a59      	ldr	r2, [pc, #356]	; (800c140 <I2C_ITSlaveCplt+0x2d4>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d00b      	beq.n	800bff6 <I2C_ITSlaveCplt+0x18a>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4a57      	ldr	r2, [pc, #348]	; (800c144 <I2C_ITSlaveCplt+0x2d8>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d005      	beq.n	800bff6 <I2C_ITSlaveCplt+0x18a>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a55      	ldr	r2, [pc, #340]	; (800c148 <I2C_ITSlaveCplt+0x2dc>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d105      	bne.n	800c002 <I2C_ITSlaveCplt+0x196>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	b29b      	uxth	r3, r3
 800c000:	e004      	b.n	800c00c <I2C_ITSlaveCplt+0x1a0>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	685b      	ldr	r3, [r3, #4]
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	8553      	strh	r3, [r2, #42]	; 0x2a
 800c010:	e0a3      	b.n	800c15a <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	0bdb      	lsrs	r3, r3, #15
 800c016:	f003 0301 	and.w	r3, r3, #1
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	f000 809d 	beq.w	800c15a <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	681a      	ldr	r2, [r3, #0]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c02e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c034:	2b00      	cmp	r3, #0
 800c036:	f000 8090 	beq.w	800c15a <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	4a32      	ldr	r2, [pc, #200]	; (800c10c <I2C_ITSlaveCplt+0x2a0>)
 800c042:	4293      	cmp	r3, r2
 800c044:	d059      	beq.n	800c0fa <I2C_ITSlaveCplt+0x28e>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4a30      	ldr	r2, [pc, #192]	; (800c110 <I2C_ITSlaveCplt+0x2a4>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d053      	beq.n	800c0fa <I2C_ITSlaveCplt+0x28e>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4a2e      	ldr	r2, [pc, #184]	; (800c114 <I2C_ITSlaveCplt+0x2a8>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d04d      	beq.n	800c0fa <I2C_ITSlaveCplt+0x28e>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4a2c      	ldr	r2, [pc, #176]	; (800c118 <I2C_ITSlaveCplt+0x2ac>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d047      	beq.n	800c0fa <I2C_ITSlaveCplt+0x28e>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4a2a      	ldr	r2, [pc, #168]	; (800c11c <I2C_ITSlaveCplt+0x2b0>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d041      	beq.n	800c0fa <I2C_ITSlaveCplt+0x28e>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4a28      	ldr	r2, [pc, #160]	; (800c120 <I2C_ITSlaveCplt+0x2b4>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d03b      	beq.n	800c0fa <I2C_ITSlaveCplt+0x28e>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4a26      	ldr	r2, [pc, #152]	; (800c124 <I2C_ITSlaveCplt+0x2b8>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d035      	beq.n	800c0fa <I2C_ITSlaveCplt+0x28e>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4a24      	ldr	r2, [pc, #144]	; (800c128 <I2C_ITSlaveCplt+0x2bc>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d02f      	beq.n	800c0fa <I2C_ITSlaveCplt+0x28e>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	4a22      	ldr	r2, [pc, #136]	; (800c12c <I2C_ITSlaveCplt+0x2c0>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d029      	beq.n	800c0fa <I2C_ITSlaveCplt+0x28e>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a20      	ldr	r2, [pc, #128]	; (800c130 <I2C_ITSlaveCplt+0x2c4>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d023      	beq.n	800c0fa <I2C_ITSlaveCplt+0x28e>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4a1e      	ldr	r2, [pc, #120]	; (800c134 <I2C_ITSlaveCplt+0x2c8>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d01d      	beq.n	800c0fa <I2C_ITSlaveCplt+0x28e>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4a1c      	ldr	r2, [pc, #112]	; (800c138 <I2C_ITSlaveCplt+0x2cc>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d017      	beq.n	800c0fa <I2C_ITSlaveCplt+0x28e>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a1a      	ldr	r2, [pc, #104]	; (800c13c <I2C_ITSlaveCplt+0x2d0>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d011      	beq.n	800c0fa <I2C_ITSlaveCplt+0x28e>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a18      	ldr	r2, [pc, #96]	; (800c140 <I2C_ITSlaveCplt+0x2d4>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d00b      	beq.n	800c0fa <I2C_ITSlaveCplt+0x28e>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a16      	ldr	r2, [pc, #88]	; (800c144 <I2C_ITSlaveCplt+0x2d8>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d005      	beq.n	800c0fa <I2C_ITSlaveCplt+0x28e>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a14      	ldr	r2, [pc, #80]	; (800c148 <I2C_ITSlaveCplt+0x2dc>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d128      	bne.n	800c14c <I2C_ITSlaveCplt+0x2e0>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	b29b      	uxth	r3, r3
 800c104:	e027      	b.n	800c156 <I2C_ITSlaveCplt+0x2ea>
 800c106:	bf00      	nop
 800c108:	fe00e800 	.word	0xfe00e800
 800c10c:	40020010 	.word	0x40020010
 800c110:	40020028 	.word	0x40020028
 800c114:	40020040 	.word	0x40020040
 800c118:	40020058 	.word	0x40020058
 800c11c:	40020070 	.word	0x40020070
 800c120:	40020088 	.word	0x40020088
 800c124:	400200a0 	.word	0x400200a0
 800c128:	400200b8 	.word	0x400200b8
 800c12c:	40020410 	.word	0x40020410
 800c130:	40020428 	.word	0x40020428
 800c134:	40020440 	.word	0x40020440
 800c138:	40020458 	.word	0x40020458
 800c13c:	40020470 	.word	0x40020470
 800c140:	40020488 	.word	0x40020488
 800c144:	400204a0 	.word	0x400204a0
 800c148:	400204b8 	.word	0x400204b8
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	b29b      	uxth	r3, r3
 800c156:	687a      	ldr	r2, [r7, #4]
 800c158:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	089b      	lsrs	r3, r3, #2
 800c15e:	f003 0301 	and.w	r3, r3, #1
 800c162:	2b00      	cmp	r3, #0
 800c164:	d020      	beq.n	800c1a8 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	f023 0304 	bic.w	r3, r3, #4
 800c16c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c178:	b2d2      	uxtb	r2, r2
 800c17a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c180:	1c5a      	adds	r2, r3, #1
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d00c      	beq.n	800c1a8 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c192:	3b01      	subs	r3, #1
 800c194:	b29a      	uxth	r2, r3
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c19e:	b29b      	uxth	r3, r3
 800c1a0:	3b01      	subs	r3, #1
 800c1a2:	b29a      	uxth	r2, r3
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1ac:	b29b      	uxth	r3, r3
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d005      	beq.n	800c1be <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1b6:	f043 0204 	orr.w	r2, r3, #4
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	091b      	lsrs	r3, r3, #4
 800c1c2:	f003 0301 	and.w	r3, r3, #1
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d04a      	beq.n	800c260 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	091b      	lsrs	r3, r3, #4
 800c1ce:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d044      	beq.n	800c260 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1da:	b29b      	uxth	r3, r3
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d128      	bne.n	800c232 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1e6:	b2db      	uxtb	r3, r3
 800c1e8:	2b28      	cmp	r3, #40	; 0x28
 800c1ea:	d108      	bne.n	800c1fe <I2C_ITSlaveCplt+0x392>
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c1f2:	d104      	bne.n	800c1fe <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c1f4:	6979      	ldr	r1, [r7, #20]
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f000 f892 	bl	800c320 <I2C_ITListenCplt>
 800c1fc:	e030      	b.n	800c260 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c204:	b2db      	uxtb	r3, r3
 800c206:	2b29      	cmp	r3, #41	; 0x29
 800c208:	d10e      	bne.n	800c228 <I2C_ITSlaveCplt+0x3bc>
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c210:	d00a      	beq.n	800c228 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	2210      	movs	r2, #16
 800c218:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 f9ed 	bl	800c5fa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f7ff fcfa 	bl	800bc1a <I2C_ITSlaveSeqCplt>
 800c226:	e01b      	b.n	800c260 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2210      	movs	r2, #16
 800c22e:	61da      	str	r2, [r3, #28]
 800c230:	e016      	b.n	800c260 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	2210      	movs	r2, #16
 800c238:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c23e:	f043 0204 	orr.w	r2, r3, #4
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d003      	beq.n	800c254 <I2C_ITSlaveCplt+0x3e8>
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c252:	d105      	bne.n	800c260 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c258:	4619      	mov	r1, r3
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f000 f8b6 	bl	800c3cc <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2200      	movs	r2, #0
 800c264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c272:	2b00      	cmp	r3, #0
 800c274:	d010      	beq.n	800c298 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c27a:	4619      	mov	r1, r3
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 f8a5 	bl	800c3cc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c288:	b2db      	uxtb	r3, r3
 800c28a:	2b28      	cmp	r3, #40	; 0x28
 800c28c:	d141      	bne.n	800c312 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800c28e:	6979      	ldr	r1, [r7, #20]
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f000 f845 	bl	800c320 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c296:	e03c      	b.n	800c312 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c29c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c2a0:	d014      	beq.n	800c2cc <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f7ff fcb9 	bl	800bc1a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	4a1c      	ldr	r2, [pc, #112]	; (800c31c <I2C_ITSlaveCplt+0x4b0>)
 800c2ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2220      	movs	r2, #32
 800c2b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f7fe fd68 	bl	800ad9a <HAL_I2C_ListenCpltCallback>
}
 800c2ca:	e022      	b.n	800c312 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	2b22      	cmp	r3, #34	; 0x22
 800c2d6:	d10e      	bne.n	800c2f6 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2220      	movs	r2, #32
 800c2dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f7fe fd3b 	bl	800ad6a <HAL_I2C_SlaveRxCpltCallback>
}
 800c2f4:	e00d      	b.n	800c312 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2220      	movs	r2, #32
 800c2fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2200      	movs	r2, #0
 800c302:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2200      	movs	r2, #0
 800c308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f7fe fd22 	bl	800ad56 <HAL_I2C_SlaveTxCpltCallback>
}
 800c312:	bf00      	nop
 800c314:	3718      	adds	r7, #24
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	ffff0000 	.word	0xffff0000

0800c320 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	4a26      	ldr	r2, [pc, #152]	; (800c3c8 <I2C_ITListenCplt+0xa8>)
 800c32e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2200      	movs	r2, #0
 800c334:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2220      	movs	r2, #32
 800c33a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2200      	movs	r2, #0
 800c342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2200      	movs	r2, #0
 800c34a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	089b      	lsrs	r3, r3, #2
 800c350:	f003 0301 	and.w	r3, r3, #1
 800c354:	2b00      	cmp	r3, #0
 800c356:	d022      	beq.n	800c39e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c362:	b2d2      	uxtb	r2, r2
 800c364:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c36a:	1c5a      	adds	r2, r3, #1
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c374:	2b00      	cmp	r3, #0
 800c376:	d012      	beq.n	800c39e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c37c:	3b01      	subs	r3, #1
 800c37e:	b29a      	uxth	r2, r3
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c388:	b29b      	uxth	r3, r3
 800c38a:	3b01      	subs	r3, #1
 800c38c:	b29a      	uxth	r2, r3
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c396:	f043 0204 	orr.w	r2, r3, #4
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c39e:	f248 0103 	movw	r1, #32771	; 0x8003
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 fbf2 	bl	800cb8c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	2210      	movs	r2, #16
 800c3ae:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f7fe fcee 	bl	800ad9a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800c3be:	bf00      	nop
 800c3c0:	3708      	adds	r7, #8
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	ffff0000 	.word	0xffff0000

0800c3cc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b084      	sub	sp, #16
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3dc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	4a6d      	ldr	r2, [pc, #436]	; (800c5a0 <I2C_ITError+0x1d4>)
 800c3ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	431a      	orrs	r2, r3
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800c3fe:	7bfb      	ldrb	r3, [r7, #15]
 800c400:	2b28      	cmp	r3, #40	; 0x28
 800c402:	d005      	beq.n	800c410 <I2C_ITError+0x44>
 800c404:	7bfb      	ldrb	r3, [r7, #15]
 800c406:	2b29      	cmp	r3, #41	; 0x29
 800c408:	d002      	beq.n	800c410 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800c40a:	7bfb      	ldrb	r3, [r7, #15]
 800c40c:	2b2a      	cmp	r3, #42	; 0x2a
 800c40e:	d10b      	bne.n	800c428 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c410:	2103      	movs	r1, #3
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f000 fbba 	bl	800cb8c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2228      	movs	r2, #40	; 0x28
 800c41c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	4a60      	ldr	r2, [pc, #384]	; (800c5a4 <I2C_ITError+0x1d8>)
 800c424:	635a      	str	r2, [r3, #52]	; 0x34
 800c426:	e030      	b.n	800c48a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c428:	f248 0103 	movw	r1, #32771	; 0x8003
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 fbad 	bl	800cb8c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f000 f8e1 	bl	800c5fa <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	2b60      	cmp	r3, #96	; 0x60
 800c442:	d01f      	beq.n	800c484 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2220      	movs	r2, #32
 800c448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	699b      	ldr	r3, [r3, #24]
 800c452:	f003 0320 	and.w	r3, r3, #32
 800c456:	2b20      	cmp	r3, #32
 800c458:	d114      	bne.n	800c484 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	699b      	ldr	r3, [r3, #24]
 800c460:	f003 0310 	and.w	r3, r3, #16
 800c464:	2b10      	cmp	r3, #16
 800c466:	d109      	bne.n	800c47c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	2210      	movs	r2, #16
 800c46e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c474:	f043 0204 	orr.w	r2, r3, #4
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	2220      	movs	r2, #32
 800c482:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2200      	movs	r2, #0
 800c488:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c48e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c494:	2b00      	cmp	r3, #0
 800c496:	d039      	beq.n	800c50c <I2C_ITError+0x140>
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	2b11      	cmp	r3, #17
 800c49c:	d002      	beq.n	800c4a4 <I2C_ITError+0xd8>
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	2b21      	cmp	r3, #33	; 0x21
 800c4a2:	d133      	bne.n	800c50c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c4b2:	d107      	bne.n	800c4c4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	681a      	ldr	r2, [r3, #0]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c4c2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f7fd f857 	bl	800957c <HAL_DMA_GetState>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	d017      	beq.n	800c504 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4d8:	4a33      	ldr	r2, [pc, #204]	; (800c5a8 <I2C_ITError+0x1dc>)
 800c4da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f7fb fed7 	bl	800829c <HAL_DMA_Abort_IT>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d04d      	beq.n	800c590 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c4fe:	4610      	mov	r0, r2
 800c500:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c502:	e045      	b.n	800c590 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 f851 	bl	800c5ac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c50a:	e041      	b.n	800c590 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c510:	2b00      	cmp	r3, #0
 800c512:	d039      	beq.n	800c588 <I2C_ITError+0x1bc>
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	2b12      	cmp	r3, #18
 800c518:	d002      	beq.n	800c520 <I2C_ITError+0x154>
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	2b22      	cmp	r3, #34	; 0x22
 800c51e:	d133      	bne.n	800c588 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c52a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c52e:	d107      	bne.n	800c540 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	681a      	ldr	r2, [r3, #0]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c53e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c544:	4618      	mov	r0, r3
 800c546:	f7fd f819 	bl	800957c <HAL_DMA_GetState>
 800c54a:	4603      	mov	r3, r0
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d017      	beq.n	800c580 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c554:	4a14      	ldr	r2, [pc, #80]	; (800c5a8 <I2C_ITError+0x1dc>)
 800c556:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c564:	4618      	mov	r0, r3
 800c566:	f7fb fe99 	bl	800829c <HAL_DMA_Abort_IT>
 800c56a:	4603      	mov	r3, r0
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d011      	beq.n	800c594 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c57a:	4610      	mov	r0, r2
 800c57c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c57e:	e009      	b.n	800c594 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 f813 	bl	800c5ac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c586:	e005      	b.n	800c594 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 f80f 	bl	800c5ac <I2C_TreatErrorCallback>
  }
}
 800c58e:	e002      	b.n	800c596 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c590:	bf00      	nop
 800c592:	e000      	b.n	800c596 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c594:	bf00      	nop
}
 800c596:	bf00      	nop
 800c598:	3710      	adds	r7, #16
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	ffff0000 	.word	0xffff0000
 800c5a4:	0800b083 	.word	0x0800b083
 800c5a8:	0800c9e5 	.word	0x0800c9e5

0800c5ac <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	2b60      	cmp	r3, #96	; 0x60
 800c5be:	d10e      	bne.n	800c5de <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2220      	movs	r2, #32
 800c5c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f7fe fc07 	bl	800adea <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c5dc:	e009      	b.n	800c5f2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f7fe fbf2 	bl	800add6 <HAL_I2C_ErrorCallback>
}
 800c5f2:	bf00      	nop
 800c5f4:	3708      	adds	r7, #8
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}

0800c5fa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c5fa:	b480      	push	{r7}
 800c5fc:	b083      	sub	sp, #12
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	699b      	ldr	r3, [r3, #24]
 800c608:	f003 0302 	and.w	r3, r3, #2
 800c60c:	2b02      	cmp	r3, #2
 800c60e:	d103      	bne.n	800c618 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	2200      	movs	r2, #0
 800c616:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	699b      	ldr	r3, [r3, #24]
 800c61e:	f003 0301 	and.w	r3, r3, #1
 800c622:	2b01      	cmp	r3, #1
 800c624:	d007      	beq.n	800c636 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	699a      	ldr	r2, [r3, #24]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f042 0201 	orr.w	r2, r2, #1
 800c634:	619a      	str	r2, [r3, #24]
  }
}
 800c636:	bf00      	nop
 800c638:	370c      	adds	r7, #12
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr

0800c642 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c642:	b580      	push	{r7, lr}
 800c644:	b084      	sub	sp, #16
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c64e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	681a      	ldr	r2, [r3, #0]
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c65e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c664:	b29b      	uxth	r3, r3
 800c666:	2b00      	cmp	r3, #0
 800c668:	d104      	bne.n	800c674 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c66a:	2120      	movs	r1, #32
 800c66c:	68f8      	ldr	r0, [r7, #12]
 800c66e:	f000 fa09 	bl	800ca84 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800c672:	e02d      	b.n	800c6d0 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c678:	68fa      	ldr	r2, [r7, #12]
 800c67a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c67c:	441a      	add	r2, r3
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c686:	b29b      	uxth	r3, r3
 800c688:	2bff      	cmp	r3, #255	; 0xff
 800c68a:	d903      	bls.n	800c694 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	22ff      	movs	r2, #255	; 0xff
 800c690:	851a      	strh	r2, [r3, #40]	; 0x28
 800c692:	e004      	b.n	800c69e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c698:	b29a      	uxth	r2, r3
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	3328      	adds	r3, #40	; 0x28
 800c6ae:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800c6b4:	f7fb f86a 	bl	800778c <HAL_DMA_Start_IT>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d004      	beq.n	800c6c8 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800c6be:	2110      	movs	r1, #16
 800c6c0:	68f8      	ldr	r0, [r7, #12]
 800c6c2:	f7ff fe83 	bl	800c3cc <I2C_ITError>
}
 800c6c6:	e003      	b.n	800c6d0 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800c6c8:	2140      	movs	r1, #64	; 0x40
 800c6ca:	68f8      	ldr	r0, [r7, #12]
 800c6cc:	f000 f9da 	bl	800ca84 <I2C_Enable_IRQ>
}
 800c6d0:	bf00      	nop
 800c6d2:	3710      	adds	r7, #16
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b084      	sub	sp, #16
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6e4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c6f4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d104      	bne.n	800c70a <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c700:	2120      	movs	r1, #32
 800c702:	68f8      	ldr	r0, [r7, #12]
 800c704:	f000 f9be 	bl	800ca84 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800c708:	e02d      	b.n	800c766 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c70e:	68fa      	ldr	r2, [r7, #12]
 800c710:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c712:	441a      	add	r2, r3
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c71c:	b29b      	uxth	r3, r3
 800c71e:	2bff      	cmp	r3, #255	; 0xff
 800c720:	d903      	bls.n	800c72a <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	22ff      	movs	r2, #255	; 0xff
 800c726:	851a      	strh	r2, [r3, #40]	; 0x28
 800c728:	e004      	b.n	800c734 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c72e:	b29a      	uxth	r2, r3
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	3324      	adds	r3, #36	; 0x24
 800c73e:	4619      	mov	r1, r3
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c744:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800c74a:	f7fb f81f 	bl	800778c <HAL_DMA_Start_IT>
 800c74e:	4603      	mov	r3, r0
 800c750:	2b00      	cmp	r3, #0
 800c752:	d004      	beq.n	800c75e <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800c754:	2110      	movs	r1, #16
 800c756:	68f8      	ldr	r0, [r7, #12]
 800c758:	f7ff fe38 	bl	800c3cc <I2C_ITError>
}
 800c75c:	e003      	b.n	800c766 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800c75e:	2140      	movs	r1, #64	; 0x40
 800c760:	68f8      	ldr	r0, [r7, #12]
 800c762:	f000 f98f 	bl	800ca84 <I2C_Enable_IRQ>
}
 800c766:	bf00      	nop
 800c768:	3710      	adds	r7, #16
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
	...

0800c770 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b084      	sub	sp, #16
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800c778:	2300      	movs	r3, #0
 800c77a:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c780:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c786:	2b00      	cmp	r3, #0
 800c788:	d076      	beq.n	800c878 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4a71      	ldr	r2, [pc, #452]	; (800c958 <I2C_DMAError+0x1e8>)
 800c792:	4293      	cmp	r3, r2
 800c794:	d059      	beq.n	800c84a <I2C_DMAError+0xda>
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4a6f      	ldr	r2, [pc, #444]	; (800c95c <I2C_DMAError+0x1ec>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d053      	beq.n	800c84a <I2C_DMAError+0xda>
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a6d      	ldr	r2, [pc, #436]	; (800c960 <I2C_DMAError+0x1f0>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d04d      	beq.n	800c84a <I2C_DMAError+0xda>
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4a6b      	ldr	r2, [pc, #428]	; (800c964 <I2C_DMAError+0x1f4>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d047      	beq.n	800c84a <I2C_DMAError+0xda>
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4a69      	ldr	r2, [pc, #420]	; (800c968 <I2C_DMAError+0x1f8>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d041      	beq.n	800c84a <I2C_DMAError+0xda>
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4a67      	ldr	r2, [pc, #412]	; (800c96c <I2C_DMAError+0x1fc>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d03b      	beq.n	800c84a <I2C_DMAError+0xda>
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4a65      	ldr	r2, [pc, #404]	; (800c970 <I2C_DMAError+0x200>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d035      	beq.n	800c84a <I2C_DMAError+0xda>
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	4a63      	ldr	r2, [pc, #396]	; (800c974 <I2C_DMAError+0x204>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d02f      	beq.n	800c84a <I2C_DMAError+0xda>
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a61      	ldr	r2, [pc, #388]	; (800c978 <I2C_DMAError+0x208>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d029      	beq.n	800c84a <I2C_DMAError+0xda>
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4a5f      	ldr	r2, [pc, #380]	; (800c97c <I2C_DMAError+0x20c>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d023      	beq.n	800c84a <I2C_DMAError+0xda>
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4a5d      	ldr	r2, [pc, #372]	; (800c980 <I2C_DMAError+0x210>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d01d      	beq.n	800c84a <I2C_DMAError+0xda>
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4a5b      	ldr	r2, [pc, #364]	; (800c984 <I2C_DMAError+0x214>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d017      	beq.n	800c84a <I2C_DMAError+0xda>
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a59      	ldr	r2, [pc, #356]	; (800c988 <I2C_DMAError+0x218>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d011      	beq.n	800c84a <I2C_DMAError+0xda>
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4a57      	ldr	r2, [pc, #348]	; (800c98c <I2C_DMAError+0x21c>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d00b      	beq.n	800c84a <I2C_DMAError+0xda>
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4a55      	ldr	r2, [pc, #340]	; (800c990 <I2C_DMAError+0x220>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d005      	beq.n	800c84a <I2C_DMAError+0xda>
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4a53      	ldr	r2, [pc, #332]	; (800c994 <I2C_DMAError+0x224>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d109      	bne.n	800c85e <I2C_DMAError+0xee>
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	685b      	ldr	r3, [r3, #4]
 800c852:	2b00      	cmp	r3, #0
 800c854:	bf0c      	ite	eq
 800c856:	2301      	moveq	r3, #1
 800c858:	2300      	movne	r3, #0
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	e008      	b.n	800c870 <I2C_DMAError+0x100>
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	685b      	ldr	r3, [r3, #4]
 800c866:	2b00      	cmp	r3, #0
 800c868:	bf0c      	ite	eq
 800c86a:	2301      	moveq	r3, #1
 800c86c:	2300      	movne	r3, #0
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	2b00      	cmp	r3, #0
 800c872:	d001      	beq.n	800c878 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800c874:	2301      	movs	r3, #1
 800c876:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	f000 8098 	beq.w	800c9b2 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	4a33      	ldr	r2, [pc, #204]	; (800c958 <I2C_DMAError+0x1e8>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d059      	beq.n	800c942 <I2C_DMAError+0x1d2>
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4a31      	ldr	r2, [pc, #196]	; (800c95c <I2C_DMAError+0x1ec>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d053      	beq.n	800c942 <I2C_DMAError+0x1d2>
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4a2f      	ldr	r2, [pc, #188]	; (800c960 <I2C_DMAError+0x1f0>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d04d      	beq.n	800c942 <I2C_DMAError+0x1d2>
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4a2d      	ldr	r2, [pc, #180]	; (800c964 <I2C_DMAError+0x1f4>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d047      	beq.n	800c942 <I2C_DMAError+0x1d2>
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4a2b      	ldr	r2, [pc, #172]	; (800c968 <I2C_DMAError+0x1f8>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d041      	beq.n	800c942 <I2C_DMAError+0x1d2>
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	4a29      	ldr	r2, [pc, #164]	; (800c96c <I2C_DMAError+0x1fc>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d03b      	beq.n	800c942 <I2C_DMAError+0x1d2>
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	4a27      	ldr	r2, [pc, #156]	; (800c970 <I2C_DMAError+0x200>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d035      	beq.n	800c942 <I2C_DMAError+0x1d2>
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4a25      	ldr	r2, [pc, #148]	; (800c974 <I2C_DMAError+0x204>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d02f      	beq.n	800c942 <I2C_DMAError+0x1d2>
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4a23      	ldr	r2, [pc, #140]	; (800c978 <I2C_DMAError+0x208>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d029      	beq.n	800c942 <I2C_DMAError+0x1d2>
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a21      	ldr	r2, [pc, #132]	; (800c97c <I2C_DMAError+0x20c>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d023      	beq.n	800c942 <I2C_DMAError+0x1d2>
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4a1f      	ldr	r2, [pc, #124]	; (800c980 <I2C_DMAError+0x210>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d01d      	beq.n	800c942 <I2C_DMAError+0x1d2>
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a1d      	ldr	r2, [pc, #116]	; (800c984 <I2C_DMAError+0x214>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d017      	beq.n	800c942 <I2C_DMAError+0x1d2>
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	4a1b      	ldr	r2, [pc, #108]	; (800c988 <I2C_DMAError+0x218>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d011      	beq.n	800c942 <I2C_DMAError+0x1d2>
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	4a19      	ldr	r2, [pc, #100]	; (800c98c <I2C_DMAError+0x21c>)
 800c926:	4293      	cmp	r3, r2
 800c928:	d00b      	beq.n	800c942 <I2C_DMAError+0x1d2>
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4a17      	ldr	r2, [pc, #92]	; (800c990 <I2C_DMAError+0x220>)
 800c932:	4293      	cmp	r3, r2
 800c934:	d005      	beq.n	800c942 <I2C_DMAError+0x1d2>
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4a15      	ldr	r2, [pc, #84]	; (800c994 <I2C_DMAError+0x224>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d12a      	bne.n	800c998 <I2C_DMAError+0x228>
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	bf0c      	ite	eq
 800c94e:	2301      	moveq	r3, #1
 800c950:	2300      	movne	r3, #0
 800c952:	b2db      	uxtb	r3, r3
 800c954:	e029      	b.n	800c9aa <I2C_DMAError+0x23a>
 800c956:	bf00      	nop
 800c958:	40020010 	.word	0x40020010
 800c95c:	40020028 	.word	0x40020028
 800c960:	40020040 	.word	0x40020040
 800c964:	40020058 	.word	0x40020058
 800c968:	40020070 	.word	0x40020070
 800c96c:	40020088 	.word	0x40020088
 800c970:	400200a0 	.word	0x400200a0
 800c974:	400200b8 	.word	0x400200b8
 800c978:	40020410 	.word	0x40020410
 800c97c:	40020428 	.word	0x40020428
 800c980:	40020440 	.word	0x40020440
 800c984:	40020458 	.word	0x40020458
 800c988:	40020470 	.word	0x40020470
 800c98c:	40020488 	.word	0x40020488
 800c990:	400204a0 	.word	0x400204a0
 800c994:	400204b8 	.word	0x400204b8
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	bf0c      	ite	eq
 800c9a4:	2301      	moveq	r3, #1
 800c9a6:	2300      	movne	r3, #0
 800c9a8:	b2db      	uxtb	r3, r3
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d001      	beq.n	800c9b2 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f7fc fdf0 	bl	8009598 <HAL_DMA_GetError>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	2b02      	cmp	r3, #2
 800c9bc:	d00e      	beq.n	800c9dc <I2C_DMAError+0x26c>
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d00b      	beq.n	800c9dc <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	685a      	ldr	r2, [r3, #4]
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c9d2:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800c9d4:	2110      	movs	r1, #16
 800c9d6:	68b8      	ldr	r0, [r7, #8]
 800c9d8:	f7ff fcf8 	bl	800c3cc <I2C_ITError>
  }
}
 800c9dc:	bf00      	nop
 800c9de:	3710      	adds	r7, #16
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9f0:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d003      	beq.n	800ca02 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9fe:	2200      	movs	r2, #0
 800ca00:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d003      	beq.n	800ca12 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca0e:	2200      	movs	r2, #0
 800ca10:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800ca12:	68f8      	ldr	r0, [r7, #12]
 800ca14:	f7ff fdca 	bl	800c5ac <I2C_TreatErrorCallback>
}
 800ca18:	bf00      	nop
 800ca1a:	3710      	adds	r7, #16
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b087      	sub	sp, #28
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	60f8      	str	r0, [r7, #12]
 800ca28:	607b      	str	r3, [r7, #4]
 800ca2a:	460b      	mov	r3, r1
 800ca2c:	817b      	strh	r3, [r7, #10]
 800ca2e:	4613      	mov	r3, r2
 800ca30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ca32:	897b      	ldrh	r3, [r7, #10]
 800ca34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ca38:	7a7b      	ldrb	r3, [r7, #9]
 800ca3a:	041b      	lsls	r3, r3, #16
 800ca3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ca40:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ca46:	6a3b      	ldr	r3, [r7, #32]
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca4e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	685a      	ldr	r2, [r3, #4]
 800ca56:	6a3b      	ldr	r3, [r7, #32]
 800ca58:	0d5b      	lsrs	r3, r3, #21
 800ca5a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ca5e:	4b08      	ldr	r3, [pc, #32]	; (800ca80 <I2C_TransferConfig+0x60>)
 800ca60:	430b      	orrs	r3, r1
 800ca62:	43db      	mvns	r3, r3
 800ca64:	ea02 0103 	and.w	r1, r2, r3
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	697a      	ldr	r2, [r7, #20]
 800ca6e:	430a      	orrs	r2, r1
 800ca70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800ca72:	bf00      	nop
 800ca74:	371c      	adds	r7, #28
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr
 800ca7e:	bf00      	nop
 800ca80:	03ff63ff 	.word	0x03ff63ff

0800ca84 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800ca84:	b480      	push	{r7}
 800ca86:	b085      	sub	sp, #20
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800ca90:	2300      	movs	r3, #0
 800ca92:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca98:	4a39      	ldr	r2, [pc, #228]	; (800cb80 <I2C_Enable_IRQ+0xfc>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d032      	beq.n	800cb04 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800caa2:	4a38      	ldr	r2, [pc, #224]	; (800cb84 <I2C_Enable_IRQ+0x100>)
 800caa4:	4293      	cmp	r3, r2
 800caa6:	d02d      	beq.n	800cb04 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800caac:	4a36      	ldr	r2, [pc, #216]	; (800cb88 <I2C_Enable_IRQ+0x104>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d028      	beq.n	800cb04 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800cab2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	da03      	bge.n	800cac2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800cac0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800cac2:	887b      	ldrh	r3, [r7, #2]
 800cac4:	f003 0301 	and.w	r3, r3, #1
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d003      	beq.n	800cad4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800cad2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800cad4:	887b      	ldrh	r3, [r7, #2]
 800cad6:	f003 0302 	and.w	r3, r3, #2
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d003      	beq.n	800cae6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800cae4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800cae6:	887b      	ldrh	r3, [r7, #2]
 800cae8:	2b10      	cmp	r3, #16
 800caea:	d103      	bne.n	800caf4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800caf2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800caf4:	887b      	ldrh	r3, [r7, #2]
 800caf6:	2b20      	cmp	r3, #32
 800caf8:	d133      	bne.n	800cb62 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f043 0320 	orr.w	r3, r3, #32
 800cb00:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800cb02:	e02e      	b.n	800cb62 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800cb04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	da03      	bge.n	800cb14 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800cb12:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800cb14:	887b      	ldrh	r3, [r7, #2]
 800cb16:	f003 0301 	and.w	r3, r3, #1
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d003      	beq.n	800cb26 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800cb24:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800cb26:	887b      	ldrh	r3, [r7, #2]
 800cb28:	f003 0302 	and.w	r3, r3, #2
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d003      	beq.n	800cb38 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800cb36:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800cb38:	887b      	ldrh	r3, [r7, #2]
 800cb3a:	2b10      	cmp	r3, #16
 800cb3c:	d103      	bne.n	800cb46 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800cb44:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800cb46:	887b      	ldrh	r3, [r7, #2]
 800cb48:	2b20      	cmp	r3, #32
 800cb4a:	d103      	bne.n	800cb54 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800cb52:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800cb54:	887b      	ldrh	r3, [r7, #2]
 800cb56:	2b40      	cmp	r3, #64	; 0x40
 800cb58:	d103      	bne.n	800cb62 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb60:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	6819      	ldr	r1, [r3, #0]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	68fa      	ldr	r2, [r7, #12]
 800cb6e:	430a      	orrs	r2, r1
 800cb70:	601a      	str	r2, [r3, #0]
}
 800cb72:	bf00      	nop
 800cb74:	3714      	adds	r7, #20
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	0800b28b 	.word	0x0800b28b
 800cb84:	0800b6d1 	.word	0x0800b6d1
 800cb88:	0800b471 	.word	0x0800b471

0800cb8c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b085      	sub	sp, #20
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	460b      	mov	r3, r1
 800cb96:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800cb9c:	887b      	ldrh	r3, [r7, #2]
 800cb9e:	f003 0301 	and.w	r3, r3, #1
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d00f      	beq.n	800cbc6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800cbac:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cbba:	2b28      	cmp	r3, #40	; 0x28
 800cbbc:	d003      	beq.n	800cbc6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800cbc4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800cbc6:	887b      	ldrh	r3, [r7, #2]
 800cbc8:	f003 0302 	and.w	r3, r3, #2
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d00f      	beq.n	800cbf0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800cbd6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cbe4:	2b28      	cmp	r3, #40	; 0x28
 800cbe6:	d003      	beq.n	800cbf0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800cbee:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800cbf0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	da03      	bge.n	800cc00 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800cbfe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800cc00:	887b      	ldrh	r3, [r7, #2]
 800cc02:	2b10      	cmp	r3, #16
 800cc04:	d103      	bne.n	800cc0e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800cc0c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800cc0e:	887b      	ldrh	r3, [r7, #2]
 800cc10:	2b20      	cmp	r3, #32
 800cc12:	d103      	bne.n	800cc1c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	f043 0320 	orr.w	r3, r3, #32
 800cc1a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800cc1c:	887b      	ldrh	r3, [r7, #2]
 800cc1e:	2b40      	cmp	r3, #64	; 0x40
 800cc20:	d103      	bne.n	800cc2a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc28:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	6819      	ldr	r1, [r3, #0]
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	43da      	mvns	r2, r3
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	400a      	ands	r2, r1
 800cc3a:	601a      	str	r2, [r3, #0]
}
 800cc3c:	bf00      	nop
 800cc3e:	3714      	adds	r7, #20
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr

0800cc48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b083      	sub	sp, #12
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	2b20      	cmp	r3, #32
 800cc5c:	d138      	bne.n	800ccd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	d101      	bne.n	800cc6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800cc68:	2302      	movs	r3, #2
 800cc6a:	e032      	b.n	800ccd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2201      	movs	r2, #1
 800cc70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2224      	movs	r2, #36	; 0x24
 800cc78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	681a      	ldr	r2, [r3, #0]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f022 0201 	bic.w	r2, r2, #1
 800cc8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	681a      	ldr	r2, [r3, #0]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cc9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	6819      	ldr	r1, [r3, #0]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	683a      	ldr	r2, [r7, #0]
 800cca8:	430a      	orrs	r2, r1
 800ccaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	681a      	ldr	r2, [r3, #0]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f042 0201 	orr.w	r2, r2, #1
 800ccba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2220      	movs	r2, #32
 800ccc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cccc:	2300      	movs	r3, #0
 800ccce:	e000      	b.n	800ccd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ccd0:	2302      	movs	r3, #2
  }
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	370c      	adds	r7, #12
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr

0800ccde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ccde:	b480      	push	{r7}
 800cce0:	b085      	sub	sp, #20
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
 800cce6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	2b20      	cmp	r3, #32
 800ccf2:	d139      	bne.n	800cd68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d101      	bne.n	800cd02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ccfe:	2302      	movs	r3, #2
 800cd00:	e033      	b.n	800cd6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2201      	movs	r2, #1
 800cd06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2224      	movs	r2, #36	; 0x24
 800cd0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	681a      	ldr	r2, [r3, #0]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f022 0201 	bic.w	r2, r2, #1
 800cd20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800cd30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	021b      	lsls	r3, r3, #8
 800cd36:	68fa      	ldr	r2, [r7, #12]
 800cd38:	4313      	orrs	r3, r2
 800cd3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	68fa      	ldr	r2, [r7, #12]
 800cd42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	681a      	ldr	r2, [r3, #0]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f042 0201 	orr.w	r2, r2, #1
 800cd52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2220      	movs	r2, #32
 800cd58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cd64:	2300      	movs	r3, #0
 800cd66:	e000      	b.n	800cd6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800cd68:	2302      	movs	r3, #2
  }
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3714      	adds	r7, #20
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr
	...

0800cd78 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b085      	sub	sp, #20
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cd80:	4b0d      	ldr	r3, [pc, #52]	; (800cdb8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800cd82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cd86:	4a0c      	ldr	r2, [pc, #48]	; (800cdb8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800cd88:	f043 0302 	orr.w	r3, r3, #2
 800cd8c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800cd90:	4b09      	ldr	r3, [pc, #36]	; (800cdb8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800cd92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cd96:	f003 0302 	and.w	r3, r3, #2
 800cd9a:	60fb      	str	r3, [r7, #12]
 800cd9c:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800cd9e:	4b07      	ldr	r3, [pc, #28]	; (800cdbc <HAL_I2CEx_EnableFastModePlus+0x44>)
 800cda0:	685a      	ldr	r2, [r3, #4]
 800cda2:	4906      	ldr	r1, [pc, #24]	; (800cdbc <HAL_I2CEx_EnableFastModePlus+0x44>)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	4313      	orrs	r3, r2
 800cda8:	604b      	str	r3, [r1, #4]
}
 800cdaa:	bf00      	nop
 800cdac:	3714      	adds	r7, #20
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb4:	4770      	bx	lr
 800cdb6:	bf00      	nop
 800cdb8:	58024400 	.word	0x58024400
 800cdbc:	58000400 	.word	0x58000400

0800cdc0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b083      	sub	sp, #12
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800cdd0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cdd2:	2300      	movs	r3, #0
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	370c      	adds	r7, #12
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdde:	4770      	bx	lr

0800cde0 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800cde0:	b480      	push	{r7}
 800cde2:	b083      	sub	sp, #12
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	460b      	mov	r3, r1
 800cdea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800cdec:	4b18      	ldr	r3, [pc, #96]	; (800ce50 <HAL_PWR_EnterSTOPMode+0x70>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f023 0201 	bic.w	r2, r3, #1
 800cdf4:	4916      	ldr	r1, [pc, #88]	; (800ce50 <HAL_PWR_EnterSTOPMode+0x70>)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	4313      	orrs	r3, r2
 800cdfa:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800cdfc:	4b14      	ldr	r3, [pc, #80]	; (800ce50 <HAL_PWR_EnterSTOPMode+0x70>)
 800cdfe:	691b      	ldr	r3, [r3, #16]
 800ce00:	4a13      	ldr	r2, [pc, #76]	; (800ce50 <HAL_PWR_EnterSTOPMode+0x70>)
 800ce02:	f023 0305 	bic.w	r3, r3, #5
 800ce06:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800ce08:	4b11      	ldr	r3, [pc, #68]	; (800ce50 <HAL_PWR_EnterSTOPMode+0x70>)
 800ce0a:	691b      	ldr	r3, [r3, #16]
 800ce0c:	4a10      	ldr	r2, [pc, #64]	; (800ce50 <HAL_PWR_EnterSTOPMode+0x70>)
 800ce0e:	f023 0302 	bic.w	r3, r3, #2
 800ce12:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800ce14:	4b0f      	ldr	r3, [pc, #60]	; (800ce54 <HAL_PWR_EnterSTOPMode+0x74>)
 800ce16:	691b      	ldr	r3, [r3, #16]
 800ce18:	4a0e      	ldr	r2, [pc, #56]	; (800ce54 <HAL_PWR_EnterSTOPMode+0x74>)
 800ce1a:	f043 0304 	orr.w	r3, r3, #4
 800ce1e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800ce20:	f3bf 8f4f 	dsb	sy
}
 800ce24:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ce26:	f3bf 8f6f 	isb	sy
}
 800ce2a:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800ce2c:	78fb      	ldrb	r3, [r7, #3]
 800ce2e:	2b01      	cmp	r3, #1
 800ce30:	d101      	bne.n	800ce36 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800ce32:	bf30      	wfi
 800ce34:	e000      	b.n	800ce38 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800ce36:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800ce38:	4b06      	ldr	r3, [pc, #24]	; (800ce54 <HAL_PWR_EnterSTOPMode+0x74>)
 800ce3a:	691b      	ldr	r3, [r3, #16]
 800ce3c:	4a05      	ldr	r2, [pc, #20]	; (800ce54 <HAL_PWR_EnterSTOPMode+0x74>)
 800ce3e:	f023 0304 	bic.w	r3, r3, #4
 800ce42:	6113      	str	r3, [r2, #16]
}
 800ce44:	bf00      	nop
 800ce46:	370c      	adds	r7, #12
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr
 800ce50:	58024800 	.word	0x58024800
 800ce54:	e000ed00 	.word	0xe000ed00

0800ce58 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b084      	sub	sp, #16
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800ce60:	4b19      	ldr	r3, [pc, #100]	; (800cec8 <HAL_PWREx_ConfigSupply+0x70>)
 800ce62:	68db      	ldr	r3, [r3, #12]
 800ce64:	f003 0304 	and.w	r3, r3, #4
 800ce68:	2b04      	cmp	r3, #4
 800ce6a:	d00a      	beq.n	800ce82 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800ce6c:	4b16      	ldr	r3, [pc, #88]	; (800cec8 <HAL_PWREx_ConfigSupply+0x70>)
 800ce6e:	68db      	ldr	r3, [r3, #12]
 800ce70:	f003 0307 	and.w	r3, r3, #7
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d001      	beq.n	800ce7e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	e01f      	b.n	800cebe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	e01d      	b.n	800cebe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800ce82:	4b11      	ldr	r3, [pc, #68]	; (800cec8 <HAL_PWREx_ConfigSupply+0x70>)
 800ce84:	68db      	ldr	r3, [r3, #12]
 800ce86:	f023 0207 	bic.w	r2, r3, #7
 800ce8a:	490f      	ldr	r1, [pc, #60]	; (800cec8 <HAL_PWREx_ConfigSupply+0x70>)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	4313      	orrs	r3, r2
 800ce90:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800ce92:	f7f7 ff7f 	bl	8004d94 <HAL_GetTick>
 800ce96:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ce98:	e009      	b.n	800ceae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ce9a:	f7f7 ff7b 	bl	8004d94 <HAL_GetTick>
 800ce9e:	4602      	mov	r2, r0
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	1ad3      	subs	r3, r2, r3
 800cea4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cea8:	d901      	bls.n	800ceae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	e007      	b.n	800cebe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ceae:	4b06      	ldr	r3, [pc, #24]	; (800cec8 <HAL_PWREx_ConfigSupply+0x70>)
 800ceb0:	685b      	ldr	r3, [r3, #4]
 800ceb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ceb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ceba:	d1ee      	bne.n	800ce9a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800cebc:	2300      	movs	r3, #0
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3710      	adds	r7, #16
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	58024800 	.word	0x58024800

0800cecc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b08c      	sub	sp, #48	; 0x30
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d102      	bne.n	800cee0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800ceda:	2301      	movs	r3, #1
 800cedc:	f000 bc48 	b.w	800d770 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f003 0301 	and.w	r3, r3, #1
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	f000 8088 	beq.w	800cffe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ceee:	4b99      	ldr	r3, [pc, #612]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800cef0:	691b      	ldr	r3, [r3, #16]
 800cef2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cef8:	4b96      	ldr	r3, [pc, #600]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800cefa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cefc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800cefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf00:	2b10      	cmp	r3, #16
 800cf02:	d007      	beq.n	800cf14 <HAL_RCC_OscConfig+0x48>
 800cf04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf06:	2b18      	cmp	r3, #24
 800cf08:	d111      	bne.n	800cf2e <HAL_RCC_OscConfig+0x62>
 800cf0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf0c:	f003 0303 	and.w	r3, r3, #3
 800cf10:	2b02      	cmp	r3, #2
 800cf12:	d10c      	bne.n	800cf2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cf14:	4b8f      	ldr	r3, [pc, #572]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d06d      	beq.n	800cffc <HAL_RCC_OscConfig+0x130>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d169      	bne.n	800cffc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800cf28:	2301      	movs	r3, #1
 800cf2a:	f000 bc21 	b.w	800d770 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf36:	d106      	bne.n	800cf46 <HAL_RCC_OscConfig+0x7a>
 800cf38:	4b86      	ldr	r3, [pc, #536]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a85      	ldr	r2, [pc, #532]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800cf3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf42:	6013      	str	r3, [r2, #0]
 800cf44:	e02e      	b.n	800cfa4 <HAL_RCC_OscConfig+0xd8>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	685b      	ldr	r3, [r3, #4]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d10c      	bne.n	800cf68 <HAL_RCC_OscConfig+0x9c>
 800cf4e:	4b81      	ldr	r3, [pc, #516]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	4a80      	ldr	r2, [pc, #512]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800cf54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf58:	6013      	str	r3, [r2, #0]
 800cf5a:	4b7e      	ldr	r3, [pc, #504]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	4a7d      	ldr	r2, [pc, #500]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800cf60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cf64:	6013      	str	r3, [r2, #0]
 800cf66:	e01d      	b.n	800cfa4 <HAL_RCC_OscConfig+0xd8>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	685b      	ldr	r3, [r3, #4]
 800cf6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cf70:	d10c      	bne.n	800cf8c <HAL_RCC_OscConfig+0xc0>
 800cf72:	4b78      	ldr	r3, [pc, #480]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	4a77      	ldr	r2, [pc, #476]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800cf78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cf7c:	6013      	str	r3, [r2, #0]
 800cf7e:	4b75      	ldr	r3, [pc, #468]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4a74      	ldr	r2, [pc, #464]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800cf84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf88:	6013      	str	r3, [r2, #0]
 800cf8a:	e00b      	b.n	800cfa4 <HAL_RCC_OscConfig+0xd8>
 800cf8c:	4b71      	ldr	r3, [pc, #452]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	4a70      	ldr	r2, [pc, #448]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800cf92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf96:	6013      	str	r3, [r2, #0]
 800cf98:	4b6e      	ldr	r3, [pc, #440]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	4a6d      	ldr	r2, [pc, #436]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800cf9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cfa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	685b      	ldr	r3, [r3, #4]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d013      	beq.n	800cfd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cfac:	f7f7 fef2 	bl	8004d94 <HAL_GetTick>
 800cfb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cfb2:	e008      	b.n	800cfc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cfb4:	f7f7 feee 	bl	8004d94 <HAL_GetTick>
 800cfb8:	4602      	mov	r2, r0
 800cfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfbc:	1ad3      	subs	r3, r2, r3
 800cfbe:	2b64      	cmp	r3, #100	; 0x64
 800cfc0:	d901      	bls.n	800cfc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cfc2:	2303      	movs	r3, #3
 800cfc4:	e3d4      	b.n	800d770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cfc6:	4b63      	ldr	r3, [pc, #396]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d0f0      	beq.n	800cfb4 <HAL_RCC_OscConfig+0xe8>
 800cfd2:	e014      	b.n	800cffe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cfd4:	f7f7 fede 	bl	8004d94 <HAL_GetTick>
 800cfd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cfda:	e008      	b.n	800cfee <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cfdc:	f7f7 feda 	bl	8004d94 <HAL_GetTick>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe4:	1ad3      	subs	r3, r2, r3
 800cfe6:	2b64      	cmp	r3, #100	; 0x64
 800cfe8:	d901      	bls.n	800cfee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800cfea:	2303      	movs	r3, #3
 800cfec:	e3c0      	b.n	800d770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cfee:	4b59      	ldr	r3, [pc, #356]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d1f0      	bne.n	800cfdc <HAL_RCC_OscConfig+0x110>
 800cffa:	e000      	b.n	800cffe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f003 0302 	and.w	r3, r3, #2
 800d006:	2b00      	cmp	r3, #0
 800d008:	f000 80ca 	beq.w	800d1a0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d00c:	4b51      	ldr	r3, [pc, #324]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800d00e:	691b      	ldr	r3, [r3, #16]
 800d010:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d014:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d016:	4b4f      	ldr	r3, [pc, #316]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800d018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d01a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d01c:	6a3b      	ldr	r3, [r7, #32]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d007      	beq.n	800d032 <HAL_RCC_OscConfig+0x166>
 800d022:	6a3b      	ldr	r3, [r7, #32]
 800d024:	2b18      	cmp	r3, #24
 800d026:	d156      	bne.n	800d0d6 <HAL_RCC_OscConfig+0x20a>
 800d028:	69fb      	ldr	r3, [r7, #28]
 800d02a:	f003 0303 	and.w	r3, r3, #3
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d151      	bne.n	800d0d6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d032:	4b48      	ldr	r3, [pc, #288]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f003 0304 	and.w	r3, r3, #4
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d005      	beq.n	800d04a <HAL_RCC_OscConfig+0x17e>
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	68db      	ldr	r3, [r3, #12]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d101      	bne.n	800d04a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800d046:	2301      	movs	r3, #1
 800d048:	e392      	b.n	800d770 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d04a:	4b42      	ldr	r3, [pc, #264]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f023 0219 	bic.w	r2, r3, #25
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	68db      	ldr	r3, [r3, #12]
 800d056:	493f      	ldr	r1, [pc, #252]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800d058:	4313      	orrs	r3, r2
 800d05a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d05c:	f7f7 fe9a 	bl	8004d94 <HAL_GetTick>
 800d060:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d062:	e008      	b.n	800d076 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d064:	f7f7 fe96 	bl	8004d94 <HAL_GetTick>
 800d068:	4602      	mov	r2, r0
 800d06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06c:	1ad3      	subs	r3, r2, r3
 800d06e:	2b02      	cmp	r3, #2
 800d070:	d901      	bls.n	800d076 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d072:	2303      	movs	r3, #3
 800d074:	e37c      	b.n	800d770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d076:	4b37      	ldr	r3, [pc, #220]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	f003 0304 	and.w	r3, r3, #4
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d0f0      	beq.n	800d064 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d082:	f7f7 fe93 	bl	8004dac <HAL_GetREVID>
 800d086:	4603      	mov	r3, r0
 800d088:	f241 0203 	movw	r2, #4099	; 0x1003
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d817      	bhi.n	800d0c0 <HAL_RCC_OscConfig+0x1f4>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	691b      	ldr	r3, [r3, #16]
 800d094:	2b40      	cmp	r3, #64	; 0x40
 800d096:	d108      	bne.n	800d0aa <HAL_RCC_OscConfig+0x1de>
 800d098:	4b2e      	ldr	r3, [pc, #184]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800d09a:	685b      	ldr	r3, [r3, #4]
 800d09c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800d0a0:	4a2c      	ldr	r2, [pc, #176]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800d0a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d0a6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d0a8:	e07a      	b.n	800d1a0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d0aa:	4b2a      	ldr	r3, [pc, #168]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	691b      	ldr	r3, [r3, #16]
 800d0b6:	031b      	lsls	r3, r3, #12
 800d0b8:	4926      	ldr	r1, [pc, #152]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800d0ba:	4313      	orrs	r3, r2
 800d0bc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d0be:	e06f      	b.n	800d1a0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d0c0:	4b24      	ldr	r3, [pc, #144]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800d0c2:	685b      	ldr	r3, [r3, #4]
 800d0c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	691b      	ldr	r3, [r3, #16]
 800d0cc:	061b      	lsls	r3, r3, #24
 800d0ce:	4921      	ldr	r1, [pc, #132]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d0d4:	e064      	b.n	800d1a0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	68db      	ldr	r3, [r3, #12]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d047      	beq.n	800d16e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d0de:	4b1d      	ldr	r3, [pc, #116]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f023 0219 	bic.w	r2, r3, #25
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	68db      	ldr	r3, [r3, #12]
 800d0ea:	491a      	ldr	r1, [pc, #104]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800d0ec:	4313      	orrs	r3, r2
 800d0ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0f0:	f7f7 fe50 	bl	8004d94 <HAL_GetTick>
 800d0f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d0f6:	e008      	b.n	800d10a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d0f8:	f7f7 fe4c 	bl	8004d94 <HAL_GetTick>
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d100:	1ad3      	subs	r3, r2, r3
 800d102:	2b02      	cmp	r3, #2
 800d104:	d901      	bls.n	800d10a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800d106:	2303      	movs	r3, #3
 800d108:	e332      	b.n	800d770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d10a:	4b12      	ldr	r3, [pc, #72]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f003 0304 	and.w	r3, r3, #4
 800d112:	2b00      	cmp	r3, #0
 800d114:	d0f0      	beq.n	800d0f8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d116:	f7f7 fe49 	bl	8004dac <HAL_GetREVID>
 800d11a:	4603      	mov	r3, r0
 800d11c:	f241 0203 	movw	r2, #4099	; 0x1003
 800d120:	4293      	cmp	r3, r2
 800d122:	d819      	bhi.n	800d158 <HAL_RCC_OscConfig+0x28c>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	691b      	ldr	r3, [r3, #16]
 800d128:	2b40      	cmp	r3, #64	; 0x40
 800d12a:	d108      	bne.n	800d13e <HAL_RCC_OscConfig+0x272>
 800d12c:	4b09      	ldr	r3, [pc, #36]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800d134:	4a07      	ldr	r2, [pc, #28]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800d136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d13a:	6053      	str	r3, [r2, #4]
 800d13c:	e030      	b.n	800d1a0 <HAL_RCC_OscConfig+0x2d4>
 800d13e:	4b05      	ldr	r3, [pc, #20]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800d140:	685b      	ldr	r3, [r3, #4]
 800d142:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	691b      	ldr	r3, [r3, #16]
 800d14a:	031b      	lsls	r3, r3, #12
 800d14c:	4901      	ldr	r1, [pc, #4]	; (800d154 <HAL_RCC_OscConfig+0x288>)
 800d14e:	4313      	orrs	r3, r2
 800d150:	604b      	str	r3, [r1, #4]
 800d152:	e025      	b.n	800d1a0 <HAL_RCC_OscConfig+0x2d4>
 800d154:	58024400 	.word	0x58024400
 800d158:	4b9a      	ldr	r3, [pc, #616]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d15a:	685b      	ldr	r3, [r3, #4]
 800d15c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	691b      	ldr	r3, [r3, #16]
 800d164:	061b      	lsls	r3, r3, #24
 800d166:	4997      	ldr	r1, [pc, #604]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d168:	4313      	orrs	r3, r2
 800d16a:	604b      	str	r3, [r1, #4]
 800d16c:	e018      	b.n	800d1a0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d16e:	4b95      	ldr	r3, [pc, #596]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	4a94      	ldr	r2, [pc, #592]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d174:	f023 0301 	bic.w	r3, r3, #1
 800d178:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d17a:	f7f7 fe0b 	bl	8004d94 <HAL_GetTick>
 800d17e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d180:	e008      	b.n	800d194 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d182:	f7f7 fe07 	bl	8004d94 <HAL_GetTick>
 800d186:	4602      	mov	r2, r0
 800d188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18a:	1ad3      	subs	r3, r2, r3
 800d18c:	2b02      	cmp	r3, #2
 800d18e:	d901      	bls.n	800d194 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800d190:	2303      	movs	r3, #3
 800d192:	e2ed      	b.n	800d770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d194:	4b8b      	ldr	r3, [pc, #556]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f003 0304 	and.w	r3, r3, #4
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d1f0      	bne.n	800d182 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f003 0310 	and.w	r3, r3, #16
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	f000 80a9 	beq.w	800d300 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d1ae:	4b85      	ldr	r3, [pc, #532]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d1b0:	691b      	ldr	r3, [r3, #16]
 800d1b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d1b6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d1b8:	4b82      	ldr	r3, [pc, #520]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d1ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1bc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d1be:	69bb      	ldr	r3, [r7, #24]
 800d1c0:	2b08      	cmp	r3, #8
 800d1c2:	d007      	beq.n	800d1d4 <HAL_RCC_OscConfig+0x308>
 800d1c4:	69bb      	ldr	r3, [r7, #24]
 800d1c6:	2b18      	cmp	r3, #24
 800d1c8:	d13a      	bne.n	800d240 <HAL_RCC_OscConfig+0x374>
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	f003 0303 	and.w	r3, r3, #3
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d135      	bne.n	800d240 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d1d4:	4b7b      	ldr	r3, [pc, #492]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d005      	beq.n	800d1ec <HAL_RCC_OscConfig+0x320>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	69db      	ldr	r3, [r3, #28]
 800d1e4:	2b80      	cmp	r3, #128	; 0x80
 800d1e6:	d001      	beq.n	800d1ec <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	e2c1      	b.n	800d770 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d1ec:	f7f7 fdde 	bl	8004dac <HAL_GetREVID>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	f241 0203 	movw	r2, #4099	; 0x1003
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d817      	bhi.n	800d22a <HAL_RCC_OscConfig+0x35e>
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6a1b      	ldr	r3, [r3, #32]
 800d1fe:	2b20      	cmp	r3, #32
 800d200:	d108      	bne.n	800d214 <HAL_RCC_OscConfig+0x348>
 800d202:	4b70      	ldr	r3, [pc, #448]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d204:	685b      	ldr	r3, [r3, #4]
 800d206:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800d20a:	4a6e      	ldr	r2, [pc, #440]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d20c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d210:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d212:	e075      	b.n	800d300 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d214:	4b6b      	ldr	r3, [pc, #428]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d216:	685b      	ldr	r3, [r3, #4]
 800d218:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6a1b      	ldr	r3, [r3, #32]
 800d220:	069b      	lsls	r3, r3, #26
 800d222:	4968      	ldr	r1, [pc, #416]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d224:	4313      	orrs	r3, r2
 800d226:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d228:	e06a      	b.n	800d300 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d22a:	4b66      	ldr	r3, [pc, #408]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d22c:	68db      	ldr	r3, [r3, #12]
 800d22e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6a1b      	ldr	r3, [r3, #32]
 800d236:	061b      	lsls	r3, r3, #24
 800d238:	4962      	ldr	r1, [pc, #392]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d23a:	4313      	orrs	r3, r2
 800d23c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d23e:	e05f      	b.n	800d300 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	69db      	ldr	r3, [r3, #28]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d042      	beq.n	800d2ce <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800d248:	4b5e      	ldr	r3, [pc, #376]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	4a5d      	ldr	r2, [pc, #372]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d24e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d254:	f7f7 fd9e 	bl	8004d94 <HAL_GetTick>
 800d258:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d25a:	e008      	b.n	800d26e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d25c:	f7f7 fd9a 	bl	8004d94 <HAL_GetTick>
 800d260:	4602      	mov	r2, r0
 800d262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d264:	1ad3      	subs	r3, r2, r3
 800d266:	2b02      	cmp	r3, #2
 800d268:	d901      	bls.n	800d26e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800d26a:	2303      	movs	r3, #3
 800d26c:	e280      	b.n	800d770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d26e:	4b55      	ldr	r3, [pc, #340]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d276:	2b00      	cmp	r3, #0
 800d278:	d0f0      	beq.n	800d25c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d27a:	f7f7 fd97 	bl	8004dac <HAL_GetREVID>
 800d27e:	4603      	mov	r3, r0
 800d280:	f241 0203 	movw	r2, #4099	; 0x1003
 800d284:	4293      	cmp	r3, r2
 800d286:	d817      	bhi.n	800d2b8 <HAL_RCC_OscConfig+0x3ec>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6a1b      	ldr	r3, [r3, #32]
 800d28c:	2b20      	cmp	r3, #32
 800d28e:	d108      	bne.n	800d2a2 <HAL_RCC_OscConfig+0x3d6>
 800d290:	4b4c      	ldr	r3, [pc, #304]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800d298:	4a4a      	ldr	r2, [pc, #296]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d29a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d29e:	6053      	str	r3, [r2, #4]
 800d2a0:	e02e      	b.n	800d300 <HAL_RCC_OscConfig+0x434>
 800d2a2:	4b48      	ldr	r3, [pc, #288]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6a1b      	ldr	r3, [r3, #32]
 800d2ae:	069b      	lsls	r3, r3, #26
 800d2b0:	4944      	ldr	r1, [pc, #272]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	604b      	str	r3, [r1, #4]
 800d2b6:	e023      	b.n	800d300 <HAL_RCC_OscConfig+0x434>
 800d2b8:	4b42      	ldr	r3, [pc, #264]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d2ba:	68db      	ldr	r3, [r3, #12]
 800d2bc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6a1b      	ldr	r3, [r3, #32]
 800d2c4:	061b      	lsls	r3, r3, #24
 800d2c6:	493f      	ldr	r1, [pc, #252]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d2c8:	4313      	orrs	r3, r2
 800d2ca:	60cb      	str	r3, [r1, #12]
 800d2cc:	e018      	b.n	800d300 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800d2ce:	4b3d      	ldr	r3, [pc, #244]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	4a3c      	ldr	r2, [pc, #240]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d2d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2da:	f7f7 fd5b 	bl	8004d94 <HAL_GetTick>
 800d2de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d2e0:	e008      	b.n	800d2f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d2e2:	f7f7 fd57 	bl	8004d94 <HAL_GetTick>
 800d2e6:	4602      	mov	r2, r0
 800d2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ea:	1ad3      	subs	r3, r2, r3
 800d2ec:	2b02      	cmp	r3, #2
 800d2ee:	d901      	bls.n	800d2f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800d2f0:	2303      	movs	r3, #3
 800d2f2:	e23d      	b.n	800d770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d2f4:	4b33      	ldr	r3, [pc, #204]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d1f0      	bne.n	800d2e2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f003 0308 	and.w	r3, r3, #8
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d036      	beq.n	800d37a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	695b      	ldr	r3, [r3, #20]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d019      	beq.n	800d348 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d314:	4b2b      	ldr	r3, [pc, #172]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d318:	4a2a      	ldr	r2, [pc, #168]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d31a:	f043 0301 	orr.w	r3, r3, #1
 800d31e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d320:	f7f7 fd38 	bl	8004d94 <HAL_GetTick>
 800d324:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d326:	e008      	b.n	800d33a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d328:	f7f7 fd34 	bl	8004d94 <HAL_GetTick>
 800d32c:	4602      	mov	r2, r0
 800d32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d330:	1ad3      	subs	r3, r2, r3
 800d332:	2b02      	cmp	r3, #2
 800d334:	d901      	bls.n	800d33a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800d336:	2303      	movs	r3, #3
 800d338:	e21a      	b.n	800d770 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d33a:	4b22      	ldr	r3, [pc, #136]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d33c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d33e:	f003 0302 	and.w	r3, r3, #2
 800d342:	2b00      	cmp	r3, #0
 800d344:	d0f0      	beq.n	800d328 <HAL_RCC_OscConfig+0x45c>
 800d346:	e018      	b.n	800d37a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d348:	4b1e      	ldr	r3, [pc, #120]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d34a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d34c:	4a1d      	ldr	r2, [pc, #116]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d34e:	f023 0301 	bic.w	r3, r3, #1
 800d352:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d354:	f7f7 fd1e 	bl	8004d94 <HAL_GetTick>
 800d358:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d35a:	e008      	b.n	800d36e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d35c:	f7f7 fd1a 	bl	8004d94 <HAL_GetTick>
 800d360:	4602      	mov	r2, r0
 800d362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d364:	1ad3      	subs	r3, r2, r3
 800d366:	2b02      	cmp	r3, #2
 800d368:	d901      	bls.n	800d36e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800d36a:	2303      	movs	r3, #3
 800d36c:	e200      	b.n	800d770 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d36e:	4b15      	ldr	r3, [pc, #84]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d372:	f003 0302 	and.w	r3, r3, #2
 800d376:	2b00      	cmp	r3, #0
 800d378:	d1f0      	bne.n	800d35c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f003 0320 	and.w	r3, r3, #32
 800d382:	2b00      	cmp	r3, #0
 800d384:	d039      	beq.n	800d3fa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	699b      	ldr	r3, [r3, #24]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d01c      	beq.n	800d3c8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d38e:	4b0d      	ldr	r3, [pc, #52]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	4a0c      	ldr	r2, [pc, #48]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d394:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d398:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d39a:	f7f7 fcfb 	bl	8004d94 <HAL_GetTick>
 800d39e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d3a0:	e008      	b.n	800d3b4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d3a2:	f7f7 fcf7 	bl	8004d94 <HAL_GetTick>
 800d3a6:	4602      	mov	r2, r0
 800d3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3aa:	1ad3      	subs	r3, r2, r3
 800d3ac:	2b02      	cmp	r3, #2
 800d3ae:	d901      	bls.n	800d3b4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800d3b0:	2303      	movs	r3, #3
 800d3b2:	e1dd      	b.n	800d770 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d3b4:	4b03      	ldr	r3, [pc, #12]	; (800d3c4 <HAL_RCC_OscConfig+0x4f8>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d0f0      	beq.n	800d3a2 <HAL_RCC_OscConfig+0x4d6>
 800d3c0:	e01b      	b.n	800d3fa <HAL_RCC_OscConfig+0x52e>
 800d3c2:	bf00      	nop
 800d3c4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d3c8:	4b9b      	ldr	r3, [pc, #620]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4a9a      	ldr	r2, [pc, #616]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d3ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d3d4:	f7f7 fcde 	bl	8004d94 <HAL_GetTick>
 800d3d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d3da:	e008      	b.n	800d3ee <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d3dc:	f7f7 fcda 	bl	8004d94 <HAL_GetTick>
 800d3e0:	4602      	mov	r2, r0
 800d3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e4:	1ad3      	subs	r3, r2, r3
 800d3e6:	2b02      	cmp	r3, #2
 800d3e8:	d901      	bls.n	800d3ee <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800d3ea:	2303      	movs	r3, #3
 800d3ec:	e1c0      	b.n	800d770 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d3ee:	4b92      	ldr	r3, [pc, #584]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d1f0      	bne.n	800d3dc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	f003 0304 	and.w	r3, r3, #4
 800d402:	2b00      	cmp	r3, #0
 800d404:	f000 8081 	beq.w	800d50a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d408:	4b8c      	ldr	r3, [pc, #560]	; (800d63c <HAL_RCC_OscConfig+0x770>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4a8b      	ldr	r2, [pc, #556]	; (800d63c <HAL_RCC_OscConfig+0x770>)
 800d40e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d412:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d414:	f7f7 fcbe 	bl	8004d94 <HAL_GetTick>
 800d418:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d41a:	e008      	b.n	800d42e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d41c:	f7f7 fcba 	bl	8004d94 <HAL_GetTick>
 800d420:	4602      	mov	r2, r0
 800d422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d424:	1ad3      	subs	r3, r2, r3
 800d426:	2b64      	cmp	r3, #100	; 0x64
 800d428:	d901      	bls.n	800d42e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800d42a:	2303      	movs	r3, #3
 800d42c:	e1a0      	b.n	800d770 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d42e:	4b83      	ldr	r3, [pc, #524]	; (800d63c <HAL_RCC_OscConfig+0x770>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d436:	2b00      	cmp	r3, #0
 800d438:	d0f0      	beq.n	800d41c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	689b      	ldr	r3, [r3, #8]
 800d43e:	2b01      	cmp	r3, #1
 800d440:	d106      	bne.n	800d450 <HAL_RCC_OscConfig+0x584>
 800d442:	4b7d      	ldr	r3, [pc, #500]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d446:	4a7c      	ldr	r2, [pc, #496]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d448:	f043 0301 	orr.w	r3, r3, #1
 800d44c:	6713      	str	r3, [r2, #112]	; 0x70
 800d44e:	e02d      	b.n	800d4ac <HAL_RCC_OscConfig+0x5e0>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	689b      	ldr	r3, [r3, #8]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d10c      	bne.n	800d472 <HAL_RCC_OscConfig+0x5a6>
 800d458:	4b77      	ldr	r3, [pc, #476]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d45a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d45c:	4a76      	ldr	r2, [pc, #472]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d45e:	f023 0301 	bic.w	r3, r3, #1
 800d462:	6713      	str	r3, [r2, #112]	; 0x70
 800d464:	4b74      	ldr	r3, [pc, #464]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d468:	4a73      	ldr	r2, [pc, #460]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d46a:	f023 0304 	bic.w	r3, r3, #4
 800d46e:	6713      	str	r3, [r2, #112]	; 0x70
 800d470:	e01c      	b.n	800d4ac <HAL_RCC_OscConfig+0x5e0>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	689b      	ldr	r3, [r3, #8]
 800d476:	2b05      	cmp	r3, #5
 800d478:	d10c      	bne.n	800d494 <HAL_RCC_OscConfig+0x5c8>
 800d47a:	4b6f      	ldr	r3, [pc, #444]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d47c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d47e:	4a6e      	ldr	r2, [pc, #440]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d480:	f043 0304 	orr.w	r3, r3, #4
 800d484:	6713      	str	r3, [r2, #112]	; 0x70
 800d486:	4b6c      	ldr	r3, [pc, #432]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d48a:	4a6b      	ldr	r2, [pc, #428]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d48c:	f043 0301 	orr.w	r3, r3, #1
 800d490:	6713      	str	r3, [r2, #112]	; 0x70
 800d492:	e00b      	b.n	800d4ac <HAL_RCC_OscConfig+0x5e0>
 800d494:	4b68      	ldr	r3, [pc, #416]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d498:	4a67      	ldr	r2, [pc, #412]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d49a:	f023 0301 	bic.w	r3, r3, #1
 800d49e:	6713      	str	r3, [r2, #112]	; 0x70
 800d4a0:	4b65      	ldr	r3, [pc, #404]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d4a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4a4:	4a64      	ldr	r2, [pc, #400]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d4a6:	f023 0304 	bic.w	r3, r3, #4
 800d4aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	689b      	ldr	r3, [r3, #8]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d015      	beq.n	800d4e0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d4b4:	f7f7 fc6e 	bl	8004d94 <HAL_GetTick>
 800d4b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d4ba:	e00a      	b.n	800d4d2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d4bc:	f7f7 fc6a 	bl	8004d94 <HAL_GetTick>
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c4:	1ad3      	subs	r3, r2, r3
 800d4c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4ca:	4293      	cmp	r3, r2
 800d4cc:	d901      	bls.n	800d4d2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800d4ce:	2303      	movs	r3, #3
 800d4d0:	e14e      	b.n	800d770 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d4d2:	4b59      	ldr	r3, [pc, #356]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d4d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4d6:	f003 0302 	and.w	r3, r3, #2
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d0ee      	beq.n	800d4bc <HAL_RCC_OscConfig+0x5f0>
 800d4de:	e014      	b.n	800d50a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d4e0:	f7f7 fc58 	bl	8004d94 <HAL_GetTick>
 800d4e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d4e6:	e00a      	b.n	800d4fe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d4e8:	f7f7 fc54 	bl	8004d94 <HAL_GetTick>
 800d4ec:	4602      	mov	r2, r0
 800d4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f0:	1ad3      	subs	r3, r2, r3
 800d4f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4f6:	4293      	cmp	r3, r2
 800d4f8:	d901      	bls.n	800d4fe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800d4fa:	2303      	movs	r3, #3
 800d4fc:	e138      	b.n	800d770 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d4fe:	4b4e      	ldr	r3, [pc, #312]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d502:	f003 0302 	and.w	r3, r3, #2
 800d506:	2b00      	cmp	r3, #0
 800d508:	d1ee      	bne.n	800d4e8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d50e:	2b00      	cmp	r3, #0
 800d510:	f000 812d 	beq.w	800d76e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d514:	4b48      	ldr	r3, [pc, #288]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d516:	691b      	ldr	r3, [r3, #16]
 800d518:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d51c:	2b18      	cmp	r3, #24
 800d51e:	f000 80bd 	beq.w	800d69c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d526:	2b02      	cmp	r3, #2
 800d528:	f040 809e 	bne.w	800d668 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d52c:	4b42      	ldr	r3, [pc, #264]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4a41      	ldr	r2, [pc, #260]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d538:	f7f7 fc2c 	bl	8004d94 <HAL_GetTick>
 800d53c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d53e:	e008      	b.n	800d552 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d540:	f7f7 fc28 	bl	8004d94 <HAL_GetTick>
 800d544:	4602      	mov	r2, r0
 800d546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d548:	1ad3      	subs	r3, r2, r3
 800d54a:	2b02      	cmp	r3, #2
 800d54c:	d901      	bls.n	800d552 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800d54e:	2303      	movs	r3, #3
 800d550:	e10e      	b.n	800d770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d552:	4b39      	ldr	r3, [pc, #228]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d1f0      	bne.n	800d540 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d55e:	4b36      	ldr	r3, [pc, #216]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d562:	4b37      	ldr	r3, [pc, #220]	; (800d640 <HAL_RCC_OscConfig+0x774>)
 800d564:	4013      	ands	r3, r2
 800d566:	687a      	ldr	r2, [r7, #4]
 800d568:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800d56a:	687a      	ldr	r2, [r7, #4]
 800d56c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d56e:	0112      	lsls	r2, r2, #4
 800d570:	430a      	orrs	r2, r1
 800d572:	4931      	ldr	r1, [pc, #196]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d574:	4313      	orrs	r3, r2
 800d576:	628b      	str	r3, [r1, #40]	; 0x28
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d57c:	3b01      	subs	r3, #1
 800d57e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d586:	3b01      	subs	r3, #1
 800d588:	025b      	lsls	r3, r3, #9
 800d58a:	b29b      	uxth	r3, r3
 800d58c:	431a      	orrs	r2, r3
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d592:	3b01      	subs	r3, #1
 800d594:	041b      	lsls	r3, r3, #16
 800d596:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d59a:	431a      	orrs	r2, r3
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5a0:	3b01      	subs	r3, #1
 800d5a2:	061b      	lsls	r3, r3, #24
 800d5a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d5a8:	4923      	ldr	r1, [pc, #140]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d5aa:	4313      	orrs	r3, r2
 800d5ac:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800d5ae:	4b22      	ldr	r3, [pc, #136]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5b2:	4a21      	ldr	r2, [pc, #132]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d5b4:	f023 0301 	bic.w	r3, r3, #1
 800d5b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d5ba:	4b1f      	ldr	r3, [pc, #124]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d5bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5be:	4b21      	ldr	r3, [pc, #132]	; (800d644 <HAL_RCC_OscConfig+0x778>)
 800d5c0:	4013      	ands	r3, r2
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d5c6:	00d2      	lsls	r2, r2, #3
 800d5c8:	491b      	ldr	r1, [pc, #108]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d5ca:	4313      	orrs	r3, r2
 800d5cc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d5ce:	4b1a      	ldr	r3, [pc, #104]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d5d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d2:	f023 020c 	bic.w	r2, r3, #12
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5da:	4917      	ldr	r1, [pc, #92]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d5dc:	4313      	orrs	r3, r2
 800d5de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d5e0:	4b15      	ldr	r3, [pc, #84]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5e4:	f023 0202 	bic.w	r2, r3, #2
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5ec:	4912      	ldr	r1, [pc, #72]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d5ee:	4313      	orrs	r3, r2
 800d5f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d5f2:	4b11      	ldr	r3, [pc, #68]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5f6:	4a10      	ldr	r2, [pc, #64]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d5f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d5fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d5fe:	4b0e      	ldr	r3, [pc, #56]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d602:	4a0d      	ldr	r2, [pc, #52]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d608:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d60a:	4b0b      	ldr	r3, [pc, #44]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d60c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d60e:	4a0a      	ldr	r2, [pc, #40]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d614:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800d616:	4b08      	ldr	r3, [pc, #32]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d61a:	4a07      	ldr	r2, [pc, #28]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d61c:	f043 0301 	orr.w	r3, r3, #1
 800d620:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d622:	4b05      	ldr	r3, [pc, #20]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4a04      	ldr	r2, [pc, #16]	; (800d638 <HAL_RCC_OscConfig+0x76c>)
 800d628:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d62c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d62e:	f7f7 fbb1 	bl	8004d94 <HAL_GetTick>
 800d632:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d634:	e011      	b.n	800d65a <HAL_RCC_OscConfig+0x78e>
 800d636:	bf00      	nop
 800d638:	58024400 	.word	0x58024400
 800d63c:	58024800 	.word	0x58024800
 800d640:	fffffc0c 	.word	0xfffffc0c
 800d644:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d648:	f7f7 fba4 	bl	8004d94 <HAL_GetTick>
 800d64c:	4602      	mov	r2, r0
 800d64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d650:	1ad3      	subs	r3, r2, r3
 800d652:	2b02      	cmp	r3, #2
 800d654:	d901      	bls.n	800d65a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800d656:	2303      	movs	r3, #3
 800d658:	e08a      	b.n	800d770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d65a:	4b47      	ldr	r3, [pc, #284]	; (800d778 <HAL_RCC_OscConfig+0x8ac>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d662:	2b00      	cmp	r3, #0
 800d664:	d0f0      	beq.n	800d648 <HAL_RCC_OscConfig+0x77c>
 800d666:	e082      	b.n	800d76e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d668:	4b43      	ldr	r3, [pc, #268]	; (800d778 <HAL_RCC_OscConfig+0x8ac>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	4a42      	ldr	r2, [pc, #264]	; (800d778 <HAL_RCC_OscConfig+0x8ac>)
 800d66e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d674:	f7f7 fb8e 	bl	8004d94 <HAL_GetTick>
 800d678:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d67a:	e008      	b.n	800d68e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d67c:	f7f7 fb8a 	bl	8004d94 <HAL_GetTick>
 800d680:	4602      	mov	r2, r0
 800d682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d684:	1ad3      	subs	r3, r2, r3
 800d686:	2b02      	cmp	r3, #2
 800d688:	d901      	bls.n	800d68e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800d68a:	2303      	movs	r3, #3
 800d68c:	e070      	b.n	800d770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d68e:	4b3a      	ldr	r3, [pc, #232]	; (800d778 <HAL_RCC_OscConfig+0x8ac>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d696:	2b00      	cmp	r3, #0
 800d698:	d1f0      	bne.n	800d67c <HAL_RCC_OscConfig+0x7b0>
 800d69a:	e068      	b.n	800d76e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d69c:	4b36      	ldr	r3, [pc, #216]	; (800d778 <HAL_RCC_OscConfig+0x8ac>)
 800d69e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d6a2:	4b35      	ldr	r3, [pc, #212]	; (800d778 <HAL_RCC_OscConfig+0x8ac>)
 800d6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6a6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ac:	2b01      	cmp	r3, #1
 800d6ae:	d031      	beq.n	800d714 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d6b0:	693b      	ldr	r3, [r7, #16]
 800d6b2:	f003 0203 	and.w	r2, r3, #3
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d12a      	bne.n	800d714 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	091b      	lsrs	r3, r3, #4
 800d6c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d122      	bne.n	800d714 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d11a      	bne.n	800d714 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	0a5b      	lsrs	r3, r3, #9
 800d6e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d111      	bne.n	800d714 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	0c1b      	lsrs	r3, r3, #16
 800d6f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d108      	bne.n	800d714 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	0e1b      	lsrs	r3, r3, #24
 800d706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d70e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d710:	429a      	cmp	r2, r3
 800d712:	d001      	beq.n	800d718 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800d714:	2301      	movs	r3, #1
 800d716:	e02b      	b.n	800d770 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d718:	4b17      	ldr	r3, [pc, #92]	; (800d778 <HAL_RCC_OscConfig+0x8ac>)
 800d71a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d71c:	08db      	lsrs	r3, r3, #3
 800d71e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d722:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d728:	693a      	ldr	r2, [r7, #16]
 800d72a:	429a      	cmp	r2, r3
 800d72c:	d01f      	beq.n	800d76e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800d72e:	4b12      	ldr	r3, [pc, #72]	; (800d778 <HAL_RCC_OscConfig+0x8ac>)
 800d730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d732:	4a11      	ldr	r2, [pc, #68]	; (800d778 <HAL_RCC_OscConfig+0x8ac>)
 800d734:	f023 0301 	bic.w	r3, r3, #1
 800d738:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d73a:	f7f7 fb2b 	bl	8004d94 <HAL_GetTick>
 800d73e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800d740:	bf00      	nop
 800d742:	f7f7 fb27 	bl	8004d94 <HAL_GetTick>
 800d746:	4602      	mov	r2, r0
 800d748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d0f9      	beq.n	800d742 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d74e:	4b0a      	ldr	r3, [pc, #40]	; (800d778 <HAL_RCC_OscConfig+0x8ac>)
 800d750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d752:	4b0a      	ldr	r3, [pc, #40]	; (800d77c <HAL_RCC_OscConfig+0x8b0>)
 800d754:	4013      	ands	r3, r2
 800d756:	687a      	ldr	r2, [r7, #4]
 800d758:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d75a:	00d2      	lsls	r2, r2, #3
 800d75c:	4906      	ldr	r1, [pc, #24]	; (800d778 <HAL_RCC_OscConfig+0x8ac>)
 800d75e:	4313      	orrs	r3, r2
 800d760:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800d762:	4b05      	ldr	r3, [pc, #20]	; (800d778 <HAL_RCC_OscConfig+0x8ac>)
 800d764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d766:	4a04      	ldr	r2, [pc, #16]	; (800d778 <HAL_RCC_OscConfig+0x8ac>)
 800d768:	f043 0301 	orr.w	r3, r3, #1
 800d76c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800d76e:	2300      	movs	r3, #0
}
 800d770:	4618      	mov	r0, r3
 800d772:	3730      	adds	r7, #48	; 0x30
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}
 800d778:	58024400 	.word	0x58024400
 800d77c:	ffff0007 	.word	0xffff0007

0800d780 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b086      	sub	sp, #24
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d101      	bne.n	800d794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d790:	2301      	movs	r3, #1
 800d792:	e19c      	b.n	800dace <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d794:	4b8a      	ldr	r3, [pc, #552]	; (800d9c0 <HAL_RCC_ClockConfig+0x240>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f003 030f 	and.w	r3, r3, #15
 800d79c:	683a      	ldr	r2, [r7, #0]
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	d910      	bls.n	800d7c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d7a2:	4b87      	ldr	r3, [pc, #540]	; (800d9c0 <HAL_RCC_ClockConfig+0x240>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f023 020f 	bic.w	r2, r3, #15
 800d7aa:	4985      	ldr	r1, [pc, #532]	; (800d9c0 <HAL_RCC_ClockConfig+0x240>)
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	4313      	orrs	r3, r2
 800d7b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d7b2:	4b83      	ldr	r3, [pc, #524]	; (800d9c0 <HAL_RCC_ClockConfig+0x240>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f003 030f 	and.w	r3, r3, #15
 800d7ba:	683a      	ldr	r2, [r7, #0]
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d001      	beq.n	800d7c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	e184      	b.n	800dace <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	f003 0304 	and.w	r3, r3, #4
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d010      	beq.n	800d7f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	691a      	ldr	r2, [r3, #16]
 800d7d4:	4b7b      	ldr	r3, [pc, #492]	; (800d9c4 <HAL_RCC_ClockConfig+0x244>)
 800d7d6:	699b      	ldr	r3, [r3, #24]
 800d7d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	d908      	bls.n	800d7f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d7e0:	4b78      	ldr	r3, [pc, #480]	; (800d9c4 <HAL_RCC_ClockConfig+0x244>)
 800d7e2:	699b      	ldr	r3, [r3, #24]
 800d7e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	691b      	ldr	r3, [r3, #16]
 800d7ec:	4975      	ldr	r1, [pc, #468]	; (800d9c4 <HAL_RCC_ClockConfig+0x244>)
 800d7ee:	4313      	orrs	r3, r2
 800d7f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f003 0308 	and.w	r3, r3, #8
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d010      	beq.n	800d820 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	695a      	ldr	r2, [r3, #20]
 800d802:	4b70      	ldr	r3, [pc, #448]	; (800d9c4 <HAL_RCC_ClockConfig+0x244>)
 800d804:	69db      	ldr	r3, [r3, #28]
 800d806:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d908      	bls.n	800d820 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d80e:	4b6d      	ldr	r3, [pc, #436]	; (800d9c4 <HAL_RCC_ClockConfig+0x244>)
 800d810:	69db      	ldr	r3, [r3, #28]
 800d812:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	695b      	ldr	r3, [r3, #20]
 800d81a:	496a      	ldr	r1, [pc, #424]	; (800d9c4 <HAL_RCC_ClockConfig+0x244>)
 800d81c:	4313      	orrs	r3, r2
 800d81e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	f003 0310 	and.w	r3, r3, #16
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d010      	beq.n	800d84e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	699a      	ldr	r2, [r3, #24]
 800d830:	4b64      	ldr	r3, [pc, #400]	; (800d9c4 <HAL_RCC_ClockConfig+0x244>)
 800d832:	69db      	ldr	r3, [r3, #28]
 800d834:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d838:	429a      	cmp	r2, r3
 800d83a:	d908      	bls.n	800d84e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d83c:	4b61      	ldr	r3, [pc, #388]	; (800d9c4 <HAL_RCC_ClockConfig+0x244>)
 800d83e:	69db      	ldr	r3, [r3, #28]
 800d840:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	699b      	ldr	r3, [r3, #24]
 800d848:	495e      	ldr	r1, [pc, #376]	; (800d9c4 <HAL_RCC_ClockConfig+0x244>)
 800d84a:	4313      	orrs	r3, r2
 800d84c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	f003 0320 	and.w	r3, r3, #32
 800d856:	2b00      	cmp	r3, #0
 800d858:	d010      	beq.n	800d87c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	69da      	ldr	r2, [r3, #28]
 800d85e:	4b59      	ldr	r3, [pc, #356]	; (800d9c4 <HAL_RCC_ClockConfig+0x244>)
 800d860:	6a1b      	ldr	r3, [r3, #32]
 800d862:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d866:	429a      	cmp	r2, r3
 800d868:	d908      	bls.n	800d87c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d86a:	4b56      	ldr	r3, [pc, #344]	; (800d9c4 <HAL_RCC_ClockConfig+0x244>)
 800d86c:	6a1b      	ldr	r3, [r3, #32]
 800d86e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	69db      	ldr	r3, [r3, #28]
 800d876:	4953      	ldr	r1, [pc, #332]	; (800d9c4 <HAL_RCC_ClockConfig+0x244>)
 800d878:	4313      	orrs	r3, r2
 800d87a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	f003 0302 	and.w	r3, r3, #2
 800d884:	2b00      	cmp	r3, #0
 800d886:	d010      	beq.n	800d8aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	68da      	ldr	r2, [r3, #12]
 800d88c:	4b4d      	ldr	r3, [pc, #308]	; (800d9c4 <HAL_RCC_ClockConfig+0x244>)
 800d88e:	699b      	ldr	r3, [r3, #24]
 800d890:	f003 030f 	and.w	r3, r3, #15
 800d894:	429a      	cmp	r2, r3
 800d896:	d908      	bls.n	800d8aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d898:	4b4a      	ldr	r3, [pc, #296]	; (800d9c4 <HAL_RCC_ClockConfig+0x244>)
 800d89a:	699b      	ldr	r3, [r3, #24]
 800d89c:	f023 020f 	bic.w	r2, r3, #15
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	68db      	ldr	r3, [r3, #12]
 800d8a4:	4947      	ldr	r1, [pc, #284]	; (800d9c4 <HAL_RCC_ClockConfig+0x244>)
 800d8a6:	4313      	orrs	r3, r2
 800d8a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f003 0301 	and.w	r3, r3, #1
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d055      	beq.n	800d962 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d8b6:	4b43      	ldr	r3, [pc, #268]	; (800d9c4 <HAL_RCC_ClockConfig+0x244>)
 800d8b8:	699b      	ldr	r3, [r3, #24]
 800d8ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	689b      	ldr	r3, [r3, #8]
 800d8c2:	4940      	ldr	r1, [pc, #256]	; (800d9c4 <HAL_RCC_ClockConfig+0x244>)
 800d8c4:	4313      	orrs	r3, r2
 800d8c6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	685b      	ldr	r3, [r3, #4]
 800d8cc:	2b02      	cmp	r3, #2
 800d8ce:	d107      	bne.n	800d8e0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d8d0:	4b3c      	ldr	r3, [pc, #240]	; (800d9c4 <HAL_RCC_ClockConfig+0x244>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d121      	bne.n	800d920 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d8dc:	2301      	movs	r3, #1
 800d8de:	e0f6      	b.n	800dace <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	685b      	ldr	r3, [r3, #4]
 800d8e4:	2b03      	cmp	r3, #3
 800d8e6:	d107      	bne.n	800d8f8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d8e8:	4b36      	ldr	r3, [pc, #216]	; (800d9c4 <HAL_RCC_ClockConfig+0x244>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d115      	bne.n	800d920 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	e0ea      	b.n	800dace <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	685b      	ldr	r3, [r3, #4]
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d107      	bne.n	800d910 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d900:	4b30      	ldr	r3, [pc, #192]	; (800d9c4 <HAL_RCC_ClockConfig+0x244>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d109      	bne.n	800d920 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d90c:	2301      	movs	r3, #1
 800d90e:	e0de      	b.n	800dace <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d910:	4b2c      	ldr	r3, [pc, #176]	; (800d9c4 <HAL_RCC_ClockConfig+0x244>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f003 0304 	and.w	r3, r3, #4
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d101      	bne.n	800d920 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d91c:	2301      	movs	r3, #1
 800d91e:	e0d6      	b.n	800dace <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d920:	4b28      	ldr	r3, [pc, #160]	; (800d9c4 <HAL_RCC_ClockConfig+0x244>)
 800d922:	691b      	ldr	r3, [r3, #16]
 800d924:	f023 0207 	bic.w	r2, r3, #7
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	4925      	ldr	r1, [pc, #148]	; (800d9c4 <HAL_RCC_ClockConfig+0x244>)
 800d92e:	4313      	orrs	r3, r2
 800d930:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d932:	f7f7 fa2f 	bl	8004d94 <HAL_GetTick>
 800d936:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d938:	e00a      	b.n	800d950 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d93a:	f7f7 fa2b 	bl	8004d94 <HAL_GetTick>
 800d93e:	4602      	mov	r2, r0
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	1ad3      	subs	r3, r2, r3
 800d944:	f241 3288 	movw	r2, #5000	; 0x1388
 800d948:	4293      	cmp	r3, r2
 800d94a:	d901      	bls.n	800d950 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800d94c:	2303      	movs	r3, #3
 800d94e:	e0be      	b.n	800dace <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d950:	4b1c      	ldr	r3, [pc, #112]	; (800d9c4 <HAL_RCC_ClockConfig+0x244>)
 800d952:	691b      	ldr	r3, [r3, #16]
 800d954:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	00db      	lsls	r3, r3, #3
 800d95e:	429a      	cmp	r2, r3
 800d960:	d1eb      	bne.n	800d93a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	f003 0302 	and.w	r3, r3, #2
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d010      	beq.n	800d990 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	68da      	ldr	r2, [r3, #12]
 800d972:	4b14      	ldr	r3, [pc, #80]	; (800d9c4 <HAL_RCC_ClockConfig+0x244>)
 800d974:	699b      	ldr	r3, [r3, #24]
 800d976:	f003 030f 	and.w	r3, r3, #15
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d208      	bcs.n	800d990 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d97e:	4b11      	ldr	r3, [pc, #68]	; (800d9c4 <HAL_RCC_ClockConfig+0x244>)
 800d980:	699b      	ldr	r3, [r3, #24]
 800d982:	f023 020f 	bic.w	r2, r3, #15
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	68db      	ldr	r3, [r3, #12]
 800d98a:	490e      	ldr	r1, [pc, #56]	; (800d9c4 <HAL_RCC_ClockConfig+0x244>)
 800d98c:	4313      	orrs	r3, r2
 800d98e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d990:	4b0b      	ldr	r3, [pc, #44]	; (800d9c0 <HAL_RCC_ClockConfig+0x240>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f003 030f 	and.w	r3, r3, #15
 800d998:	683a      	ldr	r2, [r7, #0]
 800d99a:	429a      	cmp	r2, r3
 800d99c:	d214      	bcs.n	800d9c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d99e:	4b08      	ldr	r3, [pc, #32]	; (800d9c0 <HAL_RCC_ClockConfig+0x240>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	f023 020f 	bic.w	r2, r3, #15
 800d9a6:	4906      	ldr	r1, [pc, #24]	; (800d9c0 <HAL_RCC_ClockConfig+0x240>)
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	4313      	orrs	r3, r2
 800d9ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d9ae:	4b04      	ldr	r3, [pc, #16]	; (800d9c0 <HAL_RCC_ClockConfig+0x240>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	f003 030f 	and.w	r3, r3, #15
 800d9b6:	683a      	ldr	r2, [r7, #0]
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	d005      	beq.n	800d9c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d9bc:	2301      	movs	r3, #1
 800d9be:	e086      	b.n	800dace <HAL_RCC_ClockConfig+0x34e>
 800d9c0:	52002000 	.word	0x52002000
 800d9c4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f003 0304 	and.w	r3, r3, #4
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d010      	beq.n	800d9f6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	691a      	ldr	r2, [r3, #16]
 800d9d8:	4b3f      	ldr	r3, [pc, #252]	; (800dad8 <HAL_RCC_ClockConfig+0x358>)
 800d9da:	699b      	ldr	r3, [r3, #24]
 800d9dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d208      	bcs.n	800d9f6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d9e4:	4b3c      	ldr	r3, [pc, #240]	; (800dad8 <HAL_RCC_ClockConfig+0x358>)
 800d9e6:	699b      	ldr	r3, [r3, #24]
 800d9e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	691b      	ldr	r3, [r3, #16]
 800d9f0:	4939      	ldr	r1, [pc, #228]	; (800dad8 <HAL_RCC_ClockConfig+0x358>)
 800d9f2:	4313      	orrs	r3, r2
 800d9f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f003 0308 	and.w	r3, r3, #8
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d010      	beq.n	800da24 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	695a      	ldr	r2, [r3, #20]
 800da06:	4b34      	ldr	r3, [pc, #208]	; (800dad8 <HAL_RCC_ClockConfig+0x358>)
 800da08:	69db      	ldr	r3, [r3, #28]
 800da0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800da0e:	429a      	cmp	r2, r3
 800da10:	d208      	bcs.n	800da24 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800da12:	4b31      	ldr	r3, [pc, #196]	; (800dad8 <HAL_RCC_ClockConfig+0x358>)
 800da14:	69db      	ldr	r3, [r3, #28]
 800da16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	695b      	ldr	r3, [r3, #20]
 800da1e:	492e      	ldr	r1, [pc, #184]	; (800dad8 <HAL_RCC_ClockConfig+0x358>)
 800da20:	4313      	orrs	r3, r2
 800da22:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	f003 0310 	and.w	r3, r3, #16
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d010      	beq.n	800da52 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	699a      	ldr	r2, [r3, #24]
 800da34:	4b28      	ldr	r3, [pc, #160]	; (800dad8 <HAL_RCC_ClockConfig+0x358>)
 800da36:	69db      	ldr	r3, [r3, #28]
 800da38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800da3c:	429a      	cmp	r2, r3
 800da3e:	d208      	bcs.n	800da52 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800da40:	4b25      	ldr	r3, [pc, #148]	; (800dad8 <HAL_RCC_ClockConfig+0x358>)
 800da42:	69db      	ldr	r3, [r3, #28]
 800da44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	699b      	ldr	r3, [r3, #24]
 800da4c:	4922      	ldr	r1, [pc, #136]	; (800dad8 <HAL_RCC_ClockConfig+0x358>)
 800da4e:	4313      	orrs	r3, r2
 800da50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f003 0320 	and.w	r3, r3, #32
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d010      	beq.n	800da80 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	69da      	ldr	r2, [r3, #28]
 800da62:	4b1d      	ldr	r3, [pc, #116]	; (800dad8 <HAL_RCC_ClockConfig+0x358>)
 800da64:	6a1b      	ldr	r3, [r3, #32]
 800da66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d208      	bcs.n	800da80 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800da6e:	4b1a      	ldr	r3, [pc, #104]	; (800dad8 <HAL_RCC_ClockConfig+0x358>)
 800da70:	6a1b      	ldr	r3, [r3, #32]
 800da72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	69db      	ldr	r3, [r3, #28]
 800da7a:	4917      	ldr	r1, [pc, #92]	; (800dad8 <HAL_RCC_ClockConfig+0x358>)
 800da7c:	4313      	orrs	r3, r2
 800da7e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800da80:	f000 f834 	bl	800daec <HAL_RCC_GetSysClockFreq>
 800da84:	4602      	mov	r2, r0
 800da86:	4b14      	ldr	r3, [pc, #80]	; (800dad8 <HAL_RCC_ClockConfig+0x358>)
 800da88:	699b      	ldr	r3, [r3, #24]
 800da8a:	0a1b      	lsrs	r3, r3, #8
 800da8c:	f003 030f 	and.w	r3, r3, #15
 800da90:	4912      	ldr	r1, [pc, #72]	; (800dadc <HAL_RCC_ClockConfig+0x35c>)
 800da92:	5ccb      	ldrb	r3, [r1, r3]
 800da94:	f003 031f 	and.w	r3, r3, #31
 800da98:	fa22 f303 	lsr.w	r3, r2, r3
 800da9c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800da9e:	4b0e      	ldr	r3, [pc, #56]	; (800dad8 <HAL_RCC_ClockConfig+0x358>)
 800daa0:	699b      	ldr	r3, [r3, #24]
 800daa2:	f003 030f 	and.w	r3, r3, #15
 800daa6:	4a0d      	ldr	r2, [pc, #52]	; (800dadc <HAL_RCC_ClockConfig+0x35c>)
 800daa8:	5cd3      	ldrb	r3, [r2, r3]
 800daaa:	f003 031f 	and.w	r3, r3, #31
 800daae:	693a      	ldr	r2, [r7, #16]
 800dab0:	fa22 f303 	lsr.w	r3, r2, r3
 800dab4:	4a0a      	ldr	r2, [pc, #40]	; (800dae0 <HAL_RCC_ClockConfig+0x360>)
 800dab6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800dab8:	4a0a      	ldr	r2, [pc, #40]	; (800dae4 <HAL_RCC_ClockConfig+0x364>)
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800dabe:	4b0a      	ldr	r3, [pc, #40]	; (800dae8 <HAL_RCC_ClockConfig+0x368>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7f5 ff8c 	bl	80039e0 <HAL_InitTick>
 800dac8:	4603      	mov	r3, r0
 800daca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800dacc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3718      	adds	r7, #24
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	58024400 	.word	0x58024400
 800dadc:	0801a1b4 	.word	0x0801a1b4
 800dae0:	240000c0 	.word	0x240000c0
 800dae4:	240000bc 	.word	0x240000bc
 800dae8:	240000c4 	.word	0x240000c4

0800daec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800daec:	b480      	push	{r7}
 800daee:	b089      	sub	sp, #36	; 0x24
 800daf0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800daf2:	4bb3      	ldr	r3, [pc, #716]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800daf4:	691b      	ldr	r3, [r3, #16]
 800daf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dafa:	2b18      	cmp	r3, #24
 800dafc:	f200 8155 	bhi.w	800ddaa <HAL_RCC_GetSysClockFreq+0x2be>
 800db00:	a201      	add	r2, pc, #4	; (adr r2, 800db08 <HAL_RCC_GetSysClockFreq+0x1c>)
 800db02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db06:	bf00      	nop
 800db08:	0800db6d 	.word	0x0800db6d
 800db0c:	0800ddab 	.word	0x0800ddab
 800db10:	0800ddab 	.word	0x0800ddab
 800db14:	0800ddab 	.word	0x0800ddab
 800db18:	0800ddab 	.word	0x0800ddab
 800db1c:	0800ddab 	.word	0x0800ddab
 800db20:	0800ddab 	.word	0x0800ddab
 800db24:	0800ddab 	.word	0x0800ddab
 800db28:	0800db93 	.word	0x0800db93
 800db2c:	0800ddab 	.word	0x0800ddab
 800db30:	0800ddab 	.word	0x0800ddab
 800db34:	0800ddab 	.word	0x0800ddab
 800db38:	0800ddab 	.word	0x0800ddab
 800db3c:	0800ddab 	.word	0x0800ddab
 800db40:	0800ddab 	.word	0x0800ddab
 800db44:	0800ddab 	.word	0x0800ddab
 800db48:	0800db99 	.word	0x0800db99
 800db4c:	0800ddab 	.word	0x0800ddab
 800db50:	0800ddab 	.word	0x0800ddab
 800db54:	0800ddab 	.word	0x0800ddab
 800db58:	0800ddab 	.word	0x0800ddab
 800db5c:	0800ddab 	.word	0x0800ddab
 800db60:	0800ddab 	.word	0x0800ddab
 800db64:	0800ddab 	.word	0x0800ddab
 800db68:	0800db9f 	.word	0x0800db9f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db6c:	4b94      	ldr	r3, [pc, #592]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f003 0320 	and.w	r3, r3, #32
 800db74:	2b00      	cmp	r3, #0
 800db76:	d009      	beq.n	800db8c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800db78:	4b91      	ldr	r3, [pc, #580]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	08db      	lsrs	r3, r3, #3
 800db7e:	f003 0303 	and.w	r3, r3, #3
 800db82:	4a90      	ldr	r2, [pc, #576]	; (800ddc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800db84:	fa22 f303 	lsr.w	r3, r2, r3
 800db88:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800db8a:	e111      	b.n	800ddb0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800db8c:	4b8d      	ldr	r3, [pc, #564]	; (800ddc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800db8e:	61bb      	str	r3, [r7, #24]
      break;
 800db90:	e10e      	b.n	800ddb0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800db92:	4b8d      	ldr	r3, [pc, #564]	; (800ddc8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800db94:	61bb      	str	r3, [r7, #24]
      break;
 800db96:	e10b      	b.n	800ddb0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800db98:	4b8c      	ldr	r3, [pc, #560]	; (800ddcc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800db9a:	61bb      	str	r3, [r7, #24]
      break;
 800db9c:	e108      	b.n	800ddb0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800db9e:	4b88      	ldr	r3, [pc, #544]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dba2:	f003 0303 	and.w	r3, r3, #3
 800dba6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800dba8:	4b85      	ldr	r3, [pc, #532]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dbaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbac:	091b      	lsrs	r3, r3, #4
 800dbae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbb2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800dbb4:	4b82      	ldr	r3, [pc, #520]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dbb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb8:	f003 0301 	and.w	r3, r3, #1
 800dbbc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800dbbe:	4b80      	ldr	r3, [pc, #512]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dbc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbc2:	08db      	lsrs	r3, r3, #3
 800dbc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dbc8:	68fa      	ldr	r2, [r7, #12]
 800dbca:	fb02 f303 	mul.w	r3, r2, r3
 800dbce:	ee07 3a90 	vmov	s15, r3
 800dbd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbd6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	f000 80e1 	beq.w	800dda4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	2b02      	cmp	r3, #2
 800dbe6:	f000 8083 	beq.w	800dcf0 <HAL_RCC_GetSysClockFreq+0x204>
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	2b02      	cmp	r3, #2
 800dbee:	f200 80a1 	bhi.w	800dd34 <HAL_RCC_GetSysClockFreq+0x248>
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d003      	beq.n	800dc00 <HAL_RCC_GetSysClockFreq+0x114>
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	2b01      	cmp	r3, #1
 800dbfc:	d056      	beq.n	800dcac <HAL_RCC_GetSysClockFreq+0x1c0>
 800dbfe:	e099      	b.n	800dd34 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc00:	4b6f      	ldr	r3, [pc, #444]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	f003 0320 	and.w	r3, r3, #32
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d02d      	beq.n	800dc68 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dc0c:	4b6c      	ldr	r3, [pc, #432]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	08db      	lsrs	r3, r3, #3
 800dc12:	f003 0303 	and.w	r3, r3, #3
 800dc16:	4a6b      	ldr	r2, [pc, #428]	; (800ddc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800dc18:	fa22 f303 	lsr.w	r3, r2, r3
 800dc1c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	ee07 3a90 	vmov	s15, r3
 800dc24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	ee07 3a90 	vmov	s15, r3
 800dc2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc36:	4b62      	ldr	r3, [pc, #392]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dc38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc3e:	ee07 3a90 	vmov	s15, r3
 800dc42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc46:	ed97 6a02 	vldr	s12, [r7, #8]
 800dc4a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ddd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dc4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc62:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800dc66:	e087      	b.n	800dd78 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	ee07 3a90 	vmov	s15, r3
 800dc6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc72:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ddd4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800dc76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc7a:	4b51      	ldr	r3, [pc, #324]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dc7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc82:	ee07 3a90 	vmov	s15, r3
 800dc86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc8a:	ed97 6a02 	vldr	s12, [r7, #8]
 800dc8e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ddd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dc92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dca6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dcaa:	e065      	b.n	800dd78 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	ee07 3a90 	vmov	s15, r3
 800dcb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcb6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ddd8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800dcba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dcbe:	4b40      	ldr	r3, [pc, #256]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dcc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcc6:	ee07 3a90 	vmov	s15, r3
 800dcca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcce:	ed97 6a02 	vldr	s12, [r7, #8]
 800dcd2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ddd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dcd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dcda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dcde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dcee:	e043      	b.n	800dd78 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	ee07 3a90 	vmov	s15, r3
 800dcf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcfa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800dddc <HAL_RCC_GetSysClockFreq+0x2f0>
 800dcfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd02:	4b2f      	ldr	r3, [pc, #188]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd0a:	ee07 3a90 	vmov	s15, r3
 800dd0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd12:	ed97 6a02 	vldr	s12, [r7, #8]
 800dd16:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ddd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dd1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dd32:	e021      	b.n	800dd78 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	ee07 3a90 	vmov	s15, r3
 800dd3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd3e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ddd8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800dd42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd46:	4b1e      	ldr	r3, [pc, #120]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd4e:	ee07 3a90 	vmov	s15, r3
 800dd52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd56:	ed97 6a02 	vldr	s12, [r7, #8]
 800dd5a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ddd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dd5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dd76:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800dd78:	4b11      	ldr	r3, [pc, #68]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd7c:	0a5b      	lsrs	r3, r3, #9
 800dd7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd82:	3301      	adds	r3, #1
 800dd84:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	ee07 3a90 	vmov	s15, r3
 800dd8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dd90:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd9c:	ee17 3a90 	vmov	r3, s15
 800dda0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800dda2:	e005      	b.n	800ddb0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800dda4:	2300      	movs	r3, #0
 800dda6:	61bb      	str	r3, [r7, #24]
      break;
 800dda8:	e002      	b.n	800ddb0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ddaa:	4b07      	ldr	r3, [pc, #28]	; (800ddc8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ddac:	61bb      	str	r3, [r7, #24]
      break;
 800ddae:	bf00      	nop
  }

  return sysclockfreq;
 800ddb0:	69bb      	ldr	r3, [r7, #24]
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3724      	adds	r7, #36	; 0x24
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbc:	4770      	bx	lr
 800ddbe:	bf00      	nop
 800ddc0:	58024400 	.word	0x58024400
 800ddc4:	03d09000 	.word	0x03d09000
 800ddc8:	003d0900 	.word	0x003d0900
 800ddcc:	017d7840 	.word	0x017d7840
 800ddd0:	46000000 	.word	0x46000000
 800ddd4:	4c742400 	.word	0x4c742400
 800ddd8:	4a742400 	.word	0x4a742400
 800dddc:	4bbebc20 	.word	0x4bbebc20

0800dde0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b082      	sub	sp, #8
 800dde4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800dde6:	f7ff fe81 	bl	800daec <HAL_RCC_GetSysClockFreq>
 800ddea:	4602      	mov	r2, r0
 800ddec:	4b10      	ldr	r3, [pc, #64]	; (800de30 <HAL_RCC_GetHCLKFreq+0x50>)
 800ddee:	699b      	ldr	r3, [r3, #24]
 800ddf0:	0a1b      	lsrs	r3, r3, #8
 800ddf2:	f003 030f 	and.w	r3, r3, #15
 800ddf6:	490f      	ldr	r1, [pc, #60]	; (800de34 <HAL_RCC_GetHCLKFreq+0x54>)
 800ddf8:	5ccb      	ldrb	r3, [r1, r3]
 800ddfa:	f003 031f 	and.w	r3, r3, #31
 800ddfe:	fa22 f303 	lsr.w	r3, r2, r3
 800de02:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800de04:	4b0a      	ldr	r3, [pc, #40]	; (800de30 <HAL_RCC_GetHCLKFreq+0x50>)
 800de06:	699b      	ldr	r3, [r3, #24]
 800de08:	f003 030f 	and.w	r3, r3, #15
 800de0c:	4a09      	ldr	r2, [pc, #36]	; (800de34 <HAL_RCC_GetHCLKFreq+0x54>)
 800de0e:	5cd3      	ldrb	r3, [r2, r3]
 800de10:	f003 031f 	and.w	r3, r3, #31
 800de14:	687a      	ldr	r2, [r7, #4]
 800de16:	fa22 f303 	lsr.w	r3, r2, r3
 800de1a:	4a07      	ldr	r2, [pc, #28]	; (800de38 <HAL_RCC_GetHCLKFreq+0x58>)
 800de1c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800de1e:	4a07      	ldr	r2, [pc, #28]	; (800de3c <HAL_RCC_GetHCLKFreq+0x5c>)
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800de24:	4b04      	ldr	r3, [pc, #16]	; (800de38 <HAL_RCC_GetHCLKFreq+0x58>)
 800de26:	681b      	ldr	r3, [r3, #0]
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3708      	adds	r7, #8
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}
 800de30:	58024400 	.word	0x58024400
 800de34:	0801a1b4 	.word	0x0801a1b4
 800de38:	240000c0 	.word	0x240000c0
 800de3c:	240000bc 	.word	0x240000bc

0800de40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800de44:	f7ff ffcc 	bl	800dde0 <HAL_RCC_GetHCLKFreq>
 800de48:	4602      	mov	r2, r0
 800de4a:	4b06      	ldr	r3, [pc, #24]	; (800de64 <HAL_RCC_GetPCLK1Freq+0x24>)
 800de4c:	69db      	ldr	r3, [r3, #28]
 800de4e:	091b      	lsrs	r3, r3, #4
 800de50:	f003 0307 	and.w	r3, r3, #7
 800de54:	4904      	ldr	r1, [pc, #16]	; (800de68 <HAL_RCC_GetPCLK1Freq+0x28>)
 800de56:	5ccb      	ldrb	r3, [r1, r3]
 800de58:	f003 031f 	and.w	r3, r3, #31
 800de5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800de60:	4618      	mov	r0, r3
 800de62:	bd80      	pop	{r7, pc}
 800de64:	58024400 	.word	0x58024400
 800de68:	0801a1b4 	.word	0x0801a1b4

0800de6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800de70:	f7ff ffb6 	bl	800dde0 <HAL_RCC_GetHCLKFreq>
 800de74:	4602      	mov	r2, r0
 800de76:	4b06      	ldr	r3, [pc, #24]	; (800de90 <HAL_RCC_GetPCLK2Freq+0x24>)
 800de78:	69db      	ldr	r3, [r3, #28]
 800de7a:	0a1b      	lsrs	r3, r3, #8
 800de7c:	f003 0307 	and.w	r3, r3, #7
 800de80:	4904      	ldr	r1, [pc, #16]	; (800de94 <HAL_RCC_GetPCLK2Freq+0x28>)
 800de82:	5ccb      	ldrb	r3, [r1, r3]
 800de84:	f003 031f 	and.w	r3, r3, #31
 800de88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	58024400 	.word	0x58024400
 800de94:	0801a1b4 	.word	0x0801a1b4

0800de98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800de98:	b480      	push	{r7}
 800de9a:	b083      	sub	sp, #12
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	223f      	movs	r2, #63	; 0x3f
 800dea6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800dea8:	4b1a      	ldr	r3, [pc, #104]	; (800df14 <HAL_RCC_GetClockConfig+0x7c>)
 800deaa:	691b      	ldr	r3, [r3, #16]
 800deac:	f003 0207 	and.w	r2, r3, #7
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800deb4:	4b17      	ldr	r3, [pc, #92]	; (800df14 <HAL_RCC_GetClockConfig+0x7c>)
 800deb6:	699b      	ldr	r3, [r3, #24]
 800deb8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800dec0:	4b14      	ldr	r3, [pc, #80]	; (800df14 <HAL_RCC_GetClockConfig+0x7c>)
 800dec2:	699b      	ldr	r3, [r3, #24]
 800dec4:	f003 020f 	and.w	r2, r3, #15
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800decc:	4b11      	ldr	r3, [pc, #68]	; (800df14 <HAL_RCC_GetClockConfig+0x7c>)
 800dece:	699b      	ldr	r3, [r3, #24]
 800ded0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800ded8:	4b0e      	ldr	r3, [pc, #56]	; (800df14 <HAL_RCC_GetClockConfig+0x7c>)
 800deda:	69db      	ldr	r3, [r3, #28]
 800dedc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800dee4:	4b0b      	ldr	r3, [pc, #44]	; (800df14 <HAL_RCC_GetClockConfig+0x7c>)
 800dee6:	69db      	ldr	r3, [r3, #28]
 800dee8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800def0:	4b08      	ldr	r3, [pc, #32]	; (800df14 <HAL_RCC_GetClockConfig+0x7c>)
 800def2:	6a1b      	ldr	r3, [r3, #32]
 800def4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800defc:	4b06      	ldr	r3, [pc, #24]	; (800df18 <HAL_RCC_GetClockConfig+0x80>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	f003 020f 	and.w	r2, r3, #15
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	601a      	str	r2, [r3, #0]
}
 800df08:	bf00      	nop
 800df0a:	370c      	adds	r7, #12
 800df0c:	46bd      	mov	sp, r7
 800df0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df12:	4770      	bx	lr
 800df14:	58024400 	.word	0x58024400
 800df18:	52002000 	.word	0x52002000

0800df1c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800df1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800df20:	b0ca      	sub	sp, #296	; 0x128
 800df22:	af00      	add	r7, sp, #0
 800df24:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800df28:	2300      	movs	r3, #0
 800df2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800df2e:	2300      	movs	r3, #0
 800df30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800df34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df3c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800df40:	2500      	movs	r5, #0
 800df42:	ea54 0305 	orrs.w	r3, r4, r5
 800df46:	d049      	beq.n	800dfdc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800df48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800df52:	d02f      	beq.n	800dfb4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800df54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800df58:	d828      	bhi.n	800dfac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800df5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800df5e:	d01a      	beq.n	800df96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800df60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800df64:	d822      	bhi.n	800dfac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800df66:	2b00      	cmp	r3, #0
 800df68:	d003      	beq.n	800df72 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800df6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df6e:	d007      	beq.n	800df80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800df70:	e01c      	b.n	800dfac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df72:	4bb8      	ldr	r3, [pc, #736]	; (800e254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800df74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df76:	4ab7      	ldr	r2, [pc, #732]	; (800e254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800df78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800df7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800df7e:	e01a      	b.n	800dfb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800df80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df84:	3308      	adds	r3, #8
 800df86:	2102      	movs	r1, #2
 800df88:	4618      	mov	r0, r3
 800df8a:	f002 fb61 	bl	8010650 <RCCEx_PLL2_Config>
 800df8e:	4603      	mov	r3, r0
 800df90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800df94:	e00f      	b.n	800dfb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800df96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df9a:	3328      	adds	r3, #40	; 0x28
 800df9c:	2102      	movs	r1, #2
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f002 fc08 	bl	80107b4 <RCCEx_PLL3_Config>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800dfaa:	e004      	b.n	800dfb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dfac:	2301      	movs	r3, #1
 800dfae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dfb2:	e000      	b.n	800dfb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800dfb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dfb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d10a      	bne.n	800dfd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800dfbe:	4ba5      	ldr	r3, [pc, #660]	; (800e254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dfc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfc2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800dfc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfcc:	4aa1      	ldr	r2, [pc, #644]	; (800e254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dfce:	430b      	orrs	r3, r1
 800dfd0:	6513      	str	r3, [r2, #80]	; 0x50
 800dfd2:	e003      	b.n	800dfdc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dfd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dfd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800dfdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800dfe8:	f04f 0900 	mov.w	r9, #0
 800dfec:	ea58 0309 	orrs.w	r3, r8, r9
 800dff0:	d047      	beq.n	800e082 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800dff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dff8:	2b04      	cmp	r3, #4
 800dffa:	d82a      	bhi.n	800e052 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800dffc:	a201      	add	r2, pc, #4	; (adr r2, 800e004 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800dffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e002:	bf00      	nop
 800e004:	0800e019 	.word	0x0800e019
 800e008:	0800e027 	.word	0x0800e027
 800e00c:	0800e03d 	.word	0x0800e03d
 800e010:	0800e05b 	.word	0x0800e05b
 800e014:	0800e05b 	.word	0x0800e05b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e018:	4b8e      	ldr	r3, [pc, #568]	; (800e254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e01c:	4a8d      	ldr	r2, [pc, #564]	; (800e254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e01e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e022:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e024:	e01a      	b.n	800e05c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e02a:	3308      	adds	r3, #8
 800e02c:	2100      	movs	r1, #0
 800e02e:	4618      	mov	r0, r3
 800e030:	f002 fb0e 	bl	8010650 <RCCEx_PLL2_Config>
 800e034:	4603      	mov	r3, r0
 800e036:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e03a:	e00f      	b.n	800e05c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e03c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e040:	3328      	adds	r3, #40	; 0x28
 800e042:	2100      	movs	r1, #0
 800e044:	4618      	mov	r0, r3
 800e046:	f002 fbb5 	bl	80107b4 <RCCEx_PLL3_Config>
 800e04a:	4603      	mov	r3, r0
 800e04c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e050:	e004      	b.n	800e05c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e052:	2301      	movs	r3, #1
 800e054:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e058:	e000      	b.n	800e05c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800e05a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e05c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e060:	2b00      	cmp	r3, #0
 800e062:	d10a      	bne.n	800e07a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e064:	4b7b      	ldr	r3, [pc, #492]	; (800e254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e068:	f023 0107 	bic.w	r1, r3, #7
 800e06c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e072:	4a78      	ldr	r2, [pc, #480]	; (800e254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e074:	430b      	orrs	r3, r1
 800e076:	6513      	str	r3, [r2, #80]	; 0x50
 800e078:	e003      	b.n	800e082 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e07a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e07e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800e082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e08a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800e08e:	f04f 0b00 	mov.w	fp, #0
 800e092:	ea5a 030b 	orrs.w	r3, sl, fp
 800e096:	d04c      	beq.n	800e132 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800e098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e09c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e09e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0a2:	d030      	beq.n	800e106 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800e0a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0a8:	d829      	bhi.n	800e0fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e0aa:	2bc0      	cmp	r3, #192	; 0xc0
 800e0ac:	d02d      	beq.n	800e10a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800e0ae:	2bc0      	cmp	r3, #192	; 0xc0
 800e0b0:	d825      	bhi.n	800e0fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e0b2:	2b80      	cmp	r3, #128	; 0x80
 800e0b4:	d018      	beq.n	800e0e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800e0b6:	2b80      	cmp	r3, #128	; 0x80
 800e0b8:	d821      	bhi.n	800e0fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d002      	beq.n	800e0c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800e0be:	2b40      	cmp	r3, #64	; 0x40
 800e0c0:	d007      	beq.n	800e0d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800e0c2:	e01c      	b.n	800e0fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e0c4:	4b63      	ldr	r3, [pc, #396]	; (800e254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0c8:	4a62      	ldr	r2, [pc, #392]	; (800e254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e0ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e0ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e0d0:	e01c      	b.n	800e10c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e0d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0d6:	3308      	adds	r3, #8
 800e0d8:	2100      	movs	r1, #0
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f002 fab8 	bl	8010650 <RCCEx_PLL2_Config>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e0e6:	e011      	b.n	800e10c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e0e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0ec:	3328      	adds	r3, #40	; 0x28
 800e0ee:	2100      	movs	r1, #0
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f002 fb5f 	bl	80107b4 <RCCEx_PLL3_Config>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e0fc:	e006      	b.n	800e10c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e0fe:	2301      	movs	r3, #1
 800e100:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e104:	e002      	b.n	800e10c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800e106:	bf00      	nop
 800e108:	e000      	b.n	800e10c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800e10a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e10c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e110:	2b00      	cmp	r3, #0
 800e112:	d10a      	bne.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800e114:	4b4f      	ldr	r3, [pc, #316]	; (800e254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e118:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800e11c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e122:	4a4c      	ldr	r2, [pc, #304]	; (800e254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e124:	430b      	orrs	r3, r1
 800e126:	6513      	str	r3, [r2, #80]	; 0x50
 800e128:	e003      	b.n	800e132 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e12a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e12e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800e132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800e13e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800e142:	2300      	movs	r3, #0
 800e144:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800e148:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800e14c:	460b      	mov	r3, r1
 800e14e:	4313      	orrs	r3, r2
 800e150:	d053      	beq.n	800e1fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800e152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e156:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e15a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e15e:	d035      	beq.n	800e1cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800e160:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e164:	d82e      	bhi.n	800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e166:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e16a:	d031      	beq.n	800e1d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800e16c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e170:	d828      	bhi.n	800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e172:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e176:	d01a      	beq.n	800e1ae <HAL_RCCEx_PeriphCLKConfig+0x292>
 800e178:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e17c:	d822      	bhi.n	800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d003      	beq.n	800e18a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800e182:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e186:	d007      	beq.n	800e198 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800e188:	e01c      	b.n	800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e18a:	4b32      	ldr	r3, [pc, #200]	; (800e254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e18e:	4a31      	ldr	r2, [pc, #196]	; (800e254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e194:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e196:	e01c      	b.n	800e1d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e19c:	3308      	adds	r3, #8
 800e19e:	2100      	movs	r1, #0
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f002 fa55 	bl	8010650 <RCCEx_PLL2_Config>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e1ac:	e011      	b.n	800e1d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e1ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1b2:	3328      	adds	r3, #40	; 0x28
 800e1b4:	2100      	movs	r1, #0
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f002 fafc 	bl	80107b4 <RCCEx_PLL3_Config>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e1c2:	e006      	b.n	800e1d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e1ca:	e002      	b.n	800e1d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800e1cc:	bf00      	nop
 800e1ce:	e000      	b.n	800e1d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800e1d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e1d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d10b      	bne.n	800e1f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e1da:	4b1e      	ldr	r3, [pc, #120]	; (800e254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e1dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e1de:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800e1e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e1ea:	4a1a      	ldr	r2, [pc, #104]	; (800e254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e1ec:	430b      	orrs	r3, r1
 800e1ee:	6593      	str	r3, [r2, #88]	; 0x58
 800e1f0:	e003      	b.n	800e1fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e1f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e1fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e202:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800e206:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e20a:	2300      	movs	r3, #0
 800e20c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800e210:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800e214:	460b      	mov	r3, r1
 800e216:	4313      	orrs	r3, r2
 800e218:	d056      	beq.n	800e2c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800e21a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e21e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e222:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e226:	d038      	beq.n	800e29a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800e228:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e22c:	d831      	bhi.n	800e292 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e22e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e232:	d034      	beq.n	800e29e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800e234:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e238:	d82b      	bhi.n	800e292 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e23a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e23e:	d01d      	beq.n	800e27c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800e240:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e244:	d825      	bhi.n	800e292 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e246:	2b00      	cmp	r3, #0
 800e248:	d006      	beq.n	800e258 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800e24a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e24e:	d00a      	beq.n	800e266 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800e250:	e01f      	b.n	800e292 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e252:	bf00      	nop
 800e254:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e258:	4ba2      	ldr	r3, [pc, #648]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e25c:	4aa1      	ldr	r2, [pc, #644]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e25e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e262:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e264:	e01c      	b.n	800e2a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e26a:	3308      	adds	r3, #8
 800e26c:	2100      	movs	r1, #0
 800e26e:	4618      	mov	r0, r3
 800e270:	f002 f9ee 	bl	8010650 <RCCEx_PLL2_Config>
 800e274:	4603      	mov	r3, r0
 800e276:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e27a:	e011      	b.n	800e2a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e27c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e280:	3328      	adds	r3, #40	; 0x28
 800e282:	2100      	movs	r1, #0
 800e284:	4618      	mov	r0, r3
 800e286:	f002 fa95 	bl	80107b4 <RCCEx_PLL3_Config>
 800e28a:	4603      	mov	r3, r0
 800e28c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e290:	e006      	b.n	800e2a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e292:	2301      	movs	r3, #1
 800e294:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e298:	e002      	b.n	800e2a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800e29a:	bf00      	nop
 800e29c:	e000      	b.n	800e2a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800e29e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e2a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d10b      	bne.n	800e2c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e2a8:	4b8e      	ldr	r3, [pc, #568]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e2aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2ac:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800e2b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e2b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e2b8:	4a8a      	ldr	r2, [pc, #552]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e2ba:	430b      	orrs	r3, r1
 800e2bc:	6593      	str	r3, [r2, #88]	; 0x58
 800e2be:	e003      	b.n	800e2c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e2c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e2c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800e2d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e2d8:	2300      	movs	r3, #0
 800e2da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e2de:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800e2e2:	460b      	mov	r3, r1
 800e2e4:	4313      	orrs	r3, r2
 800e2e6:	d03a      	beq.n	800e35e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800e2e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e2ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2ee:	2b30      	cmp	r3, #48	; 0x30
 800e2f0:	d01f      	beq.n	800e332 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800e2f2:	2b30      	cmp	r3, #48	; 0x30
 800e2f4:	d819      	bhi.n	800e32a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800e2f6:	2b20      	cmp	r3, #32
 800e2f8:	d00c      	beq.n	800e314 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800e2fa:	2b20      	cmp	r3, #32
 800e2fc:	d815      	bhi.n	800e32a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d019      	beq.n	800e336 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800e302:	2b10      	cmp	r3, #16
 800e304:	d111      	bne.n	800e32a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e306:	4b77      	ldr	r3, [pc, #476]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e30a:	4a76      	ldr	r2, [pc, #472]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e30c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e310:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800e312:	e011      	b.n	800e338 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e318:	3308      	adds	r3, #8
 800e31a:	2102      	movs	r1, #2
 800e31c:	4618      	mov	r0, r3
 800e31e:	f002 f997 	bl	8010650 <RCCEx_PLL2_Config>
 800e322:	4603      	mov	r3, r0
 800e324:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800e328:	e006      	b.n	800e338 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e32a:	2301      	movs	r3, #1
 800e32c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e330:	e002      	b.n	800e338 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800e332:	bf00      	nop
 800e334:	e000      	b.n	800e338 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800e336:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e338:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d10a      	bne.n	800e356 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e340:	4b68      	ldr	r3, [pc, #416]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e344:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800e348:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e34c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e34e:	4a65      	ldr	r2, [pc, #404]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e350:	430b      	orrs	r3, r1
 800e352:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e354:	e003      	b.n	800e35e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e356:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e35a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800e35e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e366:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800e36a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e36e:	2300      	movs	r3, #0
 800e370:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e374:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800e378:	460b      	mov	r3, r1
 800e37a:	4313      	orrs	r3, r2
 800e37c:	d051      	beq.n	800e422 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800e37e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e384:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e388:	d035      	beq.n	800e3f6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800e38a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e38e:	d82e      	bhi.n	800e3ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e390:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e394:	d031      	beq.n	800e3fa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800e396:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e39a:	d828      	bhi.n	800e3ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e39c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e3a0:	d01a      	beq.n	800e3d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800e3a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e3a6:	d822      	bhi.n	800e3ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d003      	beq.n	800e3b4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800e3ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3b0:	d007      	beq.n	800e3c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800e3b2:	e01c      	b.n	800e3ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e3b4:	4b4b      	ldr	r3, [pc, #300]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3b8:	4a4a      	ldr	r2, [pc, #296]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e3ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e3be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e3c0:	e01c      	b.n	800e3fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e3c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e3c6:	3308      	adds	r3, #8
 800e3c8:	2100      	movs	r1, #0
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f002 f940 	bl	8010650 <RCCEx_PLL2_Config>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e3d6:	e011      	b.n	800e3fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e3d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e3dc:	3328      	adds	r3, #40	; 0x28
 800e3de:	2100      	movs	r1, #0
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f002 f9e7 	bl	80107b4 <RCCEx_PLL3_Config>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e3ec:	e006      	b.n	800e3fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e3f4:	e002      	b.n	800e3fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800e3f6:	bf00      	nop
 800e3f8:	e000      	b.n	800e3fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800e3fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e3fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e400:	2b00      	cmp	r3, #0
 800e402:	d10a      	bne.n	800e41a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e404:	4b37      	ldr	r3, [pc, #220]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e408:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800e40c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e412:	4a34      	ldr	r2, [pc, #208]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e414:	430b      	orrs	r3, r1
 800e416:	6513      	str	r3, [r2, #80]	; 0x50
 800e418:	e003      	b.n	800e422 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e41a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e41e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e42a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800e42e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e432:	2300      	movs	r3, #0
 800e434:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e438:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800e43c:	460b      	mov	r3, r1
 800e43e:	4313      	orrs	r3, r2
 800e440:	d056      	beq.n	800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800e442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e44c:	d033      	beq.n	800e4b6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800e44e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e452:	d82c      	bhi.n	800e4ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e454:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e458:	d02f      	beq.n	800e4ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800e45a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e45e:	d826      	bhi.n	800e4ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e460:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e464:	d02b      	beq.n	800e4be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800e466:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e46a:	d820      	bhi.n	800e4ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e46c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e470:	d012      	beq.n	800e498 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800e472:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e476:	d81a      	bhi.n	800e4ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d022      	beq.n	800e4c2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800e47c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e480:	d115      	bne.n	800e4ae <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e486:	3308      	adds	r3, #8
 800e488:	2101      	movs	r1, #1
 800e48a:	4618      	mov	r0, r3
 800e48c:	f002 f8e0 	bl	8010650 <RCCEx_PLL2_Config>
 800e490:	4603      	mov	r3, r0
 800e492:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e496:	e015      	b.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e49c:	3328      	adds	r3, #40	; 0x28
 800e49e:	2101      	movs	r1, #1
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f002 f987 	bl	80107b4 <RCCEx_PLL3_Config>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e4ac:	e00a      	b.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e4b4:	e006      	b.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e4b6:	bf00      	nop
 800e4b8:	e004      	b.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e4ba:	bf00      	nop
 800e4bc:	e002      	b.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e4be:	bf00      	nop
 800e4c0:	e000      	b.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e4c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e4c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d10d      	bne.n	800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e4cc:	4b05      	ldr	r3, [pc, #20]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e4ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4d0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800e4d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e4d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4da:	4a02      	ldr	r2, [pc, #8]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e4dc:	430b      	orrs	r3, r1
 800e4de:	6513      	str	r3, [r2, #80]	; 0x50
 800e4e0:	e006      	b.n	800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800e4e2:	bf00      	nop
 800e4e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e4ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e4f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4f8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800e4fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e500:	2300      	movs	r3, #0
 800e502:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e506:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800e50a:	460b      	mov	r3, r1
 800e50c:	4313      	orrs	r3, r2
 800e50e:	d055      	beq.n	800e5bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800e510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e514:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e51c:	d033      	beq.n	800e586 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800e51e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e522:	d82c      	bhi.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e528:	d02f      	beq.n	800e58a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800e52a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e52e:	d826      	bhi.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e530:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e534:	d02b      	beq.n	800e58e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800e536:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e53a:	d820      	bhi.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e53c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e540:	d012      	beq.n	800e568 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800e542:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e546:	d81a      	bhi.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d022      	beq.n	800e592 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800e54c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e550:	d115      	bne.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e556:	3308      	adds	r3, #8
 800e558:	2101      	movs	r1, #1
 800e55a:	4618      	mov	r0, r3
 800e55c:	f002 f878 	bl	8010650 <RCCEx_PLL2_Config>
 800e560:	4603      	mov	r3, r0
 800e562:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e566:	e015      	b.n	800e594 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e56c:	3328      	adds	r3, #40	; 0x28
 800e56e:	2101      	movs	r1, #1
 800e570:	4618      	mov	r0, r3
 800e572:	f002 f91f 	bl	80107b4 <RCCEx_PLL3_Config>
 800e576:	4603      	mov	r3, r0
 800e578:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e57c:	e00a      	b.n	800e594 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800e57e:	2301      	movs	r3, #1
 800e580:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e584:	e006      	b.n	800e594 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e586:	bf00      	nop
 800e588:	e004      	b.n	800e594 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e58a:	bf00      	nop
 800e58c:	e002      	b.n	800e594 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e58e:	bf00      	nop
 800e590:	e000      	b.n	800e594 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e592:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e594:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d10b      	bne.n	800e5b4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e59c:	4ba3      	ldr	r3, [pc, #652]	; (800e82c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e59e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5a0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800e5a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e5ac:	4a9f      	ldr	r2, [pc, #636]	; (800e82c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e5ae:	430b      	orrs	r3, r1
 800e5b0:	6593      	str	r3, [r2, #88]	; 0x58
 800e5b2:	e003      	b.n	800e5bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e5b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e5b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e5bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800e5c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e5d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800e5d6:	460b      	mov	r3, r1
 800e5d8:	4313      	orrs	r3, r2
 800e5da:	d037      	beq.n	800e64c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800e5dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e5e6:	d00e      	beq.n	800e606 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800e5e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e5ec:	d816      	bhi.n	800e61c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d018      	beq.n	800e624 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800e5f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e5f6:	d111      	bne.n	800e61c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e5f8:	4b8c      	ldr	r3, [pc, #560]	; (800e82c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5fc:	4a8b      	ldr	r2, [pc, #556]	; (800e82c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e5fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e602:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e604:	e00f      	b.n	800e626 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e60a:	3308      	adds	r3, #8
 800e60c:	2101      	movs	r1, #1
 800e60e:	4618      	mov	r0, r3
 800e610:	f002 f81e 	bl	8010650 <RCCEx_PLL2_Config>
 800e614:	4603      	mov	r3, r0
 800e616:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e61a:	e004      	b.n	800e626 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e61c:	2301      	movs	r3, #1
 800e61e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e622:	e000      	b.n	800e626 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800e624:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e626:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d10a      	bne.n	800e644 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e62e:	4b7f      	ldr	r3, [pc, #508]	; (800e82c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e632:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800e636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e63a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e63c:	4a7b      	ldr	r2, [pc, #492]	; (800e82c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e63e:	430b      	orrs	r3, r1
 800e640:	6513      	str	r3, [r2, #80]	; 0x50
 800e642:	e003      	b.n	800e64c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e644:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e648:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e64c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e654:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800e658:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e65c:	2300      	movs	r3, #0
 800e65e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e662:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800e666:	460b      	mov	r3, r1
 800e668:	4313      	orrs	r3, r2
 800e66a:	d039      	beq.n	800e6e0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800e66c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e672:	2b03      	cmp	r3, #3
 800e674:	d81c      	bhi.n	800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800e676:	a201      	add	r2, pc, #4	; (adr r2, 800e67c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800e678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e67c:	0800e6b9 	.word	0x0800e6b9
 800e680:	0800e68d 	.word	0x0800e68d
 800e684:	0800e69b 	.word	0x0800e69b
 800e688:	0800e6b9 	.word	0x0800e6b9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e68c:	4b67      	ldr	r3, [pc, #412]	; (800e82c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e690:	4a66      	ldr	r2, [pc, #408]	; (800e82c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e696:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e698:	e00f      	b.n	800e6ba <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e69a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e69e:	3308      	adds	r3, #8
 800e6a0:	2102      	movs	r1, #2
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f001 ffd4 	bl	8010650 <RCCEx_PLL2_Config>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e6ae:	e004      	b.n	800e6ba <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e6b6:	e000      	b.n	800e6ba <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800e6b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e6ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d10a      	bne.n	800e6d8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e6c2:	4b5a      	ldr	r3, [pc, #360]	; (800e82c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e6c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6c6:	f023 0103 	bic.w	r1, r3, #3
 800e6ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6d0:	4a56      	ldr	r2, [pc, #344]	; (800e82c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e6d2:	430b      	orrs	r3, r1
 800e6d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e6d6:	e003      	b.n	800e6e0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e6dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e6e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800e6ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e6f6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800e6fa:	460b      	mov	r3, r1
 800e6fc:	4313      	orrs	r3, r2
 800e6fe:	f000 809f 	beq.w	800e840 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e702:	4b4b      	ldr	r3, [pc, #300]	; (800e830 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	4a4a      	ldr	r2, [pc, #296]	; (800e830 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e70c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e70e:	f7f6 fb41 	bl	8004d94 <HAL_GetTick>
 800e712:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e716:	e00b      	b.n	800e730 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e718:	f7f6 fb3c 	bl	8004d94 <HAL_GetTick>
 800e71c:	4602      	mov	r2, r0
 800e71e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e722:	1ad3      	subs	r3, r2, r3
 800e724:	2b64      	cmp	r3, #100	; 0x64
 800e726:	d903      	bls.n	800e730 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800e728:	2303      	movs	r3, #3
 800e72a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e72e:	e005      	b.n	800e73c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e730:	4b3f      	ldr	r3, [pc, #252]	; (800e830 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d0ed      	beq.n	800e718 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800e73c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e740:	2b00      	cmp	r3, #0
 800e742:	d179      	bne.n	800e838 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e744:	4b39      	ldr	r3, [pc, #228]	; (800e82c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e746:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e74c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e750:	4053      	eors	r3, r2
 800e752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e756:	2b00      	cmp	r3, #0
 800e758:	d015      	beq.n	800e786 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e75a:	4b34      	ldr	r3, [pc, #208]	; (800e82c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e75c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e75e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e762:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e766:	4b31      	ldr	r3, [pc, #196]	; (800e82c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e76a:	4a30      	ldr	r2, [pc, #192]	; (800e82c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e76c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e770:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e772:	4b2e      	ldr	r3, [pc, #184]	; (800e82c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e776:	4a2d      	ldr	r2, [pc, #180]	; (800e82c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e77c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e77e:	4a2b      	ldr	r2, [pc, #172]	; (800e82c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e780:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800e784:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e78a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e78e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e792:	d118      	bne.n	800e7c6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e794:	f7f6 fafe 	bl	8004d94 <HAL_GetTick>
 800e798:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e79c:	e00d      	b.n	800e7ba <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e79e:	f7f6 faf9 	bl	8004d94 <HAL_GetTick>
 800e7a2:	4602      	mov	r2, r0
 800e7a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e7a8:	1ad2      	subs	r2, r2, r3
 800e7aa:	f241 3388 	movw	r3, #5000	; 0x1388
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d903      	bls.n	800e7ba <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800e7b2:	2303      	movs	r3, #3
 800e7b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800e7b8:	e005      	b.n	800e7c6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e7ba:	4b1c      	ldr	r3, [pc, #112]	; (800e82c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e7bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7be:	f003 0302 	and.w	r3, r3, #2
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d0eb      	beq.n	800e79e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800e7c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d129      	bne.n	800e822 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e7ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e7d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e7da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e7de:	d10e      	bne.n	800e7fe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800e7e0:	4b12      	ldr	r3, [pc, #72]	; (800e82c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e7e2:	691b      	ldr	r3, [r3, #16]
 800e7e4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800e7e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e7f0:	091a      	lsrs	r2, r3, #4
 800e7f2:	4b10      	ldr	r3, [pc, #64]	; (800e834 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800e7f4:	4013      	ands	r3, r2
 800e7f6:	4a0d      	ldr	r2, [pc, #52]	; (800e82c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e7f8:	430b      	orrs	r3, r1
 800e7fa:	6113      	str	r3, [r2, #16]
 800e7fc:	e005      	b.n	800e80a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800e7fe:	4b0b      	ldr	r3, [pc, #44]	; (800e82c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e800:	691b      	ldr	r3, [r3, #16]
 800e802:	4a0a      	ldr	r2, [pc, #40]	; (800e82c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e804:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e808:	6113      	str	r3, [r2, #16]
 800e80a:	4b08      	ldr	r3, [pc, #32]	; (800e82c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e80c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e80e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e812:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e81a:	4a04      	ldr	r2, [pc, #16]	; (800e82c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e81c:	430b      	orrs	r3, r1
 800e81e:	6713      	str	r3, [r2, #112]	; 0x70
 800e820:	e00e      	b.n	800e840 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e822:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e826:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800e82a:	e009      	b.n	800e840 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800e82c:	58024400 	.word	0x58024400
 800e830:	58024800 	.word	0x58024800
 800e834:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e838:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e83c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e848:	f002 0301 	and.w	r3, r2, #1
 800e84c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e850:	2300      	movs	r3, #0
 800e852:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e856:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e85a:	460b      	mov	r3, r1
 800e85c:	4313      	orrs	r3, r2
 800e85e:	f000 8089 	beq.w	800e974 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800e862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e866:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e868:	2b28      	cmp	r3, #40	; 0x28
 800e86a:	d86b      	bhi.n	800e944 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800e86c:	a201      	add	r2, pc, #4	; (adr r2, 800e874 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e86e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e872:	bf00      	nop
 800e874:	0800e94d 	.word	0x0800e94d
 800e878:	0800e945 	.word	0x0800e945
 800e87c:	0800e945 	.word	0x0800e945
 800e880:	0800e945 	.word	0x0800e945
 800e884:	0800e945 	.word	0x0800e945
 800e888:	0800e945 	.word	0x0800e945
 800e88c:	0800e945 	.word	0x0800e945
 800e890:	0800e945 	.word	0x0800e945
 800e894:	0800e919 	.word	0x0800e919
 800e898:	0800e945 	.word	0x0800e945
 800e89c:	0800e945 	.word	0x0800e945
 800e8a0:	0800e945 	.word	0x0800e945
 800e8a4:	0800e945 	.word	0x0800e945
 800e8a8:	0800e945 	.word	0x0800e945
 800e8ac:	0800e945 	.word	0x0800e945
 800e8b0:	0800e945 	.word	0x0800e945
 800e8b4:	0800e92f 	.word	0x0800e92f
 800e8b8:	0800e945 	.word	0x0800e945
 800e8bc:	0800e945 	.word	0x0800e945
 800e8c0:	0800e945 	.word	0x0800e945
 800e8c4:	0800e945 	.word	0x0800e945
 800e8c8:	0800e945 	.word	0x0800e945
 800e8cc:	0800e945 	.word	0x0800e945
 800e8d0:	0800e945 	.word	0x0800e945
 800e8d4:	0800e94d 	.word	0x0800e94d
 800e8d8:	0800e945 	.word	0x0800e945
 800e8dc:	0800e945 	.word	0x0800e945
 800e8e0:	0800e945 	.word	0x0800e945
 800e8e4:	0800e945 	.word	0x0800e945
 800e8e8:	0800e945 	.word	0x0800e945
 800e8ec:	0800e945 	.word	0x0800e945
 800e8f0:	0800e945 	.word	0x0800e945
 800e8f4:	0800e94d 	.word	0x0800e94d
 800e8f8:	0800e945 	.word	0x0800e945
 800e8fc:	0800e945 	.word	0x0800e945
 800e900:	0800e945 	.word	0x0800e945
 800e904:	0800e945 	.word	0x0800e945
 800e908:	0800e945 	.word	0x0800e945
 800e90c:	0800e945 	.word	0x0800e945
 800e910:	0800e945 	.word	0x0800e945
 800e914:	0800e94d 	.word	0x0800e94d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e91c:	3308      	adds	r3, #8
 800e91e:	2101      	movs	r1, #1
 800e920:	4618      	mov	r0, r3
 800e922:	f001 fe95 	bl	8010650 <RCCEx_PLL2_Config>
 800e926:	4603      	mov	r3, r0
 800e928:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e92c:	e00f      	b.n	800e94e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e92e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e932:	3328      	adds	r3, #40	; 0x28
 800e934:	2101      	movs	r1, #1
 800e936:	4618      	mov	r0, r3
 800e938:	f001 ff3c 	bl	80107b4 <RCCEx_PLL3_Config>
 800e93c:	4603      	mov	r3, r0
 800e93e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e942:	e004      	b.n	800e94e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e944:	2301      	movs	r3, #1
 800e946:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e94a:	e000      	b.n	800e94e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800e94c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e94e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e952:	2b00      	cmp	r3, #0
 800e954:	d10a      	bne.n	800e96c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e956:	4bbf      	ldr	r3, [pc, #764]	; (800ec54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e95a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800e95e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e962:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e964:	4abb      	ldr	r2, [pc, #748]	; (800ec54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e966:	430b      	orrs	r3, r1
 800e968:	6553      	str	r3, [r2, #84]	; 0x54
 800e96a:	e003      	b.n	800e974 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e96c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e970:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e97c:	f002 0302 	and.w	r3, r2, #2
 800e980:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e984:	2300      	movs	r3, #0
 800e986:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e98a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800e98e:	460b      	mov	r3, r1
 800e990:	4313      	orrs	r3, r2
 800e992:	d041      	beq.n	800ea18 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e99a:	2b05      	cmp	r3, #5
 800e99c:	d824      	bhi.n	800e9e8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800e99e:	a201      	add	r2, pc, #4	; (adr r2, 800e9a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800e9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9a4:	0800e9f1 	.word	0x0800e9f1
 800e9a8:	0800e9bd 	.word	0x0800e9bd
 800e9ac:	0800e9d3 	.word	0x0800e9d3
 800e9b0:	0800e9f1 	.word	0x0800e9f1
 800e9b4:	0800e9f1 	.word	0x0800e9f1
 800e9b8:	0800e9f1 	.word	0x0800e9f1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e9bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9c0:	3308      	adds	r3, #8
 800e9c2:	2101      	movs	r1, #1
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f001 fe43 	bl	8010650 <RCCEx_PLL2_Config>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e9d0:	e00f      	b.n	800e9f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e9d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9d6:	3328      	adds	r3, #40	; 0x28
 800e9d8:	2101      	movs	r1, #1
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f001 feea 	bl	80107b4 <RCCEx_PLL3_Config>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e9e6:	e004      	b.n	800e9f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e9ee:	e000      	b.n	800e9f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800e9f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e9f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d10a      	bne.n	800ea10 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e9fa:	4b96      	ldr	r3, [pc, #600]	; (800ec54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e9fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9fe:	f023 0107 	bic.w	r1, r3, #7
 800ea02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea08:	4a92      	ldr	r2, [pc, #584]	; (800ec54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ea0a:	430b      	orrs	r3, r1
 800ea0c:	6553      	str	r3, [r2, #84]	; 0x54
 800ea0e:	e003      	b.n	800ea18 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ea18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea20:	f002 0304 	and.w	r3, r2, #4
 800ea24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ea28:	2300      	movs	r3, #0
 800ea2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ea2e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800ea32:	460b      	mov	r3, r1
 800ea34:	4313      	orrs	r3, r2
 800ea36:	d044      	beq.n	800eac2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ea38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ea40:	2b05      	cmp	r3, #5
 800ea42:	d825      	bhi.n	800ea90 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800ea44:	a201      	add	r2, pc, #4	; (adr r2, 800ea4c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800ea46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea4a:	bf00      	nop
 800ea4c:	0800ea99 	.word	0x0800ea99
 800ea50:	0800ea65 	.word	0x0800ea65
 800ea54:	0800ea7b 	.word	0x0800ea7b
 800ea58:	0800ea99 	.word	0x0800ea99
 800ea5c:	0800ea99 	.word	0x0800ea99
 800ea60:	0800ea99 	.word	0x0800ea99
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ea64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea68:	3308      	adds	r3, #8
 800ea6a:	2101      	movs	r1, #1
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f001 fdef 	bl	8010650 <RCCEx_PLL2_Config>
 800ea72:	4603      	mov	r3, r0
 800ea74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ea78:	e00f      	b.n	800ea9a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ea7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea7e:	3328      	adds	r3, #40	; 0x28
 800ea80:	2101      	movs	r1, #1
 800ea82:	4618      	mov	r0, r3
 800ea84:	f001 fe96 	bl	80107b4 <RCCEx_PLL3_Config>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ea8e:	e004      	b.n	800ea9a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ea90:	2301      	movs	r3, #1
 800ea92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ea96:	e000      	b.n	800ea9a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800ea98:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ea9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d10b      	bne.n	800eaba <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800eaa2:	4b6c      	ldr	r3, [pc, #432]	; (800ec54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800eaa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eaa6:	f023 0107 	bic.w	r1, r3, #7
 800eaaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eaae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800eab2:	4a68      	ldr	r2, [pc, #416]	; (800ec54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800eab4:	430b      	orrs	r3, r1
 800eab6:	6593      	str	r3, [r2, #88]	; 0x58
 800eab8:	e003      	b.n	800eac2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eaba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eabe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800eac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaca:	f002 0320 	and.w	r3, r2, #32
 800eace:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ead2:	2300      	movs	r3, #0
 800ead4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ead8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800eadc:	460b      	mov	r3, r1
 800eade:	4313      	orrs	r3, r2
 800eae0:	d055      	beq.n	800eb8e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800eae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eaea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800eaee:	d033      	beq.n	800eb58 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800eaf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800eaf4:	d82c      	bhi.n	800eb50 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800eaf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eafa:	d02f      	beq.n	800eb5c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800eafc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb00:	d826      	bhi.n	800eb50 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800eb02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800eb06:	d02b      	beq.n	800eb60 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800eb08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800eb0c:	d820      	bhi.n	800eb50 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800eb0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eb12:	d012      	beq.n	800eb3a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800eb14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eb18:	d81a      	bhi.n	800eb50 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d022      	beq.n	800eb64 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800eb1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eb22:	d115      	bne.n	800eb50 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eb24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb28:	3308      	adds	r3, #8
 800eb2a:	2100      	movs	r1, #0
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f001 fd8f 	bl	8010650 <RCCEx_PLL2_Config>
 800eb32:	4603      	mov	r3, r0
 800eb34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800eb38:	e015      	b.n	800eb66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800eb3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb3e:	3328      	adds	r3, #40	; 0x28
 800eb40:	2102      	movs	r1, #2
 800eb42:	4618      	mov	r0, r3
 800eb44:	f001 fe36 	bl	80107b4 <RCCEx_PLL3_Config>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800eb4e:	e00a      	b.n	800eb66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eb50:	2301      	movs	r3, #1
 800eb52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eb56:	e006      	b.n	800eb66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800eb58:	bf00      	nop
 800eb5a:	e004      	b.n	800eb66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800eb5c:	bf00      	nop
 800eb5e:	e002      	b.n	800eb66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800eb60:	bf00      	nop
 800eb62:	e000      	b.n	800eb66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800eb64:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d10b      	bne.n	800eb86 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800eb6e:	4b39      	ldr	r3, [pc, #228]	; (800ec54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800eb70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb72:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800eb76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb7e:	4a35      	ldr	r2, [pc, #212]	; (800ec54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800eb80:	430b      	orrs	r3, r1
 800eb82:	6553      	str	r3, [r2, #84]	; 0x54
 800eb84:	e003      	b.n	800eb8e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800eb8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb96:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800eb9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800eb9e:	2300      	movs	r3, #0
 800eba0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800eba4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800eba8:	460b      	mov	r3, r1
 800ebaa:	4313      	orrs	r3, r2
 800ebac:	d058      	beq.n	800ec60 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ebae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ebb6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ebba:	d033      	beq.n	800ec24 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800ebbc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ebc0:	d82c      	bhi.n	800ec1c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ebc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebc6:	d02f      	beq.n	800ec28 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800ebc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebcc:	d826      	bhi.n	800ec1c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ebce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ebd2:	d02b      	beq.n	800ec2c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800ebd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ebd8:	d820      	bhi.n	800ec1c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ebda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ebde:	d012      	beq.n	800ec06 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800ebe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ebe4:	d81a      	bhi.n	800ec1c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d022      	beq.n	800ec30 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800ebea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ebee:	d115      	bne.n	800ec1c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ebf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebf4:	3308      	adds	r3, #8
 800ebf6:	2100      	movs	r1, #0
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f001 fd29 	bl	8010650 <RCCEx_PLL2_Config>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ec04:	e015      	b.n	800ec32 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ec06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec0a:	3328      	adds	r3, #40	; 0x28
 800ec0c:	2102      	movs	r1, #2
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f001 fdd0 	bl	80107b4 <RCCEx_PLL3_Config>
 800ec14:	4603      	mov	r3, r0
 800ec16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ec1a:	e00a      	b.n	800ec32 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ec22:	e006      	b.n	800ec32 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ec24:	bf00      	nop
 800ec26:	e004      	b.n	800ec32 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ec28:	bf00      	nop
 800ec2a:	e002      	b.n	800ec32 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ec2c:	bf00      	nop
 800ec2e:	e000      	b.n	800ec32 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ec30:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d10e      	bne.n	800ec58 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ec3a:	4b06      	ldr	r3, [pc, #24]	; (800ec54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ec3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec3e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800ec42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ec4a:	4a02      	ldr	r2, [pc, #8]	; (800ec54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ec4c:	430b      	orrs	r3, r1
 800ec4e:	6593      	str	r3, [r2, #88]	; 0x58
 800ec50:	e006      	b.n	800ec60 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800ec52:	bf00      	nop
 800ec54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ec60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec68:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800ec6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ec70:	2300      	movs	r3, #0
 800ec72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ec76:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800ec7a:	460b      	mov	r3, r1
 800ec7c:	4313      	orrs	r3, r2
 800ec7e:	d055      	beq.n	800ed2c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ec80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ec88:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ec8c:	d033      	beq.n	800ecf6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800ec8e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ec92:	d82c      	bhi.n	800ecee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ec94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec98:	d02f      	beq.n	800ecfa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800ec9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec9e:	d826      	bhi.n	800ecee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800eca0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800eca4:	d02b      	beq.n	800ecfe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800eca6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ecaa:	d820      	bhi.n	800ecee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ecac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ecb0:	d012      	beq.n	800ecd8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800ecb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ecb6:	d81a      	bhi.n	800ecee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d022      	beq.n	800ed02 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800ecbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ecc0:	d115      	bne.n	800ecee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ecc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecc6:	3308      	adds	r3, #8
 800ecc8:	2100      	movs	r1, #0
 800ecca:	4618      	mov	r0, r3
 800eccc:	f001 fcc0 	bl	8010650 <RCCEx_PLL2_Config>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ecd6:	e015      	b.n	800ed04 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ecd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecdc:	3328      	adds	r3, #40	; 0x28
 800ecde:	2102      	movs	r1, #2
 800ece0:	4618      	mov	r0, r3
 800ece2:	f001 fd67 	bl	80107b4 <RCCEx_PLL3_Config>
 800ece6:	4603      	mov	r3, r0
 800ece8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ecec:	e00a      	b.n	800ed04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ecee:	2301      	movs	r3, #1
 800ecf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ecf4:	e006      	b.n	800ed04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ecf6:	bf00      	nop
 800ecf8:	e004      	b.n	800ed04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ecfa:	bf00      	nop
 800ecfc:	e002      	b.n	800ed04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ecfe:	bf00      	nop
 800ed00:	e000      	b.n	800ed04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ed02:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ed04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d10b      	bne.n	800ed24 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ed0c:	4ba1      	ldr	r3, [pc, #644]	; (800ef94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ed0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed10:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800ed14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ed1c:	4a9d      	ldr	r2, [pc, #628]	; (800ef94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ed1e:	430b      	orrs	r3, r1
 800ed20:	6593      	str	r3, [r2, #88]	; 0x58
 800ed22:	e003      	b.n	800ed2c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ed28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ed2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed34:	f002 0308 	and.w	r3, r2, #8
 800ed38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ed42:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800ed46:	460b      	mov	r3, r1
 800ed48:	4313      	orrs	r3, r2
 800ed4a:	d01e      	beq.n	800ed8a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800ed4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed58:	d10c      	bne.n	800ed74 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ed5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed5e:	3328      	adds	r3, #40	; 0x28
 800ed60:	2102      	movs	r1, #2
 800ed62:	4618      	mov	r0, r3
 800ed64:	f001 fd26 	bl	80107b4 <RCCEx_PLL3_Config>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d002      	beq.n	800ed74 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800ed6e:	2301      	movs	r3, #1
 800ed70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ed74:	4b87      	ldr	r3, [pc, #540]	; (800ef94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ed76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed78:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ed7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed84:	4a83      	ldr	r2, [pc, #524]	; (800ef94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ed86:	430b      	orrs	r3, r1
 800ed88:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ed8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed92:	f002 0310 	and.w	r3, r2, #16
 800ed96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800eda0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800eda4:	460b      	mov	r3, r1
 800eda6:	4313      	orrs	r3, r2
 800eda8:	d01e      	beq.n	800ede8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800edaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800edb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edb6:	d10c      	bne.n	800edd2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800edb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edbc:	3328      	adds	r3, #40	; 0x28
 800edbe:	2102      	movs	r1, #2
 800edc0:	4618      	mov	r0, r3
 800edc2:	f001 fcf7 	bl	80107b4 <RCCEx_PLL3_Config>
 800edc6:	4603      	mov	r3, r0
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d002      	beq.n	800edd2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800edcc:	2301      	movs	r3, #1
 800edce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800edd2:	4b70      	ldr	r3, [pc, #448]	; (800ef94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800edd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800edda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ede2:	4a6c      	ldr	r2, [pc, #432]	; (800ef94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ede4:	430b      	orrs	r3, r1
 800ede6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ede8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800edf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800edf8:	2300      	movs	r3, #0
 800edfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800edfe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800ee02:	460b      	mov	r3, r1
 800ee04:	4313      	orrs	r3, r2
 800ee06:	d03e      	beq.n	800ee86 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ee08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ee10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ee14:	d022      	beq.n	800ee5c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800ee16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ee1a:	d81b      	bhi.n	800ee54 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d003      	beq.n	800ee28 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800ee20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee24:	d00b      	beq.n	800ee3e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800ee26:	e015      	b.n	800ee54 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ee28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee2c:	3308      	adds	r3, #8
 800ee2e:	2100      	movs	r1, #0
 800ee30:	4618      	mov	r0, r3
 800ee32:	f001 fc0d 	bl	8010650 <RCCEx_PLL2_Config>
 800ee36:	4603      	mov	r3, r0
 800ee38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ee3c:	e00f      	b.n	800ee5e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ee3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee42:	3328      	adds	r3, #40	; 0x28
 800ee44:	2102      	movs	r1, #2
 800ee46:	4618      	mov	r0, r3
 800ee48:	f001 fcb4 	bl	80107b4 <RCCEx_PLL3_Config>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ee52:	e004      	b.n	800ee5e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ee54:	2301      	movs	r3, #1
 800ee56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ee5a:	e000      	b.n	800ee5e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800ee5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ee5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d10b      	bne.n	800ee7e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ee66:	4b4b      	ldr	r3, [pc, #300]	; (800ef94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ee68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee6a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ee6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ee76:	4a47      	ldr	r2, [pc, #284]	; (800ef94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ee78:	430b      	orrs	r3, r1
 800ee7a:	6593      	str	r3, [r2, #88]	; 0x58
 800ee7c:	e003      	b.n	800ee86 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ee86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee8e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800ee92:	67bb      	str	r3, [r7, #120]	; 0x78
 800ee94:	2300      	movs	r3, #0
 800ee96:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ee98:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800ee9c:	460b      	mov	r3, r1
 800ee9e:	4313      	orrs	r3, r2
 800eea0:	d03b      	beq.n	800ef1a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800eea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eeaa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800eeae:	d01f      	beq.n	800eef0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800eeb0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800eeb4:	d818      	bhi.n	800eee8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800eeb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eeba:	d003      	beq.n	800eec4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800eebc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eec0:	d007      	beq.n	800eed2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800eec2:	e011      	b.n	800eee8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eec4:	4b33      	ldr	r3, [pc, #204]	; (800ef94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eec8:	4a32      	ldr	r2, [pc, #200]	; (800ef94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eeca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eece:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800eed0:	e00f      	b.n	800eef2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eed6:	3328      	adds	r3, #40	; 0x28
 800eed8:	2101      	movs	r1, #1
 800eeda:	4618      	mov	r0, r3
 800eedc:	f001 fc6a 	bl	80107b4 <RCCEx_PLL3_Config>
 800eee0:	4603      	mov	r3, r0
 800eee2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800eee6:	e004      	b.n	800eef2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eee8:	2301      	movs	r3, #1
 800eeea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eeee:	e000      	b.n	800eef2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800eef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eef2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d10b      	bne.n	800ef12 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800eefa:	4b26      	ldr	r3, [pc, #152]	; (800ef94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eefc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eefe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ef02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef0a:	4a22      	ldr	r2, [pc, #136]	; (800ef94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ef0c:	430b      	orrs	r3, r1
 800ef0e:	6553      	str	r3, [r2, #84]	; 0x54
 800ef10:	e003      	b.n	800ef1a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ef1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef22:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800ef26:	673b      	str	r3, [r7, #112]	; 0x70
 800ef28:	2300      	movs	r3, #0
 800ef2a:	677b      	str	r3, [r7, #116]	; 0x74
 800ef2c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800ef30:	460b      	mov	r3, r1
 800ef32:	4313      	orrs	r3, r2
 800ef34:	d034      	beq.n	800efa0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ef36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d003      	beq.n	800ef48 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800ef40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef44:	d007      	beq.n	800ef56 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800ef46:	e011      	b.n	800ef6c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ef48:	4b12      	ldr	r3, [pc, #72]	; (800ef94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ef4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef4c:	4a11      	ldr	r2, [pc, #68]	; (800ef94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ef4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ef52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ef54:	e00e      	b.n	800ef74 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ef56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef5a:	3308      	adds	r3, #8
 800ef5c:	2102      	movs	r1, #2
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f001 fb76 	bl	8010650 <RCCEx_PLL2_Config>
 800ef64:	4603      	mov	r3, r0
 800ef66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ef6a:	e003      	b.n	800ef74 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ef72:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d10d      	bne.n	800ef98 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ef7c:	4b05      	ldr	r3, [pc, #20]	; (800ef94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ef7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ef84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef8a:	4a02      	ldr	r2, [pc, #8]	; (800ef94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ef8c:	430b      	orrs	r3, r1
 800ef8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ef90:	e006      	b.n	800efa0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800ef92:	bf00      	nop
 800ef94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800efa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800efac:	66bb      	str	r3, [r7, #104]	; 0x68
 800efae:	2300      	movs	r3, #0
 800efb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800efb2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800efb6:	460b      	mov	r3, r1
 800efb8:	4313      	orrs	r3, r2
 800efba:	d00c      	beq.n	800efd6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800efbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efc0:	3328      	adds	r3, #40	; 0x28
 800efc2:	2102      	movs	r1, #2
 800efc4:	4618      	mov	r0, r3
 800efc6:	f001 fbf5 	bl	80107b4 <RCCEx_PLL3_Config>
 800efca:	4603      	mov	r3, r0
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d002      	beq.n	800efd6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800efd0:	2301      	movs	r3, #1
 800efd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800efd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efde:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800efe2:	663b      	str	r3, [r7, #96]	; 0x60
 800efe4:	2300      	movs	r3, #0
 800efe6:	667b      	str	r3, [r7, #100]	; 0x64
 800efe8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800efec:	460b      	mov	r3, r1
 800efee:	4313      	orrs	r3, r2
 800eff0:	d038      	beq.n	800f064 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800eff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800effa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800effe:	d018      	beq.n	800f032 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800f000:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f004:	d811      	bhi.n	800f02a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800f006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f00a:	d014      	beq.n	800f036 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800f00c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f010:	d80b      	bhi.n	800f02a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800f012:	2b00      	cmp	r3, #0
 800f014:	d011      	beq.n	800f03a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800f016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f01a:	d106      	bne.n	800f02a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f01c:	4bc3      	ldr	r3, [pc, #780]	; (800f32c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f020:	4ac2      	ldr	r2, [pc, #776]	; (800f32c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f026:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800f028:	e008      	b.n	800f03c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f02a:	2301      	movs	r3, #1
 800f02c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f030:	e004      	b.n	800f03c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f032:	bf00      	nop
 800f034:	e002      	b.n	800f03c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f036:	bf00      	nop
 800f038:	e000      	b.n	800f03c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f03a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f03c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f040:	2b00      	cmp	r3, #0
 800f042:	d10b      	bne.n	800f05c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f044:	4bb9      	ldr	r3, [pc, #740]	; (800f32c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f048:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f04c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f054:	4ab5      	ldr	r2, [pc, #724]	; (800f32c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f056:	430b      	orrs	r3, r1
 800f058:	6553      	str	r3, [r2, #84]	; 0x54
 800f05a:	e003      	b.n	800f064 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f05c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f060:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800f064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f06c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800f070:	65bb      	str	r3, [r7, #88]	; 0x58
 800f072:	2300      	movs	r3, #0
 800f074:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f076:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800f07a:	460b      	mov	r3, r1
 800f07c:	4313      	orrs	r3, r2
 800f07e:	d009      	beq.n	800f094 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800f080:	4baa      	ldr	r3, [pc, #680]	; (800f32c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f084:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f08c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f08e:	4aa7      	ldr	r2, [pc, #668]	; (800f32c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f090:	430b      	orrs	r3, r1
 800f092:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800f094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f09c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800f0a0:	653b      	str	r3, [r7, #80]	; 0x50
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	657b      	str	r3, [r7, #84]	; 0x54
 800f0a6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800f0aa:	460b      	mov	r3, r1
 800f0ac:	4313      	orrs	r3, r2
 800f0ae:	d00a      	beq.n	800f0c6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800f0b0:	4b9e      	ldr	r3, [pc, #632]	; (800f32c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f0b2:	691b      	ldr	r3, [r3, #16]
 800f0b4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800f0b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f0c0:	4a9a      	ldr	r2, [pc, #616]	; (800f32c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f0c2:	430b      	orrs	r3, r1
 800f0c4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f0c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ce:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800f0d2:	64bb      	str	r3, [r7, #72]	; 0x48
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f0d8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800f0dc:	460b      	mov	r3, r1
 800f0de:	4313      	orrs	r3, r2
 800f0e0:	d009      	beq.n	800f0f6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f0e2:	4b92      	ldr	r3, [pc, #584]	; (800f32c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f0e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0e6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800f0ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0f0:	4a8e      	ldr	r2, [pc, #568]	; (800f32c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f0f2:	430b      	orrs	r3, r1
 800f0f4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800f0f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0fe:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800f102:	643b      	str	r3, [r7, #64]	; 0x40
 800f104:	2300      	movs	r3, #0
 800f106:	647b      	str	r3, [r7, #68]	; 0x44
 800f108:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800f10c:	460b      	mov	r3, r1
 800f10e:	4313      	orrs	r3, r2
 800f110:	d00e      	beq.n	800f130 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f112:	4b86      	ldr	r3, [pc, #536]	; (800f32c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f114:	691b      	ldr	r3, [r3, #16]
 800f116:	4a85      	ldr	r2, [pc, #532]	; (800f32c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f118:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f11c:	6113      	str	r3, [r2, #16]
 800f11e:	4b83      	ldr	r3, [pc, #524]	; (800f32c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f120:	6919      	ldr	r1, [r3, #16]
 800f122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f126:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f12a:	4a80      	ldr	r2, [pc, #512]	; (800f32c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f12c:	430b      	orrs	r3, r1
 800f12e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800f130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f138:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800f13c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f13e:	2300      	movs	r3, #0
 800f140:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f142:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800f146:	460b      	mov	r3, r1
 800f148:	4313      	orrs	r3, r2
 800f14a:	d009      	beq.n	800f160 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800f14c:	4b77      	ldr	r3, [pc, #476]	; (800f32c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f14e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f150:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800f154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f15a:	4a74      	ldr	r2, [pc, #464]	; (800f32c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f15c:	430b      	orrs	r3, r1
 800f15e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f168:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800f16c:	633b      	str	r3, [r7, #48]	; 0x30
 800f16e:	2300      	movs	r3, #0
 800f170:	637b      	str	r3, [r7, #52]	; 0x34
 800f172:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800f176:	460b      	mov	r3, r1
 800f178:	4313      	orrs	r3, r2
 800f17a:	d00a      	beq.n	800f192 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f17c:	4b6b      	ldr	r3, [pc, #428]	; (800f32c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f17e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f180:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800f184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f18c:	4a67      	ldr	r2, [pc, #412]	; (800f32c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f18e:	430b      	orrs	r3, r1
 800f190:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800f192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f19a:	2100      	movs	r1, #0
 800f19c:	62b9      	str	r1, [r7, #40]	; 0x28
 800f19e:	f003 0301 	and.w	r3, r3, #1
 800f1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f1a4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800f1a8:	460b      	mov	r3, r1
 800f1aa:	4313      	orrs	r3, r2
 800f1ac:	d011      	beq.n	800f1d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f1ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1b2:	3308      	adds	r3, #8
 800f1b4:	2100      	movs	r1, #0
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f001 fa4a 	bl	8010650 <RCCEx_PLL2_Config>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800f1c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d003      	beq.n	800f1d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f1ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f1ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800f1d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1da:	2100      	movs	r1, #0
 800f1dc:	6239      	str	r1, [r7, #32]
 800f1de:	f003 0302 	and.w	r3, r3, #2
 800f1e2:	627b      	str	r3, [r7, #36]	; 0x24
 800f1e4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800f1e8:	460b      	mov	r3, r1
 800f1ea:	4313      	orrs	r3, r2
 800f1ec:	d011      	beq.n	800f212 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f1ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1f2:	3308      	adds	r3, #8
 800f1f4:	2101      	movs	r1, #1
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f001 fa2a 	bl	8010650 <RCCEx_PLL2_Config>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800f202:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f206:	2b00      	cmp	r3, #0
 800f208:	d003      	beq.n	800f212 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f20a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f20e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800f212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f21a:	2100      	movs	r1, #0
 800f21c:	61b9      	str	r1, [r7, #24]
 800f21e:	f003 0304 	and.w	r3, r3, #4
 800f222:	61fb      	str	r3, [r7, #28]
 800f224:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800f228:	460b      	mov	r3, r1
 800f22a:	4313      	orrs	r3, r2
 800f22c:	d011      	beq.n	800f252 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f22e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f232:	3308      	adds	r3, #8
 800f234:	2102      	movs	r1, #2
 800f236:	4618      	mov	r0, r3
 800f238:	f001 fa0a 	bl	8010650 <RCCEx_PLL2_Config>
 800f23c:	4603      	mov	r3, r0
 800f23e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800f242:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f246:	2b00      	cmp	r3, #0
 800f248:	d003      	beq.n	800f252 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f24a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f24e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800f252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f25a:	2100      	movs	r1, #0
 800f25c:	6139      	str	r1, [r7, #16]
 800f25e:	f003 0308 	and.w	r3, r3, #8
 800f262:	617b      	str	r3, [r7, #20]
 800f264:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f268:	460b      	mov	r3, r1
 800f26a:	4313      	orrs	r3, r2
 800f26c:	d011      	beq.n	800f292 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f26e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f272:	3328      	adds	r3, #40	; 0x28
 800f274:	2100      	movs	r1, #0
 800f276:	4618      	mov	r0, r3
 800f278:	f001 fa9c 	bl	80107b4 <RCCEx_PLL3_Config>
 800f27c:	4603      	mov	r3, r0
 800f27e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800f282:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f286:	2b00      	cmp	r3, #0
 800f288:	d003      	beq.n	800f292 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f28a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f28e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800f292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f29a:	2100      	movs	r1, #0
 800f29c:	60b9      	str	r1, [r7, #8]
 800f29e:	f003 0310 	and.w	r3, r3, #16
 800f2a2:	60fb      	str	r3, [r7, #12]
 800f2a4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f2a8:	460b      	mov	r3, r1
 800f2aa:	4313      	orrs	r3, r2
 800f2ac:	d011      	beq.n	800f2d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f2ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2b2:	3328      	adds	r3, #40	; 0x28
 800f2b4:	2101      	movs	r1, #1
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f001 fa7c 	bl	80107b4 <RCCEx_PLL3_Config>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800f2c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d003      	beq.n	800f2d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f2ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f2ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800f2d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2da:	2100      	movs	r1, #0
 800f2dc:	6039      	str	r1, [r7, #0]
 800f2de:	f003 0320 	and.w	r3, r3, #32
 800f2e2:	607b      	str	r3, [r7, #4]
 800f2e4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f2e8:	460b      	mov	r3, r1
 800f2ea:	4313      	orrs	r3, r2
 800f2ec:	d011      	beq.n	800f312 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f2ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2f2:	3328      	adds	r3, #40	; 0x28
 800f2f4:	2102      	movs	r1, #2
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f001 fa5c 	bl	80107b4 <RCCEx_PLL3_Config>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800f302:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f306:	2b00      	cmp	r3, #0
 800f308:	d003      	beq.n	800f312 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f30a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f30e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800f312:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800f316:	2b00      	cmp	r3, #0
 800f318:	d101      	bne.n	800f31e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800f31a:	2300      	movs	r3, #0
 800f31c:	e000      	b.n	800f320 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800f31e:	2301      	movs	r3, #1
}
 800f320:	4618      	mov	r0, r3
 800f322:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800f326:	46bd      	mov	sp, r7
 800f328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f32c:	58024400 	.word	0x58024400

0800f330 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b090      	sub	sp, #64	; 0x40
 800f334:	af00      	add	r7, sp, #0
 800f336:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800f33a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f33e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800f342:	430b      	orrs	r3, r1
 800f344:	f040 8094 	bne.w	800f470 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800f348:	4b9e      	ldr	r3, [pc, #632]	; (800f5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f34a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f34c:	f003 0307 	and.w	r3, r3, #7
 800f350:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f354:	2b04      	cmp	r3, #4
 800f356:	f200 8087 	bhi.w	800f468 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800f35a:	a201      	add	r2, pc, #4	; (adr r2, 800f360 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800f35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f360:	0800f375 	.word	0x0800f375
 800f364:	0800f39d 	.word	0x0800f39d
 800f368:	0800f3c5 	.word	0x0800f3c5
 800f36c:	0800f461 	.word	0x0800f461
 800f370:	0800f3ed 	.word	0x0800f3ed
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f374:	4b93      	ldr	r3, [pc, #588]	; (800f5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f37c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f380:	d108      	bne.n	800f394 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f386:	4618      	mov	r0, r3
 800f388:	f001 f810 	bl	80103ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f38e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f390:	f000 bd45 	b.w	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f394:	2300      	movs	r3, #0
 800f396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f398:	f000 bd41 	b.w	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f39c:	4b89      	ldr	r3, [pc, #548]	; (800f5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f3a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f3a8:	d108      	bne.n	800f3bc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3aa:	f107 0318 	add.w	r3, r7, #24
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f000 fd54 	bl	800fe5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f3b4:	69bb      	ldr	r3, [r7, #24]
 800f3b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f3b8:	f000 bd31 	b.w	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f3bc:	2300      	movs	r3, #0
 800f3be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3c0:	f000 bd2d 	b.w	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f3c4:	4b7f      	ldr	r3, [pc, #508]	; (800f5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f3cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f3d0:	d108      	bne.n	800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3d2:	f107 030c 	add.w	r3, r7, #12
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f000 fe94 	bl	8010104 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f3e0:	f000 bd1d 	b.w	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3e8:	f000 bd19 	b.w	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f3ec:	4b75      	ldr	r3, [pc, #468]	; (800f5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f3ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f3f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f3f4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f3f6:	4b73      	ldr	r3, [pc, #460]	; (800f5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	f003 0304 	and.w	r3, r3, #4
 800f3fe:	2b04      	cmp	r3, #4
 800f400:	d10c      	bne.n	800f41c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800f402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f404:	2b00      	cmp	r3, #0
 800f406:	d109      	bne.n	800f41c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f408:	4b6e      	ldr	r3, [pc, #440]	; (800f5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	08db      	lsrs	r3, r3, #3
 800f40e:	f003 0303 	and.w	r3, r3, #3
 800f412:	4a6d      	ldr	r2, [pc, #436]	; (800f5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f414:	fa22 f303 	lsr.w	r3, r2, r3
 800f418:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f41a:	e01f      	b.n	800f45c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f41c:	4b69      	ldr	r3, [pc, #420]	; (800f5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f428:	d106      	bne.n	800f438 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800f42a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f42c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f430:	d102      	bne.n	800f438 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f432:	4b66      	ldr	r3, [pc, #408]	; (800f5cc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800f434:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f436:	e011      	b.n	800f45c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f438:	4b62      	ldr	r3, [pc, #392]	; (800f5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f440:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f444:	d106      	bne.n	800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800f446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f44c:	d102      	bne.n	800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f44e:	4b60      	ldr	r3, [pc, #384]	; (800f5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800f450:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f452:	e003      	b.n	800f45c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f454:	2300      	movs	r3, #0
 800f456:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f458:	f000 bce1 	b.w	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f45c:	f000 bcdf 	b.w	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f460:	4b5c      	ldr	r3, [pc, #368]	; (800f5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800f462:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f464:	f000 bcdb 	b.w	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f468:	2300      	movs	r3, #0
 800f46a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f46c:	f000 bcd7 	b.w	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800f470:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f474:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800f478:	430b      	orrs	r3, r1
 800f47a:	f040 80ad 	bne.w	800f5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800f47e:	4b51      	ldr	r3, [pc, #324]	; (800f5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f482:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800f486:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f48a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f48e:	d056      	beq.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800f490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f496:	f200 8090 	bhi.w	800f5ba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f49c:	2bc0      	cmp	r3, #192	; 0xc0
 800f49e:	f000 8088 	beq.w	800f5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800f4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4a4:	2bc0      	cmp	r3, #192	; 0xc0
 800f4a6:	f200 8088 	bhi.w	800f5ba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ac:	2b80      	cmp	r3, #128	; 0x80
 800f4ae:	d032      	beq.n	800f516 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800f4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b2:	2b80      	cmp	r3, #128	; 0x80
 800f4b4:	f200 8081 	bhi.w	800f5ba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d003      	beq.n	800f4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800f4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c0:	2b40      	cmp	r3, #64	; 0x40
 800f4c2:	d014      	beq.n	800f4ee <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800f4c4:	e079      	b.n	800f5ba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f4c6:	4b3f      	ldr	r3, [pc, #252]	; (800f5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f4ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f4d2:	d108      	bne.n	800f4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f4d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f000 ff67 	bl	80103ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f4e2:	f000 bc9c 	b.w	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4ea:	f000 bc98 	b.w	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f4ee:	4b35      	ldr	r3, [pc, #212]	; (800f5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f4f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f4fa:	d108      	bne.n	800f50e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f4fc:	f107 0318 	add.w	r3, r7, #24
 800f500:	4618      	mov	r0, r3
 800f502:	f000 fcab 	bl	800fe5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f506:	69bb      	ldr	r3, [r7, #24]
 800f508:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f50a:	f000 bc88 	b.w	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f50e:	2300      	movs	r3, #0
 800f510:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f512:	f000 bc84 	b.w	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f516:	4b2b      	ldr	r3, [pc, #172]	; (800f5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f51e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f522:	d108      	bne.n	800f536 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f524:	f107 030c 	add.w	r3, r7, #12
 800f528:	4618      	mov	r0, r3
 800f52a:	f000 fdeb 	bl	8010104 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f532:	f000 bc74 	b.w	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f536:	2300      	movs	r3, #0
 800f538:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f53a:	f000 bc70 	b.w	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f53e:	4b21      	ldr	r3, [pc, #132]	; (800f5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f542:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f546:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f548:	4b1e      	ldr	r3, [pc, #120]	; (800f5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	f003 0304 	and.w	r3, r3, #4
 800f550:	2b04      	cmp	r3, #4
 800f552:	d10c      	bne.n	800f56e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800f554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f556:	2b00      	cmp	r3, #0
 800f558:	d109      	bne.n	800f56e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f55a:	4b1a      	ldr	r3, [pc, #104]	; (800f5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	08db      	lsrs	r3, r3, #3
 800f560:	f003 0303 	and.w	r3, r3, #3
 800f564:	4a18      	ldr	r2, [pc, #96]	; (800f5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f566:	fa22 f303 	lsr.w	r3, r2, r3
 800f56a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f56c:	e01f      	b.n	800f5ae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f56e:	4b15      	ldr	r3, [pc, #84]	; (800f5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f57a:	d106      	bne.n	800f58a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800f57c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f57e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f582:	d102      	bne.n	800f58a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f584:	4b11      	ldr	r3, [pc, #68]	; (800f5cc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800f586:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f588:	e011      	b.n	800f5ae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f58a:	4b0e      	ldr	r3, [pc, #56]	; (800f5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f592:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f596:	d106      	bne.n	800f5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800f598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f59a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f59e:	d102      	bne.n	800f5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f5a0:	4b0b      	ldr	r3, [pc, #44]	; (800f5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800f5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5a4:	e003      	b.n	800f5ae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f5aa:	f000 bc38 	b.w	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f5ae:	f000 bc36 	b.w	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f5b2:	4b08      	ldr	r3, [pc, #32]	; (800f5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800f5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5b6:	f000 bc32 	b.w	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5be:	f000 bc2e 	b.w	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f5c2:	bf00      	nop
 800f5c4:	58024400 	.word	0x58024400
 800f5c8:	03d09000 	.word	0x03d09000
 800f5cc:	003d0900 	.word	0x003d0900
 800f5d0:	017d7840 	.word	0x017d7840
 800f5d4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800f5d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5dc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800f5e0:	430b      	orrs	r3, r1
 800f5e2:	f040 809c 	bne.w	800f71e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800f5e6:	4b9e      	ldr	r3, [pc, #632]	; (800f860 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f5e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5ea:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800f5ee:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f5f6:	d054      	beq.n	800f6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800f5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f5fe:	f200 808b 	bhi.w	800f718 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800f602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f604:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f608:	f000 8083 	beq.w	800f712 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800f60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f60e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f612:	f200 8081 	bhi.w	800f718 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800f616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f618:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f61c:	d02f      	beq.n	800f67e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800f61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f620:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f624:	d878      	bhi.n	800f718 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800f626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d004      	beq.n	800f636 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800f62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f62e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f632:	d012      	beq.n	800f65a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800f634:	e070      	b.n	800f718 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f636:	4b8a      	ldr	r3, [pc, #552]	; (800f860 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f63e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f642:	d107      	bne.n	800f654 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f648:	4618      	mov	r0, r3
 800f64a:	f000 feaf 	bl	80103ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f650:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f652:	e3e4      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f654:	2300      	movs	r3, #0
 800f656:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f658:	e3e1      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f65a:	4b81      	ldr	r3, [pc, #516]	; (800f860 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f662:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f666:	d107      	bne.n	800f678 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f668:	f107 0318 	add.w	r3, r7, #24
 800f66c:	4618      	mov	r0, r3
 800f66e:	f000 fbf5 	bl	800fe5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f672:	69bb      	ldr	r3, [r7, #24]
 800f674:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f676:	e3d2      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f678:	2300      	movs	r3, #0
 800f67a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f67c:	e3cf      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f67e:	4b78      	ldr	r3, [pc, #480]	; (800f860 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f68a:	d107      	bne.n	800f69c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f68c:	f107 030c 	add.w	r3, r7, #12
 800f690:	4618      	mov	r0, r3
 800f692:	f000 fd37 	bl	8010104 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f69a:	e3c0      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f69c:	2300      	movs	r3, #0
 800f69e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6a0:	e3bd      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f6a2:	4b6f      	ldr	r3, [pc, #444]	; (800f860 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f6a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f6a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f6aa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f6ac:	4b6c      	ldr	r3, [pc, #432]	; (800f860 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	f003 0304 	and.w	r3, r3, #4
 800f6b4:	2b04      	cmp	r3, #4
 800f6b6:	d10c      	bne.n	800f6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800f6b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d109      	bne.n	800f6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f6be:	4b68      	ldr	r3, [pc, #416]	; (800f860 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	08db      	lsrs	r3, r3, #3
 800f6c4:	f003 0303 	and.w	r3, r3, #3
 800f6c8:	4a66      	ldr	r2, [pc, #408]	; (800f864 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f6ca:	fa22 f303 	lsr.w	r3, r2, r3
 800f6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f6d0:	e01e      	b.n	800f710 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f6d2:	4b63      	ldr	r3, [pc, #396]	; (800f860 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f6de:	d106      	bne.n	800f6ee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800f6e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f6e6:	d102      	bne.n	800f6ee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f6e8:	4b5f      	ldr	r3, [pc, #380]	; (800f868 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800f6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f6ec:	e010      	b.n	800f710 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f6ee:	4b5c      	ldr	r3, [pc, #368]	; (800f860 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f6f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f6fa:	d106      	bne.n	800f70a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800f6fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f702:	d102      	bne.n	800f70a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f704:	4b59      	ldr	r3, [pc, #356]	; (800f86c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800f706:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f708:	e002      	b.n	800f710 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f70a:	2300      	movs	r3, #0
 800f70c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f70e:	e386      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f710:	e385      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f712:	4b57      	ldr	r3, [pc, #348]	; (800f870 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f714:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f716:	e382      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f718:	2300      	movs	r3, #0
 800f71a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f71c:	e37f      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800f71e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f722:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800f726:	430b      	orrs	r3, r1
 800f728:	f040 80a7 	bne.w	800f87a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800f72c:	4b4c      	ldr	r3, [pc, #304]	; (800f860 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f72e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f730:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800f734:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f738:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f73c:	d055      	beq.n	800f7ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800f73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f740:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f744:	f200 8096 	bhi.w	800f874 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f74a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f74e:	f000 8084 	beq.w	800f85a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800f752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f754:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f758:	f200 808c 	bhi.w	800f874 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f75e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f762:	d030      	beq.n	800f7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800f764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f766:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f76a:	f200 8083 	bhi.w	800f874 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f770:	2b00      	cmp	r3, #0
 800f772:	d004      	beq.n	800f77e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800f774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f776:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f77a:	d012      	beq.n	800f7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800f77c:	e07a      	b.n	800f874 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f77e:	4b38      	ldr	r3, [pc, #224]	; (800f860 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f786:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f78a:	d107      	bne.n	800f79c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f78c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f790:	4618      	mov	r0, r3
 800f792:	f000 fe0b 	bl	80103ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f798:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f79a:	e340      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f79c:	2300      	movs	r3, #0
 800f79e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7a0:	e33d      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f7a2:	4b2f      	ldr	r3, [pc, #188]	; (800f860 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f7aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f7ae:	d107      	bne.n	800f7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f7b0:	f107 0318 	add.w	r3, r7, #24
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f000 fb51 	bl	800fe5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f7ba:	69bb      	ldr	r3, [r7, #24]
 800f7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f7be:	e32e      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7c4:	e32b      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f7c6:	4b26      	ldr	r3, [pc, #152]	; (800f860 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f7ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f7d2:	d107      	bne.n	800f7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f7d4:	f107 030c 	add.w	r3, r7, #12
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f000 fc93 	bl	8010104 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f7e2:	e31c      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7e8:	e319      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f7ea:	4b1d      	ldr	r3, [pc, #116]	; (800f860 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f7ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f7f2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f7f4:	4b1a      	ldr	r3, [pc, #104]	; (800f860 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	f003 0304 	and.w	r3, r3, #4
 800f7fc:	2b04      	cmp	r3, #4
 800f7fe:	d10c      	bne.n	800f81a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800f800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f802:	2b00      	cmp	r3, #0
 800f804:	d109      	bne.n	800f81a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f806:	4b16      	ldr	r3, [pc, #88]	; (800f860 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	08db      	lsrs	r3, r3, #3
 800f80c:	f003 0303 	and.w	r3, r3, #3
 800f810:	4a14      	ldr	r2, [pc, #80]	; (800f864 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f812:	fa22 f303 	lsr.w	r3, r2, r3
 800f816:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f818:	e01e      	b.n	800f858 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f81a:	4b11      	ldr	r3, [pc, #68]	; (800f860 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f826:	d106      	bne.n	800f836 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800f828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f82a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f82e:	d102      	bne.n	800f836 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f830:	4b0d      	ldr	r3, [pc, #52]	; (800f868 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800f832:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f834:	e010      	b.n	800f858 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f836:	4b0a      	ldr	r3, [pc, #40]	; (800f860 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f83e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f842:	d106      	bne.n	800f852 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800f844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f846:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f84a:	d102      	bne.n	800f852 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f84c:	4b07      	ldr	r3, [pc, #28]	; (800f86c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800f84e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f850:	e002      	b.n	800f858 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f852:	2300      	movs	r3, #0
 800f854:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f856:	e2e2      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f858:	e2e1      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f85a:	4b05      	ldr	r3, [pc, #20]	; (800f870 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f85c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f85e:	e2de      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f860:	58024400 	.word	0x58024400
 800f864:	03d09000 	.word	0x03d09000
 800f868:	003d0900 	.word	0x003d0900
 800f86c:	017d7840 	.word	0x017d7840
 800f870:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800f874:	2300      	movs	r3, #0
 800f876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f878:	e2d1      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800f87a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f87e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800f882:	430b      	orrs	r3, r1
 800f884:	f040 809c 	bne.w	800f9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800f888:	4b93      	ldr	r3, [pc, #588]	; (800fad8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f88a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f88c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800f890:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f894:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f898:	d054      	beq.n	800f944 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800f89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f89c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f8a0:	f200 808b 	bhi.w	800f9ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f8aa:	f000 8083 	beq.w	800f9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800f8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f8b4:	f200 8081 	bhi.w	800f9ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f8be:	d02f      	beq.n	800f920 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800f8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f8c6:	d878      	bhi.n	800f9ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d004      	beq.n	800f8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800f8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f8d4:	d012      	beq.n	800f8fc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800f8d6:	e070      	b.n	800f9ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f8d8:	4b7f      	ldr	r3, [pc, #508]	; (800fad8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f8e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f8e4:	d107      	bne.n	800f8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f8e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f000 fd5e 	bl	80103ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8f4:	e293      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f8fa:	e290      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f8fc:	4b76      	ldr	r3, [pc, #472]	; (800fad8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f904:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f908:	d107      	bne.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f90a:	f107 0318 	add.w	r3, r7, #24
 800f90e:	4618      	mov	r0, r3
 800f910:	f000 faa4 	bl	800fe5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f914:	69bb      	ldr	r3, [r7, #24]
 800f916:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f918:	e281      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f91a:	2300      	movs	r3, #0
 800f91c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f91e:	e27e      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f920:	4b6d      	ldr	r3, [pc, #436]	; (800fad8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f92c:	d107      	bne.n	800f93e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f92e:	f107 030c 	add.w	r3, r7, #12
 800f932:	4618      	mov	r0, r3
 800f934:	f000 fbe6 	bl	8010104 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f93c:	e26f      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f93e:	2300      	movs	r3, #0
 800f940:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f942:	e26c      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f944:	4b64      	ldr	r3, [pc, #400]	; (800fad8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f948:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f94c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f94e:	4b62      	ldr	r3, [pc, #392]	; (800fad8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	f003 0304 	and.w	r3, r3, #4
 800f956:	2b04      	cmp	r3, #4
 800f958:	d10c      	bne.n	800f974 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800f95a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d109      	bne.n	800f974 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f960:	4b5d      	ldr	r3, [pc, #372]	; (800fad8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	08db      	lsrs	r3, r3, #3
 800f966:	f003 0303 	and.w	r3, r3, #3
 800f96a:	4a5c      	ldr	r2, [pc, #368]	; (800fadc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f96c:	fa22 f303 	lsr.w	r3, r2, r3
 800f970:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f972:	e01e      	b.n	800f9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f974:	4b58      	ldr	r3, [pc, #352]	; (800fad8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f97c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f980:	d106      	bne.n	800f990 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800f982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f984:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f988:	d102      	bne.n	800f990 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f98a:	4b55      	ldr	r3, [pc, #340]	; (800fae0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f98c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f98e:	e010      	b.n	800f9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f990:	4b51      	ldr	r3, [pc, #324]	; (800fad8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f998:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f99c:	d106      	bne.n	800f9ac <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800f99e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f9a4:	d102      	bne.n	800f9ac <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f9a6:	4b4f      	ldr	r3, [pc, #316]	; (800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f9aa:	e002      	b.n	800f9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f9b0:	e235      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f9b2:	e234      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f9b4:	4b4c      	ldr	r3, [pc, #304]	; (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800f9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9b8:	e231      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9be:	e22e      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800f9c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f9c4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800f9c8:	430b      	orrs	r3, r1
 800f9ca:	f040 808f 	bne.w	800faec <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800f9ce:	4b42      	ldr	r3, [pc, #264]	; (800fad8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f9d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9d2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800f9d6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800f9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f9de:	d06b      	beq.n	800fab8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800f9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f9e6:	d874      	bhi.n	800fad2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f9ee:	d056      	beq.n	800fa9e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800f9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f9f6:	d86c      	bhi.n	800fad2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f9fe:	d03b      	beq.n	800fa78 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800fa00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800fa06:	d864      	bhi.n	800fad2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800fa08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fa0e:	d021      	beq.n	800fa54 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800fa10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fa16:	d85c      	bhi.n	800fad2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800fa18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d004      	beq.n	800fa28 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800fa1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa24:	d004      	beq.n	800fa30 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800fa26:	e054      	b.n	800fad2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800fa28:	f7fe fa0a 	bl	800de40 <HAL_RCC_GetPCLK1Freq>
 800fa2c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fa2e:	e1f6      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fa30:	4b29      	ldr	r3, [pc, #164]	; (800fad8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fa38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fa3c:	d107      	bne.n	800fa4e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa3e:	f107 0318 	add.w	r3, r7, #24
 800fa42:	4618      	mov	r0, r3
 800fa44:	f000 fa0a 	bl	800fe5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fa48:	69fb      	ldr	r3, [r7, #28]
 800fa4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa4c:	e1e7      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa52:	e1e4      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fa54:	4b20      	ldr	r3, [pc, #128]	; (800fad8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fa5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fa60:	d107      	bne.n	800fa72 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa62:	f107 030c 	add.w	r3, r7, #12
 800fa66:	4618      	mov	r0, r3
 800fa68:	f000 fb4c 	bl	8010104 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fa6c:	693b      	ldr	r3, [r7, #16]
 800fa6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa70:	e1d5      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fa72:	2300      	movs	r3, #0
 800fa74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa76:	e1d2      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fa78:	4b17      	ldr	r3, [pc, #92]	; (800fad8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	f003 0304 	and.w	r3, r3, #4
 800fa80:	2b04      	cmp	r3, #4
 800fa82:	d109      	bne.n	800fa98 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fa84:	4b14      	ldr	r3, [pc, #80]	; (800fad8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	08db      	lsrs	r3, r3, #3
 800fa8a:	f003 0303 	and.w	r3, r3, #3
 800fa8e:	4a13      	ldr	r2, [pc, #76]	; (800fadc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800fa90:	fa22 f303 	lsr.w	r3, r2, r3
 800fa94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa96:	e1c2      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fa98:	2300      	movs	r3, #0
 800fa9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa9c:	e1bf      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800fa9e:	4b0e      	ldr	r3, [pc, #56]	; (800fad8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800faa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800faaa:	d102      	bne.n	800fab2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800faac:	4b0c      	ldr	r3, [pc, #48]	; (800fae0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800faae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fab0:	e1b5      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fab2:	2300      	movs	r3, #0
 800fab4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fab6:	e1b2      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800fab8:	4b07      	ldr	r3, [pc, #28]	; (800fad8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fac0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fac4:	d102      	bne.n	800facc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800fac6:	4b07      	ldr	r3, [pc, #28]	; (800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800fac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800faca:	e1a8      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800facc:	2300      	movs	r3, #0
 800face:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fad0:	e1a5      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800fad2:	2300      	movs	r3, #0
 800fad4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fad6:	e1a2      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fad8:	58024400 	.word	0x58024400
 800fadc:	03d09000 	.word	0x03d09000
 800fae0:	003d0900 	.word	0x003d0900
 800fae4:	017d7840 	.word	0x017d7840
 800fae8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800faec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800faf0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800faf4:	430b      	orrs	r3, r1
 800faf6:	d173      	bne.n	800fbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800faf8:	4b9c      	ldr	r3, [pc, #624]	; (800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fafa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fafc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800fb00:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800fb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fb08:	d02f      	beq.n	800fb6a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800fb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fb10:	d863      	bhi.n	800fbda <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800fb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d004      	beq.n	800fb22 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800fb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb1e:	d012      	beq.n	800fb46 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800fb20:	e05b      	b.n	800fbda <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fb22:	4b92      	ldr	r3, [pc, #584]	; (800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fb2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fb2e:	d107      	bne.n	800fb40 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb30:	f107 0318 	add.w	r3, r7, #24
 800fb34:	4618      	mov	r0, r3
 800fb36:	f000 f991 	bl	800fe5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fb3a:	69bb      	ldr	r3, [r7, #24]
 800fb3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fb3e:	e16e      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fb40:	2300      	movs	r3, #0
 800fb42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb44:	e16b      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fb46:	4b89      	ldr	r3, [pc, #548]	; (800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fb4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fb52:	d107      	bne.n	800fb64 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fb54:	f107 030c 	add.w	r3, r7, #12
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f000 fad3 	bl	8010104 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800fb5e:	697b      	ldr	r3, [r7, #20]
 800fb60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fb62:	e15c      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fb64:	2300      	movs	r3, #0
 800fb66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb68:	e159      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fb6a:	4b80      	ldr	r3, [pc, #512]	; (800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fb6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fb72:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fb74:	4b7d      	ldr	r3, [pc, #500]	; (800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	f003 0304 	and.w	r3, r3, #4
 800fb7c:	2b04      	cmp	r3, #4
 800fb7e:	d10c      	bne.n	800fb9a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800fb80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d109      	bne.n	800fb9a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fb86:	4b79      	ldr	r3, [pc, #484]	; (800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	08db      	lsrs	r3, r3, #3
 800fb8c:	f003 0303 	and.w	r3, r3, #3
 800fb90:	4a77      	ldr	r2, [pc, #476]	; (800fd70 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800fb92:	fa22 f303 	lsr.w	r3, r2, r3
 800fb96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb98:	e01e      	b.n	800fbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fb9a:	4b74      	ldr	r3, [pc, #464]	; (800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fba6:	d106      	bne.n	800fbb6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800fba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fbae:	d102      	bne.n	800fbb6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fbb0:	4b70      	ldr	r3, [pc, #448]	; (800fd74 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800fbb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fbb4:	e010      	b.n	800fbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fbb6:	4b6d      	ldr	r3, [pc, #436]	; (800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fbbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fbc2:	d106      	bne.n	800fbd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800fbc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fbca:	d102      	bne.n	800fbd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fbcc:	4b6a      	ldr	r3, [pc, #424]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800fbce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fbd0:	e002      	b.n	800fbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800fbd6:	e122      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fbd8:	e121      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800fbda:	2300      	movs	r3, #0
 800fbdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fbde:	e11e      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800fbe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fbe4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800fbe8:	430b      	orrs	r3, r1
 800fbea:	d133      	bne.n	800fc54 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800fbec:	4b5f      	ldr	r3, [pc, #380]	; (800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fbee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fbf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fbf4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800fbf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d004      	beq.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800fbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc02:	d012      	beq.n	800fc2a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800fc04:	e023      	b.n	800fc4e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fc06:	4b59      	ldr	r3, [pc, #356]	; (800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fc0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fc12:	d107      	bne.n	800fc24 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fc14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f000 fbc7 	bl	80103ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fc22:	e0fc      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fc24:	2300      	movs	r3, #0
 800fc26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc28:	e0f9      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fc2a:	4b50      	ldr	r3, [pc, #320]	; (800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fc32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fc36:	d107      	bne.n	800fc48 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc38:	f107 0318 	add.w	r3, r7, #24
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f000 f90d 	bl	800fe5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800fc42:	6a3b      	ldr	r3, [r7, #32]
 800fc44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fc46:	e0ea      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fc48:	2300      	movs	r3, #0
 800fc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc4c:	e0e7      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc52:	e0e4      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800fc54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc58:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800fc5c:	430b      	orrs	r3, r1
 800fc5e:	f040 808d 	bne.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800fc62:	4b42      	ldr	r3, [pc, #264]	; (800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fc64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc66:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800fc6a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800fc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fc72:	d06b      	beq.n	800fd4c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800fc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fc7a:	d874      	bhi.n	800fd66 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800fc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc82:	d056      	beq.n	800fd32 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800fc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc8a:	d86c      	bhi.n	800fd66 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800fc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fc92:	d03b      	beq.n	800fd0c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800fc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fc9a:	d864      	bhi.n	800fd66 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800fc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fca2:	d021      	beq.n	800fce8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800fca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fcaa:	d85c      	bhi.n	800fd66 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800fcac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d004      	beq.n	800fcbc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800fcb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fcb8:	d004      	beq.n	800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800fcba:	e054      	b.n	800fd66 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800fcbc:	f000 f8b8 	bl	800fe30 <HAL_RCCEx_GetD3PCLK1Freq>
 800fcc0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fcc2:	e0ac      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fcc4:	4b29      	ldr	r3, [pc, #164]	; (800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fccc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fcd0:	d107      	bne.n	800fce2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fcd2:	f107 0318 	add.w	r3, r7, #24
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f000 f8c0 	bl	800fe5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fcdc:	69fb      	ldr	r3, [r7, #28]
 800fcde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fce0:	e09d      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fce2:	2300      	movs	r3, #0
 800fce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fce6:	e09a      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fce8:	4b20      	ldr	r3, [pc, #128]	; (800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fcf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fcf4:	d107      	bne.n	800fd06 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fcf6:	f107 030c 	add.w	r3, r7, #12
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f000 fa02 	bl	8010104 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fd00:	693b      	ldr	r3, [r7, #16]
 800fd02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd04:	e08b      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fd06:	2300      	movs	r3, #0
 800fd08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd0a:	e088      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fd0c:	4b17      	ldr	r3, [pc, #92]	; (800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	f003 0304 	and.w	r3, r3, #4
 800fd14:	2b04      	cmp	r3, #4
 800fd16:	d109      	bne.n	800fd2c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fd18:	4b14      	ldr	r3, [pc, #80]	; (800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	08db      	lsrs	r3, r3, #3
 800fd1e:	f003 0303 	and.w	r3, r3, #3
 800fd22:	4a13      	ldr	r2, [pc, #76]	; (800fd70 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800fd24:	fa22 f303 	lsr.w	r3, r2, r3
 800fd28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd2a:	e078      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd30:	e075      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800fd32:	4b0e      	ldr	r3, [pc, #56]	; (800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd3e:	d102      	bne.n	800fd46 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800fd40:	4b0c      	ldr	r3, [pc, #48]	; (800fd74 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800fd42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd44:	e06b      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fd46:	2300      	movs	r3, #0
 800fd48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd4a:	e068      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800fd4c:	4b07      	ldr	r3, [pc, #28]	; (800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fd58:	d102      	bne.n	800fd60 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800fd5a:	4b07      	ldr	r3, [pc, #28]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800fd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd5e:	e05e      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fd60:	2300      	movs	r3, #0
 800fd62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd64:	e05b      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800fd66:	2300      	movs	r3, #0
 800fd68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd6a:	e058      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fd6c:	58024400 	.word	0x58024400
 800fd70:	03d09000 	.word	0x03d09000
 800fd74:	003d0900 	.word	0x003d0900
 800fd78:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800fd7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd80:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800fd84:	430b      	orrs	r3, r1
 800fd86:	d148      	bne.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800fd88:	4b27      	ldr	r3, [pc, #156]	; (800fe28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800fd8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fd90:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800fd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fd98:	d02a      	beq.n	800fdf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800fd9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fda0:	d838      	bhi.n	800fe14 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800fda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d004      	beq.n	800fdb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800fda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fdae:	d00d      	beq.n	800fdcc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800fdb0:	e030      	b.n	800fe14 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800fdb2:	4b1d      	ldr	r3, [pc, #116]	; (800fe28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fdba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fdbe:	d102      	bne.n	800fdc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800fdc0:	4b1a      	ldr	r3, [pc, #104]	; (800fe2c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800fdc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fdc4:	e02b      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdca:	e028      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fdcc:	4b16      	ldr	r3, [pc, #88]	; (800fe28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fdd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fdd8:	d107      	bne.n	800fdea <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fdda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fdde:	4618      	mov	r0, r3
 800fde0:	f000 fae4 	bl	80103ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fde6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fde8:	e019      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fdea:	2300      	movs	r3, #0
 800fdec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdee:	e016      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fdf0:	4b0d      	ldr	r3, [pc, #52]	; (800fe28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fdf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fdfc:	d107      	bne.n	800fe0e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fdfe:	f107 0318 	add.w	r3, r7, #24
 800fe02:	4618      	mov	r0, r3
 800fe04:	f000 f82a 	bl	800fe5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fe08:	69fb      	ldr	r3, [r7, #28]
 800fe0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fe0c:	e007      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe12:	e004      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800fe14:	2300      	movs	r3, #0
 800fe16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe18:	e001      	b.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800fe1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fe20:	4618      	mov	r0, r3
 800fe22:	3740      	adds	r7, #64	; 0x40
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}
 800fe28:	58024400 	.word	0x58024400
 800fe2c:	017d7840 	.word	0x017d7840

0800fe30 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800fe34:	f7fd ffd4 	bl	800dde0 <HAL_RCC_GetHCLKFreq>
 800fe38:	4602      	mov	r2, r0
 800fe3a:	4b06      	ldr	r3, [pc, #24]	; (800fe54 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800fe3c:	6a1b      	ldr	r3, [r3, #32]
 800fe3e:	091b      	lsrs	r3, r3, #4
 800fe40:	f003 0307 	and.w	r3, r3, #7
 800fe44:	4904      	ldr	r1, [pc, #16]	; (800fe58 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800fe46:	5ccb      	ldrb	r3, [r1, r3]
 800fe48:	f003 031f 	and.w	r3, r3, #31
 800fe4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800fe50:	4618      	mov	r0, r3
 800fe52:	bd80      	pop	{r7, pc}
 800fe54:	58024400 	.word	0x58024400
 800fe58:	0801a1b4 	.word	0x0801a1b4

0800fe5c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	b089      	sub	sp, #36	; 0x24
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fe64:	4ba1      	ldr	r3, [pc, #644]	; (80100ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe68:	f003 0303 	and.w	r3, r3, #3
 800fe6c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800fe6e:	4b9f      	ldr	r3, [pc, #636]	; (80100ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe72:	0b1b      	lsrs	r3, r3, #12
 800fe74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fe78:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800fe7a:	4b9c      	ldr	r3, [pc, #624]	; (80100ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe7e:	091b      	lsrs	r3, r3, #4
 800fe80:	f003 0301 	and.w	r3, r3, #1
 800fe84:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800fe86:	4b99      	ldr	r3, [pc, #612]	; (80100ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe8a:	08db      	lsrs	r3, r3, #3
 800fe8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fe90:	693a      	ldr	r2, [r7, #16]
 800fe92:	fb02 f303 	mul.w	r3, r2, r3
 800fe96:	ee07 3a90 	vmov	s15, r3
 800fe9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800fea2:	697b      	ldr	r3, [r7, #20]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	f000 8111 	beq.w	80100cc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800feaa:	69bb      	ldr	r3, [r7, #24]
 800feac:	2b02      	cmp	r3, #2
 800feae:	f000 8083 	beq.w	800ffb8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800feb2:	69bb      	ldr	r3, [r7, #24]
 800feb4:	2b02      	cmp	r3, #2
 800feb6:	f200 80a1 	bhi.w	800fffc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800feba:	69bb      	ldr	r3, [r7, #24]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d003      	beq.n	800fec8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800fec0:	69bb      	ldr	r3, [r7, #24]
 800fec2:	2b01      	cmp	r3, #1
 800fec4:	d056      	beq.n	800ff74 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800fec6:	e099      	b.n	800fffc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fec8:	4b88      	ldr	r3, [pc, #544]	; (80100ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	f003 0320 	and.w	r3, r3, #32
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d02d      	beq.n	800ff30 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fed4:	4b85      	ldr	r3, [pc, #532]	; (80100ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	08db      	lsrs	r3, r3, #3
 800feda:	f003 0303 	and.w	r3, r3, #3
 800fede:	4a84      	ldr	r2, [pc, #528]	; (80100f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800fee0:	fa22 f303 	lsr.w	r3, r2, r3
 800fee4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fee6:	68bb      	ldr	r3, [r7, #8]
 800fee8:	ee07 3a90 	vmov	s15, r3
 800feec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fef0:	697b      	ldr	r3, [r7, #20]
 800fef2:	ee07 3a90 	vmov	s15, r3
 800fef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fefa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fefe:	4b7b      	ldr	r3, [pc, #492]	; (80100ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ff00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff06:	ee07 3a90 	vmov	s15, r3
 800ff0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ff12:	eddf 5a78 	vldr	s11, [pc, #480]	; 80100f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ff16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ff2e:	e087      	b.n	8010040 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	ee07 3a90 	vmov	s15, r3
 800ff36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff3a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80100f8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ff3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff42:	4b6a      	ldr	r3, [pc, #424]	; (80100ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ff44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff4a:	ee07 3a90 	vmov	s15, r3
 800ff4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ff56:	eddf 5a67 	vldr	s11, [pc, #412]	; 80100f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ff5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ff72:	e065      	b.n	8010040 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ff74:	697b      	ldr	r3, [r7, #20]
 800ff76:	ee07 3a90 	vmov	s15, r3
 800ff7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff7e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80100fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ff82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff86:	4b59      	ldr	r3, [pc, #356]	; (80100ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ff88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff8e:	ee07 3a90 	vmov	s15, r3
 800ff92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ff9a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80100f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ff9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ffa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ffa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ffaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ffae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ffb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ffb6:	e043      	b.n	8010040 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ffb8:	697b      	ldr	r3, [r7, #20]
 800ffba:	ee07 3a90 	vmov	s15, r3
 800ffbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffc2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010100 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ffc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ffca:	4b48      	ldr	r3, [pc, #288]	; (80100ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ffcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffd2:	ee07 3a90 	vmov	s15, r3
 800ffd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ffda:	ed97 6a03 	vldr	s12, [r7, #12]
 800ffde:	eddf 5a45 	vldr	s11, [pc, #276]	; 80100f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ffe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ffe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ffea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ffee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fff6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fffa:	e021      	b.n	8010040 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fffc:	697b      	ldr	r3, [r7, #20]
 800fffe:	ee07 3a90 	vmov	s15, r3
 8010002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010006:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80100fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801000a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801000e:	4b37      	ldr	r3, [pc, #220]	; (80100ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010016:	ee07 3a90 	vmov	s15, r3
 801001a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801001e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010022:	eddf 5a34 	vldr	s11, [pc, #208]	; 80100f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801002a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801002e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010036:	ee67 7a27 	vmul.f32	s15, s14, s15
 801003a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801003e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8010040:	4b2a      	ldr	r3, [pc, #168]	; (80100ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010044:	0a5b      	lsrs	r3, r3, #9
 8010046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801004a:	ee07 3a90 	vmov	s15, r3
 801004e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010052:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010056:	ee37 7a87 	vadd.f32	s14, s15, s14
 801005a:	edd7 6a07 	vldr	s13, [r7, #28]
 801005e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010066:	ee17 2a90 	vmov	r2, s15
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801006e:	4b1f      	ldr	r3, [pc, #124]	; (80100ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010072:	0c1b      	lsrs	r3, r3, #16
 8010074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010078:	ee07 3a90 	vmov	s15, r3
 801007c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010080:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010084:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010088:	edd7 6a07 	vldr	s13, [r7, #28]
 801008c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010090:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010094:	ee17 2a90 	vmov	r2, s15
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801009c:	4b13      	ldr	r3, [pc, #76]	; (80100ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801009e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100a0:	0e1b      	lsrs	r3, r3, #24
 80100a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80100a6:	ee07 3a90 	vmov	s15, r3
 80100aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80100b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80100b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80100ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80100be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80100c2:	ee17 2a90 	vmov	r2, s15
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80100ca:	e008      	b.n	80100de <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2200      	movs	r2, #0
 80100d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	2200      	movs	r2, #0
 80100d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2200      	movs	r2, #0
 80100dc:	609a      	str	r2, [r3, #8]
}
 80100de:	bf00      	nop
 80100e0:	3724      	adds	r7, #36	; 0x24
 80100e2:	46bd      	mov	sp, r7
 80100e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e8:	4770      	bx	lr
 80100ea:	bf00      	nop
 80100ec:	58024400 	.word	0x58024400
 80100f0:	03d09000 	.word	0x03d09000
 80100f4:	46000000 	.word	0x46000000
 80100f8:	4c742400 	.word	0x4c742400
 80100fc:	4a742400 	.word	0x4a742400
 8010100:	4bbebc20 	.word	0x4bbebc20

08010104 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8010104:	b480      	push	{r7}
 8010106:	b089      	sub	sp, #36	; 0x24
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801010c:	4ba1      	ldr	r3, [pc, #644]	; (8010394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801010e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010110:	f003 0303 	and.w	r3, r3, #3
 8010114:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8010116:	4b9f      	ldr	r3, [pc, #636]	; (8010394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801011a:	0d1b      	lsrs	r3, r3, #20
 801011c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010120:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010122:	4b9c      	ldr	r3, [pc, #624]	; (8010394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010126:	0a1b      	lsrs	r3, r3, #8
 8010128:	f003 0301 	and.w	r3, r3, #1
 801012c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801012e:	4b99      	ldr	r3, [pc, #612]	; (8010394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010132:	08db      	lsrs	r3, r3, #3
 8010134:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010138:	693a      	ldr	r2, [r7, #16]
 801013a:	fb02 f303 	mul.w	r3, r2, r3
 801013e:	ee07 3a90 	vmov	s15, r3
 8010142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010146:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	2b00      	cmp	r3, #0
 801014e:	f000 8111 	beq.w	8010374 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8010152:	69bb      	ldr	r3, [r7, #24]
 8010154:	2b02      	cmp	r3, #2
 8010156:	f000 8083 	beq.w	8010260 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801015a:	69bb      	ldr	r3, [r7, #24]
 801015c:	2b02      	cmp	r3, #2
 801015e:	f200 80a1 	bhi.w	80102a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8010162:	69bb      	ldr	r3, [r7, #24]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d003      	beq.n	8010170 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8010168:	69bb      	ldr	r3, [r7, #24]
 801016a:	2b01      	cmp	r3, #1
 801016c:	d056      	beq.n	801021c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801016e:	e099      	b.n	80102a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010170:	4b88      	ldr	r3, [pc, #544]	; (8010394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	f003 0320 	and.w	r3, r3, #32
 8010178:	2b00      	cmp	r3, #0
 801017a:	d02d      	beq.n	80101d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801017c:	4b85      	ldr	r3, [pc, #532]	; (8010394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	08db      	lsrs	r3, r3, #3
 8010182:	f003 0303 	and.w	r3, r3, #3
 8010186:	4a84      	ldr	r2, [pc, #528]	; (8010398 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8010188:	fa22 f303 	lsr.w	r3, r2, r3
 801018c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801018e:	68bb      	ldr	r3, [r7, #8]
 8010190:	ee07 3a90 	vmov	s15, r3
 8010194:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010198:	697b      	ldr	r3, [r7, #20]
 801019a:	ee07 3a90 	vmov	s15, r3
 801019e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80101a6:	4b7b      	ldr	r3, [pc, #492]	; (8010394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80101a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101ae:	ee07 3a90 	vmov	s15, r3
 80101b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80101b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80101ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 801039c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80101be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80101c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80101c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80101ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80101ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80101d6:	e087      	b.n	80102e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80101d8:	697b      	ldr	r3, [r7, #20]
 80101da:	ee07 3a90 	vmov	s15, r3
 80101de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80103a0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80101e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80101ea:	4b6a      	ldr	r3, [pc, #424]	; (8010394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80101ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101f2:	ee07 3a90 	vmov	s15, r3
 80101f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80101fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80101fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 801039c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801020a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801020e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801021a:	e065      	b.n	80102e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801021c:	697b      	ldr	r3, [r7, #20]
 801021e:	ee07 3a90 	vmov	s15, r3
 8010222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010226:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80103a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801022a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801022e:	4b59      	ldr	r3, [pc, #356]	; (8010394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010236:	ee07 3a90 	vmov	s15, r3
 801023a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801023e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010242:	eddf 5a56 	vldr	s11, [pc, #344]	; 801039c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801024a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801024e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010256:	ee67 7a27 	vmul.f32	s15, s14, s15
 801025a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801025e:	e043      	b.n	80102e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	ee07 3a90 	vmov	s15, r3
 8010266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801026a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80103a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801026e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010272:	4b48      	ldr	r3, [pc, #288]	; (8010394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801027a:	ee07 3a90 	vmov	s15, r3
 801027e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010282:	ed97 6a03 	vldr	s12, [r7, #12]
 8010286:	eddf 5a45 	vldr	s11, [pc, #276]	; 801039c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801028a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801028e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801029a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801029e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80102a2:	e021      	b.n	80102e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80102a4:	697b      	ldr	r3, [r7, #20]
 80102a6:	ee07 3a90 	vmov	s15, r3
 80102aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80102ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80103a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80102b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80102b6:	4b37      	ldr	r3, [pc, #220]	; (8010394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80102b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80102be:	ee07 3a90 	vmov	s15, r3
 80102c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80102c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80102ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 801039c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80102ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80102d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80102d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80102da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80102de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80102e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80102e6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80102e8:	4b2a      	ldr	r3, [pc, #168]	; (8010394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80102ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102ec:	0a5b      	lsrs	r3, r3, #9
 80102ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102f2:	ee07 3a90 	vmov	s15, r3
 80102f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80102fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80102fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010302:	edd7 6a07 	vldr	s13, [r7, #28]
 8010306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801030a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801030e:	ee17 2a90 	vmov	r2, s15
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8010316:	4b1f      	ldr	r3, [pc, #124]	; (8010394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801031a:	0c1b      	lsrs	r3, r3, #16
 801031c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010320:	ee07 3a90 	vmov	s15, r3
 8010324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010328:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801032c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010330:	edd7 6a07 	vldr	s13, [r7, #28]
 8010334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801033c:	ee17 2a90 	vmov	r2, s15
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8010344:	4b13      	ldr	r3, [pc, #76]	; (8010394 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010348:	0e1b      	lsrs	r3, r3, #24
 801034a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801034e:	ee07 3a90 	vmov	s15, r3
 8010352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010356:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801035a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801035e:	edd7 6a07 	vldr	s13, [r7, #28]
 8010362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801036a:	ee17 2a90 	vmov	r2, s15
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8010372:	e008      	b.n	8010386 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2200      	movs	r2, #0
 8010378:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	2200      	movs	r2, #0
 801037e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	2200      	movs	r2, #0
 8010384:	609a      	str	r2, [r3, #8]
}
 8010386:	bf00      	nop
 8010388:	3724      	adds	r7, #36	; 0x24
 801038a:	46bd      	mov	sp, r7
 801038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010390:	4770      	bx	lr
 8010392:	bf00      	nop
 8010394:	58024400 	.word	0x58024400
 8010398:	03d09000 	.word	0x03d09000
 801039c:	46000000 	.word	0x46000000
 80103a0:	4c742400 	.word	0x4c742400
 80103a4:	4a742400 	.word	0x4a742400
 80103a8:	4bbebc20 	.word	0x4bbebc20

080103ac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80103ac:	b480      	push	{r7}
 80103ae:	b089      	sub	sp, #36	; 0x24
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80103b4:	4ba0      	ldr	r3, [pc, #640]	; (8010638 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80103b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103b8:	f003 0303 	and.w	r3, r3, #3
 80103bc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80103be:	4b9e      	ldr	r3, [pc, #632]	; (8010638 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80103c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103c2:	091b      	lsrs	r3, r3, #4
 80103c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80103c8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80103ca:	4b9b      	ldr	r3, [pc, #620]	; (8010638 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80103cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103ce:	f003 0301 	and.w	r3, r3, #1
 80103d2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80103d4:	4b98      	ldr	r3, [pc, #608]	; (8010638 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80103d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103d8:	08db      	lsrs	r3, r3, #3
 80103da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80103de:	693a      	ldr	r2, [r7, #16]
 80103e0:	fb02 f303 	mul.w	r3, r2, r3
 80103e4:	ee07 3a90 	vmov	s15, r3
 80103e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103ec:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80103f0:	697b      	ldr	r3, [r7, #20]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	f000 8111 	beq.w	801061a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80103f8:	69bb      	ldr	r3, [r7, #24]
 80103fa:	2b02      	cmp	r3, #2
 80103fc:	f000 8083 	beq.w	8010506 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8010400:	69bb      	ldr	r3, [r7, #24]
 8010402:	2b02      	cmp	r3, #2
 8010404:	f200 80a1 	bhi.w	801054a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8010408:	69bb      	ldr	r3, [r7, #24]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d003      	beq.n	8010416 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801040e:	69bb      	ldr	r3, [r7, #24]
 8010410:	2b01      	cmp	r3, #1
 8010412:	d056      	beq.n	80104c2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8010414:	e099      	b.n	801054a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010416:	4b88      	ldr	r3, [pc, #544]	; (8010638 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	f003 0320 	and.w	r3, r3, #32
 801041e:	2b00      	cmp	r3, #0
 8010420:	d02d      	beq.n	801047e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010422:	4b85      	ldr	r3, [pc, #532]	; (8010638 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	08db      	lsrs	r3, r3, #3
 8010428:	f003 0303 	and.w	r3, r3, #3
 801042c:	4a83      	ldr	r2, [pc, #524]	; (801063c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801042e:	fa22 f303 	lsr.w	r3, r2, r3
 8010432:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	ee07 3a90 	vmov	s15, r3
 801043a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801043e:	697b      	ldr	r3, [r7, #20]
 8010440:	ee07 3a90 	vmov	s15, r3
 8010444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010448:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801044c:	4b7a      	ldr	r3, [pc, #488]	; (8010638 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801044e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010454:	ee07 3a90 	vmov	s15, r3
 8010458:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801045c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010460:	eddf 5a77 	vldr	s11, [pc, #476]	; 8010640 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010464:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010468:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801046c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010470:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010478:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801047c:	e087      	b.n	801058e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801047e:	697b      	ldr	r3, [r7, #20]
 8010480:	ee07 3a90 	vmov	s15, r3
 8010484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010488:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8010644 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801048c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010490:	4b69      	ldr	r3, [pc, #420]	; (8010638 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010498:	ee07 3a90 	vmov	s15, r3
 801049c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80104a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80104a4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8010640 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80104a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80104ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80104b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80104b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80104b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80104c0:	e065      	b.n	801058e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80104c2:	697b      	ldr	r3, [r7, #20]
 80104c4:	ee07 3a90 	vmov	s15, r3
 80104c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104cc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8010648 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80104d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80104d4:	4b58      	ldr	r3, [pc, #352]	; (8010638 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80104d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104dc:	ee07 3a90 	vmov	s15, r3
 80104e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80104e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80104e8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8010640 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80104ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80104f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80104f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80104f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80104fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010500:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010504:	e043      	b.n	801058e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010506:	697b      	ldr	r3, [r7, #20]
 8010508:	ee07 3a90 	vmov	s15, r3
 801050c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010510:	eddf 6a4e 	vldr	s13, [pc, #312]	; 801064c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8010514:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010518:	4b47      	ldr	r3, [pc, #284]	; (8010638 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801051a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801051c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010520:	ee07 3a90 	vmov	s15, r3
 8010524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010528:	ed97 6a03 	vldr	s12, [r7, #12]
 801052c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8010640 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010530:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010534:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010538:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801053c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010544:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010548:	e021      	b.n	801058e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	ee07 3a90 	vmov	s15, r3
 8010550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010554:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8010644 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010558:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801055c:	4b36      	ldr	r3, [pc, #216]	; (8010638 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801055e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010564:	ee07 3a90 	vmov	s15, r3
 8010568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801056c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010570:	eddf 5a33 	vldr	s11, [pc, #204]	; 8010640 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010574:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010578:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801057c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010580:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010588:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801058c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801058e:	4b2a      	ldr	r3, [pc, #168]	; (8010638 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010592:	0a5b      	lsrs	r3, r3, #9
 8010594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010598:	ee07 3a90 	vmov	s15, r3
 801059c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80105a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80105a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80105a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80105ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80105b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80105b4:	ee17 2a90 	vmov	r2, s15
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80105bc:	4b1e      	ldr	r3, [pc, #120]	; (8010638 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80105be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105c0:	0c1b      	lsrs	r3, r3, #16
 80105c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105c6:	ee07 3a90 	vmov	s15, r3
 80105ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80105ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80105d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80105d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80105da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80105de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80105e2:	ee17 2a90 	vmov	r2, s15
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80105ea:	4b13      	ldr	r3, [pc, #76]	; (8010638 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80105ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105ee:	0e1b      	lsrs	r3, r3, #24
 80105f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105f4:	ee07 3a90 	vmov	s15, r3
 80105f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80105fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010600:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010604:	edd7 6a07 	vldr	s13, [r7, #28]
 8010608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801060c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010610:	ee17 2a90 	vmov	r2, s15
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8010618:	e008      	b.n	801062c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2200      	movs	r2, #0
 801061e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2200      	movs	r2, #0
 8010624:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2200      	movs	r2, #0
 801062a:	609a      	str	r2, [r3, #8]
}
 801062c:	bf00      	nop
 801062e:	3724      	adds	r7, #36	; 0x24
 8010630:	46bd      	mov	sp, r7
 8010632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010636:	4770      	bx	lr
 8010638:	58024400 	.word	0x58024400
 801063c:	03d09000 	.word	0x03d09000
 8010640:	46000000 	.word	0x46000000
 8010644:	4c742400 	.word	0x4c742400
 8010648:	4a742400 	.word	0x4a742400
 801064c:	4bbebc20 	.word	0x4bbebc20

08010650 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b084      	sub	sp, #16
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
 8010658:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801065a:	2300      	movs	r3, #0
 801065c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801065e:	4b53      	ldr	r3, [pc, #332]	; (80107ac <RCCEx_PLL2_Config+0x15c>)
 8010660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010662:	f003 0303 	and.w	r3, r3, #3
 8010666:	2b03      	cmp	r3, #3
 8010668:	d101      	bne.n	801066e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801066a:	2301      	movs	r3, #1
 801066c:	e099      	b.n	80107a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801066e:	4b4f      	ldr	r3, [pc, #316]	; (80107ac <RCCEx_PLL2_Config+0x15c>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	4a4e      	ldr	r2, [pc, #312]	; (80107ac <RCCEx_PLL2_Config+0x15c>)
 8010674:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010678:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801067a:	f7f4 fb8b 	bl	8004d94 <HAL_GetTick>
 801067e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010680:	e008      	b.n	8010694 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010682:	f7f4 fb87 	bl	8004d94 <HAL_GetTick>
 8010686:	4602      	mov	r2, r0
 8010688:	68bb      	ldr	r3, [r7, #8]
 801068a:	1ad3      	subs	r3, r2, r3
 801068c:	2b02      	cmp	r3, #2
 801068e:	d901      	bls.n	8010694 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010690:	2303      	movs	r3, #3
 8010692:	e086      	b.n	80107a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010694:	4b45      	ldr	r3, [pc, #276]	; (80107ac <RCCEx_PLL2_Config+0x15c>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801069c:	2b00      	cmp	r3, #0
 801069e:	d1f0      	bne.n	8010682 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80106a0:	4b42      	ldr	r3, [pc, #264]	; (80107ac <RCCEx_PLL2_Config+0x15c>)
 80106a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	031b      	lsls	r3, r3, #12
 80106ae:	493f      	ldr	r1, [pc, #252]	; (80107ac <RCCEx_PLL2_Config+0x15c>)
 80106b0:	4313      	orrs	r3, r2
 80106b2:	628b      	str	r3, [r1, #40]	; 0x28
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	685b      	ldr	r3, [r3, #4]
 80106b8:	3b01      	subs	r3, #1
 80106ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	689b      	ldr	r3, [r3, #8]
 80106c2:	3b01      	subs	r3, #1
 80106c4:	025b      	lsls	r3, r3, #9
 80106c6:	b29b      	uxth	r3, r3
 80106c8:	431a      	orrs	r2, r3
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	68db      	ldr	r3, [r3, #12]
 80106ce:	3b01      	subs	r3, #1
 80106d0:	041b      	lsls	r3, r3, #16
 80106d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80106d6:	431a      	orrs	r2, r3
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	691b      	ldr	r3, [r3, #16]
 80106dc:	3b01      	subs	r3, #1
 80106de:	061b      	lsls	r3, r3, #24
 80106e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80106e4:	4931      	ldr	r1, [pc, #196]	; (80107ac <RCCEx_PLL2_Config+0x15c>)
 80106e6:	4313      	orrs	r3, r2
 80106e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80106ea:	4b30      	ldr	r3, [pc, #192]	; (80107ac <RCCEx_PLL2_Config+0x15c>)
 80106ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	695b      	ldr	r3, [r3, #20]
 80106f6:	492d      	ldr	r1, [pc, #180]	; (80107ac <RCCEx_PLL2_Config+0x15c>)
 80106f8:	4313      	orrs	r3, r2
 80106fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80106fc:	4b2b      	ldr	r3, [pc, #172]	; (80107ac <RCCEx_PLL2_Config+0x15c>)
 80106fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010700:	f023 0220 	bic.w	r2, r3, #32
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	699b      	ldr	r3, [r3, #24]
 8010708:	4928      	ldr	r1, [pc, #160]	; (80107ac <RCCEx_PLL2_Config+0x15c>)
 801070a:	4313      	orrs	r3, r2
 801070c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801070e:	4b27      	ldr	r3, [pc, #156]	; (80107ac <RCCEx_PLL2_Config+0x15c>)
 8010710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010712:	4a26      	ldr	r2, [pc, #152]	; (80107ac <RCCEx_PLL2_Config+0x15c>)
 8010714:	f023 0310 	bic.w	r3, r3, #16
 8010718:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801071a:	4b24      	ldr	r3, [pc, #144]	; (80107ac <RCCEx_PLL2_Config+0x15c>)
 801071c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801071e:	4b24      	ldr	r3, [pc, #144]	; (80107b0 <RCCEx_PLL2_Config+0x160>)
 8010720:	4013      	ands	r3, r2
 8010722:	687a      	ldr	r2, [r7, #4]
 8010724:	69d2      	ldr	r2, [r2, #28]
 8010726:	00d2      	lsls	r2, r2, #3
 8010728:	4920      	ldr	r1, [pc, #128]	; (80107ac <RCCEx_PLL2_Config+0x15c>)
 801072a:	4313      	orrs	r3, r2
 801072c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801072e:	4b1f      	ldr	r3, [pc, #124]	; (80107ac <RCCEx_PLL2_Config+0x15c>)
 8010730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010732:	4a1e      	ldr	r2, [pc, #120]	; (80107ac <RCCEx_PLL2_Config+0x15c>)
 8010734:	f043 0310 	orr.w	r3, r3, #16
 8010738:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801073a:	683b      	ldr	r3, [r7, #0]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d106      	bne.n	801074e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8010740:	4b1a      	ldr	r3, [pc, #104]	; (80107ac <RCCEx_PLL2_Config+0x15c>)
 8010742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010744:	4a19      	ldr	r2, [pc, #100]	; (80107ac <RCCEx_PLL2_Config+0x15c>)
 8010746:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801074a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801074c:	e00f      	b.n	801076e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	2b01      	cmp	r3, #1
 8010752:	d106      	bne.n	8010762 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8010754:	4b15      	ldr	r3, [pc, #84]	; (80107ac <RCCEx_PLL2_Config+0x15c>)
 8010756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010758:	4a14      	ldr	r2, [pc, #80]	; (80107ac <RCCEx_PLL2_Config+0x15c>)
 801075a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801075e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010760:	e005      	b.n	801076e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8010762:	4b12      	ldr	r3, [pc, #72]	; (80107ac <RCCEx_PLL2_Config+0x15c>)
 8010764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010766:	4a11      	ldr	r2, [pc, #68]	; (80107ac <RCCEx_PLL2_Config+0x15c>)
 8010768:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801076c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801076e:	4b0f      	ldr	r3, [pc, #60]	; (80107ac <RCCEx_PLL2_Config+0x15c>)
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	4a0e      	ldr	r2, [pc, #56]	; (80107ac <RCCEx_PLL2_Config+0x15c>)
 8010774:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010778:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801077a:	f7f4 fb0b 	bl	8004d94 <HAL_GetTick>
 801077e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010780:	e008      	b.n	8010794 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010782:	f7f4 fb07 	bl	8004d94 <HAL_GetTick>
 8010786:	4602      	mov	r2, r0
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	1ad3      	subs	r3, r2, r3
 801078c:	2b02      	cmp	r3, #2
 801078e:	d901      	bls.n	8010794 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010790:	2303      	movs	r3, #3
 8010792:	e006      	b.n	80107a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010794:	4b05      	ldr	r3, [pc, #20]	; (80107ac <RCCEx_PLL2_Config+0x15c>)
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801079c:	2b00      	cmp	r3, #0
 801079e:	d0f0      	beq.n	8010782 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80107a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80107a2:	4618      	mov	r0, r3
 80107a4:	3710      	adds	r7, #16
 80107a6:	46bd      	mov	sp, r7
 80107a8:	bd80      	pop	{r7, pc}
 80107aa:	bf00      	nop
 80107ac:	58024400 	.word	0x58024400
 80107b0:	ffff0007 	.word	0xffff0007

080107b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b084      	sub	sp, #16
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
 80107bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80107be:	2300      	movs	r3, #0
 80107c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80107c2:	4b53      	ldr	r3, [pc, #332]	; (8010910 <RCCEx_PLL3_Config+0x15c>)
 80107c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107c6:	f003 0303 	and.w	r3, r3, #3
 80107ca:	2b03      	cmp	r3, #3
 80107cc:	d101      	bne.n	80107d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80107ce:	2301      	movs	r3, #1
 80107d0:	e099      	b.n	8010906 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80107d2:	4b4f      	ldr	r3, [pc, #316]	; (8010910 <RCCEx_PLL3_Config+0x15c>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	4a4e      	ldr	r2, [pc, #312]	; (8010910 <RCCEx_PLL3_Config+0x15c>)
 80107d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80107dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80107de:	f7f4 fad9 	bl	8004d94 <HAL_GetTick>
 80107e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80107e4:	e008      	b.n	80107f8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80107e6:	f7f4 fad5 	bl	8004d94 <HAL_GetTick>
 80107ea:	4602      	mov	r2, r0
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	1ad3      	subs	r3, r2, r3
 80107f0:	2b02      	cmp	r3, #2
 80107f2:	d901      	bls.n	80107f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80107f4:	2303      	movs	r3, #3
 80107f6:	e086      	b.n	8010906 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80107f8:	4b45      	ldr	r3, [pc, #276]	; (8010910 <RCCEx_PLL3_Config+0x15c>)
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010800:	2b00      	cmp	r3, #0
 8010802:	d1f0      	bne.n	80107e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8010804:	4b42      	ldr	r3, [pc, #264]	; (8010910 <RCCEx_PLL3_Config+0x15c>)
 8010806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010808:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	051b      	lsls	r3, r3, #20
 8010812:	493f      	ldr	r1, [pc, #252]	; (8010910 <RCCEx_PLL3_Config+0x15c>)
 8010814:	4313      	orrs	r3, r2
 8010816:	628b      	str	r3, [r1, #40]	; 0x28
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	685b      	ldr	r3, [r3, #4]
 801081c:	3b01      	subs	r3, #1
 801081e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	689b      	ldr	r3, [r3, #8]
 8010826:	3b01      	subs	r3, #1
 8010828:	025b      	lsls	r3, r3, #9
 801082a:	b29b      	uxth	r3, r3
 801082c:	431a      	orrs	r2, r3
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	68db      	ldr	r3, [r3, #12]
 8010832:	3b01      	subs	r3, #1
 8010834:	041b      	lsls	r3, r3, #16
 8010836:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801083a:	431a      	orrs	r2, r3
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	691b      	ldr	r3, [r3, #16]
 8010840:	3b01      	subs	r3, #1
 8010842:	061b      	lsls	r3, r3, #24
 8010844:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010848:	4931      	ldr	r1, [pc, #196]	; (8010910 <RCCEx_PLL3_Config+0x15c>)
 801084a:	4313      	orrs	r3, r2
 801084c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801084e:	4b30      	ldr	r3, [pc, #192]	; (8010910 <RCCEx_PLL3_Config+0x15c>)
 8010850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010852:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	695b      	ldr	r3, [r3, #20]
 801085a:	492d      	ldr	r1, [pc, #180]	; (8010910 <RCCEx_PLL3_Config+0x15c>)
 801085c:	4313      	orrs	r3, r2
 801085e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8010860:	4b2b      	ldr	r3, [pc, #172]	; (8010910 <RCCEx_PLL3_Config+0x15c>)
 8010862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010864:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	699b      	ldr	r3, [r3, #24]
 801086c:	4928      	ldr	r1, [pc, #160]	; (8010910 <RCCEx_PLL3_Config+0x15c>)
 801086e:	4313      	orrs	r3, r2
 8010870:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8010872:	4b27      	ldr	r3, [pc, #156]	; (8010910 <RCCEx_PLL3_Config+0x15c>)
 8010874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010876:	4a26      	ldr	r2, [pc, #152]	; (8010910 <RCCEx_PLL3_Config+0x15c>)
 8010878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801087c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801087e:	4b24      	ldr	r3, [pc, #144]	; (8010910 <RCCEx_PLL3_Config+0x15c>)
 8010880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010882:	4b24      	ldr	r3, [pc, #144]	; (8010914 <RCCEx_PLL3_Config+0x160>)
 8010884:	4013      	ands	r3, r2
 8010886:	687a      	ldr	r2, [r7, #4]
 8010888:	69d2      	ldr	r2, [r2, #28]
 801088a:	00d2      	lsls	r2, r2, #3
 801088c:	4920      	ldr	r1, [pc, #128]	; (8010910 <RCCEx_PLL3_Config+0x15c>)
 801088e:	4313      	orrs	r3, r2
 8010890:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8010892:	4b1f      	ldr	r3, [pc, #124]	; (8010910 <RCCEx_PLL3_Config+0x15c>)
 8010894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010896:	4a1e      	ldr	r2, [pc, #120]	; (8010910 <RCCEx_PLL3_Config+0x15c>)
 8010898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801089c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801089e:	683b      	ldr	r3, [r7, #0]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d106      	bne.n	80108b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80108a4:	4b1a      	ldr	r3, [pc, #104]	; (8010910 <RCCEx_PLL3_Config+0x15c>)
 80108a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108a8:	4a19      	ldr	r2, [pc, #100]	; (8010910 <RCCEx_PLL3_Config+0x15c>)
 80108aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80108ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80108b0:	e00f      	b.n	80108d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	2b01      	cmp	r3, #1
 80108b6:	d106      	bne.n	80108c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80108b8:	4b15      	ldr	r3, [pc, #84]	; (8010910 <RCCEx_PLL3_Config+0x15c>)
 80108ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108bc:	4a14      	ldr	r2, [pc, #80]	; (8010910 <RCCEx_PLL3_Config+0x15c>)
 80108be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80108c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80108c4:	e005      	b.n	80108d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80108c6:	4b12      	ldr	r3, [pc, #72]	; (8010910 <RCCEx_PLL3_Config+0x15c>)
 80108c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108ca:	4a11      	ldr	r2, [pc, #68]	; (8010910 <RCCEx_PLL3_Config+0x15c>)
 80108cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80108d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80108d2:	4b0f      	ldr	r3, [pc, #60]	; (8010910 <RCCEx_PLL3_Config+0x15c>)
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	4a0e      	ldr	r2, [pc, #56]	; (8010910 <RCCEx_PLL3_Config+0x15c>)
 80108d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80108dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80108de:	f7f4 fa59 	bl	8004d94 <HAL_GetTick>
 80108e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80108e4:	e008      	b.n	80108f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80108e6:	f7f4 fa55 	bl	8004d94 <HAL_GetTick>
 80108ea:	4602      	mov	r2, r0
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	1ad3      	subs	r3, r2, r3
 80108f0:	2b02      	cmp	r3, #2
 80108f2:	d901      	bls.n	80108f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80108f4:	2303      	movs	r3, #3
 80108f6:	e006      	b.n	8010906 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80108f8:	4b05      	ldr	r3, [pc, #20]	; (8010910 <RCCEx_PLL3_Config+0x15c>)
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010900:	2b00      	cmp	r3, #0
 8010902:	d0f0      	beq.n	80108e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8010904:	7bfb      	ldrb	r3, [r7, #15]
}
 8010906:	4618      	mov	r0, r3
 8010908:	3710      	adds	r7, #16
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}
 801090e:	bf00      	nop
 8010910:	58024400 	.word	0x58024400
 8010914:	ffff0007 	.word	0xffff0007

08010918 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b084      	sub	sp, #16
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010920:	2301      	movs	r3, #1
 8010922:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d071      	beq.n	8010a0e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8010930:	b2db      	uxtb	r3, r3
 8010932:	2b00      	cmp	r3, #0
 8010934:	d106      	bne.n	8010944 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	2200      	movs	r2, #0
 801093a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	f7f2 fc80 	bl	8003244 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2202      	movs	r2, #2
 8010948:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	68db      	ldr	r3, [r3, #12]
 8010952:	f003 0310 	and.w	r3, r3, #16
 8010956:	2b10      	cmp	r3, #16
 8010958:	d050      	beq.n	80109fc <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	22ca      	movs	r2, #202	; 0xca
 8010960:	625a      	str	r2, [r3, #36]	; 0x24
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	2253      	movs	r2, #83	; 0x53
 8010968:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f000 fa4a 	bl	8010e04 <RTC_EnterInitMode>
 8010970:	4603      	mov	r3, r0
 8010972:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8010974:	7bfb      	ldrb	r3, [r7, #15]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d124      	bne.n	80109c4 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	6899      	ldr	r1, [r3, #8]
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681a      	ldr	r2, [r3, #0]
 8010984:	4b24      	ldr	r3, [pc, #144]	; (8010a18 <HAL_RTC_Init+0x100>)
 8010986:	400b      	ands	r3, r1
 8010988:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	6899      	ldr	r1, [r3, #8]
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	685a      	ldr	r2, [r3, #4]
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	691b      	ldr	r3, [r3, #16]
 8010998:	431a      	orrs	r2, r3
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	699b      	ldr	r3, [r3, #24]
 801099e:	431a      	orrs	r2, r3
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	430a      	orrs	r2, r1
 80109a6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	689b      	ldr	r3, [r3, #8]
 80109ac:	0419      	lsls	r1, r3, #16
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	68da      	ldr	r2, [r3, #12]
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	430a      	orrs	r2, r1
 80109b8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	f000 fa56 	bl	8010e6c <RTC_ExitInitMode>
 80109c0:	4603      	mov	r3, r0
 80109c2:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80109c4:	7bfb      	ldrb	r3, [r7, #15]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d113      	bne.n	80109f2 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	f022 0203 	bic.w	r2, r2, #3
 80109d8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	69da      	ldr	r2, [r3, #28]
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	695b      	ldr	r3, [r3, #20]
 80109e8:	431a      	orrs	r2, r3
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	430a      	orrs	r2, r1
 80109f0:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	22ff      	movs	r2, #255	; 0xff
 80109f8:	625a      	str	r2, [r3, #36]	; 0x24
 80109fa:	e001      	b.n	8010a00 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80109fc:	2300      	movs	r3, #0
 80109fe:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8010a00:	7bfb      	ldrb	r3, [r7, #15]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d103      	bne.n	8010a0e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2201      	movs	r2, #1
 8010a0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8010a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a10:	4618      	mov	r0, r3
 8010a12:	3710      	adds	r7, #16
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bd80      	pop	{r7, pc}
 8010a18:	ff8fffbf 	.word	0xff8fffbf

08010a1c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010a1c:	b590      	push	{r4, r7, lr}
 8010a1e:	b087      	sub	sp, #28
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	60f8      	str	r0, [r7, #12]
 8010a24:	60b9      	str	r1, [r7, #8]
 8010a26:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010a2e:	2b01      	cmp	r3, #1
 8010a30:	d101      	bne.n	8010a36 <HAL_RTC_SetTime+0x1a>
 8010a32:	2302      	movs	r3, #2
 8010a34:	e089      	b.n	8010b4a <HAL_RTC_SetTime+0x12e>
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	2201      	movs	r2, #1
 8010a3a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	2202      	movs	r2, #2
 8010a42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	22ca      	movs	r2, #202	; 0xca
 8010a4c:	625a      	str	r2, [r3, #36]	; 0x24
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	2253      	movs	r2, #83	; 0x53
 8010a54:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010a56:	68f8      	ldr	r0, [r7, #12]
 8010a58:	f000 f9d4 	bl	8010e04 <RTC_EnterInitMode>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8010a60:	7cfb      	ldrb	r3, [r7, #19]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d161      	bne.n	8010b2a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d126      	bne.n	8010aba <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	689b      	ldr	r3, [r3, #8]
 8010a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d102      	bne.n	8010a80 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8010a7a:	68bb      	ldr	r3, [r7, #8]
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010a80:	68bb      	ldr	r3, [r7, #8]
 8010a82:	781b      	ldrb	r3, [r3, #0]
 8010a84:	4618      	mov	r0, r3
 8010a86:	f000 fa2f 	bl	8010ee8 <RTC_ByteToBcd2>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010a8e:	68bb      	ldr	r3, [r7, #8]
 8010a90:	785b      	ldrb	r3, [r3, #1]
 8010a92:	4618      	mov	r0, r3
 8010a94:	f000 fa28 	bl	8010ee8 <RTC_ByteToBcd2>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010a9c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8010a9e:	68bb      	ldr	r3, [r7, #8]
 8010aa0:	789b      	ldrb	r3, [r3, #2]
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f000 fa20 	bl	8010ee8 <RTC_ByteToBcd2>
 8010aa8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010aaa:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010aae:	68bb      	ldr	r3, [r7, #8]
 8010ab0:	78db      	ldrb	r3, [r3, #3]
 8010ab2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010ab4:	4313      	orrs	r3, r2
 8010ab6:	617b      	str	r3, [r7, #20]
 8010ab8:	e018      	b.n	8010aec <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	689b      	ldr	r3, [r3, #8]
 8010ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d102      	bne.n	8010ace <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8010ac8:	68bb      	ldr	r3, [r7, #8]
 8010aca:	2200      	movs	r2, #0
 8010acc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010ace:	68bb      	ldr	r3, [r7, #8]
 8010ad0:	781b      	ldrb	r3, [r3, #0]
 8010ad2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	785b      	ldrb	r3, [r3, #1]
 8010ad8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010ada:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8010adc:	68ba      	ldr	r2, [r7, #8]
 8010ade:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010ae0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010ae2:	68bb      	ldr	r3, [r7, #8]
 8010ae4:	78db      	ldrb	r3, [r3, #3]
 8010ae6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010ae8:	4313      	orrs	r3, r2
 8010aea:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	681a      	ldr	r2, [r3, #0]
 8010af0:	6979      	ldr	r1, [r7, #20]
 8010af2:	4b18      	ldr	r3, [pc, #96]	; (8010b54 <HAL_RTC_SetTime+0x138>)
 8010af4:	400b      	ands	r3, r1
 8010af6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	689a      	ldr	r2, [r3, #8]
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010b06:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	6899      	ldr	r1, [r3, #8]
 8010b0e:	68bb      	ldr	r3, [r7, #8]
 8010b10:	68da      	ldr	r2, [r3, #12]
 8010b12:	68bb      	ldr	r3, [r7, #8]
 8010b14:	691b      	ldr	r3, [r3, #16]
 8010b16:	431a      	orrs	r2, r3
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	430a      	orrs	r2, r1
 8010b1e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010b20:	68f8      	ldr	r0, [r7, #12]
 8010b22:	f000 f9a3 	bl	8010e6c <RTC_ExitInitMode>
 8010b26:	4603      	mov	r3, r0
 8010b28:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	22ff      	movs	r2, #255	; 0xff
 8010b30:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8010b32:	7cfb      	ldrb	r3, [r7, #19]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d103      	bne.n	8010b40 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	2201      	movs	r2, #1
 8010b3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	2200      	movs	r2, #0
 8010b44:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8010b48:	7cfb      	ldrb	r3, [r7, #19]
}
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	371c      	adds	r7, #28
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	bd90      	pop	{r4, r7, pc}
 8010b52:	bf00      	nop
 8010b54:	007f7f7f 	.word	0x007f7f7f

08010b58 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b086      	sub	sp, #24
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	60f8      	str	r0, [r7, #12]
 8010b60:	60b9      	str	r1, [r7, #8]
 8010b62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010b6a:	68bb      	ldr	r3, [r7, #8]
 8010b6c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	691b      	ldr	r3, [r3, #16]
 8010b74:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	681a      	ldr	r2, [r3, #0]
 8010b82:	4b22      	ldr	r3, [pc, #136]	; (8010c0c <HAL_RTC_GetTime+0xb4>)
 8010b84:	4013      	ands	r3, r2
 8010b86:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8010b88:	697b      	ldr	r3, [r7, #20]
 8010b8a:	0c1b      	lsrs	r3, r3, #16
 8010b8c:	b2db      	uxtb	r3, r3
 8010b8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010b92:	b2da      	uxtb	r2, r3
 8010b94:	68bb      	ldr	r3, [r7, #8]
 8010b96:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8010b98:	697b      	ldr	r3, [r7, #20]
 8010b9a:	0a1b      	lsrs	r3, r3, #8
 8010b9c:	b2db      	uxtb	r3, r3
 8010b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ba2:	b2da      	uxtb	r2, r3
 8010ba4:	68bb      	ldr	r3, [r7, #8]
 8010ba6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	b2db      	uxtb	r3, r3
 8010bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bb0:	b2da      	uxtb	r2, r3
 8010bb2:	68bb      	ldr	r3, [r7, #8]
 8010bb4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8010bb6:	697b      	ldr	r3, [r7, #20]
 8010bb8:	0d9b      	lsrs	r3, r3, #22
 8010bba:	b2db      	uxtb	r3, r3
 8010bbc:	f003 0301 	and.w	r3, r3, #1
 8010bc0:	b2da      	uxtb	r2, r3
 8010bc2:	68bb      	ldr	r3, [r7, #8]
 8010bc4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d11a      	bne.n	8010c02 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8010bcc:	68bb      	ldr	r3, [r7, #8]
 8010bce:	781b      	ldrb	r3, [r3, #0]
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f000 f9a9 	bl	8010f28 <RTC_Bcd2ToByte>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	461a      	mov	r2, r3
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	785b      	ldrb	r3, [r3, #1]
 8010be2:	4618      	mov	r0, r3
 8010be4:	f000 f9a0 	bl	8010f28 <RTC_Bcd2ToByte>
 8010be8:	4603      	mov	r3, r0
 8010bea:	461a      	mov	r2, r3
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8010bf0:	68bb      	ldr	r3, [r7, #8]
 8010bf2:	789b      	ldrb	r3, [r3, #2]
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f000 f997 	bl	8010f28 <RTC_Bcd2ToByte>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	461a      	mov	r2, r3
 8010bfe:	68bb      	ldr	r3, [r7, #8]
 8010c00:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8010c02:	2300      	movs	r3, #0
}
 8010c04:	4618      	mov	r0, r3
 8010c06:	3718      	adds	r7, #24
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	bd80      	pop	{r7, pc}
 8010c0c:	007f7f7f 	.word	0x007f7f7f

08010c10 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010c10:	b590      	push	{r4, r7, lr}
 8010c12:	b087      	sub	sp, #28
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	60f8      	str	r0, [r7, #12]
 8010c18:	60b9      	str	r1, [r7, #8]
 8010c1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010c22:	2b01      	cmp	r3, #1
 8010c24:	d101      	bne.n	8010c2a <HAL_RTC_SetDate+0x1a>
 8010c26:	2302      	movs	r3, #2
 8010c28:	e073      	b.n	8010d12 <HAL_RTC_SetDate+0x102>
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	2201      	movs	r2, #1
 8010c2e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	2202      	movs	r2, #2
 8010c36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d10e      	bne.n	8010c5e <HAL_RTC_SetDate+0x4e>
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	785b      	ldrb	r3, [r3, #1]
 8010c44:	f003 0310 	and.w	r3, r3, #16
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d008      	beq.n	8010c5e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8010c4c:	68bb      	ldr	r3, [r7, #8]
 8010c4e:	785b      	ldrb	r3, [r3, #1]
 8010c50:	f023 0310 	bic.w	r3, r3, #16
 8010c54:	b2db      	uxtb	r3, r3
 8010c56:	330a      	adds	r3, #10
 8010c58:	b2da      	uxtb	r2, r3
 8010c5a:	68bb      	ldr	r3, [r7, #8]
 8010c5c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d11c      	bne.n	8010c9e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8010c64:	68bb      	ldr	r3, [r7, #8]
 8010c66:	78db      	ldrb	r3, [r3, #3]
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f000 f93d 	bl	8010ee8 <RTC_ByteToBcd2>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	785b      	ldrb	r3, [r3, #1]
 8010c76:	4618      	mov	r0, r3
 8010c78:	f000 f936 	bl	8010ee8 <RTC_ByteToBcd2>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8010c80:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8010c82:	68bb      	ldr	r3, [r7, #8]
 8010c84:	789b      	ldrb	r3, [r3, #2]
 8010c86:	4618      	mov	r0, r3
 8010c88:	f000 f92e 	bl	8010ee8 <RTC_ByteToBcd2>
 8010c8c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8010c8e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8010c92:	68bb      	ldr	r3, [r7, #8]
 8010c94:	781b      	ldrb	r3, [r3, #0]
 8010c96:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8010c98:	4313      	orrs	r3, r2
 8010c9a:	617b      	str	r3, [r7, #20]
 8010c9c:	e00e      	b.n	8010cbc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	78db      	ldrb	r3, [r3, #3]
 8010ca2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	785b      	ldrb	r3, [r3, #1]
 8010ca8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8010caa:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8010cac:	68ba      	ldr	r2, [r7, #8]
 8010cae:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8010cb0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8010cb2:	68bb      	ldr	r3, [r7, #8]
 8010cb4:	781b      	ldrb	r3, [r3, #0]
 8010cb6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8010cb8:	4313      	orrs	r3, r2
 8010cba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	22ca      	movs	r2, #202	; 0xca
 8010cc2:	625a      	str	r2, [r3, #36]	; 0x24
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	2253      	movs	r2, #83	; 0x53
 8010cca:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010ccc:	68f8      	ldr	r0, [r7, #12]
 8010cce:	f000 f899 	bl	8010e04 <RTC_EnterInitMode>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8010cd6:	7cfb      	ldrb	r3, [r7, #19]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d10a      	bne.n	8010cf2 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	681a      	ldr	r2, [r3, #0]
 8010ce0:	6979      	ldr	r1, [r7, #20]
 8010ce2:	4b0e      	ldr	r3, [pc, #56]	; (8010d1c <HAL_RTC_SetDate+0x10c>)
 8010ce4:	400b      	ands	r3, r1
 8010ce6:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010ce8:	68f8      	ldr	r0, [r7, #12]
 8010cea:	f000 f8bf 	bl	8010e6c <RTC_ExitInitMode>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	22ff      	movs	r2, #255	; 0xff
 8010cf8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8010cfa:	7cfb      	ldrb	r3, [r7, #19]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d103      	bne.n	8010d08 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	2201      	movs	r2, #1
 8010d04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8010d10:	7cfb      	ldrb	r3, [r7, #19]


}
 8010d12:	4618      	mov	r0, r3
 8010d14:	371c      	adds	r7, #28
 8010d16:	46bd      	mov	sp, r7
 8010d18:	bd90      	pop	{r4, r7, pc}
 8010d1a:	bf00      	nop
 8010d1c:	00ffff3f 	.word	0x00ffff3f

08010d20 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b086      	sub	sp, #24
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	60f8      	str	r0, [r7, #12]
 8010d28:	60b9      	str	r1, [r7, #8]
 8010d2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	685a      	ldr	r2, [r3, #4]
 8010d32:	4b21      	ldr	r3, [pc, #132]	; (8010db8 <HAL_RTC_GetDate+0x98>)
 8010d34:	4013      	ands	r3, r2
 8010d36:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8010d38:	697b      	ldr	r3, [r7, #20]
 8010d3a:	0c1b      	lsrs	r3, r3, #16
 8010d3c:	b2da      	uxtb	r2, r3
 8010d3e:	68bb      	ldr	r3, [r7, #8]
 8010d40:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8010d42:	697b      	ldr	r3, [r7, #20]
 8010d44:	0a1b      	lsrs	r3, r3, #8
 8010d46:	b2db      	uxtb	r3, r3
 8010d48:	f003 031f 	and.w	r3, r3, #31
 8010d4c:	b2da      	uxtb	r2, r3
 8010d4e:	68bb      	ldr	r3, [r7, #8]
 8010d50:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8010d52:	697b      	ldr	r3, [r7, #20]
 8010d54:	b2db      	uxtb	r3, r3
 8010d56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010d5a:	b2da      	uxtb	r2, r3
 8010d5c:	68bb      	ldr	r3, [r7, #8]
 8010d5e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8010d60:	697b      	ldr	r3, [r7, #20]
 8010d62:	0b5b      	lsrs	r3, r3, #13
 8010d64:	b2db      	uxtb	r3, r3
 8010d66:	f003 0307 	and.w	r3, r3, #7
 8010d6a:	b2da      	uxtb	r2, r3
 8010d6c:	68bb      	ldr	r3, [r7, #8]
 8010d6e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d11a      	bne.n	8010dac <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8010d76:	68bb      	ldr	r3, [r7, #8]
 8010d78:	78db      	ldrb	r3, [r3, #3]
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f000 f8d4 	bl	8010f28 <RTC_Bcd2ToByte>
 8010d80:	4603      	mov	r3, r0
 8010d82:	461a      	mov	r2, r3
 8010d84:	68bb      	ldr	r3, [r7, #8]
 8010d86:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8010d88:	68bb      	ldr	r3, [r7, #8]
 8010d8a:	785b      	ldrb	r3, [r3, #1]
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	f000 f8cb 	bl	8010f28 <RTC_Bcd2ToByte>
 8010d92:	4603      	mov	r3, r0
 8010d94:	461a      	mov	r2, r3
 8010d96:	68bb      	ldr	r3, [r7, #8]
 8010d98:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8010d9a:	68bb      	ldr	r3, [r7, #8]
 8010d9c:	789b      	ldrb	r3, [r3, #2]
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f000 f8c2 	bl	8010f28 <RTC_Bcd2ToByte>
 8010da4:	4603      	mov	r3, r0
 8010da6:	461a      	mov	r2, r3
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8010dac:	2300      	movs	r3, #0
}
 8010dae:	4618      	mov	r0, r3
 8010db0:	3718      	adds	r7, #24
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd80      	pop	{r7, pc}
 8010db6:	bf00      	nop
 8010db8:	00ffff3f 	.word	0x00ffff3f

08010dbc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b084      	sub	sp, #16
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	4a0d      	ldr	r2, [pc, #52]	; (8010e00 <HAL_RTC_WaitForSynchro+0x44>)
 8010dca:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8010dcc:	f7f3 ffe2 	bl	8004d94 <HAL_GetTick>
 8010dd0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010dd2:	e009      	b.n	8010de8 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010dd4:	f7f3 ffde 	bl	8004d94 <HAL_GetTick>
 8010dd8:	4602      	mov	r2, r0
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	1ad3      	subs	r3, r2, r3
 8010dde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010de2:	d901      	bls.n	8010de8 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8010de4:	2303      	movs	r3, #3
 8010de6:	e007      	b.n	8010df8 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	68db      	ldr	r3, [r3, #12]
 8010dee:	f003 0320 	and.w	r3, r3, #32
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d0ee      	beq.n	8010dd4 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8010df6:	2300      	movs	r3, #0
}
 8010df8:	4618      	mov	r0, r3
 8010dfa:	3710      	adds	r7, #16
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd80      	pop	{r7, pc}
 8010e00:	0003ff5f 	.word	0x0003ff5f

08010e04 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b084      	sub	sp, #16
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	68db      	ldr	r3, [r3, #12]
 8010e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d120      	bne.n	8010e60 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010e26:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8010e28:	f7f3 ffb4 	bl	8004d94 <HAL_GetTick>
 8010e2c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8010e2e:	e00d      	b.n	8010e4c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8010e30:	f7f3 ffb0 	bl	8004d94 <HAL_GetTick>
 8010e34:	4602      	mov	r2, r0
 8010e36:	68bb      	ldr	r3, [r7, #8]
 8010e38:	1ad3      	subs	r3, r2, r3
 8010e3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010e3e:	d905      	bls.n	8010e4c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8010e40:	2303      	movs	r3, #3
 8010e42:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	2203      	movs	r2, #3
 8010e48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	68db      	ldr	r3, [r3, #12]
 8010e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d102      	bne.n	8010e60 <RTC_EnterInitMode+0x5c>
 8010e5a:	7bfb      	ldrb	r3, [r7, #15]
 8010e5c:	2b03      	cmp	r3, #3
 8010e5e:	d1e7      	bne.n	8010e30 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8010e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e62:	4618      	mov	r0, r3
 8010e64:	3710      	adds	r7, #16
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}
	...

08010e6c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b084      	sub	sp, #16
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010e74:	2300      	movs	r3, #0
 8010e76:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8010e78:	4b1a      	ldr	r3, [pc, #104]	; (8010ee4 <RTC_ExitInitMode+0x78>)
 8010e7a:	68db      	ldr	r3, [r3, #12]
 8010e7c:	4a19      	ldr	r2, [pc, #100]	; (8010ee4 <RTC_ExitInitMode+0x78>)
 8010e7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010e82:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8010e84:	4b17      	ldr	r3, [pc, #92]	; (8010ee4 <RTC_ExitInitMode+0x78>)
 8010e86:	689b      	ldr	r3, [r3, #8]
 8010e88:	f003 0320 	and.w	r3, r3, #32
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d10c      	bne.n	8010eaa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010e90:	6878      	ldr	r0, [r7, #4]
 8010e92:	f7ff ff93 	bl	8010dbc <HAL_RTC_WaitForSynchro>
 8010e96:	4603      	mov	r3, r0
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d01e      	beq.n	8010eda <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	2203      	movs	r2, #3
 8010ea0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8010ea4:	2303      	movs	r3, #3
 8010ea6:	73fb      	strb	r3, [r7, #15]
 8010ea8:	e017      	b.n	8010eda <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8010eaa:	4b0e      	ldr	r3, [pc, #56]	; (8010ee4 <RTC_ExitInitMode+0x78>)
 8010eac:	689b      	ldr	r3, [r3, #8]
 8010eae:	4a0d      	ldr	r2, [pc, #52]	; (8010ee4 <RTC_ExitInitMode+0x78>)
 8010eb0:	f023 0320 	bic.w	r3, r3, #32
 8010eb4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	f7ff ff80 	bl	8010dbc <HAL_RTC_WaitForSynchro>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d005      	beq.n	8010ece <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	2203      	movs	r2, #3
 8010ec6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8010eca:	2303      	movs	r3, #3
 8010ecc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8010ece:	4b05      	ldr	r3, [pc, #20]	; (8010ee4 <RTC_ExitInitMode+0x78>)
 8010ed0:	689b      	ldr	r3, [r3, #8]
 8010ed2:	4a04      	ldr	r2, [pc, #16]	; (8010ee4 <RTC_ExitInitMode+0x78>)
 8010ed4:	f043 0320 	orr.w	r3, r3, #32
 8010ed8:	6093      	str	r3, [r2, #8]
  }

  return status;
 8010eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8010edc:	4618      	mov	r0, r3
 8010ede:	3710      	adds	r7, #16
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}
 8010ee4:	58004000 	.word	0x58004000

08010ee8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8010ee8:	b480      	push	{r7}
 8010eea:	b085      	sub	sp, #20
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	4603      	mov	r3, r0
 8010ef0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8010ef6:	79fb      	ldrb	r3, [r7, #7]
 8010ef8:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8010efa:	e005      	b.n	8010f08 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	3301      	adds	r3, #1
 8010f00:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8010f02:	7afb      	ldrb	r3, [r7, #11]
 8010f04:	3b0a      	subs	r3, #10
 8010f06:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8010f08:	7afb      	ldrb	r3, [r7, #11]
 8010f0a:	2b09      	cmp	r3, #9
 8010f0c:	d8f6      	bhi.n	8010efc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	b2db      	uxtb	r3, r3
 8010f12:	011b      	lsls	r3, r3, #4
 8010f14:	b2da      	uxtb	r2, r3
 8010f16:	7afb      	ldrb	r3, [r7, #11]
 8010f18:	4313      	orrs	r3, r2
 8010f1a:	b2db      	uxtb	r3, r3
}
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	3714      	adds	r7, #20
 8010f20:	46bd      	mov	sp, r7
 8010f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f26:	4770      	bx	lr

08010f28 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8010f28:	b480      	push	{r7}
 8010f2a:	b085      	sub	sp, #20
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	4603      	mov	r3, r0
 8010f30:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8010f32:	79fb      	ldrb	r3, [r7, #7]
 8010f34:	091b      	lsrs	r3, r3, #4
 8010f36:	b2db      	uxtb	r3, r3
 8010f38:	461a      	mov	r2, r3
 8010f3a:	0092      	lsls	r2, r2, #2
 8010f3c:	4413      	add	r3, r2
 8010f3e:	005b      	lsls	r3, r3, #1
 8010f40:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8010f42:	79fb      	ldrb	r3, [r7, #7]
 8010f44:	f003 030f 	and.w	r3, r3, #15
 8010f48:	b2da      	uxtb	r2, r3
 8010f4a:	7bfb      	ldrb	r3, [r7, #15]
 8010f4c:	4413      	add	r3, r2
 8010f4e:	b2db      	uxtb	r3, r3
}
 8010f50:	4618      	mov	r0, r3
 8010f52:	3714      	adds	r7, #20
 8010f54:	46bd      	mov	sp, r7
 8010f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5a:	4770      	bx	lr

08010f5c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b084      	sub	sp, #16
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d101      	bne.n	8010f6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010f6a:	2301      	movs	r3, #1
 8010f6c:	e10f      	b.n	801118e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2200      	movs	r2, #0
 8010f72:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	4a87      	ldr	r2, [pc, #540]	; (8011198 <HAL_SPI_Init+0x23c>)
 8010f7a:	4293      	cmp	r3, r2
 8010f7c:	d00f      	beq.n	8010f9e <HAL_SPI_Init+0x42>
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	4a86      	ldr	r2, [pc, #536]	; (801119c <HAL_SPI_Init+0x240>)
 8010f84:	4293      	cmp	r3, r2
 8010f86:	d00a      	beq.n	8010f9e <HAL_SPI_Init+0x42>
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	4a84      	ldr	r2, [pc, #528]	; (80111a0 <HAL_SPI_Init+0x244>)
 8010f8e:	4293      	cmp	r3, r2
 8010f90:	d005      	beq.n	8010f9e <HAL_SPI_Init+0x42>
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	68db      	ldr	r3, [r3, #12]
 8010f96:	2b0f      	cmp	r3, #15
 8010f98:	d901      	bls.n	8010f9e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8010f9a:	2301      	movs	r3, #1
 8010f9c:	e0f7      	b.n	801118e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8010f9e:	6878      	ldr	r0, [r7, #4]
 8010fa0:	f000 fd60 	bl	8011a64 <SPI_GetPacketSize>
 8010fa4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	4a7b      	ldr	r2, [pc, #492]	; (8011198 <HAL_SPI_Init+0x23c>)
 8010fac:	4293      	cmp	r3, r2
 8010fae:	d00c      	beq.n	8010fca <HAL_SPI_Init+0x6e>
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	4a79      	ldr	r2, [pc, #484]	; (801119c <HAL_SPI_Init+0x240>)
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	d007      	beq.n	8010fca <HAL_SPI_Init+0x6e>
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	4a78      	ldr	r2, [pc, #480]	; (80111a0 <HAL_SPI_Init+0x244>)
 8010fc0:	4293      	cmp	r3, r2
 8010fc2:	d002      	beq.n	8010fca <HAL_SPI_Init+0x6e>
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	2b08      	cmp	r3, #8
 8010fc8:	d811      	bhi.n	8010fee <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010fce:	4a72      	ldr	r2, [pc, #456]	; (8011198 <HAL_SPI_Init+0x23c>)
 8010fd0:	4293      	cmp	r3, r2
 8010fd2:	d009      	beq.n	8010fe8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	4a70      	ldr	r2, [pc, #448]	; (801119c <HAL_SPI_Init+0x240>)
 8010fda:	4293      	cmp	r3, r2
 8010fdc:	d004      	beq.n	8010fe8 <HAL_SPI_Init+0x8c>
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	4a6f      	ldr	r2, [pc, #444]	; (80111a0 <HAL_SPI_Init+0x244>)
 8010fe4:	4293      	cmp	r3, r2
 8010fe6:	d104      	bne.n	8010ff2 <HAL_SPI_Init+0x96>
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	2b10      	cmp	r3, #16
 8010fec:	d901      	bls.n	8010ff2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8010fee:	2301      	movs	r3, #1
 8010ff0:	e0cd      	b.n	801118e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010ff8:	b2db      	uxtb	r3, r3
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d106      	bne.n	801100c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	2200      	movs	r2, #0
 8011002:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011006:	6878      	ldr	r0, [r7, #4]
 8011008:	f7f2 fba0 	bl	800374c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2202      	movs	r2, #2
 8011010:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	681a      	ldr	r2, [r3, #0]
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	f022 0201 	bic.w	r2, r2, #1
 8011022:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	689b      	ldr	r3, [r3, #8]
 801102a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 801102e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	699b      	ldr	r3, [r3, #24]
 8011034:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011038:	d119      	bne.n	801106e <HAL_SPI_Init+0x112>
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	685b      	ldr	r3, [r3, #4]
 801103e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011042:	d103      	bne.n	801104c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011048:	2b00      	cmp	r3, #0
 801104a:	d008      	beq.n	801105e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011050:	2b00      	cmp	r3, #0
 8011052:	d10c      	bne.n	801106e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011058:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801105c:	d107      	bne.n	801106e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	681a      	ldr	r2, [r3, #0]
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801106c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	685b      	ldr	r3, [r3, #4]
 8011072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011076:	2b00      	cmp	r3, #0
 8011078:	d00f      	beq.n	801109a <HAL_SPI_Init+0x13e>
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	68db      	ldr	r3, [r3, #12]
 801107e:	2b06      	cmp	r3, #6
 8011080:	d90b      	bls.n	801109a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	430a      	orrs	r2, r1
 8011096:	601a      	str	r2, [r3, #0]
 8011098:	e007      	b.n	80110aa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	681a      	ldr	r2, [r3, #0]
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80110a8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	69da      	ldr	r2, [r3, #28]
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110b2:	431a      	orrs	r2, r3
 80110b4:	68bb      	ldr	r3, [r7, #8]
 80110b6:	431a      	orrs	r2, r3
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110bc:	ea42 0103 	orr.w	r1, r2, r3
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	68da      	ldr	r2, [r3, #12]
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	430a      	orrs	r2, r1
 80110ca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110d4:	431a      	orrs	r2, r3
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110da:	431a      	orrs	r2, r3
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	699b      	ldr	r3, [r3, #24]
 80110e0:	431a      	orrs	r2, r3
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	691b      	ldr	r3, [r3, #16]
 80110e6:	431a      	orrs	r2, r3
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	695b      	ldr	r3, [r3, #20]
 80110ec:	431a      	orrs	r2, r3
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	6a1b      	ldr	r3, [r3, #32]
 80110f2:	431a      	orrs	r2, r3
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	685b      	ldr	r3, [r3, #4]
 80110f8:	431a      	orrs	r2, r3
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80110fe:	431a      	orrs	r2, r3
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	689b      	ldr	r3, [r3, #8]
 8011104:	431a      	orrs	r2, r3
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801110a:	ea42 0103 	orr.w	r1, r2, r3
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	430a      	orrs	r2, r1
 8011118:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	685b      	ldr	r3, [r3, #4]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d113      	bne.n	801114a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	689b      	ldr	r3, [r3, #8]
 8011128:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011134:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	689b      	ldr	r3, [r3, #8]
 801113c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011148:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	f022 0201 	bic.w	r2, r2, #1
 8011158:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	685b      	ldr	r3, [r3, #4]
 801115e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011162:	2b00      	cmp	r3, #0
 8011164:	d00a      	beq.n	801117c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	68db      	ldr	r3, [r3, #12]
 801116c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	430a      	orrs	r2, r1
 801117a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2200      	movs	r2, #0
 8011180:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2201      	movs	r2, #1
 8011188:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 801118c:	2300      	movs	r3, #0
}
 801118e:	4618      	mov	r0, r3
 8011190:	3710      	adds	r7, #16
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}
 8011196:	bf00      	nop
 8011198:	40013000 	.word	0x40013000
 801119c:	40003800 	.word	0x40003800
 80111a0:	40003c00 	.word	0x40003c00

080111a4 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b084      	sub	sp, #16
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	60f8      	str	r0, [r7, #12]
 80111ac:	60b9      	str	r1, [r7, #8]
 80111ae:	4613      	mov	r3, r2
 80111b0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80111b8:	b2db      	uxtb	r3, r3
 80111ba:	2b01      	cmp	r3, #1
 80111bc:	d005      	beq.n	80111ca <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	2200      	movs	r2, #0
 80111c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 80111c6:	2302      	movs	r3, #2
 80111c8:	e127      	b.n	801141a <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 80111ca:	68bb      	ldr	r3, [r7, #8]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d002      	beq.n	80111d6 <HAL_SPI_Receive_DMA+0x32>
 80111d0:	88fb      	ldrh	r3, [r7, #6]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d105      	bne.n	80111e2 <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	2200      	movs	r2, #0
 80111da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 80111de:	2301      	movs	r3, #1
 80111e0:	e11b      	b.n	801141a <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80111e8:	2b01      	cmp	r3, #1
 80111ea:	d101      	bne.n	80111f0 <HAL_SPI_Receive_DMA+0x4c>
 80111ec:	2302      	movs	r3, #2
 80111ee:	e114      	b.n	801141a <HAL_SPI_Receive_DMA+0x276>
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	2201      	movs	r2, #1
 80111f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	2204      	movs	r2, #4
 80111fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	2200      	movs	r2, #0
 8011204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	68ba      	ldr	r2, [r7, #8]
 801120c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	88fa      	ldrh	r2, [r7, #6]
 8011212:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	88fa      	ldrh	r2, [r7, #6]
 801121a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	2200      	movs	r2, #0
 8011222:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	2200      	movs	r2, #0
 8011228:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	2200      	movs	r2, #0
 801122e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	2200      	movs	r2, #0
 8011236:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	689b      	ldr	r3, [r3, #8]
 801123e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8011242:	d108      	bne.n	8011256 <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	681a      	ldr	r2, [r3, #0]
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011252:	601a      	str	r2, [r3, #0]
 8011254:	e009      	b.n	801126a <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	68db      	ldr	r3, [r3, #12]
 801125c:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011268:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	68db      	ldr	r3, [r3, #12]
 801126e:	2b0f      	cmp	r3, #15
 8011270:	d905      	bls.n	801127e <HAL_SPI_Receive_DMA+0xda>
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011276:	699b      	ldr	r3, [r3, #24]
 8011278:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801127c:	d10f      	bne.n	801129e <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011282:	2b07      	cmp	r3, #7
 8011284:	d911      	bls.n	80112aa <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801128a:	699b      	ldr	r3, [r3, #24]
 801128c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011290:	d00b      	beq.n	80112aa <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011296:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801129c:	d005      	beq.n	80112aa <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	2200      	movs	r2, #0
 80112a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 80112a6:	2301      	movs	r3, #1
 80112a8:	e0b7      	b.n	801141a <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	689a      	ldr	r2, [r3, #8]
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80112b8:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	68db      	ldr	r3, [r3, #12]
 80112be:	2b07      	cmp	r3, #7
 80112c0:	d820      	bhi.n	8011304 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80112c6:	699b      	ldr	r3, [r3, #24]
 80112c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80112cc:	d109      	bne.n	80112e2 <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80112d4:	b29b      	uxth	r3, r3
 80112d6:	3301      	adds	r3, #1
 80112d8:	105b      	asrs	r3, r3, #1
 80112da:	b29a      	uxth	r2, r3
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80112e6:	699b      	ldr	r3, [r3, #24]
 80112e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80112ec:	d11e      	bne.n	801132c <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80112f4:	b29b      	uxth	r3, r3
 80112f6:	3303      	adds	r3, #3
 80112f8:	109b      	asrs	r3, r3, #2
 80112fa:	b29a      	uxth	r2, r3
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011302:	e013      	b.n	801132c <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	68db      	ldr	r3, [r3, #12]
 8011308:	2b0f      	cmp	r3, #15
 801130a:	d80f      	bhi.n	801132c <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011310:	699b      	ldr	r3, [r3, #24]
 8011312:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011316:	d109      	bne.n	801132c <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801131e:	b29b      	uxth	r3, r3
 8011320:	3301      	adds	r3, #1
 8011322:	105b      	asrs	r3, r3, #1
 8011324:	b29a      	uxth	r2, r3
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011330:	4a3c      	ldr	r2, [pc, #240]	; (8011424 <HAL_SPI_Receive_DMA+0x280>)
 8011332:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011338:	4a3b      	ldr	r2, [pc, #236]	; (8011428 <HAL_SPI_Receive_DMA+0x284>)
 801133a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011340:	4a3a      	ldr	r2, [pc, #232]	; (801142c <HAL_SPI_Receive_DMA+0x288>)
 8011342:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011348:	2200      	movs	r2, #0
 801134a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	3330      	adds	r3, #48	; 0x30
 8011356:	4619      	mov	r1, r3
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801135c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011364:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8011366:	f7f6 fa11 	bl	800778c <HAL_DMA_Start_IT>
 801136a:	4603      	mov	r3, r0
 801136c:	2b00      	cmp	r3, #0
 801136e:	d011      	beq.n	8011394 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011376:	f043 0210 	orr.w	r2, r3, #16
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	2201      	movs	r2, #1
 8011384:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	2200      	movs	r2, #0
 801138c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 8011390:	2301      	movs	r3, #1
 8011392:	e042      	b.n	801141a <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011398:	69db      	ldr	r3, [r3, #28]
 801139a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801139e:	d108      	bne.n	80113b2 <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	6859      	ldr	r1, [r3, #4]
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	681a      	ldr	r2, [r3, #0]
 80113aa:	4b21      	ldr	r3, [pc, #132]	; (8011430 <HAL_SPI_Receive_DMA+0x28c>)
 80113ac:	400b      	ands	r3, r1
 80113ae:	6053      	str	r3, [r2, #4]
 80113b0:	e009      	b.n	80113c6 <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	685a      	ldr	r2, [r3, #4]
 80113b8:	4b1d      	ldr	r3, [pc, #116]	; (8011430 <HAL_SPI_Receive_DMA+0x28c>)
 80113ba:	4013      	ands	r3, r2
 80113bc:	88f9      	ldrh	r1, [r7, #6]
 80113be:	68fa      	ldr	r2, [r7, #12]
 80113c0:	6812      	ldr	r2, [r2, #0]
 80113c2:	430b      	orrs	r3, r1
 80113c4:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	689a      	ldr	r2, [r3, #8]
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80113d4:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	691a      	ldr	r2, [r3, #16]
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 80113e4:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	681a      	ldr	r2, [r3, #0]
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	f042 0201 	orr.w	r2, r2, #1
 80113f4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	685b      	ldr	r3, [r3, #4]
 80113fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80113fe:	d107      	bne.n	8011410 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	681a      	ldr	r2, [r3, #0]
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801140e:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	2200      	movs	r2, #0
 8011414:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011418:	2300      	movs	r3, #0
}
 801141a:	4618      	mov	r0, r3
 801141c:	3710      	adds	r7, #16
 801141e:	46bd      	mov	sp, r7
 8011420:	bd80      	pop	{r7, pc}
 8011422:	bf00      	nop
 8011424:	0801188f 	.word	0x0801188f
 8011428:	08011849 	.word	0x08011849
 801142c:	080118ab 	.word	0x080118ab
 8011430:	ffff0000 	.word	0xffff0000

08011434 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b08a      	sub	sp, #40	; 0x28
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	691b      	ldr	r3, [r3, #16]
 8011442:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	695b      	ldr	r3, [r3, #20]
 801144a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 801144c:	6a3a      	ldr	r2, [r7, #32]
 801144e:	69fb      	ldr	r3, [r7, #28]
 8011450:	4013      	ands	r3, r2
 8011452:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	689b      	ldr	r3, [r3, #8]
 801145a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 801145c:	2300      	movs	r3, #0
 801145e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011466:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	3330      	adds	r3, #48	; 0x30
 801146e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8011470:	69fb      	ldr	r3, [r7, #28]
 8011472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011476:	2b00      	cmp	r3, #0
 8011478:	d010      	beq.n	801149c <HAL_SPI_IRQHandler+0x68>
 801147a:	6a3b      	ldr	r3, [r7, #32]
 801147c:	f003 0308 	and.w	r3, r3, #8
 8011480:	2b00      	cmp	r3, #0
 8011482:	d00b      	beq.n	801149c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	699a      	ldr	r2, [r3, #24]
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011492:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8011494:	6878      	ldr	r0, [r7, #4]
 8011496:	f000 f9cd 	bl	8011834 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801149a:	e192      	b.n	80117c2 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801149c:	69bb      	ldr	r3, [r7, #24]
 801149e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d113      	bne.n	80114ce <HAL_SPI_IRQHandler+0x9a>
 80114a6:	69bb      	ldr	r3, [r7, #24]
 80114a8:	f003 0320 	and.w	r3, r3, #32
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d10e      	bne.n	80114ce <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80114b0:	69bb      	ldr	r3, [r7, #24]
 80114b2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d009      	beq.n	80114ce <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114be:	6878      	ldr	r0, [r7, #4]
 80114c0:	4798      	blx	r3
    hspi->RxISR(hspi);
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114c6:	6878      	ldr	r0, [r7, #4]
 80114c8:	4798      	blx	r3
    handled = 1UL;
 80114ca:	2301      	movs	r3, #1
 80114cc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80114ce:	69bb      	ldr	r3, [r7, #24]
 80114d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d10f      	bne.n	80114f8 <HAL_SPI_IRQHandler+0xc4>
 80114d8:	69bb      	ldr	r3, [r7, #24]
 80114da:	f003 0301 	and.w	r3, r3, #1
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d00a      	beq.n	80114f8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80114e2:	69bb      	ldr	r3, [r7, #24]
 80114e4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d105      	bne.n	80114f8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114f0:	6878      	ldr	r0, [r7, #4]
 80114f2:	4798      	blx	r3
    handled = 1UL;
 80114f4:	2301      	movs	r3, #1
 80114f6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80114f8:	69bb      	ldr	r3, [r7, #24]
 80114fa:	f003 0320 	and.w	r3, r3, #32
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d10f      	bne.n	8011522 <HAL_SPI_IRQHandler+0xee>
 8011502:	69bb      	ldr	r3, [r7, #24]
 8011504:	f003 0302 	and.w	r3, r3, #2
 8011508:	2b00      	cmp	r3, #0
 801150a:	d00a      	beq.n	8011522 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801150c:	69bb      	ldr	r3, [r7, #24]
 801150e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8011512:	2b00      	cmp	r3, #0
 8011514:	d105      	bne.n	8011522 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	4798      	blx	r3
    handled = 1UL;
 801151e:	2301      	movs	r3, #1
 8011520:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8011522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011524:	2b00      	cmp	r3, #0
 8011526:	f040 8147 	bne.w	80117b8 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801152a:	69bb      	ldr	r3, [r7, #24]
 801152c:	f003 0308 	and.w	r3, r3, #8
 8011530:	2b00      	cmp	r3, #0
 8011532:	f000 808b 	beq.w	801164c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	699a      	ldr	r2, [r3, #24]
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	f042 0208 	orr.w	r2, r2, #8
 8011544:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	699a      	ldr	r2, [r3, #24]
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	f042 0210 	orr.w	r2, r2, #16
 8011554:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	699a      	ldr	r2, [r3, #24]
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011564:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	691a      	ldr	r2, [r3, #16]
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	f022 0208 	bic.w	r2, r2, #8
 8011574:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	689b      	ldr	r3, [r3, #8]
 801157c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011580:	2b00      	cmp	r3, #0
 8011582:	d13d      	bne.n	8011600 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8011584:	e036      	b.n	80115f4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	68db      	ldr	r3, [r3, #12]
 801158a:	2b0f      	cmp	r3, #15
 801158c:	d90b      	bls.n	80115a6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	681a      	ldr	r2, [r3, #0]
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011596:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011598:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801159e:	1d1a      	adds	r2, r3, #4
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	665a      	str	r2, [r3, #100]	; 0x64
 80115a4:	e01d      	b.n	80115e2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	68db      	ldr	r3, [r3, #12]
 80115aa:	2b07      	cmp	r3, #7
 80115ac:	d90b      	bls.n	80115c6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80115b2:	68fa      	ldr	r2, [r7, #12]
 80115b4:	8812      	ldrh	r2, [r2, #0]
 80115b6:	b292      	uxth	r2, r2
 80115b8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80115be:	1c9a      	adds	r2, r3, #2
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	665a      	str	r2, [r3, #100]	; 0x64
 80115c4:	e00d      	b.n	80115e2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80115d2:	7812      	ldrb	r2, [r2, #0]
 80115d4:	b2d2      	uxtb	r2, r2
 80115d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80115dc:	1c5a      	adds	r2, r3, #1
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80115e8:	b29b      	uxth	r3, r3
 80115ea:	3b01      	subs	r3, #1
 80115ec:	b29a      	uxth	r2, r3
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80115fa:	b29b      	uxth	r3, r3
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d1c2      	bne.n	8011586 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8011600:	6878      	ldr	r0, [r7, #4]
 8011602:	f000 f98f 	bl	8011924 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2201      	movs	r2, #1
 801160a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011614:	2b00      	cmp	r3, #0
 8011616:	d003      	beq.n	8011620 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8011618:	6878      	ldr	r0, [r7, #4]
 801161a:	f000 f901 	bl	8011820 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801161e:	e0d0      	b.n	80117c2 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8011620:	7cfb      	ldrb	r3, [r7, #19]
 8011622:	2b05      	cmp	r3, #5
 8011624:	d103      	bne.n	801162e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8011626:	6878      	ldr	r0, [r7, #4]
 8011628:	f000 f8e6 	bl	80117f8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 801162c:	e0c6      	b.n	80117bc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 801162e:	7cfb      	ldrb	r3, [r7, #19]
 8011630:	2b04      	cmp	r3, #4
 8011632:	d103      	bne.n	801163c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8011634:	6878      	ldr	r0, [r7, #4]
 8011636:	f000 f8d5 	bl	80117e4 <HAL_SPI_RxCpltCallback>
    return;
 801163a:	e0bf      	b.n	80117bc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 801163c:	7cfb      	ldrb	r3, [r7, #19]
 801163e:	2b03      	cmp	r3, #3
 8011640:	f040 80bc 	bne.w	80117bc <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	f000 f8c3 	bl	80117d0 <HAL_SPI_TxCpltCallback>
    return;
 801164a:	e0b7      	b.n	80117bc <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 801164c:	69bb      	ldr	r3, [r7, #24]
 801164e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8011652:	2b00      	cmp	r3, #0
 8011654:	f000 80b5 	beq.w	80117c2 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8011658:	69bb      	ldr	r3, [r7, #24]
 801165a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801165e:	2b00      	cmp	r3, #0
 8011660:	d00f      	beq.n	8011682 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011668:	f043 0204 	orr.w	r2, r3, #4
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	699a      	ldr	r2, [r3, #24]
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011680:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8011682:	69bb      	ldr	r3, [r7, #24]
 8011684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011688:	2b00      	cmp	r3, #0
 801168a:	d00f      	beq.n	80116ac <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011692:	f043 0201 	orr.w	r2, r3, #1
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	699a      	ldr	r2, [r3, #24]
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80116aa:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80116ac:	69bb      	ldr	r3, [r7, #24]
 80116ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d00f      	beq.n	80116d6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80116bc:	f043 0208 	orr.w	r2, r3, #8
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	699a      	ldr	r2, [r3, #24]
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80116d4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80116d6:	69bb      	ldr	r3, [r7, #24]
 80116d8:	f003 0320 	and.w	r3, r3, #32
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d00f      	beq.n	8011700 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80116e6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	699a      	ldr	r2, [r3, #24]
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	f042 0220 	orr.w	r2, r2, #32
 80116fe:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011706:	2b00      	cmp	r3, #0
 8011708:	d05a      	beq.n	80117c0 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	681a      	ldr	r2, [r3, #0]
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	f022 0201 	bic.w	r2, r2, #1
 8011718:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	6919      	ldr	r1, [r3, #16]
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	681a      	ldr	r2, [r3, #0]
 8011724:	4b28      	ldr	r3, [pc, #160]	; (80117c8 <HAL_SPI_IRQHandler+0x394>)
 8011726:	400b      	ands	r3, r1
 8011728:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801172a:	697b      	ldr	r3, [r7, #20]
 801172c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011730:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8011734:	d138      	bne.n	80117a8 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	689a      	ldr	r2, [r3, #8]
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8011744:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801174a:	2b00      	cmp	r3, #0
 801174c:	d013      	beq.n	8011776 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011752:	4a1e      	ldr	r2, [pc, #120]	; (80117cc <HAL_SPI_IRQHandler+0x398>)
 8011754:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801175a:	4618      	mov	r0, r3
 801175c:	f7f6 fd9e 	bl	800829c <HAL_DMA_Abort_IT>
 8011760:	4603      	mov	r3, r0
 8011762:	2b00      	cmp	r3, #0
 8011764:	d007      	beq.n	8011776 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801176c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801177a:	2b00      	cmp	r3, #0
 801177c:	d020      	beq.n	80117c0 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011782:	4a12      	ldr	r2, [pc, #72]	; (80117cc <HAL_SPI_IRQHandler+0x398>)
 8011784:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801178a:	4618      	mov	r0, r3
 801178c:	f7f6 fd86 	bl	800829c <HAL_DMA_Abort_IT>
 8011790:	4603      	mov	r3, r0
 8011792:	2b00      	cmp	r3, #0
 8011794:	d014      	beq.n	80117c0 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801179c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80117a6:	e00b      	b.n	80117c0 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2201      	movs	r2, #1
 80117ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80117b0:	6878      	ldr	r0, [r7, #4]
 80117b2:	f000 f835 	bl	8011820 <HAL_SPI_ErrorCallback>
    return;
 80117b6:	e003      	b.n	80117c0 <HAL_SPI_IRQHandler+0x38c>
    return;
 80117b8:	bf00      	nop
 80117ba:	e002      	b.n	80117c2 <HAL_SPI_IRQHandler+0x38e>
    return;
 80117bc:	bf00      	nop
 80117be:	e000      	b.n	80117c2 <HAL_SPI_IRQHandler+0x38e>
    return;
 80117c0:	bf00      	nop
  }
}
 80117c2:	3728      	adds	r7, #40	; 0x28
 80117c4:	46bd      	mov	sp, r7
 80117c6:	bd80      	pop	{r7, pc}
 80117c8:	fffffc94 	.word	0xfffffc94
 80117cc:	080118f1 	.word	0x080118f1

080117d0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80117d0:	b480      	push	{r7}
 80117d2:	b083      	sub	sp, #12
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80117d8:	bf00      	nop
 80117da:	370c      	adds	r7, #12
 80117dc:	46bd      	mov	sp, r7
 80117de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e2:	4770      	bx	lr

080117e4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80117e4:	b480      	push	{r7}
 80117e6:	b083      	sub	sp, #12
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80117ec:	bf00      	nop
 80117ee:	370c      	adds	r7, #12
 80117f0:	46bd      	mov	sp, r7
 80117f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f6:	4770      	bx	lr

080117f8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80117f8:	b480      	push	{r7}
 80117fa:	b083      	sub	sp, #12
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8011800:	bf00      	nop
 8011802:	370c      	adds	r7, #12
 8011804:	46bd      	mov	sp, r7
 8011806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180a:	4770      	bx	lr

0801180c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801180c:	b480      	push	{r7}
 801180e:	b083      	sub	sp, #12
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8011814:	bf00      	nop
 8011816:	370c      	adds	r7, #12
 8011818:	46bd      	mov	sp, r7
 801181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181e:	4770      	bx	lr

08011820 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011820:	b480      	push	{r7}
 8011822:	b083      	sub	sp, #12
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8011828:	bf00      	nop
 801182a:	370c      	adds	r7, #12
 801182c:	46bd      	mov	sp, r7
 801182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011832:	4770      	bx	lr

08011834 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011834:	b480      	push	{r7}
 8011836:	b083      	sub	sp, #12
 8011838:	af00      	add	r7, sp, #0
 801183a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 801183c:	bf00      	nop
 801183e:	370c      	adds	r7, #12
 8011840:	46bd      	mov	sp, r7
 8011842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011846:	4770      	bx	lr

08011848 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b084      	sub	sp, #16
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011854:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801185c:	b2db      	uxtb	r3, r3
 801185e:	2b07      	cmp	r3, #7
 8011860:	d011      	beq.n	8011886 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011866:	69db      	ldr	r3, [r3, #28]
 8011868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801186c:	d103      	bne.n	8011876 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 801186e:	68f8      	ldr	r0, [r7, #12]
 8011870:	f7ff ffb8 	bl	80117e4 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8011874:	e007      	b.n	8011886 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	691a      	ldr	r2, [r3, #16]
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	f042 0208 	orr.w	r2, r2, #8
 8011884:	611a      	str	r2, [r3, #16]
}
 8011886:	bf00      	nop
 8011888:	3710      	adds	r7, #16
 801188a:	46bd      	mov	sp, r7
 801188c:	bd80      	pop	{r7, pc}

0801188e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 801188e:	b580      	push	{r7, lr}
 8011890:	b084      	sub	sp, #16
 8011892:	af00      	add	r7, sp, #0
 8011894:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801189a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 801189c:	68f8      	ldr	r0, [r7, #12]
 801189e:	f7ff ffb5 	bl	801180c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80118a2:	bf00      	nop
 80118a4:	3710      	adds	r7, #16
 80118a6:	46bd      	mov	sp, r7
 80118a8:	bd80      	pop	{r7, pc}

080118aa <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80118aa:	b580      	push	{r7, lr}
 80118ac:	b084      	sub	sp, #16
 80118ae:	af00      	add	r7, sp, #0
 80118b0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118b6:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80118b8:	6878      	ldr	r0, [r7, #4]
 80118ba:	f7f7 fe6d 	bl	8009598 <HAL_DMA_GetError>
 80118be:	4603      	mov	r3, r0
 80118c0:	2b02      	cmp	r3, #2
 80118c2:	d011      	beq.n	80118e8 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80118c4:	68f8      	ldr	r0, [r7, #12]
 80118c6:	f000 f82d 	bl	8011924 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80118d0:	f043 0210 	orr.w	r2, r3, #16
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	2201      	movs	r2, #1
 80118de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80118e2:	68f8      	ldr	r0, [r7, #12]
 80118e4:	f7ff ff9c 	bl	8011820 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80118e8:	bf00      	nop
 80118ea:	3710      	adds	r7, #16
 80118ec:	46bd      	mov	sp, r7
 80118ee:	bd80      	pop	{r7, pc}

080118f0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b084      	sub	sp, #16
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118fc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	2200      	movs	r2, #0
 8011902:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	2200      	movs	r2, #0
 801190a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	2201      	movs	r2, #1
 8011912:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8011916:	68f8      	ldr	r0, [r7, #12]
 8011918:	f7ff ff82 	bl	8011820 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801191c:	bf00      	nop
 801191e:	3710      	adds	r7, #16
 8011920:	46bd      	mov	sp, r7
 8011922:	bd80      	pop	{r7, pc}

08011924 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8011924:	b480      	push	{r7}
 8011926:	b085      	sub	sp, #20
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	695b      	ldr	r3, [r3, #20]
 8011932:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	699a      	ldr	r2, [r3, #24]
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	f042 0208 	orr.w	r2, r2, #8
 8011942:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	699a      	ldr	r2, [r3, #24]
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	f042 0210 	orr.w	r2, r2, #16
 8011952:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	681a      	ldr	r2, [r3, #0]
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	f022 0201 	bic.w	r2, r2, #1
 8011962:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	6919      	ldr	r1, [r3, #16]
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	681a      	ldr	r2, [r3, #0]
 801196e:	4b3c      	ldr	r3, [pc, #240]	; (8011a60 <SPI_CloseTransfer+0x13c>)
 8011970:	400b      	ands	r3, r1
 8011972:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	689a      	ldr	r2, [r3, #8]
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8011982:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801198a:	b2db      	uxtb	r3, r3
 801198c:	2b04      	cmp	r3, #4
 801198e:	d014      	beq.n	80119ba <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	f003 0320 	and.w	r3, r3, #32
 8011996:	2b00      	cmp	r3, #0
 8011998:	d00f      	beq.n	80119ba <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80119a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	699a      	ldr	r2, [r3, #24]
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	f042 0220 	orr.w	r2, r2, #32
 80119b8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80119c0:	b2db      	uxtb	r3, r3
 80119c2:	2b03      	cmp	r3, #3
 80119c4:	d014      	beq.n	80119f0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d00f      	beq.n	80119f0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80119d6:	f043 0204 	orr.w	r2, r3, #4
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	699a      	ldr	r2, [r3, #24]
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80119ee:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d00f      	beq.n	8011a1a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011a00:	f043 0201 	orr.w	r2, r3, #1
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	699a      	ldr	r2, [r3, #24]
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011a18:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d00f      	beq.n	8011a44 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011a2a:	f043 0208 	orr.w	r2, r3, #8
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	699a      	ldr	r2, [r3, #24]
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011a42:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2200      	movs	r2, #0
 8011a48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2200      	movs	r2, #0
 8011a50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8011a54:	bf00      	nop
 8011a56:	3714      	adds	r7, #20
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5e:	4770      	bx	lr
 8011a60:	fffffc90 	.word	0xfffffc90

08011a64 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8011a64:	b480      	push	{r7}
 8011a66:	b085      	sub	sp, #20
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a70:	095b      	lsrs	r3, r3, #5
 8011a72:	3301      	adds	r3, #1
 8011a74:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	68db      	ldr	r3, [r3, #12]
 8011a7a:	3301      	adds	r3, #1
 8011a7c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8011a7e:	68bb      	ldr	r3, [r7, #8]
 8011a80:	3307      	adds	r3, #7
 8011a82:	08db      	lsrs	r3, r3, #3
 8011a84:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8011a86:	68bb      	ldr	r3, [r7, #8]
 8011a88:	68fa      	ldr	r2, [r7, #12]
 8011a8a:	fb02 f303 	mul.w	r3, r2, r3
}
 8011a8e:	4618      	mov	r0, r3
 8011a90:	3714      	adds	r7, #20
 8011a92:	46bd      	mov	sp, r7
 8011a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a98:	4770      	bx	lr

08011a9a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011a9a:	b580      	push	{r7, lr}
 8011a9c:	b082      	sub	sp, #8
 8011a9e:	af00      	add	r7, sp, #0
 8011aa0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d101      	bne.n	8011aac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011aa8:	2301      	movs	r3, #1
 8011aaa:	e049      	b.n	8011b40 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011ab2:	b2db      	uxtb	r3, r3
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d106      	bne.n	8011ac6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	2200      	movs	r2, #0
 8011abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011ac0:	6878      	ldr	r0, [r7, #4]
 8011ac2:	f7f2 fb4f 	bl	8004164 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	2202      	movs	r2, #2
 8011aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	681a      	ldr	r2, [r3, #0]
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	3304      	adds	r3, #4
 8011ad6:	4619      	mov	r1, r3
 8011ad8:	4610      	mov	r0, r2
 8011ada:	f000 fe7d 	bl	80127d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	2201      	movs	r2, #1
 8011ae2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	2201      	movs	r2, #1
 8011aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	2201      	movs	r2, #1
 8011af2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	2201      	movs	r2, #1
 8011afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	2201      	movs	r2, #1
 8011b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	2201      	movs	r2, #1
 8011b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2201      	movs	r2, #1
 8011b12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	2201      	movs	r2, #1
 8011b1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	2201      	movs	r2, #1
 8011b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	2201      	movs	r2, #1
 8011b2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	2201      	movs	r2, #1
 8011b32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	2201      	movs	r2, #1
 8011b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011b3e:	2300      	movs	r3, #0
}
 8011b40:	4618      	mov	r0, r3
 8011b42:	3708      	adds	r7, #8
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}

08011b48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011b48:	b480      	push	{r7}
 8011b4a:	b085      	sub	sp, #20
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011b56:	b2db      	uxtb	r3, r3
 8011b58:	2b01      	cmp	r3, #1
 8011b5a:	d001      	beq.n	8011b60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	e054      	b.n	8011c0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	2202      	movs	r2, #2
 8011b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	68da      	ldr	r2, [r3, #12]
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	f042 0201 	orr.w	r2, r2, #1
 8011b76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	4a26      	ldr	r2, [pc, #152]	; (8011c18 <HAL_TIM_Base_Start_IT+0xd0>)
 8011b7e:	4293      	cmp	r3, r2
 8011b80:	d022      	beq.n	8011bc8 <HAL_TIM_Base_Start_IT+0x80>
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011b8a:	d01d      	beq.n	8011bc8 <HAL_TIM_Base_Start_IT+0x80>
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	4a22      	ldr	r2, [pc, #136]	; (8011c1c <HAL_TIM_Base_Start_IT+0xd4>)
 8011b92:	4293      	cmp	r3, r2
 8011b94:	d018      	beq.n	8011bc8 <HAL_TIM_Base_Start_IT+0x80>
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	4a21      	ldr	r2, [pc, #132]	; (8011c20 <HAL_TIM_Base_Start_IT+0xd8>)
 8011b9c:	4293      	cmp	r3, r2
 8011b9e:	d013      	beq.n	8011bc8 <HAL_TIM_Base_Start_IT+0x80>
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	4a1f      	ldr	r2, [pc, #124]	; (8011c24 <HAL_TIM_Base_Start_IT+0xdc>)
 8011ba6:	4293      	cmp	r3, r2
 8011ba8:	d00e      	beq.n	8011bc8 <HAL_TIM_Base_Start_IT+0x80>
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	4a1e      	ldr	r2, [pc, #120]	; (8011c28 <HAL_TIM_Base_Start_IT+0xe0>)
 8011bb0:	4293      	cmp	r3, r2
 8011bb2:	d009      	beq.n	8011bc8 <HAL_TIM_Base_Start_IT+0x80>
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	4a1c      	ldr	r2, [pc, #112]	; (8011c2c <HAL_TIM_Base_Start_IT+0xe4>)
 8011bba:	4293      	cmp	r3, r2
 8011bbc:	d004      	beq.n	8011bc8 <HAL_TIM_Base_Start_IT+0x80>
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	4a1b      	ldr	r2, [pc, #108]	; (8011c30 <HAL_TIM_Base_Start_IT+0xe8>)
 8011bc4:	4293      	cmp	r3, r2
 8011bc6:	d115      	bne.n	8011bf4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	689a      	ldr	r2, [r3, #8]
 8011bce:	4b19      	ldr	r3, [pc, #100]	; (8011c34 <HAL_TIM_Base_Start_IT+0xec>)
 8011bd0:	4013      	ands	r3, r2
 8011bd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	2b06      	cmp	r3, #6
 8011bd8:	d015      	beq.n	8011c06 <HAL_TIM_Base_Start_IT+0xbe>
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011be0:	d011      	beq.n	8011c06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	681a      	ldr	r2, [r3, #0]
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	f042 0201 	orr.w	r2, r2, #1
 8011bf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011bf2:	e008      	b.n	8011c06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	681a      	ldr	r2, [r3, #0]
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	f042 0201 	orr.w	r2, r2, #1
 8011c02:	601a      	str	r2, [r3, #0]
 8011c04:	e000      	b.n	8011c08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011c06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011c08:	2300      	movs	r3, #0
}
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	3714      	adds	r7, #20
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c14:	4770      	bx	lr
 8011c16:	bf00      	nop
 8011c18:	40010000 	.word	0x40010000
 8011c1c:	40000400 	.word	0x40000400
 8011c20:	40000800 	.word	0x40000800
 8011c24:	40000c00 	.word	0x40000c00
 8011c28:	40010400 	.word	0x40010400
 8011c2c:	40001800 	.word	0x40001800
 8011c30:	40014000 	.word	0x40014000
 8011c34:	00010007 	.word	0x00010007

08011c38 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b084      	sub	sp, #16
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
 8011c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011c42:	2300      	movs	r3, #0
 8011c44:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8011c46:	683b      	ldr	r3, [r7, #0]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d109      	bne.n	8011c60 <HAL_TIM_OC_Start_IT+0x28>
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011c52:	b2db      	uxtb	r3, r3
 8011c54:	2b01      	cmp	r3, #1
 8011c56:	bf14      	ite	ne
 8011c58:	2301      	movne	r3, #1
 8011c5a:	2300      	moveq	r3, #0
 8011c5c:	b2db      	uxtb	r3, r3
 8011c5e:	e03c      	b.n	8011cda <HAL_TIM_OC_Start_IT+0xa2>
 8011c60:	683b      	ldr	r3, [r7, #0]
 8011c62:	2b04      	cmp	r3, #4
 8011c64:	d109      	bne.n	8011c7a <HAL_TIM_OC_Start_IT+0x42>
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8011c6c:	b2db      	uxtb	r3, r3
 8011c6e:	2b01      	cmp	r3, #1
 8011c70:	bf14      	ite	ne
 8011c72:	2301      	movne	r3, #1
 8011c74:	2300      	moveq	r3, #0
 8011c76:	b2db      	uxtb	r3, r3
 8011c78:	e02f      	b.n	8011cda <HAL_TIM_OC_Start_IT+0xa2>
 8011c7a:	683b      	ldr	r3, [r7, #0]
 8011c7c:	2b08      	cmp	r3, #8
 8011c7e:	d109      	bne.n	8011c94 <HAL_TIM_OC_Start_IT+0x5c>
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c86:	b2db      	uxtb	r3, r3
 8011c88:	2b01      	cmp	r3, #1
 8011c8a:	bf14      	ite	ne
 8011c8c:	2301      	movne	r3, #1
 8011c8e:	2300      	moveq	r3, #0
 8011c90:	b2db      	uxtb	r3, r3
 8011c92:	e022      	b.n	8011cda <HAL_TIM_OC_Start_IT+0xa2>
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	2b0c      	cmp	r3, #12
 8011c98:	d109      	bne.n	8011cae <HAL_TIM_OC_Start_IT+0x76>
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011ca0:	b2db      	uxtb	r3, r3
 8011ca2:	2b01      	cmp	r3, #1
 8011ca4:	bf14      	ite	ne
 8011ca6:	2301      	movne	r3, #1
 8011ca8:	2300      	moveq	r3, #0
 8011caa:	b2db      	uxtb	r3, r3
 8011cac:	e015      	b.n	8011cda <HAL_TIM_OC_Start_IT+0xa2>
 8011cae:	683b      	ldr	r3, [r7, #0]
 8011cb0:	2b10      	cmp	r3, #16
 8011cb2:	d109      	bne.n	8011cc8 <HAL_TIM_OC_Start_IT+0x90>
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011cba:	b2db      	uxtb	r3, r3
 8011cbc:	2b01      	cmp	r3, #1
 8011cbe:	bf14      	ite	ne
 8011cc0:	2301      	movne	r3, #1
 8011cc2:	2300      	moveq	r3, #0
 8011cc4:	b2db      	uxtb	r3, r3
 8011cc6:	e008      	b.n	8011cda <HAL_TIM_OC_Start_IT+0xa2>
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011cce:	b2db      	uxtb	r3, r3
 8011cd0:	2b01      	cmp	r3, #1
 8011cd2:	bf14      	ite	ne
 8011cd4:	2301      	movne	r3, #1
 8011cd6:	2300      	moveq	r3, #0
 8011cd8:	b2db      	uxtb	r3, r3
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d001      	beq.n	8011ce2 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8011cde:	2301      	movs	r3, #1
 8011ce0:	e0ec      	b.n	8011ebc <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011ce2:	683b      	ldr	r3, [r7, #0]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d104      	bne.n	8011cf2 <HAL_TIM_OC_Start_IT+0xba>
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	2202      	movs	r2, #2
 8011cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011cf0:	e023      	b.n	8011d3a <HAL_TIM_OC_Start_IT+0x102>
 8011cf2:	683b      	ldr	r3, [r7, #0]
 8011cf4:	2b04      	cmp	r3, #4
 8011cf6:	d104      	bne.n	8011d02 <HAL_TIM_OC_Start_IT+0xca>
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	2202      	movs	r2, #2
 8011cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011d00:	e01b      	b.n	8011d3a <HAL_TIM_OC_Start_IT+0x102>
 8011d02:	683b      	ldr	r3, [r7, #0]
 8011d04:	2b08      	cmp	r3, #8
 8011d06:	d104      	bne.n	8011d12 <HAL_TIM_OC_Start_IT+0xda>
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2202      	movs	r2, #2
 8011d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011d10:	e013      	b.n	8011d3a <HAL_TIM_OC_Start_IT+0x102>
 8011d12:	683b      	ldr	r3, [r7, #0]
 8011d14:	2b0c      	cmp	r3, #12
 8011d16:	d104      	bne.n	8011d22 <HAL_TIM_OC_Start_IT+0xea>
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	2202      	movs	r2, #2
 8011d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011d20:	e00b      	b.n	8011d3a <HAL_TIM_OC_Start_IT+0x102>
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	2b10      	cmp	r3, #16
 8011d26:	d104      	bne.n	8011d32 <HAL_TIM_OC_Start_IT+0xfa>
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	2202      	movs	r2, #2
 8011d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011d30:	e003      	b.n	8011d3a <HAL_TIM_OC_Start_IT+0x102>
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	2202      	movs	r2, #2
 8011d36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8011d3a:	683b      	ldr	r3, [r7, #0]
 8011d3c:	2b0c      	cmp	r3, #12
 8011d3e:	d841      	bhi.n	8011dc4 <HAL_TIM_OC_Start_IT+0x18c>
 8011d40:	a201      	add	r2, pc, #4	; (adr r2, 8011d48 <HAL_TIM_OC_Start_IT+0x110>)
 8011d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d46:	bf00      	nop
 8011d48:	08011d7d 	.word	0x08011d7d
 8011d4c:	08011dc5 	.word	0x08011dc5
 8011d50:	08011dc5 	.word	0x08011dc5
 8011d54:	08011dc5 	.word	0x08011dc5
 8011d58:	08011d8f 	.word	0x08011d8f
 8011d5c:	08011dc5 	.word	0x08011dc5
 8011d60:	08011dc5 	.word	0x08011dc5
 8011d64:	08011dc5 	.word	0x08011dc5
 8011d68:	08011da1 	.word	0x08011da1
 8011d6c:	08011dc5 	.word	0x08011dc5
 8011d70:	08011dc5 	.word	0x08011dc5
 8011d74:	08011dc5 	.word	0x08011dc5
 8011d78:	08011db3 	.word	0x08011db3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	68da      	ldr	r2, [r3, #12]
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	f042 0202 	orr.w	r2, r2, #2
 8011d8a:	60da      	str	r2, [r3, #12]
      break;
 8011d8c:	e01d      	b.n	8011dca <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	68da      	ldr	r2, [r3, #12]
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	f042 0204 	orr.w	r2, r2, #4
 8011d9c:	60da      	str	r2, [r3, #12]
      break;
 8011d9e:	e014      	b.n	8011dca <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	68da      	ldr	r2, [r3, #12]
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	f042 0208 	orr.w	r2, r2, #8
 8011dae:	60da      	str	r2, [r3, #12]
      break;
 8011db0:	e00b      	b.n	8011dca <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	68da      	ldr	r2, [r3, #12]
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	f042 0210 	orr.w	r2, r2, #16
 8011dc0:	60da      	str	r2, [r3, #12]
      break;
 8011dc2:	e002      	b.n	8011dca <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8011dc8:	bf00      	nop
  }

  if (status == HAL_OK)
 8011dca:	7bfb      	ldrb	r3, [r7, #15]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d174      	bne.n	8011eba <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	2201      	movs	r2, #1
 8011dd6:	6839      	ldr	r1, [r7, #0]
 8011dd8:	4618      	mov	r0, r3
 8011dda:	f001 f917 	bl	801300c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	4a38      	ldr	r2, [pc, #224]	; (8011ec4 <HAL_TIM_OC_Start_IT+0x28c>)
 8011de4:	4293      	cmp	r3, r2
 8011de6:	d013      	beq.n	8011e10 <HAL_TIM_OC_Start_IT+0x1d8>
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	4a36      	ldr	r2, [pc, #216]	; (8011ec8 <HAL_TIM_OC_Start_IT+0x290>)
 8011dee:	4293      	cmp	r3, r2
 8011df0:	d00e      	beq.n	8011e10 <HAL_TIM_OC_Start_IT+0x1d8>
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	4a35      	ldr	r2, [pc, #212]	; (8011ecc <HAL_TIM_OC_Start_IT+0x294>)
 8011df8:	4293      	cmp	r3, r2
 8011dfa:	d009      	beq.n	8011e10 <HAL_TIM_OC_Start_IT+0x1d8>
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	4a33      	ldr	r2, [pc, #204]	; (8011ed0 <HAL_TIM_OC_Start_IT+0x298>)
 8011e02:	4293      	cmp	r3, r2
 8011e04:	d004      	beq.n	8011e10 <HAL_TIM_OC_Start_IT+0x1d8>
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	4a32      	ldr	r2, [pc, #200]	; (8011ed4 <HAL_TIM_OC_Start_IT+0x29c>)
 8011e0c:	4293      	cmp	r3, r2
 8011e0e:	d101      	bne.n	8011e14 <HAL_TIM_OC_Start_IT+0x1dc>
 8011e10:	2301      	movs	r3, #1
 8011e12:	e000      	b.n	8011e16 <HAL_TIM_OC_Start_IT+0x1de>
 8011e14:	2300      	movs	r3, #0
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d007      	beq.n	8011e2a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011e28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	4a25      	ldr	r2, [pc, #148]	; (8011ec4 <HAL_TIM_OC_Start_IT+0x28c>)
 8011e30:	4293      	cmp	r3, r2
 8011e32:	d022      	beq.n	8011e7a <HAL_TIM_OC_Start_IT+0x242>
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011e3c:	d01d      	beq.n	8011e7a <HAL_TIM_OC_Start_IT+0x242>
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	4a25      	ldr	r2, [pc, #148]	; (8011ed8 <HAL_TIM_OC_Start_IT+0x2a0>)
 8011e44:	4293      	cmp	r3, r2
 8011e46:	d018      	beq.n	8011e7a <HAL_TIM_OC_Start_IT+0x242>
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	4a23      	ldr	r2, [pc, #140]	; (8011edc <HAL_TIM_OC_Start_IT+0x2a4>)
 8011e4e:	4293      	cmp	r3, r2
 8011e50:	d013      	beq.n	8011e7a <HAL_TIM_OC_Start_IT+0x242>
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	4a22      	ldr	r2, [pc, #136]	; (8011ee0 <HAL_TIM_OC_Start_IT+0x2a8>)
 8011e58:	4293      	cmp	r3, r2
 8011e5a:	d00e      	beq.n	8011e7a <HAL_TIM_OC_Start_IT+0x242>
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	4a19      	ldr	r2, [pc, #100]	; (8011ec8 <HAL_TIM_OC_Start_IT+0x290>)
 8011e62:	4293      	cmp	r3, r2
 8011e64:	d009      	beq.n	8011e7a <HAL_TIM_OC_Start_IT+0x242>
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	4a1e      	ldr	r2, [pc, #120]	; (8011ee4 <HAL_TIM_OC_Start_IT+0x2ac>)
 8011e6c:	4293      	cmp	r3, r2
 8011e6e:	d004      	beq.n	8011e7a <HAL_TIM_OC_Start_IT+0x242>
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	4a15      	ldr	r2, [pc, #84]	; (8011ecc <HAL_TIM_OC_Start_IT+0x294>)
 8011e76:	4293      	cmp	r3, r2
 8011e78:	d115      	bne.n	8011ea6 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	689a      	ldr	r2, [r3, #8]
 8011e80:	4b19      	ldr	r3, [pc, #100]	; (8011ee8 <HAL_TIM_OC_Start_IT+0x2b0>)
 8011e82:	4013      	ands	r3, r2
 8011e84:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011e86:	68bb      	ldr	r3, [r7, #8]
 8011e88:	2b06      	cmp	r3, #6
 8011e8a:	d015      	beq.n	8011eb8 <HAL_TIM_OC_Start_IT+0x280>
 8011e8c:	68bb      	ldr	r3, [r7, #8]
 8011e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011e92:	d011      	beq.n	8011eb8 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	681a      	ldr	r2, [r3, #0]
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	f042 0201 	orr.w	r2, r2, #1
 8011ea2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011ea4:	e008      	b.n	8011eb8 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	681a      	ldr	r2, [r3, #0]
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	f042 0201 	orr.w	r2, r2, #1
 8011eb4:	601a      	str	r2, [r3, #0]
 8011eb6:	e000      	b.n	8011eba <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011eb8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8011eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	3710      	adds	r7, #16
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd80      	pop	{r7, pc}
 8011ec4:	40010000 	.word	0x40010000
 8011ec8:	40010400 	.word	0x40010400
 8011ecc:	40014000 	.word	0x40014000
 8011ed0:	40014400 	.word	0x40014400
 8011ed4:	40014800 	.word	0x40014800
 8011ed8:	40000400 	.word	0x40000400
 8011edc:	40000800 	.word	0x40000800
 8011ee0:	40000c00 	.word	0x40000c00
 8011ee4:	40001800 	.word	0x40001800
 8011ee8:	00010007 	.word	0x00010007

08011eec <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b084      	sub	sp, #16
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
 8011ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	2b0c      	cmp	r3, #12
 8011efe:	d841      	bhi.n	8011f84 <HAL_TIM_OC_Stop_IT+0x98>
 8011f00:	a201      	add	r2, pc, #4	; (adr r2, 8011f08 <HAL_TIM_OC_Stop_IT+0x1c>)
 8011f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f06:	bf00      	nop
 8011f08:	08011f3d 	.word	0x08011f3d
 8011f0c:	08011f85 	.word	0x08011f85
 8011f10:	08011f85 	.word	0x08011f85
 8011f14:	08011f85 	.word	0x08011f85
 8011f18:	08011f4f 	.word	0x08011f4f
 8011f1c:	08011f85 	.word	0x08011f85
 8011f20:	08011f85 	.word	0x08011f85
 8011f24:	08011f85 	.word	0x08011f85
 8011f28:	08011f61 	.word	0x08011f61
 8011f2c:	08011f85 	.word	0x08011f85
 8011f30:	08011f85 	.word	0x08011f85
 8011f34:	08011f85 	.word	0x08011f85
 8011f38:	08011f73 	.word	0x08011f73
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	68da      	ldr	r2, [r3, #12]
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	f022 0202 	bic.w	r2, r2, #2
 8011f4a:	60da      	str	r2, [r3, #12]
      break;
 8011f4c:	e01d      	b.n	8011f8a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	68da      	ldr	r2, [r3, #12]
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	f022 0204 	bic.w	r2, r2, #4
 8011f5c:	60da      	str	r2, [r3, #12]
      break;
 8011f5e:	e014      	b.n	8011f8a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	68da      	ldr	r2, [r3, #12]
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	f022 0208 	bic.w	r2, r2, #8
 8011f6e:	60da      	str	r2, [r3, #12]
      break;
 8011f70:	e00b      	b.n	8011f8a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	68da      	ldr	r2, [r3, #12]
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	f022 0210 	bic.w	r2, r2, #16
 8011f80:	60da      	str	r2, [r3, #12]
      break;
 8011f82:	e002      	b.n	8011f8a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8011f84:	2301      	movs	r3, #1
 8011f86:	73fb      	strb	r3, [r7, #15]
      break;
 8011f88:	bf00      	nop
  }

  if (status == HAL_OK)
 8011f8a:	7bfb      	ldrb	r3, [r7, #15]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	f040 8081 	bne.w	8012094 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	2200      	movs	r2, #0
 8011f98:	6839      	ldr	r1, [r7, #0]
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f001 f836 	bl	801300c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	4a3e      	ldr	r2, [pc, #248]	; (80120a0 <HAL_TIM_OC_Stop_IT+0x1b4>)
 8011fa6:	4293      	cmp	r3, r2
 8011fa8:	d013      	beq.n	8011fd2 <HAL_TIM_OC_Stop_IT+0xe6>
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	4a3d      	ldr	r2, [pc, #244]	; (80120a4 <HAL_TIM_OC_Stop_IT+0x1b8>)
 8011fb0:	4293      	cmp	r3, r2
 8011fb2:	d00e      	beq.n	8011fd2 <HAL_TIM_OC_Stop_IT+0xe6>
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	4a3b      	ldr	r2, [pc, #236]	; (80120a8 <HAL_TIM_OC_Stop_IT+0x1bc>)
 8011fba:	4293      	cmp	r3, r2
 8011fbc:	d009      	beq.n	8011fd2 <HAL_TIM_OC_Stop_IT+0xe6>
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	4a3a      	ldr	r2, [pc, #232]	; (80120ac <HAL_TIM_OC_Stop_IT+0x1c0>)
 8011fc4:	4293      	cmp	r3, r2
 8011fc6:	d004      	beq.n	8011fd2 <HAL_TIM_OC_Stop_IT+0xe6>
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	4a38      	ldr	r2, [pc, #224]	; (80120b0 <HAL_TIM_OC_Stop_IT+0x1c4>)
 8011fce:	4293      	cmp	r3, r2
 8011fd0:	d101      	bne.n	8011fd6 <HAL_TIM_OC_Stop_IT+0xea>
 8011fd2:	2301      	movs	r3, #1
 8011fd4:	e000      	b.n	8011fd8 <HAL_TIM_OC_Stop_IT+0xec>
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d017      	beq.n	801200c <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	6a1a      	ldr	r2, [r3, #32]
 8011fe2:	f241 1311 	movw	r3, #4369	; 0x1111
 8011fe6:	4013      	ands	r3, r2
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d10f      	bne.n	801200c <HAL_TIM_OC_Stop_IT+0x120>
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	6a1a      	ldr	r2, [r3, #32]
 8011ff2:	f240 4344 	movw	r3, #1092	; 0x444
 8011ff6:	4013      	ands	r3, r2
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d107      	bne.n	801200c <HAL_TIM_OC_Stop_IT+0x120>
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801200a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	6a1a      	ldr	r2, [r3, #32]
 8012012:	f241 1311 	movw	r3, #4369	; 0x1111
 8012016:	4013      	ands	r3, r2
 8012018:	2b00      	cmp	r3, #0
 801201a:	d10f      	bne.n	801203c <HAL_TIM_OC_Stop_IT+0x150>
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	6a1a      	ldr	r2, [r3, #32]
 8012022:	f240 4344 	movw	r3, #1092	; 0x444
 8012026:	4013      	ands	r3, r2
 8012028:	2b00      	cmp	r3, #0
 801202a:	d107      	bne.n	801203c <HAL_TIM_OC_Stop_IT+0x150>
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	681a      	ldr	r2, [r3, #0]
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	f022 0201 	bic.w	r2, r2, #1
 801203a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801203c:	683b      	ldr	r3, [r7, #0]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d104      	bne.n	801204c <HAL_TIM_OC_Stop_IT+0x160>
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	2201      	movs	r2, #1
 8012046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801204a:	e023      	b.n	8012094 <HAL_TIM_OC_Stop_IT+0x1a8>
 801204c:	683b      	ldr	r3, [r7, #0]
 801204e:	2b04      	cmp	r3, #4
 8012050:	d104      	bne.n	801205c <HAL_TIM_OC_Stop_IT+0x170>
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	2201      	movs	r2, #1
 8012056:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801205a:	e01b      	b.n	8012094 <HAL_TIM_OC_Stop_IT+0x1a8>
 801205c:	683b      	ldr	r3, [r7, #0]
 801205e:	2b08      	cmp	r3, #8
 8012060:	d104      	bne.n	801206c <HAL_TIM_OC_Stop_IT+0x180>
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	2201      	movs	r2, #1
 8012066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801206a:	e013      	b.n	8012094 <HAL_TIM_OC_Stop_IT+0x1a8>
 801206c:	683b      	ldr	r3, [r7, #0]
 801206e:	2b0c      	cmp	r3, #12
 8012070:	d104      	bne.n	801207c <HAL_TIM_OC_Stop_IT+0x190>
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	2201      	movs	r2, #1
 8012076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801207a:	e00b      	b.n	8012094 <HAL_TIM_OC_Stop_IT+0x1a8>
 801207c:	683b      	ldr	r3, [r7, #0]
 801207e:	2b10      	cmp	r3, #16
 8012080:	d104      	bne.n	801208c <HAL_TIM_OC_Stop_IT+0x1a0>
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	2201      	movs	r2, #1
 8012086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801208a:	e003      	b.n	8012094 <HAL_TIM_OC_Stop_IT+0x1a8>
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	2201      	movs	r2, #1
 8012090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8012094:	7bfb      	ldrb	r3, [r7, #15]
}
 8012096:	4618      	mov	r0, r3
 8012098:	3710      	adds	r7, #16
 801209a:	46bd      	mov	sp, r7
 801209c:	bd80      	pop	{r7, pc}
 801209e:	bf00      	nop
 80120a0:	40010000 	.word	0x40010000
 80120a4:	40010400 	.word	0x40010400
 80120a8:	40014000 	.word	0x40014000
 80120ac:	40014400 	.word	0x40014400
 80120b0:	40014800 	.word	0x40014800

080120b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b082      	sub	sp, #8
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d101      	bne.n	80120c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80120c2:	2301      	movs	r3, #1
 80120c4:	e049      	b.n	801215a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80120cc:	b2db      	uxtb	r3, r3
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d106      	bne.n	80120e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2200      	movs	r2, #0
 80120d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80120da:	6878      	ldr	r0, [r7, #4]
 80120dc:	f000 f841 	bl	8012162 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	2202      	movs	r2, #2
 80120e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	681a      	ldr	r2, [r3, #0]
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	3304      	adds	r3, #4
 80120f0:	4619      	mov	r1, r3
 80120f2:	4610      	mov	r0, r2
 80120f4:	f000 fb70 	bl	80127d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	2201      	movs	r2, #1
 80120fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	2201      	movs	r2, #1
 8012104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	2201      	movs	r2, #1
 801210c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	2201      	movs	r2, #1
 8012114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	2201      	movs	r2, #1
 801211c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2201      	movs	r2, #1
 8012124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	2201      	movs	r2, #1
 801212c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	2201      	movs	r2, #1
 8012134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	2201      	movs	r2, #1
 801213c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	2201      	movs	r2, #1
 8012144:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	2201      	movs	r2, #1
 801214c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	2201      	movs	r2, #1
 8012154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012158:	2300      	movs	r3, #0
}
 801215a:	4618      	mov	r0, r3
 801215c:	3708      	adds	r7, #8
 801215e:	46bd      	mov	sp, r7
 8012160:	bd80      	pop	{r7, pc}

08012162 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8012162:	b480      	push	{r7}
 8012164:	b083      	sub	sp, #12
 8012166:	af00      	add	r7, sp, #0
 8012168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801216a:	bf00      	nop
 801216c:	370c      	adds	r7, #12
 801216e:	46bd      	mov	sp, r7
 8012170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012174:	4770      	bx	lr

08012176 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012176:	b580      	push	{r7, lr}
 8012178:	b084      	sub	sp, #16
 801217a:	af00      	add	r7, sp, #0
 801217c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	68db      	ldr	r3, [r3, #12]
 8012184:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	691b      	ldr	r3, [r3, #16]
 801218c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801218e:	68bb      	ldr	r3, [r7, #8]
 8012190:	f003 0302 	and.w	r3, r3, #2
 8012194:	2b00      	cmp	r3, #0
 8012196:	d020      	beq.n	80121da <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	f003 0302 	and.w	r3, r3, #2
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d01b      	beq.n	80121da <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	f06f 0202 	mvn.w	r2, #2
 80121aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	2201      	movs	r2, #1
 80121b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	699b      	ldr	r3, [r3, #24]
 80121b8:	f003 0303 	and.w	r3, r3, #3
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d003      	beq.n	80121c8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80121c0:	6878      	ldr	r0, [r7, #4]
 80121c2:	f000 faeb 	bl	801279c <HAL_TIM_IC_CaptureCallback>
 80121c6:	e005      	b.n	80121d4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80121c8:	6878      	ldr	r0, [r7, #4]
 80121ca:	f7ef fe8d 	bl	8001ee8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80121ce:	6878      	ldr	r0, [r7, #4]
 80121d0:	f000 faee 	bl	80127b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	2200      	movs	r2, #0
 80121d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80121da:	68bb      	ldr	r3, [r7, #8]
 80121dc:	f003 0304 	and.w	r3, r3, #4
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d020      	beq.n	8012226 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	f003 0304 	and.w	r3, r3, #4
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d01b      	beq.n	8012226 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	f06f 0204 	mvn.w	r2, #4
 80121f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	2202      	movs	r2, #2
 80121fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	699b      	ldr	r3, [r3, #24]
 8012204:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012208:	2b00      	cmp	r3, #0
 801220a:	d003      	beq.n	8012214 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f000 fac5 	bl	801279c <HAL_TIM_IC_CaptureCallback>
 8012212:	e005      	b.n	8012220 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012214:	6878      	ldr	r0, [r7, #4]
 8012216:	f7ef fe67 	bl	8001ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801221a:	6878      	ldr	r0, [r7, #4]
 801221c:	f000 fac8 	bl	80127b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2200      	movs	r2, #0
 8012224:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8012226:	68bb      	ldr	r3, [r7, #8]
 8012228:	f003 0308 	and.w	r3, r3, #8
 801222c:	2b00      	cmp	r3, #0
 801222e:	d020      	beq.n	8012272 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	f003 0308 	and.w	r3, r3, #8
 8012236:	2b00      	cmp	r3, #0
 8012238:	d01b      	beq.n	8012272 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	f06f 0208 	mvn.w	r2, #8
 8012242:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	2204      	movs	r2, #4
 8012248:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	69db      	ldr	r3, [r3, #28]
 8012250:	f003 0303 	and.w	r3, r3, #3
 8012254:	2b00      	cmp	r3, #0
 8012256:	d003      	beq.n	8012260 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012258:	6878      	ldr	r0, [r7, #4]
 801225a:	f000 fa9f 	bl	801279c <HAL_TIM_IC_CaptureCallback>
 801225e:	e005      	b.n	801226c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012260:	6878      	ldr	r0, [r7, #4]
 8012262:	f7ef fe41 	bl	8001ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012266:	6878      	ldr	r0, [r7, #4]
 8012268:	f000 faa2 	bl	80127b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	2200      	movs	r2, #0
 8012270:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8012272:	68bb      	ldr	r3, [r7, #8]
 8012274:	f003 0310 	and.w	r3, r3, #16
 8012278:	2b00      	cmp	r3, #0
 801227a:	d020      	beq.n	80122be <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	f003 0310 	and.w	r3, r3, #16
 8012282:	2b00      	cmp	r3, #0
 8012284:	d01b      	beq.n	80122be <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	f06f 0210 	mvn.w	r2, #16
 801228e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	2208      	movs	r2, #8
 8012294:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	69db      	ldr	r3, [r3, #28]
 801229c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d003      	beq.n	80122ac <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80122a4:	6878      	ldr	r0, [r7, #4]
 80122a6:	f000 fa79 	bl	801279c <HAL_TIM_IC_CaptureCallback>
 80122aa:	e005      	b.n	80122b8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80122ac:	6878      	ldr	r0, [r7, #4]
 80122ae:	f7ef fe1b 	bl	8001ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80122b2:	6878      	ldr	r0, [r7, #4]
 80122b4:	f000 fa7c 	bl	80127b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	2200      	movs	r2, #0
 80122bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80122be:	68bb      	ldr	r3, [r7, #8]
 80122c0:	f003 0301 	and.w	r3, r3, #1
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d00c      	beq.n	80122e2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	f003 0301 	and.w	r3, r3, #1
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d007      	beq.n	80122e2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	f06f 0201 	mvn.w	r2, #1
 80122da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	f7f0 fd2b 	bl	8002d38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80122e2:	68bb      	ldr	r3, [r7, #8]
 80122e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d104      	bne.n	80122f6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80122ec:	68bb      	ldr	r3, [r7, #8]
 80122ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d00c      	beq.n	8012310 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d007      	beq.n	8012310 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8012308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801230a:	6878      	ldr	r0, [r7, #4]
 801230c:	f000 ffba 	bl	8013284 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8012310:	68bb      	ldr	r3, [r7, #8]
 8012312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012316:	2b00      	cmp	r3, #0
 8012318:	d00c      	beq.n	8012334 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012320:	2b00      	cmp	r3, #0
 8012322:	d007      	beq.n	8012334 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801232c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801232e:	6878      	ldr	r0, [r7, #4]
 8012330:	f000 ffb2 	bl	8013298 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8012334:	68bb      	ldr	r3, [r7, #8]
 8012336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801233a:	2b00      	cmp	r3, #0
 801233c:	d00c      	beq.n	8012358 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012344:	2b00      	cmp	r3, #0
 8012346:	d007      	beq.n	8012358 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	f000 fa36 	bl	80127c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8012358:	68bb      	ldr	r3, [r7, #8]
 801235a:	f003 0320 	and.w	r3, r3, #32
 801235e:	2b00      	cmp	r3, #0
 8012360:	d00c      	beq.n	801237c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	f003 0320 	and.w	r3, r3, #32
 8012368:	2b00      	cmp	r3, #0
 801236a:	d007      	beq.n	801237c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	f06f 0220 	mvn.w	r2, #32
 8012374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012376:	6878      	ldr	r0, [r7, #4]
 8012378:	f000 ff7a 	bl	8013270 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801237c:	bf00      	nop
 801237e:	3710      	adds	r7, #16
 8012380:	46bd      	mov	sp, r7
 8012382:	bd80      	pop	{r7, pc}

08012384 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b086      	sub	sp, #24
 8012388:	af00      	add	r7, sp, #0
 801238a:	60f8      	str	r0, [r7, #12]
 801238c:	60b9      	str	r1, [r7, #8]
 801238e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012390:	2300      	movs	r3, #0
 8012392:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801239a:	2b01      	cmp	r3, #1
 801239c:	d101      	bne.n	80123a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801239e:	2302      	movs	r3, #2
 80123a0:	e0ff      	b.n	80125a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	2201      	movs	r2, #1
 80123a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	2b14      	cmp	r3, #20
 80123ae:	f200 80f0 	bhi.w	8012592 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80123b2:	a201      	add	r2, pc, #4	; (adr r2, 80123b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80123b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123b8:	0801240d 	.word	0x0801240d
 80123bc:	08012593 	.word	0x08012593
 80123c0:	08012593 	.word	0x08012593
 80123c4:	08012593 	.word	0x08012593
 80123c8:	0801244d 	.word	0x0801244d
 80123cc:	08012593 	.word	0x08012593
 80123d0:	08012593 	.word	0x08012593
 80123d4:	08012593 	.word	0x08012593
 80123d8:	0801248f 	.word	0x0801248f
 80123dc:	08012593 	.word	0x08012593
 80123e0:	08012593 	.word	0x08012593
 80123e4:	08012593 	.word	0x08012593
 80123e8:	080124cf 	.word	0x080124cf
 80123ec:	08012593 	.word	0x08012593
 80123f0:	08012593 	.word	0x08012593
 80123f4:	08012593 	.word	0x08012593
 80123f8:	08012511 	.word	0x08012511
 80123fc:	08012593 	.word	0x08012593
 8012400:	08012593 	.word	0x08012593
 8012404:	08012593 	.word	0x08012593
 8012408:	08012551 	.word	0x08012551
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	68b9      	ldr	r1, [r7, #8]
 8012412:	4618      	mov	r0, r3
 8012414:	f000 fa86 	bl	8012924 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	699a      	ldr	r2, [r3, #24]
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	f042 0208 	orr.w	r2, r2, #8
 8012426:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	699a      	ldr	r2, [r3, #24]
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	f022 0204 	bic.w	r2, r2, #4
 8012436:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	6999      	ldr	r1, [r3, #24]
 801243e:	68bb      	ldr	r3, [r7, #8]
 8012440:	691a      	ldr	r2, [r3, #16]
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	430a      	orrs	r2, r1
 8012448:	619a      	str	r2, [r3, #24]
      break;
 801244a:	e0a5      	b.n	8012598 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	68b9      	ldr	r1, [r7, #8]
 8012452:	4618      	mov	r0, r3
 8012454:	f000 faf6 	bl	8012a44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	699a      	ldr	r2, [r3, #24]
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	699a      	ldr	r2, [r3, #24]
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	6999      	ldr	r1, [r3, #24]
 801247e:	68bb      	ldr	r3, [r7, #8]
 8012480:	691b      	ldr	r3, [r3, #16]
 8012482:	021a      	lsls	r2, r3, #8
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	430a      	orrs	r2, r1
 801248a:	619a      	str	r2, [r3, #24]
      break;
 801248c:	e084      	b.n	8012598 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	68b9      	ldr	r1, [r7, #8]
 8012494:	4618      	mov	r0, r3
 8012496:	f000 fb5f 	bl	8012b58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	69da      	ldr	r2, [r3, #28]
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	f042 0208 	orr.w	r2, r2, #8
 80124a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	69da      	ldr	r2, [r3, #28]
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	f022 0204 	bic.w	r2, r2, #4
 80124b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	69d9      	ldr	r1, [r3, #28]
 80124c0:	68bb      	ldr	r3, [r7, #8]
 80124c2:	691a      	ldr	r2, [r3, #16]
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	430a      	orrs	r2, r1
 80124ca:	61da      	str	r2, [r3, #28]
      break;
 80124cc:	e064      	b.n	8012598 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	68b9      	ldr	r1, [r7, #8]
 80124d4:	4618      	mov	r0, r3
 80124d6:	f000 fbc7 	bl	8012c68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	69da      	ldr	r2, [r3, #28]
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80124e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	69da      	ldr	r2, [r3, #28]
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80124f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	69d9      	ldr	r1, [r3, #28]
 8012500:	68bb      	ldr	r3, [r7, #8]
 8012502:	691b      	ldr	r3, [r3, #16]
 8012504:	021a      	lsls	r2, r3, #8
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	430a      	orrs	r2, r1
 801250c:	61da      	str	r2, [r3, #28]
      break;
 801250e:	e043      	b.n	8012598 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	68b9      	ldr	r1, [r7, #8]
 8012516:	4618      	mov	r0, r3
 8012518:	f000 fc10 	bl	8012d3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	f042 0208 	orr.w	r2, r2, #8
 801252a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	f022 0204 	bic.w	r2, r2, #4
 801253a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012542:	68bb      	ldr	r3, [r7, #8]
 8012544:	691a      	ldr	r2, [r3, #16]
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	430a      	orrs	r2, r1
 801254c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801254e:	e023      	b.n	8012598 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	68b9      	ldr	r1, [r7, #8]
 8012556:	4618      	mov	r0, r3
 8012558:	f000 fc54 	bl	8012e04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801256a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801257a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012582:	68bb      	ldr	r3, [r7, #8]
 8012584:	691b      	ldr	r3, [r3, #16]
 8012586:	021a      	lsls	r2, r3, #8
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	430a      	orrs	r2, r1
 801258e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012590:	e002      	b.n	8012598 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8012592:	2301      	movs	r3, #1
 8012594:	75fb      	strb	r3, [r7, #23]
      break;
 8012596:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	2200      	movs	r2, #0
 801259c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80125a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80125a2:	4618      	mov	r0, r3
 80125a4:	3718      	adds	r7, #24
 80125a6:	46bd      	mov	sp, r7
 80125a8:	bd80      	pop	{r7, pc}
 80125aa:	bf00      	nop

080125ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b084      	sub	sp, #16
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
 80125b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80125b6:	2300      	movs	r3, #0
 80125b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80125c0:	2b01      	cmp	r3, #1
 80125c2:	d101      	bne.n	80125c8 <HAL_TIM_ConfigClockSource+0x1c>
 80125c4:	2302      	movs	r3, #2
 80125c6:	e0dc      	b.n	8012782 <HAL_TIM_ConfigClockSource+0x1d6>
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	2201      	movs	r2, #1
 80125cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	2202      	movs	r2, #2
 80125d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	689b      	ldr	r3, [r3, #8]
 80125de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80125e0:	68ba      	ldr	r2, [r7, #8]
 80125e2:	4b6a      	ldr	r3, [pc, #424]	; (801278c <HAL_TIM_ConfigClockSource+0x1e0>)
 80125e4:	4013      	ands	r3, r2
 80125e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80125e8:	68bb      	ldr	r3, [r7, #8]
 80125ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80125ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	68ba      	ldr	r2, [r7, #8]
 80125f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80125f8:	683b      	ldr	r3, [r7, #0]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	4a64      	ldr	r2, [pc, #400]	; (8012790 <HAL_TIM_ConfigClockSource+0x1e4>)
 80125fe:	4293      	cmp	r3, r2
 8012600:	f000 80a9 	beq.w	8012756 <HAL_TIM_ConfigClockSource+0x1aa>
 8012604:	4a62      	ldr	r2, [pc, #392]	; (8012790 <HAL_TIM_ConfigClockSource+0x1e4>)
 8012606:	4293      	cmp	r3, r2
 8012608:	f200 80ae 	bhi.w	8012768 <HAL_TIM_ConfigClockSource+0x1bc>
 801260c:	4a61      	ldr	r2, [pc, #388]	; (8012794 <HAL_TIM_ConfigClockSource+0x1e8>)
 801260e:	4293      	cmp	r3, r2
 8012610:	f000 80a1 	beq.w	8012756 <HAL_TIM_ConfigClockSource+0x1aa>
 8012614:	4a5f      	ldr	r2, [pc, #380]	; (8012794 <HAL_TIM_ConfigClockSource+0x1e8>)
 8012616:	4293      	cmp	r3, r2
 8012618:	f200 80a6 	bhi.w	8012768 <HAL_TIM_ConfigClockSource+0x1bc>
 801261c:	4a5e      	ldr	r2, [pc, #376]	; (8012798 <HAL_TIM_ConfigClockSource+0x1ec>)
 801261e:	4293      	cmp	r3, r2
 8012620:	f000 8099 	beq.w	8012756 <HAL_TIM_ConfigClockSource+0x1aa>
 8012624:	4a5c      	ldr	r2, [pc, #368]	; (8012798 <HAL_TIM_ConfigClockSource+0x1ec>)
 8012626:	4293      	cmp	r3, r2
 8012628:	f200 809e 	bhi.w	8012768 <HAL_TIM_ConfigClockSource+0x1bc>
 801262c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8012630:	f000 8091 	beq.w	8012756 <HAL_TIM_ConfigClockSource+0x1aa>
 8012634:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8012638:	f200 8096 	bhi.w	8012768 <HAL_TIM_ConfigClockSource+0x1bc>
 801263c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012640:	f000 8089 	beq.w	8012756 <HAL_TIM_ConfigClockSource+0x1aa>
 8012644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012648:	f200 808e 	bhi.w	8012768 <HAL_TIM_ConfigClockSource+0x1bc>
 801264c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012650:	d03e      	beq.n	80126d0 <HAL_TIM_ConfigClockSource+0x124>
 8012652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012656:	f200 8087 	bhi.w	8012768 <HAL_TIM_ConfigClockSource+0x1bc>
 801265a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801265e:	f000 8086 	beq.w	801276e <HAL_TIM_ConfigClockSource+0x1c2>
 8012662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012666:	d87f      	bhi.n	8012768 <HAL_TIM_ConfigClockSource+0x1bc>
 8012668:	2b70      	cmp	r3, #112	; 0x70
 801266a:	d01a      	beq.n	80126a2 <HAL_TIM_ConfigClockSource+0xf6>
 801266c:	2b70      	cmp	r3, #112	; 0x70
 801266e:	d87b      	bhi.n	8012768 <HAL_TIM_ConfigClockSource+0x1bc>
 8012670:	2b60      	cmp	r3, #96	; 0x60
 8012672:	d050      	beq.n	8012716 <HAL_TIM_ConfigClockSource+0x16a>
 8012674:	2b60      	cmp	r3, #96	; 0x60
 8012676:	d877      	bhi.n	8012768 <HAL_TIM_ConfigClockSource+0x1bc>
 8012678:	2b50      	cmp	r3, #80	; 0x50
 801267a:	d03c      	beq.n	80126f6 <HAL_TIM_ConfigClockSource+0x14a>
 801267c:	2b50      	cmp	r3, #80	; 0x50
 801267e:	d873      	bhi.n	8012768 <HAL_TIM_ConfigClockSource+0x1bc>
 8012680:	2b40      	cmp	r3, #64	; 0x40
 8012682:	d058      	beq.n	8012736 <HAL_TIM_ConfigClockSource+0x18a>
 8012684:	2b40      	cmp	r3, #64	; 0x40
 8012686:	d86f      	bhi.n	8012768 <HAL_TIM_ConfigClockSource+0x1bc>
 8012688:	2b30      	cmp	r3, #48	; 0x30
 801268a:	d064      	beq.n	8012756 <HAL_TIM_ConfigClockSource+0x1aa>
 801268c:	2b30      	cmp	r3, #48	; 0x30
 801268e:	d86b      	bhi.n	8012768 <HAL_TIM_ConfigClockSource+0x1bc>
 8012690:	2b20      	cmp	r3, #32
 8012692:	d060      	beq.n	8012756 <HAL_TIM_ConfigClockSource+0x1aa>
 8012694:	2b20      	cmp	r3, #32
 8012696:	d867      	bhi.n	8012768 <HAL_TIM_ConfigClockSource+0x1bc>
 8012698:	2b00      	cmp	r3, #0
 801269a:	d05c      	beq.n	8012756 <HAL_TIM_ConfigClockSource+0x1aa>
 801269c:	2b10      	cmp	r3, #16
 801269e:	d05a      	beq.n	8012756 <HAL_TIM_ConfigClockSource+0x1aa>
 80126a0:	e062      	b.n	8012768 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	6818      	ldr	r0, [r3, #0]
 80126a6:	683b      	ldr	r3, [r7, #0]
 80126a8:	6899      	ldr	r1, [r3, #8]
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	685a      	ldr	r2, [r3, #4]
 80126ae:	683b      	ldr	r3, [r7, #0]
 80126b0:	68db      	ldr	r3, [r3, #12]
 80126b2:	f000 fc8b 	bl	8012fcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	689b      	ldr	r3, [r3, #8]
 80126bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80126be:	68bb      	ldr	r3, [r7, #8]
 80126c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80126c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	68ba      	ldr	r2, [r7, #8]
 80126cc:	609a      	str	r2, [r3, #8]
      break;
 80126ce:	e04f      	b.n	8012770 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	6818      	ldr	r0, [r3, #0]
 80126d4:	683b      	ldr	r3, [r7, #0]
 80126d6:	6899      	ldr	r1, [r3, #8]
 80126d8:	683b      	ldr	r3, [r7, #0]
 80126da:	685a      	ldr	r2, [r3, #4]
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	68db      	ldr	r3, [r3, #12]
 80126e0:	f000 fc74 	bl	8012fcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	689a      	ldr	r2, [r3, #8]
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80126f2:	609a      	str	r2, [r3, #8]
      break;
 80126f4:	e03c      	b.n	8012770 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	6818      	ldr	r0, [r3, #0]
 80126fa:	683b      	ldr	r3, [r7, #0]
 80126fc:	6859      	ldr	r1, [r3, #4]
 80126fe:	683b      	ldr	r3, [r7, #0]
 8012700:	68db      	ldr	r3, [r3, #12]
 8012702:	461a      	mov	r2, r3
 8012704:	f000 fbe4 	bl	8012ed0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	2150      	movs	r1, #80	; 0x50
 801270e:	4618      	mov	r0, r3
 8012710:	f000 fc3e 	bl	8012f90 <TIM_ITRx_SetConfig>
      break;
 8012714:	e02c      	b.n	8012770 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	6818      	ldr	r0, [r3, #0]
 801271a:	683b      	ldr	r3, [r7, #0]
 801271c:	6859      	ldr	r1, [r3, #4]
 801271e:	683b      	ldr	r3, [r7, #0]
 8012720:	68db      	ldr	r3, [r3, #12]
 8012722:	461a      	mov	r2, r3
 8012724:	f000 fc03 	bl	8012f2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	2160      	movs	r1, #96	; 0x60
 801272e:	4618      	mov	r0, r3
 8012730:	f000 fc2e 	bl	8012f90 <TIM_ITRx_SetConfig>
      break;
 8012734:	e01c      	b.n	8012770 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	6818      	ldr	r0, [r3, #0]
 801273a:	683b      	ldr	r3, [r7, #0]
 801273c:	6859      	ldr	r1, [r3, #4]
 801273e:	683b      	ldr	r3, [r7, #0]
 8012740:	68db      	ldr	r3, [r3, #12]
 8012742:	461a      	mov	r2, r3
 8012744:	f000 fbc4 	bl	8012ed0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	2140      	movs	r1, #64	; 0x40
 801274e:	4618      	mov	r0, r3
 8012750:	f000 fc1e 	bl	8012f90 <TIM_ITRx_SetConfig>
      break;
 8012754:	e00c      	b.n	8012770 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	681a      	ldr	r2, [r3, #0]
 801275a:	683b      	ldr	r3, [r7, #0]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	4619      	mov	r1, r3
 8012760:	4610      	mov	r0, r2
 8012762:	f000 fc15 	bl	8012f90 <TIM_ITRx_SetConfig>
      break;
 8012766:	e003      	b.n	8012770 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8012768:	2301      	movs	r3, #1
 801276a:	73fb      	strb	r3, [r7, #15]
      break;
 801276c:	e000      	b.n	8012770 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801276e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	2201      	movs	r2, #1
 8012774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	2200      	movs	r2, #0
 801277c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012780:	7bfb      	ldrb	r3, [r7, #15]
}
 8012782:	4618      	mov	r0, r3
 8012784:	3710      	adds	r7, #16
 8012786:	46bd      	mov	sp, r7
 8012788:	bd80      	pop	{r7, pc}
 801278a:	bf00      	nop
 801278c:	ffceff88 	.word	0xffceff88
 8012790:	00100040 	.word	0x00100040
 8012794:	00100030 	.word	0x00100030
 8012798:	00100020 	.word	0x00100020

0801279c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801279c:	b480      	push	{r7}
 801279e:	b083      	sub	sp, #12
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80127a4:	bf00      	nop
 80127a6:	370c      	adds	r7, #12
 80127a8:	46bd      	mov	sp, r7
 80127aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ae:	4770      	bx	lr

080127b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80127b0:	b480      	push	{r7}
 80127b2:	b083      	sub	sp, #12
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80127b8:	bf00      	nop
 80127ba:	370c      	adds	r7, #12
 80127bc:	46bd      	mov	sp, r7
 80127be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c2:	4770      	bx	lr

080127c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80127c4:	b480      	push	{r7}
 80127c6:	b083      	sub	sp, #12
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80127cc:	bf00      	nop
 80127ce:	370c      	adds	r7, #12
 80127d0:	46bd      	mov	sp, r7
 80127d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d6:	4770      	bx	lr

080127d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80127d8:	b480      	push	{r7}
 80127da:	b085      	sub	sp, #20
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
 80127e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	4a46      	ldr	r2, [pc, #280]	; (8012904 <TIM_Base_SetConfig+0x12c>)
 80127ec:	4293      	cmp	r3, r2
 80127ee:	d013      	beq.n	8012818 <TIM_Base_SetConfig+0x40>
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80127f6:	d00f      	beq.n	8012818 <TIM_Base_SetConfig+0x40>
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	4a43      	ldr	r2, [pc, #268]	; (8012908 <TIM_Base_SetConfig+0x130>)
 80127fc:	4293      	cmp	r3, r2
 80127fe:	d00b      	beq.n	8012818 <TIM_Base_SetConfig+0x40>
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	4a42      	ldr	r2, [pc, #264]	; (801290c <TIM_Base_SetConfig+0x134>)
 8012804:	4293      	cmp	r3, r2
 8012806:	d007      	beq.n	8012818 <TIM_Base_SetConfig+0x40>
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	4a41      	ldr	r2, [pc, #260]	; (8012910 <TIM_Base_SetConfig+0x138>)
 801280c:	4293      	cmp	r3, r2
 801280e:	d003      	beq.n	8012818 <TIM_Base_SetConfig+0x40>
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	4a40      	ldr	r2, [pc, #256]	; (8012914 <TIM_Base_SetConfig+0x13c>)
 8012814:	4293      	cmp	r3, r2
 8012816:	d108      	bne.n	801282a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801281e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	685b      	ldr	r3, [r3, #4]
 8012824:	68fa      	ldr	r2, [r7, #12]
 8012826:	4313      	orrs	r3, r2
 8012828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	4a35      	ldr	r2, [pc, #212]	; (8012904 <TIM_Base_SetConfig+0x12c>)
 801282e:	4293      	cmp	r3, r2
 8012830:	d01f      	beq.n	8012872 <TIM_Base_SetConfig+0x9a>
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012838:	d01b      	beq.n	8012872 <TIM_Base_SetConfig+0x9a>
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	4a32      	ldr	r2, [pc, #200]	; (8012908 <TIM_Base_SetConfig+0x130>)
 801283e:	4293      	cmp	r3, r2
 8012840:	d017      	beq.n	8012872 <TIM_Base_SetConfig+0x9a>
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	4a31      	ldr	r2, [pc, #196]	; (801290c <TIM_Base_SetConfig+0x134>)
 8012846:	4293      	cmp	r3, r2
 8012848:	d013      	beq.n	8012872 <TIM_Base_SetConfig+0x9a>
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	4a30      	ldr	r2, [pc, #192]	; (8012910 <TIM_Base_SetConfig+0x138>)
 801284e:	4293      	cmp	r3, r2
 8012850:	d00f      	beq.n	8012872 <TIM_Base_SetConfig+0x9a>
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	4a2f      	ldr	r2, [pc, #188]	; (8012914 <TIM_Base_SetConfig+0x13c>)
 8012856:	4293      	cmp	r3, r2
 8012858:	d00b      	beq.n	8012872 <TIM_Base_SetConfig+0x9a>
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	4a2e      	ldr	r2, [pc, #184]	; (8012918 <TIM_Base_SetConfig+0x140>)
 801285e:	4293      	cmp	r3, r2
 8012860:	d007      	beq.n	8012872 <TIM_Base_SetConfig+0x9a>
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	4a2d      	ldr	r2, [pc, #180]	; (801291c <TIM_Base_SetConfig+0x144>)
 8012866:	4293      	cmp	r3, r2
 8012868:	d003      	beq.n	8012872 <TIM_Base_SetConfig+0x9a>
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	4a2c      	ldr	r2, [pc, #176]	; (8012920 <TIM_Base_SetConfig+0x148>)
 801286e:	4293      	cmp	r3, r2
 8012870:	d108      	bne.n	8012884 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801287a:	683b      	ldr	r3, [r7, #0]
 801287c:	68db      	ldr	r3, [r3, #12]
 801287e:	68fa      	ldr	r2, [r7, #12]
 8012880:	4313      	orrs	r3, r2
 8012882:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801288a:	683b      	ldr	r3, [r7, #0]
 801288c:	695b      	ldr	r3, [r3, #20]
 801288e:	4313      	orrs	r3, r2
 8012890:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	68fa      	ldr	r2, [r7, #12]
 8012896:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012898:	683b      	ldr	r3, [r7, #0]
 801289a:	689a      	ldr	r2, [r3, #8]
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80128a0:	683b      	ldr	r3, [r7, #0]
 80128a2:	681a      	ldr	r2, [r3, #0]
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	4a16      	ldr	r2, [pc, #88]	; (8012904 <TIM_Base_SetConfig+0x12c>)
 80128ac:	4293      	cmp	r3, r2
 80128ae:	d00f      	beq.n	80128d0 <TIM_Base_SetConfig+0xf8>
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	4a18      	ldr	r2, [pc, #96]	; (8012914 <TIM_Base_SetConfig+0x13c>)
 80128b4:	4293      	cmp	r3, r2
 80128b6:	d00b      	beq.n	80128d0 <TIM_Base_SetConfig+0xf8>
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	4a17      	ldr	r2, [pc, #92]	; (8012918 <TIM_Base_SetConfig+0x140>)
 80128bc:	4293      	cmp	r3, r2
 80128be:	d007      	beq.n	80128d0 <TIM_Base_SetConfig+0xf8>
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	4a16      	ldr	r2, [pc, #88]	; (801291c <TIM_Base_SetConfig+0x144>)
 80128c4:	4293      	cmp	r3, r2
 80128c6:	d003      	beq.n	80128d0 <TIM_Base_SetConfig+0xf8>
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	4a15      	ldr	r2, [pc, #84]	; (8012920 <TIM_Base_SetConfig+0x148>)
 80128cc:	4293      	cmp	r3, r2
 80128ce:	d103      	bne.n	80128d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80128d0:	683b      	ldr	r3, [r7, #0]
 80128d2:	691a      	ldr	r2, [r3, #16]
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	2201      	movs	r2, #1
 80128dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	691b      	ldr	r3, [r3, #16]
 80128e2:	f003 0301 	and.w	r3, r3, #1
 80128e6:	2b01      	cmp	r3, #1
 80128e8:	d105      	bne.n	80128f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	691b      	ldr	r3, [r3, #16]
 80128ee:	f023 0201 	bic.w	r2, r3, #1
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	611a      	str	r2, [r3, #16]
  }
}
 80128f6:	bf00      	nop
 80128f8:	3714      	adds	r7, #20
 80128fa:	46bd      	mov	sp, r7
 80128fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012900:	4770      	bx	lr
 8012902:	bf00      	nop
 8012904:	40010000 	.word	0x40010000
 8012908:	40000400 	.word	0x40000400
 801290c:	40000800 	.word	0x40000800
 8012910:	40000c00 	.word	0x40000c00
 8012914:	40010400 	.word	0x40010400
 8012918:	40014000 	.word	0x40014000
 801291c:	40014400 	.word	0x40014400
 8012920:	40014800 	.word	0x40014800

08012924 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012924:	b480      	push	{r7}
 8012926:	b087      	sub	sp, #28
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
 801292c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	6a1b      	ldr	r3, [r3, #32]
 8012932:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	6a1b      	ldr	r3, [r3, #32]
 8012938:	f023 0201 	bic.w	r2, r3, #1
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	685b      	ldr	r3, [r3, #4]
 8012944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	699b      	ldr	r3, [r3, #24]
 801294a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801294c:	68fa      	ldr	r2, [r7, #12]
 801294e:	4b37      	ldr	r3, [pc, #220]	; (8012a2c <TIM_OC1_SetConfig+0x108>)
 8012950:	4013      	ands	r3, r2
 8012952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	f023 0303 	bic.w	r3, r3, #3
 801295a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801295c:	683b      	ldr	r3, [r7, #0]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	68fa      	ldr	r2, [r7, #12]
 8012962:	4313      	orrs	r3, r2
 8012964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012966:	697b      	ldr	r3, [r7, #20]
 8012968:	f023 0302 	bic.w	r3, r3, #2
 801296c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801296e:	683b      	ldr	r3, [r7, #0]
 8012970:	689b      	ldr	r3, [r3, #8]
 8012972:	697a      	ldr	r2, [r7, #20]
 8012974:	4313      	orrs	r3, r2
 8012976:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	4a2d      	ldr	r2, [pc, #180]	; (8012a30 <TIM_OC1_SetConfig+0x10c>)
 801297c:	4293      	cmp	r3, r2
 801297e:	d00f      	beq.n	80129a0 <TIM_OC1_SetConfig+0x7c>
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	4a2c      	ldr	r2, [pc, #176]	; (8012a34 <TIM_OC1_SetConfig+0x110>)
 8012984:	4293      	cmp	r3, r2
 8012986:	d00b      	beq.n	80129a0 <TIM_OC1_SetConfig+0x7c>
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	4a2b      	ldr	r2, [pc, #172]	; (8012a38 <TIM_OC1_SetConfig+0x114>)
 801298c:	4293      	cmp	r3, r2
 801298e:	d007      	beq.n	80129a0 <TIM_OC1_SetConfig+0x7c>
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	4a2a      	ldr	r2, [pc, #168]	; (8012a3c <TIM_OC1_SetConfig+0x118>)
 8012994:	4293      	cmp	r3, r2
 8012996:	d003      	beq.n	80129a0 <TIM_OC1_SetConfig+0x7c>
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	4a29      	ldr	r2, [pc, #164]	; (8012a40 <TIM_OC1_SetConfig+0x11c>)
 801299c:	4293      	cmp	r3, r2
 801299e:	d10c      	bne.n	80129ba <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80129a0:	697b      	ldr	r3, [r7, #20]
 80129a2:	f023 0308 	bic.w	r3, r3, #8
 80129a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80129a8:	683b      	ldr	r3, [r7, #0]
 80129aa:	68db      	ldr	r3, [r3, #12]
 80129ac:	697a      	ldr	r2, [r7, #20]
 80129ae:	4313      	orrs	r3, r2
 80129b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80129b2:	697b      	ldr	r3, [r7, #20]
 80129b4:	f023 0304 	bic.w	r3, r3, #4
 80129b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	4a1c      	ldr	r2, [pc, #112]	; (8012a30 <TIM_OC1_SetConfig+0x10c>)
 80129be:	4293      	cmp	r3, r2
 80129c0:	d00f      	beq.n	80129e2 <TIM_OC1_SetConfig+0xbe>
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	4a1b      	ldr	r2, [pc, #108]	; (8012a34 <TIM_OC1_SetConfig+0x110>)
 80129c6:	4293      	cmp	r3, r2
 80129c8:	d00b      	beq.n	80129e2 <TIM_OC1_SetConfig+0xbe>
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	4a1a      	ldr	r2, [pc, #104]	; (8012a38 <TIM_OC1_SetConfig+0x114>)
 80129ce:	4293      	cmp	r3, r2
 80129d0:	d007      	beq.n	80129e2 <TIM_OC1_SetConfig+0xbe>
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	4a19      	ldr	r2, [pc, #100]	; (8012a3c <TIM_OC1_SetConfig+0x118>)
 80129d6:	4293      	cmp	r3, r2
 80129d8:	d003      	beq.n	80129e2 <TIM_OC1_SetConfig+0xbe>
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	4a18      	ldr	r2, [pc, #96]	; (8012a40 <TIM_OC1_SetConfig+0x11c>)
 80129de:	4293      	cmp	r3, r2
 80129e0:	d111      	bne.n	8012a06 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80129e2:	693b      	ldr	r3, [r7, #16]
 80129e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80129e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80129ea:	693b      	ldr	r3, [r7, #16]
 80129ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80129f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80129f2:	683b      	ldr	r3, [r7, #0]
 80129f4:	695b      	ldr	r3, [r3, #20]
 80129f6:	693a      	ldr	r2, [r7, #16]
 80129f8:	4313      	orrs	r3, r2
 80129fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80129fc:	683b      	ldr	r3, [r7, #0]
 80129fe:	699b      	ldr	r3, [r3, #24]
 8012a00:	693a      	ldr	r2, [r7, #16]
 8012a02:	4313      	orrs	r3, r2
 8012a04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	693a      	ldr	r2, [r7, #16]
 8012a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	68fa      	ldr	r2, [r7, #12]
 8012a10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012a12:	683b      	ldr	r3, [r7, #0]
 8012a14:	685a      	ldr	r2, [r3, #4]
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	697a      	ldr	r2, [r7, #20]
 8012a1e:	621a      	str	r2, [r3, #32]
}
 8012a20:	bf00      	nop
 8012a22:	371c      	adds	r7, #28
 8012a24:	46bd      	mov	sp, r7
 8012a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2a:	4770      	bx	lr
 8012a2c:	fffeff8f 	.word	0xfffeff8f
 8012a30:	40010000 	.word	0x40010000
 8012a34:	40010400 	.word	0x40010400
 8012a38:	40014000 	.word	0x40014000
 8012a3c:	40014400 	.word	0x40014400
 8012a40:	40014800 	.word	0x40014800

08012a44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012a44:	b480      	push	{r7}
 8012a46:	b087      	sub	sp, #28
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
 8012a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	6a1b      	ldr	r3, [r3, #32]
 8012a52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	6a1b      	ldr	r3, [r3, #32]
 8012a58:	f023 0210 	bic.w	r2, r3, #16
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	685b      	ldr	r3, [r3, #4]
 8012a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	699b      	ldr	r3, [r3, #24]
 8012a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012a6c:	68fa      	ldr	r2, [r7, #12]
 8012a6e:	4b34      	ldr	r3, [pc, #208]	; (8012b40 <TIM_OC2_SetConfig+0xfc>)
 8012a70:	4013      	ands	r3, r2
 8012a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012a7c:	683b      	ldr	r3, [r7, #0]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	021b      	lsls	r3, r3, #8
 8012a82:	68fa      	ldr	r2, [r7, #12]
 8012a84:	4313      	orrs	r3, r2
 8012a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012a88:	697b      	ldr	r3, [r7, #20]
 8012a8a:	f023 0320 	bic.w	r3, r3, #32
 8012a8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012a90:	683b      	ldr	r3, [r7, #0]
 8012a92:	689b      	ldr	r3, [r3, #8]
 8012a94:	011b      	lsls	r3, r3, #4
 8012a96:	697a      	ldr	r2, [r7, #20]
 8012a98:	4313      	orrs	r3, r2
 8012a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	4a29      	ldr	r2, [pc, #164]	; (8012b44 <TIM_OC2_SetConfig+0x100>)
 8012aa0:	4293      	cmp	r3, r2
 8012aa2:	d003      	beq.n	8012aac <TIM_OC2_SetConfig+0x68>
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	4a28      	ldr	r2, [pc, #160]	; (8012b48 <TIM_OC2_SetConfig+0x104>)
 8012aa8:	4293      	cmp	r3, r2
 8012aaa:	d10d      	bne.n	8012ac8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012aac:	697b      	ldr	r3, [r7, #20]
 8012aae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	68db      	ldr	r3, [r3, #12]
 8012ab8:	011b      	lsls	r3, r3, #4
 8012aba:	697a      	ldr	r2, [r7, #20]
 8012abc:	4313      	orrs	r3, r2
 8012abe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012ac0:	697b      	ldr	r3, [r7, #20]
 8012ac2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012ac6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	4a1e      	ldr	r2, [pc, #120]	; (8012b44 <TIM_OC2_SetConfig+0x100>)
 8012acc:	4293      	cmp	r3, r2
 8012ace:	d00f      	beq.n	8012af0 <TIM_OC2_SetConfig+0xac>
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	4a1d      	ldr	r2, [pc, #116]	; (8012b48 <TIM_OC2_SetConfig+0x104>)
 8012ad4:	4293      	cmp	r3, r2
 8012ad6:	d00b      	beq.n	8012af0 <TIM_OC2_SetConfig+0xac>
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	4a1c      	ldr	r2, [pc, #112]	; (8012b4c <TIM_OC2_SetConfig+0x108>)
 8012adc:	4293      	cmp	r3, r2
 8012ade:	d007      	beq.n	8012af0 <TIM_OC2_SetConfig+0xac>
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	4a1b      	ldr	r2, [pc, #108]	; (8012b50 <TIM_OC2_SetConfig+0x10c>)
 8012ae4:	4293      	cmp	r3, r2
 8012ae6:	d003      	beq.n	8012af0 <TIM_OC2_SetConfig+0xac>
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	4a1a      	ldr	r2, [pc, #104]	; (8012b54 <TIM_OC2_SetConfig+0x110>)
 8012aec:	4293      	cmp	r3, r2
 8012aee:	d113      	bne.n	8012b18 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012af0:	693b      	ldr	r3, [r7, #16]
 8012af2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012af6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012af8:	693b      	ldr	r3, [r7, #16]
 8012afa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012afe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012b00:	683b      	ldr	r3, [r7, #0]
 8012b02:	695b      	ldr	r3, [r3, #20]
 8012b04:	009b      	lsls	r3, r3, #2
 8012b06:	693a      	ldr	r2, [r7, #16]
 8012b08:	4313      	orrs	r3, r2
 8012b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012b0c:	683b      	ldr	r3, [r7, #0]
 8012b0e:	699b      	ldr	r3, [r3, #24]
 8012b10:	009b      	lsls	r3, r3, #2
 8012b12:	693a      	ldr	r2, [r7, #16]
 8012b14:	4313      	orrs	r3, r2
 8012b16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	693a      	ldr	r2, [r7, #16]
 8012b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	68fa      	ldr	r2, [r7, #12]
 8012b22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012b24:	683b      	ldr	r3, [r7, #0]
 8012b26:	685a      	ldr	r2, [r3, #4]
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	697a      	ldr	r2, [r7, #20]
 8012b30:	621a      	str	r2, [r3, #32]
}
 8012b32:	bf00      	nop
 8012b34:	371c      	adds	r7, #28
 8012b36:	46bd      	mov	sp, r7
 8012b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3c:	4770      	bx	lr
 8012b3e:	bf00      	nop
 8012b40:	feff8fff 	.word	0xfeff8fff
 8012b44:	40010000 	.word	0x40010000
 8012b48:	40010400 	.word	0x40010400
 8012b4c:	40014000 	.word	0x40014000
 8012b50:	40014400 	.word	0x40014400
 8012b54:	40014800 	.word	0x40014800

08012b58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012b58:	b480      	push	{r7}
 8012b5a:	b087      	sub	sp, #28
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
 8012b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	6a1b      	ldr	r3, [r3, #32]
 8012b66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	6a1b      	ldr	r3, [r3, #32]
 8012b6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	685b      	ldr	r3, [r3, #4]
 8012b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	69db      	ldr	r3, [r3, #28]
 8012b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012b80:	68fa      	ldr	r2, [r7, #12]
 8012b82:	4b33      	ldr	r3, [pc, #204]	; (8012c50 <TIM_OC3_SetConfig+0xf8>)
 8012b84:	4013      	ands	r3, r2
 8012b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	f023 0303 	bic.w	r3, r3, #3
 8012b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012b90:	683b      	ldr	r3, [r7, #0]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	68fa      	ldr	r2, [r7, #12]
 8012b96:	4313      	orrs	r3, r2
 8012b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012b9a:	697b      	ldr	r3, [r7, #20]
 8012b9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	689b      	ldr	r3, [r3, #8]
 8012ba6:	021b      	lsls	r3, r3, #8
 8012ba8:	697a      	ldr	r2, [r7, #20]
 8012baa:	4313      	orrs	r3, r2
 8012bac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	4a28      	ldr	r2, [pc, #160]	; (8012c54 <TIM_OC3_SetConfig+0xfc>)
 8012bb2:	4293      	cmp	r3, r2
 8012bb4:	d003      	beq.n	8012bbe <TIM_OC3_SetConfig+0x66>
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	4a27      	ldr	r2, [pc, #156]	; (8012c58 <TIM_OC3_SetConfig+0x100>)
 8012bba:	4293      	cmp	r3, r2
 8012bbc:	d10d      	bne.n	8012bda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012bbe:	697b      	ldr	r3, [r7, #20]
 8012bc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8012bc6:	683b      	ldr	r3, [r7, #0]
 8012bc8:	68db      	ldr	r3, [r3, #12]
 8012bca:	021b      	lsls	r3, r3, #8
 8012bcc:	697a      	ldr	r2, [r7, #20]
 8012bce:	4313      	orrs	r3, r2
 8012bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012bd2:	697b      	ldr	r3, [r7, #20]
 8012bd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	4a1d      	ldr	r2, [pc, #116]	; (8012c54 <TIM_OC3_SetConfig+0xfc>)
 8012bde:	4293      	cmp	r3, r2
 8012be0:	d00f      	beq.n	8012c02 <TIM_OC3_SetConfig+0xaa>
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	4a1c      	ldr	r2, [pc, #112]	; (8012c58 <TIM_OC3_SetConfig+0x100>)
 8012be6:	4293      	cmp	r3, r2
 8012be8:	d00b      	beq.n	8012c02 <TIM_OC3_SetConfig+0xaa>
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	4a1b      	ldr	r2, [pc, #108]	; (8012c5c <TIM_OC3_SetConfig+0x104>)
 8012bee:	4293      	cmp	r3, r2
 8012bf0:	d007      	beq.n	8012c02 <TIM_OC3_SetConfig+0xaa>
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	4a1a      	ldr	r2, [pc, #104]	; (8012c60 <TIM_OC3_SetConfig+0x108>)
 8012bf6:	4293      	cmp	r3, r2
 8012bf8:	d003      	beq.n	8012c02 <TIM_OC3_SetConfig+0xaa>
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	4a19      	ldr	r2, [pc, #100]	; (8012c64 <TIM_OC3_SetConfig+0x10c>)
 8012bfe:	4293      	cmp	r3, r2
 8012c00:	d113      	bne.n	8012c2a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8012c02:	693b      	ldr	r3, [r7, #16]
 8012c04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8012c0a:	693b      	ldr	r3, [r7, #16]
 8012c0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8012c12:	683b      	ldr	r3, [r7, #0]
 8012c14:	695b      	ldr	r3, [r3, #20]
 8012c16:	011b      	lsls	r3, r3, #4
 8012c18:	693a      	ldr	r2, [r7, #16]
 8012c1a:	4313      	orrs	r3, r2
 8012c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012c1e:	683b      	ldr	r3, [r7, #0]
 8012c20:	699b      	ldr	r3, [r3, #24]
 8012c22:	011b      	lsls	r3, r3, #4
 8012c24:	693a      	ldr	r2, [r7, #16]
 8012c26:	4313      	orrs	r3, r2
 8012c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	693a      	ldr	r2, [r7, #16]
 8012c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	68fa      	ldr	r2, [r7, #12]
 8012c34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012c36:	683b      	ldr	r3, [r7, #0]
 8012c38:	685a      	ldr	r2, [r3, #4]
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	697a      	ldr	r2, [r7, #20]
 8012c42:	621a      	str	r2, [r3, #32]
}
 8012c44:	bf00      	nop
 8012c46:	371c      	adds	r7, #28
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c4e:	4770      	bx	lr
 8012c50:	fffeff8f 	.word	0xfffeff8f
 8012c54:	40010000 	.word	0x40010000
 8012c58:	40010400 	.word	0x40010400
 8012c5c:	40014000 	.word	0x40014000
 8012c60:	40014400 	.word	0x40014400
 8012c64:	40014800 	.word	0x40014800

08012c68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012c68:	b480      	push	{r7}
 8012c6a:	b087      	sub	sp, #28
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
 8012c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	6a1b      	ldr	r3, [r3, #32]
 8012c76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	6a1b      	ldr	r3, [r3, #32]
 8012c7c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	685b      	ldr	r3, [r3, #4]
 8012c88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	69db      	ldr	r3, [r3, #28]
 8012c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012c90:	68fa      	ldr	r2, [r7, #12]
 8012c92:	4b24      	ldr	r3, [pc, #144]	; (8012d24 <TIM_OC4_SetConfig+0xbc>)
 8012c94:	4013      	ands	r3, r2
 8012c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012ca0:	683b      	ldr	r3, [r7, #0]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	021b      	lsls	r3, r3, #8
 8012ca6:	68fa      	ldr	r2, [r7, #12]
 8012ca8:	4313      	orrs	r3, r2
 8012caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012cac:	693b      	ldr	r3, [r7, #16]
 8012cae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012cb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012cb4:	683b      	ldr	r3, [r7, #0]
 8012cb6:	689b      	ldr	r3, [r3, #8]
 8012cb8:	031b      	lsls	r3, r3, #12
 8012cba:	693a      	ldr	r2, [r7, #16]
 8012cbc:	4313      	orrs	r3, r2
 8012cbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	4a19      	ldr	r2, [pc, #100]	; (8012d28 <TIM_OC4_SetConfig+0xc0>)
 8012cc4:	4293      	cmp	r3, r2
 8012cc6:	d00f      	beq.n	8012ce8 <TIM_OC4_SetConfig+0x80>
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	4a18      	ldr	r2, [pc, #96]	; (8012d2c <TIM_OC4_SetConfig+0xc4>)
 8012ccc:	4293      	cmp	r3, r2
 8012cce:	d00b      	beq.n	8012ce8 <TIM_OC4_SetConfig+0x80>
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	4a17      	ldr	r2, [pc, #92]	; (8012d30 <TIM_OC4_SetConfig+0xc8>)
 8012cd4:	4293      	cmp	r3, r2
 8012cd6:	d007      	beq.n	8012ce8 <TIM_OC4_SetConfig+0x80>
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	4a16      	ldr	r2, [pc, #88]	; (8012d34 <TIM_OC4_SetConfig+0xcc>)
 8012cdc:	4293      	cmp	r3, r2
 8012cde:	d003      	beq.n	8012ce8 <TIM_OC4_SetConfig+0x80>
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	4a15      	ldr	r2, [pc, #84]	; (8012d38 <TIM_OC4_SetConfig+0xd0>)
 8012ce4:	4293      	cmp	r3, r2
 8012ce6:	d109      	bne.n	8012cfc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012ce8:	697b      	ldr	r3, [r7, #20]
 8012cea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012cee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012cf0:	683b      	ldr	r3, [r7, #0]
 8012cf2:	695b      	ldr	r3, [r3, #20]
 8012cf4:	019b      	lsls	r3, r3, #6
 8012cf6:	697a      	ldr	r2, [r7, #20]
 8012cf8:	4313      	orrs	r3, r2
 8012cfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	697a      	ldr	r2, [r7, #20]
 8012d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	68fa      	ldr	r2, [r7, #12]
 8012d06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012d08:	683b      	ldr	r3, [r7, #0]
 8012d0a:	685a      	ldr	r2, [r3, #4]
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	693a      	ldr	r2, [r7, #16]
 8012d14:	621a      	str	r2, [r3, #32]
}
 8012d16:	bf00      	nop
 8012d18:	371c      	adds	r7, #28
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d20:	4770      	bx	lr
 8012d22:	bf00      	nop
 8012d24:	feff8fff 	.word	0xfeff8fff
 8012d28:	40010000 	.word	0x40010000
 8012d2c:	40010400 	.word	0x40010400
 8012d30:	40014000 	.word	0x40014000
 8012d34:	40014400 	.word	0x40014400
 8012d38:	40014800 	.word	0x40014800

08012d3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012d3c:	b480      	push	{r7}
 8012d3e:	b087      	sub	sp, #28
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	6078      	str	r0, [r7, #4]
 8012d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	6a1b      	ldr	r3, [r3, #32]
 8012d4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	6a1b      	ldr	r3, [r3, #32]
 8012d50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	685b      	ldr	r3, [r3, #4]
 8012d5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8012d64:	68fa      	ldr	r2, [r7, #12]
 8012d66:	4b21      	ldr	r3, [pc, #132]	; (8012dec <TIM_OC5_SetConfig+0xb0>)
 8012d68:	4013      	ands	r3, r2
 8012d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012d6c:	683b      	ldr	r3, [r7, #0]
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	68fa      	ldr	r2, [r7, #12]
 8012d72:	4313      	orrs	r3, r2
 8012d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8012d76:	693b      	ldr	r3, [r7, #16]
 8012d78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8012d7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8012d7e:	683b      	ldr	r3, [r7, #0]
 8012d80:	689b      	ldr	r3, [r3, #8]
 8012d82:	041b      	lsls	r3, r3, #16
 8012d84:	693a      	ldr	r2, [r7, #16]
 8012d86:	4313      	orrs	r3, r2
 8012d88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	4a18      	ldr	r2, [pc, #96]	; (8012df0 <TIM_OC5_SetConfig+0xb4>)
 8012d8e:	4293      	cmp	r3, r2
 8012d90:	d00f      	beq.n	8012db2 <TIM_OC5_SetConfig+0x76>
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	4a17      	ldr	r2, [pc, #92]	; (8012df4 <TIM_OC5_SetConfig+0xb8>)
 8012d96:	4293      	cmp	r3, r2
 8012d98:	d00b      	beq.n	8012db2 <TIM_OC5_SetConfig+0x76>
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	4a16      	ldr	r2, [pc, #88]	; (8012df8 <TIM_OC5_SetConfig+0xbc>)
 8012d9e:	4293      	cmp	r3, r2
 8012da0:	d007      	beq.n	8012db2 <TIM_OC5_SetConfig+0x76>
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	4a15      	ldr	r2, [pc, #84]	; (8012dfc <TIM_OC5_SetConfig+0xc0>)
 8012da6:	4293      	cmp	r3, r2
 8012da8:	d003      	beq.n	8012db2 <TIM_OC5_SetConfig+0x76>
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	4a14      	ldr	r2, [pc, #80]	; (8012e00 <TIM_OC5_SetConfig+0xc4>)
 8012dae:	4293      	cmp	r3, r2
 8012db0:	d109      	bne.n	8012dc6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8012db2:	697b      	ldr	r3, [r7, #20]
 8012db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012db8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8012dba:	683b      	ldr	r3, [r7, #0]
 8012dbc:	695b      	ldr	r3, [r3, #20]
 8012dbe:	021b      	lsls	r3, r3, #8
 8012dc0:	697a      	ldr	r2, [r7, #20]
 8012dc2:	4313      	orrs	r3, r2
 8012dc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	697a      	ldr	r2, [r7, #20]
 8012dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	68fa      	ldr	r2, [r7, #12]
 8012dd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8012dd2:	683b      	ldr	r3, [r7, #0]
 8012dd4:	685a      	ldr	r2, [r3, #4]
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	693a      	ldr	r2, [r7, #16]
 8012dde:	621a      	str	r2, [r3, #32]
}
 8012de0:	bf00      	nop
 8012de2:	371c      	adds	r7, #28
 8012de4:	46bd      	mov	sp, r7
 8012de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dea:	4770      	bx	lr
 8012dec:	fffeff8f 	.word	0xfffeff8f
 8012df0:	40010000 	.word	0x40010000
 8012df4:	40010400 	.word	0x40010400
 8012df8:	40014000 	.word	0x40014000
 8012dfc:	40014400 	.word	0x40014400
 8012e00:	40014800 	.word	0x40014800

08012e04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012e04:	b480      	push	{r7}
 8012e06:	b087      	sub	sp, #28
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
 8012e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	6a1b      	ldr	r3, [r3, #32]
 8012e12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	6a1b      	ldr	r3, [r3, #32]
 8012e18:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	685b      	ldr	r3, [r3, #4]
 8012e24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8012e2c:	68fa      	ldr	r2, [r7, #12]
 8012e2e:	4b22      	ldr	r3, [pc, #136]	; (8012eb8 <TIM_OC6_SetConfig+0xb4>)
 8012e30:	4013      	ands	r3, r2
 8012e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012e34:	683b      	ldr	r3, [r7, #0]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	021b      	lsls	r3, r3, #8
 8012e3a:	68fa      	ldr	r2, [r7, #12]
 8012e3c:	4313      	orrs	r3, r2
 8012e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8012e40:	693b      	ldr	r3, [r7, #16]
 8012e42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012e46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8012e48:	683b      	ldr	r3, [r7, #0]
 8012e4a:	689b      	ldr	r3, [r3, #8]
 8012e4c:	051b      	lsls	r3, r3, #20
 8012e4e:	693a      	ldr	r2, [r7, #16]
 8012e50:	4313      	orrs	r3, r2
 8012e52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	4a19      	ldr	r2, [pc, #100]	; (8012ebc <TIM_OC6_SetConfig+0xb8>)
 8012e58:	4293      	cmp	r3, r2
 8012e5a:	d00f      	beq.n	8012e7c <TIM_OC6_SetConfig+0x78>
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	4a18      	ldr	r2, [pc, #96]	; (8012ec0 <TIM_OC6_SetConfig+0xbc>)
 8012e60:	4293      	cmp	r3, r2
 8012e62:	d00b      	beq.n	8012e7c <TIM_OC6_SetConfig+0x78>
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	4a17      	ldr	r2, [pc, #92]	; (8012ec4 <TIM_OC6_SetConfig+0xc0>)
 8012e68:	4293      	cmp	r3, r2
 8012e6a:	d007      	beq.n	8012e7c <TIM_OC6_SetConfig+0x78>
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	4a16      	ldr	r2, [pc, #88]	; (8012ec8 <TIM_OC6_SetConfig+0xc4>)
 8012e70:	4293      	cmp	r3, r2
 8012e72:	d003      	beq.n	8012e7c <TIM_OC6_SetConfig+0x78>
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	4a15      	ldr	r2, [pc, #84]	; (8012ecc <TIM_OC6_SetConfig+0xc8>)
 8012e78:	4293      	cmp	r3, r2
 8012e7a:	d109      	bne.n	8012e90 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8012e7c:	697b      	ldr	r3, [r7, #20]
 8012e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012e82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8012e84:	683b      	ldr	r3, [r7, #0]
 8012e86:	695b      	ldr	r3, [r3, #20]
 8012e88:	029b      	lsls	r3, r3, #10
 8012e8a:	697a      	ldr	r2, [r7, #20]
 8012e8c:	4313      	orrs	r3, r2
 8012e8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	697a      	ldr	r2, [r7, #20]
 8012e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	68fa      	ldr	r2, [r7, #12]
 8012e9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	685a      	ldr	r2, [r3, #4]
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	693a      	ldr	r2, [r7, #16]
 8012ea8:	621a      	str	r2, [r3, #32]
}
 8012eaa:	bf00      	nop
 8012eac:	371c      	adds	r7, #28
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb4:	4770      	bx	lr
 8012eb6:	bf00      	nop
 8012eb8:	feff8fff 	.word	0xfeff8fff
 8012ebc:	40010000 	.word	0x40010000
 8012ec0:	40010400 	.word	0x40010400
 8012ec4:	40014000 	.word	0x40014000
 8012ec8:	40014400 	.word	0x40014400
 8012ecc:	40014800 	.word	0x40014800

08012ed0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012ed0:	b480      	push	{r7}
 8012ed2:	b087      	sub	sp, #28
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	60f8      	str	r0, [r7, #12]
 8012ed8:	60b9      	str	r1, [r7, #8]
 8012eda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	6a1b      	ldr	r3, [r3, #32]
 8012ee0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	6a1b      	ldr	r3, [r3, #32]
 8012ee6:	f023 0201 	bic.w	r2, r3, #1
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	699b      	ldr	r3, [r3, #24]
 8012ef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012ef4:	693b      	ldr	r3, [r7, #16]
 8012ef6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012efa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	011b      	lsls	r3, r3, #4
 8012f00:	693a      	ldr	r2, [r7, #16]
 8012f02:	4313      	orrs	r3, r2
 8012f04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012f06:	697b      	ldr	r3, [r7, #20]
 8012f08:	f023 030a 	bic.w	r3, r3, #10
 8012f0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012f0e:	697a      	ldr	r2, [r7, #20]
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	4313      	orrs	r3, r2
 8012f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	693a      	ldr	r2, [r7, #16]
 8012f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	697a      	ldr	r2, [r7, #20]
 8012f20:	621a      	str	r2, [r3, #32]
}
 8012f22:	bf00      	nop
 8012f24:	371c      	adds	r7, #28
 8012f26:	46bd      	mov	sp, r7
 8012f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f2c:	4770      	bx	lr

08012f2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012f2e:	b480      	push	{r7}
 8012f30:	b087      	sub	sp, #28
 8012f32:	af00      	add	r7, sp, #0
 8012f34:	60f8      	str	r0, [r7, #12]
 8012f36:	60b9      	str	r1, [r7, #8]
 8012f38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	6a1b      	ldr	r3, [r3, #32]
 8012f3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	6a1b      	ldr	r3, [r3, #32]
 8012f44:	f023 0210 	bic.w	r2, r3, #16
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	699b      	ldr	r3, [r3, #24]
 8012f50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012f52:	693b      	ldr	r3, [r7, #16]
 8012f54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012f58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	031b      	lsls	r3, r3, #12
 8012f5e:	693a      	ldr	r2, [r7, #16]
 8012f60:	4313      	orrs	r3, r2
 8012f62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012f64:	697b      	ldr	r3, [r7, #20]
 8012f66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012f6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012f6c:	68bb      	ldr	r3, [r7, #8]
 8012f6e:	011b      	lsls	r3, r3, #4
 8012f70:	697a      	ldr	r2, [r7, #20]
 8012f72:	4313      	orrs	r3, r2
 8012f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	693a      	ldr	r2, [r7, #16]
 8012f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	697a      	ldr	r2, [r7, #20]
 8012f80:	621a      	str	r2, [r3, #32]
}
 8012f82:	bf00      	nop
 8012f84:	371c      	adds	r7, #28
 8012f86:	46bd      	mov	sp, r7
 8012f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8c:	4770      	bx	lr
	...

08012f90 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012f90:	b480      	push	{r7}
 8012f92:	b085      	sub	sp, #20
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
 8012f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	689b      	ldr	r3, [r3, #8]
 8012f9e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012fa0:	68fa      	ldr	r2, [r7, #12]
 8012fa2:	4b09      	ldr	r3, [pc, #36]	; (8012fc8 <TIM_ITRx_SetConfig+0x38>)
 8012fa4:	4013      	ands	r3, r2
 8012fa6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012fa8:	683a      	ldr	r2, [r7, #0]
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	4313      	orrs	r3, r2
 8012fae:	f043 0307 	orr.w	r3, r3, #7
 8012fb2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	68fa      	ldr	r2, [r7, #12]
 8012fb8:	609a      	str	r2, [r3, #8]
}
 8012fba:	bf00      	nop
 8012fbc:	3714      	adds	r7, #20
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc4:	4770      	bx	lr
 8012fc6:	bf00      	nop
 8012fc8:	ffcfff8f 	.word	0xffcfff8f

08012fcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012fcc:	b480      	push	{r7}
 8012fce:	b087      	sub	sp, #28
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	60f8      	str	r0, [r7, #12]
 8012fd4:	60b9      	str	r1, [r7, #8]
 8012fd6:	607a      	str	r2, [r7, #4]
 8012fd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	689b      	ldr	r3, [r3, #8]
 8012fde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012fe0:	697b      	ldr	r3, [r7, #20]
 8012fe2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012fe6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012fe8:	683b      	ldr	r3, [r7, #0]
 8012fea:	021a      	lsls	r2, r3, #8
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	431a      	orrs	r2, r3
 8012ff0:	68bb      	ldr	r3, [r7, #8]
 8012ff2:	4313      	orrs	r3, r2
 8012ff4:	697a      	ldr	r2, [r7, #20]
 8012ff6:	4313      	orrs	r3, r2
 8012ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	697a      	ldr	r2, [r7, #20]
 8012ffe:	609a      	str	r2, [r3, #8]
}
 8013000:	bf00      	nop
 8013002:	371c      	adds	r7, #28
 8013004:	46bd      	mov	sp, r7
 8013006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300a:	4770      	bx	lr

0801300c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801300c:	b480      	push	{r7}
 801300e:	b087      	sub	sp, #28
 8013010:	af00      	add	r7, sp, #0
 8013012:	60f8      	str	r0, [r7, #12]
 8013014:	60b9      	str	r1, [r7, #8]
 8013016:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013018:	68bb      	ldr	r3, [r7, #8]
 801301a:	f003 031f 	and.w	r3, r3, #31
 801301e:	2201      	movs	r2, #1
 8013020:	fa02 f303 	lsl.w	r3, r2, r3
 8013024:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	6a1a      	ldr	r2, [r3, #32]
 801302a:	697b      	ldr	r3, [r7, #20]
 801302c:	43db      	mvns	r3, r3
 801302e:	401a      	ands	r2, r3
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	6a1a      	ldr	r2, [r3, #32]
 8013038:	68bb      	ldr	r3, [r7, #8]
 801303a:	f003 031f 	and.w	r3, r3, #31
 801303e:	6879      	ldr	r1, [r7, #4]
 8013040:	fa01 f303 	lsl.w	r3, r1, r3
 8013044:	431a      	orrs	r2, r3
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	621a      	str	r2, [r3, #32]
}
 801304a:	bf00      	nop
 801304c:	371c      	adds	r7, #28
 801304e:	46bd      	mov	sp, r7
 8013050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013054:	4770      	bx	lr
	...

08013058 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013058:	b480      	push	{r7}
 801305a:	b085      	sub	sp, #20
 801305c:	af00      	add	r7, sp, #0
 801305e:	6078      	str	r0, [r7, #4]
 8013060:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013068:	2b01      	cmp	r3, #1
 801306a:	d101      	bne.n	8013070 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801306c:	2302      	movs	r3, #2
 801306e:	e06d      	b.n	801314c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	2201      	movs	r2, #1
 8013074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	2202      	movs	r2, #2
 801307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	685b      	ldr	r3, [r3, #4]
 8013086:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	689b      	ldr	r3, [r3, #8]
 801308e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	4a30      	ldr	r2, [pc, #192]	; (8013158 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013096:	4293      	cmp	r3, r2
 8013098:	d004      	beq.n	80130a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	4a2f      	ldr	r2, [pc, #188]	; (801315c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80130a0:	4293      	cmp	r3, r2
 80130a2:	d108      	bne.n	80130b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80130aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80130ac:	683b      	ldr	r3, [r7, #0]
 80130ae:	685b      	ldr	r3, [r3, #4]
 80130b0:	68fa      	ldr	r2, [r7, #12]
 80130b2:	4313      	orrs	r3, r2
 80130b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80130bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80130be:	683b      	ldr	r3, [r7, #0]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	68fa      	ldr	r2, [r7, #12]
 80130c4:	4313      	orrs	r3, r2
 80130c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	68fa      	ldr	r2, [r7, #12]
 80130ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	4a20      	ldr	r2, [pc, #128]	; (8013158 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80130d6:	4293      	cmp	r3, r2
 80130d8:	d022      	beq.n	8013120 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80130e2:	d01d      	beq.n	8013120 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	4a1d      	ldr	r2, [pc, #116]	; (8013160 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80130ea:	4293      	cmp	r3, r2
 80130ec:	d018      	beq.n	8013120 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	4a1c      	ldr	r2, [pc, #112]	; (8013164 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80130f4:	4293      	cmp	r3, r2
 80130f6:	d013      	beq.n	8013120 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	4a1a      	ldr	r2, [pc, #104]	; (8013168 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80130fe:	4293      	cmp	r3, r2
 8013100:	d00e      	beq.n	8013120 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	4a15      	ldr	r2, [pc, #84]	; (801315c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013108:	4293      	cmp	r3, r2
 801310a:	d009      	beq.n	8013120 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	4a16      	ldr	r2, [pc, #88]	; (801316c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013112:	4293      	cmp	r3, r2
 8013114:	d004      	beq.n	8013120 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	4a15      	ldr	r2, [pc, #84]	; (8013170 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801311c:	4293      	cmp	r3, r2
 801311e:	d10c      	bne.n	801313a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013120:	68bb      	ldr	r3, [r7, #8]
 8013122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013126:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013128:	683b      	ldr	r3, [r7, #0]
 801312a:	689b      	ldr	r3, [r3, #8]
 801312c:	68ba      	ldr	r2, [r7, #8]
 801312e:	4313      	orrs	r3, r2
 8013130:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	68ba      	ldr	r2, [r7, #8]
 8013138:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	2201      	movs	r2, #1
 801313e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	2200      	movs	r2, #0
 8013146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801314a:	2300      	movs	r3, #0
}
 801314c:	4618      	mov	r0, r3
 801314e:	3714      	adds	r7, #20
 8013150:	46bd      	mov	sp, r7
 8013152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013156:	4770      	bx	lr
 8013158:	40010000 	.word	0x40010000
 801315c:	40010400 	.word	0x40010400
 8013160:	40000400 	.word	0x40000400
 8013164:	40000800 	.word	0x40000800
 8013168:	40000c00 	.word	0x40000c00
 801316c:	40001800 	.word	0x40001800
 8013170:	40014000 	.word	0x40014000

08013174 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013174:	b480      	push	{r7}
 8013176:	b085      	sub	sp, #20
 8013178:	af00      	add	r7, sp, #0
 801317a:	6078      	str	r0, [r7, #4]
 801317c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801317e:	2300      	movs	r3, #0
 8013180:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013188:	2b01      	cmp	r3, #1
 801318a:	d101      	bne.n	8013190 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801318c:	2302      	movs	r3, #2
 801318e:	e065      	b.n	801325c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	2201      	movs	r2, #1
 8013194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801319e:	683b      	ldr	r3, [r7, #0]
 80131a0:	68db      	ldr	r3, [r3, #12]
 80131a2:	4313      	orrs	r3, r2
 80131a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80131ac:	683b      	ldr	r3, [r7, #0]
 80131ae:	689b      	ldr	r3, [r3, #8]
 80131b0:	4313      	orrs	r3, r2
 80131b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80131ba:	683b      	ldr	r3, [r7, #0]
 80131bc:	685b      	ldr	r3, [r3, #4]
 80131be:	4313      	orrs	r3, r2
 80131c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80131c8:	683b      	ldr	r3, [r7, #0]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	4313      	orrs	r3, r2
 80131ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	691b      	ldr	r3, [r3, #16]
 80131da:	4313      	orrs	r3, r2
 80131dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80131e4:	683b      	ldr	r3, [r7, #0]
 80131e6:	695b      	ldr	r3, [r3, #20]
 80131e8:	4313      	orrs	r3, r2
 80131ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80131f2:	683b      	ldr	r3, [r7, #0]
 80131f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131f6:	4313      	orrs	r3, r2
 80131f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8013200:	683b      	ldr	r3, [r7, #0]
 8013202:	699b      	ldr	r3, [r3, #24]
 8013204:	041b      	lsls	r3, r3, #16
 8013206:	4313      	orrs	r3, r2
 8013208:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	4a16      	ldr	r2, [pc, #88]	; (8013268 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8013210:	4293      	cmp	r3, r2
 8013212:	d004      	beq.n	801321e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	4a14      	ldr	r2, [pc, #80]	; (801326c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801321a:	4293      	cmp	r3, r2
 801321c:	d115      	bne.n	801324a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8013224:	683b      	ldr	r3, [r7, #0]
 8013226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013228:	051b      	lsls	r3, r3, #20
 801322a:	4313      	orrs	r3, r2
 801322c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8013234:	683b      	ldr	r3, [r7, #0]
 8013236:	69db      	ldr	r3, [r3, #28]
 8013238:	4313      	orrs	r3, r2
 801323a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8013242:	683b      	ldr	r3, [r7, #0]
 8013244:	6a1b      	ldr	r3, [r3, #32]
 8013246:	4313      	orrs	r3, r2
 8013248:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	68fa      	ldr	r2, [r7, #12]
 8013250:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	2200      	movs	r2, #0
 8013256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801325a:	2300      	movs	r3, #0
}
 801325c:	4618      	mov	r0, r3
 801325e:	3714      	adds	r7, #20
 8013260:	46bd      	mov	sp, r7
 8013262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013266:	4770      	bx	lr
 8013268:	40010000 	.word	0x40010000
 801326c:	40010400 	.word	0x40010400

08013270 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013270:	b480      	push	{r7}
 8013272:	b083      	sub	sp, #12
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013278:	bf00      	nop
 801327a:	370c      	adds	r7, #12
 801327c:	46bd      	mov	sp, r7
 801327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013282:	4770      	bx	lr

08013284 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013284:	b480      	push	{r7}
 8013286:	b083      	sub	sp, #12
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801328c:	bf00      	nop
 801328e:	370c      	adds	r7, #12
 8013290:	46bd      	mov	sp, r7
 8013292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013296:	4770      	bx	lr

08013298 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8013298:	b480      	push	{r7}
 801329a:	b083      	sub	sp, #12
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80132a0:	bf00      	nop
 80132a2:	370c      	adds	r7, #12
 80132a4:	46bd      	mov	sp, r7
 80132a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132aa:	4770      	bx	lr

080132ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b082      	sub	sp, #8
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d101      	bne.n	80132be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80132ba:	2301      	movs	r3, #1
 80132bc:	e042      	b.n	8013344 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d106      	bne.n	80132d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2200      	movs	r2, #0
 80132cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80132d0:	6878      	ldr	r0, [r7, #4]
 80132d2:	f7f1 f911 	bl	80044f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	2224      	movs	r2, #36	; 0x24
 80132da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	681a      	ldr	r2, [r3, #0]
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	f022 0201 	bic.w	r2, r2, #1
 80132ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d002      	beq.n	80132fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80132f6:	6878      	ldr	r0, [r7, #4]
 80132f8:	f001 fbc2 	bl	8014a80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80132fc:	6878      	ldr	r0, [r7, #4]
 80132fe:	f000 fe57 	bl	8013fb0 <UART_SetConfig>
 8013302:	4603      	mov	r3, r0
 8013304:	2b01      	cmp	r3, #1
 8013306:	d101      	bne.n	801330c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8013308:	2301      	movs	r3, #1
 801330a:	e01b      	b.n	8013344 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	685a      	ldr	r2, [r3, #4]
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801331a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	689a      	ldr	r2, [r3, #8]
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801332a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	681a      	ldr	r2, [r3, #0]
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	f042 0201 	orr.w	r2, r2, #1
 801333a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801333c:	6878      	ldr	r0, [r7, #4]
 801333e:	f001 fc41 	bl	8014bc4 <UART_CheckIdleState>
 8013342:	4603      	mov	r3, r0
}
 8013344:	4618      	mov	r0, r3
 8013346:	3708      	adds	r7, #8
 8013348:	46bd      	mov	sp, r7
 801334a:	bd80      	pop	{r7, pc}

0801334c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801334c:	b580      	push	{r7, lr}
 801334e:	b08a      	sub	sp, #40	; 0x28
 8013350:	af02      	add	r7, sp, #8
 8013352:	60f8      	str	r0, [r7, #12]
 8013354:	60b9      	str	r1, [r7, #8]
 8013356:	603b      	str	r3, [r7, #0]
 8013358:	4613      	mov	r3, r2
 801335a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013362:	2b20      	cmp	r3, #32
 8013364:	d17b      	bne.n	801345e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8013366:	68bb      	ldr	r3, [r7, #8]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d002      	beq.n	8013372 <HAL_UART_Transmit+0x26>
 801336c:	88fb      	ldrh	r3, [r7, #6]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d101      	bne.n	8013376 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8013372:	2301      	movs	r3, #1
 8013374:	e074      	b.n	8013460 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	2200      	movs	r2, #0
 801337a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	2221      	movs	r2, #33	; 0x21
 8013382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013386:	f7f1 fd05 	bl	8004d94 <HAL_GetTick>
 801338a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	88fa      	ldrh	r2, [r7, #6]
 8013390:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	88fa      	ldrh	r2, [r7, #6]
 8013398:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	689b      	ldr	r3, [r3, #8]
 80133a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80133a4:	d108      	bne.n	80133b8 <HAL_UART_Transmit+0x6c>
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	691b      	ldr	r3, [r3, #16]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d104      	bne.n	80133b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80133ae:	2300      	movs	r3, #0
 80133b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80133b2:	68bb      	ldr	r3, [r7, #8]
 80133b4:	61bb      	str	r3, [r7, #24]
 80133b6:	e003      	b.n	80133c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80133b8:	68bb      	ldr	r3, [r7, #8]
 80133ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80133bc:	2300      	movs	r3, #0
 80133be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80133c0:	e030      	b.n	8013424 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80133c2:	683b      	ldr	r3, [r7, #0]
 80133c4:	9300      	str	r3, [sp, #0]
 80133c6:	697b      	ldr	r3, [r7, #20]
 80133c8:	2200      	movs	r2, #0
 80133ca:	2180      	movs	r1, #128	; 0x80
 80133cc:	68f8      	ldr	r0, [r7, #12]
 80133ce:	f001 fca3 	bl	8014d18 <UART_WaitOnFlagUntilTimeout>
 80133d2:	4603      	mov	r3, r0
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d005      	beq.n	80133e4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	2220      	movs	r2, #32
 80133dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80133e0:	2303      	movs	r3, #3
 80133e2:	e03d      	b.n	8013460 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80133e4:	69fb      	ldr	r3, [r7, #28]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d10b      	bne.n	8013402 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80133ea:	69bb      	ldr	r3, [r7, #24]
 80133ec:	881b      	ldrh	r3, [r3, #0]
 80133ee:	461a      	mov	r2, r3
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80133f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80133fa:	69bb      	ldr	r3, [r7, #24]
 80133fc:	3302      	adds	r3, #2
 80133fe:	61bb      	str	r3, [r7, #24]
 8013400:	e007      	b.n	8013412 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013402:	69fb      	ldr	r3, [r7, #28]
 8013404:	781a      	ldrb	r2, [r3, #0]
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801340c:	69fb      	ldr	r3, [r7, #28]
 801340e:	3301      	adds	r3, #1
 8013410:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013418:	b29b      	uxth	r3, r3
 801341a:	3b01      	subs	r3, #1
 801341c:	b29a      	uxth	r2, r3
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801342a:	b29b      	uxth	r3, r3
 801342c:	2b00      	cmp	r3, #0
 801342e:	d1c8      	bne.n	80133c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013430:	683b      	ldr	r3, [r7, #0]
 8013432:	9300      	str	r3, [sp, #0]
 8013434:	697b      	ldr	r3, [r7, #20]
 8013436:	2200      	movs	r2, #0
 8013438:	2140      	movs	r1, #64	; 0x40
 801343a:	68f8      	ldr	r0, [r7, #12]
 801343c:	f001 fc6c 	bl	8014d18 <UART_WaitOnFlagUntilTimeout>
 8013440:	4603      	mov	r3, r0
 8013442:	2b00      	cmp	r3, #0
 8013444:	d005      	beq.n	8013452 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	2220      	movs	r2, #32
 801344a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801344e:	2303      	movs	r3, #3
 8013450:	e006      	b.n	8013460 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	2220      	movs	r2, #32
 8013456:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801345a:	2300      	movs	r3, #0
 801345c:	e000      	b.n	8013460 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801345e:	2302      	movs	r3, #2
  }
}
 8013460:	4618      	mov	r0, r3
 8013462:	3720      	adds	r7, #32
 8013464:	46bd      	mov	sp, r7
 8013466:	bd80      	pop	{r7, pc}

08013468 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b08a      	sub	sp, #40	; 0x28
 801346c:	af02      	add	r7, sp, #8
 801346e:	60f8      	str	r0, [r7, #12]
 8013470:	60b9      	str	r1, [r7, #8]
 8013472:	603b      	str	r3, [r7, #0]
 8013474:	4613      	mov	r3, r2
 8013476:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801347e:	2b20      	cmp	r3, #32
 8013480:	f040 80b5 	bne.w	80135ee <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8013484:	68bb      	ldr	r3, [r7, #8]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d002      	beq.n	8013490 <HAL_UART_Receive+0x28>
 801348a:	88fb      	ldrh	r3, [r7, #6]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d101      	bne.n	8013494 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8013490:	2301      	movs	r3, #1
 8013492:	e0ad      	b.n	80135f0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	2200      	movs	r2, #0
 8013498:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	2222      	movs	r2, #34	; 0x22
 80134a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	2200      	movs	r2, #0
 80134a8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80134aa:	f7f1 fc73 	bl	8004d94 <HAL_GetTick>
 80134ae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	88fa      	ldrh	r2, [r7, #6]
 80134b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	88fa      	ldrh	r2, [r7, #6]
 80134bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	689b      	ldr	r3, [r3, #8]
 80134c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80134c8:	d10e      	bne.n	80134e8 <HAL_UART_Receive+0x80>
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	691b      	ldr	r3, [r3, #16]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d105      	bne.n	80134de <HAL_UART_Receive+0x76>
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80134d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80134dc:	e02d      	b.n	801353a <HAL_UART_Receive+0xd2>
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	22ff      	movs	r2, #255	; 0xff
 80134e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80134e6:	e028      	b.n	801353a <HAL_UART_Receive+0xd2>
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	689b      	ldr	r3, [r3, #8]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d10d      	bne.n	801350c <HAL_UART_Receive+0xa4>
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	691b      	ldr	r3, [r3, #16]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d104      	bne.n	8013502 <HAL_UART_Receive+0x9a>
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	22ff      	movs	r2, #255	; 0xff
 80134fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013500:	e01b      	b.n	801353a <HAL_UART_Receive+0xd2>
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	227f      	movs	r2, #127	; 0x7f
 8013506:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801350a:	e016      	b.n	801353a <HAL_UART_Receive+0xd2>
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	689b      	ldr	r3, [r3, #8]
 8013510:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013514:	d10d      	bne.n	8013532 <HAL_UART_Receive+0xca>
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	691b      	ldr	r3, [r3, #16]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d104      	bne.n	8013528 <HAL_UART_Receive+0xc0>
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	227f      	movs	r2, #127	; 0x7f
 8013522:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013526:	e008      	b.n	801353a <HAL_UART_Receive+0xd2>
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	223f      	movs	r2, #63	; 0x3f
 801352c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013530:	e003      	b.n	801353a <HAL_UART_Receive+0xd2>
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	2200      	movs	r2, #0
 8013536:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013540:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	689b      	ldr	r3, [r3, #8]
 8013546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801354a:	d108      	bne.n	801355e <HAL_UART_Receive+0xf6>
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	691b      	ldr	r3, [r3, #16]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d104      	bne.n	801355e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8013554:	2300      	movs	r3, #0
 8013556:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8013558:	68bb      	ldr	r3, [r7, #8]
 801355a:	61bb      	str	r3, [r7, #24]
 801355c:	e003      	b.n	8013566 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 801355e:	68bb      	ldr	r3, [r7, #8]
 8013560:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013562:	2300      	movs	r3, #0
 8013564:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8013566:	e036      	b.n	80135d6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	9300      	str	r3, [sp, #0]
 801356c:	697b      	ldr	r3, [r7, #20]
 801356e:	2200      	movs	r2, #0
 8013570:	2120      	movs	r1, #32
 8013572:	68f8      	ldr	r0, [r7, #12]
 8013574:	f001 fbd0 	bl	8014d18 <UART_WaitOnFlagUntilTimeout>
 8013578:	4603      	mov	r3, r0
 801357a:	2b00      	cmp	r3, #0
 801357c:	d005      	beq.n	801358a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	2220      	movs	r2, #32
 8013582:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8013586:	2303      	movs	r3, #3
 8013588:	e032      	b.n	80135f0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 801358a:	69fb      	ldr	r3, [r7, #28]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d10c      	bne.n	80135aa <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013596:	b29a      	uxth	r2, r3
 8013598:	8a7b      	ldrh	r3, [r7, #18]
 801359a:	4013      	ands	r3, r2
 801359c:	b29a      	uxth	r2, r3
 801359e:	69bb      	ldr	r3, [r7, #24]
 80135a0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80135a2:	69bb      	ldr	r3, [r7, #24]
 80135a4:	3302      	adds	r3, #2
 80135a6:	61bb      	str	r3, [r7, #24]
 80135a8:	e00c      	b.n	80135c4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135b0:	b2da      	uxtb	r2, r3
 80135b2:	8a7b      	ldrh	r3, [r7, #18]
 80135b4:	b2db      	uxtb	r3, r3
 80135b6:	4013      	ands	r3, r2
 80135b8:	b2da      	uxtb	r2, r3
 80135ba:	69fb      	ldr	r3, [r7, #28]
 80135bc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80135be:	69fb      	ldr	r3, [r7, #28]
 80135c0:	3301      	adds	r3, #1
 80135c2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80135ca:	b29b      	uxth	r3, r3
 80135cc:	3b01      	subs	r3, #1
 80135ce:	b29a      	uxth	r2, r3
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80135dc:	b29b      	uxth	r3, r3
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d1c2      	bne.n	8013568 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	2220      	movs	r2, #32
 80135e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80135ea:	2300      	movs	r3, #0
 80135ec:	e000      	b.n	80135f0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80135ee:	2302      	movs	r3, #2
  }
}
 80135f0:	4618      	mov	r0, r3
 80135f2:	3720      	adds	r7, #32
 80135f4:	46bd      	mov	sp, r7
 80135f6:	bd80      	pop	{r7, pc}

080135f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b08a      	sub	sp, #40	; 0x28
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	60f8      	str	r0, [r7, #12]
 8013600:	60b9      	str	r1, [r7, #8]
 8013602:	4613      	mov	r3, r2
 8013604:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801360c:	2b20      	cmp	r3, #32
 801360e:	d137      	bne.n	8013680 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8013610:	68bb      	ldr	r3, [r7, #8]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d002      	beq.n	801361c <HAL_UART_Receive_IT+0x24>
 8013616:	88fb      	ldrh	r3, [r7, #6]
 8013618:	2b00      	cmp	r3, #0
 801361a:	d101      	bne.n	8013620 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801361c:	2301      	movs	r3, #1
 801361e:	e030      	b.n	8013682 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	2200      	movs	r2, #0
 8013624:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	4a18      	ldr	r2, [pc, #96]	; (801368c <HAL_UART_Receive_IT+0x94>)
 801362c:	4293      	cmp	r3, r2
 801362e:	d01f      	beq.n	8013670 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	685b      	ldr	r3, [r3, #4]
 8013636:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801363a:	2b00      	cmp	r3, #0
 801363c:	d018      	beq.n	8013670 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013644:	697b      	ldr	r3, [r7, #20]
 8013646:	e853 3f00 	ldrex	r3, [r3]
 801364a:	613b      	str	r3, [r7, #16]
   return(result);
 801364c:	693b      	ldr	r3, [r7, #16]
 801364e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013652:	627b      	str	r3, [r7, #36]	; 0x24
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	461a      	mov	r2, r3
 801365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801365c:	623b      	str	r3, [r7, #32]
 801365e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013660:	69f9      	ldr	r1, [r7, #28]
 8013662:	6a3a      	ldr	r2, [r7, #32]
 8013664:	e841 2300 	strex	r3, r2, [r1]
 8013668:	61bb      	str	r3, [r7, #24]
   return(result);
 801366a:	69bb      	ldr	r3, [r7, #24]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d1e6      	bne.n	801363e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8013670:	88fb      	ldrh	r3, [r7, #6]
 8013672:	461a      	mov	r2, r3
 8013674:	68b9      	ldr	r1, [r7, #8]
 8013676:	68f8      	ldr	r0, [r7, #12]
 8013678:	f001 fbbc 	bl	8014df4 <UART_Start_Receive_IT>
 801367c:	4603      	mov	r3, r0
 801367e:	e000      	b.n	8013682 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8013680:	2302      	movs	r3, #2
  }
}
 8013682:	4618      	mov	r0, r3
 8013684:	3728      	adds	r7, #40	; 0x28
 8013686:	46bd      	mov	sp, r7
 8013688:	bd80      	pop	{r7, pc}
 801368a:	bf00      	nop
 801368c:	58000c00 	.word	0x58000c00

08013690 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8013690:	b580      	push	{r7, lr}
 8013692:	b09a      	sub	sp, #104	; 0x68
 8013694:	af00      	add	r7, sp, #0
 8013696:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801369e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80136a0:	e853 3f00 	ldrex	r3, [r3]
 80136a4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80136a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80136a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80136ac:	667b      	str	r3, [r7, #100]	; 0x64
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	461a      	mov	r2, r3
 80136b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80136b6:	657b      	str	r3, [r7, #84]	; 0x54
 80136b8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80136bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80136be:	e841 2300 	strex	r3, r2, [r1]
 80136c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80136c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d1e6      	bne.n	8013698 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	3308      	adds	r3, #8
 80136d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136d4:	e853 3f00 	ldrex	r3, [r3]
 80136d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80136da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136dc:	4b46      	ldr	r3, [pc, #280]	; (80137f8 <HAL_UART_AbortReceive+0x168>)
 80136de:	4013      	ands	r3, r2
 80136e0:	663b      	str	r3, [r7, #96]	; 0x60
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	3308      	adds	r3, #8
 80136e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80136ea:	643a      	str	r2, [r7, #64]	; 0x40
 80136ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80136f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80136f2:	e841 2300 	strex	r3, r2, [r1]
 80136f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80136f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d1e5      	bne.n	80136ca <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013702:	2b01      	cmp	r3, #1
 8013704:	d118      	bne.n	8013738 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801370c:	6a3b      	ldr	r3, [r7, #32]
 801370e:	e853 3f00 	ldrex	r3, [r3]
 8013712:	61fb      	str	r3, [r7, #28]
   return(result);
 8013714:	69fb      	ldr	r3, [r7, #28]
 8013716:	f023 0310 	bic.w	r3, r3, #16
 801371a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	461a      	mov	r2, r3
 8013722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013724:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013726:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801372a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801372c:	e841 2300 	strex	r3, r2, [r1]
 8013730:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013734:	2b00      	cmp	r3, #0
 8013736:	d1e6      	bne.n	8013706 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	689b      	ldr	r3, [r3, #8]
 801373e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013742:	2b40      	cmp	r3, #64	; 0x40
 8013744:	d13b      	bne.n	80137be <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	3308      	adds	r3, #8
 801374c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	e853 3f00 	ldrex	r3, [r3]
 8013754:	60bb      	str	r3, [r7, #8]
   return(result);
 8013756:	68bb      	ldr	r3, [r7, #8]
 8013758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801375c:	65bb      	str	r3, [r7, #88]	; 0x58
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	3308      	adds	r3, #8
 8013764:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013766:	61ba      	str	r2, [r7, #24]
 8013768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801376a:	6979      	ldr	r1, [r7, #20]
 801376c:	69ba      	ldr	r2, [r7, #24]
 801376e:	e841 2300 	strex	r3, r2, [r1]
 8013772:	613b      	str	r3, [r7, #16]
   return(result);
 8013774:	693b      	ldr	r3, [r7, #16]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d1e5      	bne.n	8013746 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013780:	2b00      	cmp	r3, #0
 8013782:	d01c      	beq.n	80137be <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801378a:	2200      	movs	r2, #0
 801378c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013794:	4618      	mov	r0, r3
 8013796:	f7f4 fa63 	bl	8007c60 <HAL_DMA_Abort>
 801379a:	4603      	mov	r3, r0
 801379c:	2b00      	cmp	r3, #0
 801379e:	d00e      	beq.n	80137be <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80137a6:	4618      	mov	r0, r3
 80137a8:	f7f5 fef6 	bl	8009598 <HAL_DMA_GetError>
 80137ac:	4603      	mov	r3, r0
 80137ae:	2b20      	cmp	r3, #32
 80137b0:	d105      	bne.n	80137be <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	2210      	movs	r2, #16
 80137b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80137ba:	2303      	movs	r3, #3
 80137bc:	e017      	b.n	80137ee <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	2200      	movs	r2, #0
 80137c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	220f      	movs	r2, #15
 80137cc:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	699a      	ldr	r2, [r3, #24]
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	f042 0208 	orr.w	r2, r2, #8
 80137dc:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	2220      	movs	r2, #32
 80137e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	2200      	movs	r2, #0
 80137ea:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80137ec:	2300      	movs	r3, #0
}
 80137ee:	4618      	mov	r0, r3
 80137f0:	3768      	adds	r7, #104	; 0x68
 80137f2:	46bd      	mov	sp, r7
 80137f4:	bd80      	pop	{r7, pc}
 80137f6:	bf00      	nop
 80137f8:	effffffe 	.word	0xeffffffe

080137fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b0ba      	sub	sp, #232	; 0xe8
 8013800:	af00      	add	r7, sp, #0
 8013802:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	69db      	ldr	r3, [r3, #28]
 801380a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	689b      	ldr	r3, [r3, #8]
 801381e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8013822:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8013826:	f640 030f 	movw	r3, #2063	; 0x80f
 801382a:	4013      	ands	r3, r2
 801382c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8013830:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013834:	2b00      	cmp	r3, #0
 8013836:	d11b      	bne.n	8013870 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801383c:	f003 0320 	and.w	r3, r3, #32
 8013840:	2b00      	cmp	r3, #0
 8013842:	d015      	beq.n	8013870 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8013844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013848:	f003 0320 	and.w	r3, r3, #32
 801384c:	2b00      	cmp	r3, #0
 801384e:	d105      	bne.n	801385c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013858:	2b00      	cmp	r3, #0
 801385a:	d009      	beq.n	8013870 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013860:	2b00      	cmp	r3, #0
 8013862:	f000 8377 	beq.w	8013f54 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801386a:	6878      	ldr	r0, [r7, #4]
 801386c:	4798      	blx	r3
      }
      return;
 801386e:	e371      	b.n	8013f54 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8013870:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013874:	2b00      	cmp	r3, #0
 8013876:	f000 8123 	beq.w	8013ac0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801387a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801387e:	4b8d      	ldr	r3, [pc, #564]	; (8013ab4 <HAL_UART_IRQHandler+0x2b8>)
 8013880:	4013      	ands	r3, r2
 8013882:	2b00      	cmp	r3, #0
 8013884:	d106      	bne.n	8013894 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8013886:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801388a:	4b8b      	ldr	r3, [pc, #556]	; (8013ab8 <HAL_UART_IRQHandler+0x2bc>)
 801388c:	4013      	ands	r3, r2
 801388e:	2b00      	cmp	r3, #0
 8013890:	f000 8116 	beq.w	8013ac0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013898:	f003 0301 	and.w	r3, r3, #1
 801389c:	2b00      	cmp	r3, #0
 801389e:	d011      	beq.n	80138c4 <HAL_UART_IRQHandler+0xc8>
 80138a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80138a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d00b      	beq.n	80138c4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	2201      	movs	r2, #1
 80138b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80138ba:	f043 0201 	orr.w	r2, r3, #1
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80138c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80138c8:	f003 0302 	and.w	r3, r3, #2
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d011      	beq.n	80138f4 <HAL_UART_IRQHandler+0xf8>
 80138d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80138d4:	f003 0301 	and.w	r3, r3, #1
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d00b      	beq.n	80138f4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	2202      	movs	r2, #2
 80138e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80138ea:	f043 0204 	orr.w	r2, r3, #4
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80138f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80138f8:	f003 0304 	and.w	r3, r3, #4
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d011      	beq.n	8013924 <HAL_UART_IRQHandler+0x128>
 8013900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013904:	f003 0301 	and.w	r3, r3, #1
 8013908:	2b00      	cmp	r3, #0
 801390a:	d00b      	beq.n	8013924 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	2204      	movs	r2, #4
 8013912:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801391a:	f043 0202 	orr.w	r2, r3, #2
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8013924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013928:	f003 0308 	and.w	r3, r3, #8
 801392c:	2b00      	cmp	r3, #0
 801392e:	d017      	beq.n	8013960 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013934:	f003 0320 	and.w	r3, r3, #32
 8013938:	2b00      	cmp	r3, #0
 801393a:	d105      	bne.n	8013948 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801393c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8013940:	4b5c      	ldr	r3, [pc, #368]	; (8013ab4 <HAL_UART_IRQHandler+0x2b8>)
 8013942:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013944:	2b00      	cmp	r3, #0
 8013946:	d00b      	beq.n	8013960 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	2208      	movs	r2, #8
 801394e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013956:	f043 0208 	orr.w	r2, r3, #8
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8013960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013968:	2b00      	cmp	r3, #0
 801396a:	d012      	beq.n	8013992 <HAL_UART_IRQHandler+0x196>
 801396c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013970:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013974:	2b00      	cmp	r3, #0
 8013976:	d00c      	beq.n	8013992 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013980:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013988:	f043 0220 	orr.w	r2, r3, #32
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013998:	2b00      	cmp	r3, #0
 801399a:	f000 82dd 	beq.w	8013f58 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801399e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80139a2:	f003 0320 	and.w	r3, r3, #32
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d013      	beq.n	80139d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80139aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80139ae:	f003 0320 	and.w	r3, r3, #32
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d105      	bne.n	80139c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80139b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80139ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d007      	beq.n	80139d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d003      	beq.n	80139d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80139ce:	6878      	ldr	r0, [r7, #4]
 80139d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80139d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	689b      	ldr	r3, [r3, #8]
 80139e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80139e6:	2b40      	cmp	r3, #64	; 0x40
 80139e8:	d005      	beq.n	80139f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80139ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80139ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d054      	beq.n	8013aa0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80139f6:	6878      	ldr	r0, [r7, #4]
 80139f8:	f001 fb1e 	bl	8015038 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	689b      	ldr	r3, [r3, #8]
 8013a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013a06:	2b40      	cmp	r3, #64	; 0x40
 8013a08:	d146      	bne.n	8013a98 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	3308      	adds	r3, #8
 8013a10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013a18:	e853 3f00 	ldrex	r3, [r3]
 8013a1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8013a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013a28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	3308      	adds	r3, #8
 8013a32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8013a36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8013a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8013a42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013a46:	e841 2300 	strex	r3, r2, [r1]
 8013a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8013a4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d1d9      	bne.n	8013a0a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d017      	beq.n	8013a90 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013a66:	4a15      	ldr	r2, [pc, #84]	; (8013abc <HAL_UART_IRQHandler+0x2c0>)
 8013a68:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013a70:	4618      	mov	r0, r3
 8013a72:	f7f4 fc13 	bl	800829c <HAL_DMA_Abort_IT>
 8013a76:	4603      	mov	r3, r0
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d019      	beq.n	8013ab0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013a84:	687a      	ldr	r2, [r7, #4]
 8013a86:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8013a8a:	4610      	mov	r0, r2
 8013a8c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013a8e:	e00f      	b.n	8013ab0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8013a90:	6878      	ldr	r0, [r7, #4]
 8013a92:	f000 fa77 	bl	8013f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013a96:	e00b      	b.n	8013ab0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013a98:	6878      	ldr	r0, [r7, #4]
 8013a9a:	f000 fa73 	bl	8013f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013a9e:	e007      	b.n	8013ab0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8013aa0:	6878      	ldr	r0, [r7, #4]
 8013aa2:	f000 fa6f 	bl	8013f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8013aae:	e253      	b.n	8013f58 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013ab0:	bf00      	nop
    return;
 8013ab2:	e251      	b.n	8013f58 <HAL_UART_IRQHandler+0x75c>
 8013ab4:	10000001 	.word	0x10000001
 8013ab8:	04000120 	.word	0x04000120
 8013abc:	08015105 	.word	0x08015105

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ac4:	2b01      	cmp	r3, #1
 8013ac6:	f040 81e7 	bne.w	8013e98 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8013aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013ace:	f003 0310 	and.w	r3, r3, #16
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	f000 81e0 	beq.w	8013e98 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8013ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013adc:	f003 0310 	and.w	r3, r3, #16
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	f000 81d9 	beq.w	8013e98 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	2210      	movs	r2, #16
 8013aec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	689b      	ldr	r3, [r3, #8]
 8013af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013af8:	2b40      	cmp	r3, #64	; 0x40
 8013afa:	f040 8151 	bne.w	8013da0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	4a96      	ldr	r2, [pc, #600]	; (8013d60 <HAL_UART_IRQHandler+0x564>)
 8013b08:	4293      	cmp	r3, r2
 8013b0a:	d068      	beq.n	8013bde <HAL_UART_IRQHandler+0x3e2>
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	4a93      	ldr	r2, [pc, #588]	; (8013d64 <HAL_UART_IRQHandler+0x568>)
 8013b16:	4293      	cmp	r3, r2
 8013b18:	d061      	beq.n	8013bde <HAL_UART_IRQHandler+0x3e2>
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	4a91      	ldr	r2, [pc, #580]	; (8013d68 <HAL_UART_IRQHandler+0x56c>)
 8013b24:	4293      	cmp	r3, r2
 8013b26:	d05a      	beq.n	8013bde <HAL_UART_IRQHandler+0x3e2>
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	4a8e      	ldr	r2, [pc, #568]	; (8013d6c <HAL_UART_IRQHandler+0x570>)
 8013b32:	4293      	cmp	r3, r2
 8013b34:	d053      	beq.n	8013bde <HAL_UART_IRQHandler+0x3e2>
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	4a8c      	ldr	r2, [pc, #560]	; (8013d70 <HAL_UART_IRQHandler+0x574>)
 8013b40:	4293      	cmp	r3, r2
 8013b42:	d04c      	beq.n	8013bde <HAL_UART_IRQHandler+0x3e2>
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	4a89      	ldr	r2, [pc, #548]	; (8013d74 <HAL_UART_IRQHandler+0x578>)
 8013b4e:	4293      	cmp	r3, r2
 8013b50:	d045      	beq.n	8013bde <HAL_UART_IRQHandler+0x3e2>
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	4a87      	ldr	r2, [pc, #540]	; (8013d78 <HAL_UART_IRQHandler+0x57c>)
 8013b5c:	4293      	cmp	r3, r2
 8013b5e:	d03e      	beq.n	8013bde <HAL_UART_IRQHandler+0x3e2>
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	4a84      	ldr	r2, [pc, #528]	; (8013d7c <HAL_UART_IRQHandler+0x580>)
 8013b6a:	4293      	cmp	r3, r2
 8013b6c:	d037      	beq.n	8013bde <HAL_UART_IRQHandler+0x3e2>
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	4a82      	ldr	r2, [pc, #520]	; (8013d80 <HAL_UART_IRQHandler+0x584>)
 8013b78:	4293      	cmp	r3, r2
 8013b7a:	d030      	beq.n	8013bde <HAL_UART_IRQHandler+0x3e2>
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	4a7f      	ldr	r2, [pc, #508]	; (8013d84 <HAL_UART_IRQHandler+0x588>)
 8013b86:	4293      	cmp	r3, r2
 8013b88:	d029      	beq.n	8013bde <HAL_UART_IRQHandler+0x3e2>
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	4a7d      	ldr	r2, [pc, #500]	; (8013d88 <HAL_UART_IRQHandler+0x58c>)
 8013b94:	4293      	cmp	r3, r2
 8013b96:	d022      	beq.n	8013bde <HAL_UART_IRQHandler+0x3e2>
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	4a7a      	ldr	r2, [pc, #488]	; (8013d8c <HAL_UART_IRQHandler+0x590>)
 8013ba2:	4293      	cmp	r3, r2
 8013ba4:	d01b      	beq.n	8013bde <HAL_UART_IRQHandler+0x3e2>
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	4a78      	ldr	r2, [pc, #480]	; (8013d90 <HAL_UART_IRQHandler+0x594>)
 8013bb0:	4293      	cmp	r3, r2
 8013bb2:	d014      	beq.n	8013bde <HAL_UART_IRQHandler+0x3e2>
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	4a75      	ldr	r2, [pc, #468]	; (8013d94 <HAL_UART_IRQHandler+0x598>)
 8013bbe:	4293      	cmp	r3, r2
 8013bc0:	d00d      	beq.n	8013bde <HAL_UART_IRQHandler+0x3e2>
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	4a73      	ldr	r2, [pc, #460]	; (8013d98 <HAL_UART_IRQHandler+0x59c>)
 8013bcc:	4293      	cmp	r3, r2
 8013bce:	d006      	beq.n	8013bde <HAL_UART_IRQHandler+0x3e2>
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	4a70      	ldr	r2, [pc, #448]	; (8013d9c <HAL_UART_IRQHandler+0x5a0>)
 8013bda:	4293      	cmp	r3, r2
 8013bdc:	d106      	bne.n	8013bec <HAL_UART_IRQHandler+0x3f0>
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	685b      	ldr	r3, [r3, #4]
 8013be8:	b29b      	uxth	r3, r3
 8013bea:	e005      	b.n	8013bf8 <HAL_UART_IRQHandler+0x3fc>
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	685b      	ldr	r3, [r3, #4]
 8013bf6:	b29b      	uxth	r3, r3
 8013bf8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8013bfc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	f000 81ab 	beq.w	8013f5c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013c0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8013c10:	429a      	cmp	r2, r3
 8013c12:	f080 81a3 	bcs.w	8013f5c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8013c1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013c26:	69db      	ldr	r3, [r3, #28]
 8013c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013c2c:	f000 8087 	beq.w	8013d3e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013c3c:	e853 3f00 	ldrex	r3, [r3]
 8013c40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8013c44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013c4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	461a      	mov	r2, r3
 8013c56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013c5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8013c5e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8013c66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8013c6a:	e841 2300 	strex	r3, r2, [r1]
 8013c6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8013c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d1da      	bne.n	8013c30 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	3308      	adds	r3, #8
 8013c80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013c84:	e853 3f00 	ldrex	r3, [r3]
 8013c88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8013c8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013c8c:	f023 0301 	bic.w	r3, r3, #1
 8013c90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	3308      	adds	r3, #8
 8013c9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8013c9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8013ca2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ca4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8013ca6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013caa:	e841 2300 	strex	r3, r2, [r1]
 8013cae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8013cb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d1e1      	bne.n	8013c7a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	3308      	adds	r3, #8
 8013cbc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013cc0:	e853 3f00 	ldrex	r3, [r3]
 8013cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8013cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013ccc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	3308      	adds	r3, #8
 8013cd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8013cda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8013cdc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013cde:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8013ce0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013ce2:	e841 2300 	strex	r3, r2, [r1]
 8013ce6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8013ce8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d1e3      	bne.n	8013cb6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	2220      	movs	r2, #32
 8013cf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d04:	e853 3f00 	ldrex	r3, [r3]
 8013d08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8013d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d0c:	f023 0310 	bic.w	r3, r3, #16
 8013d10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	461a      	mov	r2, r3
 8013d1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013d1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8013d20:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013d24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013d26:	e841 2300 	strex	r3, r2, [r1]
 8013d2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8013d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d1e4      	bne.n	8013cfc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013d38:	4618      	mov	r0, r3
 8013d3a:	f7f3 ff91 	bl	8007c60 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	2202      	movs	r2, #2
 8013d42:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013d50:	b29b      	uxth	r3, r3
 8013d52:	1ad3      	subs	r3, r2, r3
 8013d54:	b29b      	uxth	r3, r3
 8013d56:	4619      	mov	r1, r3
 8013d58:	6878      	ldr	r0, [r7, #4]
 8013d5a:	f000 f91d 	bl	8013f98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013d5e:	e0fd      	b.n	8013f5c <HAL_UART_IRQHandler+0x760>
 8013d60:	40020010 	.word	0x40020010
 8013d64:	40020028 	.word	0x40020028
 8013d68:	40020040 	.word	0x40020040
 8013d6c:	40020058 	.word	0x40020058
 8013d70:	40020070 	.word	0x40020070
 8013d74:	40020088 	.word	0x40020088
 8013d78:	400200a0 	.word	0x400200a0
 8013d7c:	400200b8 	.word	0x400200b8
 8013d80:	40020410 	.word	0x40020410
 8013d84:	40020428 	.word	0x40020428
 8013d88:	40020440 	.word	0x40020440
 8013d8c:	40020458 	.word	0x40020458
 8013d90:	40020470 	.word	0x40020470
 8013d94:	40020488 	.word	0x40020488
 8013d98:	400204a0 	.word	0x400204a0
 8013d9c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013dac:	b29b      	uxth	r3, r3
 8013dae:	1ad3      	subs	r3, r2, r3
 8013db0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013dba:	b29b      	uxth	r3, r3
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	f000 80cf 	beq.w	8013f60 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8013dc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	f000 80ca 	beq.w	8013f60 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dd4:	e853 3f00 	ldrex	r3, [r3]
 8013dd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ddc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013de0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	461a      	mov	r2, r3
 8013dea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013dee:	647b      	str	r3, [r7, #68]	; 0x44
 8013df0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013df2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013df4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013df6:	e841 2300 	strex	r3, r2, [r1]
 8013dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d1e4      	bne.n	8013dcc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	3308      	adds	r3, #8
 8013e08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e0c:	e853 3f00 	ldrex	r3, [r3]
 8013e10:	623b      	str	r3, [r7, #32]
   return(result);
 8013e12:	6a3a      	ldr	r2, [r7, #32]
 8013e14:	4b55      	ldr	r3, [pc, #340]	; (8013f6c <HAL_UART_IRQHandler+0x770>)
 8013e16:	4013      	ands	r3, r2
 8013e18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	3308      	adds	r3, #8
 8013e22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8013e26:	633a      	str	r2, [r7, #48]	; 0x30
 8013e28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e2e:	e841 2300 	strex	r3, r2, [r1]
 8013e32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d1e3      	bne.n	8013e02 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	2220      	movs	r2, #32
 8013e3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	2200      	movs	r2, #0
 8013e46:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	2200      	movs	r2, #0
 8013e4c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e54:	693b      	ldr	r3, [r7, #16]
 8013e56:	e853 3f00 	ldrex	r3, [r3]
 8013e5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	f023 0310 	bic.w	r3, r3, #16
 8013e62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	461a      	mov	r2, r3
 8013e6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013e70:	61fb      	str	r3, [r7, #28]
 8013e72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e74:	69b9      	ldr	r1, [r7, #24]
 8013e76:	69fa      	ldr	r2, [r7, #28]
 8013e78:	e841 2300 	strex	r3, r2, [r1]
 8013e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8013e7e:	697b      	ldr	r3, [r7, #20]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d1e4      	bne.n	8013e4e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2202      	movs	r2, #2
 8013e88:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8013e8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8013e8e:	4619      	mov	r1, r3
 8013e90:	6878      	ldr	r0, [r7, #4]
 8013e92:	f000 f881 	bl	8013f98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013e96:	e063      	b.n	8013f60 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8013e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013e9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d00e      	beq.n	8013ec2 <HAL_UART_IRQHandler+0x6c6>
 8013ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013ea8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d008      	beq.n	8013ec2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8013eb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8013eba:	6878      	ldr	r0, [r7, #4]
 8013ebc:	f001 fe80 	bl	8015bc0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013ec0:	e051      	b.n	8013f66 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8013ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d014      	beq.n	8013ef8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8013ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d105      	bne.n	8013ee6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8013eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013ede:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d008      	beq.n	8013ef8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d03a      	beq.n	8013f64 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013ef2:	6878      	ldr	r0, [r7, #4]
 8013ef4:	4798      	blx	r3
    }
    return;
 8013ef6:	e035      	b.n	8013f64 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8013ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d009      	beq.n	8013f18 <HAL_UART_IRQHandler+0x71c>
 8013f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d003      	beq.n	8013f18 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8013f10:	6878      	ldr	r0, [r7, #4]
 8013f12:	f001 f90d 	bl	8015130 <UART_EndTransmit_IT>
    return;
 8013f16:	e026      	b.n	8013f66 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8013f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013f1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d009      	beq.n	8013f38 <HAL_UART_IRQHandler+0x73c>
 8013f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013f28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d003      	beq.n	8013f38 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8013f30:	6878      	ldr	r0, [r7, #4]
 8013f32:	f001 fe59 	bl	8015be8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013f36:	e016      	b.n	8013f66 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8013f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013f3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d010      	beq.n	8013f66 <HAL_UART_IRQHandler+0x76a>
 8013f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	da0c      	bge.n	8013f66 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8013f4c:	6878      	ldr	r0, [r7, #4]
 8013f4e:	f001 fe41 	bl	8015bd4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013f52:	e008      	b.n	8013f66 <HAL_UART_IRQHandler+0x76a>
      return;
 8013f54:	bf00      	nop
 8013f56:	e006      	b.n	8013f66 <HAL_UART_IRQHandler+0x76a>
    return;
 8013f58:	bf00      	nop
 8013f5a:	e004      	b.n	8013f66 <HAL_UART_IRQHandler+0x76a>
      return;
 8013f5c:	bf00      	nop
 8013f5e:	e002      	b.n	8013f66 <HAL_UART_IRQHandler+0x76a>
      return;
 8013f60:	bf00      	nop
 8013f62:	e000      	b.n	8013f66 <HAL_UART_IRQHandler+0x76a>
    return;
 8013f64:	bf00      	nop
  }
}
 8013f66:	37e8      	adds	r7, #232	; 0xe8
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	bd80      	pop	{r7, pc}
 8013f6c:	effffffe 	.word	0xeffffffe

08013f70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8013f70:	b480      	push	{r7}
 8013f72:	b083      	sub	sp, #12
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8013f78:	bf00      	nop
 8013f7a:	370c      	adds	r7, #12
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f82:	4770      	bx	lr

08013f84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8013f84:	b480      	push	{r7}
 8013f86:	b083      	sub	sp, #12
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8013f8c:	bf00      	nop
 8013f8e:	370c      	adds	r7, #12
 8013f90:	46bd      	mov	sp, r7
 8013f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f96:	4770      	bx	lr

08013f98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013f98:	b480      	push	{r7}
 8013f9a:	b083      	sub	sp, #12
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
 8013fa0:	460b      	mov	r3, r1
 8013fa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8013fa4:	bf00      	nop
 8013fa6:	370c      	adds	r7, #12
 8013fa8:	46bd      	mov	sp, r7
 8013faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fae:	4770      	bx	lr

08013fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013fb4:	b092      	sub	sp, #72	; 0x48
 8013fb6:	af00      	add	r7, sp, #0
 8013fb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8013fba:	2300      	movs	r3, #0
 8013fbc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013fc0:	697b      	ldr	r3, [r7, #20]
 8013fc2:	689a      	ldr	r2, [r3, #8]
 8013fc4:	697b      	ldr	r3, [r7, #20]
 8013fc6:	691b      	ldr	r3, [r3, #16]
 8013fc8:	431a      	orrs	r2, r3
 8013fca:	697b      	ldr	r3, [r7, #20]
 8013fcc:	695b      	ldr	r3, [r3, #20]
 8013fce:	431a      	orrs	r2, r3
 8013fd0:	697b      	ldr	r3, [r7, #20]
 8013fd2:	69db      	ldr	r3, [r3, #28]
 8013fd4:	4313      	orrs	r3, r2
 8013fd6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013fd8:	697b      	ldr	r3, [r7, #20]
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	681a      	ldr	r2, [r3, #0]
 8013fde:	4bbe      	ldr	r3, [pc, #760]	; (80142d8 <UART_SetConfig+0x328>)
 8013fe0:	4013      	ands	r3, r2
 8013fe2:	697a      	ldr	r2, [r7, #20]
 8013fe4:	6812      	ldr	r2, [r2, #0]
 8013fe6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013fe8:	430b      	orrs	r3, r1
 8013fea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013fec:	697b      	ldr	r3, [r7, #20]
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	685b      	ldr	r3, [r3, #4]
 8013ff2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8013ff6:	697b      	ldr	r3, [r7, #20]
 8013ff8:	68da      	ldr	r2, [r3, #12]
 8013ffa:	697b      	ldr	r3, [r7, #20]
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	430a      	orrs	r2, r1
 8014000:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014002:	697b      	ldr	r3, [r7, #20]
 8014004:	699b      	ldr	r3, [r3, #24]
 8014006:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014008:	697b      	ldr	r3, [r7, #20]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	4ab3      	ldr	r2, [pc, #716]	; (80142dc <UART_SetConfig+0x32c>)
 801400e:	4293      	cmp	r3, r2
 8014010:	d004      	beq.n	801401c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014012:	697b      	ldr	r3, [r7, #20]
 8014014:	6a1b      	ldr	r3, [r3, #32]
 8014016:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014018:	4313      	orrs	r3, r2
 801401a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801401c:	697b      	ldr	r3, [r7, #20]
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	689a      	ldr	r2, [r3, #8]
 8014022:	4baf      	ldr	r3, [pc, #700]	; (80142e0 <UART_SetConfig+0x330>)
 8014024:	4013      	ands	r3, r2
 8014026:	697a      	ldr	r2, [r7, #20]
 8014028:	6812      	ldr	r2, [r2, #0]
 801402a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801402c:	430b      	orrs	r3, r1
 801402e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8014030:	697b      	ldr	r3, [r7, #20]
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014036:	f023 010f 	bic.w	r1, r3, #15
 801403a:	697b      	ldr	r3, [r7, #20]
 801403c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801403e:	697b      	ldr	r3, [r7, #20]
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	430a      	orrs	r2, r1
 8014044:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014046:	697b      	ldr	r3, [r7, #20]
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	4aa6      	ldr	r2, [pc, #664]	; (80142e4 <UART_SetConfig+0x334>)
 801404c:	4293      	cmp	r3, r2
 801404e:	d177      	bne.n	8014140 <UART_SetConfig+0x190>
 8014050:	4ba5      	ldr	r3, [pc, #660]	; (80142e8 <UART_SetConfig+0x338>)
 8014052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014054:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014058:	2b28      	cmp	r3, #40	; 0x28
 801405a:	d86d      	bhi.n	8014138 <UART_SetConfig+0x188>
 801405c:	a201      	add	r2, pc, #4	; (adr r2, 8014064 <UART_SetConfig+0xb4>)
 801405e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014062:	bf00      	nop
 8014064:	08014109 	.word	0x08014109
 8014068:	08014139 	.word	0x08014139
 801406c:	08014139 	.word	0x08014139
 8014070:	08014139 	.word	0x08014139
 8014074:	08014139 	.word	0x08014139
 8014078:	08014139 	.word	0x08014139
 801407c:	08014139 	.word	0x08014139
 8014080:	08014139 	.word	0x08014139
 8014084:	08014111 	.word	0x08014111
 8014088:	08014139 	.word	0x08014139
 801408c:	08014139 	.word	0x08014139
 8014090:	08014139 	.word	0x08014139
 8014094:	08014139 	.word	0x08014139
 8014098:	08014139 	.word	0x08014139
 801409c:	08014139 	.word	0x08014139
 80140a0:	08014139 	.word	0x08014139
 80140a4:	08014119 	.word	0x08014119
 80140a8:	08014139 	.word	0x08014139
 80140ac:	08014139 	.word	0x08014139
 80140b0:	08014139 	.word	0x08014139
 80140b4:	08014139 	.word	0x08014139
 80140b8:	08014139 	.word	0x08014139
 80140bc:	08014139 	.word	0x08014139
 80140c0:	08014139 	.word	0x08014139
 80140c4:	08014121 	.word	0x08014121
 80140c8:	08014139 	.word	0x08014139
 80140cc:	08014139 	.word	0x08014139
 80140d0:	08014139 	.word	0x08014139
 80140d4:	08014139 	.word	0x08014139
 80140d8:	08014139 	.word	0x08014139
 80140dc:	08014139 	.word	0x08014139
 80140e0:	08014139 	.word	0x08014139
 80140e4:	08014129 	.word	0x08014129
 80140e8:	08014139 	.word	0x08014139
 80140ec:	08014139 	.word	0x08014139
 80140f0:	08014139 	.word	0x08014139
 80140f4:	08014139 	.word	0x08014139
 80140f8:	08014139 	.word	0x08014139
 80140fc:	08014139 	.word	0x08014139
 8014100:	08014139 	.word	0x08014139
 8014104:	08014131 	.word	0x08014131
 8014108:	2301      	movs	r3, #1
 801410a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801410e:	e222      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014110:	2304      	movs	r3, #4
 8014112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014116:	e21e      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014118:	2308      	movs	r3, #8
 801411a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801411e:	e21a      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014120:	2310      	movs	r3, #16
 8014122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014126:	e216      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014128:	2320      	movs	r3, #32
 801412a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801412e:	e212      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014130:	2340      	movs	r3, #64	; 0x40
 8014132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014136:	e20e      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014138:	2380      	movs	r3, #128	; 0x80
 801413a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801413e:	e20a      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014140:	697b      	ldr	r3, [r7, #20]
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	4a69      	ldr	r2, [pc, #420]	; (80142ec <UART_SetConfig+0x33c>)
 8014146:	4293      	cmp	r3, r2
 8014148:	d130      	bne.n	80141ac <UART_SetConfig+0x1fc>
 801414a:	4b67      	ldr	r3, [pc, #412]	; (80142e8 <UART_SetConfig+0x338>)
 801414c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801414e:	f003 0307 	and.w	r3, r3, #7
 8014152:	2b05      	cmp	r3, #5
 8014154:	d826      	bhi.n	80141a4 <UART_SetConfig+0x1f4>
 8014156:	a201      	add	r2, pc, #4	; (adr r2, 801415c <UART_SetConfig+0x1ac>)
 8014158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801415c:	08014175 	.word	0x08014175
 8014160:	0801417d 	.word	0x0801417d
 8014164:	08014185 	.word	0x08014185
 8014168:	0801418d 	.word	0x0801418d
 801416c:	08014195 	.word	0x08014195
 8014170:	0801419d 	.word	0x0801419d
 8014174:	2300      	movs	r3, #0
 8014176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801417a:	e1ec      	b.n	8014556 <UART_SetConfig+0x5a6>
 801417c:	2304      	movs	r3, #4
 801417e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014182:	e1e8      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014184:	2308      	movs	r3, #8
 8014186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801418a:	e1e4      	b.n	8014556 <UART_SetConfig+0x5a6>
 801418c:	2310      	movs	r3, #16
 801418e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014192:	e1e0      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014194:	2320      	movs	r3, #32
 8014196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801419a:	e1dc      	b.n	8014556 <UART_SetConfig+0x5a6>
 801419c:	2340      	movs	r3, #64	; 0x40
 801419e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141a2:	e1d8      	b.n	8014556 <UART_SetConfig+0x5a6>
 80141a4:	2380      	movs	r3, #128	; 0x80
 80141a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141aa:	e1d4      	b.n	8014556 <UART_SetConfig+0x5a6>
 80141ac:	697b      	ldr	r3, [r7, #20]
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	4a4f      	ldr	r2, [pc, #316]	; (80142f0 <UART_SetConfig+0x340>)
 80141b2:	4293      	cmp	r3, r2
 80141b4:	d130      	bne.n	8014218 <UART_SetConfig+0x268>
 80141b6:	4b4c      	ldr	r3, [pc, #304]	; (80142e8 <UART_SetConfig+0x338>)
 80141b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80141ba:	f003 0307 	and.w	r3, r3, #7
 80141be:	2b05      	cmp	r3, #5
 80141c0:	d826      	bhi.n	8014210 <UART_SetConfig+0x260>
 80141c2:	a201      	add	r2, pc, #4	; (adr r2, 80141c8 <UART_SetConfig+0x218>)
 80141c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141c8:	080141e1 	.word	0x080141e1
 80141cc:	080141e9 	.word	0x080141e9
 80141d0:	080141f1 	.word	0x080141f1
 80141d4:	080141f9 	.word	0x080141f9
 80141d8:	08014201 	.word	0x08014201
 80141dc:	08014209 	.word	0x08014209
 80141e0:	2300      	movs	r3, #0
 80141e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141e6:	e1b6      	b.n	8014556 <UART_SetConfig+0x5a6>
 80141e8:	2304      	movs	r3, #4
 80141ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141ee:	e1b2      	b.n	8014556 <UART_SetConfig+0x5a6>
 80141f0:	2308      	movs	r3, #8
 80141f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141f6:	e1ae      	b.n	8014556 <UART_SetConfig+0x5a6>
 80141f8:	2310      	movs	r3, #16
 80141fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141fe:	e1aa      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014200:	2320      	movs	r3, #32
 8014202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014206:	e1a6      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014208:	2340      	movs	r3, #64	; 0x40
 801420a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801420e:	e1a2      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014210:	2380      	movs	r3, #128	; 0x80
 8014212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014216:	e19e      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014218:	697b      	ldr	r3, [r7, #20]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	4a35      	ldr	r2, [pc, #212]	; (80142f4 <UART_SetConfig+0x344>)
 801421e:	4293      	cmp	r3, r2
 8014220:	d130      	bne.n	8014284 <UART_SetConfig+0x2d4>
 8014222:	4b31      	ldr	r3, [pc, #196]	; (80142e8 <UART_SetConfig+0x338>)
 8014224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014226:	f003 0307 	and.w	r3, r3, #7
 801422a:	2b05      	cmp	r3, #5
 801422c:	d826      	bhi.n	801427c <UART_SetConfig+0x2cc>
 801422e:	a201      	add	r2, pc, #4	; (adr r2, 8014234 <UART_SetConfig+0x284>)
 8014230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014234:	0801424d 	.word	0x0801424d
 8014238:	08014255 	.word	0x08014255
 801423c:	0801425d 	.word	0x0801425d
 8014240:	08014265 	.word	0x08014265
 8014244:	0801426d 	.word	0x0801426d
 8014248:	08014275 	.word	0x08014275
 801424c:	2300      	movs	r3, #0
 801424e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014252:	e180      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014254:	2304      	movs	r3, #4
 8014256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801425a:	e17c      	b.n	8014556 <UART_SetConfig+0x5a6>
 801425c:	2308      	movs	r3, #8
 801425e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014262:	e178      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014264:	2310      	movs	r3, #16
 8014266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801426a:	e174      	b.n	8014556 <UART_SetConfig+0x5a6>
 801426c:	2320      	movs	r3, #32
 801426e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014272:	e170      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014274:	2340      	movs	r3, #64	; 0x40
 8014276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801427a:	e16c      	b.n	8014556 <UART_SetConfig+0x5a6>
 801427c:	2380      	movs	r3, #128	; 0x80
 801427e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014282:	e168      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014284:	697b      	ldr	r3, [r7, #20]
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	4a1b      	ldr	r2, [pc, #108]	; (80142f8 <UART_SetConfig+0x348>)
 801428a:	4293      	cmp	r3, r2
 801428c:	d142      	bne.n	8014314 <UART_SetConfig+0x364>
 801428e:	4b16      	ldr	r3, [pc, #88]	; (80142e8 <UART_SetConfig+0x338>)
 8014290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014292:	f003 0307 	and.w	r3, r3, #7
 8014296:	2b05      	cmp	r3, #5
 8014298:	d838      	bhi.n	801430c <UART_SetConfig+0x35c>
 801429a:	a201      	add	r2, pc, #4	; (adr r2, 80142a0 <UART_SetConfig+0x2f0>)
 801429c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142a0:	080142b9 	.word	0x080142b9
 80142a4:	080142c1 	.word	0x080142c1
 80142a8:	080142c9 	.word	0x080142c9
 80142ac:	080142d1 	.word	0x080142d1
 80142b0:	080142fd 	.word	0x080142fd
 80142b4:	08014305 	.word	0x08014305
 80142b8:	2300      	movs	r3, #0
 80142ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80142be:	e14a      	b.n	8014556 <UART_SetConfig+0x5a6>
 80142c0:	2304      	movs	r3, #4
 80142c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80142c6:	e146      	b.n	8014556 <UART_SetConfig+0x5a6>
 80142c8:	2308      	movs	r3, #8
 80142ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80142ce:	e142      	b.n	8014556 <UART_SetConfig+0x5a6>
 80142d0:	2310      	movs	r3, #16
 80142d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80142d6:	e13e      	b.n	8014556 <UART_SetConfig+0x5a6>
 80142d8:	cfff69f3 	.word	0xcfff69f3
 80142dc:	58000c00 	.word	0x58000c00
 80142e0:	11fff4ff 	.word	0x11fff4ff
 80142e4:	40011000 	.word	0x40011000
 80142e8:	58024400 	.word	0x58024400
 80142ec:	40004400 	.word	0x40004400
 80142f0:	40004800 	.word	0x40004800
 80142f4:	40004c00 	.word	0x40004c00
 80142f8:	40005000 	.word	0x40005000
 80142fc:	2320      	movs	r3, #32
 80142fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014302:	e128      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014304:	2340      	movs	r3, #64	; 0x40
 8014306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801430a:	e124      	b.n	8014556 <UART_SetConfig+0x5a6>
 801430c:	2380      	movs	r3, #128	; 0x80
 801430e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014312:	e120      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014314:	697b      	ldr	r3, [r7, #20]
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	4acb      	ldr	r2, [pc, #812]	; (8014648 <UART_SetConfig+0x698>)
 801431a:	4293      	cmp	r3, r2
 801431c:	d176      	bne.n	801440c <UART_SetConfig+0x45c>
 801431e:	4bcb      	ldr	r3, [pc, #812]	; (801464c <UART_SetConfig+0x69c>)
 8014320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014322:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014326:	2b28      	cmp	r3, #40	; 0x28
 8014328:	d86c      	bhi.n	8014404 <UART_SetConfig+0x454>
 801432a:	a201      	add	r2, pc, #4	; (adr r2, 8014330 <UART_SetConfig+0x380>)
 801432c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014330:	080143d5 	.word	0x080143d5
 8014334:	08014405 	.word	0x08014405
 8014338:	08014405 	.word	0x08014405
 801433c:	08014405 	.word	0x08014405
 8014340:	08014405 	.word	0x08014405
 8014344:	08014405 	.word	0x08014405
 8014348:	08014405 	.word	0x08014405
 801434c:	08014405 	.word	0x08014405
 8014350:	080143dd 	.word	0x080143dd
 8014354:	08014405 	.word	0x08014405
 8014358:	08014405 	.word	0x08014405
 801435c:	08014405 	.word	0x08014405
 8014360:	08014405 	.word	0x08014405
 8014364:	08014405 	.word	0x08014405
 8014368:	08014405 	.word	0x08014405
 801436c:	08014405 	.word	0x08014405
 8014370:	080143e5 	.word	0x080143e5
 8014374:	08014405 	.word	0x08014405
 8014378:	08014405 	.word	0x08014405
 801437c:	08014405 	.word	0x08014405
 8014380:	08014405 	.word	0x08014405
 8014384:	08014405 	.word	0x08014405
 8014388:	08014405 	.word	0x08014405
 801438c:	08014405 	.word	0x08014405
 8014390:	080143ed 	.word	0x080143ed
 8014394:	08014405 	.word	0x08014405
 8014398:	08014405 	.word	0x08014405
 801439c:	08014405 	.word	0x08014405
 80143a0:	08014405 	.word	0x08014405
 80143a4:	08014405 	.word	0x08014405
 80143a8:	08014405 	.word	0x08014405
 80143ac:	08014405 	.word	0x08014405
 80143b0:	080143f5 	.word	0x080143f5
 80143b4:	08014405 	.word	0x08014405
 80143b8:	08014405 	.word	0x08014405
 80143bc:	08014405 	.word	0x08014405
 80143c0:	08014405 	.word	0x08014405
 80143c4:	08014405 	.word	0x08014405
 80143c8:	08014405 	.word	0x08014405
 80143cc:	08014405 	.word	0x08014405
 80143d0:	080143fd 	.word	0x080143fd
 80143d4:	2301      	movs	r3, #1
 80143d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80143da:	e0bc      	b.n	8014556 <UART_SetConfig+0x5a6>
 80143dc:	2304      	movs	r3, #4
 80143de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80143e2:	e0b8      	b.n	8014556 <UART_SetConfig+0x5a6>
 80143e4:	2308      	movs	r3, #8
 80143e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80143ea:	e0b4      	b.n	8014556 <UART_SetConfig+0x5a6>
 80143ec:	2310      	movs	r3, #16
 80143ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80143f2:	e0b0      	b.n	8014556 <UART_SetConfig+0x5a6>
 80143f4:	2320      	movs	r3, #32
 80143f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80143fa:	e0ac      	b.n	8014556 <UART_SetConfig+0x5a6>
 80143fc:	2340      	movs	r3, #64	; 0x40
 80143fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014402:	e0a8      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014404:	2380      	movs	r3, #128	; 0x80
 8014406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801440a:	e0a4      	b.n	8014556 <UART_SetConfig+0x5a6>
 801440c:	697b      	ldr	r3, [r7, #20]
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	4a8f      	ldr	r2, [pc, #572]	; (8014650 <UART_SetConfig+0x6a0>)
 8014412:	4293      	cmp	r3, r2
 8014414:	d130      	bne.n	8014478 <UART_SetConfig+0x4c8>
 8014416:	4b8d      	ldr	r3, [pc, #564]	; (801464c <UART_SetConfig+0x69c>)
 8014418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801441a:	f003 0307 	and.w	r3, r3, #7
 801441e:	2b05      	cmp	r3, #5
 8014420:	d826      	bhi.n	8014470 <UART_SetConfig+0x4c0>
 8014422:	a201      	add	r2, pc, #4	; (adr r2, 8014428 <UART_SetConfig+0x478>)
 8014424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014428:	08014441 	.word	0x08014441
 801442c:	08014449 	.word	0x08014449
 8014430:	08014451 	.word	0x08014451
 8014434:	08014459 	.word	0x08014459
 8014438:	08014461 	.word	0x08014461
 801443c:	08014469 	.word	0x08014469
 8014440:	2300      	movs	r3, #0
 8014442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014446:	e086      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014448:	2304      	movs	r3, #4
 801444a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801444e:	e082      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014450:	2308      	movs	r3, #8
 8014452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014456:	e07e      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014458:	2310      	movs	r3, #16
 801445a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801445e:	e07a      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014460:	2320      	movs	r3, #32
 8014462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014466:	e076      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014468:	2340      	movs	r3, #64	; 0x40
 801446a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801446e:	e072      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014470:	2380      	movs	r3, #128	; 0x80
 8014472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014476:	e06e      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014478:	697b      	ldr	r3, [r7, #20]
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	4a75      	ldr	r2, [pc, #468]	; (8014654 <UART_SetConfig+0x6a4>)
 801447e:	4293      	cmp	r3, r2
 8014480:	d130      	bne.n	80144e4 <UART_SetConfig+0x534>
 8014482:	4b72      	ldr	r3, [pc, #456]	; (801464c <UART_SetConfig+0x69c>)
 8014484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014486:	f003 0307 	and.w	r3, r3, #7
 801448a:	2b05      	cmp	r3, #5
 801448c:	d826      	bhi.n	80144dc <UART_SetConfig+0x52c>
 801448e:	a201      	add	r2, pc, #4	; (adr r2, 8014494 <UART_SetConfig+0x4e4>)
 8014490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014494:	080144ad 	.word	0x080144ad
 8014498:	080144b5 	.word	0x080144b5
 801449c:	080144bd 	.word	0x080144bd
 80144a0:	080144c5 	.word	0x080144c5
 80144a4:	080144cd 	.word	0x080144cd
 80144a8:	080144d5 	.word	0x080144d5
 80144ac:	2300      	movs	r3, #0
 80144ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80144b2:	e050      	b.n	8014556 <UART_SetConfig+0x5a6>
 80144b4:	2304      	movs	r3, #4
 80144b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80144ba:	e04c      	b.n	8014556 <UART_SetConfig+0x5a6>
 80144bc:	2308      	movs	r3, #8
 80144be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80144c2:	e048      	b.n	8014556 <UART_SetConfig+0x5a6>
 80144c4:	2310      	movs	r3, #16
 80144c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80144ca:	e044      	b.n	8014556 <UART_SetConfig+0x5a6>
 80144cc:	2320      	movs	r3, #32
 80144ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80144d2:	e040      	b.n	8014556 <UART_SetConfig+0x5a6>
 80144d4:	2340      	movs	r3, #64	; 0x40
 80144d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80144da:	e03c      	b.n	8014556 <UART_SetConfig+0x5a6>
 80144dc:	2380      	movs	r3, #128	; 0x80
 80144de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80144e2:	e038      	b.n	8014556 <UART_SetConfig+0x5a6>
 80144e4:	697b      	ldr	r3, [r7, #20]
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	4a5b      	ldr	r2, [pc, #364]	; (8014658 <UART_SetConfig+0x6a8>)
 80144ea:	4293      	cmp	r3, r2
 80144ec:	d130      	bne.n	8014550 <UART_SetConfig+0x5a0>
 80144ee:	4b57      	ldr	r3, [pc, #348]	; (801464c <UART_SetConfig+0x69c>)
 80144f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80144f2:	f003 0307 	and.w	r3, r3, #7
 80144f6:	2b05      	cmp	r3, #5
 80144f8:	d826      	bhi.n	8014548 <UART_SetConfig+0x598>
 80144fa:	a201      	add	r2, pc, #4	; (adr r2, 8014500 <UART_SetConfig+0x550>)
 80144fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014500:	08014519 	.word	0x08014519
 8014504:	08014521 	.word	0x08014521
 8014508:	08014529 	.word	0x08014529
 801450c:	08014531 	.word	0x08014531
 8014510:	08014539 	.word	0x08014539
 8014514:	08014541 	.word	0x08014541
 8014518:	2302      	movs	r3, #2
 801451a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801451e:	e01a      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014520:	2304      	movs	r3, #4
 8014522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014526:	e016      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014528:	2308      	movs	r3, #8
 801452a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801452e:	e012      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014530:	2310      	movs	r3, #16
 8014532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014536:	e00e      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014538:	2320      	movs	r3, #32
 801453a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801453e:	e00a      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014540:	2340      	movs	r3, #64	; 0x40
 8014542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014546:	e006      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014548:	2380      	movs	r3, #128	; 0x80
 801454a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801454e:	e002      	b.n	8014556 <UART_SetConfig+0x5a6>
 8014550:	2380      	movs	r3, #128	; 0x80
 8014552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8014556:	697b      	ldr	r3, [r7, #20]
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	4a3f      	ldr	r2, [pc, #252]	; (8014658 <UART_SetConfig+0x6a8>)
 801455c:	4293      	cmp	r3, r2
 801455e:	f040 80f8 	bne.w	8014752 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8014562:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014566:	2b20      	cmp	r3, #32
 8014568:	dc46      	bgt.n	80145f8 <UART_SetConfig+0x648>
 801456a:	2b02      	cmp	r3, #2
 801456c:	f2c0 8082 	blt.w	8014674 <UART_SetConfig+0x6c4>
 8014570:	3b02      	subs	r3, #2
 8014572:	2b1e      	cmp	r3, #30
 8014574:	d87e      	bhi.n	8014674 <UART_SetConfig+0x6c4>
 8014576:	a201      	add	r2, pc, #4	; (adr r2, 801457c <UART_SetConfig+0x5cc>)
 8014578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801457c:	080145ff 	.word	0x080145ff
 8014580:	08014675 	.word	0x08014675
 8014584:	08014607 	.word	0x08014607
 8014588:	08014675 	.word	0x08014675
 801458c:	08014675 	.word	0x08014675
 8014590:	08014675 	.word	0x08014675
 8014594:	08014617 	.word	0x08014617
 8014598:	08014675 	.word	0x08014675
 801459c:	08014675 	.word	0x08014675
 80145a0:	08014675 	.word	0x08014675
 80145a4:	08014675 	.word	0x08014675
 80145a8:	08014675 	.word	0x08014675
 80145ac:	08014675 	.word	0x08014675
 80145b0:	08014675 	.word	0x08014675
 80145b4:	08014627 	.word	0x08014627
 80145b8:	08014675 	.word	0x08014675
 80145bc:	08014675 	.word	0x08014675
 80145c0:	08014675 	.word	0x08014675
 80145c4:	08014675 	.word	0x08014675
 80145c8:	08014675 	.word	0x08014675
 80145cc:	08014675 	.word	0x08014675
 80145d0:	08014675 	.word	0x08014675
 80145d4:	08014675 	.word	0x08014675
 80145d8:	08014675 	.word	0x08014675
 80145dc:	08014675 	.word	0x08014675
 80145e0:	08014675 	.word	0x08014675
 80145e4:	08014675 	.word	0x08014675
 80145e8:	08014675 	.word	0x08014675
 80145ec:	08014675 	.word	0x08014675
 80145f0:	08014675 	.word	0x08014675
 80145f4:	08014667 	.word	0x08014667
 80145f8:	2b40      	cmp	r3, #64	; 0x40
 80145fa:	d037      	beq.n	801466c <UART_SetConfig+0x6bc>
 80145fc:	e03a      	b.n	8014674 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80145fe:	f7fb fc17 	bl	800fe30 <HAL_RCCEx_GetD3PCLK1Freq>
 8014602:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014604:	e03c      	b.n	8014680 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801460a:	4618      	mov	r0, r3
 801460c:	f7fb fc26 	bl	800fe5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014614:	e034      	b.n	8014680 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014616:	f107 0318 	add.w	r3, r7, #24
 801461a:	4618      	mov	r0, r3
 801461c:	f7fb fd72 	bl	8010104 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014620:	69fb      	ldr	r3, [r7, #28]
 8014622:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014624:	e02c      	b.n	8014680 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014626:	4b09      	ldr	r3, [pc, #36]	; (801464c <UART_SetConfig+0x69c>)
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	f003 0320 	and.w	r3, r3, #32
 801462e:	2b00      	cmp	r3, #0
 8014630:	d016      	beq.n	8014660 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014632:	4b06      	ldr	r3, [pc, #24]	; (801464c <UART_SetConfig+0x69c>)
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	08db      	lsrs	r3, r3, #3
 8014638:	f003 0303 	and.w	r3, r3, #3
 801463c:	4a07      	ldr	r2, [pc, #28]	; (801465c <UART_SetConfig+0x6ac>)
 801463e:	fa22 f303 	lsr.w	r3, r2, r3
 8014642:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014644:	e01c      	b.n	8014680 <UART_SetConfig+0x6d0>
 8014646:	bf00      	nop
 8014648:	40011400 	.word	0x40011400
 801464c:	58024400 	.word	0x58024400
 8014650:	40007800 	.word	0x40007800
 8014654:	40007c00 	.word	0x40007c00
 8014658:	58000c00 	.word	0x58000c00
 801465c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8014660:	4b9d      	ldr	r3, [pc, #628]	; (80148d8 <UART_SetConfig+0x928>)
 8014662:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014664:	e00c      	b.n	8014680 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014666:	4b9d      	ldr	r3, [pc, #628]	; (80148dc <UART_SetConfig+0x92c>)
 8014668:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801466a:	e009      	b.n	8014680 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801466c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014670:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014672:	e005      	b.n	8014680 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8014674:	2300      	movs	r3, #0
 8014676:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8014678:	2301      	movs	r3, #1
 801467a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801467e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8014680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014682:	2b00      	cmp	r3, #0
 8014684:	f000 81de 	beq.w	8014a44 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8014688:	697b      	ldr	r3, [r7, #20]
 801468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801468c:	4a94      	ldr	r2, [pc, #592]	; (80148e0 <UART_SetConfig+0x930>)
 801468e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014692:	461a      	mov	r2, r3
 8014694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014696:	fbb3 f3f2 	udiv	r3, r3, r2
 801469a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801469c:	697b      	ldr	r3, [r7, #20]
 801469e:	685a      	ldr	r2, [r3, #4]
 80146a0:	4613      	mov	r3, r2
 80146a2:	005b      	lsls	r3, r3, #1
 80146a4:	4413      	add	r3, r2
 80146a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80146a8:	429a      	cmp	r2, r3
 80146aa:	d305      	bcc.n	80146b8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80146ac:	697b      	ldr	r3, [r7, #20]
 80146ae:	685b      	ldr	r3, [r3, #4]
 80146b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80146b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80146b4:	429a      	cmp	r2, r3
 80146b6:	d903      	bls.n	80146c0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80146b8:	2301      	movs	r3, #1
 80146ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80146be:	e1c1      	b.n	8014a44 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80146c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146c2:	2200      	movs	r2, #0
 80146c4:	60bb      	str	r3, [r7, #8]
 80146c6:	60fa      	str	r2, [r7, #12]
 80146c8:	697b      	ldr	r3, [r7, #20]
 80146ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146cc:	4a84      	ldr	r2, [pc, #528]	; (80148e0 <UART_SetConfig+0x930>)
 80146ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80146d2:	b29b      	uxth	r3, r3
 80146d4:	2200      	movs	r2, #0
 80146d6:	603b      	str	r3, [r7, #0]
 80146d8:	607a      	str	r2, [r7, #4]
 80146da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80146de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80146e2:	f7eb fdfd 	bl	80002e0 <__aeabi_uldivmod>
 80146e6:	4602      	mov	r2, r0
 80146e8:	460b      	mov	r3, r1
 80146ea:	4610      	mov	r0, r2
 80146ec:	4619      	mov	r1, r3
 80146ee:	f04f 0200 	mov.w	r2, #0
 80146f2:	f04f 0300 	mov.w	r3, #0
 80146f6:	020b      	lsls	r3, r1, #8
 80146f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80146fc:	0202      	lsls	r2, r0, #8
 80146fe:	6979      	ldr	r1, [r7, #20]
 8014700:	6849      	ldr	r1, [r1, #4]
 8014702:	0849      	lsrs	r1, r1, #1
 8014704:	2000      	movs	r0, #0
 8014706:	460c      	mov	r4, r1
 8014708:	4605      	mov	r5, r0
 801470a:	eb12 0804 	adds.w	r8, r2, r4
 801470e:	eb43 0905 	adc.w	r9, r3, r5
 8014712:	697b      	ldr	r3, [r7, #20]
 8014714:	685b      	ldr	r3, [r3, #4]
 8014716:	2200      	movs	r2, #0
 8014718:	469a      	mov	sl, r3
 801471a:	4693      	mov	fp, r2
 801471c:	4652      	mov	r2, sl
 801471e:	465b      	mov	r3, fp
 8014720:	4640      	mov	r0, r8
 8014722:	4649      	mov	r1, r9
 8014724:	f7eb fddc 	bl	80002e0 <__aeabi_uldivmod>
 8014728:	4602      	mov	r2, r0
 801472a:	460b      	mov	r3, r1
 801472c:	4613      	mov	r3, r2
 801472e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8014730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014732:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014736:	d308      	bcc.n	801474a <UART_SetConfig+0x79a>
 8014738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801473a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801473e:	d204      	bcs.n	801474a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8014740:	697b      	ldr	r3, [r7, #20]
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014746:	60da      	str	r2, [r3, #12]
 8014748:	e17c      	b.n	8014a44 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801474a:	2301      	movs	r3, #1
 801474c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8014750:	e178      	b.n	8014a44 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014752:	697b      	ldr	r3, [r7, #20]
 8014754:	69db      	ldr	r3, [r3, #28]
 8014756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801475a:	f040 80c5 	bne.w	80148e8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801475e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014762:	2b20      	cmp	r3, #32
 8014764:	dc48      	bgt.n	80147f8 <UART_SetConfig+0x848>
 8014766:	2b00      	cmp	r3, #0
 8014768:	db7b      	blt.n	8014862 <UART_SetConfig+0x8b2>
 801476a:	2b20      	cmp	r3, #32
 801476c:	d879      	bhi.n	8014862 <UART_SetConfig+0x8b2>
 801476e:	a201      	add	r2, pc, #4	; (adr r2, 8014774 <UART_SetConfig+0x7c4>)
 8014770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014774:	080147ff 	.word	0x080147ff
 8014778:	08014807 	.word	0x08014807
 801477c:	08014863 	.word	0x08014863
 8014780:	08014863 	.word	0x08014863
 8014784:	0801480f 	.word	0x0801480f
 8014788:	08014863 	.word	0x08014863
 801478c:	08014863 	.word	0x08014863
 8014790:	08014863 	.word	0x08014863
 8014794:	0801481f 	.word	0x0801481f
 8014798:	08014863 	.word	0x08014863
 801479c:	08014863 	.word	0x08014863
 80147a0:	08014863 	.word	0x08014863
 80147a4:	08014863 	.word	0x08014863
 80147a8:	08014863 	.word	0x08014863
 80147ac:	08014863 	.word	0x08014863
 80147b0:	08014863 	.word	0x08014863
 80147b4:	0801482f 	.word	0x0801482f
 80147b8:	08014863 	.word	0x08014863
 80147bc:	08014863 	.word	0x08014863
 80147c0:	08014863 	.word	0x08014863
 80147c4:	08014863 	.word	0x08014863
 80147c8:	08014863 	.word	0x08014863
 80147cc:	08014863 	.word	0x08014863
 80147d0:	08014863 	.word	0x08014863
 80147d4:	08014863 	.word	0x08014863
 80147d8:	08014863 	.word	0x08014863
 80147dc:	08014863 	.word	0x08014863
 80147e0:	08014863 	.word	0x08014863
 80147e4:	08014863 	.word	0x08014863
 80147e8:	08014863 	.word	0x08014863
 80147ec:	08014863 	.word	0x08014863
 80147f0:	08014863 	.word	0x08014863
 80147f4:	08014855 	.word	0x08014855
 80147f8:	2b40      	cmp	r3, #64	; 0x40
 80147fa:	d02e      	beq.n	801485a <UART_SetConfig+0x8aa>
 80147fc:	e031      	b.n	8014862 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80147fe:	f7f9 fb1f 	bl	800de40 <HAL_RCC_GetPCLK1Freq>
 8014802:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014804:	e033      	b.n	801486e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014806:	f7f9 fb31 	bl	800de6c <HAL_RCC_GetPCLK2Freq>
 801480a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801480c:	e02f      	b.n	801486e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801480e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014812:	4618      	mov	r0, r3
 8014814:	f7fb fb22 	bl	800fe5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801481a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801481c:	e027      	b.n	801486e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801481e:	f107 0318 	add.w	r3, r7, #24
 8014822:	4618      	mov	r0, r3
 8014824:	f7fb fc6e 	bl	8010104 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014828:	69fb      	ldr	r3, [r7, #28]
 801482a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801482c:	e01f      	b.n	801486e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801482e:	4b2d      	ldr	r3, [pc, #180]	; (80148e4 <UART_SetConfig+0x934>)
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	f003 0320 	and.w	r3, r3, #32
 8014836:	2b00      	cmp	r3, #0
 8014838:	d009      	beq.n	801484e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801483a:	4b2a      	ldr	r3, [pc, #168]	; (80148e4 <UART_SetConfig+0x934>)
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	08db      	lsrs	r3, r3, #3
 8014840:	f003 0303 	and.w	r3, r3, #3
 8014844:	4a24      	ldr	r2, [pc, #144]	; (80148d8 <UART_SetConfig+0x928>)
 8014846:	fa22 f303 	lsr.w	r3, r2, r3
 801484a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801484c:	e00f      	b.n	801486e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801484e:	4b22      	ldr	r3, [pc, #136]	; (80148d8 <UART_SetConfig+0x928>)
 8014850:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014852:	e00c      	b.n	801486e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014854:	4b21      	ldr	r3, [pc, #132]	; (80148dc <UART_SetConfig+0x92c>)
 8014856:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014858:	e009      	b.n	801486e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801485a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801485e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014860:	e005      	b.n	801486e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8014862:	2300      	movs	r3, #0
 8014864:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8014866:	2301      	movs	r3, #1
 8014868:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801486c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801486e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014870:	2b00      	cmp	r3, #0
 8014872:	f000 80e7 	beq.w	8014a44 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014876:	697b      	ldr	r3, [r7, #20]
 8014878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801487a:	4a19      	ldr	r2, [pc, #100]	; (80148e0 <UART_SetConfig+0x930>)
 801487c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014880:	461a      	mov	r2, r3
 8014882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014884:	fbb3 f3f2 	udiv	r3, r3, r2
 8014888:	005a      	lsls	r2, r3, #1
 801488a:	697b      	ldr	r3, [r7, #20]
 801488c:	685b      	ldr	r3, [r3, #4]
 801488e:	085b      	lsrs	r3, r3, #1
 8014890:	441a      	add	r2, r3
 8014892:	697b      	ldr	r3, [r7, #20]
 8014894:	685b      	ldr	r3, [r3, #4]
 8014896:	fbb2 f3f3 	udiv	r3, r2, r3
 801489a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801489c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801489e:	2b0f      	cmp	r3, #15
 80148a0:	d916      	bls.n	80148d0 <UART_SetConfig+0x920>
 80148a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80148a8:	d212      	bcs.n	80148d0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80148aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148ac:	b29b      	uxth	r3, r3
 80148ae:	f023 030f 	bic.w	r3, r3, #15
 80148b2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80148b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148b6:	085b      	lsrs	r3, r3, #1
 80148b8:	b29b      	uxth	r3, r3
 80148ba:	f003 0307 	and.w	r3, r3, #7
 80148be:	b29a      	uxth	r2, r3
 80148c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80148c2:	4313      	orrs	r3, r2
 80148c4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80148c6:	697b      	ldr	r3, [r7, #20]
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80148cc:	60da      	str	r2, [r3, #12]
 80148ce:	e0b9      	b.n	8014a44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80148d0:	2301      	movs	r3, #1
 80148d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80148d6:	e0b5      	b.n	8014a44 <UART_SetConfig+0xa94>
 80148d8:	03d09000 	.word	0x03d09000
 80148dc:	003d0900 	.word	0x003d0900
 80148e0:	0801a1cc 	.word	0x0801a1cc
 80148e4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80148e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80148ec:	2b20      	cmp	r3, #32
 80148ee:	dc49      	bgt.n	8014984 <UART_SetConfig+0x9d4>
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	db7c      	blt.n	80149ee <UART_SetConfig+0xa3e>
 80148f4:	2b20      	cmp	r3, #32
 80148f6:	d87a      	bhi.n	80149ee <UART_SetConfig+0xa3e>
 80148f8:	a201      	add	r2, pc, #4	; (adr r2, 8014900 <UART_SetConfig+0x950>)
 80148fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148fe:	bf00      	nop
 8014900:	0801498b 	.word	0x0801498b
 8014904:	08014993 	.word	0x08014993
 8014908:	080149ef 	.word	0x080149ef
 801490c:	080149ef 	.word	0x080149ef
 8014910:	0801499b 	.word	0x0801499b
 8014914:	080149ef 	.word	0x080149ef
 8014918:	080149ef 	.word	0x080149ef
 801491c:	080149ef 	.word	0x080149ef
 8014920:	080149ab 	.word	0x080149ab
 8014924:	080149ef 	.word	0x080149ef
 8014928:	080149ef 	.word	0x080149ef
 801492c:	080149ef 	.word	0x080149ef
 8014930:	080149ef 	.word	0x080149ef
 8014934:	080149ef 	.word	0x080149ef
 8014938:	080149ef 	.word	0x080149ef
 801493c:	080149ef 	.word	0x080149ef
 8014940:	080149bb 	.word	0x080149bb
 8014944:	080149ef 	.word	0x080149ef
 8014948:	080149ef 	.word	0x080149ef
 801494c:	080149ef 	.word	0x080149ef
 8014950:	080149ef 	.word	0x080149ef
 8014954:	080149ef 	.word	0x080149ef
 8014958:	080149ef 	.word	0x080149ef
 801495c:	080149ef 	.word	0x080149ef
 8014960:	080149ef 	.word	0x080149ef
 8014964:	080149ef 	.word	0x080149ef
 8014968:	080149ef 	.word	0x080149ef
 801496c:	080149ef 	.word	0x080149ef
 8014970:	080149ef 	.word	0x080149ef
 8014974:	080149ef 	.word	0x080149ef
 8014978:	080149ef 	.word	0x080149ef
 801497c:	080149ef 	.word	0x080149ef
 8014980:	080149e1 	.word	0x080149e1
 8014984:	2b40      	cmp	r3, #64	; 0x40
 8014986:	d02e      	beq.n	80149e6 <UART_SetConfig+0xa36>
 8014988:	e031      	b.n	80149ee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801498a:	f7f9 fa59 	bl	800de40 <HAL_RCC_GetPCLK1Freq>
 801498e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014990:	e033      	b.n	80149fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014992:	f7f9 fa6b 	bl	800de6c <HAL_RCC_GetPCLK2Freq>
 8014996:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014998:	e02f      	b.n	80149fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801499a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801499e:	4618      	mov	r0, r3
 80149a0:	f7fb fa5c 	bl	800fe5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80149a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80149a8:	e027      	b.n	80149fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80149aa:	f107 0318 	add.w	r3, r7, #24
 80149ae:	4618      	mov	r0, r3
 80149b0:	f7fb fba8 	bl	8010104 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80149b4:	69fb      	ldr	r3, [r7, #28]
 80149b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80149b8:	e01f      	b.n	80149fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80149ba:	4b2d      	ldr	r3, [pc, #180]	; (8014a70 <UART_SetConfig+0xac0>)
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	f003 0320 	and.w	r3, r3, #32
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d009      	beq.n	80149da <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80149c6:	4b2a      	ldr	r3, [pc, #168]	; (8014a70 <UART_SetConfig+0xac0>)
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	08db      	lsrs	r3, r3, #3
 80149cc:	f003 0303 	and.w	r3, r3, #3
 80149d0:	4a28      	ldr	r2, [pc, #160]	; (8014a74 <UART_SetConfig+0xac4>)
 80149d2:	fa22 f303 	lsr.w	r3, r2, r3
 80149d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80149d8:	e00f      	b.n	80149fa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80149da:	4b26      	ldr	r3, [pc, #152]	; (8014a74 <UART_SetConfig+0xac4>)
 80149dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80149de:	e00c      	b.n	80149fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80149e0:	4b25      	ldr	r3, [pc, #148]	; (8014a78 <UART_SetConfig+0xac8>)
 80149e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80149e4:	e009      	b.n	80149fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80149e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80149ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80149ec:	e005      	b.n	80149fa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80149ee:	2300      	movs	r3, #0
 80149f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80149f2:	2301      	movs	r3, #1
 80149f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80149f8:	bf00      	nop
    }

    if (pclk != 0U)
 80149fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d021      	beq.n	8014a44 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014a00:	697b      	ldr	r3, [r7, #20]
 8014a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a04:	4a1d      	ldr	r2, [pc, #116]	; (8014a7c <UART_SetConfig+0xacc>)
 8014a06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014a0a:	461a      	mov	r2, r3
 8014a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8014a12:	697b      	ldr	r3, [r7, #20]
 8014a14:	685b      	ldr	r3, [r3, #4]
 8014a16:	085b      	lsrs	r3, r3, #1
 8014a18:	441a      	add	r2, r3
 8014a1a:	697b      	ldr	r3, [r7, #20]
 8014a1c:	685b      	ldr	r3, [r3, #4]
 8014a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014a22:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a26:	2b0f      	cmp	r3, #15
 8014a28:	d909      	bls.n	8014a3e <UART_SetConfig+0xa8e>
 8014a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014a30:	d205      	bcs.n	8014a3e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8014a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a34:	b29a      	uxth	r2, r3
 8014a36:	697b      	ldr	r3, [r7, #20]
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	60da      	str	r2, [r3, #12]
 8014a3c:	e002      	b.n	8014a44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8014a3e:	2301      	movs	r3, #1
 8014a40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8014a44:	697b      	ldr	r3, [r7, #20]
 8014a46:	2201      	movs	r2, #1
 8014a48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8014a4c:	697b      	ldr	r3, [r7, #20]
 8014a4e:	2201      	movs	r2, #1
 8014a50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014a54:	697b      	ldr	r3, [r7, #20]
 8014a56:	2200      	movs	r2, #0
 8014a58:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8014a5a:	697b      	ldr	r3, [r7, #20]
 8014a5c:	2200      	movs	r2, #0
 8014a5e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8014a60:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8014a64:	4618      	mov	r0, r3
 8014a66:	3748      	adds	r7, #72	; 0x48
 8014a68:	46bd      	mov	sp, r7
 8014a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014a6e:	bf00      	nop
 8014a70:	58024400 	.word	0x58024400
 8014a74:	03d09000 	.word	0x03d09000
 8014a78:	003d0900 	.word	0x003d0900
 8014a7c:	0801a1cc 	.word	0x0801a1cc

08014a80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014a80:	b480      	push	{r7}
 8014a82:	b083      	sub	sp, #12
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a8c:	f003 0308 	and.w	r3, r3, #8
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d00a      	beq.n	8014aaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	685b      	ldr	r3, [r3, #4]
 8014a9a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	430a      	orrs	r2, r1
 8014aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014aae:	f003 0301 	and.w	r3, r3, #1
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d00a      	beq.n	8014acc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	685b      	ldr	r3, [r3, #4]
 8014abc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	430a      	orrs	r2, r1
 8014aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ad0:	f003 0302 	and.w	r3, r3, #2
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d00a      	beq.n	8014aee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	685b      	ldr	r3, [r3, #4]
 8014ade:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	430a      	orrs	r2, r1
 8014aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014af2:	f003 0304 	and.w	r3, r3, #4
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d00a      	beq.n	8014b10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	685b      	ldr	r3, [r3, #4]
 8014b00:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	430a      	orrs	r2, r1
 8014b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b14:	f003 0310 	and.w	r3, r3, #16
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d00a      	beq.n	8014b32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	689b      	ldr	r3, [r3, #8]
 8014b22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	430a      	orrs	r2, r1
 8014b30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b36:	f003 0320 	and.w	r3, r3, #32
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d00a      	beq.n	8014b54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	689b      	ldr	r3, [r3, #8]
 8014b44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	430a      	orrs	r2, r1
 8014b52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d01a      	beq.n	8014b96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	685b      	ldr	r3, [r3, #4]
 8014b66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	430a      	orrs	r2, r1
 8014b74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014b7e:	d10a      	bne.n	8014b96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	685b      	ldr	r3, [r3, #4]
 8014b86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	430a      	orrs	r2, r1
 8014b94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d00a      	beq.n	8014bb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	685b      	ldr	r3, [r3, #4]
 8014ba8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	430a      	orrs	r2, r1
 8014bb6:	605a      	str	r2, [r3, #4]
  }
}
 8014bb8:	bf00      	nop
 8014bba:	370c      	adds	r7, #12
 8014bbc:	46bd      	mov	sp, r7
 8014bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc2:	4770      	bx	lr

08014bc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b098      	sub	sp, #96	; 0x60
 8014bc8:	af02      	add	r7, sp, #8
 8014bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	2200      	movs	r2, #0
 8014bd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014bd4:	f7f0 f8de 	bl	8004d94 <HAL_GetTick>
 8014bd8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	f003 0308 	and.w	r3, r3, #8
 8014be4:	2b08      	cmp	r3, #8
 8014be6:	d12f      	bne.n	8014c48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014be8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014bec:	9300      	str	r3, [sp, #0]
 8014bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014bf0:	2200      	movs	r2, #0
 8014bf2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014bf6:	6878      	ldr	r0, [r7, #4]
 8014bf8:	f000 f88e 	bl	8014d18 <UART_WaitOnFlagUntilTimeout>
 8014bfc:	4603      	mov	r3, r0
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d022      	beq.n	8014c48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c0a:	e853 3f00 	ldrex	r3, [r3]
 8014c0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014c16:	653b      	str	r3, [r7, #80]	; 0x50
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	461a      	mov	r2, r3
 8014c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c20:	647b      	str	r3, [r7, #68]	; 0x44
 8014c22:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014c26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014c28:	e841 2300 	strex	r3, r2, [r1]
 8014c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d1e6      	bne.n	8014c02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	2220      	movs	r2, #32
 8014c38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	2200      	movs	r2, #0
 8014c40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014c44:	2303      	movs	r3, #3
 8014c46:	e063      	b.n	8014d10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	f003 0304 	and.w	r3, r3, #4
 8014c52:	2b04      	cmp	r3, #4
 8014c54:	d149      	bne.n	8014cea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014c56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014c5a:	9300      	str	r3, [sp, #0]
 8014c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c5e:	2200      	movs	r2, #0
 8014c60:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8014c64:	6878      	ldr	r0, [r7, #4]
 8014c66:	f000 f857 	bl	8014d18 <UART_WaitOnFlagUntilTimeout>
 8014c6a:	4603      	mov	r3, r0
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d03c      	beq.n	8014cea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c78:	e853 3f00 	ldrex	r3, [r3]
 8014c7c:	623b      	str	r3, [r7, #32]
   return(result);
 8014c7e:	6a3b      	ldr	r3, [r7, #32]
 8014c80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014c84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	461a      	mov	r2, r3
 8014c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c8e:	633b      	str	r3, [r7, #48]	; 0x30
 8014c90:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c96:	e841 2300 	strex	r3, r2, [r1]
 8014c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d1e6      	bne.n	8014c70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	3308      	adds	r3, #8
 8014ca8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014caa:	693b      	ldr	r3, [r7, #16]
 8014cac:	e853 3f00 	ldrex	r3, [r3]
 8014cb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	f023 0301 	bic.w	r3, r3, #1
 8014cb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	3308      	adds	r3, #8
 8014cc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014cc2:	61fa      	str	r2, [r7, #28]
 8014cc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014cc6:	69b9      	ldr	r1, [r7, #24]
 8014cc8:	69fa      	ldr	r2, [r7, #28]
 8014cca:	e841 2300 	strex	r3, r2, [r1]
 8014cce:	617b      	str	r3, [r7, #20]
   return(result);
 8014cd0:	697b      	ldr	r3, [r7, #20]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d1e5      	bne.n	8014ca2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	2220      	movs	r2, #32
 8014cda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	2200      	movs	r2, #0
 8014ce2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014ce6:	2303      	movs	r3, #3
 8014ce8:	e012      	b.n	8014d10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	2220      	movs	r2, #32
 8014cee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	2220      	movs	r2, #32
 8014cf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	2200      	movs	r2, #0
 8014cfe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	2200      	movs	r2, #0
 8014d04:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	2200      	movs	r2, #0
 8014d0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014d0e:	2300      	movs	r3, #0
}
 8014d10:	4618      	mov	r0, r3
 8014d12:	3758      	adds	r7, #88	; 0x58
 8014d14:	46bd      	mov	sp, r7
 8014d16:	bd80      	pop	{r7, pc}

08014d18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	b084      	sub	sp, #16
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	60f8      	str	r0, [r7, #12]
 8014d20:	60b9      	str	r1, [r7, #8]
 8014d22:	603b      	str	r3, [r7, #0]
 8014d24:	4613      	mov	r3, r2
 8014d26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014d28:	e04f      	b.n	8014dca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014d2a:	69bb      	ldr	r3, [r7, #24]
 8014d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014d30:	d04b      	beq.n	8014dca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014d32:	f7f0 f82f 	bl	8004d94 <HAL_GetTick>
 8014d36:	4602      	mov	r2, r0
 8014d38:	683b      	ldr	r3, [r7, #0]
 8014d3a:	1ad3      	subs	r3, r2, r3
 8014d3c:	69ba      	ldr	r2, [r7, #24]
 8014d3e:	429a      	cmp	r2, r3
 8014d40:	d302      	bcc.n	8014d48 <UART_WaitOnFlagUntilTimeout+0x30>
 8014d42:	69bb      	ldr	r3, [r7, #24]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d101      	bne.n	8014d4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8014d48:	2303      	movs	r3, #3
 8014d4a:	e04e      	b.n	8014dea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	f003 0304 	and.w	r3, r3, #4
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d037      	beq.n	8014dca <UART_WaitOnFlagUntilTimeout+0xb2>
 8014d5a:	68bb      	ldr	r3, [r7, #8]
 8014d5c:	2b80      	cmp	r3, #128	; 0x80
 8014d5e:	d034      	beq.n	8014dca <UART_WaitOnFlagUntilTimeout+0xb2>
 8014d60:	68bb      	ldr	r3, [r7, #8]
 8014d62:	2b40      	cmp	r3, #64	; 0x40
 8014d64:	d031      	beq.n	8014dca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	69db      	ldr	r3, [r3, #28]
 8014d6c:	f003 0308 	and.w	r3, r3, #8
 8014d70:	2b08      	cmp	r3, #8
 8014d72:	d110      	bne.n	8014d96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	2208      	movs	r2, #8
 8014d7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014d7c:	68f8      	ldr	r0, [r7, #12]
 8014d7e:	f000 f95b 	bl	8015038 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	2208      	movs	r2, #8
 8014d86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	2200      	movs	r2, #0
 8014d8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8014d92:	2301      	movs	r3, #1
 8014d94:	e029      	b.n	8014dea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	69db      	ldr	r3, [r3, #28]
 8014d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014da4:	d111      	bne.n	8014dca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014dae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014db0:	68f8      	ldr	r0, [r7, #12]
 8014db2:	f000 f941 	bl	8015038 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	2220      	movs	r2, #32
 8014dba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	2200      	movs	r2, #0
 8014dc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8014dc6:	2303      	movs	r3, #3
 8014dc8:	e00f      	b.n	8014dea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	69da      	ldr	r2, [r3, #28]
 8014dd0:	68bb      	ldr	r3, [r7, #8]
 8014dd2:	4013      	ands	r3, r2
 8014dd4:	68ba      	ldr	r2, [r7, #8]
 8014dd6:	429a      	cmp	r2, r3
 8014dd8:	bf0c      	ite	eq
 8014dda:	2301      	moveq	r3, #1
 8014ddc:	2300      	movne	r3, #0
 8014dde:	b2db      	uxtb	r3, r3
 8014de0:	461a      	mov	r2, r3
 8014de2:	79fb      	ldrb	r3, [r7, #7]
 8014de4:	429a      	cmp	r2, r3
 8014de6:	d0a0      	beq.n	8014d2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014de8:	2300      	movs	r3, #0
}
 8014dea:	4618      	mov	r0, r3
 8014dec:	3710      	adds	r7, #16
 8014dee:	46bd      	mov	sp, r7
 8014df0:	bd80      	pop	{r7, pc}
	...

08014df4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014df4:	b480      	push	{r7}
 8014df6:	b0a3      	sub	sp, #140	; 0x8c
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	60f8      	str	r0, [r7, #12]
 8014dfc:	60b9      	str	r1, [r7, #8]
 8014dfe:	4613      	mov	r3, r2
 8014e00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	68ba      	ldr	r2, [r7, #8]
 8014e06:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	88fa      	ldrh	r2, [r7, #6]
 8014e0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	88fa      	ldrh	r2, [r7, #6]
 8014e14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	2200      	movs	r2, #0
 8014e1c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	689b      	ldr	r3, [r3, #8]
 8014e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014e26:	d10e      	bne.n	8014e46 <UART_Start_Receive_IT+0x52>
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	691b      	ldr	r3, [r3, #16]
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d105      	bne.n	8014e3c <UART_Start_Receive_IT+0x48>
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	f240 12ff 	movw	r2, #511	; 0x1ff
 8014e36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014e3a:	e02d      	b.n	8014e98 <UART_Start_Receive_IT+0xa4>
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	22ff      	movs	r2, #255	; 0xff
 8014e40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014e44:	e028      	b.n	8014e98 <UART_Start_Receive_IT+0xa4>
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	689b      	ldr	r3, [r3, #8]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d10d      	bne.n	8014e6a <UART_Start_Receive_IT+0x76>
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	691b      	ldr	r3, [r3, #16]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d104      	bne.n	8014e60 <UART_Start_Receive_IT+0x6c>
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	22ff      	movs	r2, #255	; 0xff
 8014e5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014e5e:	e01b      	b.n	8014e98 <UART_Start_Receive_IT+0xa4>
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	227f      	movs	r2, #127	; 0x7f
 8014e64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014e68:	e016      	b.n	8014e98 <UART_Start_Receive_IT+0xa4>
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	689b      	ldr	r3, [r3, #8]
 8014e6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014e72:	d10d      	bne.n	8014e90 <UART_Start_Receive_IT+0x9c>
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	691b      	ldr	r3, [r3, #16]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d104      	bne.n	8014e86 <UART_Start_Receive_IT+0x92>
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	227f      	movs	r2, #127	; 0x7f
 8014e80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014e84:	e008      	b.n	8014e98 <UART_Start_Receive_IT+0xa4>
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	223f      	movs	r2, #63	; 0x3f
 8014e8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014e8e:	e003      	b.n	8014e98 <UART_Start_Receive_IT+0xa4>
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	2200      	movs	r2, #0
 8014e94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	2222      	movs	r2, #34	; 0x22
 8014ea4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	3308      	adds	r3, #8
 8014eae:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014eb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014eb2:	e853 3f00 	ldrex	r3, [r3]
 8014eb6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8014eb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014eba:	f043 0301 	orr.w	r3, r3, #1
 8014ebe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	3308      	adds	r3, #8
 8014ec8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014ecc:	673a      	str	r2, [r7, #112]	; 0x70
 8014ece:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ed0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8014ed2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014ed4:	e841 2300 	strex	r3, r2, [r1]
 8014ed8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8014eda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d1e3      	bne.n	8014ea8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8014ee8:	d14f      	bne.n	8014f8a <UART_Start_Receive_IT+0x196>
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014ef0:	88fa      	ldrh	r2, [r7, #6]
 8014ef2:	429a      	cmp	r2, r3
 8014ef4:	d349      	bcc.n	8014f8a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	689b      	ldr	r3, [r3, #8]
 8014efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014efe:	d107      	bne.n	8014f10 <UART_Start_Receive_IT+0x11c>
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	691b      	ldr	r3, [r3, #16]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d103      	bne.n	8014f10 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	4a47      	ldr	r2, [pc, #284]	; (8015028 <UART_Start_Receive_IT+0x234>)
 8014f0c:	675a      	str	r2, [r3, #116]	; 0x74
 8014f0e:	e002      	b.n	8014f16 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	4a46      	ldr	r2, [pc, #280]	; (801502c <UART_Start_Receive_IT+0x238>)
 8014f14:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	691b      	ldr	r3, [r3, #16]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d01a      	beq.n	8014f54 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f26:	e853 3f00 	ldrex	r3, [r3]
 8014f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014f32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	461a      	mov	r2, r3
 8014f3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014f40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014f42:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014f46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014f48:	e841 2300 	strex	r3, r2, [r1]
 8014f4c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8014f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d1e4      	bne.n	8014f1e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	3308      	adds	r3, #8
 8014f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f5e:	e853 3f00 	ldrex	r3, [r3]
 8014f62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014f6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	3308      	adds	r3, #8
 8014f72:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014f74:	64ba      	str	r2, [r7, #72]	; 0x48
 8014f76:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f78:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014f7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014f7c:	e841 2300 	strex	r3, r2, [r1]
 8014f80:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8014f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d1e5      	bne.n	8014f54 <UART_Start_Receive_IT+0x160>
 8014f88:	e046      	b.n	8015018 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	689b      	ldr	r3, [r3, #8]
 8014f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014f92:	d107      	bne.n	8014fa4 <UART_Start_Receive_IT+0x1b0>
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	691b      	ldr	r3, [r3, #16]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d103      	bne.n	8014fa4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	4a24      	ldr	r2, [pc, #144]	; (8015030 <UART_Start_Receive_IT+0x23c>)
 8014fa0:	675a      	str	r2, [r3, #116]	; 0x74
 8014fa2:	e002      	b.n	8014faa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	4a23      	ldr	r2, [pc, #140]	; (8015034 <UART_Start_Receive_IT+0x240>)
 8014fa8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	691b      	ldr	r3, [r3, #16]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d019      	beq.n	8014fe6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fba:	e853 3f00 	ldrex	r3, [r3]
 8014fbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fc2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8014fc6:	677b      	str	r3, [r7, #116]	; 0x74
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	461a      	mov	r2, r3
 8014fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8014fd2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014fd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014fd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014fd8:	e841 2300 	strex	r3, r2, [r1]
 8014fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8014fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d1e6      	bne.n	8014fb2 <UART_Start_Receive_IT+0x1be>
 8014fe4:	e018      	b.n	8015018 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014fec:	697b      	ldr	r3, [r7, #20]
 8014fee:	e853 3f00 	ldrex	r3, [r3]
 8014ff2:	613b      	str	r3, [r7, #16]
   return(result);
 8014ff4:	693b      	ldr	r3, [r7, #16]
 8014ff6:	f043 0320 	orr.w	r3, r3, #32
 8014ffa:	67bb      	str	r3, [r7, #120]	; 0x78
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	461a      	mov	r2, r3
 8015002:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015004:	623b      	str	r3, [r7, #32]
 8015006:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015008:	69f9      	ldr	r1, [r7, #28]
 801500a:	6a3a      	ldr	r2, [r7, #32]
 801500c:	e841 2300 	strex	r3, r2, [r1]
 8015010:	61bb      	str	r3, [r7, #24]
   return(result);
 8015012:	69bb      	ldr	r3, [r7, #24]
 8015014:	2b00      	cmp	r3, #0
 8015016:	d1e6      	bne.n	8014fe6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8015018:	2300      	movs	r3, #0
}
 801501a:	4618      	mov	r0, r3
 801501c:	378c      	adds	r7, #140	; 0x8c
 801501e:	46bd      	mov	sp, r7
 8015020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015024:	4770      	bx	lr
 8015026:	bf00      	nop
 8015028:	08015859 	.word	0x08015859
 801502c:	080154f9 	.word	0x080154f9
 8015030:	08015341 	.word	0x08015341
 8015034:	08015189 	.word	0x08015189

08015038 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015038:	b480      	push	{r7}
 801503a:	b095      	sub	sp, #84	; 0x54
 801503c:	af00      	add	r7, sp, #0
 801503e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015048:	e853 3f00 	ldrex	r3, [r3]
 801504c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801504e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015050:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015054:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	461a      	mov	r2, r3
 801505c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801505e:	643b      	str	r3, [r7, #64]	; 0x40
 8015060:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015062:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015064:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015066:	e841 2300 	strex	r3, r2, [r1]
 801506a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801506c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801506e:	2b00      	cmp	r3, #0
 8015070:	d1e6      	bne.n	8015040 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	3308      	adds	r3, #8
 8015078:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801507a:	6a3b      	ldr	r3, [r7, #32]
 801507c:	e853 3f00 	ldrex	r3, [r3]
 8015080:	61fb      	str	r3, [r7, #28]
   return(result);
 8015082:	69fa      	ldr	r2, [r7, #28]
 8015084:	4b1e      	ldr	r3, [pc, #120]	; (8015100 <UART_EndRxTransfer+0xc8>)
 8015086:	4013      	ands	r3, r2
 8015088:	64bb      	str	r3, [r7, #72]	; 0x48
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	3308      	adds	r3, #8
 8015090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015092:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015094:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015096:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801509a:	e841 2300 	strex	r3, r2, [r1]
 801509e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80150a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d1e5      	bne.n	8015072 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150aa:	2b01      	cmp	r3, #1
 80150ac:	d118      	bne.n	80150e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	e853 3f00 	ldrex	r3, [r3]
 80150ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80150bc:	68bb      	ldr	r3, [r7, #8]
 80150be:	f023 0310 	bic.w	r3, r3, #16
 80150c2:	647b      	str	r3, [r7, #68]	; 0x44
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	461a      	mov	r2, r3
 80150ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80150cc:	61bb      	str	r3, [r7, #24]
 80150ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80150d0:	6979      	ldr	r1, [r7, #20]
 80150d2:	69ba      	ldr	r2, [r7, #24]
 80150d4:	e841 2300 	strex	r3, r2, [r1]
 80150d8:	613b      	str	r3, [r7, #16]
   return(result);
 80150da:	693b      	ldr	r3, [r7, #16]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d1e6      	bne.n	80150ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	2220      	movs	r2, #32
 80150e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	2200      	movs	r2, #0
 80150ec:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	2200      	movs	r2, #0
 80150f2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80150f4:	bf00      	nop
 80150f6:	3754      	adds	r7, #84	; 0x54
 80150f8:	46bd      	mov	sp, r7
 80150fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150fe:	4770      	bx	lr
 8015100:	effffffe 	.word	0xeffffffe

08015104 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015104:	b580      	push	{r7, lr}
 8015106:	b084      	sub	sp, #16
 8015108:	af00      	add	r7, sp, #0
 801510a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015110:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	2200      	movs	r2, #0
 8015116:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	2200      	movs	r2, #0
 801511e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015122:	68f8      	ldr	r0, [r7, #12]
 8015124:	f7fe ff2e 	bl	8013f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015128:	bf00      	nop
 801512a:	3710      	adds	r7, #16
 801512c:	46bd      	mov	sp, r7
 801512e:	bd80      	pop	{r7, pc}

08015130 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8015130:	b580      	push	{r7, lr}
 8015132:	b088      	sub	sp, #32
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	e853 3f00 	ldrex	r3, [r3]
 8015144:	60bb      	str	r3, [r7, #8]
   return(result);
 8015146:	68bb      	ldr	r3, [r7, #8]
 8015148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801514c:	61fb      	str	r3, [r7, #28]
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	461a      	mov	r2, r3
 8015154:	69fb      	ldr	r3, [r7, #28]
 8015156:	61bb      	str	r3, [r7, #24]
 8015158:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801515a:	6979      	ldr	r1, [r7, #20]
 801515c:	69ba      	ldr	r2, [r7, #24]
 801515e:	e841 2300 	strex	r3, r2, [r1]
 8015162:	613b      	str	r3, [r7, #16]
   return(result);
 8015164:	693b      	ldr	r3, [r7, #16]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d1e6      	bne.n	8015138 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	2220      	movs	r2, #32
 801516e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	2200      	movs	r2, #0
 8015176:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8015178:	6878      	ldr	r0, [r7, #4]
 801517a:	f7fe fef9 	bl	8013f70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801517e:	bf00      	nop
 8015180:	3720      	adds	r7, #32
 8015182:	46bd      	mov	sp, r7
 8015184:	bd80      	pop	{r7, pc}
	...

08015188 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8015188:	b580      	push	{r7, lr}
 801518a:	b09c      	sub	sp, #112	; 0x70
 801518c:	af00      	add	r7, sp, #0
 801518e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015196:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80151a0:	2b22      	cmp	r3, #34	; 0x22
 80151a2:	f040 80be 	bne.w	8015322 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80151b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80151b4:	b2d9      	uxtb	r1, r3
 80151b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80151ba:	b2da      	uxtb	r2, r3
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80151c0:	400a      	ands	r2, r1
 80151c2:	b2d2      	uxtb	r2, r2
 80151c4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80151ca:	1c5a      	adds	r2, r3, #1
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80151d6:	b29b      	uxth	r3, r3
 80151d8:	3b01      	subs	r3, #1
 80151da:	b29a      	uxth	r2, r3
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80151e8:	b29b      	uxth	r3, r3
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	f040 80a1 	bne.w	8015332 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80151f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80151f8:	e853 3f00 	ldrex	r3, [r3]
 80151fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80151fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015200:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015204:	66bb      	str	r3, [r7, #104]	; 0x68
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	461a      	mov	r2, r3
 801520c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801520e:	65bb      	str	r3, [r7, #88]	; 0x58
 8015210:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015212:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015214:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015216:	e841 2300 	strex	r3, r2, [r1]
 801521a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801521c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801521e:	2b00      	cmp	r3, #0
 8015220:	d1e6      	bne.n	80151f0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	3308      	adds	r3, #8
 8015228:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801522a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801522c:	e853 3f00 	ldrex	r3, [r3]
 8015230:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015234:	f023 0301 	bic.w	r3, r3, #1
 8015238:	667b      	str	r3, [r7, #100]	; 0x64
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	3308      	adds	r3, #8
 8015240:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015242:	647a      	str	r2, [r7, #68]	; 0x44
 8015244:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015246:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015248:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801524a:	e841 2300 	strex	r3, r2, [r1]
 801524e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015252:	2b00      	cmp	r3, #0
 8015254:	d1e5      	bne.n	8015222 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	2220      	movs	r2, #32
 801525a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	2200      	movs	r2, #0
 8015262:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	2200      	movs	r2, #0
 8015268:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	4a33      	ldr	r2, [pc, #204]	; (801533c <UART_RxISR_8BIT+0x1b4>)
 8015270:	4293      	cmp	r3, r2
 8015272:	d01f      	beq.n	80152b4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	685b      	ldr	r3, [r3, #4]
 801527a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801527e:	2b00      	cmp	r3, #0
 8015280:	d018      	beq.n	80152b4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801528a:	e853 3f00 	ldrex	r3, [r3]
 801528e:	623b      	str	r3, [r7, #32]
   return(result);
 8015290:	6a3b      	ldr	r3, [r7, #32]
 8015292:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015296:	663b      	str	r3, [r7, #96]	; 0x60
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	461a      	mov	r2, r3
 801529e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80152a0:	633b      	str	r3, [r7, #48]	; 0x30
 80152a2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80152a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80152a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152a8:	e841 2300 	strex	r3, r2, [r1]
 80152ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80152ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d1e6      	bne.n	8015282 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152b8:	2b01      	cmp	r3, #1
 80152ba:	d12e      	bne.n	801531a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	2200      	movs	r2, #0
 80152c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80152c8:	693b      	ldr	r3, [r7, #16]
 80152ca:	e853 3f00 	ldrex	r3, [r3]
 80152ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	f023 0310 	bic.w	r3, r3, #16
 80152d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	461a      	mov	r2, r3
 80152de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80152e0:	61fb      	str	r3, [r7, #28]
 80152e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80152e4:	69b9      	ldr	r1, [r7, #24]
 80152e6:	69fa      	ldr	r2, [r7, #28]
 80152e8:	e841 2300 	strex	r3, r2, [r1]
 80152ec:	617b      	str	r3, [r7, #20]
   return(result);
 80152ee:	697b      	ldr	r3, [r7, #20]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d1e6      	bne.n	80152c2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	69db      	ldr	r3, [r3, #28]
 80152fa:	f003 0310 	and.w	r3, r3, #16
 80152fe:	2b10      	cmp	r3, #16
 8015300:	d103      	bne.n	801530a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	2210      	movs	r2, #16
 8015308:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015310:	4619      	mov	r1, r3
 8015312:	6878      	ldr	r0, [r7, #4]
 8015314:	f7fe fe40 	bl	8013f98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015318:	e00b      	b.n	8015332 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801531a:	6878      	ldr	r0, [r7, #4]
 801531c:	f7ec fe3a 	bl	8001f94 <HAL_UART_RxCpltCallback>
}
 8015320:	e007      	b.n	8015332 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	699a      	ldr	r2, [r3, #24]
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	f042 0208 	orr.w	r2, r2, #8
 8015330:	619a      	str	r2, [r3, #24]
}
 8015332:	bf00      	nop
 8015334:	3770      	adds	r7, #112	; 0x70
 8015336:	46bd      	mov	sp, r7
 8015338:	bd80      	pop	{r7, pc}
 801533a:	bf00      	nop
 801533c:	58000c00 	.word	0x58000c00

08015340 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8015340:	b580      	push	{r7, lr}
 8015342:	b09c      	sub	sp, #112	; 0x70
 8015344:	af00      	add	r7, sp, #0
 8015346:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801534e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015358:	2b22      	cmp	r3, #34	; 0x22
 801535a:	f040 80be 	bne.w	80154da <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015364:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801536c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801536e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8015372:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8015376:	4013      	ands	r3, r2
 8015378:	b29a      	uxth	r2, r3
 801537a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801537c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015382:	1c9a      	adds	r2, r3, #2
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801538e:	b29b      	uxth	r3, r3
 8015390:	3b01      	subs	r3, #1
 8015392:	b29a      	uxth	r2, r3
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80153a0:	b29b      	uxth	r3, r3
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	f040 80a1 	bne.w	80154ea <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80153ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80153b0:	e853 3f00 	ldrex	r3, [r3]
 80153b4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80153b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80153b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80153bc:	667b      	str	r3, [r7, #100]	; 0x64
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	461a      	mov	r2, r3
 80153c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80153c6:	657b      	str	r3, [r7, #84]	; 0x54
 80153c8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80153ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80153cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80153ce:	e841 2300 	strex	r3, r2, [r1]
 80153d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80153d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d1e6      	bne.n	80153a8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	3308      	adds	r3, #8
 80153e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80153e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153e4:	e853 3f00 	ldrex	r3, [r3]
 80153e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80153ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153ec:	f023 0301 	bic.w	r3, r3, #1
 80153f0:	663b      	str	r3, [r7, #96]	; 0x60
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	681b      	ldr	r3, [r3, #0]
 80153f6:	3308      	adds	r3, #8
 80153f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80153fa:	643a      	str	r2, [r7, #64]	; 0x40
 80153fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80153fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015400:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015402:	e841 2300 	strex	r3, r2, [r1]
 8015406:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801540a:	2b00      	cmp	r3, #0
 801540c:	d1e5      	bne.n	80153da <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	2220      	movs	r2, #32
 8015412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	2200      	movs	r2, #0
 801541a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	2200      	movs	r2, #0
 8015420:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	4a33      	ldr	r2, [pc, #204]	; (80154f4 <UART_RxISR_16BIT+0x1b4>)
 8015428:	4293      	cmp	r3, r2
 801542a:	d01f      	beq.n	801546c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	685b      	ldr	r3, [r3, #4]
 8015432:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015436:	2b00      	cmp	r3, #0
 8015438:	d018      	beq.n	801546c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015440:	6a3b      	ldr	r3, [r7, #32]
 8015442:	e853 3f00 	ldrex	r3, [r3]
 8015446:	61fb      	str	r3, [r7, #28]
   return(result);
 8015448:	69fb      	ldr	r3, [r7, #28]
 801544a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801544e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	461a      	mov	r2, r3
 8015456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015458:	62fb      	str	r3, [r7, #44]	; 0x2c
 801545a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801545c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801545e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015460:	e841 2300 	strex	r3, r2, [r1]
 8015464:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015468:	2b00      	cmp	r3, #0
 801546a:	d1e6      	bne.n	801543a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015470:	2b01      	cmp	r3, #1
 8015472:	d12e      	bne.n	80154d2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	2200      	movs	r2, #0
 8015478:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	e853 3f00 	ldrex	r3, [r3]
 8015486:	60bb      	str	r3, [r7, #8]
   return(result);
 8015488:	68bb      	ldr	r3, [r7, #8]
 801548a:	f023 0310 	bic.w	r3, r3, #16
 801548e:	65bb      	str	r3, [r7, #88]	; 0x58
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	461a      	mov	r2, r3
 8015496:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015498:	61bb      	str	r3, [r7, #24]
 801549a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801549c:	6979      	ldr	r1, [r7, #20]
 801549e:	69ba      	ldr	r2, [r7, #24]
 80154a0:	e841 2300 	strex	r3, r2, [r1]
 80154a4:	613b      	str	r3, [r7, #16]
   return(result);
 80154a6:	693b      	ldr	r3, [r7, #16]
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d1e6      	bne.n	801547a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	69db      	ldr	r3, [r3, #28]
 80154b2:	f003 0310 	and.w	r3, r3, #16
 80154b6:	2b10      	cmp	r3, #16
 80154b8:	d103      	bne.n	80154c2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	2210      	movs	r2, #16
 80154c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80154c8:	4619      	mov	r1, r3
 80154ca:	6878      	ldr	r0, [r7, #4]
 80154cc:	f7fe fd64 	bl	8013f98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80154d0:	e00b      	b.n	80154ea <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80154d2:	6878      	ldr	r0, [r7, #4]
 80154d4:	f7ec fd5e 	bl	8001f94 <HAL_UART_RxCpltCallback>
}
 80154d8:	e007      	b.n	80154ea <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	699a      	ldr	r2, [r3, #24]
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	f042 0208 	orr.w	r2, r2, #8
 80154e8:	619a      	str	r2, [r3, #24]
}
 80154ea:	bf00      	nop
 80154ec:	3770      	adds	r7, #112	; 0x70
 80154ee:	46bd      	mov	sp, r7
 80154f0:	bd80      	pop	{r7, pc}
 80154f2:	bf00      	nop
 80154f4:	58000c00 	.word	0x58000c00

080154f8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	b0ac      	sub	sp, #176	; 0xb0
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015506:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	69db      	ldr	r3, [r3, #28]
 8015510:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	689b      	ldr	r3, [r3, #8]
 8015524:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801552e:	2b22      	cmp	r3, #34	; 0x22
 8015530:	f040 8180 	bne.w	8015834 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801553a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801553e:	e123      	b.n	8015788 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015546:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801554a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801554e:	b2d9      	uxtb	r1, r3
 8015550:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8015554:	b2da      	uxtb	r2, r3
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801555a:	400a      	ands	r2, r1
 801555c:	b2d2      	uxtb	r2, r2
 801555e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015564:	1c5a      	adds	r2, r3, #1
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015570:	b29b      	uxth	r3, r3
 8015572:	3b01      	subs	r3, #1
 8015574:	b29a      	uxth	r2, r3
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	69db      	ldr	r3, [r3, #28]
 8015582:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8015586:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801558a:	f003 0307 	and.w	r3, r3, #7
 801558e:	2b00      	cmp	r3, #0
 8015590:	d053      	beq.n	801563a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015592:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015596:	f003 0301 	and.w	r3, r3, #1
 801559a:	2b00      	cmp	r3, #0
 801559c:	d011      	beq.n	80155c2 <UART_RxISR_8BIT_FIFOEN+0xca>
 801559e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80155a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d00b      	beq.n	80155c2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	2201      	movs	r2, #1
 80155b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80155b8:	f043 0201 	orr.w	r2, r3, #1
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80155c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80155c6:	f003 0302 	and.w	r3, r3, #2
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d011      	beq.n	80155f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80155ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80155d2:	f003 0301 	and.w	r3, r3, #1
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d00b      	beq.n	80155f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	2202      	movs	r2, #2
 80155e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80155e8:	f043 0204 	orr.w	r2, r3, #4
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80155f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80155f6:	f003 0304 	and.w	r3, r3, #4
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d011      	beq.n	8015622 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80155fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015602:	f003 0301 	and.w	r3, r3, #1
 8015606:	2b00      	cmp	r3, #0
 8015608:	d00b      	beq.n	8015622 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	2204      	movs	r2, #4
 8015610:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015618:	f043 0202 	orr.w	r2, r3, #2
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015628:	2b00      	cmp	r3, #0
 801562a:	d006      	beq.n	801563a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801562c:	6878      	ldr	r0, [r7, #4]
 801562e:	f7fe fca9 	bl	8013f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	2200      	movs	r2, #0
 8015636:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015640:	b29b      	uxth	r3, r3
 8015642:	2b00      	cmp	r3, #0
 8015644:	f040 80a0 	bne.w	8015788 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801564e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015650:	e853 3f00 	ldrex	r3, [r3]
 8015654:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8015656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801565c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	461a      	mov	r2, r3
 8015666:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801566a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801566c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801566e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8015670:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015672:	e841 2300 	strex	r3, r2, [r1]
 8015676:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8015678:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801567a:	2b00      	cmp	r3, #0
 801567c:	d1e4      	bne.n	8015648 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	3308      	adds	r3, #8
 8015684:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015688:	e853 3f00 	ldrex	r3, [r3]
 801568c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801568e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015690:	4b6e      	ldr	r3, [pc, #440]	; (801584c <UART_RxISR_8BIT_FIFOEN+0x354>)
 8015692:	4013      	ands	r3, r2
 8015694:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	3308      	adds	r3, #8
 801569e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80156a2:	66ba      	str	r2, [r7, #104]	; 0x68
 80156a4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80156a6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80156a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80156aa:	e841 2300 	strex	r3, r2, [r1]
 80156ae:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80156b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d1e3      	bne.n	801567e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	2220      	movs	r2, #32
 80156ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	2200      	movs	r2, #0
 80156c2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	2200      	movs	r2, #0
 80156c8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	4a60      	ldr	r2, [pc, #384]	; (8015850 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80156d0:	4293      	cmp	r3, r2
 80156d2:	d021      	beq.n	8015718 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	685b      	ldr	r3, [r3, #4]
 80156da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d01a      	beq.n	8015718 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80156ea:	e853 3f00 	ldrex	r3, [r3]
 80156ee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80156f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80156f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80156f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	461a      	mov	r2, r3
 8015700:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015704:	657b      	str	r3, [r7, #84]	; 0x54
 8015706:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015708:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801570a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801570c:	e841 2300 	strex	r3, r2, [r1]
 8015710:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015714:	2b00      	cmp	r3, #0
 8015716:	d1e4      	bne.n	80156e2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801571c:	2b01      	cmp	r3, #1
 801571e:	d130      	bne.n	8015782 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	2200      	movs	r2, #0
 8015724:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801572c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801572e:	e853 3f00 	ldrex	r3, [r3]
 8015732:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015736:	f023 0310 	bic.w	r3, r3, #16
 801573a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	461a      	mov	r2, r3
 8015744:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015748:	643b      	str	r3, [r7, #64]	; 0x40
 801574a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801574c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801574e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015750:	e841 2300 	strex	r3, r2, [r1]
 8015754:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015758:	2b00      	cmp	r3, #0
 801575a:	d1e4      	bne.n	8015726 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	69db      	ldr	r3, [r3, #28]
 8015762:	f003 0310 	and.w	r3, r3, #16
 8015766:	2b10      	cmp	r3, #16
 8015768:	d103      	bne.n	8015772 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	2210      	movs	r2, #16
 8015770:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015778:	4619      	mov	r1, r3
 801577a:	6878      	ldr	r0, [r7, #4]
 801577c:	f7fe fc0c 	bl	8013f98 <HAL_UARTEx_RxEventCallback>
 8015780:	e002      	b.n	8015788 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8015782:	6878      	ldr	r0, [r7, #4]
 8015784:	f7ec fc06 	bl	8001f94 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015788:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801578c:	2b00      	cmp	r3, #0
 801578e:	d006      	beq.n	801579e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8015790:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015794:	f003 0320 	and.w	r3, r3, #32
 8015798:	2b00      	cmp	r3, #0
 801579a:	f47f aed1 	bne.w	8015540 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80157a4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80157a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d049      	beq.n	8015844 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80157b6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80157ba:	429a      	cmp	r2, r3
 80157bc:	d242      	bcs.n	8015844 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	3308      	adds	r3, #8
 80157c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80157c6:	6a3b      	ldr	r3, [r7, #32]
 80157c8:	e853 3f00 	ldrex	r3, [r3]
 80157cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80157ce:	69fb      	ldr	r3, [r7, #28]
 80157d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80157d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	3308      	adds	r3, #8
 80157de:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80157e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80157e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80157e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80157e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80157ea:	e841 2300 	strex	r3, r2, [r1]
 80157ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80157f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d1e3      	bne.n	80157be <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	4a16      	ldr	r2, [pc, #88]	; (8015854 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80157fa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	e853 3f00 	ldrex	r3, [r3]
 8015808:	60bb      	str	r3, [r7, #8]
   return(result);
 801580a:	68bb      	ldr	r3, [r7, #8]
 801580c:	f043 0320 	orr.w	r3, r3, #32
 8015810:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	461a      	mov	r2, r3
 801581a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801581e:	61bb      	str	r3, [r7, #24]
 8015820:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015822:	6979      	ldr	r1, [r7, #20]
 8015824:	69ba      	ldr	r2, [r7, #24]
 8015826:	e841 2300 	strex	r3, r2, [r1]
 801582a:	613b      	str	r3, [r7, #16]
   return(result);
 801582c:	693b      	ldr	r3, [r7, #16]
 801582e:	2b00      	cmp	r3, #0
 8015830:	d1e4      	bne.n	80157fc <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015832:	e007      	b.n	8015844 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	699a      	ldr	r2, [r3, #24]
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	f042 0208 	orr.w	r2, r2, #8
 8015842:	619a      	str	r2, [r3, #24]
}
 8015844:	bf00      	nop
 8015846:	37b0      	adds	r7, #176	; 0xb0
 8015848:	46bd      	mov	sp, r7
 801584a:	bd80      	pop	{r7, pc}
 801584c:	effffffe 	.word	0xeffffffe
 8015850:	58000c00 	.word	0x58000c00
 8015854:	08015189 	.word	0x08015189

08015858 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b0ae      	sub	sp, #184	; 0xb8
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015866:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	69db      	ldr	r3, [r3, #28]
 8015870:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	681b      	ldr	r3, [r3, #0]
 8015882:	689b      	ldr	r3, [r3, #8]
 8015884:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801588e:	2b22      	cmp	r3, #34	; 0x22
 8015890:	f040 8184 	bne.w	8015b9c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801589a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801589e:	e127      	b.n	8015af0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158a6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80158ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80158b2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80158b6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80158ba:	4013      	ands	r3, r2
 80158bc:	b29a      	uxth	r2, r3
 80158be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80158c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80158c8:	1c9a      	adds	r2, r3, #2
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80158d4:	b29b      	uxth	r3, r3
 80158d6:	3b01      	subs	r3, #1
 80158d8:	b29a      	uxth	r2, r3
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	69db      	ldr	r3, [r3, #28]
 80158e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80158ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80158ee:	f003 0307 	and.w	r3, r3, #7
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d053      	beq.n	801599e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80158f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80158fa:	f003 0301 	and.w	r3, r3, #1
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d011      	beq.n	8015926 <UART_RxISR_16BIT_FIFOEN+0xce>
 8015902:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801590a:	2b00      	cmp	r3, #0
 801590c:	d00b      	beq.n	8015926 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	2201      	movs	r2, #1
 8015914:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801591c:	f043 0201 	orr.w	r2, r3, #1
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015926:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801592a:	f003 0302 	and.w	r3, r3, #2
 801592e:	2b00      	cmp	r3, #0
 8015930:	d011      	beq.n	8015956 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8015932:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015936:	f003 0301 	and.w	r3, r3, #1
 801593a:	2b00      	cmp	r3, #0
 801593c:	d00b      	beq.n	8015956 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	2202      	movs	r2, #2
 8015944:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801594c:	f043 0204 	orr.w	r2, r3, #4
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015956:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801595a:	f003 0304 	and.w	r3, r3, #4
 801595e:	2b00      	cmp	r3, #0
 8015960:	d011      	beq.n	8015986 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8015962:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015966:	f003 0301 	and.w	r3, r3, #1
 801596a:	2b00      	cmp	r3, #0
 801596c:	d00b      	beq.n	8015986 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	2204      	movs	r2, #4
 8015974:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801597c:	f043 0202 	orr.w	r2, r3, #2
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801598c:	2b00      	cmp	r3, #0
 801598e:	d006      	beq.n	801599e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015990:	6878      	ldr	r0, [r7, #4]
 8015992:	f7fe faf7 	bl	8013f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	2200      	movs	r2, #0
 801599a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80159a4:	b29b      	uxth	r3, r3
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	f040 80a2 	bne.w	8015af0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80159b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80159b4:	e853 3f00 	ldrex	r3, [r3]
 80159b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80159ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80159bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80159c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	461a      	mov	r2, r3
 80159ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80159ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80159d2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80159d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80159d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80159da:	e841 2300 	strex	r3, r2, [r1]
 80159de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80159e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d1e2      	bne.n	80159ac <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	3308      	adds	r3, #8
 80159ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80159ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80159f0:	e853 3f00 	ldrex	r3, [r3]
 80159f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80159f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80159f8:	4b6e      	ldr	r3, [pc, #440]	; (8015bb4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80159fa:	4013      	ands	r3, r2
 80159fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	3308      	adds	r3, #8
 8015a06:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8015a0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8015a0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8015a10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015a12:	e841 2300 	strex	r3, r2, [r1]
 8015a16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8015a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d1e3      	bne.n	80159e6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	2220      	movs	r2, #32
 8015a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	2200      	movs	r2, #0
 8015a2a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	2200      	movs	r2, #0
 8015a30:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	4a60      	ldr	r2, [pc, #384]	; (8015bb8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8015a38:	4293      	cmp	r3, r2
 8015a3a:	d021      	beq.n	8015a80 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	685b      	ldr	r3, [r3, #4]
 8015a42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d01a      	beq.n	8015a80 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	681b      	ldr	r3, [r3, #0]
 8015a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a52:	e853 3f00 	ldrex	r3, [r3]
 8015a56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015a5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	461a      	mov	r2, r3
 8015a68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015a6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8015a6e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015a72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015a74:	e841 2300 	strex	r3, r2, [r1]
 8015a78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d1e4      	bne.n	8015a4a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a84:	2b01      	cmp	r3, #1
 8015a86:	d130      	bne.n	8015aea <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	2200      	movs	r2, #0
 8015a8c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a96:	e853 3f00 	ldrex	r3, [r3]
 8015a9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a9e:	f023 0310 	bic.w	r3, r3, #16
 8015aa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	461a      	mov	r2, r3
 8015aac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8015ab2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ab4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015ab6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015ab8:	e841 2300 	strex	r3, r2, [r1]
 8015abc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d1e4      	bne.n	8015a8e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	69db      	ldr	r3, [r3, #28]
 8015aca:	f003 0310 	and.w	r3, r3, #16
 8015ace:	2b10      	cmp	r3, #16
 8015ad0:	d103      	bne.n	8015ada <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	2210      	movs	r2, #16
 8015ad8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015ae0:	4619      	mov	r1, r3
 8015ae2:	6878      	ldr	r0, [r7, #4]
 8015ae4:	f7fe fa58 	bl	8013f98 <HAL_UARTEx_RxEventCallback>
 8015ae8:	e002      	b.n	8015af0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8015aea:	6878      	ldr	r0, [r7, #4]
 8015aec:	f7ec fa52 	bl	8001f94 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015af0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d006      	beq.n	8015b06 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8015af8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015afc:	f003 0320 	and.w	r3, r3, #32
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	f47f aecd 	bne.w	80158a0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015b0c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8015b10:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d049      	beq.n	8015bac <UART_RxISR_16BIT_FIFOEN+0x354>
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015b1e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8015b22:	429a      	cmp	r2, r3
 8015b24:	d242      	bcs.n	8015bac <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	3308      	adds	r3, #8
 8015b2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b30:	e853 3f00 	ldrex	r3, [r3]
 8015b34:	623b      	str	r3, [r7, #32]
   return(result);
 8015b36:	6a3b      	ldr	r3, [r7, #32]
 8015b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015b3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	3308      	adds	r3, #8
 8015b46:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015b4a:	633a      	str	r2, [r7, #48]	; 0x30
 8015b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b52:	e841 2300 	strex	r3, r2, [r1]
 8015b56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d1e3      	bne.n	8015b26 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	4a16      	ldr	r2, [pc, #88]	; (8015bbc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8015b62:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b6a:	693b      	ldr	r3, [r7, #16]
 8015b6c:	e853 3f00 	ldrex	r3, [r3]
 8015b70:	60fb      	str	r3, [r7, #12]
   return(result);
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	f043 0320 	orr.w	r3, r3, #32
 8015b78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	461a      	mov	r2, r3
 8015b82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015b86:	61fb      	str	r3, [r7, #28]
 8015b88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b8a:	69b9      	ldr	r1, [r7, #24]
 8015b8c:	69fa      	ldr	r2, [r7, #28]
 8015b8e:	e841 2300 	strex	r3, r2, [r1]
 8015b92:	617b      	str	r3, [r7, #20]
   return(result);
 8015b94:	697b      	ldr	r3, [r7, #20]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d1e4      	bne.n	8015b64 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015b9a:	e007      	b.n	8015bac <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	699a      	ldr	r2, [r3, #24]
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	f042 0208 	orr.w	r2, r2, #8
 8015baa:	619a      	str	r2, [r3, #24]
}
 8015bac:	bf00      	nop
 8015bae:	37b8      	adds	r7, #184	; 0xb8
 8015bb0:	46bd      	mov	sp, r7
 8015bb2:	bd80      	pop	{r7, pc}
 8015bb4:	effffffe 	.word	0xeffffffe
 8015bb8:	58000c00 	.word	0x58000c00
 8015bbc:	08015341 	.word	0x08015341

08015bc0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8015bc0:	b480      	push	{r7}
 8015bc2:	b083      	sub	sp, #12
 8015bc4:	af00      	add	r7, sp, #0
 8015bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8015bc8:	bf00      	nop
 8015bca:	370c      	adds	r7, #12
 8015bcc:	46bd      	mov	sp, r7
 8015bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bd2:	4770      	bx	lr

08015bd4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8015bd4:	b480      	push	{r7}
 8015bd6:	b083      	sub	sp, #12
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8015bdc:	bf00      	nop
 8015bde:	370c      	adds	r7, #12
 8015be0:	46bd      	mov	sp, r7
 8015be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be6:	4770      	bx	lr

08015be8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8015be8:	b480      	push	{r7}
 8015bea:	b083      	sub	sp, #12
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8015bf0:	bf00      	nop
 8015bf2:	370c      	adds	r7, #12
 8015bf4:	46bd      	mov	sp, r7
 8015bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bfa:	4770      	bx	lr

08015bfc <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8015bfc:	b480      	push	{r7}
 8015bfe:	b089      	sub	sp, #36	; 0x24
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8015c0a:	2b01      	cmp	r3, #1
 8015c0c:	d101      	bne.n	8015c12 <HAL_UARTEx_EnableStopMode+0x16>
 8015c0e:	2302      	movs	r3, #2
 8015c10:	e021      	b.n	8015c56 <HAL_UARTEx_EnableStopMode+0x5a>
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	2201      	movs	r2, #1
 8015c16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	e853 3f00 	ldrex	r3, [r3]
 8015c26:	60bb      	str	r3, [r7, #8]
   return(result);
 8015c28:	68bb      	ldr	r3, [r7, #8]
 8015c2a:	f043 0302 	orr.w	r3, r3, #2
 8015c2e:	61fb      	str	r3, [r7, #28]
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	461a      	mov	r2, r3
 8015c36:	69fb      	ldr	r3, [r7, #28]
 8015c38:	61bb      	str	r3, [r7, #24]
 8015c3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c3c:	6979      	ldr	r1, [r7, #20]
 8015c3e:	69ba      	ldr	r2, [r7, #24]
 8015c40:	e841 2300 	strex	r3, r2, [r1]
 8015c44:	613b      	str	r3, [r7, #16]
   return(result);
 8015c46:	693b      	ldr	r3, [r7, #16]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d1e6      	bne.n	8015c1a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	2200      	movs	r2, #0
 8015c50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015c54:	2300      	movs	r3, #0
}
 8015c56:	4618      	mov	r0, r3
 8015c58:	3724      	adds	r7, #36	; 0x24
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c60:	4770      	bx	lr

08015c62 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8015c62:	b580      	push	{r7, lr}
 8015c64:	b084      	sub	sp, #16
 8015c66:	af00      	add	r7, sp, #0
 8015c68:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8015c70:	2b01      	cmp	r3, #1
 8015c72:	d101      	bne.n	8015c78 <HAL_UARTEx_EnableFifoMode+0x16>
 8015c74:	2302      	movs	r3, #2
 8015c76:	e02b      	b.n	8015cd0 <HAL_UARTEx_EnableFifoMode+0x6e>
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	2201      	movs	r2, #1
 8015c7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	2224      	movs	r2, #36	; 0x24
 8015c84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	681a      	ldr	r2, [r3, #0]
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	f022 0201 	bic.w	r2, r2, #1
 8015c9e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015ca6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8015cae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	68fa      	ldr	r2, [r7, #12]
 8015cb6:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015cb8:	6878      	ldr	r0, [r7, #4]
 8015cba:	f000 f8c3 	bl	8015e44 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	2220      	movs	r2, #32
 8015cc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	2200      	movs	r2, #0
 8015cca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015cce:	2300      	movs	r3, #0
}
 8015cd0:	4618      	mov	r0, r3
 8015cd2:	3710      	adds	r7, #16
 8015cd4:	46bd      	mov	sp, r7
 8015cd6:	bd80      	pop	{r7, pc}

08015cd8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8015cd8:	b480      	push	{r7}
 8015cda:	b085      	sub	sp, #20
 8015cdc:	af00      	add	r7, sp, #0
 8015cde:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8015ce6:	2b01      	cmp	r3, #1
 8015ce8:	d101      	bne.n	8015cee <HAL_UARTEx_DisableFifoMode+0x16>
 8015cea:	2302      	movs	r3, #2
 8015cec:	e027      	b.n	8015d3e <HAL_UARTEx_DisableFifoMode+0x66>
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	2201      	movs	r2, #1
 8015cf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	2224      	movs	r2, #36	; 0x24
 8015cfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	681a      	ldr	r2, [r3, #0]
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	f022 0201 	bic.w	r2, r2, #1
 8015d14:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8015d1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	2200      	movs	r2, #0
 8015d22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	68fa      	ldr	r2, [r7, #12]
 8015d2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	2220      	movs	r2, #32
 8015d30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	2200      	movs	r2, #0
 8015d38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015d3c:	2300      	movs	r3, #0
}
 8015d3e:	4618      	mov	r0, r3
 8015d40:	3714      	adds	r7, #20
 8015d42:	46bd      	mov	sp, r7
 8015d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d48:	4770      	bx	lr

08015d4a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8015d4a:	b580      	push	{r7, lr}
 8015d4c:	b084      	sub	sp, #16
 8015d4e:	af00      	add	r7, sp, #0
 8015d50:	6078      	str	r0, [r7, #4]
 8015d52:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8015d5a:	2b01      	cmp	r3, #1
 8015d5c:	d101      	bne.n	8015d62 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8015d5e:	2302      	movs	r3, #2
 8015d60:	e02d      	b.n	8015dbe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	2201      	movs	r2, #1
 8015d66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	2224      	movs	r2, #36	; 0x24
 8015d6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	681a      	ldr	r2, [r3, #0]
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	f022 0201 	bic.w	r2, r2, #1
 8015d88:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	689b      	ldr	r3, [r3, #8]
 8015d90:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	681b      	ldr	r3, [r3, #0]
 8015d98:	683a      	ldr	r2, [r7, #0]
 8015d9a:	430a      	orrs	r2, r1
 8015d9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015d9e:	6878      	ldr	r0, [r7, #4]
 8015da0:	f000 f850 	bl	8015e44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	68fa      	ldr	r2, [r7, #12]
 8015daa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	2220      	movs	r2, #32
 8015db0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	2200      	movs	r2, #0
 8015db8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015dbc:	2300      	movs	r3, #0
}
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	3710      	adds	r7, #16
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	bd80      	pop	{r7, pc}

08015dc6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8015dc6:	b580      	push	{r7, lr}
 8015dc8:	b084      	sub	sp, #16
 8015dca:	af00      	add	r7, sp, #0
 8015dcc:	6078      	str	r0, [r7, #4]
 8015dce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8015dd6:	2b01      	cmp	r3, #1
 8015dd8:	d101      	bne.n	8015dde <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8015dda:	2302      	movs	r3, #2
 8015ddc:	e02d      	b.n	8015e3a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	2201      	movs	r2, #1
 8015de2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	2224      	movs	r2, #36	; 0x24
 8015dea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	681a      	ldr	r2, [r3, #0]
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	f022 0201 	bic.w	r2, r2, #1
 8015e04:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	689b      	ldr	r3, [r3, #8]
 8015e0c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	683a      	ldr	r2, [r7, #0]
 8015e16:	430a      	orrs	r2, r1
 8015e18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015e1a:	6878      	ldr	r0, [r7, #4]
 8015e1c:	f000 f812 	bl	8015e44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	68fa      	ldr	r2, [r7, #12]
 8015e26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	2220      	movs	r2, #32
 8015e2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	2200      	movs	r2, #0
 8015e34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015e38:	2300      	movs	r3, #0
}
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	3710      	adds	r7, #16
 8015e3e:	46bd      	mov	sp, r7
 8015e40:	bd80      	pop	{r7, pc}
	...

08015e44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8015e44:	b480      	push	{r7}
 8015e46:	b085      	sub	sp, #20
 8015e48:	af00      	add	r7, sp, #0
 8015e4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d108      	bne.n	8015e66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	2201      	movs	r2, #1
 8015e58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	2201      	movs	r2, #1
 8015e60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8015e64:	e031      	b.n	8015eca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8015e66:	2310      	movs	r3, #16
 8015e68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8015e6a:	2310      	movs	r3, #16
 8015e6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	689b      	ldr	r3, [r3, #8]
 8015e74:	0e5b      	lsrs	r3, r3, #25
 8015e76:	b2db      	uxtb	r3, r3
 8015e78:	f003 0307 	and.w	r3, r3, #7
 8015e7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	689b      	ldr	r3, [r3, #8]
 8015e84:	0f5b      	lsrs	r3, r3, #29
 8015e86:	b2db      	uxtb	r3, r3
 8015e88:	f003 0307 	and.w	r3, r3, #7
 8015e8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015e8e:	7bbb      	ldrb	r3, [r7, #14]
 8015e90:	7b3a      	ldrb	r2, [r7, #12]
 8015e92:	4911      	ldr	r1, [pc, #68]	; (8015ed8 <UARTEx_SetNbDataToProcess+0x94>)
 8015e94:	5c8a      	ldrb	r2, [r1, r2]
 8015e96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8015e9a:	7b3a      	ldrb	r2, [r7, #12]
 8015e9c:	490f      	ldr	r1, [pc, #60]	; (8015edc <UARTEx_SetNbDataToProcess+0x98>)
 8015e9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015ea0:	fb93 f3f2 	sdiv	r3, r3, r2
 8015ea4:	b29a      	uxth	r2, r3
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8015eac:	7bfb      	ldrb	r3, [r7, #15]
 8015eae:	7b7a      	ldrb	r2, [r7, #13]
 8015eb0:	4909      	ldr	r1, [pc, #36]	; (8015ed8 <UARTEx_SetNbDataToProcess+0x94>)
 8015eb2:	5c8a      	ldrb	r2, [r1, r2]
 8015eb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8015eb8:	7b7a      	ldrb	r2, [r7, #13]
 8015eba:	4908      	ldr	r1, [pc, #32]	; (8015edc <UARTEx_SetNbDataToProcess+0x98>)
 8015ebc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8015ebe:	fb93 f3f2 	sdiv	r3, r3, r2
 8015ec2:	b29a      	uxth	r2, r3
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8015eca:	bf00      	nop
 8015ecc:	3714      	adds	r7, #20
 8015ece:	46bd      	mov	sp, r7
 8015ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ed4:	4770      	bx	lr
 8015ed6:	bf00      	nop
 8015ed8:	0801a1e4 	.word	0x0801a1e4
 8015edc:	0801a1ec 	.word	0x0801a1ec

08015ee0 <__NVIC_SetPriority>:
{
 8015ee0:	b480      	push	{r7}
 8015ee2:	b083      	sub	sp, #12
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	4603      	mov	r3, r0
 8015ee8:	6039      	str	r1, [r7, #0]
 8015eea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8015eec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	db0a      	blt.n	8015f0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015ef4:	683b      	ldr	r3, [r7, #0]
 8015ef6:	b2da      	uxtb	r2, r3
 8015ef8:	490c      	ldr	r1, [pc, #48]	; (8015f2c <__NVIC_SetPriority+0x4c>)
 8015efa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015efe:	0112      	lsls	r2, r2, #4
 8015f00:	b2d2      	uxtb	r2, r2
 8015f02:	440b      	add	r3, r1
 8015f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015f08:	e00a      	b.n	8015f20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015f0a:	683b      	ldr	r3, [r7, #0]
 8015f0c:	b2da      	uxtb	r2, r3
 8015f0e:	4908      	ldr	r1, [pc, #32]	; (8015f30 <__NVIC_SetPriority+0x50>)
 8015f10:	88fb      	ldrh	r3, [r7, #6]
 8015f12:	f003 030f 	and.w	r3, r3, #15
 8015f16:	3b04      	subs	r3, #4
 8015f18:	0112      	lsls	r2, r2, #4
 8015f1a:	b2d2      	uxtb	r2, r2
 8015f1c:	440b      	add	r3, r1
 8015f1e:	761a      	strb	r2, [r3, #24]
}
 8015f20:	bf00      	nop
 8015f22:	370c      	adds	r7, #12
 8015f24:	46bd      	mov	sp, r7
 8015f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f2a:	4770      	bx	lr
 8015f2c:	e000e100 	.word	0xe000e100
 8015f30:	e000ed00 	.word	0xe000ed00

08015f34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8015f34:	b580      	push	{r7, lr}
 8015f36:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8015f38:	4b05      	ldr	r3, [pc, #20]	; (8015f50 <SysTick_Handler+0x1c>)
 8015f3a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8015f3c:	f002 f958 	bl	80181f0 <xTaskGetSchedulerState>
 8015f40:	4603      	mov	r3, r0
 8015f42:	2b01      	cmp	r3, #1
 8015f44:	d001      	beq.n	8015f4a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8015f46:	f002 ff77 	bl	8018e38 <xPortSysTickHandler>
  }
}
 8015f4a:	bf00      	nop
 8015f4c:	bd80      	pop	{r7, pc}
 8015f4e:	bf00      	nop
 8015f50:	e000e010 	.word	0xe000e010

08015f54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8015f54:	b580      	push	{r7, lr}
 8015f56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8015f58:	2100      	movs	r1, #0
 8015f5a:	f06f 0004 	mvn.w	r0, #4
 8015f5e:	f7ff ffbf 	bl	8015ee0 <__NVIC_SetPriority>
#endif
}
 8015f62:	bf00      	nop
 8015f64:	bd80      	pop	{r7, pc}
	...

08015f68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015f68:	b480      	push	{r7}
 8015f6a:	b083      	sub	sp, #12
 8015f6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015f6e:	f3ef 8305 	mrs	r3, IPSR
 8015f72:	603b      	str	r3, [r7, #0]
  return(result);
 8015f74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d003      	beq.n	8015f82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8015f7a:	f06f 0305 	mvn.w	r3, #5
 8015f7e:	607b      	str	r3, [r7, #4]
 8015f80:	e00c      	b.n	8015f9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8015f82:	4b0a      	ldr	r3, [pc, #40]	; (8015fac <osKernelInitialize+0x44>)
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d105      	bne.n	8015f96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8015f8a:	4b08      	ldr	r3, [pc, #32]	; (8015fac <osKernelInitialize+0x44>)
 8015f8c:	2201      	movs	r2, #1
 8015f8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015f90:	2300      	movs	r3, #0
 8015f92:	607b      	str	r3, [r7, #4]
 8015f94:	e002      	b.n	8015f9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8015f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015f9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015f9c:	687b      	ldr	r3, [r7, #4]
}
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	370c      	adds	r7, #12
 8015fa2:	46bd      	mov	sp, r7
 8015fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa8:	4770      	bx	lr
 8015faa:	bf00      	nop
 8015fac:	2400205c 	.word	0x2400205c

08015fb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8015fb0:	b580      	push	{r7, lr}
 8015fb2:	b082      	sub	sp, #8
 8015fb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015fb6:	f3ef 8305 	mrs	r3, IPSR
 8015fba:	603b      	str	r3, [r7, #0]
  return(result);
 8015fbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d003      	beq.n	8015fca <osKernelStart+0x1a>
    stat = osErrorISR;
 8015fc2:	f06f 0305 	mvn.w	r3, #5
 8015fc6:	607b      	str	r3, [r7, #4]
 8015fc8:	e010      	b.n	8015fec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8015fca:	4b0b      	ldr	r3, [pc, #44]	; (8015ff8 <osKernelStart+0x48>)
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	2b01      	cmp	r3, #1
 8015fd0:	d109      	bne.n	8015fe6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8015fd2:	f7ff ffbf 	bl	8015f54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015fd6:	4b08      	ldr	r3, [pc, #32]	; (8015ff8 <osKernelStart+0x48>)
 8015fd8:	2202      	movs	r2, #2
 8015fda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015fdc:	f001 fc0c 	bl	80177f8 <vTaskStartScheduler>
      stat = osOK;
 8015fe0:	2300      	movs	r3, #0
 8015fe2:	607b      	str	r3, [r7, #4]
 8015fe4:	e002      	b.n	8015fec <osKernelStart+0x3c>
    } else {
      stat = osError;
 8015fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015fea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015fec:	687b      	ldr	r3, [r7, #4]
}
 8015fee:	4618      	mov	r0, r3
 8015ff0:	3708      	adds	r7, #8
 8015ff2:	46bd      	mov	sp, r7
 8015ff4:	bd80      	pop	{r7, pc}
 8015ff6:	bf00      	nop
 8015ff8:	2400205c 	.word	0x2400205c

08015ffc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015ffc:	b580      	push	{r7, lr}
 8015ffe:	b08e      	sub	sp, #56	; 0x38
 8016000:	af04      	add	r7, sp, #16
 8016002:	60f8      	str	r0, [r7, #12]
 8016004:	60b9      	str	r1, [r7, #8]
 8016006:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016008:	2300      	movs	r3, #0
 801600a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801600c:	f3ef 8305 	mrs	r3, IPSR
 8016010:	617b      	str	r3, [r7, #20]
  return(result);
 8016012:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8016014:	2b00      	cmp	r3, #0
 8016016:	d17e      	bne.n	8016116 <osThreadNew+0x11a>
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d07b      	beq.n	8016116 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801601e:	2380      	movs	r3, #128	; 0x80
 8016020:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8016022:	2318      	movs	r3, #24
 8016024:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8016026:	2300      	movs	r3, #0
 8016028:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801602a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801602e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	2b00      	cmp	r3, #0
 8016034:	d045      	beq.n	80160c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	2b00      	cmp	r3, #0
 801603c:	d002      	beq.n	8016044 <osThreadNew+0x48>
        name = attr->name;
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	699b      	ldr	r3, [r3, #24]
 8016048:	2b00      	cmp	r3, #0
 801604a:	d002      	beq.n	8016052 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	699b      	ldr	r3, [r3, #24]
 8016050:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8016052:	69fb      	ldr	r3, [r7, #28]
 8016054:	2b00      	cmp	r3, #0
 8016056:	d008      	beq.n	801606a <osThreadNew+0x6e>
 8016058:	69fb      	ldr	r3, [r7, #28]
 801605a:	2b38      	cmp	r3, #56	; 0x38
 801605c:	d805      	bhi.n	801606a <osThreadNew+0x6e>
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	685b      	ldr	r3, [r3, #4]
 8016062:	f003 0301 	and.w	r3, r3, #1
 8016066:	2b00      	cmp	r3, #0
 8016068:	d001      	beq.n	801606e <osThreadNew+0x72>
        return (NULL);
 801606a:	2300      	movs	r3, #0
 801606c:	e054      	b.n	8016118 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	695b      	ldr	r3, [r3, #20]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d003      	beq.n	801607e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	695b      	ldr	r3, [r3, #20]
 801607a:	089b      	lsrs	r3, r3, #2
 801607c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	689b      	ldr	r3, [r3, #8]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d00e      	beq.n	80160a4 <osThreadNew+0xa8>
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	68db      	ldr	r3, [r3, #12]
 801608a:	2b5b      	cmp	r3, #91	; 0x5b
 801608c:	d90a      	bls.n	80160a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016092:	2b00      	cmp	r3, #0
 8016094:	d006      	beq.n	80160a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	695b      	ldr	r3, [r3, #20]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d002      	beq.n	80160a4 <osThreadNew+0xa8>
        mem = 1;
 801609e:	2301      	movs	r3, #1
 80160a0:	61bb      	str	r3, [r7, #24]
 80160a2:	e010      	b.n	80160c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	689b      	ldr	r3, [r3, #8]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d10c      	bne.n	80160c6 <osThreadNew+0xca>
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	68db      	ldr	r3, [r3, #12]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d108      	bne.n	80160c6 <osThreadNew+0xca>
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	691b      	ldr	r3, [r3, #16]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d104      	bne.n	80160c6 <osThreadNew+0xca>
          mem = 0;
 80160bc:	2300      	movs	r3, #0
 80160be:	61bb      	str	r3, [r7, #24]
 80160c0:	e001      	b.n	80160c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80160c2:	2300      	movs	r3, #0
 80160c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80160c6:	69bb      	ldr	r3, [r7, #24]
 80160c8:	2b01      	cmp	r3, #1
 80160ca:	d110      	bne.n	80160ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80160d0:	687a      	ldr	r2, [r7, #4]
 80160d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80160d4:	9202      	str	r2, [sp, #8]
 80160d6:	9301      	str	r3, [sp, #4]
 80160d8:	69fb      	ldr	r3, [r7, #28]
 80160da:	9300      	str	r3, [sp, #0]
 80160dc:	68bb      	ldr	r3, [r7, #8]
 80160de:	6a3a      	ldr	r2, [r7, #32]
 80160e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80160e2:	68f8      	ldr	r0, [r7, #12]
 80160e4:	f001 f9b2 	bl	801744c <xTaskCreateStatic>
 80160e8:	4603      	mov	r3, r0
 80160ea:	613b      	str	r3, [r7, #16]
 80160ec:	e013      	b.n	8016116 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80160ee:	69bb      	ldr	r3, [r7, #24]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d110      	bne.n	8016116 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80160f4:	6a3b      	ldr	r3, [r7, #32]
 80160f6:	b29a      	uxth	r2, r3
 80160f8:	f107 0310 	add.w	r3, r7, #16
 80160fc:	9301      	str	r3, [sp, #4]
 80160fe:	69fb      	ldr	r3, [r7, #28]
 8016100:	9300      	str	r3, [sp, #0]
 8016102:	68bb      	ldr	r3, [r7, #8]
 8016104:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016106:	68f8      	ldr	r0, [r7, #12]
 8016108:	f001 f9fd 	bl	8017506 <xTaskCreate>
 801610c:	4603      	mov	r3, r0
 801610e:	2b01      	cmp	r3, #1
 8016110:	d001      	beq.n	8016116 <osThreadNew+0x11a>
            hTask = NULL;
 8016112:	2300      	movs	r3, #0
 8016114:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8016116:	693b      	ldr	r3, [r7, #16]
}
 8016118:	4618      	mov	r0, r3
 801611a:	3728      	adds	r7, #40	; 0x28
 801611c:	46bd      	mov	sp, r7
 801611e:	bd80      	pop	{r7, pc}

08016120 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8016120:	b480      	push	{r7}
 8016122:	b083      	sub	sp, #12
 8016124:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016126:	f3ef 8305 	mrs	r3, IPSR
 801612a:	603b      	str	r3, [r7, #0]
  return(result);
 801612c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801612e:	2b00      	cmp	r3, #0
 8016130:	d003      	beq.n	801613a <osThreadYield+0x1a>
    stat = osErrorISR;
 8016132:	f06f 0305 	mvn.w	r3, #5
 8016136:	607b      	str	r3, [r7, #4]
 8016138:	e009      	b.n	801614e <osThreadYield+0x2e>
  } else {
    stat = osOK;
 801613a:	2300      	movs	r3, #0
 801613c:	607b      	str	r3, [r7, #4]
    taskYIELD();
 801613e:	4b07      	ldr	r3, [pc, #28]	; (801615c <osThreadYield+0x3c>)
 8016140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016144:	601a      	str	r2, [r3, #0]
 8016146:	f3bf 8f4f 	dsb	sy
 801614a:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 801614e:	687b      	ldr	r3, [r7, #4]
}
 8016150:	4618      	mov	r0, r3
 8016152:	370c      	adds	r7, #12
 8016154:	46bd      	mov	sp, r7
 8016156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801615a:	4770      	bx	lr
 801615c:	e000ed04 	.word	0xe000ed04

08016160 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8016160:	b580      	push	{r7, lr}
 8016162:	b084      	sub	sp, #16
 8016164:	af00      	add	r7, sp, #0
 8016166:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016168:	f3ef 8305 	mrs	r3, IPSR
 801616c:	60bb      	str	r3, [r7, #8]
  return(result);
 801616e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016170:	2b00      	cmp	r3, #0
 8016172:	d003      	beq.n	801617c <osDelay+0x1c>
    stat = osErrorISR;
 8016174:	f06f 0305 	mvn.w	r3, #5
 8016178:	60fb      	str	r3, [r7, #12]
 801617a:	e007      	b.n	801618c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801617c:	2300      	movs	r3, #0
 801617e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	2b00      	cmp	r3, #0
 8016184:	d002      	beq.n	801618c <osDelay+0x2c>
      vTaskDelay(ticks);
 8016186:	6878      	ldr	r0, [r7, #4]
 8016188:	f001 fb02 	bl	8017790 <vTaskDelay>
    }
  }

  return (stat);
 801618c:	68fb      	ldr	r3, [r7, #12]
}
 801618e:	4618      	mov	r0, r3
 8016190:	3710      	adds	r7, #16
 8016192:	46bd      	mov	sp, r7
 8016194:	bd80      	pop	{r7, pc}

08016196 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8016196:	b580      	push	{r7, lr}
 8016198:	b086      	sub	sp, #24
 801619a:	af00      	add	r7, sp, #0
 801619c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 801619e:	2300      	movs	r3, #0
 80161a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80161a2:	f3ef 8305 	mrs	r3, IPSR
 80161a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80161a8:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d12d      	bne.n	801620a <osEventFlagsNew+0x74>
    mem = -1;
 80161ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80161b2:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d015      	beq.n	80161e6 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	689b      	ldr	r3, [r3, #8]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d006      	beq.n	80161d0 <osEventFlagsNew+0x3a>
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	68db      	ldr	r3, [r3, #12]
 80161c6:	2b1f      	cmp	r3, #31
 80161c8:	d902      	bls.n	80161d0 <osEventFlagsNew+0x3a>
        mem = 1;
 80161ca:	2301      	movs	r3, #1
 80161cc:	613b      	str	r3, [r7, #16]
 80161ce:	e00c      	b.n	80161ea <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	689b      	ldr	r3, [r3, #8]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d108      	bne.n	80161ea <osEventFlagsNew+0x54>
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	68db      	ldr	r3, [r3, #12]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d104      	bne.n	80161ea <osEventFlagsNew+0x54>
          mem = 0;
 80161e0:	2300      	movs	r3, #0
 80161e2:	613b      	str	r3, [r7, #16]
 80161e4:	e001      	b.n	80161ea <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80161e6:	2300      	movs	r3, #0
 80161e8:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80161ea:	693b      	ldr	r3, [r7, #16]
 80161ec:	2b01      	cmp	r3, #1
 80161ee:	d106      	bne.n	80161fe <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	689b      	ldr	r3, [r3, #8]
 80161f4:	4618      	mov	r0, r3
 80161f6:	f000 f91d 	bl	8016434 <xEventGroupCreateStatic>
 80161fa:	6178      	str	r0, [r7, #20]
 80161fc:	e005      	b.n	801620a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80161fe:	693b      	ldr	r3, [r7, #16]
 8016200:	2b00      	cmp	r3, #0
 8016202:	d102      	bne.n	801620a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8016204:	f000 f94d 	bl	80164a2 <xEventGroupCreate>
 8016208:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 801620a:	697b      	ldr	r3, [r7, #20]
}
 801620c:	4618      	mov	r0, r3
 801620e:	3718      	adds	r7, #24
 8016210:	46bd      	mov	sp, r7
 8016212:	bd80      	pop	{r7, pc}

08016214 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8016214:	b580      	push	{r7, lr}
 8016216:	b086      	sub	sp, #24
 8016218:	af00      	add	r7, sp, #0
 801621a:	6078      	str	r0, [r7, #4]
 801621c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016222:	693b      	ldr	r3, [r7, #16]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d004      	beq.n	8016232 <osEventFlagsSet+0x1e>
 8016228:	683b      	ldr	r3, [r7, #0]
 801622a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801622e:	2b00      	cmp	r3, #0
 8016230:	d003      	beq.n	801623a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8016232:	f06f 0303 	mvn.w	r3, #3
 8016236:	617b      	str	r3, [r7, #20]
 8016238:	e028      	b.n	801628c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801623a:	f3ef 8305 	mrs	r3, IPSR
 801623e:	60fb      	str	r3, [r7, #12]
  return(result);
 8016240:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016242:	2b00      	cmp	r3, #0
 8016244:	d01d      	beq.n	8016282 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8016246:	2300      	movs	r3, #0
 8016248:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 801624a:	f107 0308 	add.w	r3, r7, #8
 801624e:	461a      	mov	r2, r3
 8016250:	6839      	ldr	r1, [r7, #0]
 8016252:	6938      	ldr	r0, [r7, #16]
 8016254:	f000 fb46 	bl	80168e4 <xEventGroupSetBitsFromISR>
 8016258:	4603      	mov	r3, r0
 801625a:	2b00      	cmp	r3, #0
 801625c:	d103      	bne.n	8016266 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 801625e:	f06f 0302 	mvn.w	r3, #2
 8016262:	617b      	str	r3, [r7, #20]
 8016264:	e012      	b.n	801628c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8016266:	683b      	ldr	r3, [r7, #0]
 8016268:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 801626a:	68bb      	ldr	r3, [r7, #8]
 801626c:	2b00      	cmp	r3, #0
 801626e:	d00d      	beq.n	801628c <osEventFlagsSet+0x78>
 8016270:	4b09      	ldr	r3, [pc, #36]	; (8016298 <osEventFlagsSet+0x84>)
 8016272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016276:	601a      	str	r2, [r3, #0]
 8016278:	f3bf 8f4f 	dsb	sy
 801627c:	f3bf 8f6f 	isb	sy
 8016280:	e004      	b.n	801628c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8016282:	6839      	ldr	r1, [r7, #0]
 8016284:	6938      	ldr	r0, [r7, #16]
 8016286:	f000 fa65 	bl	8016754 <xEventGroupSetBits>
 801628a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 801628c:	697b      	ldr	r3, [r7, #20]
}
 801628e:	4618      	mov	r0, r3
 8016290:	3718      	adds	r7, #24
 8016292:	46bd      	mov	sp, r7
 8016294:	bd80      	pop	{r7, pc}
 8016296:	bf00      	nop
 8016298:	e000ed04 	.word	0xe000ed04

0801629c <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 801629c:	b580      	push	{r7, lr}
 801629e:	b086      	sub	sp, #24
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	6078      	str	r0, [r7, #4]
 80162a4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80162aa:	693b      	ldr	r3, [r7, #16]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d004      	beq.n	80162ba <osEventFlagsClear+0x1e>
 80162b0:	683b      	ldr	r3, [r7, #0]
 80162b2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d003      	beq.n	80162c2 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80162ba:	f06f 0303 	mvn.w	r3, #3
 80162be:	617b      	str	r3, [r7, #20]
 80162c0:	e019      	b.n	80162f6 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80162c2:	f3ef 8305 	mrs	r3, IPSR
 80162c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80162c8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d00e      	beq.n	80162ec <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80162ce:	6938      	ldr	r0, [r7, #16]
 80162d0:	f000 fa1c 	bl	801670c <xEventGroupGetBitsFromISR>
 80162d4:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80162d6:	6839      	ldr	r1, [r7, #0]
 80162d8:	6938      	ldr	r0, [r7, #16]
 80162da:	f000 fa03 	bl	80166e4 <xEventGroupClearBitsFromISR>
 80162de:	4603      	mov	r3, r0
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d108      	bne.n	80162f6 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 80162e4:	f06f 0302 	mvn.w	r3, #2
 80162e8:	617b      	str	r3, [r7, #20]
 80162ea:	e004      	b.n	80162f6 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80162ec:	6839      	ldr	r1, [r7, #0]
 80162ee:	6938      	ldr	r0, [r7, #16]
 80162f0:	f000 f9c0 	bl	8016674 <xEventGroupClearBits>
 80162f4:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80162f6:	697b      	ldr	r3, [r7, #20]
}
 80162f8:	4618      	mov	r0, r3
 80162fa:	3718      	adds	r7, #24
 80162fc:	46bd      	mov	sp, r7
 80162fe:	bd80      	pop	{r7, pc}

08016300 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8016300:	b580      	push	{r7, lr}
 8016302:	b08c      	sub	sp, #48	; 0x30
 8016304:	af02      	add	r7, sp, #8
 8016306:	60f8      	str	r0, [r7, #12]
 8016308:	60b9      	str	r1, [r7, #8]
 801630a:	607a      	str	r2, [r7, #4]
 801630c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016312:	69bb      	ldr	r3, [r7, #24]
 8016314:	2b00      	cmp	r3, #0
 8016316:	d004      	beq.n	8016322 <osEventFlagsWait+0x22>
 8016318:	68bb      	ldr	r3, [r7, #8]
 801631a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801631e:	2b00      	cmp	r3, #0
 8016320:	d003      	beq.n	801632a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8016322:	f06f 0303 	mvn.w	r3, #3
 8016326:	61fb      	str	r3, [r7, #28]
 8016328:	e04b      	b.n	80163c2 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801632a:	f3ef 8305 	mrs	r3, IPSR
 801632e:	617b      	str	r3, [r7, #20]
  return(result);
 8016330:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8016332:	2b00      	cmp	r3, #0
 8016334:	d003      	beq.n	801633e <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8016336:	f06f 0305 	mvn.w	r3, #5
 801633a:	61fb      	str	r3, [r7, #28]
 801633c:	e041      	b.n	80163c2 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	f003 0301 	and.w	r3, r3, #1
 8016344:	2b00      	cmp	r3, #0
 8016346:	d002      	beq.n	801634e <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8016348:	2301      	movs	r3, #1
 801634a:	627b      	str	r3, [r7, #36]	; 0x24
 801634c:	e001      	b.n	8016352 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 801634e:	2300      	movs	r3, #0
 8016350:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	f003 0302 	and.w	r3, r3, #2
 8016358:	2b00      	cmp	r3, #0
 801635a:	d002      	beq.n	8016362 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 801635c:	2300      	movs	r3, #0
 801635e:	623b      	str	r3, [r7, #32]
 8016360:	e001      	b.n	8016366 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8016362:	2301      	movs	r3, #1
 8016364:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8016366:	683b      	ldr	r3, [r7, #0]
 8016368:	9300      	str	r3, [sp, #0]
 801636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801636c:	6a3a      	ldr	r2, [r7, #32]
 801636e:	68b9      	ldr	r1, [r7, #8]
 8016370:	69b8      	ldr	r0, [r7, #24]
 8016372:	f000 f8b1 	bl	80164d8 <xEventGroupWaitBits>
 8016376:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	f003 0301 	and.w	r3, r3, #1
 801637e:	2b00      	cmp	r3, #0
 8016380:	d010      	beq.n	80163a4 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8016382:	68ba      	ldr	r2, [r7, #8]
 8016384:	69fb      	ldr	r3, [r7, #28]
 8016386:	4013      	ands	r3, r2
 8016388:	68ba      	ldr	r2, [r7, #8]
 801638a:	429a      	cmp	r2, r3
 801638c:	d019      	beq.n	80163c2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801638e:	683b      	ldr	r3, [r7, #0]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d003      	beq.n	801639c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8016394:	f06f 0301 	mvn.w	r3, #1
 8016398:	61fb      	str	r3, [r7, #28]
 801639a:	e012      	b.n	80163c2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 801639c:	f06f 0302 	mvn.w	r3, #2
 80163a0:	61fb      	str	r3, [r7, #28]
 80163a2:	e00e      	b.n	80163c2 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80163a4:	68ba      	ldr	r2, [r7, #8]
 80163a6:	69fb      	ldr	r3, [r7, #28]
 80163a8:	4013      	ands	r3, r2
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d109      	bne.n	80163c2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80163ae:	683b      	ldr	r3, [r7, #0]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d003      	beq.n	80163bc <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80163b4:	f06f 0301 	mvn.w	r3, #1
 80163b8:	61fb      	str	r3, [r7, #28]
 80163ba:	e002      	b.n	80163c2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80163bc:	f06f 0302 	mvn.w	r3, #2
 80163c0:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80163c2:	69fb      	ldr	r3, [r7, #28]
}
 80163c4:	4618      	mov	r0, r3
 80163c6:	3728      	adds	r7, #40	; 0x28
 80163c8:	46bd      	mov	sp, r7
 80163ca:	bd80      	pop	{r7, pc}

080163cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80163cc:	b480      	push	{r7}
 80163ce:	b085      	sub	sp, #20
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	60f8      	str	r0, [r7, #12]
 80163d4:	60b9      	str	r1, [r7, #8]
 80163d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	4a07      	ldr	r2, [pc, #28]	; (80163f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80163dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80163de:	68bb      	ldr	r3, [r7, #8]
 80163e0:	4a06      	ldr	r2, [pc, #24]	; (80163fc <vApplicationGetIdleTaskMemory+0x30>)
 80163e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	2280      	movs	r2, #128	; 0x80
 80163e8:	601a      	str	r2, [r3, #0]
}
 80163ea:	bf00      	nop
 80163ec:	3714      	adds	r7, #20
 80163ee:	46bd      	mov	sp, r7
 80163f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163f4:	4770      	bx	lr
 80163f6:	bf00      	nop
 80163f8:	24002060 	.word	0x24002060
 80163fc:	240020bc 	.word	0x240020bc

08016400 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8016400:	b480      	push	{r7}
 8016402:	b085      	sub	sp, #20
 8016404:	af00      	add	r7, sp, #0
 8016406:	60f8      	str	r0, [r7, #12]
 8016408:	60b9      	str	r1, [r7, #8]
 801640a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	4a07      	ldr	r2, [pc, #28]	; (801642c <vApplicationGetTimerTaskMemory+0x2c>)
 8016410:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8016412:	68bb      	ldr	r3, [r7, #8]
 8016414:	4a06      	ldr	r2, [pc, #24]	; (8016430 <vApplicationGetTimerTaskMemory+0x30>)
 8016416:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801641e:	601a      	str	r2, [r3, #0]
}
 8016420:	bf00      	nop
 8016422:	3714      	adds	r7, #20
 8016424:	46bd      	mov	sp, r7
 8016426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801642a:	4770      	bx	lr
 801642c:	240022bc 	.word	0x240022bc
 8016430:	24002318 	.word	0x24002318

08016434 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8016434:	b580      	push	{r7, lr}
 8016436:	b086      	sub	sp, #24
 8016438:	af00      	add	r7, sp, #0
 801643a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	2b00      	cmp	r3, #0
 8016440:	d10a      	bne.n	8016458 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016446:	f383 8811 	msr	BASEPRI, r3
 801644a:	f3bf 8f6f 	isb	sy
 801644e:	f3bf 8f4f 	dsb	sy
 8016452:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8016454:	bf00      	nop
 8016456:	e7fe      	b.n	8016456 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8016458:	2320      	movs	r3, #32
 801645a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 801645c:	68bb      	ldr	r3, [r7, #8]
 801645e:	2b20      	cmp	r3, #32
 8016460:	d00a      	beq.n	8016478 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8016462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016466:	f383 8811 	msr	BASEPRI, r3
 801646a:	f3bf 8f6f 	isb	sy
 801646e:	f3bf 8f4f 	dsb	sy
 8016472:	60fb      	str	r3, [r7, #12]
}
 8016474:	bf00      	nop
 8016476:	e7fe      	b.n	8016476 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 801647c:	697b      	ldr	r3, [r7, #20]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d00a      	beq.n	8016498 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8016482:	697b      	ldr	r3, [r7, #20]
 8016484:	2200      	movs	r2, #0
 8016486:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8016488:	697b      	ldr	r3, [r7, #20]
 801648a:	3304      	adds	r3, #4
 801648c:	4618      	mov	r0, r3
 801648e:	f000 fa3d 	bl	801690c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8016492:	697b      	ldr	r3, [r7, #20]
 8016494:	2201      	movs	r2, #1
 8016496:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8016498:	697b      	ldr	r3, [r7, #20]
	}
 801649a:	4618      	mov	r0, r3
 801649c:	3718      	adds	r7, #24
 801649e:	46bd      	mov	sp, r7
 80164a0:	bd80      	pop	{r7, pc}

080164a2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80164a2:	b580      	push	{r7, lr}
 80164a4:	b082      	sub	sp, #8
 80164a6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80164a8:	2020      	movs	r0, #32
 80164aa:	f002 fd55 	bl	8018f58 <pvPortMalloc>
 80164ae:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d00a      	beq.n	80164cc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	2200      	movs	r2, #0
 80164ba:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	3304      	adds	r3, #4
 80164c0:	4618      	mov	r0, r3
 80164c2:	f000 fa23 	bl	801690c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	2200      	movs	r2, #0
 80164ca:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80164cc:	687b      	ldr	r3, [r7, #4]
	}
 80164ce:	4618      	mov	r0, r3
 80164d0:	3708      	adds	r7, #8
 80164d2:	46bd      	mov	sp, r7
 80164d4:	bd80      	pop	{r7, pc}
	...

080164d8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80164d8:	b580      	push	{r7, lr}
 80164da:	b090      	sub	sp, #64	; 0x40
 80164dc:	af00      	add	r7, sp, #0
 80164de:	60f8      	str	r0, [r7, #12]
 80164e0:	60b9      	str	r1, [r7, #8]
 80164e2:	607a      	str	r2, [r7, #4]
 80164e4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80164ea:	2300      	movs	r3, #0
 80164ec:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80164ee:	2300      	movs	r3, #0
 80164f0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d10a      	bne.n	801650e <xEventGroupWaitBits+0x36>
	__asm volatile
 80164f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164fc:	f383 8811 	msr	BASEPRI, r3
 8016500:	f3bf 8f6f 	isb	sy
 8016504:	f3bf 8f4f 	dsb	sy
 8016508:	623b      	str	r3, [r7, #32]
}
 801650a:	bf00      	nop
 801650c:	e7fe      	b.n	801650c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801650e:	68bb      	ldr	r3, [r7, #8]
 8016510:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016514:	2b00      	cmp	r3, #0
 8016516:	d00a      	beq.n	801652e <xEventGroupWaitBits+0x56>
	__asm volatile
 8016518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801651c:	f383 8811 	msr	BASEPRI, r3
 8016520:	f3bf 8f6f 	isb	sy
 8016524:	f3bf 8f4f 	dsb	sy
 8016528:	61fb      	str	r3, [r7, #28]
}
 801652a:	bf00      	nop
 801652c:	e7fe      	b.n	801652c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 801652e:	68bb      	ldr	r3, [r7, #8]
 8016530:	2b00      	cmp	r3, #0
 8016532:	d10a      	bne.n	801654a <xEventGroupWaitBits+0x72>
	__asm volatile
 8016534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016538:	f383 8811 	msr	BASEPRI, r3
 801653c:	f3bf 8f6f 	isb	sy
 8016540:	f3bf 8f4f 	dsb	sy
 8016544:	61bb      	str	r3, [r7, #24]
}
 8016546:	bf00      	nop
 8016548:	e7fe      	b.n	8016548 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801654a:	f001 fe51 	bl	80181f0 <xTaskGetSchedulerState>
 801654e:	4603      	mov	r3, r0
 8016550:	2b00      	cmp	r3, #0
 8016552:	d102      	bne.n	801655a <xEventGroupWaitBits+0x82>
 8016554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016556:	2b00      	cmp	r3, #0
 8016558:	d101      	bne.n	801655e <xEventGroupWaitBits+0x86>
 801655a:	2301      	movs	r3, #1
 801655c:	e000      	b.n	8016560 <xEventGroupWaitBits+0x88>
 801655e:	2300      	movs	r3, #0
 8016560:	2b00      	cmp	r3, #0
 8016562:	d10a      	bne.n	801657a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8016564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016568:	f383 8811 	msr	BASEPRI, r3
 801656c:	f3bf 8f6f 	isb	sy
 8016570:	f3bf 8f4f 	dsb	sy
 8016574:	617b      	str	r3, [r7, #20]
}
 8016576:	bf00      	nop
 8016578:	e7fe      	b.n	8016578 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 801657a:	f001 f9a3 	bl	80178c4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801657e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8016584:	683a      	ldr	r2, [r7, #0]
 8016586:	68b9      	ldr	r1, [r7, #8]
 8016588:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801658a:	f000 f988 	bl	801689e <prvTestWaitCondition>
 801658e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8016590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016592:	2b00      	cmp	r3, #0
 8016594:	d00e      	beq.n	80165b4 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8016596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016598:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 801659a:	2300      	movs	r3, #0
 801659c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d028      	beq.n	80165f6 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80165a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165a6:	681a      	ldr	r2, [r3, #0]
 80165a8:	68bb      	ldr	r3, [r7, #8]
 80165aa:	43db      	mvns	r3, r3
 80165ac:	401a      	ands	r2, r3
 80165ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165b0:	601a      	str	r2, [r3, #0]
 80165b2:	e020      	b.n	80165f6 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80165b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d104      	bne.n	80165c4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80165ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165bc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80165be:	2301      	movs	r3, #1
 80165c0:	633b      	str	r3, [r7, #48]	; 0x30
 80165c2:	e018      	b.n	80165f6 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d003      	beq.n	80165d2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80165ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80165d0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80165d2:	683b      	ldr	r3, [r7, #0]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d003      	beq.n	80165e0 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80165d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80165de:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80165e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165e2:	1d18      	adds	r0, r3, #4
 80165e4:	68ba      	ldr	r2, [r7, #8]
 80165e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165e8:	4313      	orrs	r3, r2
 80165ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80165ec:	4619      	mov	r1, r3
 80165ee:	f001 fb77 	bl	8017ce0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80165f2:	2300      	movs	r3, #0
 80165f4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80165f6:	f001 f973 	bl	80178e0 <xTaskResumeAll>
 80165fa:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80165fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d031      	beq.n	8016666 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8016602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016604:	2b00      	cmp	r3, #0
 8016606:	d107      	bne.n	8016618 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8016608:	4b19      	ldr	r3, [pc, #100]	; (8016670 <xEventGroupWaitBits+0x198>)
 801660a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801660e:	601a      	str	r2, [r3, #0]
 8016610:	f3bf 8f4f 	dsb	sy
 8016614:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8016618:	f001 fe76 	bl	8018308 <uxTaskResetEventItemValue>
 801661c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 801661e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016624:	2b00      	cmp	r3, #0
 8016626:	d11a      	bne.n	801665e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8016628:	f002 fb74 	bl	8018d14 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 801662c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8016632:	683a      	ldr	r2, [r7, #0]
 8016634:	68b9      	ldr	r1, [r7, #8]
 8016636:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016638:	f000 f931 	bl	801689e <prvTestWaitCondition>
 801663c:	4603      	mov	r3, r0
 801663e:	2b00      	cmp	r3, #0
 8016640:	d009      	beq.n	8016656 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	2b00      	cmp	r3, #0
 8016646:	d006      	beq.n	8016656 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8016648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801664a:	681a      	ldr	r2, [r3, #0]
 801664c:	68bb      	ldr	r3, [r7, #8]
 801664e:	43db      	mvns	r3, r3
 8016650:	401a      	ands	r2, r3
 8016652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016654:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8016656:	2301      	movs	r3, #1
 8016658:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 801665a:	f002 fb8b 	bl	8018d74 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 801665e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016660:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016664:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8016666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8016668:	4618      	mov	r0, r3
 801666a:	3740      	adds	r7, #64	; 0x40
 801666c:	46bd      	mov	sp, r7
 801666e:	bd80      	pop	{r7, pc}
 8016670:	e000ed04 	.word	0xe000ed04

08016674 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8016674:	b580      	push	{r7, lr}
 8016676:	b086      	sub	sp, #24
 8016678:	af00      	add	r7, sp, #0
 801667a:	6078      	str	r0, [r7, #4]
 801667c:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d10a      	bne.n	801669e <xEventGroupClearBits+0x2a>
	__asm volatile
 8016688:	f04f 0350 	mov.w	r3, #80	; 0x50
 801668c:	f383 8811 	msr	BASEPRI, r3
 8016690:	f3bf 8f6f 	isb	sy
 8016694:	f3bf 8f4f 	dsb	sy
 8016698:	60fb      	str	r3, [r7, #12]
}
 801669a:	bf00      	nop
 801669c:	e7fe      	b.n	801669c <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801669e:	683b      	ldr	r3, [r7, #0]
 80166a0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d00a      	beq.n	80166be <xEventGroupClearBits+0x4a>
	__asm volatile
 80166a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166ac:	f383 8811 	msr	BASEPRI, r3
 80166b0:	f3bf 8f6f 	isb	sy
 80166b4:	f3bf 8f4f 	dsb	sy
 80166b8:	60bb      	str	r3, [r7, #8]
}
 80166ba:	bf00      	nop
 80166bc:	e7fe      	b.n	80166bc <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80166be:	f002 fb29 	bl	8018d14 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80166c2:	697b      	ldr	r3, [r7, #20]
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80166c8:	697b      	ldr	r3, [r7, #20]
 80166ca:	681a      	ldr	r2, [r3, #0]
 80166cc:	683b      	ldr	r3, [r7, #0]
 80166ce:	43db      	mvns	r3, r3
 80166d0:	401a      	ands	r2, r3
 80166d2:	697b      	ldr	r3, [r7, #20]
 80166d4:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80166d6:	f002 fb4d 	bl	8018d74 <vPortExitCritical>

	return uxReturn;
 80166da:	693b      	ldr	r3, [r7, #16]
}
 80166dc:	4618      	mov	r0, r3
 80166de:	3718      	adds	r7, #24
 80166e0:	46bd      	mov	sp, r7
 80166e2:	bd80      	pop	{r7, pc}

080166e4 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80166e4:	b580      	push	{r7, lr}
 80166e6:	b084      	sub	sp, #16
 80166e8:	af00      	add	r7, sp, #0
 80166ea:	6078      	str	r0, [r7, #4]
 80166ec:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80166ee:	2300      	movs	r3, #0
 80166f0:	683a      	ldr	r2, [r7, #0]
 80166f2:	6879      	ldr	r1, [r7, #4]
 80166f4:	4804      	ldr	r0, [pc, #16]	; (8016708 <xEventGroupClearBitsFromISR+0x24>)
 80166f6:	f002 f9c1 	bl	8018a7c <xTimerPendFunctionCallFromISR>
 80166fa:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80166fc:	68fb      	ldr	r3, [r7, #12]
	}
 80166fe:	4618      	mov	r0, r3
 8016700:	3710      	adds	r7, #16
 8016702:	46bd      	mov	sp, r7
 8016704:	bd80      	pop	{r7, pc}
 8016706:	bf00      	nop
 8016708:	08016885 	.word	0x08016885

0801670c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 801670c:	b480      	push	{r7}
 801670e:	b089      	sub	sp, #36	; 0x24
 8016710:	af00      	add	r7, sp, #0
 8016712:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016718:	f3ef 8211 	mrs	r2, BASEPRI
 801671c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016720:	f383 8811 	msr	BASEPRI, r3
 8016724:	f3bf 8f6f 	isb	sy
 8016728:	f3bf 8f4f 	dsb	sy
 801672c:	60fa      	str	r2, [r7, #12]
 801672e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016730:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016732:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8016734:	69fb      	ldr	r3, [r7, #28]
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	617b      	str	r3, [r7, #20]
 801673a:	69bb      	ldr	r3, [r7, #24]
 801673c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801673e:	693b      	ldr	r3, [r7, #16]
 8016740:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8016744:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8016746:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8016748:	4618      	mov	r0, r3
 801674a:	3724      	adds	r7, #36	; 0x24
 801674c:	46bd      	mov	sp, r7
 801674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016752:	4770      	bx	lr

08016754 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8016754:	b580      	push	{r7, lr}
 8016756:	b08e      	sub	sp, #56	; 0x38
 8016758:	af00      	add	r7, sp, #0
 801675a:	6078      	str	r0, [r7, #4]
 801675c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801675e:	2300      	movs	r3, #0
 8016760:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8016766:	2300      	movs	r3, #0
 8016768:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d10a      	bne.n	8016786 <xEventGroupSetBits+0x32>
	__asm volatile
 8016770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016774:	f383 8811 	msr	BASEPRI, r3
 8016778:	f3bf 8f6f 	isb	sy
 801677c:	f3bf 8f4f 	dsb	sy
 8016780:	613b      	str	r3, [r7, #16]
}
 8016782:	bf00      	nop
 8016784:	e7fe      	b.n	8016784 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8016786:	683b      	ldr	r3, [r7, #0]
 8016788:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801678c:	2b00      	cmp	r3, #0
 801678e:	d00a      	beq.n	80167a6 <xEventGroupSetBits+0x52>
	__asm volatile
 8016790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016794:	f383 8811 	msr	BASEPRI, r3
 8016798:	f3bf 8f6f 	isb	sy
 801679c:	f3bf 8f4f 	dsb	sy
 80167a0:	60fb      	str	r3, [r7, #12]
}
 80167a2:	bf00      	nop
 80167a4:	e7fe      	b.n	80167a4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80167a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167a8:	3304      	adds	r3, #4
 80167aa:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80167ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167ae:	3308      	adds	r3, #8
 80167b0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80167b2:	f001 f887 	bl	80178c4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80167b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167b8:	68db      	ldr	r3, [r3, #12]
 80167ba:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80167bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167be:	681a      	ldr	r2, [r3, #0]
 80167c0:	683b      	ldr	r3, [r7, #0]
 80167c2:	431a      	orrs	r2, r3
 80167c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167c6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80167c8:	e03c      	b.n	8016844 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80167ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167cc:	685b      	ldr	r3, [r3, #4]
 80167ce:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80167d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80167d6:	2300      	movs	r3, #0
 80167d8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80167da:	69bb      	ldr	r3, [r7, #24]
 80167dc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80167e0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80167e2:	69bb      	ldr	r3, [r7, #24]
 80167e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80167e8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80167ea:	697b      	ldr	r3, [r7, #20]
 80167ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d108      	bne.n	8016806 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80167f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167f6:	681a      	ldr	r2, [r3, #0]
 80167f8:	69bb      	ldr	r3, [r7, #24]
 80167fa:	4013      	ands	r3, r2
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d00b      	beq.n	8016818 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8016800:	2301      	movs	r3, #1
 8016802:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016804:	e008      	b.n	8016818 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8016806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016808:	681a      	ldr	r2, [r3, #0]
 801680a:	69bb      	ldr	r3, [r7, #24]
 801680c:	4013      	ands	r3, r2
 801680e:	69ba      	ldr	r2, [r7, #24]
 8016810:	429a      	cmp	r2, r3
 8016812:	d101      	bne.n	8016818 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8016814:	2301      	movs	r3, #1
 8016816:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8016818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801681a:	2b00      	cmp	r3, #0
 801681c:	d010      	beq.n	8016840 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 801681e:	697b      	ldr	r3, [r7, #20]
 8016820:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016824:	2b00      	cmp	r3, #0
 8016826:	d003      	beq.n	8016830 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8016828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801682a:	69bb      	ldr	r3, [r7, #24]
 801682c:	4313      	orrs	r3, r2
 801682e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8016830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016838:	4619      	mov	r1, r3
 801683a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801683c:	f001 fb1c 	bl	8017e78 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8016840:	69fb      	ldr	r3, [r7, #28]
 8016842:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8016844:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016846:	6a3b      	ldr	r3, [r7, #32]
 8016848:	429a      	cmp	r2, r3
 801684a:	d1be      	bne.n	80167ca <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 801684c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801684e:	681a      	ldr	r2, [r3, #0]
 8016850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016852:	43db      	mvns	r3, r3
 8016854:	401a      	ands	r2, r3
 8016856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016858:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 801685a:	f001 f841 	bl	80178e0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 801685e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016860:	681b      	ldr	r3, [r3, #0]
}
 8016862:	4618      	mov	r0, r3
 8016864:	3738      	adds	r7, #56	; 0x38
 8016866:	46bd      	mov	sp, r7
 8016868:	bd80      	pop	{r7, pc}

0801686a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 801686a:	b580      	push	{r7, lr}
 801686c:	b082      	sub	sp, #8
 801686e:	af00      	add	r7, sp, #0
 8016870:	6078      	str	r0, [r7, #4]
 8016872:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8016874:	6839      	ldr	r1, [r7, #0]
 8016876:	6878      	ldr	r0, [r7, #4]
 8016878:	f7ff ff6c 	bl	8016754 <xEventGroupSetBits>
}
 801687c:	bf00      	nop
 801687e:	3708      	adds	r7, #8
 8016880:	46bd      	mov	sp, r7
 8016882:	bd80      	pop	{r7, pc}

08016884 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8016884:	b580      	push	{r7, lr}
 8016886:	b082      	sub	sp, #8
 8016888:	af00      	add	r7, sp, #0
 801688a:	6078      	str	r0, [r7, #4]
 801688c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801688e:	6839      	ldr	r1, [r7, #0]
 8016890:	6878      	ldr	r0, [r7, #4]
 8016892:	f7ff feef 	bl	8016674 <xEventGroupClearBits>
}
 8016896:	bf00      	nop
 8016898:	3708      	adds	r7, #8
 801689a:	46bd      	mov	sp, r7
 801689c:	bd80      	pop	{r7, pc}

0801689e <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 801689e:	b480      	push	{r7}
 80168a0:	b087      	sub	sp, #28
 80168a2:	af00      	add	r7, sp, #0
 80168a4:	60f8      	str	r0, [r7, #12]
 80168a6:	60b9      	str	r1, [r7, #8]
 80168a8:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80168aa:	2300      	movs	r3, #0
 80168ac:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d107      	bne.n	80168c4 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80168b4:	68fa      	ldr	r2, [r7, #12]
 80168b6:	68bb      	ldr	r3, [r7, #8]
 80168b8:	4013      	ands	r3, r2
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d00a      	beq.n	80168d4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80168be:	2301      	movs	r3, #1
 80168c0:	617b      	str	r3, [r7, #20]
 80168c2:	e007      	b.n	80168d4 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80168c4:	68fa      	ldr	r2, [r7, #12]
 80168c6:	68bb      	ldr	r3, [r7, #8]
 80168c8:	4013      	ands	r3, r2
 80168ca:	68ba      	ldr	r2, [r7, #8]
 80168cc:	429a      	cmp	r2, r3
 80168ce:	d101      	bne.n	80168d4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80168d0:	2301      	movs	r3, #1
 80168d2:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80168d4:	697b      	ldr	r3, [r7, #20]
}
 80168d6:	4618      	mov	r0, r3
 80168d8:	371c      	adds	r7, #28
 80168da:	46bd      	mov	sp, r7
 80168dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168e0:	4770      	bx	lr
	...

080168e4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80168e4:	b580      	push	{r7, lr}
 80168e6:	b086      	sub	sp, #24
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	60f8      	str	r0, [r7, #12]
 80168ec:	60b9      	str	r1, [r7, #8]
 80168ee:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	68ba      	ldr	r2, [r7, #8]
 80168f4:	68f9      	ldr	r1, [r7, #12]
 80168f6:	4804      	ldr	r0, [pc, #16]	; (8016908 <xEventGroupSetBitsFromISR+0x24>)
 80168f8:	f002 f8c0 	bl	8018a7c <xTimerPendFunctionCallFromISR>
 80168fc:	6178      	str	r0, [r7, #20]

		return xReturn;
 80168fe:	697b      	ldr	r3, [r7, #20]
	}
 8016900:	4618      	mov	r0, r3
 8016902:	3718      	adds	r7, #24
 8016904:	46bd      	mov	sp, r7
 8016906:	bd80      	pop	{r7, pc}
 8016908:	0801686b 	.word	0x0801686b

0801690c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801690c:	b480      	push	{r7}
 801690e:	b083      	sub	sp, #12
 8016910:	af00      	add	r7, sp, #0
 8016912:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	f103 0208 	add.w	r2, r3, #8
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016924:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	f103 0208 	add.w	r2, r3, #8
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	f103 0208 	add.w	r2, r3, #8
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	2200      	movs	r2, #0
 801693e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016940:	bf00      	nop
 8016942:	370c      	adds	r7, #12
 8016944:	46bd      	mov	sp, r7
 8016946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801694a:	4770      	bx	lr

0801694c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801694c:	b480      	push	{r7}
 801694e:	b083      	sub	sp, #12
 8016950:	af00      	add	r7, sp, #0
 8016952:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	2200      	movs	r2, #0
 8016958:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801695a:	bf00      	nop
 801695c:	370c      	adds	r7, #12
 801695e:	46bd      	mov	sp, r7
 8016960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016964:	4770      	bx	lr

08016966 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016966:	b480      	push	{r7}
 8016968:	b085      	sub	sp, #20
 801696a:	af00      	add	r7, sp, #0
 801696c:	6078      	str	r0, [r7, #4]
 801696e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	685b      	ldr	r3, [r3, #4]
 8016974:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016976:	683b      	ldr	r3, [r7, #0]
 8016978:	68fa      	ldr	r2, [r7, #12]
 801697a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	689a      	ldr	r2, [r3, #8]
 8016980:	683b      	ldr	r3, [r7, #0]
 8016982:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	689b      	ldr	r3, [r3, #8]
 8016988:	683a      	ldr	r2, [r7, #0]
 801698a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	683a      	ldr	r2, [r7, #0]
 8016990:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8016992:	683b      	ldr	r3, [r7, #0]
 8016994:	687a      	ldr	r2, [r7, #4]
 8016996:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	1c5a      	adds	r2, r3, #1
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	601a      	str	r2, [r3, #0]
}
 80169a2:	bf00      	nop
 80169a4:	3714      	adds	r7, #20
 80169a6:	46bd      	mov	sp, r7
 80169a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ac:	4770      	bx	lr

080169ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80169ae:	b480      	push	{r7}
 80169b0:	b085      	sub	sp, #20
 80169b2:	af00      	add	r7, sp, #0
 80169b4:	6078      	str	r0, [r7, #4]
 80169b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80169b8:	683b      	ldr	r3, [r7, #0]
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80169be:	68bb      	ldr	r3, [r7, #8]
 80169c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80169c4:	d103      	bne.n	80169ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	691b      	ldr	r3, [r3, #16]
 80169ca:	60fb      	str	r3, [r7, #12]
 80169cc:	e00c      	b.n	80169e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	3308      	adds	r3, #8
 80169d2:	60fb      	str	r3, [r7, #12]
 80169d4:	e002      	b.n	80169dc <vListInsert+0x2e>
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	685b      	ldr	r3, [r3, #4]
 80169da:	60fb      	str	r3, [r7, #12]
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	685b      	ldr	r3, [r3, #4]
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	68ba      	ldr	r2, [r7, #8]
 80169e4:	429a      	cmp	r2, r3
 80169e6:	d2f6      	bcs.n	80169d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	685a      	ldr	r2, [r3, #4]
 80169ec:	683b      	ldr	r3, [r7, #0]
 80169ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80169f0:	683b      	ldr	r3, [r7, #0]
 80169f2:	685b      	ldr	r3, [r3, #4]
 80169f4:	683a      	ldr	r2, [r7, #0]
 80169f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80169f8:	683b      	ldr	r3, [r7, #0]
 80169fa:	68fa      	ldr	r2, [r7, #12]
 80169fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	683a      	ldr	r2, [r7, #0]
 8016a02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016a04:	683b      	ldr	r3, [r7, #0]
 8016a06:	687a      	ldr	r2, [r7, #4]
 8016a08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	1c5a      	adds	r2, r3, #1
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	601a      	str	r2, [r3, #0]
}
 8016a14:	bf00      	nop
 8016a16:	3714      	adds	r7, #20
 8016a18:	46bd      	mov	sp, r7
 8016a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a1e:	4770      	bx	lr

08016a20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016a20:	b480      	push	{r7}
 8016a22:	b085      	sub	sp, #20
 8016a24:	af00      	add	r7, sp, #0
 8016a26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	691b      	ldr	r3, [r3, #16]
 8016a2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	685b      	ldr	r3, [r3, #4]
 8016a32:	687a      	ldr	r2, [r7, #4]
 8016a34:	6892      	ldr	r2, [r2, #8]
 8016a36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	689b      	ldr	r3, [r3, #8]
 8016a3c:	687a      	ldr	r2, [r7, #4]
 8016a3e:	6852      	ldr	r2, [r2, #4]
 8016a40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	685b      	ldr	r3, [r3, #4]
 8016a46:	687a      	ldr	r2, [r7, #4]
 8016a48:	429a      	cmp	r2, r3
 8016a4a:	d103      	bne.n	8016a54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	689a      	ldr	r2, [r3, #8]
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	2200      	movs	r2, #0
 8016a58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	1e5a      	subs	r2, r3, #1
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	681b      	ldr	r3, [r3, #0]
}
 8016a68:	4618      	mov	r0, r3
 8016a6a:	3714      	adds	r7, #20
 8016a6c:	46bd      	mov	sp, r7
 8016a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a72:	4770      	bx	lr

08016a74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016a74:	b580      	push	{r7, lr}
 8016a76:	b084      	sub	sp, #16
 8016a78:	af00      	add	r7, sp, #0
 8016a7a:	6078      	str	r0, [r7, #4]
 8016a7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d10a      	bne.n	8016a9e <xQueueGenericReset+0x2a>
	__asm volatile
 8016a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a8c:	f383 8811 	msr	BASEPRI, r3
 8016a90:	f3bf 8f6f 	isb	sy
 8016a94:	f3bf 8f4f 	dsb	sy
 8016a98:	60bb      	str	r3, [r7, #8]
}
 8016a9a:	bf00      	nop
 8016a9c:	e7fe      	b.n	8016a9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8016a9e:	f002 f939 	bl	8018d14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	681a      	ldr	r2, [r3, #0]
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016aaa:	68f9      	ldr	r1, [r7, #12]
 8016aac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016aae:	fb01 f303 	mul.w	r3, r1, r3
 8016ab2:	441a      	add	r2, r3
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	2200      	movs	r2, #0
 8016abc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	681a      	ldr	r2, [r3, #0]
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	681a      	ldr	r2, [r3, #0]
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ace:	3b01      	subs	r3, #1
 8016ad0:	68f9      	ldr	r1, [r7, #12]
 8016ad2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016ad4:	fb01 f303 	mul.w	r3, r1, r3
 8016ad8:	441a      	add	r2, r3
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	22ff      	movs	r2, #255	; 0xff
 8016ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	22ff      	movs	r2, #255	; 0xff
 8016aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8016aee:	683b      	ldr	r3, [r7, #0]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d114      	bne.n	8016b1e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	691b      	ldr	r3, [r3, #16]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d01a      	beq.n	8016b32 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	3310      	adds	r3, #16
 8016b00:	4618      	mov	r0, r3
 8016b02:	f001 f955 	bl	8017db0 <xTaskRemoveFromEventList>
 8016b06:	4603      	mov	r3, r0
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d012      	beq.n	8016b32 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8016b0c:	4b0c      	ldr	r3, [pc, #48]	; (8016b40 <xQueueGenericReset+0xcc>)
 8016b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b12:	601a      	str	r2, [r3, #0]
 8016b14:	f3bf 8f4f 	dsb	sy
 8016b18:	f3bf 8f6f 	isb	sy
 8016b1c:	e009      	b.n	8016b32 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	3310      	adds	r3, #16
 8016b22:	4618      	mov	r0, r3
 8016b24:	f7ff fef2 	bl	801690c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	3324      	adds	r3, #36	; 0x24
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	f7ff feed 	bl	801690c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016b32:	f002 f91f 	bl	8018d74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016b36:	2301      	movs	r3, #1
}
 8016b38:	4618      	mov	r0, r3
 8016b3a:	3710      	adds	r7, #16
 8016b3c:	46bd      	mov	sp, r7
 8016b3e:	bd80      	pop	{r7, pc}
 8016b40:	e000ed04 	.word	0xe000ed04

08016b44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016b44:	b580      	push	{r7, lr}
 8016b46:	b08e      	sub	sp, #56	; 0x38
 8016b48:	af02      	add	r7, sp, #8
 8016b4a:	60f8      	str	r0, [r7, #12]
 8016b4c:	60b9      	str	r1, [r7, #8]
 8016b4e:	607a      	str	r2, [r7, #4]
 8016b50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016b52:	68fb      	ldr	r3, [r7, #12]
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d10a      	bne.n	8016b6e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8016b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b5c:	f383 8811 	msr	BASEPRI, r3
 8016b60:	f3bf 8f6f 	isb	sy
 8016b64:	f3bf 8f4f 	dsb	sy
 8016b68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016b6a:	bf00      	nop
 8016b6c:	e7fe      	b.n	8016b6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8016b6e:	683b      	ldr	r3, [r7, #0]
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d10a      	bne.n	8016b8a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8016b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b78:	f383 8811 	msr	BASEPRI, r3
 8016b7c:	f3bf 8f6f 	isb	sy
 8016b80:	f3bf 8f4f 	dsb	sy
 8016b84:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016b86:	bf00      	nop
 8016b88:	e7fe      	b.n	8016b88 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d002      	beq.n	8016b96 <xQueueGenericCreateStatic+0x52>
 8016b90:	68bb      	ldr	r3, [r7, #8]
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d001      	beq.n	8016b9a <xQueueGenericCreateStatic+0x56>
 8016b96:	2301      	movs	r3, #1
 8016b98:	e000      	b.n	8016b9c <xQueueGenericCreateStatic+0x58>
 8016b9a:	2300      	movs	r3, #0
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d10a      	bne.n	8016bb6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8016ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ba4:	f383 8811 	msr	BASEPRI, r3
 8016ba8:	f3bf 8f6f 	isb	sy
 8016bac:	f3bf 8f4f 	dsb	sy
 8016bb0:	623b      	str	r3, [r7, #32]
}
 8016bb2:	bf00      	nop
 8016bb4:	e7fe      	b.n	8016bb4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d102      	bne.n	8016bc2 <xQueueGenericCreateStatic+0x7e>
 8016bbc:	68bb      	ldr	r3, [r7, #8]
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d101      	bne.n	8016bc6 <xQueueGenericCreateStatic+0x82>
 8016bc2:	2301      	movs	r3, #1
 8016bc4:	e000      	b.n	8016bc8 <xQueueGenericCreateStatic+0x84>
 8016bc6:	2300      	movs	r3, #0
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d10a      	bne.n	8016be2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8016bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bd0:	f383 8811 	msr	BASEPRI, r3
 8016bd4:	f3bf 8f6f 	isb	sy
 8016bd8:	f3bf 8f4f 	dsb	sy
 8016bdc:	61fb      	str	r3, [r7, #28]
}
 8016bde:	bf00      	nop
 8016be0:	e7fe      	b.n	8016be0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016be2:	2350      	movs	r3, #80	; 0x50
 8016be4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8016be6:	697b      	ldr	r3, [r7, #20]
 8016be8:	2b50      	cmp	r3, #80	; 0x50
 8016bea:	d00a      	beq.n	8016c02 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8016bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bf0:	f383 8811 	msr	BASEPRI, r3
 8016bf4:	f3bf 8f6f 	isb	sy
 8016bf8:	f3bf 8f4f 	dsb	sy
 8016bfc:	61bb      	str	r3, [r7, #24]
}
 8016bfe:	bf00      	nop
 8016c00:	e7fe      	b.n	8016c00 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016c02:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016c04:	683b      	ldr	r3, [r7, #0]
 8016c06:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8016c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d00d      	beq.n	8016c2a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c10:	2201      	movs	r2, #1
 8016c12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016c16:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c1c:	9300      	str	r3, [sp, #0]
 8016c1e:	4613      	mov	r3, r2
 8016c20:	687a      	ldr	r2, [r7, #4]
 8016c22:	68b9      	ldr	r1, [r7, #8]
 8016c24:	68f8      	ldr	r0, [r7, #12]
 8016c26:	f000 f805 	bl	8016c34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	3730      	adds	r7, #48	; 0x30
 8016c30:	46bd      	mov	sp, r7
 8016c32:	bd80      	pop	{r7, pc}

08016c34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016c34:	b580      	push	{r7, lr}
 8016c36:	b084      	sub	sp, #16
 8016c38:	af00      	add	r7, sp, #0
 8016c3a:	60f8      	str	r0, [r7, #12]
 8016c3c:	60b9      	str	r1, [r7, #8]
 8016c3e:	607a      	str	r2, [r7, #4]
 8016c40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016c42:	68bb      	ldr	r3, [r7, #8]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d103      	bne.n	8016c50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016c48:	69bb      	ldr	r3, [r7, #24]
 8016c4a:	69ba      	ldr	r2, [r7, #24]
 8016c4c:	601a      	str	r2, [r3, #0]
 8016c4e:	e002      	b.n	8016c56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016c50:	69bb      	ldr	r3, [r7, #24]
 8016c52:	687a      	ldr	r2, [r7, #4]
 8016c54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016c56:	69bb      	ldr	r3, [r7, #24]
 8016c58:	68fa      	ldr	r2, [r7, #12]
 8016c5a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016c5c:	69bb      	ldr	r3, [r7, #24]
 8016c5e:	68ba      	ldr	r2, [r7, #8]
 8016c60:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016c62:	2101      	movs	r1, #1
 8016c64:	69b8      	ldr	r0, [r7, #24]
 8016c66:	f7ff ff05 	bl	8016a74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016c6a:	69bb      	ldr	r3, [r7, #24]
 8016c6c:	78fa      	ldrb	r2, [r7, #3]
 8016c6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016c72:	bf00      	nop
 8016c74:	3710      	adds	r7, #16
 8016c76:	46bd      	mov	sp, r7
 8016c78:	bd80      	pop	{r7, pc}
	...

08016c7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016c7c:	b580      	push	{r7, lr}
 8016c7e:	b08e      	sub	sp, #56	; 0x38
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	60f8      	str	r0, [r7, #12]
 8016c84:	60b9      	str	r1, [r7, #8]
 8016c86:	607a      	str	r2, [r7, #4]
 8016c88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016c8a:	2300      	movs	r3, #0
 8016c8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d10a      	bne.n	8016cae <xQueueGenericSend+0x32>
	__asm volatile
 8016c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c9c:	f383 8811 	msr	BASEPRI, r3
 8016ca0:	f3bf 8f6f 	isb	sy
 8016ca4:	f3bf 8f4f 	dsb	sy
 8016ca8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016caa:	bf00      	nop
 8016cac:	e7fe      	b.n	8016cac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016cae:	68bb      	ldr	r3, [r7, #8]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d103      	bne.n	8016cbc <xQueueGenericSend+0x40>
 8016cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d101      	bne.n	8016cc0 <xQueueGenericSend+0x44>
 8016cbc:	2301      	movs	r3, #1
 8016cbe:	e000      	b.n	8016cc2 <xQueueGenericSend+0x46>
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d10a      	bne.n	8016cdc <xQueueGenericSend+0x60>
	__asm volatile
 8016cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cca:	f383 8811 	msr	BASEPRI, r3
 8016cce:	f3bf 8f6f 	isb	sy
 8016cd2:	f3bf 8f4f 	dsb	sy
 8016cd6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016cd8:	bf00      	nop
 8016cda:	e7fe      	b.n	8016cda <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016cdc:	683b      	ldr	r3, [r7, #0]
 8016cde:	2b02      	cmp	r3, #2
 8016ce0:	d103      	bne.n	8016cea <xQueueGenericSend+0x6e>
 8016ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ce6:	2b01      	cmp	r3, #1
 8016ce8:	d101      	bne.n	8016cee <xQueueGenericSend+0x72>
 8016cea:	2301      	movs	r3, #1
 8016cec:	e000      	b.n	8016cf0 <xQueueGenericSend+0x74>
 8016cee:	2300      	movs	r3, #0
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d10a      	bne.n	8016d0a <xQueueGenericSend+0x8e>
	__asm volatile
 8016cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cf8:	f383 8811 	msr	BASEPRI, r3
 8016cfc:	f3bf 8f6f 	isb	sy
 8016d00:	f3bf 8f4f 	dsb	sy
 8016d04:	623b      	str	r3, [r7, #32]
}
 8016d06:	bf00      	nop
 8016d08:	e7fe      	b.n	8016d08 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016d0a:	f001 fa71 	bl	80181f0 <xTaskGetSchedulerState>
 8016d0e:	4603      	mov	r3, r0
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d102      	bne.n	8016d1a <xQueueGenericSend+0x9e>
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d101      	bne.n	8016d1e <xQueueGenericSend+0xa2>
 8016d1a:	2301      	movs	r3, #1
 8016d1c:	e000      	b.n	8016d20 <xQueueGenericSend+0xa4>
 8016d1e:	2300      	movs	r3, #0
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d10a      	bne.n	8016d3a <xQueueGenericSend+0xbe>
	__asm volatile
 8016d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d28:	f383 8811 	msr	BASEPRI, r3
 8016d2c:	f3bf 8f6f 	isb	sy
 8016d30:	f3bf 8f4f 	dsb	sy
 8016d34:	61fb      	str	r3, [r7, #28]
}
 8016d36:	bf00      	nop
 8016d38:	e7fe      	b.n	8016d38 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016d3a:	f001 ffeb 	bl	8018d14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d46:	429a      	cmp	r2, r3
 8016d48:	d302      	bcc.n	8016d50 <xQueueGenericSend+0xd4>
 8016d4a:	683b      	ldr	r3, [r7, #0]
 8016d4c:	2b02      	cmp	r3, #2
 8016d4e:	d129      	bne.n	8016da4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016d50:	683a      	ldr	r2, [r7, #0]
 8016d52:	68b9      	ldr	r1, [r7, #8]
 8016d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d56:	f000 fa0b 	bl	8017170 <prvCopyDataToQueue>
 8016d5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d010      	beq.n	8016d86 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d66:	3324      	adds	r3, #36	; 0x24
 8016d68:	4618      	mov	r0, r3
 8016d6a:	f001 f821 	bl	8017db0 <xTaskRemoveFromEventList>
 8016d6e:	4603      	mov	r3, r0
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d013      	beq.n	8016d9c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016d74:	4b3f      	ldr	r3, [pc, #252]	; (8016e74 <xQueueGenericSend+0x1f8>)
 8016d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d7a:	601a      	str	r2, [r3, #0]
 8016d7c:	f3bf 8f4f 	dsb	sy
 8016d80:	f3bf 8f6f 	isb	sy
 8016d84:	e00a      	b.n	8016d9c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d007      	beq.n	8016d9c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016d8c:	4b39      	ldr	r3, [pc, #228]	; (8016e74 <xQueueGenericSend+0x1f8>)
 8016d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d92:	601a      	str	r2, [r3, #0]
 8016d94:	f3bf 8f4f 	dsb	sy
 8016d98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016d9c:	f001 ffea 	bl	8018d74 <vPortExitCritical>
				return pdPASS;
 8016da0:	2301      	movs	r3, #1
 8016da2:	e063      	b.n	8016e6c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d103      	bne.n	8016db2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016daa:	f001 ffe3 	bl	8018d74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8016dae:	2300      	movs	r3, #0
 8016db0:	e05c      	b.n	8016e6c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d106      	bne.n	8016dc6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016db8:	f107 0314 	add.w	r3, r7, #20
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	f001 f8bd 	bl	8017f3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016dc2:	2301      	movs	r3, #1
 8016dc4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016dc6:	f001 ffd5 	bl	8018d74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016dca:	f000 fd7b 	bl	80178c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016dce:	f001 ffa1 	bl	8018d14 <vPortEnterCritical>
 8016dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016dd8:	b25b      	sxtb	r3, r3
 8016dda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016dde:	d103      	bne.n	8016de8 <xQueueGenericSend+0x16c>
 8016de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016de2:	2200      	movs	r2, #0
 8016de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016dee:	b25b      	sxtb	r3, r3
 8016df0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016df4:	d103      	bne.n	8016dfe <xQueueGenericSend+0x182>
 8016df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016df8:	2200      	movs	r2, #0
 8016dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016dfe:	f001 ffb9 	bl	8018d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016e02:	1d3a      	adds	r2, r7, #4
 8016e04:	f107 0314 	add.w	r3, r7, #20
 8016e08:	4611      	mov	r1, r2
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	f001 f8ac 	bl	8017f68 <xTaskCheckForTimeOut>
 8016e10:	4603      	mov	r3, r0
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d124      	bne.n	8016e60 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016e16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016e18:	f000 faa2 	bl	8017360 <prvIsQueueFull>
 8016e1c:	4603      	mov	r3, r0
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d018      	beq.n	8016e54 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e24:	3310      	adds	r3, #16
 8016e26:	687a      	ldr	r2, [r7, #4]
 8016e28:	4611      	mov	r1, r2
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	f000 ff34 	bl	8017c98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016e32:	f000 fa2d 	bl	8017290 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016e36:	f000 fd53 	bl	80178e0 <xTaskResumeAll>
 8016e3a:	4603      	mov	r3, r0
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	f47f af7c 	bne.w	8016d3a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8016e42:	4b0c      	ldr	r3, [pc, #48]	; (8016e74 <xQueueGenericSend+0x1f8>)
 8016e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e48:	601a      	str	r2, [r3, #0]
 8016e4a:	f3bf 8f4f 	dsb	sy
 8016e4e:	f3bf 8f6f 	isb	sy
 8016e52:	e772      	b.n	8016d3a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016e56:	f000 fa1b 	bl	8017290 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016e5a:	f000 fd41 	bl	80178e0 <xTaskResumeAll>
 8016e5e:	e76c      	b.n	8016d3a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016e60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016e62:	f000 fa15 	bl	8017290 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016e66:	f000 fd3b 	bl	80178e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016e6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016e6c:	4618      	mov	r0, r3
 8016e6e:	3738      	adds	r7, #56	; 0x38
 8016e70:	46bd      	mov	sp, r7
 8016e72:	bd80      	pop	{r7, pc}
 8016e74:	e000ed04 	.word	0xe000ed04

08016e78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016e78:	b580      	push	{r7, lr}
 8016e7a:	b090      	sub	sp, #64	; 0x40
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	60f8      	str	r0, [r7, #12]
 8016e80:	60b9      	str	r1, [r7, #8]
 8016e82:	607a      	str	r2, [r7, #4]
 8016e84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8016e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d10a      	bne.n	8016ea6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8016e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e94:	f383 8811 	msr	BASEPRI, r3
 8016e98:	f3bf 8f6f 	isb	sy
 8016e9c:	f3bf 8f4f 	dsb	sy
 8016ea0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016ea2:	bf00      	nop
 8016ea4:	e7fe      	b.n	8016ea4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016ea6:	68bb      	ldr	r3, [r7, #8]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d103      	bne.n	8016eb4 <xQueueGenericSendFromISR+0x3c>
 8016eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d101      	bne.n	8016eb8 <xQueueGenericSendFromISR+0x40>
 8016eb4:	2301      	movs	r3, #1
 8016eb6:	e000      	b.n	8016eba <xQueueGenericSendFromISR+0x42>
 8016eb8:	2300      	movs	r3, #0
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d10a      	bne.n	8016ed4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8016ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ec2:	f383 8811 	msr	BASEPRI, r3
 8016ec6:	f3bf 8f6f 	isb	sy
 8016eca:	f3bf 8f4f 	dsb	sy
 8016ece:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016ed0:	bf00      	nop
 8016ed2:	e7fe      	b.n	8016ed2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016ed4:	683b      	ldr	r3, [r7, #0]
 8016ed6:	2b02      	cmp	r3, #2
 8016ed8:	d103      	bne.n	8016ee2 <xQueueGenericSendFromISR+0x6a>
 8016eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ede:	2b01      	cmp	r3, #1
 8016ee0:	d101      	bne.n	8016ee6 <xQueueGenericSendFromISR+0x6e>
 8016ee2:	2301      	movs	r3, #1
 8016ee4:	e000      	b.n	8016ee8 <xQueueGenericSendFromISR+0x70>
 8016ee6:	2300      	movs	r3, #0
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d10a      	bne.n	8016f02 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8016eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ef0:	f383 8811 	msr	BASEPRI, r3
 8016ef4:	f3bf 8f6f 	isb	sy
 8016ef8:	f3bf 8f4f 	dsb	sy
 8016efc:	623b      	str	r3, [r7, #32]
}
 8016efe:	bf00      	nop
 8016f00:	e7fe      	b.n	8016f00 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016f02:	f001 ffe9 	bl	8018ed8 <vPortValidateInterruptPriority>
	__asm volatile
 8016f06:	f3ef 8211 	mrs	r2, BASEPRI
 8016f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f0e:	f383 8811 	msr	BASEPRI, r3
 8016f12:	f3bf 8f6f 	isb	sy
 8016f16:	f3bf 8f4f 	dsb	sy
 8016f1a:	61fa      	str	r2, [r7, #28]
 8016f1c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8016f1e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016f20:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f2a:	429a      	cmp	r2, r3
 8016f2c:	d302      	bcc.n	8016f34 <xQueueGenericSendFromISR+0xbc>
 8016f2e:	683b      	ldr	r3, [r7, #0]
 8016f30:	2b02      	cmp	r3, #2
 8016f32:	d12f      	bne.n	8016f94 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f42:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016f44:	683a      	ldr	r2, [r7, #0]
 8016f46:	68b9      	ldr	r1, [r7, #8]
 8016f48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016f4a:	f000 f911 	bl	8017170 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016f4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8016f52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016f56:	d112      	bne.n	8016f7e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d016      	beq.n	8016f8e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f62:	3324      	adds	r3, #36	; 0x24
 8016f64:	4618      	mov	r0, r3
 8016f66:	f000 ff23 	bl	8017db0 <xTaskRemoveFromEventList>
 8016f6a:	4603      	mov	r3, r0
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d00e      	beq.n	8016f8e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d00b      	beq.n	8016f8e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	2201      	movs	r2, #1
 8016f7a:	601a      	str	r2, [r3, #0]
 8016f7c:	e007      	b.n	8016f8e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016f7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016f82:	3301      	adds	r3, #1
 8016f84:	b2db      	uxtb	r3, r3
 8016f86:	b25a      	sxtb	r2, r3
 8016f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016f8e:	2301      	movs	r3, #1
 8016f90:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8016f92:	e001      	b.n	8016f98 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016f94:	2300      	movs	r3, #0
 8016f96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f9a:	617b      	str	r3, [r7, #20]
	__asm volatile
 8016f9c:	697b      	ldr	r3, [r7, #20]
 8016f9e:	f383 8811 	msr	BASEPRI, r3
}
 8016fa2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8016fa6:	4618      	mov	r0, r3
 8016fa8:	3740      	adds	r7, #64	; 0x40
 8016faa:	46bd      	mov	sp, r7
 8016fac:	bd80      	pop	{r7, pc}
	...

08016fb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016fb0:	b580      	push	{r7, lr}
 8016fb2:	b08c      	sub	sp, #48	; 0x30
 8016fb4:	af00      	add	r7, sp, #0
 8016fb6:	60f8      	str	r0, [r7, #12]
 8016fb8:	60b9      	str	r1, [r7, #8]
 8016fba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016fbc:	2300      	movs	r3, #0
 8016fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d10a      	bne.n	8016fe0 <xQueueReceive+0x30>
	__asm volatile
 8016fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fce:	f383 8811 	msr	BASEPRI, r3
 8016fd2:	f3bf 8f6f 	isb	sy
 8016fd6:	f3bf 8f4f 	dsb	sy
 8016fda:	623b      	str	r3, [r7, #32]
}
 8016fdc:	bf00      	nop
 8016fde:	e7fe      	b.n	8016fde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016fe0:	68bb      	ldr	r3, [r7, #8]
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d103      	bne.n	8016fee <xQueueReceive+0x3e>
 8016fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d101      	bne.n	8016ff2 <xQueueReceive+0x42>
 8016fee:	2301      	movs	r3, #1
 8016ff0:	e000      	b.n	8016ff4 <xQueueReceive+0x44>
 8016ff2:	2300      	movs	r3, #0
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d10a      	bne.n	801700e <xQueueReceive+0x5e>
	__asm volatile
 8016ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ffc:	f383 8811 	msr	BASEPRI, r3
 8017000:	f3bf 8f6f 	isb	sy
 8017004:	f3bf 8f4f 	dsb	sy
 8017008:	61fb      	str	r3, [r7, #28]
}
 801700a:	bf00      	nop
 801700c:	e7fe      	b.n	801700c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801700e:	f001 f8ef 	bl	80181f0 <xTaskGetSchedulerState>
 8017012:	4603      	mov	r3, r0
 8017014:	2b00      	cmp	r3, #0
 8017016:	d102      	bne.n	801701e <xQueueReceive+0x6e>
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d101      	bne.n	8017022 <xQueueReceive+0x72>
 801701e:	2301      	movs	r3, #1
 8017020:	e000      	b.n	8017024 <xQueueReceive+0x74>
 8017022:	2300      	movs	r3, #0
 8017024:	2b00      	cmp	r3, #0
 8017026:	d10a      	bne.n	801703e <xQueueReceive+0x8e>
	__asm volatile
 8017028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801702c:	f383 8811 	msr	BASEPRI, r3
 8017030:	f3bf 8f6f 	isb	sy
 8017034:	f3bf 8f4f 	dsb	sy
 8017038:	61bb      	str	r3, [r7, #24]
}
 801703a:	bf00      	nop
 801703c:	e7fe      	b.n	801703c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801703e:	f001 fe69 	bl	8018d14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017046:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801704a:	2b00      	cmp	r3, #0
 801704c:	d01f      	beq.n	801708e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801704e:	68b9      	ldr	r1, [r7, #8]
 8017050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017052:	f000 f8f7 	bl	8017244 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017058:	1e5a      	subs	r2, r3, #1
 801705a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801705c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801705e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017060:	691b      	ldr	r3, [r3, #16]
 8017062:	2b00      	cmp	r3, #0
 8017064:	d00f      	beq.n	8017086 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017068:	3310      	adds	r3, #16
 801706a:	4618      	mov	r0, r3
 801706c:	f000 fea0 	bl	8017db0 <xTaskRemoveFromEventList>
 8017070:	4603      	mov	r3, r0
 8017072:	2b00      	cmp	r3, #0
 8017074:	d007      	beq.n	8017086 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017076:	4b3d      	ldr	r3, [pc, #244]	; (801716c <xQueueReceive+0x1bc>)
 8017078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801707c:	601a      	str	r2, [r3, #0]
 801707e:	f3bf 8f4f 	dsb	sy
 8017082:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017086:	f001 fe75 	bl	8018d74 <vPortExitCritical>
				return pdPASS;
 801708a:	2301      	movs	r3, #1
 801708c:	e069      	b.n	8017162 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	2b00      	cmp	r3, #0
 8017092:	d103      	bne.n	801709c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017094:	f001 fe6e 	bl	8018d74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017098:	2300      	movs	r3, #0
 801709a:	e062      	b.n	8017162 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801709c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d106      	bne.n	80170b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80170a2:	f107 0310 	add.w	r3, r7, #16
 80170a6:	4618      	mov	r0, r3
 80170a8:	f000 ff48 	bl	8017f3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80170ac:	2301      	movs	r3, #1
 80170ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80170b0:	f001 fe60 	bl	8018d74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80170b4:	f000 fc06 	bl	80178c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80170b8:	f001 fe2c 	bl	8018d14 <vPortEnterCritical>
 80170bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80170c2:	b25b      	sxtb	r3, r3
 80170c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80170c8:	d103      	bne.n	80170d2 <xQueueReceive+0x122>
 80170ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170cc:	2200      	movs	r2, #0
 80170ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80170d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80170d8:	b25b      	sxtb	r3, r3
 80170da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80170de:	d103      	bne.n	80170e8 <xQueueReceive+0x138>
 80170e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170e2:	2200      	movs	r2, #0
 80170e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80170e8:	f001 fe44 	bl	8018d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80170ec:	1d3a      	adds	r2, r7, #4
 80170ee:	f107 0310 	add.w	r3, r7, #16
 80170f2:	4611      	mov	r1, r2
 80170f4:	4618      	mov	r0, r3
 80170f6:	f000 ff37 	bl	8017f68 <xTaskCheckForTimeOut>
 80170fa:	4603      	mov	r3, r0
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d123      	bne.n	8017148 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017102:	f000 f917 	bl	8017334 <prvIsQueueEmpty>
 8017106:	4603      	mov	r3, r0
 8017108:	2b00      	cmp	r3, #0
 801710a:	d017      	beq.n	801713c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801710c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801710e:	3324      	adds	r3, #36	; 0x24
 8017110:	687a      	ldr	r2, [r7, #4]
 8017112:	4611      	mov	r1, r2
 8017114:	4618      	mov	r0, r3
 8017116:	f000 fdbf 	bl	8017c98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801711a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801711c:	f000 f8b8 	bl	8017290 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017120:	f000 fbde 	bl	80178e0 <xTaskResumeAll>
 8017124:	4603      	mov	r3, r0
 8017126:	2b00      	cmp	r3, #0
 8017128:	d189      	bne.n	801703e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801712a:	4b10      	ldr	r3, [pc, #64]	; (801716c <xQueueReceive+0x1bc>)
 801712c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017130:	601a      	str	r2, [r3, #0]
 8017132:	f3bf 8f4f 	dsb	sy
 8017136:	f3bf 8f6f 	isb	sy
 801713a:	e780      	b.n	801703e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801713c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801713e:	f000 f8a7 	bl	8017290 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017142:	f000 fbcd 	bl	80178e0 <xTaskResumeAll>
 8017146:	e77a      	b.n	801703e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801714a:	f000 f8a1 	bl	8017290 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801714e:	f000 fbc7 	bl	80178e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017154:	f000 f8ee 	bl	8017334 <prvIsQueueEmpty>
 8017158:	4603      	mov	r3, r0
 801715a:	2b00      	cmp	r3, #0
 801715c:	f43f af6f 	beq.w	801703e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017160:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017162:	4618      	mov	r0, r3
 8017164:	3730      	adds	r7, #48	; 0x30
 8017166:	46bd      	mov	sp, r7
 8017168:	bd80      	pop	{r7, pc}
 801716a:	bf00      	nop
 801716c:	e000ed04 	.word	0xe000ed04

08017170 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017170:	b580      	push	{r7, lr}
 8017172:	b086      	sub	sp, #24
 8017174:	af00      	add	r7, sp, #0
 8017176:	60f8      	str	r0, [r7, #12]
 8017178:	60b9      	str	r1, [r7, #8]
 801717a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801717c:	2300      	movs	r3, #0
 801717e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017184:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801718a:	2b00      	cmp	r3, #0
 801718c:	d10d      	bne.n	80171aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d14d      	bne.n	8017232 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	689b      	ldr	r3, [r3, #8]
 801719a:	4618      	mov	r0, r3
 801719c:	f001 f846 	bl	801822c <xTaskPriorityDisinherit>
 80171a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80171a2:	68fb      	ldr	r3, [r7, #12]
 80171a4:	2200      	movs	r2, #0
 80171a6:	609a      	str	r2, [r3, #8]
 80171a8:	e043      	b.n	8017232 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d119      	bne.n	80171e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	6858      	ldr	r0, [r3, #4]
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171b8:	461a      	mov	r2, r3
 80171ba:	68b9      	ldr	r1, [r7, #8]
 80171bc:	f002 f8e0 	bl	8019380 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	685a      	ldr	r2, [r3, #4]
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171c8:	441a      	add	r2, r3
 80171ca:	68fb      	ldr	r3, [r7, #12]
 80171cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	685a      	ldr	r2, [r3, #4]
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	689b      	ldr	r3, [r3, #8]
 80171d6:	429a      	cmp	r2, r3
 80171d8:	d32b      	bcc.n	8017232 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	681a      	ldr	r2, [r3, #0]
 80171de:	68fb      	ldr	r3, [r7, #12]
 80171e0:	605a      	str	r2, [r3, #4]
 80171e2:	e026      	b.n	8017232 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	68d8      	ldr	r0, [r3, #12]
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171ec:	461a      	mov	r2, r3
 80171ee:	68b9      	ldr	r1, [r7, #8]
 80171f0:	f002 f8c6 	bl	8019380 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	68da      	ldr	r2, [r3, #12]
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171fc:	425b      	negs	r3, r3
 80171fe:	441a      	add	r2, r3
 8017200:	68fb      	ldr	r3, [r7, #12]
 8017202:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017204:	68fb      	ldr	r3, [r7, #12]
 8017206:	68da      	ldr	r2, [r3, #12]
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	429a      	cmp	r2, r3
 801720e:	d207      	bcs.n	8017220 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	689a      	ldr	r2, [r3, #8]
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017218:	425b      	negs	r3, r3
 801721a:	441a      	add	r2, r3
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	2b02      	cmp	r3, #2
 8017224:	d105      	bne.n	8017232 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017226:	693b      	ldr	r3, [r7, #16]
 8017228:	2b00      	cmp	r3, #0
 801722a:	d002      	beq.n	8017232 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801722c:	693b      	ldr	r3, [r7, #16]
 801722e:	3b01      	subs	r3, #1
 8017230:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017232:	693b      	ldr	r3, [r7, #16]
 8017234:	1c5a      	adds	r2, r3, #1
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801723a:	697b      	ldr	r3, [r7, #20]
}
 801723c:	4618      	mov	r0, r3
 801723e:	3718      	adds	r7, #24
 8017240:	46bd      	mov	sp, r7
 8017242:	bd80      	pop	{r7, pc}

08017244 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017244:	b580      	push	{r7, lr}
 8017246:	b082      	sub	sp, #8
 8017248:	af00      	add	r7, sp, #0
 801724a:	6078      	str	r0, [r7, #4]
 801724c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017252:	2b00      	cmp	r3, #0
 8017254:	d018      	beq.n	8017288 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	68da      	ldr	r2, [r3, #12]
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801725e:	441a      	add	r2, r3
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	68da      	ldr	r2, [r3, #12]
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	689b      	ldr	r3, [r3, #8]
 801726c:	429a      	cmp	r2, r3
 801726e:	d303      	bcc.n	8017278 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	681a      	ldr	r2, [r3, #0]
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	68d9      	ldr	r1, [r3, #12]
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017280:	461a      	mov	r2, r3
 8017282:	6838      	ldr	r0, [r7, #0]
 8017284:	f002 f87c 	bl	8019380 <memcpy>
	}
}
 8017288:	bf00      	nop
 801728a:	3708      	adds	r7, #8
 801728c:	46bd      	mov	sp, r7
 801728e:	bd80      	pop	{r7, pc}

08017290 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017290:	b580      	push	{r7, lr}
 8017292:	b084      	sub	sp, #16
 8017294:	af00      	add	r7, sp, #0
 8017296:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017298:	f001 fd3c 	bl	8018d14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80172a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80172a4:	e011      	b.n	80172ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d012      	beq.n	80172d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	3324      	adds	r3, #36	; 0x24
 80172b2:	4618      	mov	r0, r3
 80172b4:	f000 fd7c 	bl	8017db0 <xTaskRemoveFromEventList>
 80172b8:	4603      	mov	r3, r0
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d001      	beq.n	80172c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80172be:	f000 feb5 	bl	801802c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80172c2:	7bfb      	ldrb	r3, [r7, #15]
 80172c4:	3b01      	subs	r3, #1
 80172c6:	b2db      	uxtb	r3, r3
 80172c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80172ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	dce9      	bgt.n	80172a6 <prvUnlockQueue+0x16>
 80172d2:	e000      	b.n	80172d6 <prvUnlockQueue+0x46>
					break;
 80172d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	22ff      	movs	r2, #255	; 0xff
 80172da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80172de:	f001 fd49 	bl	8018d74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80172e2:	f001 fd17 	bl	8018d14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80172ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80172ee:	e011      	b.n	8017314 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	691b      	ldr	r3, [r3, #16]
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d012      	beq.n	801731e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	3310      	adds	r3, #16
 80172fc:	4618      	mov	r0, r3
 80172fe:	f000 fd57 	bl	8017db0 <xTaskRemoveFromEventList>
 8017302:	4603      	mov	r3, r0
 8017304:	2b00      	cmp	r3, #0
 8017306:	d001      	beq.n	801730c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017308:	f000 fe90 	bl	801802c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801730c:	7bbb      	ldrb	r3, [r7, #14]
 801730e:	3b01      	subs	r3, #1
 8017310:	b2db      	uxtb	r3, r3
 8017312:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017314:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017318:	2b00      	cmp	r3, #0
 801731a:	dce9      	bgt.n	80172f0 <prvUnlockQueue+0x60>
 801731c:	e000      	b.n	8017320 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801731e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	22ff      	movs	r2, #255	; 0xff
 8017324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017328:	f001 fd24 	bl	8018d74 <vPortExitCritical>
}
 801732c:	bf00      	nop
 801732e:	3710      	adds	r7, #16
 8017330:	46bd      	mov	sp, r7
 8017332:	bd80      	pop	{r7, pc}

08017334 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017334:	b580      	push	{r7, lr}
 8017336:	b084      	sub	sp, #16
 8017338:	af00      	add	r7, sp, #0
 801733a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801733c:	f001 fcea 	bl	8018d14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017344:	2b00      	cmp	r3, #0
 8017346:	d102      	bne.n	801734e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017348:	2301      	movs	r3, #1
 801734a:	60fb      	str	r3, [r7, #12]
 801734c:	e001      	b.n	8017352 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801734e:	2300      	movs	r3, #0
 8017350:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017352:	f001 fd0f 	bl	8018d74 <vPortExitCritical>

	return xReturn;
 8017356:	68fb      	ldr	r3, [r7, #12]
}
 8017358:	4618      	mov	r0, r3
 801735a:	3710      	adds	r7, #16
 801735c:	46bd      	mov	sp, r7
 801735e:	bd80      	pop	{r7, pc}

08017360 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017360:	b580      	push	{r7, lr}
 8017362:	b084      	sub	sp, #16
 8017364:	af00      	add	r7, sp, #0
 8017366:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017368:	f001 fcd4 	bl	8018d14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017374:	429a      	cmp	r2, r3
 8017376:	d102      	bne.n	801737e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017378:	2301      	movs	r3, #1
 801737a:	60fb      	str	r3, [r7, #12]
 801737c:	e001      	b.n	8017382 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801737e:	2300      	movs	r3, #0
 8017380:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017382:	f001 fcf7 	bl	8018d74 <vPortExitCritical>

	return xReturn;
 8017386:	68fb      	ldr	r3, [r7, #12]
}
 8017388:	4618      	mov	r0, r3
 801738a:	3710      	adds	r7, #16
 801738c:	46bd      	mov	sp, r7
 801738e:	bd80      	pop	{r7, pc}

08017390 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017390:	b480      	push	{r7}
 8017392:	b085      	sub	sp, #20
 8017394:	af00      	add	r7, sp, #0
 8017396:	6078      	str	r0, [r7, #4]
 8017398:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801739a:	2300      	movs	r3, #0
 801739c:	60fb      	str	r3, [r7, #12]
 801739e:	e014      	b.n	80173ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80173a0:	4a0f      	ldr	r2, [pc, #60]	; (80173e0 <vQueueAddToRegistry+0x50>)
 80173a2:	68fb      	ldr	r3, [r7, #12]
 80173a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d10b      	bne.n	80173c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80173ac:	490c      	ldr	r1, [pc, #48]	; (80173e0 <vQueueAddToRegistry+0x50>)
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	683a      	ldr	r2, [r7, #0]
 80173b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80173b6:	4a0a      	ldr	r2, [pc, #40]	; (80173e0 <vQueueAddToRegistry+0x50>)
 80173b8:	68fb      	ldr	r3, [r7, #12]
 80173ba:	00db      	lsls	r3, r3, #3
 80173bc:	4413      	add	r3, r2
 80173be:	687a      	ldr	r2, [r7, #4]
 80173c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80173c2:	e006      	b.n	80173d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	3301      	adds	r3, #1
 80173c8:	60fb      	str	r3, [r7, #12]
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	2b07      	cmp	r3, #7
 80173ce:	d9e7      	bls.n	80173a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80173d0:	bf00      	nop
 80173d2:	bf00      	nop
 80173d4:	3714      	adds	r7, #20
 80173d6:	46bd      	mov	sp, r7
 80173d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173dc:	4770      	bx	lr
 80173de:	bf00      	nop
 80173e0:	24002718 	.word	0x24002718

080173e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80173e4:	b580      	push	{r7, lr}
 80173e6:	b086      	sub	sp, #24
 80173e8:	af00      	add	r7, sp, #0
 80173ea:	60f8      	str	r0, [r7, #12]
 80173ec:	60b9      	str	r1, [r7, #8]
 80173ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80173f4:	f001 fc8e 	bl	8018d14 <vPortEnterCritical>
 80173f8:	697b      	ldr	r3, [r7, #20]
 80173fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80173fe:	b25b      	sxtb	r3, r3
 8017400:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017404:	d103      	bne.n	801740e <vQueueWaitForMessageRestricted+0x2a>
 8017406:	697b      	ldr	r3, [r7, #20]
 8017408:	2200      	movs	r2, #0
 801740a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801740e:	697b      	ldr	r3, [r7, #20]
 8017410:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017414:	b25b      	sxtb	r3, r3
 8017416:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801741a:	d103      	bne.n	8017424 <vQueueWaitForMessageRestricted+0x40>
 801741c:	697b      	ldr	r3, [r7, #20]
 801741e:	2200      	movs	r2, #0
 8017420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017424:	f001 fca6 	bl	8018d74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017428:	697b      	ldr	r3, [r7, #20]
 801742a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801742c:	2b00      	cmp	r3, #0
 801742e:	d106      	bne.n	801743e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017430:	697b      	ldr	r3, [r7, #20]
 8017432:	3324      	adds	r3, #36	; 0x24
 8017434:	687a      	ldr	r2, [r7, #4]
 8017436:	68b9      	ldr	r1, [r7, #8]
 8017438:	4618      	mov	r0, r3
 801743a:	f000 fc8d 	bl	8017d58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801743e:	6978      	ldr	r0, [r7, #20]
 8017440:	f7ff ff26 	bl	8017290 <prvUnlockQueue>
	}
 8017444:	bf00      	nop
 8017446:	3718      	adds	r7, #24
 8017448:	46bd      	mov	sp, r7
 801744a:	bd80      	pop	{r7, pc}

0801744c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801744c:	b580      	push	{r7, lr}
 801744e:	b08e      	sub	sp, #56	; 0x38
 8017450:	af04      	add	r7, sp, #16
 8017452:	60f8      	str	r0, [r7, #12]
 8017454:	60b9      	str	r1, [r7, #8]
 8017456:	607a      	str	r2, [r7, #4]
 8017458:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801745a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801745c:	2b00      	cmp	r3, #0
 801745e:	d10a      	bne.n	8017476 <xTaskCreateStatic+0x2a>
	__asm volatile
 8017460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017464:	f383 8811 	msr	BASEPRI, r3
 8017468:	f3bf 8f6f 	isb	sy
 801746c:	f3bf 8f4f 	dsb	sy
 8017470:	623b      	str	r3, [r7, #32]
}
 8017472:	bf00      	nop
 8017474:	e7fe      	b.n	8017474 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8017476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017478:	2b00      	cmp	r3, #0
 801747a:	d10a      	bne.n	8017492 <xTaskCreateStatic+0x46>
	__asm volatile
 801747c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017480:	f383 8811 	msr	BASEPRI, r3
 8017484:	f3bf 8f6f 	isb	sy
 8017488:	f3bf 8f4f 	dsb	sy
 801748c:	61fb      	str	r3, [r7, #28]
}
 801748e:	bf00      	nop
 8017490:	e7fe      	b.n	8017490 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017492:	235c      	movs	r3, #92	; 0x5c
 8017494:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017496:	693b      	ldr	r3, [r7, #16]
 8017498:	2b5c      	cmp	r3, #92	; 0x5c
 801749a:	d00a      	beq.n	80174b2 <xTaskCreateStatic+0x66>
	__asm volatile
 801749c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174a0:	f383 8811 	msr	BASEPRI, r3
 80174a4:	f3bf 8f6f 	isb	sy
 80174a8:	f3bf 8f4f 	dsb	sy
 80174ac:	61bb      	str	r3, [r7, #24]
}
 80174ae:	bf00      	nop
 80174b0:	e7fe      	b.n	80174b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80174b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80174b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d01e      	beq.n	80174f8 <xTaskCreateStatic+0xac>
 80174ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d01b      	beq.n	80174f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80174c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80174c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80174c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80174ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174cc:	2202      	movs	r2, #2
 80174ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80174d2:	2300      	movs	r3, #0
 80174d4:	9303      	str	r3, [sp, #12]
 80174d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174d8:	9302      	str	r3, [sp, #8]
 80174da:	f107 0314 	add.w	r3, r7, #20
 80174de:	9301      	str	r3, [sp, #4]
 80174e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174e2:	9300      	str	r3, [sp, #0]
 80174e4:	683b      	ldr	r3, [r7, #0]
 80174e6:	687a      	ldr	r2, [r7, #4]
 80174e8:	68b9      	ldr	r1, [r7, #8]
 80174ea:	68f8      	ldr	r0, [r7, #12]
 80174ec:	f000 f850 	bl	8017590 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80174f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80174f2:	f000 f8dd 	bl	80176b0 <prvAddNewTaskToReadyList>
 80174f6:	e001      	b.n	80174fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80174f8:	2300      	movs	r3, #0
 80174fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80174fc:	697b      	ldr	r3, [r7, #20]
	}
 80174fe:	4618      	mov	r0, r3
 8017500:	3728      	adds	r7, #40	; 0x28
 8017502:	46bd      	mov	sp, r7
 8017504:	bd80      	pop	{r7, pc}

08017506 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017506:	b580      	push	{r7, lr}
 8017508:	b08c      	sub	sp, #48	; 0x30
 801750a:	af04      	add	r7, sp, #16
 801750c:	60f8      	str	r0, [r7, #12]
 801750e:	60b9      	str	r1, [r7, #8]
 8017510:	603b      	str	r3, [r7, #0]
 8017512:	4613      	mov	r3, r2
 8017514:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017516:	88fb      	ldrh	r3, [r7, #6]
 8017518:	009b      	lsls	r3, r3, #2
 801751a:	4618      	mov	r0, r3
 801751c:	f001 fd1c 	bl	8018f58 <pvPortMalloc>
 8017520:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017522:	697b      	ldr	r3, [r7, #20]
 8017524:	2b00      	cmp	r3, #0
 8017526:	d00e      	beq.n	8017546 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017528:	205c      	movs	r0, #92	; 0x5c
 801752a:	f001 fd15 	bl	8018f58 <pvPortMalloc>
 801752e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017530:	69fb      	ldr	r3, [r7, #28]
 8017532:	2b00      	cmp	r3, #0
 8017534:	d003      	beq.n	801753e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017536:	69fb      	ldr	r3, [r7, #28]
 8017538:	697a      	ldr	r2, [r7, #20]
 801753a:	631a      	str	r2, [r3, #48]	; 0x30
 801753c:	e005      	b.n	801754a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801753e:	6978      	ldr	r0, [r7, #20]
 8017540:	f001 fdd6 	bl	80190f0 <vPortFree>
 8017544:	e001      	b.n	801754a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017546:	2300      	movs	r3, #0
 8017548:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801754a:	69fb      	ldr	r3, [r7, #28]
 801754c:	2b00      	cmp	r3, #0
 801754e:	d017      	beq.n	8017580 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017550:	69fb      	ldr	r3, [r7, #28]
 8017552:	2200      	movs	r2, #0
 8017554:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017558:	88fa      	ldrh	r2, [r7, #6]
 801755a:	2300      	movs	r3, #0
 801755c:	9303      	str	r3, [sp, #12]
 801755e:	69fb      	ldr	r3, [r7, #28]
 8017560:	9302      	str	r3, [sp, #8]
 8017562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017564:	9301      	str	r3, [sp, #4]
 8017566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017568:	9300      	str	r3, [sp, #0]
 801756a:	683b      	ldr	r3, [r7, #0]
 801756c:	68b9      	ldr	r1, [r7, #8]
 801756e:	68f8      	ldr	r0, [r7, #12]
 8017570:	f000 f80e 	bl	8017590 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017574:	69f8      	ldr	r0, [r7, #28]
 8017576:	f000 f89b 	bl	80176b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801757a:	2301      	movs	r3, #1
 801757c:	61bb      	str	r3, [r7, #24]
 801757e:	e002      	b.n	8017586 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017584:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017586:	69bb      	ldr	r3, [r7, #24]
	}
 8017588:	4618      	mov	r0, r3
 801758a:	3720      	adds	r7, #32
 801758c:	46bd      	mov	sp, r7
 801758e:	bd80      	pop	{r7, pc}

08017590 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017590:	b580      	push	{r7, lr}
 8017592:	b088      	sub	sp, #32
 8017594:	af00      	add	r7, sp, #0
 8017596:	60f8      	str	r0, [r7, #12]
 8017598:	60b9      	str	r1, [r7, #8]
 801759a:	607a      	str	r2, [r7, #4]
 801759c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801759e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	009b      	lsls	r3, r3, #2
 80175a6:	461a      	mov	r2, r3
 80175a8:	21a5      	movs	r1, #165	; 0xa5
 80175aa:	f001 fef7 	bl	801939c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80175ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80175b2:	6879      	ldr	r1, [r7, #4]
 80175b4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80175b8:	440b      	add	r3, r1
 80175ba:	009b      	lsls	r3, r3, #2
 80175bc:	4413      	add	r3, r2
 80175be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80175c0:	69bb      	ldr	r3, [r7, #24]
 80175c2:	f023 0307 	bic.w	r3, r3, #7
 80175c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80175c8:	69bb      	ldr	r3, [r7, #24]
 80175ca:	f003 0307 	and.w	r3, r3, #7
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d00a      	beq.n	80175e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80175d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175d6:	f383 8811 	msr	BASEPRI, r3
 80175da:	f3bf 8f6f 	isb	sy
 80175de:	f3bf 8f4f 	dsb	sy
 80175e2:	617b      	str	r3, [r7, #20]
}
 80175e4:	bf00      	nop
 80175e6:	e7fe      	b.n	80175e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80175e8:	68bb      	ldr	r3, [r7, #8]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d01f      	beq.n	801762e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80175ee:	2300      	movs	r3, #0
 80175f0:	61fb      	str	r3, [r7, #28]
 80175f2:	e012      	b.n	801761a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80175f4:	68ba      	ldr	r2, [r7, #8]
 80175f6:	69fb      	ldr	r3, [r7, #28]
 80175f8:	4413      	add	r3, r2
 80175fa:	7819      	ldrb	r1, [r3, #0]
 80175fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80175fe:	69fb      	ldr	r3, [r7, #28]
 8017600:	4413      	add	r3, r2
 8017602:	3334      	adds	r3, #52	; 0x34
 8017604:	460a      	mov	r2, r1
 8017606:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017608:	68ba      	ldr	r2, [r7, #8]
 801760a:	69fb      	ldr	r3, [r7, #28]
 801760c:	4413      	add	r3, r2
 801760e:	781b      	ldrb	r3, [r3, #0]
 8017610:	2b00      	cmp	r3, #0
 8017612:	d006      	beq.n	8017622 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017614:	69fb      	ldr	r3, [r7, #28]
 8017616:	3301      	adds	r3, #1
 8017618:	61fb      	str	r3, [r7, #28]
 801761a:	69fb      	ldr	r3, [r7, #28]
 801761c:	2b0f      	cmp	r3, #15
 801761e:	d9e9      	bls.n	80175f4 <prvInitialiseNewTask+0x64>
 8017620:	e000      	b.n	8017624 <prvInitialiseNewTask+0x94>
			{
				break;
 8017622:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017626:	2200      	movs	r2, #0
 8017628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801762c:	e003      	b.n	8017636 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017630:	2200      	movs	r2, #0
 8017632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017638:	2b37      	cmp	r3, #55	; 0x37
 801763a:	d901      	bls.n	8017640 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801763c:	2337      	movs	r3, #55	; 0x37
 801763e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017642:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017644:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801764a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801764c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801764e:	2200      	movs	r2, #0
 8017650:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017654:	3304      	adds	r3, #4
 8017656:	4618      	mov	r0, r3
 8017658:	f7ff f978 	bl	801694c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801765c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801765e:	3318      	adds	r3, #24
 8017660:	4618      	mov	r0, r3
 8017662:	f7ff f973 	bl	801694c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801766a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801766c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801766e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017674:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801767a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801767c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801767e:	2200      	movs	r2, #0
 8017680:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017684:	2200      	movs	r2, #0
 8017686:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801768a:	683a      	ldr	r2, [r7, #0]
 801768c:	68f9      	ldr	r1, [r7, #12]
 801768e:	69b8      	ldr	r0, [r7, #24]
 8017690:	f001 fa14 	bl	8018abc <pxPortInitialiseStack>
 8017694:	4602      	mov	r2, r0
 8017696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017698:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801769a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801769c:	2b00      	cmp	r3, #0
 801769e:	d002      	beq.n	80176a6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80176a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80176a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80176a6:	bf00      	nop
 80176a8:	3720      	adds	r7, #32
 80176aa:	46bd      	mov	sp, r7
 80176ac:	bd80      	pop	{r7, pc}
	...

080176b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b082      	sub	sp, #8
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80176b8:	f001 fb2c 	bl	8018d14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80176bc:	4b2d      	ldr	r3, [pc, #180]	; (8017774 <prvAddNewTaskToReadyList+0xc4>)
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	3301      	adds	r3, #1
 80176c2:	4a2c      	ldr	r2, [pc, #176]	; (8017774 <prvAddNewTaskToReadyList+0xc4>)
 80176c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80176c6:	4b2c      	ldr	r3, [pc, #176]	; (8017778 <prvAddNewTaskToReadyList+0xc8>)
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d109      	bne.n	80176e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80176ce:	4a2a      	ldr	r2, [pc, #168]	; (8017778 <prvAddNewTaskToReadyList+0xc8>)
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80176d4:	4b27      	ldr	r3, [pc, #156]	; (8017774 <prvAddNewTaskToReadyList+0xc4>)
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	2b01      	cmp	r3, #1
 80176da:	d110      	bne.n	80176fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80176dc:	f000 fcca 	bl	8018074 <prvInitialiseTaskLists>
 80176e0:	e00d      	b.n	80176fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80176e2:	4b26      	ldr	r3, [pc, #152]	; (801777c <prvAddNewTaskToReadyList+0xcc>)
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d109      	bne.n	80176fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80176ea:	4b23      	ldr	r3, [pc, #140]	; (8017778 <prvAddNewTaskToReadyList+0xc8>)
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176f4:	429a      	cmp	r2, r3
 80176f6:	d802      	bhi.n	80176fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80176f8:	4a1f      	ldr	r2, [pc, #124]	; (8017778 <prvAddNewTaskToReadyList+0xc8>)
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80176fe:	4b20      	ldr	r3, [pc, #128]	; (8017780 <prvAddNewTaskToReadyList+0xd0>)
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	3301      	adds	r3, #1
 8017704:	4a1e      	ldr	r2, [pc, #120]	; (8017780 <prvAddNewTaskToReadyList+0xd0>)
 8017706:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017708:	4b1d      	ldr	r3, [pc, #116]	; (8017780 <prvAddNewTaskToReadyList+0xd0>)
 801770a:	681a      	ldr	r2, [r3, #0]
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017714:	4b1b      	ldr	r3, [pc, #108]	; (8017784 <prvAddNewTaskToReadyList+0xd4>)
 8017716:	681b      	ldr	r3, [r3, #0]
 8017718:	429a      	cmp	r2, r3
 801771a:	d903      	bls.n	8017724 <prvAddNewTaskToReadyList+0x74>
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017720:	4a18      	ldr	r2, [pc, #96]	; (8017784 <prvAddNewTaskToReadyList+0xd4>)
 8017722:	6013      	str	r3, [r2, #0]
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017728:	4613      	mov	r3, r2
 801772a:	009b      	lsls	r3, r3, #2
 801772c:	4413      	add	r3, r2
 801772e:	009b      	lsls	r3, r3, #2
 8017730:	4a15      	ldr	r2, [pc, #84]	; (8017788 <prvAddNewTaskToReadyList+0xd8>)
 8017732:	441a      	add	r2, r3
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	3304      	adds	r3, #4
 8017738:	4619      	mov	r1, r3
 801773a:	4610      	mov	r0, r2
 801773c:	f7ff f913 	bl	8016966 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017740:	f001 fb18 	bl	8018d74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017744:	4b0d      	ldr	r3, [pc, #52]	; (801777c <prvAddNewTaskToReadyList+0xcc>)
 8017746:	681b      	ldr	r3, [r3, #0]
 8017748:	2b00      	cmp	r3, #0
 801774a:	d00e      	beq.n	801776a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801774c:	4b0a      	ldr	r3, [pc, #40]	; (8017778 <prvAddNewTaskToReadyList+0xc8>)
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017756:	429a      	cmp	r2, r3
 8017758:	d207      	bcs.n	801776a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801775a:	4b0c      	ldr	r3, [pc, #48]	; (801778c <prvAddNewTaskToReadyList+0xdc>)
 801775c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017760:	601a      	str	r2, [r3, #0]
 8017762:	f3bf 8f4f 	dsb	sy
 8017766:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801776a:	bf00      	nop
 801776c:	3708      	adds	r7, #8
 801776e:	46bd      	mov	sp, r7
 8017770:	bd80      	pop	{r7, pc}
 8017772:	bf00      	nop
 8017774:	24002c2c 	.word	0x24002c2c
 8017778:	24002758 	.word	0x24002758
 801777c:	24002c38 	.word	0x24002c38
 8017780:	24002c48 	.word	0x24002c48
 8017784:	24002c34 	.word	0x24002c34
 8017788:	2400275c 	.word	0x2400275c
 801778c:	e000ed04 	.word	0xe000ed04

08017790 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017790:	b580      	push	{r7, lr}
 8017792:	b084      	sub	sp, #16
 8017794:	af00      	add	r7, sp, #0
 8017796:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017798:	2300      	movs	r3, #0
 801779a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d017      	beq.n	80177d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80177a2:	4b13      	ldr	r3, [pc, #76]	; (80177f0 <vTaskDelay+0x60>)
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d00a      	beq.n	80177c0 <vTaskDelay+0x30>
	__asm volatile
 80177aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177ae:	f383 8811 	msr	BASEPRI, r3
 80177b2:	f3bf 8f6f 	isb	sy
 80177b6:	f3bf 8f4f 	dsb	sy
 80177ba:	60bb      	str	r3, [r7, #8]
}
 80177bc:	bf00      	nop
 80177be:	e7fe      	b.n	80177be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80177c0:	f000 f880 	bl	80178c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80177c4:	2100      	movs	r1, #0
 80177c6:	6878      	ldr	r0, [r7, #4]
 80177c8:	f000 fdb6 	bl	8018338 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80177cc:	f000 f888 	bl	80178e0 <xTaskResumeAll>
 80177d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d107      	bne.n	80177e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80177d8:	4b06      	ldr	r3, [pc, #24]	; (80177f4 <vTaskDelay+0x64>)
 80177da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80177de:	601a      	str	r2, [r3, #0]
 80177e0:	f3bf 8f4f 	dsb	sy
 80177e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80177e8:	bf00      	nop
 80177ea:	3710      	adds	r7, #16
 80177ec:	46bd      	mov	sp, r7
 80177ee:	bd80      	pop	{r7, pc}
 80177f0:	24002c54 	.word	0x24002c54
 80177f4:	e000ed04 	.word	0xe000ed04

080177f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	b08a      	sub	sp, #40	; 0x28
 80177fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80177fe:	2300      	movs	r3, #0
 8017800:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017802:	2300      	movs	r3, #0
 8017804:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017806:	463a      	mov	r2, r7
 8017808:	1d39      	adds	r1, r7, #4
 801780a:	f107 0308 	add.w	r3, r7, #8
 801780e:	4618      	mov	r0, r3
 8017810:	f7fe fddc 	bl	80163cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017814:	6839      	ldr	r1, [r7, #0]
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	68ba      	ldr	r2, [r7, #8]
 801781a:	9202      	str	r2, [sp, #8]
 801781c:	9301      	str	r3, [sp, #4]
 801781e:	2300      	movs	r3, #0
 8017820:	9300      	str	r3, [sp, #0]
 8017822:	2300      	movs	r3, #0
 8017824:	460a      	mov	r2, r1
 8017826:	4921      	ldr	r1, [pc, #132]	; (80178ac <vTaskStartScheduler+0xb4>)
 8017828:	4821      	ldr	r0, [pc, #132]	; (80178b0 <vTaskStartScheduler+0xb8>)
 801782a:	f7ff fe0f 	bl	801744c <xTaskCreateStatic>
 801782e:	4603      	mov	r3, r0
 8017830:	4a20      	ldr	r2, [pc, #128]	; (80178b4 <vTaskStartScheduler+0xbc>)
 8017832:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017834:	4b1f      	ldr	r3, [pc, #124]	; (80178b4 <vTaskStartScheduler+0xbc>)
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	2b00      	cmp	r3, #0
 801783a:	d002      	beq.n	8017842 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801783c:	2301      	movs	r3, #1
 801783e:	617b      	str	r3, [r7, #20]
 8017840:	e001      	b.n	8017846 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8017842:	2300      	movs	r3, #0
 8017844:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8017846:	697b      	ldr	r3, [r7, #20]
 8017848:	2b01      	cmp	r3, #1
 801784a:	d102      	bne.n	8017852 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801784c:	f000 fdc8 	bl	80183e0 <xTimerCreateTimerTask>
 8017850:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017852:	697b      	ldr	r3, [r7, #20]
 8017854:	2b01      	cmp	r3, #1
 8017856:	d116      	bne.n	8017886 <vTaskStartScheduler+0x8e>
	__asm volatile
 8017858:	f04f 0350 	mov.w	r3, #80	; 0x50
 801785c:	f383 8811 	msr	BASEPRI, r3
 8017860:	f3bf 8f6f 	isb	sy
 8017864:	f3bf 8f4f 	dsb	sy
 8017868:	613b      	str	r3, [r7, #16]
}
 801786a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801786c:	4b12      	ldr	r3, [pc, #72]	; (80178b8 <vTaskStartScheduler+0xc0>)
 801786e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017872:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017874:	4b11      	ldr	r3, [pc, #68]	; (80178bc <vTaskStartScheduler+0xc4>)
 8017876:	2201      	movs	r2, #1
 8017878:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801787a:	4b11      	ldr	r3, [pc, #68]	; (80178c0 <vTaskStartScheduler+0xc8>)
 801787c:	2200      	movs	r2, #0
 801787e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017880:	f001 f9a6 	bl	8018bd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017884:	e00e      	b.n	80178a4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017886:	697b      	ldr	r3, [r7, #20]
 8017888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801788c:	d10a      	bne.n	80178a4 <vTaskStartScheduler+0xac>
	__asm volatile
 801788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017892:	f383 8811 	msr	BASEPRI, r3
 8017896:	f3bf 8f6f 	isb	sy
 801789a:	f3bf 8f4f 	dsb	sy
 801789e:	60fb      	str	r3, [r7, #12]
}
 80178a0:	bf00      	nop
 80178a2:	e7fe      	b.n	80178a2 <vTaskStartScheduler+0xaa>
}
 80178a4:	bf00      	nop
 80178a6:	3718      	adds	r7, #24
 80178a8:	46bd      	mov	sp, r7
 80178aa:	bd80      	pop	{r7, pc}
 80178ac:	0801a010 	.word	0x0801a010
 80178b0:	08018045 	.word	0x08018045
 80178b4:	24002c50 	.word	0x24002c50
 80178b8:	24002c4c 	.word	0x24002c4c
 80178bc:	24002c38 	.word	0x24002c38
 80178c0:	24002c30 	.word	0x24002c30

080178c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80178c4:	b480      	push	{r7}
 80178c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80178c8:	4b04      	ldr	r3, [pc, #16]	; (80178dc <vTaskSuspendAll+0x18>)
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	3301      	adds	r3, #1
 80178ce:	4a03      	ldr	r2, [pc, #12]	; (80178dc <vTaskSuspendAll+0x18>)
 80178d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80178d2:	bf00      	nop
 80178d4:	46bd      	mov	sp, r7
 80178d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178da:	4770      	bx	lr
 80178dc:	24002c54 	.word	0x24002c54

080178e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80178e0:	b580      	push	{r7, lr}
 80178e2:	b084      	sub	sp, #16
 80178e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80178e6:	2300      	movs	r3, #0
 80178e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80178ea:	2300      	movs	r3, #0
 80178ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80178ee:	4b42      	ldr	r3, [pc, #264]	; (80179f8 <xTaskResumeAll+0x118>)
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d10a      	bne.n	801790c <xTaskResumeAll+0x2c>
	__asm volatile
 80178f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178fa:	f383 8811 	msr	BASEPRI, r3
 80178fe:	f3bf 8f6f 	isb	sy
 8017902:	f3bf 8f4f 	dsb	sy
 8017906:	603b      	str	r3, [r7, #0]
}
 8017908:	bf00      	nop
 801790a:	e7fe      	b.n	801790a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801790c:	f001 fa02 	bl	8018d14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017910:	4b39      	ldr	r3, [pc, #228]	; (80179f8 <xTaskResumeAll+0x118>)
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	3b01      	subs	r3, #1
 8017916:	4a38      	ldr	r2, [pc, #224]	; (80179f8 <xTaskResumeAll+0x118>)
 8017918:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801791a:	4b37      	ldr	r3, [pc, #220]	; (80179f8 <xTaskResumeAll+0x118>)
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	2b00      	cmp	r3, #0
 8017920:	d162      	bne.n	80179e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017922:	4b36      	ldr	r3, [pc, #216]	; (80179fc <xTaskResumeAll+0x11c>)
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	2b00      	cmp	r3, #0
 8017928:	d05e      	beq.n	80179e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801792a:	e02f      	b.n	801798c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801792c:	4b34      	ldr	r3, [pc, #208]	; (8017a00 <xTaskResumeAll+0x120>)
 801792e:	68db      	ldr	r3, [r3, #12]
 8017930:	68db      	ldr	r3, [r3, #12]
 8017932:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	3318      	adds	r3, #24
 8017938:	4618      	mov	r0, r3
 801793a:	f7ff f871 	bl	8016a20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801793e:	68fb      	ldr	r3, [r7, #12]
 8017940:	3304      	adds	r3, #4
 8017942:	4618      	mov	r0, r3
 8017944:	f7ff f86c 	bl	8016a20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801794c:	4b2d      	ldr	r3, [pc, #180]	; (8017a04 <xTaskResumeAll+0x124>)
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	429a      	cmp	r2, r3
 8017952:	d903      	bls.n	801795c <xTaskResumeAll+0x7c>
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017958:	4a2a      	ldr	r2, [pc, #168]	; (8017a04 <xTaskResumeAll+0x124>)
 801795a:	6013      	str	r3, [r2, #0]
 801795c:	68fb      	ldr	r3, [r7, #12]
 801795e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017960:	4613      	mov	r3, r2
 8017962:	009b      	lsls	r3, r3, #2
 8017964:	4413      	add	r3, r2
 8017966:	009b      	lsls	r3, r3, #2
 8017968:	4a27      	ldr	r2, [pc, #156]	; (8017a08 <xTaskResumeAll+0x128>)
 801796a:	441a      	add	r2, r3
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	3304      	adds	r3, #4
 8017970:	4619      	mov	r1, r3
 8017972:	4610      	mov	r0, r2
 8017974:	f7fe fff7 	bl	8016966 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801797c:	4b23      	ldr	r3, [pc, #140]	; (8017a0c <xTaskResumeAll+0x12c>)
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017982:	429a      	cmp	r2, r3
 8017984:	d302      	bcc.n	801798c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8017986:	4b22      	ldr	r3, [pc, #136]	; (8017a10 <xTaskResumeAll+0x130>)
 8017988:	2201      	movs	r2, #1
 801798a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801798c:	4b1c      	ldr	r3, [pc, #112]	; (8017a00 <xTaskResumeAll+0x120>)
 801798e:	681b      	ldr	r3, [r3, #0]
 8017990:	2b00      	cmp	r3, #0
 8017992:	d1cb      	bne.n	801792c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017994:	68fb      	ldr	r3, [r7, #12]
 8017996:	2b00      	cmp	r3, #0
 8017998:	d001      	beq.n	801799e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801799a:	f000 fc09 	bl	80181b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801799e:	4b1d      	ldr	r3, [pc, #116]	; (8017a14 <xTaskResumeAll+0x134>)
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d010      	beq.n	80179cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80179aa:	f000 f847 	bl	8017a3c <xTaskIncrementTick>
 80179ae:	4603      	mov	r3, r0
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	d002      	beq.n	80179ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80179b4:	4b16      	ldr	r3, [pc, #88]	; (8017a10 <xTaskResumeAll+0x130>)
 80179b6:	2201      	movs	r2, #1
 80179b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	3b01      	subs	r3, #1
 80179be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d1f1      	bne.n	80179aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80179c6:	4b13      	ldr	r3, [pc, #76]	; (8017a14 <xTaskResumeAll+0x134>)
 80179c8:	2200      	movs	r2, #0
 80179ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80179cc:	4b10      	ldr	r3, [pc, #64]	; (8017a10 <xTaskResumeAll+0x130>)
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d009      	beq.n	80179e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80179d4:	2301      	movs	r3, #1
 80179d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80179d8:	4b0f      	ldr	r3, [pc, #60]	; (8017a18 <xTaskResumeAll+0x138>)
 80179da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80179de:	601a      	str	r2, [r3, #0]
 80179e0:	f3bf 8f4f 	dsb	sy
 80179e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80179e8:	f001 f9c4 	bl	8018d74 <vPortExitCritical>

	return xAlreadyYielded;
 80179ec:	68bb      	ldr	r3, [r7, #8]
}
 80179ee:	4618      	mov	r0, r3
 80179f0:	3710      	adds	r7, #16
 80179f2:	46bd      	mov	sp, r7
 80179f4:	bd80      	pop	{r7, pc}
 80179f6:	bf00      	nop
 80179f8:	24002c54 	.word	0x24002c54
 80179fc:	24002c2c 	.word	0x24002c2c
 8017a00:	24002bec 	.word	0x24002bec
 8017a04:	24002c34 	.word	0x24002c34
 8017a08:	2400275c 	.word	0x2400275c
 8017a0c:	24002758 	.word	0x24002758
 8017a10:	24002c40 	.word	0x24002c40
 8017a14:	24002c3c 	.word	0x24002c3c
 8017a18:	e000ed04 	.word	0xe000ed04

08017a1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017a1c:	b480      	push	{r7}
 8017a1e:	b083      	sub	sp, #12
 8017a20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017a22:	4b05      	ldr	r3, [pc, #20]	; (8017a38 <xTaskGetTickCount+0x1c>)
 8017a24:	681b      	ldr	r3, [r3, #0]
 8017a26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017a28:	687b      	ldr	r3, [r7, #4]
}
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	370c      	adds	r7, #12
 8017a2e:	46bd      	mov	sp, r7
 8017a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a34:	4770      	bx	lr
 8017a36:	bf00      	nop
 8017a38:	24002c30 	.word	0x24002c30

08017a3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017a3c:	b580      	push	{r7, lr}
 8017a3e:	b086      	sub	sp, #24
 8017a40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8017a42:	2300      	movs	r3, #0
 8017a44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017a46:	4b53      	ldr	r3, [pc, #332]	; (8017b94 <xTaskIncrementTick+0x158>)
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	f040 8095 	bne.w	8017b7a <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017a50:	4b51      	ldr	r3, [pc, #324]	; (8017b98 <xTaskIncrementTick+0x15c>)
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	3301      	adds	r3, #1
 8017a56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017a58:	4a4f      	ldr	r2, [pc, #316]	; (8017b98 <xTaskIncrementTick+0x15c>)
 8017a5a:	693b      	ldr	r3, [r7, #16]
 8017a5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017a5e:	693b      	ldr	r3, [r7, #16]
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d120      	bne.n	8017aa6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8017a64:	4b4d      	ldr	r3, [pc, #308]	; (8017b9c <xTaskIncrementTick+0x160>)
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	681b      	ldr	r3, [r3, #0]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d00a      	beq.n	8017a84 <xTaskIncrementTick+0x48>
	__asm volatile
 8017a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a72:	f383 8811 	msr	BASEPRI, r3
 8017a76:	f3bf 8f6f 	isb	sy
 8017a7a:	f3bf 8f4f 	dsb	sy
 8017a7e:	603b      	str	r3, [r7, #0]
}
 8017a80:	bf00      	nop
 8017a82:	e7fe      	b.n	8017a82 <xTaskIncrementTick+0x46>
 8017a84:	4b45      	ldr	r3, [pc, #276]	; (8017b9c <xTaskIncrementTick+0x160>)
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	60fb      	str	r3, [r7, #12]
 8017a8a:	4b45      	ldr	r3, [pc, #276]	; (8017ba0 <xTaskIncrementTick+0x164>)
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	4a43      	ldr	r2, [pc, #268]	; (8017b9c <xTaskIncrementTick+0x160>)
 8017a90:	6013      	str	r3, [r2, #0]
 8017a92:	4a43      	ldr	r2, [pc, #268]	; (8017ba0 <xTaskIncrementTick+0x164>)
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	6013      	str	r3, [r2, #0]
 8017a98:	4b42      	ldr	r3, [pc, #264]	; (8017ba4 <xTaskIncrementTick+0x168>)
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	3301      	adds	r3, #1
 8017a9e:	4a41      	ldr	r2, [pc, #260]	; (8017ba4 <xTaskIncrementTick+0x168>)
 8017aa0:	6013      	str	r3, [r2, #0]
 8017aa2:	f000 fb85 	bl	80181b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017aa6:	4b40      	ldr	r3, [pc, #256]	; (8017ba8 <xTaskIncrementTick+0x16c>)
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	693a      	ldr	r2, [r7, #16]
 8017aac:	429a      	cmp	r2, r3
 8017aae:	d349      	bcc.n	8017b44 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017ab0:	4b3a      	ldr	r3, [pc, #232]	; (8017b9c <xTaskIncrementTick+0x160>)
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d104      	bne.n	8017ac4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017aba:	4b3b      	ldr	r3, [pc, #236]	; (8017ba8 <xTaskIncrementTick+0x16c>)
 8017abc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017ac0:	601a      	str	r2, [r3, #0]
					break;
 8017ac2:	e03f      	b.n	8017b44 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017ac4:	4b35      	ldr	r3, [pc, #212]	; (8017b9c <xTaskIncrementTick+0x160>)
 8017ac6:	681b      	ldr	r3, [r3, #0]
 8017ac8:	68db      	ldr	r3, [r3, #12]
 8017aca:	68db      	ldr	r3, [r3, #12]
 8017acc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017ace:	68bb      	ldr	r3, [r7, #8]
 8017ad0:	685b      	ldr	r3, [r3, #4]
 8017ad2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017ad4:	693a      	ldr	r2, [r7, #16]
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	429a      	cmp	r2, r3
 8017ada:	d203      	bcs.n	8017ae4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017adc:	4a32      	ldr	r2, [pc, #200]	; (8017ba8 <xTaskIncrementTick+0x16c>)
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017ae2:	e02f      	b.n	8017b44 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017ae4:	68bb      	ldr	r3, [r7, #8]
 8017ae6:	3304      	adds	r3, #4
 8017ae8:	4618      	mov	r0, r3
 8017aea:	f7fe ff99 	bl	8016a20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017aee:	68bb      	ldr	r3, [r7, #8]
 8017af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d004      	beq.n	8017b00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017af6:	68bb      	ldr	r3, [r7, #8]
 8017af8:	3318      	adds	r3, #24
 8017afa:	4618      	mov	r0, r3
 8017afc:	f7fe ff90 	bl	8016a20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017b00:	68bb      	ldr	r3, [r7, #8]
 8017b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b04:	4b29      	ldr	r3, [pc, #164]	; (8017bac <xTaskIncrementTick+0x170>)
 8017b06:	681b      	ldr	r3, [r3, #0]
 8017b08:	429a      	cmp	r2, r3
 8017b0a:	d903      	bls.n	8017b14 <xTaskIncrementTick+0xd8>
 8017b0c:	68bb      	ldr	r3, [r7, #8]
 8017b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b10:	4a26      	ldr	r2, [pc, #152]	; (8017bac <xTaskIncrementTick+0x170>)
 8017b12:	6013      	str	r3, [r2, #0]
 8017b14:	68bb      	ldr	r3, [r7, #8]
 8017b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b18:	4613      	mov	r3, r2
 8017b1a:	009b      	lsls	r3, r3, #2
 8017b1c:	4413      	add	r3, r2
 8017b1e:	009b      	lsls	r3, r3, #2
 8017b20:	4a23      	ldr	r2, [pc, #140]	; (8017bb0 <xTaskIncrementTick+0x174>)
 8017b22:	441a      	add	r2, r3
 8017b24:	68bb      	ldr	r3, [r7, #8]
 8017b26:	3304      	adds	r3, #4
 8017b28:	4619      	mov	r1, r3
 8017b2a:	4610      	mov	r0, r2
 8017b2c:	f7fe ff1b 	bl	8016966 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017b30:	68bb      	ldr	r3, [r7, #8]
 8017b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b34:	4b1f      	ldr	r3, [pc, #124]	; (8017bb4 <xTaskIncrementTick+0x178>)
 8017b36:	681b      	ldr	r3, [r3, #0]
 8017b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b3a:	429a      	cmp	r2, r3
 8017b3c:	d3b8      	bcc.n	8017ab0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8017b3e:	2301      	movs	r3, #1
 8017b40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017b42:	e7b5      	b.n	8017ab0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017b44:	4b1b      	ldr	r3, [pc, #108]	; (8017bb4 <xTaskIncrementTick+0x178>)
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b4a:	4919      	ldr	r1, [pc, #100]	; (8017bb0 <xTaskIncrementTick+0x174>)
 8017b4c:	4613      	mov	r3, r2
 8017b4e:	009b      	lsls	r3, r3, #2
 8017b50:	4413      	add	r3, r2
 8017b52:	009b      	lsls	r3, r3, #2
 8017b54:	440b      	add	r3, r1
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	2b01      	cmp	r3, #1
 8017b5a:	d901      	bls.n	8017b60 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8017b5c:	2301      	movs	r3, #1
 8017b5e:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8017b60:	4b15      	ldr	r3, [pc, #84]	; (8017bb8 <xTaskIncrementTick+0x17c>)
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d101      	bne.n	8017b6c <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8017b68:	f7e9 fdd0 	bl	800170c <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8017b6c:	4b13      	ldr	r3, [pc, #76]	; (8017bbc <xTaskIncrementTick+0x180>)
 8017b6e:	681b      	ldr	r3, [r3, #0]
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d009      	beq.n	8017b88 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8017b74:	2301      	movs	r3, #1
 8017b76:	617b      	str	r3, [r7, #20]
 8017b78:	e006      	b.n	8017b88 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8017b7a:	4b0f      	ldr	r3, [pc, #60]	; (8017bb8 <xTaskIncrementTick+0x17c>)
 8017b7c:	681b      	ldr	r3, [r3, #0]
 8017b7e:	3301      	adds	r3, #1
 8017b80:	4a0d      	ldr	r2, [pc, #52]	; (8017bb8 <xTaskIncrementTick+0x17c>)
 8017b82:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8017b84:	f7e9 fdc2 	bl	800170c <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8017b88:	697b      	ldr	r3, [r7, #20]
}
 8017b8a:	4618      	mov	r0, r3
 8017b8c:	3718      	adds	r7, #24
 8017b8e:	46bd      	mov	sp, r7
 8017b90:	bd80      	pop	{r7, pc}
 8017b92:	bf00      	nop
 8017b94:	24002c54 	.word	0x24002c54
 8017b98:	24002c30 	.word	0x24002c30
 8017b9c:	24002be4 	.word	0x24002be4
 8017ba0:	24002be8 	.word	0x24002be8
 8017ba4:	24002c44 	.word	0x24002c44
 8017ba8:	24002c4c 	.word	0x24002c4c
 8017bac:	24002c34 	.word	0x24002c34
 8017bb0:	2400275c 	.word	0x2400275c
 8017bb4:	24002758 	.word	0x24002758
 8017bb8:	24002c3c 	.word	0x24002c3c
 8017bbc:	24002c40 	.word	0x24002c40

08017bc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017bc0:	b580      	push	{r7, lr}
 8017bc2:	b084      	sub	sp, #16
 8017bc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017bc6:	4b2f      	ldr	r3, [pc, #188]	; (8017c84 <vTaskSwitchContext+0xc4>)
 8017bc8:	681b      	ldr	r3, [r3, #0]
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d003      	beq.n	8017bd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017bce:	4b2e      	ldr	r3, [pc, #184]	; (8017c88 <vTaskSwitchContext+0xc8>)
 8017bd0:	2201      	movs	r2, #1
 8017bd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017bd4:	e052      	b.n	8017c7c <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 8017bd6:	4b2c      	ldr	r3, [pc, #176]	; (8017c88 <vTaskSwitchContext+0xc8>)
 8017bd8:	2200      	movs	r2, #0
 8017bda:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8017bdc:	4b2b      	ldr	r3, [pc, #172]	; (8017c8c <vTaskSwitchContext+0xcc>)
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	681a      	ldr	r2, [r3, #0]
 8017be2:	4b2a      	ldr	r3, [pc, #168]	; (8017c8c <vTaskSwitchContext+0xcc>)
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017be8:	429a      	cmp	r2, r3
 8017bea:	d808      	bhi.n	8017bfe <vTaskSwitchContext+0x3e>
 8017bec:	4b27      	ldr	r3, [pc, #156]	; (8017c8c <vTaskSwitchContext+0xcc>)
 8017bee:	681a      	ldr	r2, [r3, #0]
 8017bf0:	4b26      	ldr	r3, [pc, #152]	; (8017c8c <vTaskSwitchContext+0xcc>)
 8017bf2:	681b      	ldr	r3, [r3, #0]
 8017bf4:	3334      	adds	r3, #52	; 0x34
 8017bf6:	4619      	mov	r1, r3
 8017bf8:	4610      	mov	r0, r2
 8017bfa:	f7e9 fd95 	bl	8001728 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017bfe:	4b24      	ldr	r3, [pc, #144]	; (8017c90 <vTaskSwitchContext+0xd0>)
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	60fb      	str	r3, [r7, #12]
 8017c04:	e010      	b.n	8017c28 <vTaskSwitchContext+0x68>
 8017c06:	68fb      	ldr	r3, [r7, #12]
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d10a      	bne.n	8017c22 <vTaskSwitchContext+0x62>
	__asm volatile
 8017c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c10:	f383 8811 	msr	BASEPRI, r3
 8017c14:	f3bf 8f6f 	isb	sy
 8017c18:	f3bf 8f4f 	dsb	sy
 8017c1c:	607b      	str	r3, [r7, #4]
}
 8017c1e:	bf00      	nop
 8017c20:	e7fe      	b.n	8017c20 <vTaskSwitchContext+0x60>
 8017c22:	68fb      	ldr	r3, [r7, #12]
 8017c24:	3b01      	subs	r3, #1
 8017c26:	60fb      	str	r3, [r7, #12]
 8017c28:	491a      	ldr	r1, [pc, #104]	; (8017c94 <vTaskSwitchContext+0xd4>)
 8017c2a:	68fa      	ldr	r2, [r7, #12]
 8017c2c:	4613      	mov	r3, r2
 8017c2e:	009b      	lsls	r3, r3, #2
 8017c30:	4413      	add	r3, r2
 8017c32:	009b      	lsls	r3, r3, #2
 8017c34:	440b      	add	r3, r1
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d0e4      	beq.n	8017c06 <vTaskSwitchContext+0x46>
 8017c3c:	68fa      	ldr	r2, [r7, #12]
 8017c3e:	4613      	mov	r3, r2
 8017c40:	009b      	lsls	r3, r3, #2
 8017c42:	4413      	add	r3, r2
 8017c44:	009b      	lsls	r3, r3, #2
 8017c46:	4a13      	ldr	r2, [pc, #76]	; (8017c94 <vTaskSwitchContext+0xd4>)
 8017c48:	4413      	add	r3, r2
 8017c4a:	60bb      	str	r3, [r7, #8]
 8017c4c:	68bb      	ldr	r3, [r7, #8]
 8017c4e:	685b      	ldr	r3, [r3, #4]
 8017c50:	685a      	ldr	r2, [r3, #4]
 8017c52:	68bb      	ldr	r3, [r7, #8]
 8017c54:	605a      	str	r2, [r3, #4]
 8017c56:	68bb      	ldr	r3, [r7, #8]
 8017c58:	685a      	ldr	r2, [r3, #4]
 8017c5a:	68bb      	ldr	r3, [r7, #8]
 8017c5c:	3308      	adds	r3, #8
 8017c5e:	429a      	cmp	r2, r3
 8017c60:	d104      	bne.n	8017c6c <vTaskSwitchContext+0xac>
 8017c62:	68bb      	ldr	r3, [r7, #8]
 8017c64:	685b      	ldr	r3, [r3, #4]
 8017c66:	685a      	ldr	r2, [r3, #4]
 8017c68:	68bb      	ldr	r3, [r7, #8]
 8017c6a:	605a      	str	r2, [r3, #4]
 8017c6c:	68bb      	ldr	r3, [r7, #8]
 8017c6e:	685b      	ldr	r3, [r3, #4]
 8017c70:	68db      	ldr	r3, [r3, #12]
 8017c72:	4a06      	ldr	r2, [pc, #24]	; (8017c8c <vTaskSwitchContext+0xcc>)
 8017c74:	6013      	str	r3, [r2, #0]
 8017c76:	4a06      	ldr	r2, [pc, #24]	; (8017c90 <vTaskSwitchContext+0xd0>)
 8017c78:	68fb      	ldr	r3, [r7, #12]
 8017c7a:	6013      	str	r3, [r2, #0]
}
 8017c7c:	bf00      	nop
 8017c7e:	3710      	adds	r7, #16
 8017c80:	46bd      	mov	sp, r7
 8017c82:	bd80      	pop	{r7, pc}
 8017c84:	24002c54 	.word	0x24002c54
 8017c88:	24002c40 	.word	0x24002c40
 8017c8c:	24002758 	.word	0x24002758
 8017c90:	24002c34 	.word	0x24002c34
 8017c94:	2400275c 	.word	0x2400275c

08017c98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017c98:	b580      	push	{r7, lr}
 8017c9a:	b084      	sub	sp, #16
 8017c9c:	af00      	add	r7, sp, #0
 8017c9e:	6078      	str	r0, [r7, #4]
 8017ca0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d10a      	bne.n	8017cbe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8017ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cac:	f383 8811 	msr	BASEPRI, r3
 8017cb0:	f3bf 8f6f 	isb	sy
 8017cb4:	f3bf 8f4f 	dsb	sy
 8017cb8:	60fb      	str	r3, [r7, #12]
}
 8017cba:	bf00      	nop
 8017cbc:	e7fe      	b.n	8017cbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017cbe:	4b07      	ldr	r3, [pc, #28]	; (8017cdc <vTaskPlaceOnEventList+0x44>)
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	3318      	adds	r3, #24
 8017cc4:	4619      	mov	r1, r3
 8017cc6:	6878      	ldr	r0, [r7, #4]
 8017cc8:	f7fe fe71 	bl	80169ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017ccc:	2101      	movs	r1, #1
 8017cce:	6838      	ldr	r0, [r7, #0]
 8017cd0:	f000 fb32 	bl	8018338 <prvAddCurrentTaskToDelayedList>
}
 8017cd4:	bf00      	nop
 8017cd6:	3710      	adds	r7, #16
 8017cd8:	46bd      	mov	sp, r7
 8017cda:	bd80      	pop	{r7, pc}
 8017cdc:	24002758 	.word	0x24002758

08017ce0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8017ce0:	b580      	push	{r7, lr}
 8017ce2:	b086      	sub	sp, #24
 8017ce4:	af00      	add	r7, sp, #0
 8017ce6:	60f8      	str	r0, [r7, #12]
 8017ce8:	60b9      	str	r1, [r7, #8]
 8017cea:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8017cec:	68fb      	ldr	r3, [r7, #12]
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d10a      	bne.n	8017d08 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8017cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cf6:	f383 8811 	msr	BASEPRI, r3
 8017cfa:	f3bf 8f6f 	isb	sy
 8017cfe:	f3bf 8f4f 	dsb	sy
 8017d02:	617b      	str	r3, [r7, #20]
}
 8017d04:	bf00      	nop
 8017d06:	e7fe      	b.n	8017d06 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8017d08:	4b11      	ldr	r3, [pc, #68]	; (8017d50 <vTaskPlaceOnUnorderedEventList+0x70>)
 8017d0a:	681b      	ldr	r3, [r3, #0]
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d10a      	bne.n	8017d26 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8017d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d14:	f383 8811 	msr	BASEPRI, r3
 8017d18:	f3bf 8f6f 	isb	sy
 8017d1c:	f3bf 8f4f 	dsb	sy
 8017d20:	613b      	str	r3, [r7, #16]
}
 8017d22:	bf00      	nop
 8017d24:	e7fe      	b.n	8017d24 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8017d26:	4b0b      	ldr	r3, [pc, #44]	; (8017d54 <vTaskPlaceOnUnorderedEventList+0x74>)
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	68ba      	ldr	r2, [r7, #8]
 8017d2c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8017d30:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017d32:	4b08      	ldr	r3, [pc, #32]	; (8017d54 <vTaskPlaceOnUnorderedEventList+0x74>)
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	3318      	adds	r3, #24
 8017d38:	4619      	mov	r1, r3
 8017d3a:	68f8      	ldr	r0, [r7, #12]
 8017d3c:	f7fe fe13 	bl	8016966 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017d40:	2101      	movs	r1, #1
 8017d42:	6878      	ldr	r0, [r7, #4]
 8017d44:	f000 faf8 	bl	8018338 <prvAddCurrentTaskToDelayedList>
}
 8017d48:	bf00      	nop
 8017d4a:	3718      	adds	r7, #24
 8017d4c:	46bd      	mov	sp, r7
 8017d4e:	bd80      	pop	{r7, pc}
 8017d50:	24002c54 	.word	0x24002c54
 8017d54:	24002758 	.word	0x24002758

08017d58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017d58:	b580      	push	{r7, lr}
 8017d5a:	b086      	sub	sp, #24
 8017d5c:	af00      	add	r7, sp, #0
 8017d5e:	60f8      	str	r0, [r7, #12]
 8017d60:	60b9      	str	r1, [r7, #8]
 8017d62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017d64:	68fb      	ldr	r3, [r7, #12]
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d10a      	bne.n	8017d80 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8017d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d6e:	f383 8811 	msr	BASEPRI, r3
 8017d72:	f3bf 8f6f 	isb	sy
 8017d76:	f3bf 8f4f 	dsb	sy
 8017d7a:	617b      	str	r3, [r7, #20]
}
 8017d7c:	bf00      	nop
 8017d7e:	e7fe      	b.n	8017d7e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017d80:	4b0a      	ldr	r3, [pc, #40]	; (8017dac <vTaskPlaceOnEventListRestricted+0x54>)
 8017d82:	681b      	ldr	r3, [r3, #0]
 8017d84:	3318      	adds	r3, #24
 8017d86:	4619      	mov	r1, r3
 8017d88:	68f8      	ldr	r0, [r7, #12]
 8017d8a:	f7fe fdec 	bl	8016966 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d002      	beq.n	8017d9a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8017d94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017d98:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017d9a:	6879      	ldr	r1, [r7, #4]
 8017d9c:	68b8      	ldr	r0, [r7, #8]
 8017d9e:	f000 facb 	bl	8018338 <prvAddCurrentTaskToDelayedList>
	}
 8017da2:	bf00      	nop
 8017da4:	3718      	adds	r7, #24
 8017da6:	46bd      	mov	sp, r7
 8017da8:	bd80      	pop	{r7, pc}
 8017daa:	bf00      	nop
 8017dac:	24002758 	.word	0x24002758

08017db0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017db0:	b580      	push	{r7, lr}
 8017db2:	b086      	sub	sp, #24
 8017db4:	af00      	add	r7, sp, #0
 8017db6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	68db      	ldr	r3, [r3, #12]
 8017dbc:	68db      	ldr	r3, [r3, #12]
 8017dbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017dc0:	693b      	ldr	r3, [r7, #16]
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d10a      	bne.n	8017ddc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8017dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dca:	f383 8811 	msr	BASEPRI, r3
 8017dce:	f3bf 8f6f 	isb	sy
 8017dd2:	f3bf 8f4f 	dsb	sy
 8017dd6:	60fb      	str	r3, [r7, #12]
}
 8017dd8:	bf00      	nop
 8017dda:	e7fe      	b.n	8017dda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017ddc:	693b      	ldr	r3, [r7, #16]
 8017dde:	3318      	adds	r3, #24
 8017de0:	4618      	mov	r0, r3
 8017de2:	f7fe fe1d 	bl	8016a20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017de6:	4b1e      	ldr	r3, [pc, #120]	; (8017e60 <xTaskRemoveFromEventList+0xb0>)
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d11d      	bne.n	8017e2a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017dee:	693b      	ldr	r3, [r7, #16]
 8017df0:	3304      	adds	r3, #4
 8017df2:	4618      	mov	r0, r3
 8017df4:	f7fe fe14 	bl	8016a20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017df8:	693b      	ldr	r3, [r7, #16]
 8017dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017dfc:	4b19      	ldr	r3, [pc, #100]	; (8017e64 <xTaskRemoveFromEventList+0xb4>)
 8017dfe:	681b      	ldr	r3, [r3, #0]
 8017e00:	429a      	cmp	r2, r3
 8017e02:	d903      	bls.n	8017e0c <xTaskRemoveFromEventList+0x5c>
 8017e04:	693b      	ldr	r3, [r7, #16]
 8017e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e08:	4a16      	ldr	r2, [pc, #88]	; (8017e64 <xTaskRemoveFromEventList+0xb4>)
 8017e0a:	6013      	str	r3, [r2, #0]
 8017e0c:	693b      	ldr	r3, [r7, #16]
 8017e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e10:	4613      	mov	r3, r2
 8017e12:	009b      	lsls	r3, r3, #2
 8017e14:	4413      	add	r3, r2
 8017e16:	009b      	lsls	r3, r3, #2
 8017e18:	4a13      	ldr	r2, [pc, #76]	; (8017e68 <xTaskRemoveFromEventList+0xb8>)
 8017e1a:	441a      	add	r2, r3
 8017e1c:	693b      	ldr	r3, [r7, #16]
 8017e1e:	3304      	adds	r3, #4
 8017e20:	4619      	mov	r1, r3
 8017e22:	4610      	mov	r0, r2
 8017e24:	f7fe fd9f 	bl	8016966 <vListInsertEnd>
 8017e28:	e005      	b.n	8017e36 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017e2a:	693b      	ldr	r3, [r7, #16]
 8017e2c:	3318      	adds	r3, #24
 8017e2e:	4619      	mov	r1, r3
 8017e30:	480e      	ldr	r0, [pc, #56]	; (8017e6c <xTaskRemoveFromEventList+0xbc>)
 8017e32:	f7fe fd98 	bl	8016966 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017e36:	693b      	ldr	r3, [r7, #16]
 8017e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e3a:	4b0d      	ldr	r3, [pc, #52]	; (8017e70 <xTaskRemoveFromEventList+0xc0>)
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e40:	429a      	cmp	r2, r3
 8017e42:	d905      	bls.n	8017e50 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017e44:	2301      	movs	r3, #1
 8017e46:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017e48:	4b0a      	ldr	r3, [pc, #40]	; (8017e74 <xTaskRemoveFromEventList+0xc4>)
 8017e4a:	2201      	movs	r2, #1
 8017e4c:	601a      	str	r2, [r3, #0]
 8017e4e:	e001      	b.n	8017e54 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8017e50:	2300      	movs	r3, #0
 8017e52:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017e54:	697b      	ldr	r3, [r7, #20]
}
 8017e56:	4618      	mov	r0, r3
 8017e58:	3718      	adds	r7, #24
 8017e5a:	46bd      	mov	sp, r7
 8017e5c:	bd80      	pop	{r7, pc}
 8017e5e:	bf00      	nop
 8017e60:	24002c54 	.word	0x24002c54
 8017e64:	24002c34 	.word	0x24002c34
 8017e68:	2400275c 	.word	0x2400275c
 8017e6c:	24002bec 	.word	0x24002bec
 8017e70:	24002758 	.word	0x24002758
 8017e74:	24002c40 	.word	0x24002c40

08017e78 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8017e78:	b580      	push	{r7, lr}
 8017e7a:	b086      	sub	sp, #24
 8017e7c:	af00      	add	r7, sp, #0
 8017e7e:	6078      	str	r0, [r7, #4]
 8017e80:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8017e82:	4b29      	ldr	r3, [pc, #164]	; (8017f28 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8017e84:	681b      	ldr	r3, [r3, #0]
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	d10a      	bne.n	8017ea0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8017e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e8e:	f383 8811 	msr	BASEPRI, r3
 8017e92:	f3bf 8f6f 	isb	sy
 8017e96:	f3bf 8f4f 	dsb	sy
 8017e9a:	613b      	str	r3, [r7, #16]
}
 8017e9c:	bf00      	nop
 8017e9e:	e7fe      	b.n	8017e9e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8017ea0:	683b      	ldr	r3, [r7, #0]
 8017ea2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	68db      	ldr	r3, [r3, #12]
 8017eae:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8017eb0:	697b      	ldr	r3, [r7, #20]
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d10a      	bne.n	8017ecc <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8017eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017eba:	f383 8811 	msr	BASEPRI, r3
 8017ebe:	f3bf 8f6f 	isb	sy
 8017ec2:	f3bf 8f4f 	dsb	sy
 8017ec6:	60fb      	str	r3, [r7, #12]
}
 8017ec8:	bf00      	nop
 8017eca:	e7fe      	b.n	8017eca <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8017ecc:	6878      	ldr	r0, [r7, #4]
 8017ece:	f7fe fda7 	bl	8016a20 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017ed2:	697b      	ldr	r3, [r7, #20]
 8017ed4:	3304      	adds	r3, #4
 8017ed6:	4618      	mov	r0, r3
 8017ed8:	f7fe fda2 	bl	8016a20 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8017edc:	697b      	ldr	r3, [r7, #20]
 8017ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ee0:	4b12      	ldr	r3, [pc, #72]	; (8017f2c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8017ee2:	681b      	ldr	r3, [r3, #0]
 8017ee4:	429a      	cmp	r2, r3
 8017ee6:	d903      	bls.n	8017ef0 <vTaskRemoveFromUnorderedEventList+0x78>
 8017ee8:	697b      	ldr	r3, [r7, #20]
 8017eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017eec:	4a0f      	ldr	r2, [pc, #60]	; (8017f2c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8017eee:	6013      	str	r3, [r2, #0]
 8017ef0:	697b      	ldr	r3, [r7, #20]
 8017ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ef4:	4613      	mov	r3, r2
 8017ef6:	009b      	lsls	r3, r3, #2
 8017ef8:	4413      	add	r3, r2
 8017efa:	009b      	lsls	r3, r3, #2
 8017efc:	4a0c      	ldr	r2, [pc, #48]	; (8017f30 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8017efe:	441a      	add	r2, r3
 8017f00:	697b      	ldr	r3, [r7, #20]
 8017f02:	3304      	adds	r3, #4
 8017f04:	4619      	mov	r1, r3
 8017f06:	4610      	mov	r0, r2
 8017f08:	f7fe fd2d 	bl	8016966 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017f0c:	697b      	ldr	r3, [r7, #20]
 8017f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f10:	4b08      	ldr	r3, [pc, #32]	; (8017f34 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f16:	429a      	cmp	r2, r3
 8017f18:	d902      	bls.n	8017f20 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8017f1a:	4b07      	ldr	r3, [pc, #28]	; (8017f38 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8017f1c:	2201      	movs	r2, #1
 8017f1e:	601a      	str	r2, [r3, #0]
	}
}
 8017f20:	bf00      	nop
 8017f22:	3718      	adds	r7, #24
 8017f24:	46bd      	mov	sp, r7
 8017f26:	bd80      	pop	{r7, pc}
 8017f28:	24002c54 	.word	0x24002c54
 8017f2c:	24002c34 	.word	0x24002c34
 8017f30:	2400275c 	.word	0x2400275c
 8017f34:	24002758 	.word	0x24002758
 8017f38:	24002c40 	.word	0x24002c40

08017f3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017f3c:	b480      	push	{r7}
 8017f3e:	b083      	sub	sp, #12
 8017f40:	af00      	add	r7, sp, #0
 8017f42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017f44:	4b06      	ldr	r3, [pc, #24]	; (8017f60 <vTaskInternalSetTimeOutState+0x24>)
 8017f46:	681a      	ldr	r2, [r3, #0]
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017f4c:	4b05      	ldr	r3, [pc, #20]	; (8017f64 <vTaskInternalSetTimeOutState+0x28>)
 8017f4e:	681a      	ldr	r2, [r3, #0]
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	605a      	str	r2, [r3, #4]
}
 8017f54:	bf00      	nop
 8017f56:	370c      	adds	r7, #12
 8017f58:	46bd      	mov	sp, r7
 8017f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f5e:	4770      	bx	lr
 8017f60:	24002c44 	.word	0x24002c44
 8017f64:	24002c30 	.word	0x24002c30

08017f68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017f68:	b580      	push	{r7, lr}
 8017f6a:	b088      	sub	sp, #32
 8017f6c:	af00      	add	r7, sp, #0
 8017f6e:	6078      	str	r0, [r7, #4]
 8017f70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	d10a      	bne.n	8017f8e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8017f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f7c:	f383 8811 	msr	BASEPRI, r3
 8017f80:	f3bf 8f6f 	isb	sy
 8017f84:	f3bf 8f4f 	dsb	sy
 8017f88:	613b      	str	r3, [r7, #16]
}
 8017f8a:	bf00      	nop
 8017f8c:	e7fe      	b.n	8017f8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8017f8e:	683b      	ldr	r3, [r7, #0]
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d10a      	bne.n	8017faa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8017f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f98:	f383 8811 	msr	BASEPRI, r3
 8017f9c:	f3bf 8f6f 	isb	sy
 8017fa0:	f3bf 8f4f 	dsb	sy
 8017fa4:	60fb      	str	r3, [r7, #12]
}
 8017fa6:	bf00      	nop
 8017fa8:	e7fe      	b.n	8017fa8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8017faa:	f000 feb3 	bl	8018d14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8017fae:	4b1d      	ldr	r3, [pc, #116]	; (8018024 <xTaskCheckForTimeOut+0xbc>)
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	685b      	ldr	r3, [r3, #4]
 8017fb8:	69ba      	ldr	r2, [r7, #24]
 8017fba:	1ad3      	subs	r3, r2, r3
 8017fbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8017fbe:	683b      	ldr	r3, [r7, #0]
 8017fc0:	681b      	ldr	r3, [r3, #0]
 8017fc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017fc6:	d102      	bne.n	8017fce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017fc8:	2300      	movs	r3, #0
 8017fca:	61fb      	str	r3, [r7, #28]
 8017fcc:	e023      	b.n	8018016 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	681a      	ldr	r2, [r3, #0]
 8017fd2:	4b15      	ldr	r3, [pc, #84]	; (8018028 <xTaskCheckForTimeOut+0xc0>)
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	429a      	cmp	r2, r3
 8017fd8:	d007      	beq.n	8017fea <xTaskCheckForTimeOut+0x82>
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	685b      	ldr	r3, [r3, #4]
 8017fde:	69ba      	ldr	r2, [r7, #24]
 8017fe0:	429a      	cmp	r2, r3
 8017fe2:	d302      	bcc.n	8017fea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017fe4:	2301      	movs	r3, #1
 8017fe6:	61fb      	str	r3, [r7, #28]
 8017fe8:	e015      	b.n	8018016 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017fea:	683b      	ldr	r3, [r7, #0]
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	697a      	ldr	r2, [r7, #20]
 8017ff0:	429a      	cmp	r2, r3
 8017ff2:	d20b      	bcs.n	801800c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017ff4:	683b      	ldr	r3, [r7, #0]
 8017ff6:	681a      	ldr	r2, [r3, #0]
 8017ff8:	697b      	ldr	r3, [r7, #20]
 8017ffa:	1ad2      	subs	r2, r2, r3
 8017ffc:	683b      	ldr	r3, [r7, #0]
 8017ffe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018000:	6878      	ldr	r0, [r7, #4]
 8018002:	f7ff ff9b 	bl	8017f3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018006:	2300      	movs	r3, #0
 8018008:	61fb      	str	r3, [r7, #28]
 801800a:	e004      	b.n	8018016 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801800c:	683b      	ldr	r3, [r7, #0]
 801800e:	2200      	movs	r2, #0
 8018010:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018012:	2301      	movs	r3, #1
 8018014:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018016:	f000 fead 	bl	8018d74 <vPortExitCritical>

	return xReturn;
 801801a:	69fb      	ldr	r3, [r7, #28]
}
 801801c:	4618      	mov	r0, r3
 801801e:	3720      	adds	r7, #32
 8018020:	46bd      	mov	sp, r7
 8018022:	bd80      	pop	{r7, pc}
 8018024:	24002c30 	.word	0x24002c30
 8018028:	24002c44 	.word	0x24002c44

0801802c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801802c:	b480      	push	{r7}
 801802e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018030:	4b03      	ldr	r3, [pc, #12]	; (8018040 <vTaskMissedYield+0x14>)
 8018032:	2201      	movs	r2, #1
 8018034:	601a      	str	r2, [r3, #0]
}
 8018036:	bf00      	nop
 8018038:	46bd      	mov	sp, r7
 801803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801803e:	4770      	bx	lr
 8018040:	24002c40 	.word	0x24002c40

08018044 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018044:	b580      	push	{r7, lr}
 8018046:	b082      	sub	sp, #8
 8018048:	af00      	add	r7, sp, #0
 801804a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801804c:	f000 f852 	bl	80180f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018050:	4b06      	ldr	r3, [pc, #24]	; (801806c <prvIdleTask+0x28>)
 8018052:	681b      	ldr	r3, [r3, #0]
 8018054:	2b01      	cmp	r3, #1
 8018056:	d9f9      	bls.n	801804c <prvIdleTask+0x8>
			{
				taskYIELD();
 8018058:	4b05      	ldr	r3, [pc, #20]	; (8018070 <prvIdleTask+0x2c>)
 801805a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801805e:	601a      	str	r2, [r3, #0]
 8018060:	f3bf 8f4f 	dsb	sy
 8018064:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018068:	e7f0      	b.n	801804c <prvIdleTask+0x8>
 801806a:	bf00      	nop
 801806c:	2400275c 	.word	0x2400275c
 8018070:	e000ed04 	.word	0xe000ed04

08018074 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018074:	b580      	push	{r7, lr}
 8018076:	b082      	sub	sp, #8
 8018078:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801807a:	2300      	movs	r3, #0
 801807c:	607b      	str	r3, [r7, #4]
 801807e:	e00c      	b.n	801809a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018080:	687a      	ldr	r2, [r7, #4]
 8018082:	4613      	mov	r3, r2
 8018084:	009b      	lsls	r3, r3, #2
 8018086:	4413      	add	r3, r2
 8018088:	009b      	lsls	r3, r3, #2
 801808a:	4a12      	ldr	r2, [pc, #72]	; (80180d4 <prvInitialiseTaskLists+0x60>)
 801808c:	4413      	add	r3, r2
 801808e:	4618      	mov	r0, r3
 8018090:	f7fe fc3c 	bl	801690c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	3301      	adds	r3, #1
 8018098:	607b      	str	r3, [r7, #4]
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	2b37      	cmp	r3, #55	; 0x37
 801809e:	d9ef      	bls.n	8018080 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80180a0:	480d      	ldr	r0, [pc, #52]	; (80180d8 <prvInitialiseTaskLists+0x64>)
 80180a2:	f7fe fc33 	bl	801690c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80180a6:	480d      	ldr	r0, [pc, #52]	; (80180dc <prvInitialiseTaskLists+0x68>)
 80180a8:	f7fe fc30 	bl	801690c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80180ac:	480c      	ldr	r0, [pc, #48]	; (80180e0 <prvInitialiseTaskLists+0x6c>)
 80180ae:	f7fe fc2d 	bl	801690c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80180b2:	480c      	ldr	r0, [pc, #48]	; (80180e4 <prvInitialiseTaskLists+0x70>)
 80180b4:	f7fe fc2a 	bl	801690c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80180b8:	480b      	ldr	r0, [pc, #44]	; (80180e8 <prvInitialiseTaskLists+0x74>)
 80180ba:	f7fe fc27 	bl	801690c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80180be:	4b0b      	ldr	r3, [pc, #44]	; (80180ec <prvInitialiseTaskLists+0x78>)
 80180c0:	4a05      	ldr	r2, [pc, #20]	; (80180d8 <prvInitialiseTaskLists+0x64>)
 80180c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80180c4:	4b0a      	ldr	r3, [pc, #40]	; (80180f0 <prvInitialiseTaskLists+0x7c>)
 80180c6:	4a05      	ldr	r2, [pc, #20]	; (80180dc <prvInitialiseTaskLists+0x68>)
 80180c8:	601a      	str	r2, [r3, #0]
}
 80180ca:	bf00      	nop
 80180cc:	3708      	adds	r7, #8
 80180ce:	46bd      	mov	sp, r7
 80180d0:	bd80      	pop	{r7, pc}
 80180d2:	bf00      	nop
 80180d4:	2400275c 	.word	0x2400275c
 80180d8:	24002bbc 	.word	0x24002bbc
 80180dc:	24002bd0 	.word	0x24002bd0
 80180e0:	24002bec 	.word	0x24002bec
 80180e4:	24002c00 	.word	0x24002c00
 80180e8:	24002c18 	.word	0x24002c18
 80180ec:	24002be4 	.word	0x24002be4
 80180f0:	24002be8 	.word	0x24002be8

080180f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80180f4:	b580      	push	{r7, lr}
 80180f6:	b082      	sub	sp, #8
 80180f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80180fa:	e019      	b.n	8018130 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80180fc:	f000 fe0a 	bl	8018d14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018100:	4b10      	ldr	r3, [pc, #64]	; (8018144 <prvCheckTasksWaitingTermination+0x50>)
 8018102:	68db      	ldr	r3, [r3, #12]
 8018104:	68db      	ldr	r3, [r3, #12]
 8018106:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	3304      	adds	r3, #4
 801810c:	4618      	mov	r0, r3
 801810e:	f7fe fc87 	bl	8016a20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018112:	4b0d      	ldr	r3, [pc, #52]	; (8018148 <prvCheckTasksWaitingTermination+0x54>)
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	3b01      	subs	r3, #1
 8018118:	4a0b      	ldr	r2, [pc, #44]	; (8018148 <prvCheckTasksWaitingTermination+0x54>)
 801811a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801811c:	4b0b      	ldr	r3, [pc, #44]	; (801814c <prvCheckTasksWaitingTermination+0x58>)
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	3b01      	subs	r3, #1
 8018122:	4a0a      	ldr	r2, [pc, #40]	; (801814c <prvCheckTasksWaitingTermination+0x58>)
 8018124:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018126:	f000 fe25 	bl	8018d74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801812a:	6878      	ldr	r0, [r7, #4]
 801812c:	f000 f810 	bl	8018150 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018130:	4b06      	ldr	r3, [pc, #24]	; (801814c <prvCheckTasksWaitingTermination+0x58>)
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	2b00      	cmp	r3, #0
 8018136:	d1e1      	bne.n	80180fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018138:	bf00      	nop
 801813a:	bf00      	nop
 801813c:	3708      	adds	r7, #8
 801813e:	46bd      	mov	sp, r7
 8018140:	bd80      	pop	{r7, pc}
 8018142:	bf00      	nop
 8018144:	24002c00 	.word	0x24002c00
 8018148:	24002c2c 	.word	0x24002c2c
 801814c:	24002c14 	.word	0x24002c14

08018150 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018150:	b580      	push	{r7, lr}
 8018152:	b084      	sub	sp, #16
 8018154:	af00      	add	r7, sp, #0
 8018156:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801815e:	2b00      	cmp	r3, #0
 8018160:	d108      	bne.n	8018174 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018166:	4618      	mov	r0, r3
 8018168:	f000 ffc2 	bl	80190f0 <vPortFree>
				vPortFree( pxTCB );
 801816c:	6878      	ldr	r0, [r7, #4]
 801816e:	f000 ffbf 	bl	80190f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018172:	e018      	b.n	80181a6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801817a:	2b01      	cmp	r3, #1
 801817c:	d103      	bne.n	8018186 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801817e:	6878      	ldr	r0, [r7, #4]
 8018180:	f000 ffb6 	bl	80190f0 <vPortFree>
	}
 8018184:	e00f      	b.n	80181a6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801818c:	2b02      	cmp	r3, #2
 801818e:	d00a      	beq.n	80181a6 <prvDeleteTCB+0x56>
	__asm volatile
 8018190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018194:	f383 8811 	msr	BASEPRI, r3
 8018198:	f3bf 8f6f 	isb	sy
 801819c:	f3bf 8f4f 	dsb	sy
 80181a0:	60fb      	str	r3, [r7, #12]
}
 80181a2:	bf00      	nop
 80181a4:	e7fe      	b.n	80181a4 <prvDeleteTCB+0x54>
	}
 80181a6:	bf00      	nop
 80181a8:	3710      	adds	r7, #16
 80181aa:	46bd      	mov	sp, r7
 80181ac:	bd80      	pop	{r7, pc}
	...

080181b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80181b0:	b480      	push	{r7}
 80181b2:	b083      	sub	sp, #12
 80181b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80181b6:	4b0c      	ldr	r3, [pc, #48]	; (80181e8 <prvResetNextTaskUnblockTime+0x38>)
 80181b8:	681b      	ldr	r3, [r3, #0]
 80181ba:	681b      	ldr	r3, [r3, #0]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d104      	bne.n	80181ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80181c0:	4b0a      	ldr	r3, [pc, #40]	; (80181ec <prvResetNextTaskUnblockTime+0x3c>)
 80181c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80181c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80181c8:	e008      	b.n	80181dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80181ca:	4b07      	ldr	r3, [pc, #28]	; (80181e8 <prvResetNextTaskUnblockTime+0x38>)
 80181cc:	681b      	ldr	r3, [r3, #0]
 80181ce:	68db      	ldr	r3, [r3, #12]
 80181d0:	68db      	ldr	r3, [r3, #12]
 80181d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	685b      	ldr	r3, [r3, #4]
 80181d8:	4a04      	ldr	r2, [pc, #16]	; (80181ec <prvResetNextTaskUnblockTime+0x3c>)
 80181da:	6013      	str	r3, [r2, #0]
}
 80181dc:	bf00      	nop
 80181de:	370c      	adds	r7, #12
 80181e0:	46bd      	mov	sp, r7
 80181e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181e6:	4770      	bx	lr
 80181e8:	24002be4 	.word	0x24002be4
 80181ec:	24002c4c 	.word	0x24002c4c

080181f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80181f0:	b480      	push	{r7}
 80181f2:	b083      	sub	sp, #12
 80181f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80181f6:	4b0b      	ldr	r3, [pc, #44]	; (8018224 <xTaskGetSchedulerState+0x34>)
 80181f8:	681b      	ldr	r3, [r3, #0]
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d102      	bne.n	8018204 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80181fe:	2301      	movs	r3, #1
 8018200:	607b      	str	r3, [r7, #4]
 8018202:	e008      	b.n	8018216 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018204:	4b08      	ldr	r3, [pc, #32]	; (8018228 <xTaskGetSchedulerState+0x38>)
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	2b00      	cmp	r3, #0
 801820a:	d102      	bne.n	8018212 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801820c:	2302      	movs	r3, #2
 801820e:	607b      	str	r3, [r7, #4]
 8018210:	e001      	b.n	8018216 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018212:	2300      	movs	r3, #0
 8018214:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018216:	687b      	ldr	r3, [r7, #4]
	}
 8018218:	4618      	mov	r0, r3
 801821a:	370c      	adds	r7, #12
 801821c:	46bd      	mov	sp, r7
 801821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018222:	4770      	bx	lr
 8018224:	24002c38 	.word	0x24002c38
 8018228:	24002c54 	.word	0x24002c54

0801822c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801822c:	b580      	push	{r7, lr}
 801822e:	b086      	sub	sp, #24
 8018230:	af00      	add	r7, sp, #0
 8018232:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018238:	2300      	movs	r3, #0
 801823a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	2b00      	cmp	r3, #0
 8018240:	d056      	beq.n	80182f0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018242:	4b2e      	ldr	r3, [pc, #184]	; (80182fc <xTaskPriorityDisinherit+0xd0>)
 8018244:	681b      	ldr	r3, [r3, #0]
 8018246:	693a      	ldr	r2, [r7, #16]
 8018248:	429a      	cmp	r2, r3
 801824a:	d00a      	beq.n	8018262 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801824c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018250:	f383 8811 	msr	BASEPRI, r3
 8018254:	f3bf 8f6f 	isb	sy
 8018258:	f3bf 8f4f 	dsb	sy
 801825c:	60fb      	str	r3, [r7, #12]
}
 801825e:	bf00      	nop
 8018260:	e7fe      	b.n	8018260 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018262:	693b      	ldr	r3, [r7, #16]
 8018264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018266:	2b00      	cmp	r3, #0
 8018268:	d10a      	bne.n	8018280 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801826a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801826e:	f383 8811 	msr	BASEPRI, r3
 8018272:	f3bf 8f6f 	isb	sy
 8018276:	f3bf 8f4f 	dsb	sy
 801827a:	60bb      	str	r3, [r7, #8]
}
 801827c:	bf00      	nop
 801827e:	e7fe      	b.n	801827e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8018280:	693b      	ldr	r3, [r7, #16]
 8018282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018284:	1e5a      	subs	r2, r3, #1
 8018286:	693b      	ldr	r3, [r7, #16]
 8018288:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801828a:	693b      	ldr	r3, [r7, #16]
 801828c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801828e:	693b      	ldr	r3, [r7, #16]
 8018290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018292:	429a      	cmp	r2, r3
 8018294:	d02c      	beq.n	80182f0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018296:	693b      	ldr	r3, [r7, #16]
 8018298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801829a:	2b00      	cmp	r3, #0
 801829c:	d128      	bne.n	80182f0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801829e:	693b      	ldr	r3, [r7, #16]
 80182a0:	3304      	adds	r3, #4
 80182a2:	4618      	mov	r0, r3
 80182a4:	f7fe fbbc 	bl	8016a20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80182a8:	693b      	ldr	r3, [r7, #16]
 80182aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80182ac:	693b      	ldr	r3, [r7, #16]
 80182ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80182b0:	693b      	ldr	r3, [r7, #16]
 80182b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80182b8:	693b      	ldr	r3, [r7, #16]
 80182ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80182bc:	693b      	ldr	r3, [r7, #16]
 80182be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182c0:	4b0f      	ldr	r3, [pc, #60]	; (8018300 <xTaskPriorityDisinherit+0xd4>)
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	429a      	cmp	r2, r3
 80182c6:	d903      	bls.n	80182d0 <xTaskPriorityDisinherit+0xa4>
 80182c8:	693b      	ldr	r3, [r7, #16]
 80182ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182cc:	4a0c      	ldr	r2, [pc, #48]	; (8018300 <xTaskPriorityDisinherit+0xd4>)
 80182ce:	6013      	str	r3, [r2, #0]
 80182d0:	693b      	ldr	r3, [r7, #16]
 80182d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182d4:	4613      	mov	r3, r2
 80182d6:	009b      	lsls	r3, r3, #2
 80182d8:	4413      	add	r3, r2
 80182da:	009b      	lsls	r3, r3, #2
 80182dc:	4a09      	ldr	r2, [pc, #36]	; (8018304 <xTaskPriorityDisinherit+0xd8>)
 80182de:	441a      	add	r2, r3
 80182e0:	693b      	ldr	r3, [r7, #16]
 80182e2:	3304      	adds	r3, #4
 80182e4:	4619      	mov	r1, r3
 80182e6:	4610      	mov	r0, r2
 80182e8:	f7fe fb3d 	bl	8016966 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80182ec:	2301      	movs	r3, #1
 80182ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80182f0:	697b      	ldr	r3, [r7, #20]
	}
 80182f2:	4618      	mov	r0, r3
 80182f4:	3718      	adds	r7, #24
 80182f6:	46bd      	mov	sp, r7
 80182f8:	bd80      	pop	{r7, pc}
 80182fa:	bf00      	nop
 80182fc:	24002758 	.word	0x24002758
 8018300:	24002c34 	.word	0x24002c34
 8018304:	2400275c 	.word	0x2400275c

08018308 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8018308:	b480      	push	{r7}
 801830a:	b083      	sub	sp, #12
 801830c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801830e:	4b09      	ldr	r3, [pc, #36]	; (8018334 <uxTaskResetEventItemValue+0x2c>)
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	699b      	ldr	r3, [r3, #24]
 8018314:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018316:	4b07      	ldr	r3, [pc, #28]	; (8018334 <uxTaskResetEventItemValue+0x2c>)
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801831c:	4b05      	ldr	r3, [pc, #20]	; (8018334 <uxTaskResetEventItemValue+0x2c>)
 801831e:	681b      	ldr	r3, [r3, #0]
 8018320:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8018324:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8018326:	687b      	ldr	r3, [r7, #4]
}
 8018328:	4618      	mov	r0, r3
 801832a:	370c      	adds	r7, #12
 801832c:	46bd      	mov	sp, r7
 801832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018332:	4770      	bx	lr
 8018334:	24002758 	.word	0x24002758

08018338 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018338:	b580      	push	{r7, lr}
 801833a:	b084      	sub	sp, #16
 801833c:	af00      	add	r7, sp, #0
 801833e:	6078      	str	r0, [r7, #4]
 8018340:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018342:	4b21      	ldr	r3, [pc, #132]	; (80183c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018348:	4b20      	ldr	r3, [pc, #128]	; (80183cc <prvAddCurrentTaskToDelayedList+0x94>)
 801834a:	681b      	ldr	r3, [r3, #0]
 801834c:	3304      	adds	r3, #4
 801834e:	4618      	mov	r0, r3
 8018350:	f7fe fb66 	bl	8016a20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801835a:	d10a      	bne.n	8018372 <prvAddCurrentTaskToDelayedList+0x3a>
 801835c:	683b      	ldr	r3, [r7, #0]
 801835e:	2b00      	cmp	r3, #0
 8018360:	d007      	beq.n	8018372 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018362:	4b1a      	ldr	r3, [pc, #104]	; (80183cc <prvAddCurrentTaskToDelayedList+0x94>)
 8018364:	681b      	ldr	r3, [r3, #0]
 8018366:	3304      	adds	r3, #4
 8018368:	4619      	mov	r1, r3
 801836a:	4819      	ldr	r0, [pc, #100]	; (80183d0 <prvAddCurrentTaskToDelayedList+0x98>)
 801836c:	f7fe fafb 	bl	8016966 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018370:	e026      	b.n	80183c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018372:	68fa      	ldr	r2, [r7, #12]
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	4413      	add	r3, r2
 8018378:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801837a:	4b14      	ldr	r3, [pc, #80]	; (80183cc <prvAddCurrentTaskToDelayedList+0x94>)
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	68ba      	ldr	r2, [r7, #8]
 8018380:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018382:	68ba      	ldr	r2, [r7, #8]
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	429a      	cmp	r2, r3
 8018388:	d209      	bcs.n	801839e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801838a:	4b12      	ldr	r3, [pc, #72]	; (80183d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801838c:	681a      	ldr	r2, [r3, #0]
 801838e:	4b0f      	ldr	r3, [pc, #60]	; (80183cc <prvAddCurrentTaskToDelayedList+0x94>)
 8018390:	681b      	ldr	r3, [r3, #0]
 8018392:	3304      	adds	r3, #4
 8018394:	4619      	mov	r1, r3
 8018396:	4610      	mov	r0, r2
 8018398:	f7fe fb09 	bl	80169ae <vListInsert>
}
 801839c:	e010      	b.n	80183c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801839e:	4b0e      	ldr	r3, [pc, #56]	; (80183d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80183a0:	681a      	ldr	r2, [r3, #0]
 80183a2:	4b0a      	ldr	r3, [pc, #40]	; (80183cc <prvAddCurrentTaskToDelayedList+0x94>)
 80183a4:	681b      	ldr	r3, [r3, #0]
 80183a6:	3304      	adds	r3, #4
 80183a8:	4619      	mov	r1, r3
 80183aa:	4610      	mov	r0, r2
 80183ac:	f7fe faff 	bl	80169ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80183b0:	4b0a      	ldr	r3, [pc, #40]	; (80183dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	68ba      	ldr	r2, [r7, #8]
 80183b6:	429a      	cmp	r2, r3
 80183b8:	d202      	bcs.n	80183c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80183ba:	4a08      	ldr	r2, [pc, #32]	; (80183dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80183bc:	68bb      	ldr	r3, [r7, #8]
 80183be:	6013      	str	r3, [r2, #0]
}
 80183c0:	bf00      	nop
 80183c2:	3710      	adds	r7, #16
 80183c4:	46bd      	mov	sp, r7
 80183c6:	bd80      	pop	{r7, pc}
 80183c8:	24002c30 	.word	0x24002c30
 80183cc:	24002758 	.word	0x24002758
 80183d0:	24002c18 	.word	0x24002c18
 80183d4:	24002be8 	.word	0x24002be8
 80183d8:	24002be4 	.word	0x24002be4
 80183dc:	24002c4c 	.word	0x24002c4c

080183e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80183e0:	b580      	push	{r7, lr}
 80183e2:	b08a      	sub	sp, #40	; 0x28
 80183e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80183e6:	2300      	movs	r3, #0
 80183e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80183ea:	f000 fb07 	bl	80189fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80183ee:	4b1c      	ldr	r3, [pc, #112]	; (8018460 <xTimerCreateTimerTask+0x80>)
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d021      	beq.n	801843a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80183f6:	2300      	movs	r3, #0
 80183f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80183fa:	2300      	movs	r3, #0
 80183fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80183fe:	1d3a      	adds	r2, r7, #4
 8018400:	f107 0108 	add.w	r1, r7, #8
 8018404:	f107 030c 	add.w	r3, r7, #12
 8018408:	4618      	mov	r0, r3
 801840a:	f7fd fff9 	bl	8016400 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801840e:	6879      	ldr	r1, [r7, #4]
 8018410:	68bb      	ldr	r3, [r7, #8]
 8018412:	68fa      	ldr	r2, [r7, #12]
 8018414:	9202      	str	r2, [sp, #8]
 8018416:	9301      	str	r3, [sp, #4]
 8018418:	2302      	movs	r3, #2
 801841a:	9300      	str	r3, [sp, #0]
 801841c:	2300      	movs	r3, #0
 801841e:	460a      	mov	r2, r1
 8018420:	4910      	ldr	r1, [pc, #64]	; (8018464 <xTimerCreateTimerTask+0x84>)
 8018422:	4811      	ldr	r0, [pc, #68]	; (8018468 <xTimerCreateTimerTask+0x88>)
 8018424:	f7ff f812 	bl	801744c <xTaskCreateStatic>
 8018428:	4603      	mov	r3, r0
 801842a:	4a10      	ldr	r2, [pc, #64]	; (801846c <xTimerCreateTimerTask+0x8c>)
 801842c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801842e:	4b0f      	ldr	r3, [pc, #60]	; (801846c <xTimerCreateTimerTask+0x8c>)
 8018430:	681b      	ldr	r3, [r3, #0]
 8018432:	2b00      	cmp	r3, #0
 8018434:	d001      	beq.n	801843a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018436:	2301      	movs	r3, #1
 8018438:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801843a:	697b      	ldr	r3, [r7, #20]
 801843c:	2b00      	cmp	r3, #0
 801843e:	d10a      	bne.n	8018456 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018444:	f383 8811 	msr	BASEPRI, r3
 8018448:	f3bf 8f6f 	isb	sy
 801844c:	f3bf 8f4f 	dsb	sy
 8018450:	613b      	str	r3, [r7, #16]
}
 8018452:	bf00      	nop
 8018454:	e7fe      	b.n	8018454 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018456:	697b      	ldr	r3, [r7, #20]
}
 8018458:	4618      	mov	r0, r3
 801845a:	3718      	adds	r7, #24
 801845c:	46bd      	mov	sp, r7
 801845e:	bd80      	pop	{r7, pc}
 8018460:	24002c88 	.word	0x24002c88
 8018464:	0801a018 	.word	0x0801a018
 8018468:	080185a5 	.word	0x080185a5
 801846c:	24002c8c 	.word	0x24002c8c

08018470 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018470:	b580      	push	{r7, lr}
 8018472:	b08a      	sub	sp, #40	; 0x28
 8018474:	af00      	add	r7, sp, #0
 8018476:	60f8      	str	r0, [r7, #12]
 8018478:	60b9      	str	r1, [r7, #8]
 801847a:	607a      	str	r2, [r7, #4]
 801847c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801847e:	2300      	movs	r3, #0
 8018480:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018482:	68fb      	ldr	r3, [r7, #12]
 8018484:	2b00      	cmp	r3, #0
 8018486:	d10a      	bne.n	801849e <xTimerGenericCommand+0x2e>
	__asm volatile
 8018488:	f04f 0350 	mov.w	r3, #80	; 0x50
 801848c:	f383 8811 	msr	BASEPRI, r3
 8018490:	f3bf 8f6f 	isb	sy
 8018494:	f3bf 8f4f 	dsb	sy
 8018498:	623b      	str	r3, [r7, #32]
}
 801849a:	bf00      	nop
 801849c:	e7fe      	b.n	801849c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801849e:	4b1a      	ldr	r3, [pc, #104]	; (8018508 <xTimerGenericCommand+0x98>)
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d02a      	beq.n	80184fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80184a6:	68bb      	ldr	r3, [r7, #8]
 80184a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80184ae:	68fb      	ldr	r3, [r7, #12]
 80184b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80184b2:	68bb      	ldr	r3, [r7, #8]
 80184b4:	2b05      	cmp	r3, #5
 80184b6:	dc18      	bgt.n	80184ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80184b8:	f7ff fe9a 	bl	80181f0 <xTaskGetSchedulerState>
 80184bc:	4603      	mov	r3, r0
 80184be:	2b02      	cmp	r3, #2
 80184c0:	d109      	bne.n	80184d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80184c2:	4b11      	ldr	r3, [pc, #68]	; (8018508 <xTimerGenericCommand+0x98>)
 80184c4:	6818      	ldr	r0, [r3, #0]
 80184c6:	f107 0110 	add.w	r1, r7, #16
 80184ca:	2300      	movs	r3, #0
 80184cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80184ce:	f7fe fbd5 	bl	8016c7c <xQueueGenericSend>
 80184d2:	6278      	str	r0, [r7, #36]	; 0x24
 80184d4:	e012      	b.n	80184fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80184d6:	4b0c      	ldr	r3, [pc, #48]	; (8018508 <xTimerGenericCommand+0x98>)
 80184d8:	6818      	ldr	r0, [r3, #0]
 80184da:	f107 0110 	add.w	r1, r7, #16
 80184de:	2300      	movs	r3, #0
 80184e0:	2200      	movs	r2, #0
 80184e2:	f7fe fbcb 	bl	8016c7c <xQueueGenericSend>
 80184e6:	6278      	str	r0, [r7, #36]	; 0x24
 80184e8:	e008      	b.n	80184fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80184ea:	4b07      	ldr	r3, [pc, #28]	; (8018508 <xTimerGenericCommand+0x98>)
 80184ec:	6818      	ldr	r0, [r3, #0]
 80184ee:	f107 0110 	add.w	r1, r7, #16
 80184f2:	2300      	movs	r3, #0
 80184f4:	683a      	ldr	r2, [r7, #0]
 80184f6:	f7fe fcbf 	bl	8016e78 <xQueueGenericSendFromISR>
 80184fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80184fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80184fe:	4618      	mov	r0, r3
 8018500:	3728      	adds	r7, #40	; 0x28
 8018502:	46bd      	mov	sp, r7
 8018504:	bd80      	pop	{r7, pc}
 8018506:	bf00      	nop
 8018508:	24002c88 	.word	0x24002c88

0801850c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801850c:	b580      	push	{r7, lr}
 801850e:	b088      	sub	sp, #32
 8018510:	af02      	add	r7, sp, #8
 8018512:	6078      	str	r0, [r7, #4]
 8018514:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018516:	4b22      	ldr	r3, [pc, #136]	; (80185a0 <prvProcessExpiredTimer+0x94>)
 8018518:	681b      	ldr	r3, [r3, #0]
 801851a:	68db      	ldr	r3, [r3, #12]
 801851c:	68db      	ldr	r3, [r3, #12]
 801851e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018520:	697b      	ldr	r3, [r7, #20]
 8018522:	3304      	adds	r3, #4
 8018524:	4618      	mov	r0, r3
 8018526:	f7fe fa7b 	bl	8016a20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801852a:	697b      	ldr	r3, [r7, #20]
 801852c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018530:	f003 0304 	and.w	r3, r3, #4
 8018534:	2b00      	cmp	r3, #0
 8018536:	d022      	beq.n	801857e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018538:	697b      	ldr	r3, [r7, #20]
 801853a:	699a      	ldr	r2, [r3, #24]
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	18d1      	adds	r1, r2, r3
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	683a      	ldr	r2, [r7, #0]
 8018544:	6978      	ldr	r0, [r7, #20]
 8018546:	f000 f8d1 	bl	80186ec <prvInsertTimerInActiveList>
 801854a:	4603      	mov	r3, r0
 801854c:	2b00      	cmp	r3, #0
 801854e:	d01f      	beq.n	8018590 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018550:	2300      	movs	r3, #0
 8018552:	9300      	str	r3, [sp, #0]
 8018554:	2300      	movs	r3, #0
 8018556:	687a      	ldr	r2, [r7, #4]
 8018558:	2100      	movs	r1, #0
 801855a:	6978      	ldr	r0, [r7, #20]
 801855c:	f7ff ff88 	bl	8018470 <xTimerGenericCommand>
 8018560:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018562:	693b      	ldr	r3, [r7, #16]
 8018564:	2b00      	cmp	r3, #0
 8018566:	d113      	bne.n	8018590 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8018568:	f04f 0350 	mov.w	r3, #80	; 0x50
 801856c:	f383 8811 	msr	BASEPRI, r3
 8018570:	f3bf 8f6f 	isb	sy
 8018574:	f3bf 8f4f 	dsb	sy
 8018578:	60fb      	str	r3, [r7, #12]
}
 801857a:	bf00      	nop
 801857c:	e7fe      	b.n	801857c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801857e:	697b      	ldr	r3, [r7, #20]
 8018580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018584:	f023 0301 	bic.w	r3, r3, #1
 8018588:	b2da      	uxtb	r2, r3
 801858a:	697b      	ldr	r3, [r7, #20]
 801858c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018590:	697b      	ldr	r3, [r7, #20]
 8018592:	6a1b      	ldr	r3, [r3, #32]
 8018594:	6978      	ldr	r0, [r7, #20]
 8018596:	4798      	blx	r3
}
 8018598:	bf00      	nop
 801859a:	3718      	adds	r7, #24
 801859c:	46bd      	mov	sp, r7
 801859e:	bd80      	pop	{r7, pc}
 80185a0:	24002c80 	.word	0x24002c80

080185a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80185a4:	b580      	push	{r7, lr}
 80185a6:	b084      	sub	sp, #16
 80185a8:	af00      	add	r7, sp, #0
 80185aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80185ac:	f107 0308 	add.w	r3, r7, #8
 80185b0:	4618      	mov	r0, r3
 80185b2:	f000 f857 	bl	8018664 <prvGetNextExpireTime>
 80185b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80185b8:	68bb      	ldr	r3, [r7, #8]
 80185ba:	4619      	mov	r1, r3
 80185bc:	68f8      	ldr	r0, [r7, #12]
 80185be:	f000 f803 	bl	80185c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80185c2:	f000 f8d5 	bl	8018770 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80185c6:	e7f1      	b.n	80185ac <prvTimerTask+0x8>

080185c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80185c8:	b580      	push	{r7, lr}
 80185ca:	b084      	sub	sp, #16
 80185cc:	af00      	add	r7, sp, #0
 80185ce:	6078      	str	r0, [r7, #4]
 80185d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80185d2:	f7ff f977 	bl	80178c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80185d6:	f107 0308 	add.w	r3, r7, #8
 80185da:	4618      	mov	r0, r3
 80185dc:	f000 f866 	bl	80186ac <prvSampleTimeNow>
 80185e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80185e2:	68bb      	ldr	r3, [r7, #8]
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d130      	bne.n	801864a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80185e8:	683b      	ldr	r3, [r7, #0]
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d10a      	bne.n	8018604 <prvProcessTimerOrBlockTask+0x3c>
 80185ee:	687a      	ldr	r2, [r7, #4]
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	429a      	cmp	r2, r3
 80185f4:	d806      	bhi.n	8018604 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80185f6:	f7ff f973 	bl	80178e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80185fa:	68f9      	ldr	r1, [r7, #12]
 80185fc:	6878      	ldr	r0, [r7, #4]
 80185fe:	f7ff ff85 	bl	801850c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018602:	e024      	b.n	801864e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018604:	683b      	ldr	r3, [r7, #0]
 8018606:	2b00      	cmp	r3, #0
 8018608:	d008      	beq.n	801861c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801860a:	4b13      	ldr	r3, [pc, #76]	; (8018658 <prvProcessTimerOrBlockTask+0x90>)
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	2b00      	cmp	r3, #0
 8018612:	d101      	bne.n	8018618 <prvProcessTimerOrBlockTask+0x50>
 8018614:	2301      	movs	r3, #1
 8018616:	e000      	b.n	801861a <prvProcessTimerOrBlockTask+0x52>
 8018618:	2300      	movs	r3, #0
 801861a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801861c:	4b0f      	ldr	r3, [pc, #60]	; (801865c <prvProcessTimerOrBlockTask+0x94>)
 801861e:	6818      	ldr	r0, [r3, #0]
 8018620:	687a      	ldr	r2, [r7, #4]
 8018622:	68fb      	ldr	r3, [r7, #12]
 8018624:	1ad3      	subs	r3, r2, r3
 8018626:	683a      	ldr	r2, [r7, #0]
 8018628:	4619      	mov	r1, r3
 801862a:	f7fe fedb 	bl	80173e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801862e:	f7ff f957 	bl	80178e0 <xTaskResumeAll>
 8018632:	4603      	mov	r3, r0
 8018634:	2b00      	cmp	r3, #0
 8018636:	d10a      	bne.n	801864e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018638:	4b09      	ldr	r3, [pc, #36]	; (8018660 <prvProcessTimerOrBlockTask+0x98>)
 801863a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801863e:	601a      	str	r2, [r3, #0]
 8018640:	f3bf 8f4f 	dsb	sy
 8018644:	f3bf 8f6f 	isb	sy
}
 8018648:	e001      	b.n	801864e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801864a:	f7ff f949 	bl	80178e0 <xTaskResumeAll>
}
 801864e:	bf00      	nop
 8018650:	3710      	adds	r7, #16
 8018652:	46bd      	mov	sp, r7
 8018654:	bd80      	pop	{r7, pc}
 8018656:	bf00      	nop
 8018658:	24002c84 	.word	0x24002c84
 801865c:	24002c88 	.word	0x24002c88
 8018660:	e000ed04 	.word	0xe000ed04

08018664 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018664:	b480      	push	{r7}
 8018666:	b085      	sub	sp, #20
 8018668:	af00      	add	r7, sp, #0
 801866a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801866c:	4b0e      	ldr	r3, [pc, #56]	; (80186a8 <prvGetNextExpireTime+0x44>)
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	2b00      	cmp	r3, #0
 8018674:	d101      	bne.n	801867a <prvGetNextExpireTime+0x16>
 8018676:	2201      	movs	r2, #1
 8018678:	e000      	b.n	801867c <prvGetNextExpireTime+0x18>
 801867a:	2200      	movs	r2, #0
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	2b00      	cmp	r3, #0
 8018686:	d105      	bne.n	8018694 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018688:	4b07      	ldr	r3, [pc, #28]	; (80186a8 <prvGetNextExpireTime+0x44>)
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	68db      	ldr	r3, [r3, #12]
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	60fb      	str	r3, [r7, #12]
 8018692:	e001      	b.n	8018698 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018694:	2300      	movs	r3, #0
 8018696:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018698:	68fb      	ldr	r3, [r7, #12]
}
 801869a:	4618      	mov	r0, r3
 801869c:	3714      	adds	r7, #20
 801869e:	46bd      	mov	sp, r7
 80186a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186a4:	4770      	bx	lr
 80186a6:	bf00      	nop
 80186a8:	24002c80 	.word	0x24002c80

080186ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80186ac:	b580      	push	{r7, lr}
 80186ae:	b084      	sub	sp, #16
 80186b0:	af00      	add	r7, sp, #0
 80186b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80186b4:	f7ff f9b2 	bl	8017a1c <xTaskGetTickCount>
 80186b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80186ba:	4b0b      	ldr	r3, [pc, #44]	; (80186e8 <prvSampleTimeNow+0x3c>)
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	68fa      	ldr	r2, [r7, #12]
 80186c0:	429a      	cmp	r2, r3
 80186c2:	d205      	bcs.n	80186d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80186c4:	f000 f936 	bl	8018934 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	2201      	movs	r2, #1
 80186cc:	601a      	str	r2, [r3, #0]
 80186ce:	e002      	b.n	80186d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	2200      	movs	r2, #0
 80186d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80186d6:	4a04      	ldr	r2, [pc, #16]	; (80186e8 <prvSampleTimeNow+0x3c>)
 80186d8:	68fb      	ldr	r3, [r7, #12]
 80186da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80186dc:	68fb      	ldr	r3, [r7, #12]
}
 80186de:	4618      	mov	r0, r3
 80186e0:	3710      	adds	r7, #16
 80186e2:	46bd      	mov	sp, r7
 80186e4:	bd80      	pop	{r7, pc}
 80186e6:	bf00      	nop
 80186e8:	24002c90 	.word	0x24002c90

080186ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80186ec:	b580      	push	{r7, lr}
 80186ee:	b086      	sub	sp, #24
 80186f0:	af00      	add	r7, sp, #0
 80186f2:	60f8      	str	r0, [r7, #12]
 80186f4:	60b9      	str	r1, [r7, #8]
 80186f6:	607a      	str	r2, [r7, #4]
 80186f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80186fa:	2300      	movs	r3, #0
 80186fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	68ba      	ldr	r2, [r7, #8]
 8018702:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018704:	68fb      	ldr	r3, [r7, #12]
 8018706:	68fa      	ldr	r2, [r7, #12]
 8018708:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801870a:	68ba      	ldr	r2, [r7, #8]
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	429a      	cmp	r2, r3
 8018710:	d812      	bhi.n	8018738 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018712:	687a      	ldr	r2, [r7, #4]
 8018714:	683b      	ldr	r3, [r7, #0]
 8018716:	1ad2      	subs	r2, r2, r3
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	699b      	ldr	r3, [r3, #24]
 801871c:	429a      	cmp	r2, r3
 801871e:	d302      	bcc.n	8018726 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018720:	2301      	movs	r3, #1
 8018722:	617b      	str	r3, [r7, #20]
 8018724:	e01b      	b.n	801875e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018726:	4b10      	ldr	r3, [pc, #64]	; (8018768 <prvInsertTimerInActiveList+0x7c>)
 8018728:	681a      	ldr	r2, [r3, #0]
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	3304      	adds	r3, #4
 801872e:	4619      	mov	r1, r3
 8018730:	4610      	mov	r0, r2
 8018732:	f7fe f93c 	bl	80169ae <vListInsert>
 8018736:	e012      	b.n	801875e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018738:	687a      	ldr	r2, [r7, #4]
 801873a:	683b      	ldr	r3, [r7, #0]
 801873c:	429a      	cmp	r2, r3
 801873e:	d206      	bcs.n	801874e <prvInsertTimerInActiveList+0x62>
 8018740:	68ba      	ldr	r2, [r7, #8]
 8018742:	683b      	ldr	r3, [r7, #0]
 8018744:	429a      	cmp	r2, r3
 8018746:	d302      	bcc.n	801874e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018748:	2301      	movs	r3, #1
 801874a:	617b      	str	r3, [r7, #20]
 801874c:	e007      	b.n	801875e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801874e:	4b07      	ldr	r3, [pc, #28]	; (801876c <prvInsertTimerInActiveList+0x80>)
 8018750:	681a      	ldr	r2, [r3, #0]
 8018752:	68fb      	ldr	r3, [r7, #12]
 8018754:	3304      	adds	r3, #4
 8018756:	4619      	mov	r1, r3
 8018758:	4610      	mov	r0, r2
 801875a:	f7fe f928 	bl	80169ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 801875e:	697b      	ldr	r3, [r7, #20]
}
 8018760:	4618      	mov	r0, r3
 8018762:	3718      	adds	r7, #24
 8018764:	46bd      	mov	sp, r7
 8018766:	bd80      	pop	{r7, pc}
 8018768:	24002c84 	.word	0x24002c84
 801876c:	24002c80 	.word	0x24002c80

08018770 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018770:	b580      	push	{r7, lr}
 8018772:	b08e      	sub	sp, #56	; 0x38
 8018774:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018776:	e0ca      	b.n	801890e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	2b00      	cmp	r3, #0
 801877c:	da18      	bge.n	80187b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801877e:	1d3b      	adds	r3, r7, #4
 8018780:	3304      	adds	r3, #4
 8018782:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018786:	2b00      	cmp	r3, #0
 8018788:	d10a      	bne.n	80187a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801878a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801878e:	f383 8811 	msr	BASEPRI, r3
 8018792:	f3bf 8f6f 	isb	sy
 8018796:	f3bf 8f4f 	dsb	sy
 801879a:	61fb      	str	r3, [r7, #28]
}
 801879c:	bf00      	nop
 801879e:	e7fe      	b.n	801879e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80187a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80187a6:	6850      	ldr	r0, [r2, #4]
 80187a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80187aa:	6892      	ldr	r2, [r2, #8]
 80187ac:	4611      	mov	r1, r2
 80187ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	f2c0 80aa 	blt.w	801890c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80187b8:	68fb      	ldr	r3, [r7, #12]
 80187ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80187bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187be:	695b      	ldr	r3, [r3, #20]
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	d004      	beq.n	80187ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80187c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187c6:	3304      	adds	r3, #4
 80187c8:	4618      	mov	r0, r3
 80187ca:	f7fe f929 	bl	8016a20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80187ce:	463b      	mov	r3, r7
 80187d0:	4618      	mov	r0, r3
 80187d2:	f7ff ff6b 	bl	80186ac <prvSampleTimeNow>
 80187d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	2b09      	cmp	r3, #9
 80187dc:	f200 8097 	bhi.w	801890e <prvProcessReceivedCommands+0x19e>
 80187e0:	a201      	add	r2, pc, #4	; (adr r2, 80187e8 <prvProcessReceivedCommands+0x78>)
 80187e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80187e6:	bf00      	nop
 80187e8:	08018811 	.word	0x08018811
 80187ec:	08018811 	.word	0x08018811
 80187f0:	08018811 	.word	0x08018811
 80187f4:	08018885 	.word	0x08018885
 80187f8:	08018899 	.word	0x08018899
 80187fc:	080188e3 	.word	0x080188e3
 8018800:	08018811 	.word	0x08018811
 8018804:	08018811 	.word	0x08018811
 8018808:	08018885 	.word	0x08018885
 801880c:	08018899 	.word	0x08018899
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018812:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018816:	f043 0301 	orr.w	r3, r3, #1
 801881a:	b2da      	uxtb	r2, r3
 801881c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801881e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018822:	68ba      	ldr	r2, [r7, #8]
 8018824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018826:	699b      	ldr	r3, [r3, #24]
 8018828:	18d1      	adds	r1, r2, r3
 801882a:	68bb      	ldr	r3, [r7, #8]
 801882c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801882e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018830:	f7ff ff5c 	bl	80186ec <prvInsertTimerInActiveList>
 8018834:	4603      	mov	r3, r0
 8018836:	2b00      	cmp	r3, #0
 8018838:	d069      	beq.n	801890e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801883a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801883c:	6a1b      	ldr	r3, [r3, #32]
 801883e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018840:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018844:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018848:	f003 0304 	and.w	r3, r3, #4
 801884c:	2b00      	cmp	r3, #0
 801884e:	d05e      	beq.n	801890e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018850:	68ba      	ldr	r2, [r7, #8]
 8018852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018854:	699b      	ldr	r3, [r3, #24]
 8018856:	441a      	add	r2, r3
 8018858:	2300      	movs	r3, #0
 801885a:	9300      	str	r3, [sp, #0]
 801885c:	2300      	movs	r3, #0
 801885e:	2100      	movs	r1, #0
 8018860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018862:	f7ff fe05 	bl	8018470 <xTimerGenericCommand>
 8018866:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018868:	6a3b      	ldr	r3, [r7, #32]
 801886a:	2b00      	cmp	r3, #0
 801886c:	d14f      	bne.n	801890e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801886e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018872:	f383 8811 	msr	BASEPRI, r3
 8018876:	f3bf 8f6f 	isb	sy
 801887a:	f3bf 8f4f 	dsb	sy
 801887e:	61bb      	str	r3, [r7, #24]
}
 8018880:	bf00      	nop
 8018882:	e7fe      	b.n	8018882 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018886:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801888a:	f023 0301 	bic.w	r3, r3, #1
 801888e:	b2da      	uxtb	r2, r3
 8018890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018892:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8018896:	e03a      	b.n	801890e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801889a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801889e:	f043 0301 	orr.w	r3, r3, #1
 80188a2:	b2da      	uxtb	r2, r3
 80188a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80188aa:	68ba      	ldr	r2, [r7, #8]
 80188ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80188b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188b2:	699b      	ldr	r3, [r3, #24]
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d10a      	bne.n	80188ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80188b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188bc:	f383 8811 	msr	BASEPRI, r3
 80188c0:	f3bf 8f6f 	isb	sy
 80188c4:	f3bf 8f4f 	dsb	sy
 80188c8:	617b      	str	r3, [r7, #20]
}
 80188ca:	bf00      	nop
 80188cc:	e7fe      	b.n	80188cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80188ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188d0:	699a      	ldr	r2, [r3, #24]
 80188d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188d4:	18d1      	adds	r1, r2, r3
 80188d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80188dc:	f7ff ff06 	bl	80186ec <prvInsertTimerInActiveList>
					break;
 80188e0:	e015      	b.n	801890e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80188e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80188e8:	f003 0302 	and.w	r3, r3, #2
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d103      	bne.n	80188f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80188f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80188f2:	f000 fbfd 	bl	80190f0 <vPortFree>
 80188f6:	e00a      	b.n	801890e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80188f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80188fe:	f023 0301 	bic.w	r3, r3, #1
 8018902:	b2da      	uxtb	r2, r3
 8018904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018906:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801890a:	e000      	b.n	801890e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801890c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801890e:	4b08      	ldr	r3, [pc, #32]	; (8018930 <prvProcessReceivedCommands+0x1c0>)
 8018910:	681b      	ldr	r3, [r3, #0]
 8018912:	1d39      	adds	r1, r7, #4
 8018914:	2200      	movs	r2, #0
 8018916:	4618      	mov	r0, r3
 8018918:	f7fe fb4a 	bl	8016fb0 <xQueueReceive>
 801891c:	4603      	mov	r3, r0
 801891e:	2b00      	cmp	r3, #0
 8018920:	f47f af2a 	bne.w	8018778 <prvProcessReceivedCommands+0x8>
	}
}
 8018924:	bf00      	nop
 8018926:	bf00      	nop
 8018928:	3730      	adds	r7, #48	; 0x30
 801892a:	46bd      	mov	sp, r7
 801892c:	bd80      	pop	{r7, pc}
 801892e:	bf00      	nop
 8018930:	24002c88 	.word	0x24002c88

08018934 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8018934:	b580      	push	{r7, lr}
 8018936:	b088      	sub	sp, #32
 8018938:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801893a:	e048      	b.n	80189ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801893c:	4b2d      	ldr	r3, [pc, #180]	; (80189f4 <prvSwitchTimerLists+0xc0>)
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	68db      	ldr	r3, [r3, #12]
 8018942:	681b      	ldr	r3, [r3, #0]
 8018944:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018946:	4b2b      	ldr	r3, [pc, #172]	; (80189f4 <prvSwitchTimerLists+0xc0>)
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	68db      	ldr	r3, [r3, #12]
 801894c:	68db      	ldr	r3, [r3, #12]
 801894e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018950:	68fb      	ldr	r3, [r7, #12]
 8018952:	3304      	adds	r3, #4
 8018954:	4618      	mov	r0, r3
 8018956:	f7fe f863 	bl	8016a20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801895a:	68fb      	ldr	r3, [r7, #12]
 801895c:	6a1b      	ldr	r3, [r3, #32]
 801895e:	68f8      	ldr	r0, [r7, #12]
 8018960:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018962:	68fb      	ldr	r3, [r7, #12]
 8018964:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018968:	f003 0304 	and.w	r3, r3, #4
 801896c:	2b00      	cmp	r3, #0
 801896e:	d02e      	beq.n	80189ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018970:	68fb      	ldr	r3, [r7, #12]
 8018972:	699b      	ldr	r3, [r3, #24]
 8018974:	693a      	ldr	r2, [r7, #16]
 8018976:	4413      	add	r3, r2
 8018978:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801897a:	68ba      	ldr	r2, [r7, #8]
 801897c:	693b      	ldr	r3, [r7, #16]
 801897e:	429a      	cmp	r2, r3
 8018980:	d90e      	bls.n	80189a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8018982:	68fb      	ldr	r3, [r7, #12]
 8018984:	68ba      	ldr	r2, [r7, #8]
 8018986:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018988:	68fb      	ldr	r3, [r7, #12]
 801898a:	68fa      	ldr	r2, [r7, #12]
 801898c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801898e:	4b19      	ldr	r3, [pc, #100]	; (80189f4 <prvSwitchTimerLists+0xc0>)
 8018990:	681a      	ldr	r2, [r3, #0]
 8018992:	68fb      	ldr	r3, [r7, #12]
 8018994:	3304      	adds	r3, #4
 8018996:	4619      	mov	r1, r3
 8018998:	4610      	mov	r0, r2
 801899a:	f7fe f808 	bl	80169ae <vListInsert>
 801899e:	e016      	b.n	80189ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80189a0:	2300      	movs	r3, #0
 80189a2:	9300      	str	r3, [sp, #0]
 80189a4:	2300      	movs	r3, #0
 80189a6:	693a      	ldr	r2, [r7, #16]
 80189a8:	2100      	movs	r1, #0
 80189aa:	68f8      	ldr	r0, [r7, #12]
 80189ac:	f7ff fd60 	bl	8018470 <xTimerGenericCommand>
 80189b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d10a      	bne.n	80189ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 80189b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189bc:	f383 8811 	msr	BASEPRI, r3
 80189c0:	f3bf 8f6f 	isb	sy
 80189c4:	f3bf 8f4f 	dsb	sy
 80189c8:	603b      	str	r3, [r7, #0]
}
 80189ca:	bf00      	nop
 80189cc:	e7fe      	b.n	80189cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80189ce:	4b09      	ldr	r3, [pc, #36]	; (80189f4 <prvSwitchTimerLists+0xc0>)
 80189d0:	681b      	ldr	r3, [r3, #0]
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	d1b1      	bne.n	801893c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80189d8:	4b06      	ldr	r3, [pc, #24]	; (80189f4 <prvSwitchTimerLists+0xc0>)
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80189de:	4b06      	ldr	r3, [pc, #24]	; (80189f8 <prvSwitchTimerLists+0xc4>)
 80189e0:	681b      	ldr	r3, [r3, #0]
 80189e2:	4a04      	ldr	r2, [pc, #16]	; (80189f4 <prvSwitchTimerLists+0xc0>)
 80189e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80189e6:	4a04      	ldr	r2, [pc, #16]	; (80189f8 <prvSwitchTimerLists+0xc4>)
 80189e8:	697b      	ldr	r3, [r7, #20]
 80189ea:	6013      	str	r3, [r2, #0]
}
 80189ec:	bf00      	nop
 80189ee:	3718      	adds	r7, #24
 80189f0:	46bd      	mov	sp, r7
 80189f2:	bd80      	pop	{r7, pc}
 80189f4:	24002c80 	.word	0x24002c80
 80189f8:	24002c84 	.word	0x24002c84

080189fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80189fc:	b580      	push	{r7, lr}
 80189fe:	b082      	sub	sp, #8
 8018a00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8018a02:	f000 f987 	bl	8018d14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8018a06:	4b15      	ldr	r3, [pc, #84]	; (8018a5c <prvCheckForValidListAndQueue+0x60>)
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d120      	bne.n	8018a50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8018a0e:	4814      	ldr	r0, [pc, #80]	; (8018a60 <prvCheckForValidListAndQueue+0x64>)
 8018a10:	f7fd ff7c 	bl	801690c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018a14:	4813      	ldr	r0, [pc, #76]	; (8018a64 <prvCheckForValidListAndQueue+0x68>)
 8018a16:	f7fd ff79 	bl	801690c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8018a1a:	4b13      	ldr	r3, [pc, #76]	; (8018a68 <prvCheckForValidListAndQueue+0x6c>)
 8018a1c:	4a10      	ldr	r2, [pc, #64]	; (8018a60 <prvCheckForValidListAndQueue+0x64>)
 8018a1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8018a20:	4b12      	ldr	r3, [pc, #72]	; (8018a6c <prvCheckForValidListAndQueue+0x70>)
 8018a22:	4a10      	ldr	r2, [pc, #64]	; (8018a64 <prvCheckForValidListAndQueue+0x68>)
 8018a24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018a26:	2300      	movs	r3, #0
 8018a28:	9300      	str	r3, [sp, #0]
 8018a2a:	4b11      	ldr	r3, [pc, #68]	; (8018a70 <prvCheckForValidListAndQueue+0x74>)
 8018a2c:	4a11      	ldr	r2, [pc, #68]	; (8018a74 <prvCheckForValidListAndQueue+0x78>)
 8018a2e:	2110      	movs	r1, #16
 8018a30:	200a      	movs	r0, #10
 8018a32:	f7fe f887 	bl	8016b44 <xQueueGenericCreateStatic>
 8018a36:	4603      	mov	r3, r0
 8018a38:	4a08      	ldr	r2, [pc, #32]	; (8018a5c <prvCheckForValidListAndQueue+0x60>)
 8018a3a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8018a3c:	4b07      	ldr	r3, [pc, #28]	; (8018a5c <prvCheckForValidListAndQueue+0x60>)
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d005      	beq.n	8018a50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018a44:	4b05      	ldr	r3, [pc, #20]	; (8018a5c <prvCheckForValidListAndQueue+0x60>)
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	490b      	ldr	r1, [pc, #44]	; (8018a78 <prvCheckForValidListAndQueue+0x7c>)
 8018a4a:	4618      	mov	r0, r3
 8018a4c:	f7fe fca0 	bl	8017390 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018a50:	f000 f990 	bl	8018d74 <vPortExitCritical>
}
 8018a54:	bf00      	nop
 8018a56:	46bd      	mov	sp, r7
 8018a58:	bd80      	pop	{r7, pc}
 8018a5a:	bf00      	nop
 8018a5c:	24002c88 	.word	0x24002c88
 8018a60:	24002c58 	.word	0x24002c58
 8018a64:	24002c6c 	.word	0x24002c6c
 8018a68:	24002c80 	.word	0x24002c80
 8018a6c:	24002c84 	.word	0x24002c84
 8018a70:	24002d34 	.word	0x24002d34
 8018a74:	24002c94 	.word	0x24002c94
 8018a78:	0801a020 	.word	0x0801a020

08018a7c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8018a7c:	b580      	push	{r7, lr}
 8018a7e:	b08a      	sub	sp, #40	; 0x28
 8018a80:	af00      	add	r7, sp, #0
 8018a82:	60f8      	str	r0, [r7, #12]
 8018a84:	60b9      	str	r1, [r7, #8]
 8018a86:	607a      	str	r2, [r7, #4]
 8018a88:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8018a8a:	f06f 0301 	mvn.w	r3, #1
 8018a8e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8018a90:	68fb      	ldr	r3, [r7, #12]
 8018a92:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8018a94:	68bb      	ldr	r3, [r7, #8]
 8018a96:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018a9c:	4b06      	ldr	r3, [pc, #24]	; (8018ab8 <xTimerPendFunctionCallFromISR+0x3c>)
 8018a9e:	6818      	ldr	r0, [r3, #0]
 8018aa0:	f107 0114 	add.w	r1, r7, #20
 8018aa4:	2300      	movs	r3, #0
 8018aa6:	683a      	ldr	r2, [r7, #0]
 8018aa8:	f7fe f9e6 	bl	8016e78 <xQueueGenericSendFromISR>
 8018aac:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8018aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8018ab0:	4618      	mov	r0, r3
 8018ab2:	3728      	adds	r7, #40	; 0x28
 8018ab4:	46bd      	mov	sp, r7
 8018ab6:	bd80      	pop	{r7, pc}
 8018ab8:	24002c88 	.word	0x24002c88

08018abc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018abc:	b480      	push	{r7}
 8018abe:	b085      	sub	sp, #20
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	60f8      	str	r0, [r7, #12]
 8018ac4:	60b9      	str	r1, [r7, #8]
 8018ac6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	3b04      	subs	r3, #4
 8018acc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018ace:	68fb      	ldr	r3, [r7, #12]
 8018ad0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8018ad4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018ad6:	68fb      	ldr	r3, [r7, #12]
 8018ad8:	3b04      	subs	r3, #4
 8018ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018adc:	68bb      	ldr	r3, [r7, #8]
 8018ade:	f023 0201 	bic.w	r2, r3, #1
 8018ae2:	68fb      	ldr	r3, [r7, #12]
 8018ae4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018ae6:	68fb      	ldr	r3, [r7, #12]
 8018ae8:	3b04      	subs	r3, #4
 8018aea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018aec:	4a0c      	ldr	r2, [pc, #48]	; (8018b20 <pxPortInitialiseStack+0x64>)
 8018aee:	68fb      	ldr	r3, [r7, #12]
 8018af0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8018af2:	68fb      	ldr	r3, [r7, #12]
 8018af4:	3b14      	subs	r3, #20
 8018af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018af8:	687a      	ldr	r2, [r7, #4]
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018afe:	68fb      	ldr	r3, [r7, #12]
 8018b00:	3b04      	subs	r3, #4
 8018b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018b04:	68fb      	ldr	r3, [r7, #12]
 8018b06:	f06f 0202 	mvn.w	r2, #2
 8018b0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018b0c:	68fb      	ldr	r3, [r7, #12]
 8018b0e:	3b20      	subs	r3, #32
 8018b10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8018b12:	68fb      	ldr	r3, [r7, #12]
}
 8018b14:	4618      	mov	r0, r3
 8018b16:	3714      	adds	r7, #20
 8018b18:	46bd      	mov	sp, r7
 8018b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b1e:	4770      	bx	lr
 8018b20:	08018b25 	.word	0x08018b25

08018b24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018b24:	b480      	push	{r7}
 8018b26:	b085      	sub	sp, #20
 8018b28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018b2a:	2300      	movs	r3, #0
 8018b2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018b2e:	4b12      	ldr	r3, [pc, #72]	; (8018b78 <prvTaskExitError+0x54>)
 8018b30:	681b      	ldr	r3, [r3, #0]
 8018b32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018b36:	d00a      	beq.n	8018b4e <prvTaskExitError+0x2a>
	__asm volatile
 8018b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b3c:	f383 8811 	msr	BASEPRI, r3
 8018b40:	f3bf 8f6f 	isb	sy
 8018b44:	f3bf 8f4f 	dsb	sy
 8018b48:	60fb      	str	r3, [r7, #12]
}
 8018b4a:	bf00      	nop
 8018b4c:	e7fe      	b.n	8018b4c <prvTaskExitError+0x28>
	__asm volatile
 8018b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b52:	f383 8811 	msr	BASEPRI, r3
 8018b56:	f3bf 8f6f 	isb	sy
 8018b5a:	f3bf 8f4f 	dsb	sy
 8018b5e:	60bb      	str	r3, [r7, #8]
}
 8018b60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018b62:	bf00      	nop
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	d0fc      	beq.n	8018b64 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018b6a:	bf00      	nop
 8018b6c:	bf00      	nop
 8018b6e:	3714      	adds	r7, #20
 8018b70:	46bd      	mov	sp, r7
 8018b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b76:	4770      	bx	lr
 8018b78:	240000cc 	.word	0x240000cc
 8018b7c:	00000000 	.word	0x00000000

08018b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018b80:	4b07      	ldr	r3, [pc, #28]	; (8018ba0 <pxCurrentTCBConst2>)
 8018b82:	6819      	ldr	r1, [r3, #0]
 8018b84:	6808      	ldr	r0, [r1, #0]
 8018b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b8a:	f380 8809 	msr	PSP, r0
 8018b8e:	f3bf 8f6f 	isb	sy
 8018b92:	f04f 0000 	mov.w	r0, #0
 8018b96:	f380 8811 	msr	BASEPRI, r0
 8018b9a:	4770      	bx	lr
 8018b9c:	f3af 8000 	nop.w

08018ba0 <pxCurrentTCBConst2>:
 8018ba0:	24002758 	.word	0x24002758
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018ba4:	bf00      	nop
 8018ba6:	bf00      	nop

08018ba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018ba8:	4808      	ldr	r0, [pc, #32]	; (8018bcc <prvPortStartFirstTask+0x24>)
 8018baa:	6800      	ldr	r0, [r0, #0]
 8018bac:	6800      	ldr	r0, [r0, #0]
 8018bae:	f380 8808 	msr	MSP, r0
 8018bb2:	f04f 0000 	mov.w	r0, #0
 8018bb6:	f380 8814 	msr	CONTROL, r0
 8018bba:	b662      	cpsie	i
 8018bbc:	b661      	cpsie	f
 8018bbe:	f3bf 8f4f 	dsb	sy
 8018bc2:	f3bf 8f6f 	isb	sy
 8018bc6:	df00      	svc	0
 8018bc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018bca:	bf00      	nop
 8018bcc:	e000ed08 	.word	0xe000ed08

08018bd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018bd0:	b580      	push	{r7, lr}
 8018bd2:	b086      	sub	sp, #24
 8018bd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018bd6:	4b46      	ldr	r3, [pc, #280]	; (8018cf0 <xPortStartScheduler+0x120>)
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	4a46      	ldr	r2, [pc, #280]	; (8018cf4 <xPortStartScheduler+0x124>)
 8018bdc:	4293      	cmp	r3, r2
 8018bde:	d10a      	bne.n	8018bf6 <xPortStartScheduler+0x26>
	__asm volatile
 8018be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018be4:	f383 8811 	msr	BASEPRI, r3
 8018be8:	f3bf 8f6f 	isb	sy
 8018bec:	f3bf 8f4f 	dsb	sy
 8018bf0:	613b      	str	r3, [r7, #16]
}
 8018bf2:	bf00      	nop
 8018bf4:	e7fe      	b.n	8018bf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018bf6:	4b3e      	ldr	r3, [pc, #248]	; (8018cf0 <xPortStartScheduler+0x120>)
 8018bf8:	681b      	ldr	r3, [r3, #0]
 8018bfa:	4a3f      	ldr	r2, [pc, #252]	; (8018cf8 <xPortStartScheduler+0x128>)
 8018bfc:	4293      	cmp	r3, r2
 8018bfe:	d10a      	bne.n	8018c16 <xPortStartScheduler+0x46>
	__asm volatile
 8018c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c04:	f383 8811 	msr	BASEPRI, r3
 8018c08:	f3bf 8f6f 	isb	sy
 8018c0c:	f3bf 8f4f 	dsb	sy
 8018c10:	60fb      	str	r3, [r7, #12]
}
 8018c12:	bf00      	nop
 8018c14:	e7fe      	b.n	8018c14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018c16:	4b39      	ldr	r3, [pc, #228]	; (8018cfc <xPortStartScheduler+0x12c>)
 8018c18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018c1a:	697b      	ldr	r3, [r7, #20]
 8018c1c:	781b      	ldrb	r3, [r3, #0]
 8018c1e:	b2db      	uxtb	r3, r3
 8018c20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018c22:	697b      	ldr	r3, [r7, #20]
 8018c24:	22ff      	movs	r2, #255	; 0xff
 8018c26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018c28:	697b      	ldr	r3, [r7, #20]
 8018c2a:	781b      	ldrb	r3, [r3, #0]
 8018c2c:	b2db      	uxtb	r3, r3
 8018c2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018c30:	78fb      	ldrb	r3, [r7, #3]
 8018c32:	b2db      	uxtb	r3, r3
 8018c34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018c38:	b2da      	uxtb	r2, r3
 8018c3a:	4b31      	ldr	r3, [pc, #196]	; (8018d00 <xPortStartScheduler+0x130>)
 8018c3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018c3e:	4b31      	ldr	r3, [pc, #196]	; (8018d04 <xPortStartScheduler+0x134>)
 8018c40:	2207      	movs	r2, #7
 8018c42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018c44:	e009      	b.n	8018c5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8018c46:	4b2f      	ldr	r3, [pc, #188]	; (8018d04 <xPortStartScheduler+0x134>)
 8018c48:	681b      	ldr	r3, [r3, #0]
 8018c4a:	3b01      	subs	r3, #1
 8018c4c:	4a2d      	ldr	r2, [pc, #180]	; (8018d04 <xPortStartScheduler+0x134>)
 8018c4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018c50:	78fb      	ldrb	r3, [r7, #3]
 8018c52:	b2db      	uxtb	r3, r3
 8018c54:	005b      	lsls	r3, r3, #1
 8018c56:	b2db      	uxtb	r3, r3
 8018c58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018c5a:	78fb      	ldrb	r3, [r7, #3]
 8018c5c:	b2db      	uxtb	r3, r3
 8018c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018c62:	2b80      	cmp	r3, #128	; 0x80
 8018c64:	d0ef      	beq.n	8018c46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018c66:	4b27      	ldr	r3, [pc, #156]	; (8018d04 <xPortStartScheduler+0x134>)
 8018c68:	681b      	ldr	r3, [r3, #0]
 8018c6a:	f1c3 0307 	rsb	r3, r3, #7
 8018c6e:	2b04      	cmp	r3, #4
 8018c70:	d00a      	beq.n	8018c88 <xPortStartScheduler+0xb8>
	__asm volatile
 8018c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c76:	f383 8811 	msr	BASEPRI, r3
 8018c7a:	f3bf 8f6f 	isb	sy
 8018c7e:	f3bf 8f4f 	dsb	sy
 8018c82:	60bb      	str	r3, [r7, #8]
}
 8018c84:	bf00      	nop
 8018c86:	e7fe      	b.n	8018c86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018c88:	4b1e      	ldr	r3, [pc, #120]	; (8018d04 <xPortStartScheduler+0x134>)
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	021b      	lsls	r3, r3, #8
 8018c8e:	4a1d      	ldr	r2, [pc, #116]	; (8018d04 <xPortStartScheduler+0x134>)
 8018c90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018c92:	4b1c      	ldr	r3, [pc, #112]	; (8018d04 <xPortStartScheduler+0x134>)
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018c9a:	4a1a      	ldr	r2, [pc, #104]	; (8018d04 <xPortStartScheduler+0x134>)
 8018c9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	b2da      	uxtb	r2, r3
 8018ca2:	697b      	ldr	r3, [r7, #20]
 8018ca4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018ca6:	4b18      	ldr	r3, [pc, #96]	; (8018d08 <xPortStartScheduler+0x138>)
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	4a17      	ldr	r2, [pc, #92]	; (8018d08 <xPortStartScheduler+0x138>)
 8018cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018cb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018cb2:	4b15      	ldr	r3, [pc, #84]	; (8018d08 <xPortStartScheduler+0x138>)
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	4a14      	ldr	r2, [pc, #80]	; (8018d08 <xPortStartScheduler+0x138>)
 8018cb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8018cbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8018cbe:	f000 f8dd 	bl	8018e7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018cc2:	4b12      	ldr	r3, [pc, #72]	; (8018d0c <xPortStartScheduler+0x13c>)
 8018cc4:	2200      	movs	r2, #0
 8018cc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018cc8:	f000 f8fc 	bl	8018ec4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018ccc:	4b10      	ldr	r3, [pc, #64]	; (8018d10 <xPortStartScheduler+0x140>)
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	4a0f      	ldr	r2, [pc, #60]	; (8018d10 <xPortStartScheduler+0x140>)
 8018cd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018cd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018cd8:	f7ff ff66 	bl	8018ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8018cdc:	f7fe ff70 	bl	8017bc0 <vTaskSwitchContext>
	prvTaskExitError();
 8018ce0:	f7ff ff20 	bl	8018b24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018ce4:	2300      	movs	r3, #0
}
 8018ce6:	4618      	mov	r0, r3
 8018ce8:	3718      	adds	r7, #24
 8018cea:	46bd      	mov	sp, r7
 8018cec:	bd80      	pop	{r7, pc}
 8018cee:	bf00      	nop
 8018cf0:	e000ed00 	.word	0xe000ed00
 8018cf4:	410fc271 	.word	0x410fc271
 8018cf8:	410fc270 	.word	0x410fc270
 8018cfc:	e000e400 	.word	0xe000e400
 8018d00:	24002d84 	.word	0x24002d84
 8018d04:	24002d88 	.word	0x24002d88
 8018d08:	e000ed20 	.word	0xe000ed20
 8018d0c:	240000cc 	.word	0x240000cc
 8018d10:	e000ef34 	.word	0xe000ef34

08018d14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8018d14:	b480      	push	{r7}
 8018d16:	b083      	sub	sp, #12
 8018d18:	af00      	add	r7, sp, #0
	__asm volatile
 8018d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d1e:	f383 8811 	msr	BASEPRI, r3
 8018d22:	f3bf 8f6f 	isb	sy
 8018d26:	f3bf 8f4f 	dsb	sy
 8018d2a:	607b      	str	r3, [r7, #4]
}
 8018d2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8018d2e:	4b0f      	ldr	r3, [pc, #60]	; (8018d6c <vPortEnterCritical+0x58>)
 8018d30:	681b      	ldr	r3, [r3, #0]
 8018d32:	3301      	adds	r3, #1
 8018d34:	4a0d      	ldr	r2, [pc, #52]	; (8018d6c <vPortEnterCritical+0x58>)
 8018d36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018d38:	4b0c      	ldr	r3, [pc, #48]	; (8018d6c <vPortEnterCritical+0x58>)
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	2b01      	cmp	r3, #1
 8018d3e:	d10f      	bne.n	8018d60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018d40:	4b0b      	ldr	r3, [pc, #44]	; (8018d70 <vPortEnterCritical+0x5c>)
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	b2db      	uxtb	r3, r3
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d00a      	beq.n	8018d60 <vPortEnterCritical+0x4c>
	__asm volatile
 8018d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d4e:	f383 8811 	msr	BASEPRI, r3
 8018d52:	f3bf 8f6f 	isb	sy
 8018d56:	f3bf 8f4f 	dsb	sy
 8018d5a:	603b      	str	r3, [r7, #0]
}
 8018d5c:	bf00      	nop
 8018d5e:	e7fe      	b.n	8018d5e <vPortEnterCritical+0x4a>
	}
}
 8018d60:	bf00      	nop
 8018d62:	370c      	adds	r7, #12
 8018d64:	46bd      	mov	sp, r7
 8018d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d6a:	4770      	bx	lr
 8018d6c:	240000cc 	.word	0x240000cc
 8018d70:	e000ed04 	.word	0xe000ed04

08018d74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018d74:	b480      	push	{r7}
 8018d76:	b083      	sub	sp, #12
 8018d78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8018d7a:	4b12      	ldr	r3, [pc, #72]	; (8018dc4 <vPortExitCritical+0x50>)
 8018d7c:	681b      	ldr	r3, [r3, #0]
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d10a      	bne.n	8018d98 <vPortExitCritical+0x24>
	__asm volatile
 8018d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d86:	f383 8811 	msr	BASEPRI, r3
 8018d8a:	f3bf 8f6f 	isb	sy
 8018d8e:	f3bf 8f4f 	dsb	sy
 8018d92:	607b      	str	r3, [r7, #4]
}
 8018d94:	bf00      	nop
 8018d96:	e7fe      	b.n	8018d96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8018d98:	4b0a      	ldr	r3, [pc, #40]	; (8018dc4 <vPortExitCritical+0x50>)
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	3b01      	subs	r3, #1
 8018d9e:	4a09      	ldr	r2, [pc, #36]	; (8018dc4 <vPortExitCritical+0x50>)
 8018da0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018da2:	4b08      	ldr	r3, [pc, #32]	; (8018dc4 <vPortExitCritical+0x50>)
 8018da4:	681b      	ldr	r3, [r3, #0]
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d105      	bne.n	8018db6 <vPortExitCritical+0x42>
 8018daa:	2300      	movs	r3, #0
 8018dac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018dae:	683b      	ldr	r3, [r7, #0]
 8018db0:	f383 8811 	msr	BASEPRI, r3
}
 8018db4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018db6:	bf00      	nop
 8018db8:	370c      	adds	r7, #12
 8018dba:	46bd      	mov	sp, r7
 8018dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dc0:	4770      	bx	lr
 8018dc2:	bf00      	nop
 8018dc4:	240000cc 	.word	0x240000cc
	...

08018dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018dd0:	f3ef 8009 	mrs	r0, PSP
 8018dd4:	f3bf 8f6f 	isb	sy
 8018dd8:	4b15      	ldr	r3, [pc, #84]	; (8018e30 <pxCurrentTCBConst>)
 8018dda:	681a      	ldr	r2, [r3, #0]
 8018ddc:	f01e 0f10 	tst.w	lr, #16
 8018de0:	bf08      	it	eq
 8018de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dea:	6010      	str	r0, [r2, #0]
 8018dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018df0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018df4:	f380 8811 	msr	BASEPRI, r0
 8018df8:	f3bf 8f4f 	dsb	sy
 8018dfc:	f3bf 8f6f 	isb	sy
 8018e00:	f7fe fede 	bl	8017bc0 <vTaskSwitchContext>
 8018e04:	f04f 0000 	mov.w	r0, #0
 8018e08:	f380 8811 	msr	BASEPRI, r0
 8018e0c:	bc09      	pop	{r0, r3}
 8018e0e:	6819      	ldr	r1, [r3, #0]
 8018e10:	6808      	ldr	r0, [r1, #0]
 8018e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e16:	f01e 0f10 	tst.w	lr, #16
 8018e1a:	bf08      	it	eq
 8018e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018e20:	f380 8809 	msr	PSP, r0
 8018e24:	f3bf 8f6f 	isb	sy
 8018e28:	4770      	bx	lr
 8018e2a:	bf00      	nop
 8018e2c:	f3af 8000 	nop.w

08018e30 <pxCurrentTCBConst>:
 8018e30:	24002758 	.word	0x24002758
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018e34:	bf00      	nop
 8018e36:	bf00      	nop

08018e38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018e38:	b580      	push	{r7, lr}
 8018e3a:	b082      	sub	sp, #8
 8018e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8018e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e42:	f383 8811 	msr	BASEPRI, r3
 8018e46:	f3bf 8f6f 	isb	sy
 8018e4a:	f3bf 8f4f 	dsb	sy
 8018e4e:	607b      	str	r3, [r7, #4]
}
 8018e50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018e52:	f7fe fdf3 	bl	8017a3c <xTaskIncrementTick>
 8018e56:	4603      	mov	r3, r0
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d003      	beq.n	8018e64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018e5c:	4b06      	ldr	r3, [pc, #24]	; (8018e78 <xPortSysTickHandler+0x40>)
 8018e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018e62:	601a      	str	r2, [r3, #0]
 8018e64:	2300      	movs	r3, #0
 8018e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018e68:	683b      	ldr	r3, [r7, #0]
 8018e6a:	f383 8811 	msr	BASEPRI, r3
}
 8018e6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018e70:	bf00      	nop
 8018e72:	3708      	adds	r7, #8
 8018e74:	46bd      	mov	sp, r7
 8018e76:	bd80      	pop	{r7, pc}
 8018e78:	e000ed04 	.word	0xe000ed04

08018e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8018e7c:	b480      	push	{r7}
 8018e7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018e80:	4b0b      	ldr	r3, [pc, #44]	; (8018eb0 <vPortSetupTimerInterrupt+0x34>)
 8018e82:	2200      	movs	r2, #0
 8018e84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018e86:	4b0b      	ldr	r3, [pc, #44]	; (8018eb4 <vPortSetupTimerInterrupt+0x38>)
 8018e88:	2200      	movs	r2, #0
 8018e8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018e8c:	4b0a      	ldr	r3, [pc, #40]	; (8018eb8 <vPortSetupTimerInterrupt+0x3c>)
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	4a0a      	ldr	r2, [pc, #40]	; (8018ebc <vPortSetupTimerInterrupt+0x40>)
 8018e92:	fba2 2303 	umull	r2, r3, r2, r3
 8018e96:	099b      	lsrs	r3, r3, #6
 8018e98:	4a09      	ldr	r2, [pc, #36]	; (8018ec0 <vPortSetupTimerInterrupt+0x44>)
 8018e9a:	3b01      	subs	r3, #1
 8018e9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018e9e:	4b04      	ldr	r3, [pc, #16]	; (8018eb0 <vPortSetupTimerInterrupt+0x34>)
 8018ea0:	2207      	movs	r2, #7
 8018ea2:	601a      	str	r2, [r3, #0]
}
 8018ea4:	bf00      	nop
 8018ea6:	46bd      	mov	sp, r7
 8018ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eac:	4770      	bx	lr
 8018eae:	bf00      	nop
 8018eb0:	e000e010 	.word	0xe000e010
 8018eb4:	e000e018 	.word	0xe000e018
 8018eb8:	240000bc 	.word	0x240000bc
 8018ebc:	10624dd3 	.word	0x10624dd3
 8018ec0:	e000e014 	.word	0xe000e014

08018ec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018ec4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018ed4 <vPortEnableVFP+0x10>
 8018ec8:	6801      	ldr	r1, [r0, #0]
 8018eca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018ece:	6001      	str	r1, [r0, #0]
 8018ed0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018ed2:	bf00      	nop
 8018ed4:	e000ed88 	.word	0xe000ed88

08018ed8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018ed8:	b480      	push	{r7}
 8018eda:	b085      	sub	sp, #20
 8018edc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018ede:	f3ef 8305 	mrs	r3, IPSR
 8018ee2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018ee4:	68fb      	ldr	r3, [r7, #12]
 8018ee6:	2b0f      	cmp	r3, #15
 8018ee8:	d914      	bls.n	8018f14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018eea:	4a17      	ldr	r2, [pc, #92]	; (8018f48 <vPortValidateInterruptPriority+0x70>)
 8018eec:	68fb      	ldr	r3, [r7, #12]
 8018eee:	4413      	add	r3, r2
 8018ef0:	781b      	ldrb	r3, [r3, #0]
 8018ef2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018ef4:	4b15      	ldr	r3, [pc, #84]	; (8018f4c <vPortValidateInterruptPriority+0x74>)
 8018ef6:	781b      	ldrb	r3, [r3, #0]
 8018ef8:	7afa      	ldrb	r2, [r7, #11]
 8018efa:	429a      	cmp	r2, r3
 8018efc:	d20a      	bcs.n	8018f14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8018efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f02:	f383 8811 	msr	BASEPRI, r3
 8018f06:	f3bf 8f6f 	isb	sy
 8018f0a:	f3bf 8f4f 	dsb	sy
 8018f0e:	607b      	str	r3, [r7, #4]
}
 8018f10:	bf00      	nop
 8018f12:	e7fe      	b.n	8018f12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018f14:	4b0e      	ldr	r3, [pc, #56]	; (8018f50 <vPortValidateInterruptPriority+0x78>)
 8018f16:	681b      	ldr	r3, [r3, #0]
 8018f18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8018f1c:	4b0d      	ldr	r3, [pc, #52]	; (8018f54 <vPortValidateInterruptPriority+0x7c>)
 8018f1e:	681b      	ldr	r3, [r3, #0]
 8018f20:	429a      	cmp	r2, r3
 8018f22:	d90a      	bls.n	8018f3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8018f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f28:	f383 8811 	msr	BASEPRI, r3
 8018f2c:	f3bf 8f6f 	isb	sy
 8018f30:	f3bf 8f4f 	dsb	sy
 8018f34:	603b      	str	r3, [r7, #0]
}
 8018f36:	bf00      	nop
 8018f38:	e7fe      	b.n	8018f38 <vPortValidateInterruptPriority+0x60>
	}
 8018f3a:	bf00      	nop
 8018f3c:	3714      	adds	r7, #20
 8018f3e:	46bd      	mov	sp, r7
 8018f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f44:	4770      	bx	lr
 8018f46:	bf00      	nop
 8018f48:	e000e3f0 	.word	0xe000e3f0
 8018f4c:	24002d84 	.word	0x24002d84
 8018f50:	e000ed0c 	.word	0xe000ed0c
 8018f54:	24002d88 	.word	0x24002d88

08018f58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018f58:	b580      	push	{r7, lr}
 8018f5a:	b08a      	sub	sp, #40	; 0x28
 8018f5c:	af00      	add	r7, sp, #0
 8018f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018f60:	2300      	movs	r3, #0
 8018f62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018f64:	f7fe fcae 	bl	80178c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018f68:	4b5b      	ldr	r3, [pc, #364]	; (80190d8 <pvPortMalloc+0x180>)
 8018f6a:	681b      	ldr	r3, [r3, #0]
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d101      	bne.n	8018f74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018f70:	f000 f920 	bl	80191b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018f74:	4b59      	ldr	r3, [pc, #356]	; (80190dc <pvPortMalloc+0x184>)
 8018f76:	681a      	ldr	r2, [r3, #0]
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	4013      	ands	r3, r2
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	f040 8093 	bne.w	80190a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d01d      	beq.n	8018fc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8018f88:	2208      	movs	r2, #8
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	4413      	add	r3, r2
 8018f8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	f003 0307 	and.w	r3, r3, #7
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d014      	beq.n	8018fc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	f023 0307 	bic.w	r3, r3, #7
 8018fa0:	3308      	adds	r3, #8
 8018fa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	f003 0307 	and.w	r3, r3, #7
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d00a      	beq.n	8018fc4 <pvPortMalloc+0x6c>
	__asm volatile
 8018fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fb2:	f383 8811 	msr	BASEPRI, r3
 8018fb6:	f3bf 8f6f 	isb	sy
 8018fba:	f3bf 8f4f 	dsb	sy
 8018fbe:	617b      	str	r3, [r7, #20]
}
 8018fc0:	bf00      	nop
 8018fc2:	e7fe      	b.n	8018fc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	2b00      	cmp	r3, #0
 8018fc8:	d06e      	beq.n	80190a8 <pvPortMalloc+0x150>
 8018fca:	4b45      	ldr	r3, [pc, #276]	; (80190e0 <pvPortMalloc+0x188>)
 8018fcc:	681b      	ldr	r3, [r3, #0]
 8018fce:	687a      	ldr	r2, [r7, #4]
 8018fd0:	429a      	cmp	r2, r3
 8018fd2:	d869      	bhi.n	80190a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018fd4:	4b43      	ldr	r3, [pc, #268]	; (80190e4 <pvPortMalloc+0x18c>)
 8018fd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018fd8:	4b42      	ldr	r3, [pc, #264]	; (80190e4 <pvPortMalloc+0x18c>)
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018fde:	e004      	b.n	8018fea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8018fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fe2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8018fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fec:	685b      	ldr	r3, [r3, #4]
 8018fee:	687a      	ldr	r2, [r7, #4]
 8018ff0:	429a      	cmp	r2, r3
 8018ff2:	d903      	bls.n	8018ffc <pvPortMalloc+0xa4>
 8018ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ff6:	681b      	ldr	r3, [r3, #0]
 8018ff8:	2b00      	cmp	r3, #0
 8018ffa:	d1f1      	bne.n	8018fe0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8018ffc:	4b36      	ldr	r3, [pc, #216]	; (80190d8 <pvPortMalloc+0x180>)
 8018ffe:	681b      	ldr	r3, [r3, #0]
 8019000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019002:	429a      	cmp	r2, r3
 8019004:	d050      	beq.n	80190a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019006:	6a3b      	ldr	r3, [r7, #32]
 8019008:	681b      	ldr	r3, [r3, #0]
 801900a:	2208      	movs	r2, #8
 801900c:	4413      	add	r3, r2
 801900e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019012:	681a      	ldr	r2, [r3, #0]
 8019014:	6a3b      	ldr	r3, [r7, #32]
 8019016:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801901a:	685a      	ldr	r2, [r3, #4]
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	1ad2      	subs	r2, r2, r3
 8019020:	2308      	movs	r3, #8
 8019022:	005b      	lsls	r3, r3, #1
 8019024:	429a      	cmp	r2, r3
 8019026:	d91f      	bls.n	8019068 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	4413      	add	r3, r2
 801902e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019030:	69bb      	ldr	r3, [r7, #24]
 8019032:	f003 0307 	and.w	r3, r3, #7
 8019036:	2b00      	cmp	r3, #0
 8019038:	d00a      	beq.n	8019050 <pvPortMalloc+0xf8>
	__asm volatile
 801903a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801903e:	f383 8811 	msr	BASEPRI, r3
 8019042:	f3bf 8f6f 	isb	sy
 8019046:	f3bf 8f4f 	dsb	sy
 801904a:	613b      	str	r3, [r7, #16]
}
 801904c:	bf00      	nop
 801904e:	e7fe      	b.n	801904e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019052:	685a      	ldr	r2, [r3, #4]
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	1ad2      	subs	r2, r2, r3
 8019058:	69bb      	ldr	r3, [r7, #24]
 801905a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801905e:	687a      	ldr	r2, [r7, #4]
 8019060:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019062:	69b8      	ldr	r0, [r7, #24]
 8019064:	f000 f908 	bl	8019278 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019068:	4b1d      	ldr	r3, [pc, #116]	; (80190e0 <pvPortMalloc+0x188>)
 801906a:	681a      	ldr	r2, [r3, #0]
 801906c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801906e:	685b      	ldr	r3, [r3, #4]
 8019070:	1ad3      	subs	r3, r2, r3
 8019072:	4a1b      	ldr	r2, [pc, #108]	; (80190e0 <pvPortMalloc+0x188>)
 8019074:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019076:	4b1a      	ldr	r3, [pc, #104]	; (80190e0 <pvPortMalloc+0x188>)
 8019078:	681a      	ldr	r2, [r3, #0]
 801907a:	4b1b      	ldr	r3, [pc, #108]	; (80190e8 <pvPortMalloc+0x190>)
 801907c:	681b      	ldr	r3, [r3, #0]
 801907e:	429a      	cmp	r2, r3
 8019080:	d203      	bcs.n	801908a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019082:	4b17      	ldr	r3, [pc, #92]	; (80190e0 <pvPortMalloc+0x188>)
 8019084:	681b      	ldr	r3, [r3, #0]
 8019086:	4a18      	ldr	r2, [pc, #96]	; (80190e8 <pvPortMalloc+0x190>)
 8019088:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801908a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801908c:	685a      	ldr	r2, [r3, #4]
 801908e:	4b13      	ldr	r3, [pc, #76]	; (80190dc <pvPortMalloc+0x184>)
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	431a      	orrs	r2, r3
 8019094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019096:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801909a:	2200      	movs	r2, #0
 801909c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801909e:	4b13      	ldr	r3, [pc, #76]	; (80190ec <pvPortMalloc+0x194>)
 80190a0:	681b      	ldr	r3, [r3, #0]
 80190a2:	3301      	adds	r3, #1
 80190a4:	4a11      	ldr	r2, [pc, #68]	; (80190ec <pvPortMalloc+0x194>)
 80190a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80190a8:	f7fe fc1a 	bl	80178e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80190ac:	69fb      	ldr	r3, [r7, #28]
 80190ae:	f003 0307 	and.w	r3, r3, #7
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	d00a      	beq.n	80190cc <pvPortMalloc+0x174>
	__asm volatile
 80190b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190ba:	f383 8811 	msr	BASEPRI, r3
 80190be:	f3bf 8f6f 	isb	sy
 80190c2:	f3bf 8f4f 	dsb	sy
 80190c6:	60fb      	str	r3, [r7, #12]
}
 80190c8:	bf00      	nop
 80190ca:	e7fe      	b.n	80190ca <pvPortMalloc+0x172>
	return pvReturn;
 80190cc:	69fb      	ldr	r3, [r7, #28]
}
 80190ce:	4618      	mov	r0, r3
 80190d0:	3728      	adds	r7, #40	; 0x28
 80190d2:	46bd      	mov	sp, r7
 80190d4:	bd80      	pop	{r7, pc}
 80190d6:	bf00      	nop
 80190d8:	24006994 	.word	0x24006994
 80190dc:	240069a8 	.word	0x240069a8
 80190e0:	24006998 	.word	0x24006998
 80190e4:	2400698c 	.word	0x2400698c
 80190e8:	2400699c 	.word	0x2400699c
 80190ec:	240069a0 	.word	0x240069a0

080190f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80190f0:	b580      	push	{r7, lr}
 80190f2:	b086      	sub	sp, #24
 80190f4:	af00      	add	r7, sp, #0
 80190f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d04d      	beq.n	801919e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019102:	2308      	movs	r3, #8
 8019104:	425b      	negs	r3, r3
 8019106:	697a      	ldr	r2, [r7, #20]
 8019108:	4413      	add	r3, r2
 801910a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801910c:	697b      	ldr	r3, [r7, #20]
 801910e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019110:	693b      	ldr	r3, [r7, #16]
 8019112:	685a      	ldr	r2, [r3, #4]
 8019114:	4b24      	ldr	r3, [pc, #144]	; (80191a8 <vPortFree+0xb8>)
 8019116:	681b      	ldr	r3, [r3, #0]
 8019118:	4013      	ands	r3, r2
 801911a:	2b00      	cmp	r3, #0
 801911c:	d10a      	bne.n	8019134 <vPortFree+0x44>
	__asm volatile
 801911e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019122:	f383 8811 	msr	BASEPRI, r3
 8019126:	f3bf 8f6f 	isb	sy
 801912a:	f3bf 8f4f 	dsb	sy
 801912e:	60fb      	str	r3, [r7, #12]
}
 8019130:	bf00      	nop
 8019132:	e7fe      	b.n	8019132 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019134:	693b      	ldr	r3, [r7, #16]
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	2b00      	cmp	r3, #0
 801913a:	d00a      	beq.n	8019152 <vPortFree+0x62>
	__asm volatile
 801913c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019140:	f383 8811 	msr	BASEPRI, r3
 8019144:	f3bf 8f6f 	isb	sy
 8019148:	f3bf 8f4f 	dsb	sy
 801914c:	60bb      	str	r3, [r7, #8]
}
 801914e:	bf00      	nop
 8019150:	e7fe      	b.n	8019150 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019152:	693b      	ldr	r3, [r7, #16]
 8019154:	685a      	ldr	r2, [r3, #4]
 8019156:	4b14      	ldr	r3, [pc, #80]	; (80191a8 <vPortFree+0xb8>)
 8019158:	681b      	ldr	r3, [r3, #0]
 801915a:	4013      	ands	r3, r2
 801915c:	2b00      	cmp	r3, #0
 801915e:	d01e      	beq.n	801919e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019160:	693b      	ldr	r3, [r7, #16]
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	2b00      	cmp	r3, #0
 8019166:	d11a      	bne.n	801919e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019168:	693b      	ldr	r3, [r7, #16]
 801916a:	685a      	ldr	r2, [r3, #4]
 801916c:	4b0e      	ldr	r3, [pc, #56]	; (80191a8 <vPortFree+0xb8>)
 801916e:	681b      	ldr	r3, [r3, #0]
 8019170:	43db      	mvns	r3, r3
 8019172:	401a      	ands	r2, r3
 8019174:	693b      	ldr	r3, [r7, #16]
 8019176:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019178:	f7fe fba4 	bl	80178c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801917c:	693b      	ldr	r3, [r7, #16]
 801917e:	685a      	ldr	r2, [r3, #4]
 8019180:	4b0a      	ldr	r3, [pc, #40]	; (80191ac <vPortFree+0xbc>)
 8019182:	681b      	ldr	r3, [r3, #0]
 8019184:	4413      	add	r3, r2
 8019186:	4a09      	ldr	r2, [pc, #36]	; (80191ac <vPortFree+0xbc>)
 8019188:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801918a:	6938      	ldr	r0, [r7, #16]
 801918c:	f000 f874 	bl	8019278 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019190:	4b07      	ldr	r3, [pc, #28]	; (80191b0 <vPortFree+0xc0>)
 8019192:	681b      	ldr	r3, [r3, #0]
 8019194:	3301      	adds	r3, #1
 8019196:	4a06      	ldr	r2, [pc, #24]	; (80191b0 <vPortFree+0xc0>)
 8019198:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801919a:	f7fe fba1 	bl	80178e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801919e:	bf00      	nop
 80191a0:	3718      	adds	r7, #24
 80191a2:	46bd      	mov	sp, r7
 80191a4:	bd80      	pop	{r7, pc}
 80191a6:	bf00      	nop
 80191a8:	240069a8 	.word	0x240069a8
 80191ac:	24006998 	.word	0x24006998
 80191b0:	240069a4 	.word	0x240069a4

080191b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80191b4:	b480      	push	{r7}
 80191b6:	b085      	sub	sp, #20
 80191b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80191ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80191be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80191c0:	4b27      	ldr	r3, [pc, #156]	; (8019260 <prvHeapInit+0xac>)
 80191c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80191c4:	68fb      	ldr	r3, [r7, #12]
 80191c6:	f003 0307 	and.w	r3, r3, #7
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d00c      	beq.n	80191e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80191ce:	68fb      	ldr	r3, [r7, #12]
 80191d0:	3307      	adds	r3, #7
 80191d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80191d4:	68fb      	ldr	r3, [r7, #12]
 80191d6:	f023 0307 	bic.w	r3, r3, #7
 80191da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80191dc:	68ba      	ldr	r2, [r7, #8]
 80191de:	68fb      	ldr	r3, [r7, #12]
 80191e0:	1ad3      	subs	r3, r2, r3
 80191e2:	4a1f      	ldr	r2, [pc, #124]	; (8019260 <prvHeapInit+0xac>)
 80191e4:	4413      	add	r3, r2
 80191e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80191e8:	68fb      	ldr	r3, [r7, #12]
 80191ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80191ec:	4a1d      	ldr	r2, [pc, #116]	; (8019264 <prvHeapInit+0xb0>)
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80191f2:	4b1c      	ldr	r3, [pc, #112]	; (8019264 <prvHeapInit+0xb0>)
 80191f4:	2200      	movs	r2, #0
 80191f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	68ba      	ldr	r2, [r7, #8]
 80191fc:	4413      	add	r3, r2
 80191fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019200:	2208      	movs	r2, #8
 8019202:	68fb      	ldr	r3, [r7, #12]
 8019204:	1a9b      	subs	r3, r3, r2
 8019206:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019208:	68fb      	ldr	r3, [r7, #12]
 801920a:	f023 0307 	bic.w	r3, r3, #7
 801920e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019210:	68fb      	ldr	r3, [r7, #12]
 8019212:	4a15      	ldr	r2, [pc, #84]	; (8019268 <prvHeapInit+0xb4>)
 8019214:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019216:	4b14      	ldr	r3, [pc, #80]	; (8019268 <prvHeapInit+0xb4>)
 8019218:	681b      	ldr	r3, [r3, #0]
 801921a:	2200      	movs	r2, #0
 801921c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801921e:	4b12      	ldr	r3, [pc, #72]	; (8019268 <prvHeapInit+0xb4>)
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	2200      	movs	r2, #0
 8019224:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801922a:	683b      	ldr	r3, [r7, #0]
 801922c:	68fa      	ldr	r2, [r7, #12]
 801922e:	1ad2      	subs	r2, r2, r3
 8019230:	683b      	ldr	r3, [r7, #0]
 8019232:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019234:	4b0c      	ldr	r3, [pc, #48]	; (8019268 <prvHeapInit+0xb4>)
 8019236:	681a      	ldr	r2, [r3, #0]
 8019238:	683b      	ldr	r3, [r7, #0]
 801923a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801923c:	683b      	ldr	r3, [r7, #0]
 801923e:	685b      	ldr	r3, [r3, #4]
 8019240:	4a0a      	ldr	r2, [pc, #40]	; (801926c <prvHeapInit+0xb8>)
 8019242:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019244:	683b      	ldr	r3, [r7, #0]
 8019246:	685b      	ldr	r3, [r3, #4]
 8019248:	4a09      	ldr	r2, [pc, #36]	; (8019270 <prvHeapInit+0xbc>)
 801924a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801924c:	4b09      	ldr	r3, [pc, #36]	; (8019274 <prvHeapInit+0xc0>)
 801924e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019252:	601a      	str	r2, [r3, #0]
}
 8019254:	bf00      	nop
 8019256:	3714      	adds	r7, #20
 8019258:	46bd      	mov	sp, r7
 801925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801925e:	4770      	bx	lr
 8019260:	24002d8c 	.word	0x24002d8c
 8019264:	2400698c 	.word	0x2400698c
 8019268:	24006994 	.word	0x24006994
 801926c:	2400699c 	.word	0x2400699c
 8019270:	24006998 	.word	0x24006998
 8019274:	240069a8 	.word	0x240069a8

08019278 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019278:	b480      	push	{r7}
 801927a:	b085      	sub	sp, #20
 801927c:	af00      	add	r7, sp, #0
 801927e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019280:	4b28      	ldr	r3, [pc, #160]	; (8019324 <prvInsertBlockIntoFreeList+0xac>)
 8019282:	60fb      	str	r3, [r7, #12]
 8019284:	e002      	b.n	801928c <prvInsertBlockIntoFreeList+0x14>
 8019286:	68fb      	ldr	r3, [r7, #12]
 8019288:	681b      	ldr	r3, [r3, #0]
 801928a:	60fb      	str	r3, [r7, #12]
 801928c:	68fb      	ldr	r3, [r7, #12]
 801928e:	681b      	ldr	r3, [r3, #0]
 8019290:	687a      	ldr	r2, [r7, #4]
 8019292:	429a      	cmp	r2, r3
 8019294:	d8f7      	bhi.n	8019286 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019296:	68fb      	ldr	r3, [r7, #12]
 8019298:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801929a:	68fb      	ldr	r3, [r7, #12]
 801929c:	685b      	ldr	r3, [r3, #4]
 801929e:	68ba      	ldr	r2, [r7, #8]
 80192a0:	4413      	add	r3, r2
 80192a2:	687a      	ldr	r2, [r7, #4]
 80192a4:	429a      	cmp	r2, r3
 80192a6:	d108      	bne.n	80192ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80192a8:	68fb      	ldr	r3, [r7, #12]
 80192aa:	685a      	ldr	r2, [r3, #4]
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	685b      	ldr	r3, [r3, #4]
 80192b0:	441a      	add	r2, r3
 80192b2:	68fb      	ldr	r3, [r7, #12]
 80192b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80192b6:	68fb      	ldr	r3, [r7, #12]
 80192b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	685b      	ldr	r3, [r3, #4]
 80192c2:	68ba      	ldr	r2, [r7, #8]
 80192c4:	441a      	add	r2, r3
 80192c6:	68fb      	ldr	r3, [r7, #12]
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	429a      	cmp	r2, r3
 80192cc:	d118      	bne.n	8019300 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80192ce:	68fb      	ldr	r3, [r7, #12]
 80192d0:	681a      	ldr	r2, [r3, #0]
 80192d2:	4b15      	ldr	r3, [pc, #84]	; (8019328 <prvInsertBlockIntoFreeList+0xb0>)
 80192d4:	681b      	ldr	r3, [r3, #0]
 80192d6:	429a      	cmp	r2, r3
 80192d8:	d00d      	beq.n	80192f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	685a      	ldr	r2, [r3, #4]
 80192de:	68fb      	ldr	r3, [r7, #12]
 80192e0:	681b      	ldr	r3, [r3, #0]
 80192e2:	685b      	ldr	r3, [r3, #4]
 80192e4:	441a      	add	r2, r3
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80192ea:	68fb      	ldr	r3, [r7, #12]
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	681a      	ldr	r2, [r3, #0]
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	601a      	str	r2, [r3, #0]
 80192f4:	e008      	b.n	8019308 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80192f6:	4b0c      	ldr	r3, [pc, #48]	; (8019328 <prvInsertBlockIntoFreeList+0xb0>)
 80192f8:	681a      	ldr	r2, [r3, #0]
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	601a      	str	r2, [r3, #0]
 80192fe:	e003      	b.n	8019308 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019300:	68fb      	ldr	r3, [r7, #12]
 8019302:	681a      	ldr	r2, [r3, #0]
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019308:	68fa      	ldr	r2, [r7, #12]
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	429a      	cmp	r2, r3
 801930e:	d002      	beq.n	8019316 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019310:	68fb      	ldr	r3, [r7, #12]
 8019312:	687a      	ldr	r2, [r7, #4]
 8019314:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019316:	bf00      	nop
 8019318:	3714      	adds	r7, #20
 801931a:	46bd      	mov	sp, r7
 801931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019320:	4770      	bx	lr
 8019322:	bf00      	nop
 8019324:	2400698c 	.word	0x2400698c
 8019328:	24006994 	.word	0x24006994

0801932c <__errno>:
 801932c:	4b01      	ldr	r3, [pc, #4]	; (8019334 <__errno+0x8>)
 801932e:	6818      	ldr	r0, [r3, #0]
 8019330:	4770      	bx	lr
 8019332:	bf00      	nop
 8019334:	240000d0 	.word	0x240000d0

08019338 <__libc_init_array>:
 8019338:	b570      	push	{r4, r5, r6, lr}
 801933a:	4d0d      	ldr	r5, [pc, #52]	; (8019370 <__libc_init_array+0x38>)
 801933c:	4c0d      	ldr	r4, [pc, #52]	; (8019374 <__libc_init_array+0x3c>)
 801933e:	1b64      	subs	r4, r4, r5
 8019340:	10a4      	asrs	r4, r4, #2
 8019342:	2600      	movs	r6, #0
 8019344:	42a6      	cmp	r6, r4
 8019346:	d109      	bne.n	801935c <__libc_init_array+0x24>
 8019348:	4d0b      	ldr	r5, [pc, #44]	; (8019378 <__libc_init_array+0x40>)
 801934a:	4c0c      	ldr	r4, [pc, #48]	; (801937c <__libc_init_array+0x44>)
 801934c:	f000 fd2c 	bl	8019da8 <_init>
 8019350:	1b64      	subs	r4, r4, r5
 8019352:	10a4      	asrs	r4, r4, #2
 8019354:	2600      	movs	r6, #0
 8019356:	42a6      	cmp	r6, r4
 8019358:	d105      	bne.n	8019366 <__libc_init_array+0x2e>
 801935a:	bd70      	pop	{r4, r5, r6, pc}
 801935c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019360:	4798      	blx	r3
 8019362:	3601      	adds	r6, #1
 8019364:	e7ee      	b.n	8019344 <__libc_init_array+0xc>
 8019366:	f855 3b04 	ldr.w	r3, [r5], #4
 801936a:	4798      	blx	r3
 801936c:	3601      	adds	r6, #1
 801936e:	e7f2      	b.n	8019356 <__libc_init_array+0x1e>
 8019370:	0801a260 	.word	0x0801a260
 8019374:	0801a260 	.word	0x0801a260
 8019378:	0801a260 	.word	0x0801a260
 801937c:	0801a264 	.word	0x0801a264

08019380 <memcpy>:
 8019380:	440a      	add	r2, r1
 8019382:	4291      	cmp	r1, r2
 8019384:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019388:	d100      	bne.n	801938c <memcpy+0xc>
 801938a:	4770      	bx	lr
 801938c:	b510      	push	{r4, lr}
 801938e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019392:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019396:	4291      	cmp	r1, r2
 8019398:	d1f9      	bne.n	801938e <memcpy+0xe>
 801939a:	bd10      	pop	{r4, pc}

0801939c <memset>:
 801939c:	4402      	add	r2, r0
 801939e:	4603      	mov	r3, r0
 80193a0:	4293      	cmp	r3, r2
 80193a2:	d100      	bne.n	80193a6 <memset+0xa>
 80193a4:	4770      	bx	lr
 80193a6:	f803 1b01 	strb.w	r1, [r3], #1
 80193aa:	e7f9      	b.n	80193a0 <memset+0x4>

080193ac <_puts_r>:
 80193ac:	b570      	push	{r4, r5, r6, lr}
 80193ae:	460e      	mov	r6, r1
 80193b0:	4605      	mov	r5, r0
 80193b2:	b118      	cbz	r0, 80193bc <_puts_r+0x10>
 80193b4:	6983      	ldr	r3, [r0, #24]
 80193b6:	b90b      	cbnz	r3, 80193bc <_puts_r+0x10>
 80193b8:	f000 fa48 	bl	801984c <__sinit>
 80193bc:	69ab      	ldr	r3, [r5, #24]
 80193be:	68ac      	ldr	r4, [r5, #8]
 80193c0:	b913      	cbnz	r3, 80193c8 <_puts_r+0x1c>
 80193c2:	4628      	mov	r0, r5
 80193c4:	f000 fa42 	bl	801984c <__sinit>
 80193c8:	4b2c      	ldr	r3, [pc, #176]	; (801947c <_puts_r+0xd0>)
 80193ca:	429c      	cmp	r4, r3
 80193cc:	d120      	bne.n	8019410 <_puts_r+0x64>
 80193ce:	686c      	ldr	r4, [r5, #4]
 80193d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80193d2:	07db      	lsls	r3, r3, #31
 80193d4:	d405      	bmi.n	80193e2 <_puts_r+0x36>
 80193d6:	89a3      	ldrh	r3, [r4, #12]
 80193d8:	0598      	lsls	r0, r3, #22
 80193da:	d402      	bmi.n	80193e2 <_puts_r+0x36>
 80193dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80193de:	f000 fad3 	bl	8019988 <__retarget_lock_acquire_recursive>
 80193e2:	89a3      	ldrh	r3, [r4, #12]
 80193e4:	0719      	lsls	r1, r3, #28
 80193e6:	d51d      	bpl.n	8019424 <_puts_r+0x78>
 80193e8:	6923      	ldr	r3, [r4, #16]
 80193ea:	b1db      	cbz	r3, 8019424 <_puts_r+0x78>
 80193ec:	3e01      	subs	r6, #1
 80193ee:	68a3      	ldr	r3, [r4, #8]
 80193f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80193f4:	3b01      	subs	r3, #1
 80193f6:	60a3      	str	r3, [r4, #8]
 80193f8:	bb39      	cbnz	r1, 801944a <_puts_r+0x9e>
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	da38      	bge.n	8019470 <_puts_r+0xc4>
 80193fe:	4622      	mov	r2, r4
 8019400:	210a      	movs	r1, #10
 8019402:	4628      	mov	r0, r5
 8019404:	f000 f848 	bl	8019498 <__swbuf_r>
 8019408:	3001      	adds	r0, #1
 801940a:	d011      	beq.n	8019430 <_puts_r+0x84>
 801940c:	250a      	movs	r5, #10
 801940e:	e011      	b.n	8019434 <_puts_r+0x88>
 8019410:	4b1b      	ldr	r3, [pc, #108]	; (8019480 <_puts_r+0xd4>)
 8019412:	429c      	cmp	r4, r3
 8019414:	d101      	bne.n	801941a <_puts_r+0x6e>
 8019416:	68ac      	ldr	r4, [r5, #8]
 8019418:	e7da      	b.n	80193d0 <_puts_r+0x24>
 801941a:	4b1a      	ldr	r3, [pc, #104]	; (8019484 <_puts_r+0xd8>)
 801941c:	429c      	cmp	r4, r3
 801941e:	bf08      	it	eq
 8019420:	68ec      	ldreq	r4, [r5, #12]
 8019422:	e7d5      	b.n	80193d0 <_puts_r+0x24>
 8019424:	4621      	mov	r1, r4
 8019426:	4628      	mov	r0, r5
 8019428:	f000 f888 	bl	801953c <__swsetup_r>
 801942c:	2800      	cmp	r0, #0
 801942e:	d0dd      	beq.n	80193ec <_puts_r+0x40>
 8019430:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8019434:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019436:	07da      	lsls	r2, r3, #31
 8019438:	d405      	bmi.n	8019446 <_puts_r+0x9a>
 801943a:	89a3      	ldrh	r3, [r4, #12]
 801943c:	059b      	lsls	r3, r3, #22
 801943e:	d402      	bmi.n	8019446 <_puts_r+0x9a>
 8019440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019442:	f000 faa2 	bl	801998a <__retarget_lock_release_recursive>
 8019446:	4628      	mov	r0, r5
 8019448:	bd70      	pop	{r4, r5, r6, pc}
 801944a:	2b00      	cmp	r3, #0
 801944c:	da04      	bge.n	8019458 <_puts_r+0xac>
 801944e:	69a2      	ldr	r2, [r4, #24]
 8019450:	429a      	cmp	r2, r3
 8019452:	dc06      	bgt.n	8019462 <_puts_r+0xb6>
 8019454:	290a      	cmp	r1, #10
 8019456:	d004      	beq.n	8019462 <_puts_r+0xb6>
 8019458:	6823      	ldr	r3, [r4, #0]
 801945a:	1c5a      	adds	r2, r3, #1
 801945c:	6022      	str	r2, [r4, #0]
 801945e:	7019      	strb	r1, [r3, #0]
 8019460:	e7c5      	b.n	80193ee <_puts_r+0x42>
 8019462:	4622      	mov	r2, r4
 8019464:	4628      	mov	r0, r5
 8019466:	f000 f817 	bl	8019498 <__swbuf_r>
 801946a:	3001      	adds	r0, #1
 801946c:	d1bf      	bne.n	80193ee <_puts_r+0x42>
 801946e:	e7df      	b.n	8019430 <_puts_r+0x84>
 8019470:	6823      	ldr	r3, [r4, #0]
 8019472:	250a      	movs	r5, #10
 8019474:	1c5a      	adds	r2, r3, #1
 8019476:	6022      	str	r2, [r4, #0]
 8019478:	701d      	strb	r5, [r3, #0]
 801947a:	e7db      	b.n	8019434 <_puts_r+0x88>
 801947c:	0801a218 	.word	0x0801a218
 8019480:	0801a238 	.word	0x0801a238
 8019484:	0801a1f8 	.word	0x0801a1f8

08019488 <puts>:
 8019488:	4b02      	ldr	r3, [pc, #8]	; (8019494 <puts+0xc>)
 801948a:	4601      	mov	r1, r0
 801948c:	6818      	ldr	r0, [r3, #0]
 801948e:	f7ff bf8d 	b.w	80193ac <_puts_r>
 8019492:	bf00      	nop
 8019494:	240000d0 	.word	0x240000d0

08019498 <__swbuf_r>:
 8019498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801949a:	460e      	mov	r6, r1
 801949c:	4614      	mov	r4, r2
 801949e:	4605      	mov	r5, r0
 80194a0:	b118      	cbz	r0, 80194aa <__swbuf_r+0x12>
 80194a2:	6983      	ldr	r3, [r0, #24]
 80194a4:	b90b      	cbnz	r3, 80194aa <__swbuf_r+0x12>
 80194a6:	f000 f9d1 	bl	801984c <__sinit>
 80194aa:	4b21      	ldr	r3, [pc, #132]	; (8019530 <__swbuf_r+0x98>)
 80194ac:	429c      	cmp	r4, r3
 80194ae:	d12b      	bne.n	8019508 <__swbuf_r+0x70>
 80194b0:	686c      	ldr	r4, [r5, #4]
 80194b2:	69a3      	ldr	r3, [r4, #24]
 80194b4:	60a3      	str	r3, [r4, #8]
 80194b6:	89a3      	ldrh	r3, [r4, #12]
 80194b8:	071a      	lsls	r2, r3, #28
 80194ba:	d52f      	bpl.n	801951c <__swbuf_r+0x84>
 80194bc:	6923      	ldr	r3, [r4, #16]
 80194be:	b36b      	cbz	r3, 801951c <__swbuf_r+0x84>
 80194c0:	6923      	ldr	r3, [r4, #16]
 80194c2:	6820      	ldr	r0, [r4, #0]
 80194c4:	1ac0      	subs	r0, r0, r3
 80194c6:	6963      	ldr	r3, [r4, #20]
 80194c8:	b2f6      	uxtb	r6, r6
 80194ca:	4283      	cmp	r3, r0
 80194cc:	4637      	mov	r7, r6
 80194ce:	dc04      	bgt.n	80194da <__swbuf_r+0x42>
 80194d0:	4621      	mov	r1, r4
 80194d2:	4628      	mov	r0, r5
 80194d4:	f000 f926 	bl	8019724 <_fflush_r>
 80194d8:	bb30      	cbnz	r0, 8019528 <__swbuf_r+0x90>
 80194da:	68a3      	ldr	r3, [r4, #8]
 80194dc:	3b01      	subs	r3, #1
 80194de:	60a3      	str	r3, [r4, #8]
 80194e0:	6823      	ldr	r3, [r4, #0]
 80194e2:	1c5a      	adds	r2, r3, #1
 80194e4:	6022      	str	r2, [r4, #0]
 80194e6:	701e      	strb	r6, [r3, #0]
 80194e8:	6963      	ldr	r3, [r4, #20]
 80194ea:	3001      	adds	r0, #1
 80194ec:	4283      	cmp	r3, r0
 80194ee:	d004      	beq.n	80194fa <__swbuf_r+0x62>
 80194f0:	89a3      	ldrh	r3, [r4, #12]
 80194f2:	07db      	lsls	r3, r3, #31
 80194f4:	d506      	bpl.n	8019504 <__swbuf_r+0x6c>
 80194f6:	2e0a      	cmp	r6, #10
 80194f8:	d104      	bne.n	8019504 <__swbuf_r+0x6c>
 80194fa:	4621      	mov	r1, r4
 80194fc:	4628      	mov	r0, r5
 80194fe:	f000 f911 	bl	8019724 <_fflush_r>
 8019502:	b988      	cbnz	r0, 8019528 <__swbuf_r+0x90>
 8019504:	4638      	mov	r0, r7
 8019506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019508:	4b0a      	ldr	r3, [pc, #40]	; (8019534 <__swbuf_r+0x9c>)
 801950a:	429c      	cmp	r4, r3
 801950c:	d101      	bne.n	8019512 <__swbuf_r+0x7a>
 801950e:	68ac      	ldr	r4, [r5, #8]
 8019510:	e7cf      	b.n	80194b2 <__swbuf_r+0x1a>
 8019512:	4b09      	ldr	r3, [pc, #36]	; (8019538 <__swbuf_r+0xa0>)
 8019514:	429c      	cmp	r4, r3
 8019516:	bf08      	it	eq
 8019518:	68ec      	ldreq	r4, [r5, #12]
 801951a:	e7ca      	b.n	80194b2 <__swbuf_r+0x1a>
 801951c:	4621      	mov	r1, r4
 801951e:	4628      	mov	r0, r5
 8019520:	f000 f80c 	bl	801953c <__swsetup_r>
 8019524:	2800      	cmp	r0, #0
 8019526:	d0cb      	beq.n	80194c0 <__swbuf_r+0x28>
 8019528:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801952c:	e7ea      	b.n	8019504 <__swbuf_r+0x6c>
 801952e:	bf00      	nop
 8019530:	0801a218 	.word	0x0801a218
 8019534:	0801a238 	.word	0x0801a238
 8019538:	0801a1f8 	.word	0x0801a1f8

0801953c <__swsetup_r>:
 801953c:	4b32      	ldr	r3, [pc, #200]	; (8019608 <__swsetup_r+0xcc>)
 801953e:	b570      	push	{r4, r5, r6, lr}
 8019540:	681d      	ldr	r5, [r3, #0]
 8019542:	4606      	mov	r6, r0
 8019544:	460c      	mov	r4, r1
 8019546:	b125      	cbz	r5, 8019552 <__swsetup_r+0x16>
 8019548:	69ab      	ldr	r3, [r5, #24]
 801954a:	b913      	cbnz	r3, 8019552 <__swsetup_r+0x16>
 801954c:	4628      	mov	r0, r5
 801954e:	f000 f97d 	bl	801984c <__sinit>
 8019552:	4b2e      	ldr	r3, [pc, #184]	; (801960c <__swsetup_r+0xd0>)
 8019554:	429c      	cmp	r4, r3
 8019556:	d10f      	bne.n	8019578 <__swsetup_r+0x3c>
 8019558:	686c      	ldr	r4, [r5, #4]
 801955a:	89a3      	ldrh	r3, [r4, #12]
 801955c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019560:	0719      	lsls	r1, r3, #28
 8019562:	d42c      	bmi.n	80195be <__swsetup_r+0x82>
 8019564:	06dd      	lsls	r5, r3, #27
 8019566:	d411      	bmi.n	801958c <__swsetup_r+0x50>
 8019568:	2309      	movs	r3, #9
 801956a:	6033      	str	r3, [r6, #0]
 801956c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019570:	81a3      	strh	r3, [r4, #12]
 8019572:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019576:	e03e      	b.n	80195f6 <__swsetup_r+0xba>
 8019578:	4b25      	ldr	r3, [pc, #148]	; (8019610 <__swsetup_r+0xd4>)
 801957a:	429c      	cmp	r4, r3
 801957c:	d101      	bne.n	8019582 <__swsetup_r+0x46>
 801957e:	68ac      	ldr	r4, [r5, #8]
 8019580:	e7eb      	b.n	801955a <__swsetup_r+0x1e>
 8019582:	4b24      	ldr	r3, [pc, #144]	; (8019614 <__swsetup_r+0xd8>)
 8019584:	429c      	cmp	r4, r3
 8019586:	bf08      	it	eq
 8019588:	68ec      	ldreq	r4, [r5, #12]
 801958a:	e7e6      	b.n	801955a <__swsetup_r+0x1e>
 801958c:	0758      	lsls	r0, r3, #29
 801958e:	d512      	bpl.n	80195b6 <__swsetup_r+0x7a>
 8019590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019592:	b141      	cbz	r1, 80195a6 <__swsetup_r+0x6a>
 8019594:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019598:	4299      	cmp	r1, r3
 801959a:	d002      	beq.n	80195a2 <__swsetup_r+0x66>
 801959c:	4630      	mov	r0, r6
 801959e:	f000 fa5b 	bl	8019a58 <_free_r>
 80195a2:	2300      	movs	r3, #0
 80195a4:	6363      	str	r3, [r4, #52]	; 0x34
 80195a6:	89a3      	ldrh	r3, [r4, #12]
 80195a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80195ac:	81a3      	strh	r3, [r4, #12]
 80195ae:	2300      	movs	r3, #0
 80195b0:	6063      	str	r3, [r4, #4]
 80195b2:	6923      	ldr	r3, [r4, #16]
 80195b4:	6023      	str	r3, [r4, #0]
 80195b6:	89a3      	ldrh	r3, [r4, #12]
 80195b8:	f043 0308 	orr.w	r3, r3, #8
 80195bc:	81a3      	strh	r3, [r4, #12]
 80195be:	6923      	ldr	r3, [r4, #16]
 80195c0:	b94b      	cbnz	r3, 80195d6 <__swsetup_r+0x9a>
 80195c2:	89a3      	ldrh	r3, [r4, #12]
 80195c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80195c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80195cc:	d003      	beq.n	80195d6 <__swsetup_r+0x9a>
 80195ce:	4621      	mov	r1, r4
 80195d0:	4630      	mov	r0, r6
 80195d2:	f000 fa01 	bl	80199d8 <__smakebuf_r>
 80195d6:	89a0      	ldrh	r0, [r4, #12]
 80195d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80195dc:	f010 0301 	ands.w	r3, r0, #1
 80195e0:	d00a      	beq.n	80195f8 <__swsetup_r+0xbc>
 80195e2:	2300      	movs	r3, #0
 80195e4:	60a3      	str	r3, [r4, #8]
 80195e6:	6963      	ldr	r3, [r4, #20]
 80195e8:	425b      	negs	r3, r3
 80195ea:	61a3      	str	r3, [r4, #24]
 80195ec:	6923      	ldr	r3, [r4, #16]
 80195ee:	b943      	cbnz	r3, 8019602 <__swsetup_r+0xc6>
 80195f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80195f4:	d1ba      	bne.n	801956c <__swsetup_r+0x30>
 80195f6:	bd70      	pop	{r4, r5, r6, pc}
 80195f8:	0781      	lsls	r1, r0, #30
 80195fa:	bf58      	it	pl
 80195fc:	6963      	ldrpl	r3, [r4, #20]
 80195fe:	60a3      	str	r3, [r4, #8]
 8019600:	e7f4      	b.n	80195ec <__swsetup_r+0xb0>
 8019602:	2000      	movs	r0, #0
 8019604:	e7f7      	b.n	80195f6 <__swsetup_r+0xba>
 8019606:	bf00      	nop
 8019608:	240000d0 	.word	0x240000d0
 801960c:	0801a218 	.word	0x0801a218
 8019610:	0801a238 	.word	0x0801a238
 8019614:	0801a1f8 	.word	0x0801a1f8

08019618 <__sflush_r>:
 8019618:	898a      	ldrh	r2, [r1, #12]
 801961a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801961e:	4605      	mov	r5, r0
 8019620:	0710      	lsls	r0, r2, #28
 8019622:	460c      	mov	r4, r1
 8019624:	d458      	bmi.n	80196d8 <__sflush_r+0xc0>
 8019626:	684b      	ldr	r3, [r1, #4]
 8019628:	2b00      	cmp	r3, #0
 801962a:	dc05      	bgt.n	8019638 <__sflush_r+0x20>
 801962c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801962e:	2b00      	cmp	r3, #0
 8019630:	dc02      	bgt.n	8019638 <__sflush_r+0x20>
 8019632:	2000      	movs	r0, #0
 8019634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801963a:	2e00      	cmp	r6, #0
 801963c:	d0f9      	beq.n	8019632 <__sflush_r+0x1a>
 801963e:	2300      	movs	r3, #0
 8019640:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019644:	682f      	ldr	r7, [r5, #0]
 8019646:	602b      	str	r3, [r5, #0]
 8019648:	d032      	beq.n	80196b0 <__sflush_r+0x98>
 801964a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801964c:	89a3      	ldrh	r3, [r4, #12]
 801964e:	075a      	lsls	r2, r3, #29
 8019650:	d505      	bpl.n	801965e <__sflush_r+0x46>
 8019652:	6863      	ldr	r3, [r4, #4]
 8019654:	1ac0      	subs	r0, r0, r3
 8019656:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019658:	b10b      	cbz	r3, 801965e <__sflush_r+0x46>
 801965a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801965c:	1ac0      	subs	r0, r0, r3
 801965e:	2300      	movs	r3, #0
 8019660:	4602      	mov	r2, r0
 8019662:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019664:	6a21      	ldr	r1, [r4, #32]
 8019666:	4628      	mov	r0, r5
 8019668:	47b0      	blx	r6
 801966a:	1c43      	adds	r3, r0, #1
 801966c:	89a3      	ldrh	r3, [r4, #12]
 801966e:	d106      	bne.n	801967e <__sflush_r+0x66>
 8019670:	6829      	ldr	r1, [r5, #0]
 8019672:	291d      	cmp	r1, #29
 8019674:	d82c      	bhi.n	80196d0 <__sflush_r+0xb8>
 8019676:	4a2a      	ldr	r2, [pc, #168]	; (8019720 <__sflush_r+0x108>)
 8019678:	40ca      	lsrs	r2, r1
 801967a:	07d6      	lsls	r6, r2, #31
 801967c:	d528      	bpl.n	80196d0 <__sflush_r+0xb8>
 801967e:	2200      	movs	r2, #0
 8019680:	6062      	str	r2, [r4, #4]
 8019682:	04d9      	lsls	r1, r3, #19
 8019684:	6922      	ldr	r2, [r4, #16]
 8019686:	6022      	str	r2, [r4, #0]
 8019688:	d504      	bpl.n	8019694 <__sflush_r+0x7c>
 801968a:	1c42      	adds	r2, r0, #1
 801968c:	d101      	bne.n	8019692 <__sflush_r+0x7a>
 801968e:	682b      	ldr	r3, [r5, #0]
 8019690:	b903      	cbnz	r3, 8019694 <__sflush_r+0x7c>
 8019692:	6560      	str	r0, [r4, #84]	; 0x54
 8019694:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019696:	602f      	str	r7, [r5, #0]
 8019698:	2900      	cmp	r1, #0
 801969a:	d0ca      	beq.n	8019632 <__sflush_r+0x1a>
 801969c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80196a0:	4299      	cmp	r1, r3
 80196a2:	d002      	beq.n	80196aa <__sflush_r+0x92>
 80196a4:	4628      	mov	r0, r5
 80196a6:	f000 f9d7 	bl	8019a58 <_free_r>
 80196aa:	2000      	movs	r0, #0
 80196ac:	6360      	str	r0, [r4, #52]	; 0x34
 80196ae:	e7c1      	b.n	8019634 <__sflush_r+0x1c>
 80196b0:	6a21      	ldr	r1, [r4, #32]
 80196b2:	2301      	movs	r3, #1
 80196b4:	4628      	mov	r0, r5
 80196b6:	47b0      	blx	r6
 80196b8:	1c41      	adds	r1, r0, #1
 80196ba:	d1c7      	bne.n	801964c <__sflush_r+0x34>
 80196bc:	682b      	ldr	r3, [r5, #0]
 80196be:	2b00      	cmp	r3, #0
 80196c0:	d0c4      	beq.n	801964c <__sflush_r+0x34>
 80196c2:	2b1d      	cmp	r3, #29
 80196c4:	d001      	beq.n	80196ca <__sflush_r+0xb2>
 80196c6:	2b16      	cmp	r3, #22
 80196c8:	d101      	bne.n	80196ce <__sflush_r+0xb6>
 80196ca:	602f      	str	r7, [r5, #0]
 80196cc:	e7b1      	b.n	8019632 <__sflush_r+0x1a>
 80196ce:	89a3      	ldrh	r3, [r4, #12]
 80196d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80196d4:	81a3      	strh	r3, [r4, #12]
 80196d6:	e7ad      	b.n	8019634 <__sflush_r+0x1c>
 80196d8:	690f      	ldr	r7, [r1, #16]
 80196da:	2f00      	cmp	r7, #0
 80196dc:	d0a9      	beq.n	8019632 <__sflush_r+0x1a>
 80196de:	0793      	lsls	r3, r2, #30
 80196e0:	680e      	ldr	r6, [r1, #0]
 80196e2:	bf08      	it	eq
 80196e4:	694b      	ldreq	r3, [r1, #20]
 80196e6:	600f      	str	r7, [r1, #0]
 80196e8:	bf18      	it	ne
 80196ea:	2300      	movne	r3, #0
 80196ec:	eba6 0807 	sub.w	r8, r6, r7
 80196f0:	608b      	str	r3, [r1, #8]
 80196f2:	f1b8 0f00 	cmp.w	r8, #0
 80196f6:	dd9c      	ble.n	8019632 <__sflush_r+0x1a>
 80196f8:	6a21      	ldr	r1, [r4, #32]
 80196fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80196fc:	4643      	mov	r3, r8
 80196fe:	463a      	mov	r2, r7
 8019700:	4628      	mov	r0, r5
 8019702:	47b0      	blx	r6
 8019704:	2800      	cmp	r0, #0
 8019706:	dc06      	bgt.n	8019716 <__sflush_r+0xfe>
 8019708:	89a3      	ldrh	r3, [r4, #12]
 801970a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801970e:	81a3      	strh	r3, [r4, #12]
 8019710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019714:	e78e      	b.n	8019634 <__sflush_r+0x1c>
 8019716:	4407      	add	r7, r0
 8019718:	eba8 0800 	sub.w	r8, r8, r0
 801971c:	e7e9      	b.n	80196f2 <__sflush_r+0xda>
 801971e:	bf00      	nop
 8019720:	20400001 	.word	0x20400001

08019724 <_fflush_r>:
 8019724:	b538      	push	{r3, r4, r5, lr}
 8019726:	690b      	ldr	r3, [r1, #16]
 8019728:	4605      	mov	r5, r0
 801972a:	460c      	mov	r4, r1
 801972c:	b913      	cbnz	r3, 8019734 <_fflush_r+0x10>
 801972e:	2500      	movs	r5, #0
 8019730:	4628      	mov	r0, r5
 8019732:	bd38      	pop	{r3, r4, r5, pc}
 8019734:	b118      	cbz	r0, 801973e <_fflush_r+0x1a>
 8019736:	6983      	ldr	r3, [r0, #24]
 8019738:	b90b      	cbnz	r3, 801973e <_fflush_r+0x1a>
 801973a:	f000 f887 	bl	801984c <__sinit>
 801973e:	4b14      	ldr	r3, [pc, #80]	; (8019790 <_fflush_r+0x6c>)
 8019740:	429c      	cmp	r4, r3
 8019742:	d11b      	bne.n	801977c <_fflush_r+0x58>
 8019744:	686c      	ldr	r4, [r5, #4]
 8019746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801974a:	2b00      	cmp	r3, #0
 801974c:	d0ef      	beq.n	801972e <_fflush_r+0xa>
 801974e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019750:	07d0      	lsls	r0, r2, #31
 8019752:	d404      	bmi.n	801975e <_fflush_r+0x3a>
 8019754:	0599      	lsls	r1, r3, #22
 8019756:	d402      	bmi.n	801975e <_fflush_r+0x3a>
 8019758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801975a:	f000 f915 	bl	8019988 <__retarget_lock_acquire_recursive>
 801975e:	4628      	mov	r0, r5
 8019760:	4621      	mov	r1, r4
 8019762:	f7ff ff59 	bl	8019618 <__sflush_r>
 8019766:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019768:	07da      	lsls	r2, r3, #31
 801976a:	4605      	mov	r5, r0
 801976c:	d4e0      	bmi.n	8019730 <_fflush_r+0xc>
 801976e:	89a3      	ldrh	r3, [r4, #12]
 8019770:	059b      	lsls	r3, r3, #22
 8019772:	d4dd      	bmi.n	8019730 <_fflush_r+0xc>
 8019774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019776:	f000 f908 	bl	801998a <__retarget_lock_release_recursive>
 801977a:	e7d9      	b.n	8019730 <_fflush_r+0xc>
 801977c:	4b05      	ldr	r3, [pc, #20]	; (8019794 <_fflush_r+0x70>)
 801977e:	429c      	cmp	r4, r3
 8019780:	d101      	bne.n	8019786 <_fflush_r+0x62>
 8019782:	68ac      	ldr	r4, [r5, #8]
 8019784:	e7df      	b.n	8019746 <_fflush_r+0x22>
 8019786:	4b04      	ldr	r3, [pc, #16]	; (8019798 <_fflush_r+0x74>)
 8019788:	429c      	cmp	r4, r3
 801978a:	bf08      	it	eq
 801978c:	68ec      	ldreq	r4, [r5, #12]
 801978e:	e7da      	b.n	8019746 <_fflush_r+0x22>
 8019790:	0801a218 	.word	0x0801a218
 8019794:	0801a238 	.word	0x0801a238
 8019798:	0801a1f8 	.word	0x0801a1f8

0801979c <std>:
 801979c:	2300      	movs	r3, #0
 801979e:	b510      	push	{r4, lr}
 80197a0:	4604      	mov	r4, r0
 80197a2:	e9c0 3300 	strd	r3, r3, [r0]
 80197a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80197aa:	6083      	str	r3, [r0, #8]
 80197ac:	8181      	strh	r1, [r0, #12]
 80197ae:	6643      	str	r3, [r0, #100]	; 0x64
 80197b0:	81c2      	strh	r2, [r0, #14]
 80197b2:	6183      	str	r3, [r0, #24]
 80197b4:	4619      	mov	r1, r3
 80197b6:	2208      	movs	r2, #8
 80197b8:	305c      	adds	r0, #92	; 0x5c
 80197ba:	f7ff fdef 	bl	801939c <memset>
 80197be:	4b05      	ldr	r3, [pc, #20]	; (80197d4 <std+0x38>)
 80197c0:	6263      	str	r3, [r4, #36]	; 0x24
 80197c2:	4b05      	ldr	r3, [pc, #20]	; (80197d8 <std+0x3c>)
 80197c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80197c6:	4b05      	ldr	r3, [pc, #20]	; (80197dc <std+0x40>)
 80197c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80197ca:	4b05      	ldr	r3, [pc, #20]	; (80197e0 <std+0x44>)
 80197cc:	6224      	str	r4, [r4, #32]
 80197ce:	6323      	str	r3, [r4, #48]	; 0x30
 80197d0:	bd10      	pop	{r4, pc}
 80197d2:	bf00      	nop
 80197d4:	08019c39 	.word	0x08019c39
 80197d8:	08019c5b 	.word	0x08019c5b
 80197dc:	08019c93 	.word	0x08019c93
 80197e0:	08019cb7 	.word	0x08019cb7

080197e4 <_cleanup_r>:
 80197e4:	4901      	ldr	r1, [pc, #4]	; (80197ec <_cleanup_r+0x8>)
 80197e6:	f000 b8af 	b.w	8019948 <_fwalk_reent>
 80197ea:	bf00      	nop
 80197ec:	08019725 	.word	0x08019725

080197f0 <__sfmoreglue>:
 80197f0:	b570      	push	{r4, r5, r6, lr}
 80197f2:	2268      	movs	r2, #104	; 0x68
 80197f4:	1e4d      	subs	r5, r1, #1
 80197f6:	4355      	muls	r5, r2
 80197f8:	460e      	mov	r6, r1
 80197fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80197fe:	f000 f997 	bl	8019b30 <_malloc_r>
 8019802:	4604      	mov	r4, r0
 8019804:	b140      	cbz	r0, 8019818 <__sfmoreglue+0x28>
 8019806:	2100      	movs	r1, #0
 8019808:	e9c0 1600 	strd	r1, r6, [r0]
 801980c:	300c      	adds	r0, #12
 801980e:	60a0      	str	r0, [r4, #8]
 8019810:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019814:	f7ff fdc2 	bl	801939c <memset>
 8019818:	4620      	mov	r0, r4
 801981a:	bd70      	pop	{r4, r5, r6, pc}

0801981c <__sfp_lock_acquire>:
 801981c:	4801      	ldr	r0, [pc, #4]	; (8019824 <__sfp_lock_acquire+0x8>)
 801981e:	f000 b8b3 	b.w	8019988 <__retarget_lock_acquire_recursive>
 8019822:	bf00      	nop
 8019824:	240069ad 	.word	0x240069ad

08019828 <__sfp_lock_release>:
 8019828:	4801      	ldr	r0, [pc, #4]	; (8019830 <__sfp_lock_release+0x8>)
 801982a:	f000 b8ae 	b.w	801998a <__retarget_lock_release_recursive>
 801982e:	bf00      	nop
 8019830:	240069ad 	.word	0x240069ad

08019834 <__sinit_lock_acquire>:
 8019834:	4801      	ldr	r0, [pc, #4]	; (801983c <__sinit_lock_acquire+0x8>)
 8019836:	f000 b8a7 	b.w	8019988 <__retarget_lock_acquire_recursive>
 801983a:	bf00      	nop
 801983c:	240069ae 	.word	0x240069ae

08019840 <__sinit_lock_release>:
 8019840:	4801      	ldr	r0, [pc, #4]	; (8019848 <__sinit_lock_release+0x8>)
 8019842:	f000 b8a2 	b.w	801998a <__retarget_lock_release_recursive>
 8019846:	bf00      	nop
 8019848:	240069ae 	.word	0x240069ae

0801984c <__sinit>:
 801984c:	b510      	push	{r4, lr}
 801984e:	4604      	mov	r4, r0
 8019850:	f7ff fff0 	bl	8019834 <__sinit_lock_acquire>
 8019854:	69a3      	ldr	r3, [r4, #24]
 8019856:	b11b      	cbz	r3, 8019860 <__sinit+0x14>
 8019858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801985c:	f7ff bff0 	b.w	8019840 <__sinit_lock_release>
 8019860:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019864:	6523      	str	r3, [r4, #80]	; 0x50
 8019866:	4b13      	ldr	r3, [pc, #76]	; (80198b4 <__sinit+0x68>)
 8019868:	4a13      	ldr	r2, [pc, #76]	; (80198b8 <__sinit+0x6c>)
 801986a:	681b      	ldr	r3, [r3, #0]
 801986c:	62a2      	str	r2, [r4, #40]	; 0x28
 801986e:	42a3      	cmp	r3, r4
 8019870:	bf04      	itt	eq
 8019872:	2301      	moveq	r3, #1
 8019874:	61a3      	streq	r3, [r4, #24]
 8019876:	4620      	mov	r0, r4
 8019878:	f000 f820 	bl	80198bc <__sfp>
 801987c:	6060      	str	r0, [r4, #4]
 801987e:	4620      	mov	r0, r4
 8019880:	f000 f81c 	bl	80198bc <__sfp>
 8019884:	60a0      	str	r0, [r4, #8]
 8019886:	4620      	mov	r0, r4
 8019888:	f000 f818 	bl	80198bc <__sfp>
 801988c:	2200      	movs	r2, #0
 801988e:	60e0      	str	r0, [r4, #12]
 8019890:	2104      	movs	r1, #4
 8019892:	6860      	ldr	r0, [r4, #4]
 8019894:	f7ff ff82 	bl	801979c <std>
 8019898:	68a0      	ldr	r0, [r4, #8]
 801989a:	2201      	movs	r2, #1
 801989c:	2109      	movs	r1, #9
 801989e:	f7ff ff7d 	bl	801979c <std>
 80198a2:	68e0      	ldr	r0, [r4, #12]
 80198a4:	2202      	movs	r2, #2
 80198a6:	2112      	movs	r1, #18
 80198a8:	f7ff ff78 	bl	801979c <std>
 80198ac:	2301      	movs	r3, #1
 80198ae:	61a3      	str	r3, [r4, #24]
 80198b0:	e7d2      	b.n	8019858 <__sinit+0xc>
 80198b2:	bf00      	nop
 80198b4:	0801a1f4 	.word	0x0801a1f4
 80198b8:	080197e5 	.word	0x080197e5

080198bc <__sfp>:
 80198bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198be:	4607      	mov	r7, r0
 80198c0:	f7ff ffac 	bl	801981c <__sfp_lock_acquire>
 80198c4:	4b1e      	ldr	r3, [pc, #120]	; (8019940 <__sfp+0x84>)
 80198c6:	681e      	ldr	r6, [r3, #0]
 80198c8:	69b3      	ldr	r3, [r6, #24]
 80198ca:	b913      	cbnz	r3, 80198d2 <__sfp+0x16>
 80198cc:	4630      	mov	r0, r6
 80198ce:	f7ff ffbd 	bl	801984c <__sinit>
 80198d2:	3648      	adds	r6, #72	; 0x48
 80198d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80198d8:	3b01      	subs	r3, #1
 80198da:	d503      	bpl.n	80198e4 <__sfp+0x28>
 80198dc:	6833      	ldr	r3, [r6, #0]
 80198de:	b30b      	cbz	r3, 8019924 <__sfp+0x68>
 80198e0:	6836      	ldr	r6, [r6, #0]
 80198e2:	e7f7      	b.n	80198d4 <__sfp+0x18>
 80198e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80198e8:	b9d5      	cbnz	r5, 8019920 <__sfp+0x64>
 80198ea:	4b16      	ldr	r3, [pc, #88]	; (8019944 <__sfp+0x88>)
 80198ec:	60e3      	str	r3, [r4, #12]
 80198ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80198f2:	6665      	str	r5, [r4, #100]	; 0x64
 80198f4:	f000 f847 	bl	8019986 <__retarget_lock_init_recursive>
 80198f8:	f7ff ff96 	bl	8019828 <__sfp_lock_release>
 80198fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019900:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019904:	6025      	str	r5, [r4, #0]
 8019906:	61a5      	str	r5, [r4, #24]
 8019908:	2208      	movs	r2, #8
 801990a:	4629      	mov	r1, r5
 801990c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019910:	f7ff fd44 	bl	801939c <memset>
 8019914:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019918:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801991c:	4620      	mov	r0, r4
 801991e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019920:	3468      	adds	r4, #104	; 0x68
 8019922:	e7d9      	b.n	80198d8 <__sfp+0x1c>
 8019924:	2104      	movs	r1, #4
 8019926:	4638      	mov	r0, r7
 8019928:	f7ff ff62 	bl	80197f0 <__sfmoreglue>
 801992c:	4604      	mov	r4, r0
 801992e:	6030      	str	r0, [r6, #0]
 8019930:	2800      	cmp	r0, #0
 8019932:	d1d5      	bne.n	80198e0 <__sfp+0x24>
 8019934:	f7ff ff78 	bl	8019828 <__sfp_lock_release>
 8019938:	230c      	movs	r3, #12
 801993a:	603b      	str	r3, [r7, #0]
 801993c:	e7ee      	b.n	801991c <__sfp+0x60>
 801993e:	bf00      	nop
 8019940:	0801a1f4 	.word	0x0801a1f4
 8019944:	ffff0001 	.word	0xffff0001

08019948 <_fwalk_reent>:
 8019948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801994c:	4606      	mov	r6, r0
 801994e:	4688      	mov	r8, r1
 8019950:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019954:	2700      	movs	r7, #0
 8019956:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801995a:	f1b9 0901 	subs.w	r9, r9, #1
 801995e:	d505      	bpl.n	801996c <_fwalk_reent+0x24>
 8019960:	6824      	ldr	r4, [r4, #0]
 8019962:	2c00      	cmp	r4, #0
 8019964:	d1f7      	bne.n	8019956 <_fwalk_reent+0xe>
 8019966:	4638      	mov	r0, r7
 8019968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801996c:	89ab      	ldrh	r3, [r5, #12]
 801996e:	2b01      	cmp	r3, #1
 8019970:	d907      	bls.n	8019982 <_fwalk_reent+0x3a>
 8019972:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019976:	3301      	adds	r3, #1
 8019978:	d003      	beq.n	8019982 <_fwalk_reent+0x3a>
 801997a:	4629      	mov	r1, r5
 801997c:	4630      	mov	r0, r6
 801997e:	47c0      	blx	r8
 8019980:	4307      	orrs	r7, r0
 8019982:	3568      	adds	r5, #104	; 0x68
 8019984:	e7e9      	b.n	801995a <_fwalk_reent+0x12>

08019986 <__retarget_lock_init_recursive>:
 8019986:	4770      	bx	lr

08019988 <__retarget_lock_acquire_recursive>:
 8019988:	4770      	bx	lr

0801998a <__retarget_lock_release_recursive>:
 801998a:	4770      	bx	lr

0801998c <__swhatbuf_r>:
 801998c:	b570      	push	{r4, r5, r6, lr}
 801998e:	460e      	mov	r6, r1
 8019990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019994:	2900      	cmp	r1, #0
 8019996:	b096      	sub	sp, #88	; 0x58
 8019998:	4614      	mov	r4, r2
 801999a:	461d      	mov	r5, r3
 801999c:	da08      	bge.n	80199b0 <__swhatbuf_r+0x24>
 801999e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80199a2:	2200      	movs	r2, #0
 80199a4:	602a      	str	r2, [r5, #0]
 80199a6:	061a      	lsls	r2, r3, #24
 80199a8:	d410      	bmi.n	80199cc <__swhatbuf_r+0x40>
 80199aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80199ae:	e00e      	b.n	80199ce <__swhatbuf_r+0x42>
 80199b0:	466a      	mov	r2, sp
 80199b2:	f000 f9a7 	bl	8019d04 <_fstat_r>
 80199b6:	2800      	cmp	r0, #0
 80199b8:	dbf1      	blt.n	801999e <__swhatbuf_r+0x12>
 80199ba:	9a01      	ldr	r2, [sp, #4]
 80199bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80199c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80199c4:	425a      	negs	r2, r3
 80199c6:	415a      	adcs	r2, r3
 80199c8:	602a      	str	r2, [r5, #0]
 80199ca:	e7ee      	b.n	80199aa <__swhatbuf_r+0x1e>
 80199cc:	2340      	movs	r3, #64	; 0x40
 80199ce:	2000      	movs	r0, #0
 80199d0:	6023      	str	r3, [r4, #0]
 80199d2:	b016      	add	sp, #88	; 0x58
 80199d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080199d8 <__smakebuf_r>:
 80199d8:	898b      	ldrh	r3, [r1, #12]
 80199da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80199dc:	079d      	lsls	r5, r3, #30
 80199de:	4606      	mov	r6, r0
 80199e0:	460c      	mov	r4, r1
 80199e2:	d507      	bpl.n	80199f4 <__smakebuf_r+0x1c>
 80199e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80199e8:	6023      	str	r3, [r4, #0]
 80199ea:	6123      	str	r3, [r4, #16]
 80199ec:	2301      	movs	r3, #1
 80199ee:	6163      	str	r3, [r4, #20]
 80199f0:	b002      	add	sp, #8
 80199f2:	bd70      	pop	{r4, r5, r6, pc}
 80199f4:	ab01      	add	r3, sp, #4
 80199f6:	466a      	mov	r2, sp
 80199f8:	f7ff ffc8 	bl	801998c <__swhatbuf_r>
 80199fc:	9900      	ldr	r1, [sp, #0]
 80199fe:	4605      	mov	r5, r0
 8019a00:	4630      	mov	r0, r6
 8019a02:	f000 f895 	bl	8019b30 <_malloc_r>
 8019a06:	b948      	cbnz	r0, 8019a1c <__smakebuf_r+0x44>
 8019a08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a0c:	059a      	lsls	r2, r3, #22
 8019a0e:	d4ef      	bmi.n	80199f0 <__smakebuf_r+0x18>
 8019a10:	f023 0303 	bic.w	r3, r3, #3
 8019a14:	f043 0302 	orr.w	r3, r3, #2
 8019a18:	81a3      	strh	r3, [r4, #12]
 8019a1a:	e7e3      	b.n	80199e4 <__smakebuf_r+0xc>
 8019a1c:	4b0d      	ldr	r3, [pc, #52]	; (8019a54 <__smakebuf_r+0x7c>)
 8019a1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8019a20:	89a3      	ldrh	r3, [r4, #12]
 8019a22:	6020      	str	r0, [r4, #0]
 8019a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a28:	81a3      	strh	r3, [r4, #12]
 8019a2a:	9b00      	ldr	r3, [sp, #0]
 8019a2c:	6163      	str	r3, [r4, #20]
 8019a2e:	9b01      	ldr	r3, [sp, #4]
 8019a30:	6120      	str	r0, [r4, #16]
 8019a32:	b15b      	cbz	r3, 8019a4c <__smakebuf_r+0x74>
 8019a34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019a38:	4630      	mov	r0, r6
 8019a3a:	f000 f975 	bl	8019d28 <_isatty_r>
 8019a3e:	b128      	cbz	r0, 8019a4c <__smakebuf_r+0x74>
 8019a40:	89a3      	ldrh	r3, [r4, #12]
 8019a42:	f023 0303 	bic.w	r3, r3, #3
 8019a46:	f043 0301 	orr.w	r3, r3, #1
 8019a4a:	81a3      	strh	r3, [r4, #12]
 8019a4c:	89a0      	ldrh	r0, [r4, #12]
 8019a4e:	4305      	orrs	r5, r0
 8019a50:	81a5      	strh	r5, [r4, #12]
 8019a52:	e7cd      	b.n	80199f0 <__smakebuf_r+0x18>
 8019a54:	080197e5 	.word	0x080197e5

08019a58 <_free_r>:
 8019a58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019a5a:	2900      	cmp	r1, #0
 8019a5c:	d044      	beq.n	8019ae8 <_free_r+0x90>
 8019a5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019a62:	9001      	str	r0, [sp, #4]
 8019a64:	2b00      	cmp	r3, #0
 8019a66:	f1a1 0404 	sub.w	r4, r1, #4
 8019a6a:	bfb8      	it	lt
 8019a6c:	18e4      	addlt	r4, r4, r3
 8019a6e:	f000 f97d 	bl	8019d6c <__malloc_lock>
 8019a72:	4a1e      	ldr	r2, [pc, #120]	; (8019aec <_free_r+0x94>)
 8019a74:	9801      	ldr	r0, [sp, #4]
 8019a76:	6813      	ldr	r3, [r2, #0]
 8019a78:	b933      	cbnz	r3, 8019a88 <_free_r+0x30>
 8019a7a:	6063      	str	r3, [r4, #4]
 8019a7c:	6014      	str	r4, [r2, #0]
 8019a7e:	b003      	add	sp, #12
 8019a80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019a84:	f000 b978 	b.w	8019d78 <__malloc_unlock>
 8019a88:	42a3      	cmp	r3, r4
 8019a8a:	d908      	bls.n	8019a9e <_free_r+0x46>
 8019a8c:	6825      	ldr	r5, [r4, #0]
 8019a8e:	1961      	adds	r1, r4, r5
 8019a90:	428b      	cmp	r3, r1
 8019a92:	bf01      	itttt	eq
 8019a94:	6819      	ldreq	r1, [r3, #0]
 8019a96:	685b      	ldreq	r3, [r3, #4]
 8019a98:	1949      	addeq	r1, r1, r5
 8019a9a:	6021      	streq	r1, [r4, #0]
 8019a9c:	e7ed      	b.n	8019a7a <_free_r+0x22>
 8019a9e:	461a      	mov	r2, r3
 8019aa0:	685b      	ldr	r3, [r3, #4]
 8019aa2:	b10b      	cbz	r3, 8019aa8 <_free_r+0x50>
 8019aa4:	42a3      	cmp	r3, r4
 8019aa6:	d9fa      	bls.n	8019a9e <_free_r+0x46>
 8019aa8:	6811      	ldr	r1, [r2, #0]
 8019aaa:	1855      	adds	r5, r2, r1
 8019aac:	42a5      	cmp	r5, r4
 8019aae:	d10b      	bne.n	8019ac8 <_free_r+0x70>
 8019ab0:	6824      	ldr	r4, [r4, #0]
 8019ab2:	4421      	add	r1, r4
 8019ab4:	1854      	adds	r4, r2, r1
 8019ab6:	42a3      	cmp	r3, r4
 8019ab8:	6011      	str	r1, [r2, #0]
 8019aba:	d1e0      	bne.n	8019a7e <_free_r+0x26>
 8019abc:	681c      	ldr	r4, [r3, #0]
 8019abe:	685b      	ldr	r3, [r3, #4]
 8019ac0:	6053      	str	r3, [r2, #4]
 8019ac2:	4421      	add	r1, r4
 8019ac4:	6011      	str	r1, [r2, #0]
 8019ac6:	e7da      	b.n	8019a7e <_free_r+0x26>
 8019ac8:	d902      	bls.n	8019ad0 <_free_r+0x78>
 8019aca:	230c      	movs	r3, #12
 8019acc:	6003      	str	r3, [r0, #0]
 8019ace:	e7d6      	b.n	8019a7e <_free_r+0x26>
 8019ad0:	6825      	ldr	r5, [r4, #0]
 8019ad2:	1961      	adds	r1, r4, r5
 8019ad4:	428b      	cmp	r3, r1
 8019ad6:	bf04      	itt	eq
 8019ad8:	6819      	ldreq	r1, [r3, #0]
 8019ada:	685b      	ldreq	r3, [r3, #4]
 8019adc:	6063      	str	r3, [r4, #4]
 8019ade:	bf04      	itt	eq
 8019ae0:	1949      	addeq	r1, r1, r5
 8019ae2:	6021      	streq	r1, [r4, #0]
 8019ae4:	6054      	str	r4, [r2, #4]
 8019ae6:	e7ca      	b.n	8019a7e <_free_r+0x26>
 8019ae8:	b003      	add	sp, #12
 8019aea:	bd30      	pop	{r4, r5, pc}
 8019aec:	240069b0 	.word	0x240069b0

08019af0 <sbrk_aligned>:
 8019af0:	b570      	push	{r4, r5, r6, lr}
 8019af2:	4e0e      	ldr	r6, [pc, #56]	; (8019b2c <sbrk_aligned+0x3c>)
 8019af4:	460c      	mov	r4, r1
 8019af6:	6831      	ldr	r1, [r6, #0]
 8019af8:	4605      	mov	r5, r0
 8019afa:	b911      	cbnz	r1, 8019b02 <sbrk_aligned+0x12>
 8019afc:	f000 f88c 	bl	8019c18 <_sbrk_r>
 8019b00:	6030      	str	r0, [r6, #0]
 8019b02:	4621      	mov	r1, r4
 8019b04:	4628      	mov	r0, r5
 8019b06:	f000 f887 	bl	8019c18 <_sbrk_r>
 8019b0a:	1c43      	adds	r3, r0, #1
 8019b0c:	d00a      	beq.n	8019b24 <sbrk_aligned+0x34>
 8019b0e:	1cc4      	adds	r4, r0, #3
 8019b10:	f024 0403 	bic.w	r4, r4, #3
 8019b14:	42a0      	cmp	r0, r4
 8019b16:	d007      	beq.n	8019b28 <sbrk_aligned+0x38>
 8019b18:	1a21      	subs	r1, r4, r0
 8019b1a:	4628      	mov	r0, r5
 8019b1c:	f000 f87c 	bl	8019c18 <_sbrk_r>
 8019b20:	3001      	adds	r0, #1
 8019b22:	d101      	bne.n	8019b28 <sbrk_aligned+0x38>
 8019b24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019b28:	4620      	mov	r0, r4
 8019b2a:	bd70      	pop	{r4, r5, r6, pc}
 8019b2c:	240069b4 	.word	0x240069b4

08019b30 <_malloc_r>:
 8019b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b34:	1ccd      	adds	r5, r1, #3
 8019b36:	f025 0503 	bic.w	r5, r5, #3
 8019b3a:	3508      	adds	r5, #8
 8019b3c:	2d0c      	cmp	r5, #12
 8019b3e:	bf38      	it	cc
 8019b40:	250c      	movcc	r5, #12
 8019b42:	2d00      	cmp	r5, #0
 8019b44:	4607      	mov	r7, r0
 8019b46:	db01      	blt.n	8019b4c <_malloc_r+0x1c>
 8019b48:	42a9      	cmp	r1, r5
 8019b4a:	d905      	bls.n	8019b58 <_malloc_r+0x28>
 8019b4c:	230c      	movs	r3, #12
 8019b4e:	603b      	str	r3, [r7, #0]
 8019b50:	2600      	movs	r6, #0
 8019b52:	4630      	mov	r0, r6
 8019b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b58:	4e2e      	ldr	r6, [pc, #184]	; (8019c14 <_malloc_r+0xe4>)
 8019b5a:	f000 f907 	bl	8019d6c <__malloc_lock>
 8019b5e:	6833      	ldr	r3, [r6, #0]
 8019b60:	461c      	mov	r4, r3
 8019b62:	bb34      	cbnz	r4, 8019bb2 <_malloc_r+0x82>
 8019b64:	4629      	mov	r1, r5
 8019b66:	4638      	mov	r0, r7
 8019b68:	f7ff ffc2 	bl	8019af0 <sbrk_aligned>
 8019b6c:	1c43      	adds	r3, r0, #1
 8019b6e:	4604      	mov	r4, r0
 8019b70:	d14d      	bne.n	8019c0e <_malloc_r+0xde>
 8019b72:	6834      	ldr	r4, [r6, #0]
 8019b74:	4626      	mov	r6, r4
 8019b76:	2e00      	cmp	r6, #0
 8019b78:	d140      	bne.n	8019bfc <_malloc_r+0xcc>
 8019b7a:	6823      	ldr	r3, [r4, #0]
 8019b7c:	4631      	mov	r1, r6
 8019b7e:	4638      	mov	r0, r7
 8019b80:	eb04 0803 	add.w	r8, r4, r3
 8019b84:	f000 f848 	bl	8019c18 <_sbrk_r>
 8019b88:	4580      	cmp	r8, r0
 8019b8a:	d13a      	bne.n	8019c02 <_malloc_r+0xd2>
 8019b8c:	6821      	ldr	r1, [r4, #0]
 8019b8e:	3503      	adds	r5, #3
 8019b90:	1a6d      	subs	r5, r5, r1
 8019b92:	f025 0503 	bic.w	r5, r5, #3
 8019b96:	3508      	adds	r5, #8
 8019b98:	2d0c      	cmp	r5, #12
 8019b9a:	bf38      	it	cc
 8019b9c:	250c      	movcc	r5, #12
 8019b9e:	4629      	mov	r1, r5
 8019ba0:	4638      	mov	r0, r7
 8019ba2:	f7ff ffa5 	bl	8019af0 <sbrk_aligned>
 8019ba6:	3001      	adds	r0, #1
 8019ba8:	d02b      	beq.n	8019c02 <_malloc_r+0xd2>
 8019baa:	6823      	ldr	r3, [r4, #0]
 8019bac:	442b      	add	r3, r5
 8019bae:	6023      	str	r3, [r4, #0]
 8019bb0:	e00e      	b.n	8019bd0 <_malloc_r+0xa0>
 8019bb2:	6822      	ldr	r2, [r4, #0]
 8019bb4:	1b52      	subs	r2, r2, r5
 8019bb6:	d41e      	bmi.n	8019bf6 <_malloc_r+0xc6>
 8019bb8:	2a0b      	cmp	r2, #11
 8019bba:	d916      	bls.n	8019bea <_malloc_r+0xba>
 8019bbc:	1961      	adds	r1, r4, r5
 8019bbe:	42a3      	cmp	r3, r4
 8019bc0:	6025      	str	r5, [r4, #0]
 8019bc2:	bf18      	it	ne
 8019bc4:	6059      	strne	r1, [r3, #4]
 8019bc6:	6863      	ldr	r3, [r4, #4]
 8019bc8:	bf08      	it	eq
 8019bca:	6031      	streq	r1, [r6, #0]
 8019bcc:	5162      	str	r2, [r4, r5]
 8019bce:	604b      	str	r3, [r1, #4]
 8019bd0:	4638      	mov	r0, r7
 8019bd2:	f104 060b 	add.w	r6, r4, #11
 8019bd6:	f000 f8cf 	bl	8019d78 <__malloc_unlock>
 8019bda:	f026 0607 	bic.w	r6, r6, #7
 8019bde:	1d23      	adds	r3, r4, #4
 8019be0:	1af2      	subs	r2, r6, r3
 8019be2:	d0b6      	beq.n	8019b52 <_malloc_r+0x22>
 8019be4:	1b9b      	subs	r3, r3, r6
 8019be6:	50a3      	str	r3, [r4, r2]
 8019be8:	e7b3      	b.n	8019b52 <_malloc_r+0x22>
 8019bea:	6862      	ldr	r2, [r4, #4]
 8019bec:	42a3      	cmp	r3, r4
 8019bee:	bf0c      	ite	eq
 8019bf0:	6032      	streq	r2, [r6, #0]
 8019bf2:	605a      	strne	r2, [r3, #4]
 8019bf4:	e7ec      	b.n	8019bd0 <_malloc_r+0xa0>
 8019bf6:	4623      	mov	r3, r4
 8019bf8:	6864      	ldr	r4, [r4, #4]
 8019bfa:	e7b2      	b.n	8019b62 <_malloc_r+0x32>
 8019bfc:	4634      	mov	r4, r6
 8019bfe:	6876      	ldr	r6, [r6, #4]
 8019c00:	e7b9      	b.n	8019b76 <_malloc_r+0x46>
 8019c02:	230c      	movs	r3, #12
 8019c04:	603b      	str	r3, [r7, #0]
 8019c06:	4638      	mov	r0, r7
 8019c08:	f000 f8b6 	bl	8019d78 <__malloc_unlock>
 8019c0c:	e7a1      	b.n	8019b52 <_malloc_r+0x22>
 8019c0e:	6025      	str	r5, [r4, #0]
 8019c10:	e7de      	b.n	8019bd0 <_malloc_r+0xa0>
 8019c12:	bf00      	nop
 8019c14:	240069b0 	.word	0x240069b0

08019c18 <_sbrk_r>:
 8019c18:	b538      	push	{r3, r4, r5, lr}
 8019c1a:	4d06      	ldr	r5, [pc, #24]	; (8019c34 <_sbrk_r+0x1c>)
 8019c1c:	2300      	movs	r3, #0
 8019c1e:	4604      	mov	r4, r0
 8019c20:	4608      	mov	r0, r1
 8019c22:	602b      	str	r3, [r5, #0]
 8019c24:	f7ea f8bc 	bl	8003da0 <_sbrk>
 8019c28:	1c43      	adds	r3, r0, #1
 8019c2a:	d102      	bne.n	8019c32 <_sbrk_r+0x1a>
 8019c2c:	682b      	ldr	r3, [r5, #0]
 8019c2e:	b103      	cbz	r3, 8019c32 <_sbrk_r+0x1a>
 8019c30:	6023      	str	r3, [r4, #0]
 8019c32:	bd38      	pop	{r3, r4, r5, pc}
 8019c34:	240069b8 	.word	0x240069b8

08019c38 <__sread>:
 8019c38:	b510      	push	{r4, lr}
 8019c3a:	460c      	mov	r4, r1
 8019c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c40:	f000 f8a0 	bl	8019d84 <_read_r>
 8019c44:	2800      	cmp	r0, #0
 8019c46:	bfab      	itete	ge
 8019c48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019c4a:	89a3      	ldrhlt	r3, [r4, #12]
 8019c4c:	181b      	addge	r3, r3, r0
 8019c4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019c52:	bfac      	ite	ge
 8019c54:	6563      	strge	r3, [r4, #84]	; 0x54
 8019c56:	81a3      	strhlt	r3, [r4, #12]
 8019c58:	bd10      	pop	{r4, pc}

08019c5a <__swrite>:
 8019c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c5e:	461f      	mov	r7, r3
 8019c60:	898b      	ldrh	r3, [r1, #12]
 8019c62:	05db      	lsls	r3, r3, #23
 8019c64:	4605      	mov	r5, r0
 8019c66:	460c      	mov	r4, r1
 8019c68:	4616      	mov	r6, r2
 8019c6a:	d505      	bpl.n	8019c78 <__swrite+0x1e>
 8019c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c70:	2302      	movs	r3, #2
 8019c72:	2200      	movs	r2, #0
 8019c74:	f000 f868 	bl	8019d48 <_lseek_r>
 8019c78:	89a3      	ldrh	r3, [r4, #12]
 8019c7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019c7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019c82:	81a3      	strh	r3, [r4, #12]
 8019c84:	4632      	mov	r2, r6
 8019c86:	463b      	mov	r3, r7
 8019c88:	4628      	mov	r0, r5
 8019c8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019c8e:	f000 b817 	b.w	8019cc0 <_write_r>

08019c92 <__sseek>:
 8019c92:	b510      	push	{r4, lr}
 8019c94:	460c      	mov	r4, r1
 8019c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c9a:	f000 f855 	bl	8019d48 <_lseek_r>
 8019c9e:	1c43      	adds	r3, r0, #1
 8019ca0:	89a3      	ldrh	r3, [r4, #12]
 8019ca2:	bf15      	itete	ne
 8019ca4:	6560      	strne	r0, [r4, #84]	; 0x54
 8019ca6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019caa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019cae:	81a3      	strheq	r3, [r4, #12]
 8019cb0:	bf18      	it	ne
 8019cb2:	81a3      	strhne	r3, [r4, #12]
 8019cb4:	bd10      	pop	{r4, pc}

08019cb6 <__sclose>:
 8019cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019cba:	f000 b813 	b.w	8019ce4 <_close_r>
	...

08019cc0 <_write_r>:
 8019cc0:	b538      	push	{r3, r4, r5, lr}
 8019cc2:	4d07      	ldr	r5, [pc, #28]	; (8019ce0 <_write_r+0x20>)
 8019cc4:	4604      	mov	r4, r0
 8019cc6:	4608      	mov	r0, r1
 8019cc8:	4611      	mov	r1, r2
 8019cca:	2200      	movs	r2, #0
 8019ccc:	602a      	str	r2, [r5, #0]
 8019cce:	461a      	mov	r2, r3
 8019cd0:	f7ea f815 	bl	8003cfe <_write>
 8019cd4:	1c43      	adds	r3, r0, #1
 8019cd6:	d102      	bne.n	8019cde <_write_r+0x1e>
 8019cd8:	682b      	ldr	r3, [r5, #0]
 8019cda:	b103      	cbz	r3, 8019cde <_write_r+0x1e>
 8019cdc:	6023      	str	r3, [r4, #0]
 8019cde:	bd38      	pop	{r3, r4, r5, pc}
 8019ce0:	240069b8 	.word	0x240069b8

08019ce4 <_close_r>:
 8019ce4:	b538      	push	{r3, r4, r5, lr}
 8019ce6:	4d06      	ldr	r5, [pc, #24]	; (8019d00 <_close_r+0x1c>)
 8019ce8:	2300      	movs	r3, #0
 8019cea:	4604      	mov	r4, r0
 8019cec:	4608      	mov	r0, r1
 8019cee:	602b      	str	r3, [r5, #0]
 8019cf0:	f7ea f821 	bl	8003d36 <_close>
 8019cf4:	1c43      	adds	r3, r0, #1
 8019cf6:	d102      	bne.n	8019cfe <_close_r+0x1a>
 8019cf8:	682b      	ldr	r3, [r5, #0]
 8019cfa:	b103      	cbz	r3, 8019cfe <_close_r+0x1a>
 8019cfc:	6023      	str	r3, [r4, #0]
 8019cfe:	bd38      	pop	{r3, r4, r5, pc}
 8019d00:	240069b8 	.word	0x240069b8

08019d04 <_fstat_r>:
 8019d04:	b538      	push	{r3, r4, r5, lr}
 8019d06:	4d07      	ldr	r5, [pc, #28]	; (8019d24 <_fstat_r+0x20>)
 8019d08:	2300      	movs	r3, #0
 8019d0a:	4604      	mov	r4, r0
 8019d0c:	4608      	mov	r0, r1
 8019d0e:	4611      	mov	r1, r2
 8019d10:	602b      	str	r3, [r5, #0]
 8019d12:	f7ea f81c 	bl	8003d4e <_fstat>
 8019d16:	1c43      	adds	r3, r0, #1
 8019d18:	d102      	bne.n	8019d20 <_fstat_r+0x1c>
 8019d1a:	682b      	ldr	r3, [r5, #0]
 8019d1c:	b103      	cbz	r3, 8019d20 <_fstat_r+0x1c>
 8019d1e:	6023      	str	r3, [r4, #0]
 8019d20:	bd38      	pop	{r3, r4, r5, pc}
 8019d22:	bf00      	nop
 8019d24:	240069b8 	.word	0x240069b8

08019d28 <_isatty_r>:
 8019d28:	b538      	push	{r3, r4, r5, lr}
 8019d2a:	4d06      	ldr	r5, [pc, #24]	; (8019d44 <_isatty_r+0x1c>)
 8019d2c:	2300      	movs	r3, #0
 8019d2e:	4604      	mov	r4, r0
 8019d30:	4608      	mov	r0, r1
 8019d32:	602b      	str	r3, [r5, #0]
 8019d34:	f7ea f81b 	bl	8003d6e <_isatty>
 8019d38:	1c43      	adds	r3, r0, #1
 8019d3a:	d102      	bne.n	8019d42 <_isatty_r+0x1a>
 8019d3c:	682b      	ldr	r3, [r5, #0]
 8019d3e:	b103      	cbz	r3, 8019d42 <_isatty_r+0x1a>
 8019d40:	6023      	str	r3, [r4, #0]
 8019d42:	bd38      	pop	{r3, r4, r5, pc}
 8019d44:	240069b8 	.word	0x240069b8

08019d48 <_lseek_r>:
 8019d48:	b538      	push	{r3, r4, r5, lr}
 8019d4a:	4d07      	ldr	r5, [pc, #28]	; (8019d68 <_lseek_r+0x20>)
 8019d4c:	4604      	mov	r4, r0
 8019d4e:	4608      	mov	r0, r1
 8019d50:	4611      	mov	r1, r2
 8019d52:	2200      	movs	r2, #0
 8019d54:	602a      	str	r2, [r5, #0]
 8019d56:	461a      	mov	r2, r3
 8019d58:	f7ea f814 	bl	8003d84 <_lseek>
 8019d5c:	1c43      	adds	r3, r0, #1
 8019d5e:	d102      	bne.n	8019d66 <_lseek_r+0x1e>
 8019d60:	682b      	ldr	r3, [r5, #0]
 8019d62:	b103      	cbz	r3, 8019d66 <_lseek_r+0x1e>
 8019d64:	6023      	str	r3, [r4, #0]
 8019d66:	bd38      	pop	{r3, r4, r5, pc}
 8019d68:	240069b8 	.word	0x240069b8

08019d6c <__malloc_lock>:
 8019d6c:	4801      	ldr	r0, [pc, #4]	; (8019d74 <__malloc_lock+0x8>)
 8019d6e:	f7ff be0b 	b.w	8019988 <__retarget_lock_acquire_recursive>
 8019d72:	bf00      	nop
 8019d74:	240069ac 	.word	0x240069ac

08019d78 <__malloc_unlock>:
 8019d78:	4801      	ldr	r0, [pc, #4]	; (8019d80 <__malloc_unlock+0x8>)
 8019d7a:	f7ff be06 	b.w	801998a <__retarget_lock_release_recursive>
 8019d7e:	bf00      	nop
 8019d80:	240069ac 	.word	0x240069ac

08019d84 <_read_r>:
 8019d84:	b538      	push	{r3, r4, r5, lr}
 8019d86:	4d07      	ldr	r5, [pc, #28]	; (8019da4 <_read_r+0x20>)
 8019d88:	4604      	mov	r4, r0
 8019d8a:	4608      	mov	r0, r1
 8019d8c:	4611      	mov	r1, r2
 8019d8e:	2200      	movs	r2, #0
 8019d90:	602a      	str	r2, [r5, #0]
 8019d92:	461a      	mov	r2, r3
 8019d94:	f7e9 ff96 	bl	8003cc4 <_read>
 8019d98:	1c43      	adds	r3, r0, #1
 8019d9a:	d102      	bne.n	8019da2 <_read_r+0x1e>
 8019d9c:	682b      	ldr	r3, [r5, #0]
 8019d9e:	b103      	cbz	r3, 8019da2 <_read_r+0x1e>
 8019da0:	6023      	str	r3, [r4, #0]
 8019da2:	bd38      	pop	{r3, r4, r5, pc}
 8019da4:	240069b8 	.word	0x240069b8

08019da8 <_init>:
 8019da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019daa:	bf00      	nop
 8019dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019dae:	bc08      	pop	{r3}
 8019db0:	469e      	mov	lr, r3
 8019db2:	4770      	bx	lr

08019db4 <_fini>:
 8019db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019db6:	bf00      	nop
 8019db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019dba:	bc08      	pop	{r3}
 8019dbc:	469e      	mov	lr, r3
 8019dbe:	4770      	bx	lr
