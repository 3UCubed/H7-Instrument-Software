
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000167a0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08016a40  08016a40  00026a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016ed8  08016ed8  00026ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016ee0  08016ee0  00026ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08016ee4  08016ee4  00026ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000fc  24000000  08016ee8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000065e4  24000100  08016fe4  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  240066e4  08016fe4  000366e4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003b255  00000000  00000000  0003012a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000703a  00000000  00000000  0006b37f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000028c0  00000000  00000000  000723c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000025d8  00000000  00000000  00074c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044ab0  00000000  00000000  00077258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c870  00000000  00000000  000bbd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194f65  00000000  00000000  000f8578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0028d4dd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b1a4  00000000  00000000  0028d530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016a28 	.word	0x08016a28

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	08016a28 	.word	0x08016a28

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f003 fe27 	bl	80042bc <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f001 fd96 	bl	80021a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f004 ff42 	bl	800550c <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f001 fd89 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f004 f885 	bl	80047c4 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f001 fd70 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f004 f877 	bl	80047c4 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f001 fd62 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f004 f869 	bl	80047c4 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f001 fd54 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f004 f85b 	bl	80047c4 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f001 fd46 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f004 f84c 	bl	80047c4 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f001 fd37 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f004 f83d 	bl	80047c4 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f001 fd28 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f004 f82e 	bl	80047c4 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f001 fd19 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f004 f81f 	bl	80047c4 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f001 fd0a 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f004 f810 	bl	80047c4 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f001 fcfb 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f004 f801 	bl	80047c4 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f001 fcec 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f003 fff2 	bl	80047c4 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f001 fcdd 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400011c 	.word	0x2400011c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f003 fd0f 	bl	80042bc <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f001 fc7e 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f003 ff7a 	bl	80047c4 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f001 fc65 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f003 ff6c 	bl	80047c4 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f001 fc57 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f003 ff5e 	bl	80047c4 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f001 fc49 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f003 ff50 	bl	80047c4 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f001 fc3b 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	24000180 	.word	0x24000180
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f008 f992 	bl	8008d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f008 f986 	bl	8008d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f008 f97a 	bl	8008d24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f005 fb0d 	bl	8006094 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f001 fb90 	bl	80021a4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f003 f9c8 	bl	8003e74 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f003 f9c2 	bl	8003e74 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f005 faad 	bl	8006094 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f001 fb30 	bl	80021a4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	240001e4 	.word	0x240001e4
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400025c 	.word	0x2400025c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f015 fa45 	bl	801601c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f004 fe75 	bl	8005888 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f001 fafe 	bl	80021a4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f005 f890 	bl	8005ce8 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f001 fae9 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240002d4 	.word	0x240002d4
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f008 f865 	bl	8008d24 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f005 f9f8 	bl	8006094 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f001 fa7b 	bl	80021a4 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f004 fdba 	bl	8005838 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f004 fdd1 	bl	800586c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	240002e8 	.word	0x240002e8
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f004 fd91 	bl	8005838 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f004 fda8 	bl	800586c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f004 fd89 	bl	8005838 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f004 fda0 	bl	800586c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f004 fd81 	bl	8005838 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f004 fd98 	bl	800586c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	2010      	movs	r0, #16
 8000d42:	f004 fd79 	bl	8005838 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d46:	2010      	movs	r0, #16
 8000d48:	f004 fd90 	bl	800586c <HAL_NVIC_EnableIRQ>

}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58024400 	.word	0x58024400

08000d58 <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <vApplicationTickHook+0x18>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	4a03      	ldr	r2, [pc, #12]	; (8000d70 <vApplicationTickHook+0x18>)
 8000d64:	6013      	str	r3, [r2, #0]
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	24001964 	.word	0x24001964

08000d74 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000d90:	4a24      	ldr	r2, [pc, #144]	; (8000e24 <MX_FREERTOS_Init+0x98>)
 8000d92:	2100      	movs	r1, #0
 8000d94:	4824      	ldr	r0, [pc, #144]	; (8000e28 <MX_FREERTOS_Init+0x9c>)
 8000d96:	f011 ff73 	bl	8012c80 <osThreadNew>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4a23      	ldr	r2, [pc, #140]	; (8000e2c <MX_FREERTOS_Init+0xa0>)
 8000d9e:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000da0:	4a23      	ldr	r2, [pc, #140]	; (8000e30 <MX_FREERTOS_Init+0xa4>)
 8000da2:	2100      	movs	r1, #0
 8000da4:	4823      	ldr	r0, [pc, #140]	; (8000e34 <MX_FREERTOS_Init+0xa8>)
 8000da6:	f011 ff6b 	bl	8012c80 <osThreadNew>
 8000daa:	4603      	mov	r3, r0
 8000dac:	4a22      	ldr	r2, [pc, #136]	; (8000e38 <MX_FREERTOS_Init+0xac>)
 8000dae:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000db0:	4a22      	ldr	r2, [pc, #136]	; (8000e3c <MX_FREERTOS_Init+0xb0>)
 8000db2:	2100      	movs	r1, #0
 8000db4:	4822      	ldr	r0, [pc, #136]	; (8000e40 <MX_FREERTOS_Init+0xb4>)
 8000db6:	f011 ff63 	bl	8012c80 <osThreadNew>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4a21      	ldr	r2, [pc, #132]	; (8000e44 <MX_FREERTOS_Init+0xb8>)
 8000dbe:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8000dc0:	4a21      	ldr	r2, [pc, #132]	; (8000e48 <MX_FREERTOS_Init+0xbc>)
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4821      	ldr	r0, [pc, #132]	; (8000e4c <MX_FREERTOS_Init+0xc0>)
 8000dc6:	f011 ff5b 	bl	8012c80 <osThreadNew>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4a20      	ldr	r2, [pc, #128]	; (8000e50 <MX_FREERTOS_Init+0xc4>)
 8000dce:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8000dd0:	4a20      	ldr	r2, [pc, #128]	; (8000e54 <MX_FREERTOS_Init+0xc8>)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4820      	ldr	r0, [pc, #128]	; (8000e58 <MX_FREERTOS_Init+0xcc>)
 8000dd6:	f011 ff53 	bl	8012c80 <osThreadNew>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4a1f      	ldr	r2, [pc, #124]	; (8000e5c <MX_FREERTOS_Init+0xd0>)
 8000dde:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000de0:	4a1f      	ldr	r2, [pc, #124]	; (8000e60 <MX_FREERTOS_Init+0xd4>)
 8000de2:	2100      	movs	r1, #0
 8000de4:	481f      	ldr	r0, [pc, #124]	; (8000e64 <MX_FREERTOS_Init+0xd8>)
 8000de6:	f011 ff4b 	bl	8012c80 <osThreadNew>
 8000dea:	4603      	mov	r3, r0
 8000dec:	4a1e      	ldr	r2, [pc, #120]	; (8000e68 <MX_FREERTOS_Init+0xdc>)
 8000dee:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8000df0:	4a1e      	ldr	r2, [pc, #120]	; (8000e6c <MX_FREERTOS_Init+0xe0>)
 8000df2:	2100      	movs	r1, #0
 8000df4:	481e      	ldr	r0, [pc, #120]	; (8000e70 <MX_FREERTOS_Init+0xe4>)
 8000df6:	f011 ff43 	bl	8012c80 <osThreadNew>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4a1d      	ldr	r2, [pc, #116]	; (8000e74 <MX_FREERTOS_Init+0xe8>)
 8000dfe:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8000e00:	4a1d      	ldr	r2, [pc, #116]	; (8000e78 <MX_FREERTOS_Init+0xec>)
 8000e02:	2100      	movs	r1, #0
 8000e04:	481d      	ldr	r0, [pc, #116]	; (8000e7c <MX_FREERTOS_Init+0xf0>)
 8000e06:	f011 ff3b 	bl	8012c80 <osThreadNew>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4a1c      	ldr	r2, [pc, #112]	; (8000e80 <MX_FREERTOS_Init+0xf4>)
 8000e0e:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8000e10:	4a1c      	ldr	r2, [pc, #112]	; (8000e84 <MX_FREERTOS_Init+0xf8>)
 8000e12:	2100      	movs	r1, #0
 8000e14:	481c      	ldr	r0, [pc, #112]	; (8000e88 <MX_FREERTOS_Init+0xfc>)
 8000e16:	f011 ff33 	bl	8012c80 <osThreadNew>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4a1b      	ldr	r2, [pc, #108]	; (8000e8c <MX_FREERTOS_Init+0x100>)
 8000e1e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	08016ca8 	.word	0x08016ca8
 8000e28:	08000e91 	.word	0x08000e91
 8000e2c:	24000360 	.word	0x24000360
 8000e30:	08016ccc 	.word	0x08016ccc
 8000e34:	08000eb9 	.word	0x08000eb9
 8000e38:	240005c0 	.word	0x240005c0
 8000e3c:	08016cf0 	.word	0x08016cf0
 8000e40:	08000ee1 	.word	0x08000ee1
 8000e44:	24000820 	.word	0x24000820
 8000e48:	08016d14 	.word	0x08016d14
 8000e4c:	08000f09 	.word	0x08000f09
 8000e50:	24000a80 	.word	0x24000a80
 8000e54:	08016d38 	.word	0x08016d38
 8000e58:	08000f81 	.word	0x08000f81
 8000e5c:	24000ce0 	.word	0x24000ce0
 8000e60:	08016d5c 	.word	0x08016d5c
 8000e64:	08000ff9 	.word	0x08000ff9
 8000e68:	24000f40 	.word	0x24000f40
 8000e6c:	08016d80 	.word	0x08016d80
 8000e70:	080010a5 	.word	0x080010a5
 8000e74:	240011a0 	.word	0x240011a0
 8000e78:	08016da4 	.word	0x08016da4
 8000e7c:	080010d5 	.word	0x080010d5
 8000e80:	24001400 	.word	0x24001400
 8000e84:	08016dc8 	.word	0x08016dc8
 8000e88:	08001199 	.word	0x08001199
 8000e8c:	24001660 	.word	0x24001660

08000e90 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <PMT_init+0x24>)
 8000e9a:	6818      	ldr	r0, [r3, #0]
 8000e9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	f012 f86e 	bl	8012f84 <osEventFlagsWait>

		create_pmt_packet();
 8000ea8:	f001 f982 	bl	80021b0 <create_pmt_packet>

		osThreadYield();
 8000eac:	f011 ff7a 	bl	8012da4 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000eb0:	e7f2      	b.n	8000e98 <PMT_init+0x8>
 8000eb2:	bf00      	nop
 8000eb4:	24001914 	.word	0x24001914

08000eb8 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <ERPA_init+0x24>)
 8000ec2:	6818      	ldr	r0, [r3, #0]
 8000ec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2102      	movs	r1, #2
 8000ecc:	f012 f85a 	bl	8012f84 <osEventFlagsWait>

		create_erpa_packet();
 8000ed0:	f001 f9b4 	bl	800223c <create_erpa_packet>

		osThreadYield();
 8000ed4:	f011 ff66 	bl	8012da4 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ed8:	e7f2      	b.n	8000ec0 <ERPA_init+0x8>
 8000eda:	bf00      	nop
 8000edc:	24001914 	.word	0x24001914

08000ee0 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HK_init+0x24>)
 8000eea:	6818      	ldr	r0, [r3, #0]
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2104      	movs	r1, #4
 8000ef4:	f012 f846 	bl	8012f84 <osEventFlagsWait>

		create_hk_packet();
 8000ef8:	f001 f9fe 	bl	80022f8 <create_hk_packet>

		osThreadYield();
 8000efc:	f011 ff52 	bl	8012da4 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000f00:	e7f2      	b.n	8000ee8 <HK_init+0x8>
 8000f02:	bf00      	nop
 8000f04:	24001914 	.word	0x24001914

08000f08 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f10:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <AUTOINIT_init+0x70>)
 8000f12:	6818      	ldr	r0, [r3, #0]
 8000f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	f012 f832 	bl	8012f84 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	e012      	b.n	8000f4c <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8000f26:	4a15      	ldr	r2, [pc, #84]	; (8000f7c <AUTOINIT_init+0x74>)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f2e:	4a13      	ldr	r2, [pc, #76]	; (8000f7c <AUTOINIT_init+0x74>)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	4413      	add	r3, r2
 8000f36:	889b      	ldrh	r3, [r3, #4]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f008 f8ba 	bl	80090b4 <HAL_GPIO_WritePin>
			osDelay(100);
 8000f40:	2064      	movs	r0, #100	; 0x64
 8000f42:	f011 ff4f 	bl	8012de4 <osDelay>
		for (int i = 0; i < 7; i++) {
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	dde9      	ble.n	8000f26 <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f52:	2308      	movs	r3, #8
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	e008      	b.n	8000f6a <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f002 fe52 	bl	8003c08 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	3301      	adds	r3, #1
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	2b0d      	cmp	r3, #13
 8000f6e:	ddf3      	ble.n	8000f58 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 8000f70:	f011 ff18 	bl	8012da4 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f74:	e7cc      	b.n	8000f10 <AUTOINIT_init+0x8>
 8000f76:	bf00      	nop
 8000f78:	24001918 	.word	0x24001918
 8000f7c:	08016dec 	.word	0x08016dec

08000f80 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f88:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <AUTODEINIT_init+0x70>)
 8000f8a:	6818      	ldr	r0, [r3, #0]
 8000f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f90:	2200      	movs	r2, #0
 8000f92:	2108      	movs	r1, #8
 8000f94:	f011 fff6 	bl	8012f84 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000f98:	230d      	movs	r3, #13
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	e008      	b.n	8000fb0 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 fe2f 	bl	8003c08 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b07      	cmp	r3, #7
 8000fb4:	dcf3      	bgt.n	8000f9e <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	e012      	b.n	8000fe2 <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <AUTODEINIT_init+0x74>)
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <AUTODEINIT_init+0x74>)
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	4413      	add	r3, r2
 8000fcc:	889b      	ldrh	r3, [r3, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f008 f86f 	bl	80090b4 <HAL_GPIO_WritePin>
			osDelay(100);
 8000fd6:	2064      	movs	r0, #100	; 0x64
 8000fd8:	f011 ff04 	bl	8012de4 <osDelay>
		for (int i = 6; i >= 0; i--) {
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	dae9      	bge.n	8000fbc <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 8000fe8:	f011 fedc 	bl	8012da4 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000fec:	e7cc      	b.n	8000f88 <AUTODEINIT_init+0x8>
 8000fee:	bf00      	nop
 8000ff0:	24001918 	.word	0x24001918
 8000ff4:	08016dec 	.word	0x08016dec

08000ff8 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	VOLTAGE_RAIL *rail_monitor_ptr;
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <Voltage_Monitor_init+0xa8>)
 8001002:	6818      	ldr	r0, [r3, #0]
 8001004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001008:	2200      	movs	r2, #0
 800100a:	2101      	movs	r1, #1
 800100c:	f011 ffba 	bl	8012f84 <osEventFlagsWait>
	  		osWaitForever);

	  set_rail_monitor();
 8001010:	f002 fe24 	bl	8003c5c <set_rail_monitor>

	  rail_monitor_ptr = get_rail_monitor();
 8001014:	f002 fe18 	bl	8003c48 <get_rail_monitor>
 8001018:	60b8      	str	r0, [r7, #8]

		// Iterate through all voltage rails
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	e03b      	b.n	8001098 <Voltage_Monitor_init+0xa0>
			if (rail_monitor_ptr[i].is_enabled){
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	4613      	mov	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	461a      	mov	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	4413      	add	r3, r2
 8001030:	789b      	ldrb	r3, [r3, #2]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d02d      	beq.n	8001092 <Voltage_Monitor_init+0x9a>
				// If current rail is not in range...
				if (!in_range(rail_monitor_ptr[i].data, rail_monitor_ptr[i].min_voltage, rail_monitor_ptr[i].max_voltage)){
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	461a      	mov	r2, r3
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	4413      	add	r3, r2
 8001046:	8898      	ldrh	r0, [r3, #4]
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	4613      	mov	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	461a      	mov	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	4413      	add	r3, r2
 8001058:	891b      	ldrh	r3, [r3, #8]
 800105a:	4619      	mov	r1, r3
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	4613      	mov	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	461a      	mov	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	4413      	add	r3, r2
 800106c:	88db      	ldrh	r3, [r3, #6]
 800106e:	461a      	mov	r2, r3
 8001070:	f002 fe56 	bl	8003d20 <in_range>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10b      	bne.n	8001092 <Voltage_Monitor_init+0x9a>
					// Increase that rails error count
					rail_monitor_ptr[i].error_count++;
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	461a      	mov	r2, r3
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	4413      	add	r3, r2
 800108a:	785a      	ldrb	r2, [r3, #1]
 800108c:	3201      	adds	r2, #1
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	705a      	strb	r2, [r3, #1]
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3301      	adds	r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b11      	cmp	r3, #17
 800109c:	ddc0      	ble.n	8001020 <Voltage_Monitor_init+0x28>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 800109e:	e7af      	b.n	8001000 <Voltage_Monitor_init+0x8>
 80010a0:	24001918 	.word	0x24001918

080010a4 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <STOP_init+0x2c>)
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010b4:	2200      	movs	r2, #0
 80010b6:	2102      	movs	r1, #2
 80010b8:	f011 ff64 	bl	8012f84 <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <STOP_init+0x2c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2102      	movs	r1, #2
 80010c2:	4618      	mov	r0, r3
 80010c4:	f011 ff2c 	bl	8012f20 <osEventFlagsClear>

	  enter_stop();
 80010c8:	f001 f84e 	bl	8002168 <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80010cc:	e7ee      	b.n	80010ac <STOP_init+0x8>
 80010ce:	bf00      	nop
 80010d0:	24001918 	.word	0x24001918

080010d4 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af02      	add	r7, sp, #8
 80010da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <Science_init+0xa4>)
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010e4:	2200      	movs	r2, #0
 80010e6:	2101      	movs	r1, #1
 80010e8:	f011 ff4c 	bl	8012f84 <osEventFlagsWait>

		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	e012      	b.n	8001118 <Science_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 80010f2:	4a22      	ldr	r2, [pc, #136]	; (800117c <Science_init+0xa8>)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80010fa:	4a20      	ldr	r2, [pc, #128]	; (800117c <Science_init+0xa8>)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	4413      	add	r3, r2
 8001102:	889b      	ldrh	r3, [r3, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	4619      	mov	r1, r3
 8001108:	f007 ffd4 	bl	80090b4 <HAL_GPIO_WritePin>
			osDelay(200);
 800110c:	20c8      	movs	r0, #200	; 0xc8
 800110e:	f011 fe69 	bl	8012de4 <osDelay>
		for (int i = 0; i < 9; i++) {
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3301      	adds	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2b08      	cmp	r3, #8
 800111c:	dde9      	ble.n	80010f2 <Science_init+0x1e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 800111e:	2308      	movs	r3, #8
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	e008      	b.n	8001136 <Science_init+0x62>
			set_rail_monitor_enable(i, 1);
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2101      	movs	r1, #1
 800112a:	4618      	mov	r0, r3
 800112c:	f002 fd6c 	bl	8003c08 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	3301      	adds	r3, #1
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	2b10      	cmp	r3, #16
 800113a:	ddf3      	ble.n	8001124 <Science_init+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 8001140:	2300      	movs	r3, #0
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2320      	movs	r3, #32
 8001146:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <Science_init+0xac>)
 8001148:	2100      	movs	r1, #0
 800114a:	480e      	ldr	r0, [pc, #56]	; (8001184 <Science_init+0xb0>)
 800114c:	f004 fc16 	bl	800597c <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 8001150:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <Science_init+0xb4>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <Science_init+0xb8>)
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);			// ERPA packet on
 800115c:	210c      	movs	r1, #12
 800115e:	480c      	ldr	r0, [pc, #48]	; (8001190 <Science_init+0xbc>)
 8001160:	f00d fbac 	bl	800e8bc <HAL_TIM_OC_Start_IT>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 8001164:	2100      	movs	r1, #0
 8001166:	480b      	ldr	r0, [pc, #44]	; (8001194 <Science_init+0xc0>)
 8001168:	f00d fba8 	bl	800e8bc <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 800116c:	b662      	cpsie	i
}
 800116e:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 8001170:	f011 fe18 	bl	8012da4 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8001174:	e7b2      	b.n	80010dc <Science_init+0x8>
 8001176:	bf00      	nop
 8001178:	2400191c 	.word	0x2400191c
 800117c:	08016dec 	.word	0x08016dec
 8001180:	24000000 	.word	0x24000000
 8001184:	240002d4 	.word	0x240002d4
 8001188:	24001960 	.word	0x24001960
 800118c:	24001964 	.word	0x24001964
 8001190:	24001b74 	.word	0x24001b74
 8001194:	24001b28 	.word	0x24001b28

08001198 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80011a0:	4b20      	ldr	r3, [pc, #128]	; (8001224 <Idle_init+0x8c>)
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011a8:	2200      	movs	r2, #0
 80011aa:	2102      	movs	r1, #2
 80011ac:	f011 feea 	bl	8012f84 <osEventFlagsWait>


		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);			// ERPA packet off
 80011b0:	210c      	movs	r1, #12
 80011b2:	481d      	ldr	r0, [pc, #116]	; (8001228 <Idle_init+0x90>)
 80011b4:	f00d fcdc 	bl	800eb70 <HAL_TIM_OC_Stop_IT>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 80011b8:	2100      	movs	r1, #0
 80011ba:	481c      	ldr	r0, [pc, #112]	; (800122c <Idle_init+0x94>)
 80011bc:	f00d fcd8 	bl	800eb70 <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <Idle_init+0x98>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 80011c6:	2100      	movs	r1, #0
 80011c8:	481a      	ldr	r0, [pc, #104]	; (8001234 <Idle_init+0x9c>)
 80011ca:	f004 fc97 	bl	8005afc <HAL_DAC_Stop_DMA>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80011ce:	2310      	movs	r3, #16
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	e008      	b.n	80011e6 <Idle_init+0x4e>
			set_rail_monitor_enable(i, 0);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f002 fd14 	bl	8003c08 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2b07      	cmp	r3, #7
 80011ea:	dcf3      	bgt.n	80011d4 <Idle_init+0x3c>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 80011ec:	2308      	movs	r3, #8
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	e012      	b.n	8001218 <Idle_init+0x80>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80011f2:	4a11      	ldr	r2, [pc, #68]	; (8001238 <Idle_init+0xa0>)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80011fa:	4a0f      	ldr	r2, [pc, #60]	; (8001238 <Idle_init+0xa0>)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	4413      	add	r3, r2
 8001202:	889b      	ldrh	r3, [r3, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	4619      	mov	r1, r3
 8001208:	f007 ff54 	bl	80090b4 <HAL_GPIO_WritePin>
			osDelay(200);
 800120c:	20c8      	movs	r0, #200	; 0xc8
 800120e:	f011 fde9 	bl	8012de4 <osDelay>
		for (int i = 8; i >= 0; i--) {
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	3b01      	subs	r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	2b00      	cmp	r3, #0
 800121c:	dae9      	bge.n	80011f2 <Idle_init+0x5a>
		}

		// Yield thread control
		osThreadYield();
 800121e:	f011 fdc1 	bl	8012da4 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8001222:	e7bd      	b.n	80011a0 <Idle_init+0x8>
 8001224:	2400191c 	.word	0x2400191c
 8001228:	24001b74 	.word	0x24001b74
 800122c:	24001b28 	.word	0x24001b28
 8001230:	24001960 	.word	0x24001960
 8001234:	240002d4 	.word	0x240002d4
 8001238:	08016dec 	.word	0x08016dec

0800123c <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	4b34      	ldr	r3, [pc, #208]	; (8001324 <MX_GPIO_Init+0xe8>)
 8001254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001258:	4a32      	ldr	r2, [pc, #200]	; (8001324 <MX_GPIO_Init+0xe8>)
 800125a:	f043 0304 	orr.w	r3, r3, #4
 800125e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001262:	4b30      	ldr	r3, [pc, #192]	; (8001324 <MX_GPIO_Init+0xe8>)
 8001264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001270:	4b2c      	ldr	r3, [pc, #176]	; (8001324 <MX_GPIO_Init+0xe8>)
 8001272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001276:	4a2b      	ldr	r2, [pc, #172]	; (8001324 <MX_GPIO_Init+0xe8>)
 8001278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800127c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001280:	4b28      	ldr	r3, [pc, #160]	; (8001324 <MX_GPIO_Init+0xe8>)
 8001282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	4b25      	ldr	r3, [pc, #148]	; (8001324 <MX_GPIO_Init+0xe8>)
 8001290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001294:	4a23      	ldr	r2, [pc, #140]	; (8001324 <MX_GPIO_Init+0xe8>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129e:	4b21      	ldr	r3, [pc, #132]	; (8001324 <MX_GPIO_Init+0xe8>)
 80012a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ac:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <MX_GPIO_Init+0xe8>)
 80012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b2:	4a1c      	ldr	r2, [pc, #112]	; (8001324 <MX_GPIO_Init+0xe8>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <MX_GPIO_Init+0xe8>)
 80012be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80012ca:	2200      	movs	r2, #0
 80012cc:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 80012d0:	4815      	ldr	r0, [pc, #84]	; (8001328 <MX_GPIO_Init+0xec>)
 80012d2:	f007 feef 	bl	80090b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2164      	movs	r1, #100	; 0x64
 80012da:	4814      	ldr	r0, [pc, #80]	; (800132c <MX_GPIO_Init+0xf0>)
 80012dc:	f007 feea 	bl	80090b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80012e0:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 80012e4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012ea:	2302      	movs	r3, #2
 80012ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	480b      	ldr	r0, [pc, #44]	; (8001328 <MX_GPIO_Init+0xec>)
 80012fa:	f007 fd13 	bl	8008d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80012fe:	2364      	movs	r3, #100	; 0x64
 8001300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001302:	2301      	movs	r3, #1
 8001304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001306:	2302      	movs	r3, #2
 8001308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_GPIO_Init+0xf0>)
 8001316:	f007 fd05 	bl	8008d24 <HAL_GPIO_Init>

}
 800131a:	bf00      	nop
 800131c:	3728      	adds	r7, #40	; 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	58024400 	.word	0x58024400
 8001328:	58020800 	.word	0x58020800
 800132c:	58020400 	.word	0x58020400

08001330 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001334:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <MX_I2C1_Init+0x78>)
 8001336:	4a1d      	ldr	r2, [pc, #116]	; (80013ac <MX_I2C1_Init+0x7c>)
 8001338:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 800133a:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <MX_I2C1_Init+0x78>)
 800133c:	4a1c      	ldr	r2, [pc, #112]	; (80013b0 <MX_I2C1_Init+0x80>)
 800133e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <MX_I2C1_Init+0x78>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <MX_I2C1_Init+0x78>)
 8001348:	2201      	movs	r2, #1
 800134a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <MX_I2C1_Init+0x78>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <MX_I2C1_Init+0x78>)
 8001354:	2200      	movs	r2, #0
 8001356:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001358:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <MX_I2C1_Init+0x78>)
 800135a:	2200      	movs	r2, #0
 800135c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800135e:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <MX_I2C1_Init+0x78>)
 8001360:	2200      	movs	r2, #0
 8001362:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001364:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <MX_I2C1_Init+0x78>)
 8001366:	2200      	movs	r2, #0
 8001368:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800136a:	480f      	ldr	r0, [pc, #60]	; (80013a8 <MX_I2C1_Init+0x78>)
 800136c:	f007 febc 	bl	80090e8 <HAL_I2C_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001376:	f000 ff15 	bl	80021a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800137a:	2100      	movs	r1, #0
 800137c:	480a      	ldr	r0, [pc, #40]	; (80013a8 <MX_I2C1_Init+0x78>)
 800137e:	f008 fc03 	bl	8009b88 <HAL_I2CEx_ConfigAnalogFilter>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001388:	f000 ff0c 	bl	80021a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800138c:	2100      	movs	r1, #0
 800138e:	4806      	ldr	r0, [pc, #24]	; (80013a8 <MX_I2C1_Init+0x78>)
 8001390:	f008 fc45 	bl	8009c1e <HAL_I2CEx_ConfigDigitalFilter>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800139a:	f000 ff03 	bl	80021a4 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800139e:	2001      	movs	r0, #1
 80013a0:	f008 fc8a 	bl	8009cb8 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	240018c0 	.word	0x240018c0
 80013ac:	40005400 	.word	0x40005400
 80013b0:	0020081f 	.word	0x0020081f

080013b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b0ba      	sub	sp, #232	; 0xe8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	22c0      	movs	r2, #192	; 0xc0
 80013d2:	2100      	movs	r1, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f014 fe21 	bl	801601c <memset>
  if(i2cHandle->Instance==I2C1)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a27      	ldr	r2, [pc, #156]	; (800147c <HAL_I2C_MspInit+0xc8>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d146      	bne.n	8001472 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013e4:	f04f 0208 	mov.w	r2, #8
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013f6:	f107 0310 	add.w	r3, r7, #16
 80013fa:	4618      	mov	r0, r3
 80013fc:	f009 fd1e 	bl	800ae3c <HAL_RCCEx_PeriphCLKConfig>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001406:	f000 fecd 	bl	80021a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <HAL_I2C_MspInit+0xcc>)
 800140c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001410:	4a1b      	ldr	r2, [pc, #108]	; (8001480 <HAL_I2C_MspInit+0xcc>)
 8001412:	f043 0302 	orr.w	r3, r3, #2
 8001416:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_I2C_MspInit+0xcc>)
 800141c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001428:	f44f 7340 	mov.w	r3, #768	; 0x300
 800142c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001430:	2312      	movs	r3, #18
 8001432:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001442:	2304      	movs	r3, #4
 8001444:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001448:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800144c:	4619      	mov	r1, r3
 800144e:	480d      	ldr	r0, [pc, #52]	; (8001484 <HAL_I2C_MspInit+0xd0>)
 8001450:	f007 fc68 	bl	8008d24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <HAL_I2C_MspInit+0xcc>)
 8001456:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800145a:	4a09      	ldr	r2, [pc, #36]	; (8001480 <HAL_I2C_MspInit+0xcc>)
 800145c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001460:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_I2C_MspInit+0xcc>)
 8001466:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800146a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001472:	bf00      	nop
 8001474:	37e8      	adds	r7, #232	; 0xe8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40005400 	.word	0x40005400
 8001480:	58024400 	.word	0x58024400
 8001484:	58020400 	.word	0x58020400

08001488 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800148c:	f3bf 8f4f 	dsb	sy
}
 8001490:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <__NVIC_SystemReset+0x24>)
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800149a:	4904      	ldr	r1, [pc, #16]	; (80014ac <__NVIC_SystemReset+0x24>)
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <__NVIC_SystemReset+0x28>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80014a2:	f3bf 8f4f 	dsb	sy
}
 80014a6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <__NVIC_SystemReset+0x20>
 80014ac:	e000ed00 	.word	0xe000ed00
 80014b0:	05fa0004 	.word	0x05fa0004

080014b4 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a1e      	ldr	r2, [pc, #120]	; (8001538 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d106      	bne.n	80014d2 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 80014c4:	4b1d      	ldr	r3, [pc, #116]	; (800153c <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2101      	movs	r1, #1
 80014ca:	4618      	mov	r0, r3
 80014cc:	f011 fce4 	bl	8012e98 <osEventFlagsSet>
		HK_100_ms_counter++;

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 80014d0:	e02d      	b.n	800152e <HAL_TIM_OC_DelayElapsedCallback+0x7a>
	else if (htim == &htim2) {
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a1a      	ldr	r2, [pc, #104]	; (8001540 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d126      	bne.n	8001528 <HAL_TIM_OC_DelayElapsedCallback+0x74>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2102      	movs	r1, #2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f011 fcd9 	bl	8012e98 <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b20      	cmp	r3, #32
 80014ee:	d113      	bne.n	8001518 <HAL_TIM_OC_DelayElapsedCallback+0x64>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 80014f0:	4b15      	ldr	r3, [pc, #84]	; (8001548 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2101      	movs	r1, #1
 80014f6:	4618      	mov	r0, r3
 80014f8:	f011 fcce 	bl	8012e98 <osEventFlagsSet>
			if (HK_ENABLED){
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d005      	beq.n	8001512 <HAL_TIM_OC_DelayElapsedCallback+0x5e>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2104      	movs	r1, #4
 800150c:	4618      	mov	r0, r3
 800150e:	f011 fcc3 	bl	8012e98 <osEventFlagsSet>
			HK_100_ms_counter = 0;
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 8001518:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	3301      	adds	r3, #1
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8001524:	701a      	strb	r2, [r3, #0]
}
 8001526:	e002      	b.n	800152e <HAL_TIM_OC_DelayElapsedCallback+0x7a>
		printf("Unknown Timer Interrupt\n");
 8001528:	4809      	ldr	r0, [pc, #36]	; (8001550 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 800152a:	f014 fded 	bl	8016108 <puts>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	24001b28 	.word	0x24001b28
 800153c:	24001914 	.word	0x24001914
 8001540:	24001b74 	.word	0x24001b74
 8001544:	24001968 	.word	0x24001968
 8001548:	24001918 	.word	0x24001918
 800154c:	24001960 	.word	0x24001960
 8001550:	08016ab8 	.word	0x08016ab8

08001554 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af02      	add	r7, sp, #8
 800155a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800155c:	2201      	movs	r2, #1
 800155e:	49f2      	ldr	r1, [pc, #968]	; (8001928 <HAL_UART_RxCpltCallback+0x3d4>)
 8001560:	48f2      	ldr	r0, [pc, #968]	; (800192c <HAL_UART_RxCpltCallback+0x3d8>)
 8001562:	f00e fe8b 	bl	801027c <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8001566:	4bf0      	ldr	r3, [pc, #960]	; (8001928 <HAL_UART_RxCpltCallback+0x3d4>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	2be0      	cmp	r3, #224	; 0xe0
 8001570:	f200 8419 	bhi.w	8001da6 <HAL_UART_RxCpltCallback+0x852>
 8001574:	a201      	add	r2, pc, #4	; (adr r2, 800157c <HAL_UART_RxCpltCallback+0x28>)
 8001576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157a:	bf00      	nop
 800157c:	08001915 	.word	0x08001915
 8001580:	08001959 	.word	0x08001959
 8001584:	080019c9 	.word	0x080019c9
 8001588:	08001a03 	.word	0x08001a03
 800158c:	08001a3b 	.word	0x08001a3b
 8001590:	08001a75 	.word	0x08001a75
 8001594:	08001ab1 	.word	0x08001ab1
 8001598:	08001aed 	.word	0x08001aed
 800159c:	08001b27 	.word	0x08001b27
 80015a0:	08001b5b 	.word	0x08001b5b
 80015a4:	08001b87 	.word	0x08001b87
 80015a8:	08001bb3 	.word	0x08001bb3
 80015ac:	08001bdd 	.word	0x08001bdd
 80015b0:	08001cb9 	.word	0x08001cb9
 80015b4:	08001d21 	.word	0x08001d21
 80015b8:	08001d49 	.word	0x08001d49
 80015bc:	08001901 	.word	0x08001901
 80015c0:	0800193d 	.word	0x0800193d
 80015c4:	080019ab 	.word	0x080019ab
 80015c8:	080019e7 	.word	0x080019e7
 80015cc:	08001a1f 	.word	0x08001a1f
 80015d0:	08001a57 	.word	0x08001a57
 80015d4:	08001a93 	.word	0x08001a93
 80015d8:	08001acf 	.word	0x08001acf
 80015dc:	08001b0b 	.word	0x08001b0b
 80015e0:	08001b43 	.word	0x08001b43
 80015e4:	08001b6b 	.word	0x08001b6b
 80015e8:	08001b97 	.word	0x08001b97
 80015ec:	08001bc3 	.word	0x08001bc3
 80015f0:	08001beb 	.word	0x08001beb
 80015f4:	08001cf9 	.word	0x08001cf9
 80015f8:	08001da7 	.word	0x08001da7
 80015fc:	08001da7 	.word	0x08001da7
 8001600:	08001da7 	.word	0x08001da7
 8001604:	08001da7 	.word	0x08001da7
 8001608:	08001da7 	.word	0x08001da7
 800160c:	08001da7 	.word	0x08001da7
 8001610:	08001da7 	.word	0x08001da7
 8001614:	08001da7 	.word	0x08001da7
 8001618:	08001da7 	.word	0x08001da7
 800161c:	08001da7 	.word	0x08001da7
 8001620:	08001da7 	.word	0x08001da7
 8001624:	08001da7 	.word	0x08001da7
 8001628:	08001da7 	.word	0x08001da7
 800162c:	08001da7 	.word	0x08001da7
 8001630:	08001da7 	.word	0x08001da7
 8001634:	08001da7 	.word	0x08001da7
 8001638:	08001da7 	.word	0x08001da7
 800163c:	08001da7 	.word	0x08001da7
 8001640:	08001da7 	.word	0x08001da7
 8001644:	08001da7 	.word	0x08001da7
 8001648:	08001da7 	.word	0x08001da7
 800164c:	08001da7 	.word	0x08001da7
 8001650:	08001da7 	.word	0x08001da7
 8001654:	08001da7 	.word	0x08001da7
 8001658:	08001da7 	.word	0x08001da7
 800165c:	08001da7 	.word	0x08001da7
 8001660:	08001da7 	.word	0x08001da7
 8001664:	08001da7 	.word	0x08001da7
 8001668:	08001da7 	.word	0x08001da7
 800166c:	08001da7 	.word	0x08001da7
 8001670:	08001da7 	.word	0x08001da7
 8001674:	08001da7 	.word	0x08001da7
 8001678:	08001da7 	.word	0x08001da7
 800167c:	08001da7 	.word	0x08001da7
 8001680:	08001da7 	.word	0x08001da7
 8001684:	08001da7 	.word	0x08001da7
 8001688:	08001da7 	.word	0x08001da7
 800168c:	08001da7 	.word	0x08001da7
 8001690:	08001da7 	.word	0x08001da7
 8001694:	08001da7 	.word	0x08001da7
 8001698:	08001da7 	.word	0x08001da7
 800169c:	08001da7 	.word	0x08001da7
 80016a0:	08001da7 	.word	0x08001da7
 80016a4:	08001da7 	.word	0x08001da7
 80016a8:	08001da7 	.word	0x08001da7
 80016ac:	08001da7 	.word	0x08001da7
 80016b0:	08001da7 	.word	0x08001da7
 80016b4:	08001da7 	.word	0x08001da7
 80016b8:	08001da7 	.word	0x08001da7
 80016bc:	08001da7 	.word	0x08001da7
 80016c0:	08001da7 	.word	0x08001da7
 80016c4:	08001da7 	.word	0x08001da7
 80016c8:	08001da7 	.word	0x08001da7
 80016cc:	08001da7 	.word	0x08001da7
 80016d0:	08001da7 	.word	0x08001da7
 80016d4:	08001da7 	.word	0x08001da7
 80016d8:	08001da7 	.word	0x08001da7
 80016dc:	08001da7 	.word	0x08001da7
 80016e0:	08001da7 	.word	0x08001da7
 80016e4:	08001da7 	.word	0x08001da7
 80016e8:	08001da7 	.word	0x08001da7
 80016ec:	08001da7 	.word	0x08001da7
 80016f0:	08001da7 	.word	0x08001da7
 80016f4:	08001da7 	.word	0x08001da7
 80016f8:	08001da7 	.word	0x08001da7
 80016fc:	08001da7 	.word	0x08001da7
 8001700:	08001da7 	.word	0x08001da7
 8001704:	08001da7 	.word	0x08001da7
 8001708:	08001da7 	.word	0x08001da7
 800170c:	08001da7 	.word	0x08001da7
 8001710:	08001da7 	.word	0x08001da7
 8001714:	08001da7 	.word	0x08001da7
 8001718:	08001da7 	.word	0x08001da7
 800171c:	08001da7 	.word	0x08001da7
 8001720:	08001da7 	.word	0x08001da7
 8001724:	08001da7 	.word	0x08001da7
 8001728:	08001da7 	.word	0x08001da7
 800172c:	08001da7 	.word	0x08001da7
 8001730:	08001da7 	.word	0x08001da7
 8001734:	08001da7 	.word	0x08001da7
 8001738:	08001da7 	.word	0x08001da7
 800173c:	08001da7 	.word	0x08001da7
 8001740:	08001da7 	.word	0x08001da7
 8001744:	08001da7 	.word	0x08001da7
 8001748:	08001da7 	.word	0x08001da7
 800174c:	08001da7 	.word	0x08001da7
 8001750:	08001da7 	.word	0x08001da7
 8001754:	08001da7 	.word	0x08001da7
 8001758:	08001da7 	.word	0x08001da7
 800175c:	08001da7 	.word	0x08001da7
 8001760:	08001da7 	.word	0x08001da7
 8001764:	08001da7 	.word	0x08001da7
 8001768:	08001da7 	.word	0x08001da7
 800176c:	08001da7 	.word	0x08001da7
 8001770:	08001da7 	.word	0x08001da7
 8001774:	08001da7 	.word	0x08001da7
 8001778:	08001da7 	.word	0x08001da7
 800177c:	08001da7 	.word	0x08001da7
 8001780:	08001da7 	.word	0x08001da7
 8001784:	08001da7 	.word	0x08001da7
 8001788:	08001da7 	.word	0x08001da7
 800178c:	08001da7 	.word	0x08001da7
 8001790:	08001da7 	.word	0x08001da7
 8001794:	08001da7 	.word	0x08001da7
 8001798:	08001da7 	.word	0x08001da7
 800179c:	08001da7 	.word	0x08001da7
 80017a0:	08001da7 	.word	0x08001da7
 80017a4:	08001da7 	.word	0x08001da7
 80017a8:	08001da7 	.word	0x08001da7
 80017ac:	08001da7 	.word	0x08001da7
 80017b0:	08001da7 	.word	0x08001da7
 80017b4:	08001da7 	.word	0x08001da7
 80017b8:	08001da7 	.word	0x08001da7
 80017bc:	08001da7 	.word	0x08001da7
 80017c0:	08001da7 	.word	0x08001da7
 80017c4:	08001da7 	.word	0x08001da7
 80017c8:	08001da7 	.word	0x08001da7
 80017cc:	08001da7 	.word	0x08001da7
 80017d0:	08001da7 	.word	0x08001da7
 80017d4:	08001da7 	.word	0x08001da7
 80017d8:	08001da7 	.word	0x08001da7
 80017dc:	08001da7 	.word	0x08001da7
 80017e0:	08001da7 	.word	0x08001da7
 80017e4:	08001da7 	.word	0x08001da7
 80017e8:	08001da7 	.word	0x08001da7
 80017ec:	08001da7 	.word	0x08001da7
 80017f0:	08001da7 	.word	0x08001da7
 80017f4:	08001da7 	.word	0x08001da7
 80017f8:	08001da7 	.word	0x08001da7
 80017fc:	08001da7 	.word	0x08001da7
 8001800:	08001da7 	.word	0x08001da7
 8001804:	08001da7 	.word	0x08001da7
 8001808:	08001da7 	.word	0x08001da7
 800180c:	08001da7 	.word	0x08001da7
 8001810:	08001da7 	.word	0x08001da7
 8001814:	08001da7 	.word	0x08001da7
 8001818:	08001da7 	.word	0x08001da7
 800181c:	08001da7 	.word	0x08001da7
 8001820:	08001da7 	.word	0x08001da7
 8001824:	08001da7 	.word	0x08001da7
 8001828:	08001da7 	.word	0x08001da7
 800182c:	08001da7 	.word	0x08001da7
 8001830:	08001da7 	.word	0x08001da7
 8001834:	08001da7 	.word	0x08001da7
 8001838:	08001d85 	.word	0x08001d85
 800183c:	08001da7 	.word	0x08001da7
 8001840:	08001da7 	.word	0x08001da7
 8001844:	08001da7 	.word	0x08001da7
 8001848:	08001da7 	.word	0x08001da7
 800184c:	08001da7 	.word	0x08001da7
 8001850:	08001da7 	.word	0x08001da7
 8001854:	08001da7 	.word	0x08001da7
 8001858:	08001da7 	.word	0x08001da7
 800185c:	08001da7 	.word	0x08001da7
 8001860:	08001da7 	.word	0x08001da7
 8001864:	08001da7 	.word	0x08001da7
 8001868:	08001da7 	.word	0x08001da7
 800186c:	08001da7 	.word	0x08001da7
 8001870:	08001da7 	.word	0x08001da7
 8001874:	08001da7 	.word	0x08001da7
 8001878:	08001d8b 	.word	0x08001d8b
 800187c:	08001da7 	.word	0x08001da7
 8001880:	08001da7 	.word	0x08001da7
 8001884:	08001da7 	.word	0x08001da7
 8001888:	08001da7 	.word	0x08001da7
 800188c:	08001da7 	.word	0x08001da7
 8001890:	08001da7 	.word	0x08001da7
 8001894:	08001da7 	.word	0x08001da7
 8001898:	08001da7 	.word	0x08001da7
 800189c:	08001da7 	.word	0x08001da7
 80018a0:	08001da7 	.word	0x08001da7
 80018a4:	08001da7 	.word	0x08001da7
 80018a8:	08001da7 	.word	0x08001da7
 80018ac:	08001da7 	.word	0x08001da7
 80018b0:	08001da7 	.word	0x08001da7
 80018b4:	08001da7 	.word	0x08001da7
 80018b8:	08001d99 	.word	0x08001d99
 80018bc:	08001d71 	.word	0x08001d71
 80018c0:	08001da7 	.word	0x08001da7
 80018c4:	08001da7 	.word	0x08001da7
 80018c8:	08001da7 	.word	0x08001da7
 80018cc:	08001da7 	.word	0x08001da7
 80018d0:	08001da7 	.word	0x08001da7
 80018d4:	08001da7 	.word	0x08001da7
 80018d8:	08001da7 	.word	0x08001da7
 80018dc:	08001da7 	.word	0x08001da7
 80018e0:	08001da7 	.word	0x08001da7
 80018e4:	08001da7 	.word	0x08001da7
 80018e8:	08001da7 	.word	0x08001da7
 80018ec:	08001da7 	.word	0x08001da7
 80018f0:	08001da7 	.word	0x08001da7
 80018f4:	08001da7 	.word	0x08001da7
 80018f8:	08001da7 	.word	0x08001da7
 80018fc:	08001d5d 	.word	0x08001d5d
	case 0x10: {
		printf("SDN1 ON\n");
 8001900:	480b      	ldr	r0, [pc, #44]	; (8001930 <HAL_UART_RxCpltCallback+0x3dc>)
 8001902:	f014 fc01 	bl	8016108 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8001906:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_UART_RxCpltCallback+0x3e0>)
 8001908:	2104      	movs	r1, #4
 800190a:	2201      	movs	r2, #1
 800190c:	4618      	mov	r0, r3
 800190e:	f007 fbd1 	bl	80090b4 <HAL_GPIO_WritePin>
		break;
 8001912:	e253      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8001914:	4808      	ldr	r0, [pc, #32]	; (8001938 <HAL_UART_RxCpltCallback+0x3e4>)
 8001916:	f014 fbf7 	bl	8016108 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_UART_RxCpltCallback+0x3e0>)
 800191c:	2104      	movs	r1, #4
 800191e:	2200      	movs	r2, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f007 fbc7 	bl	80090b4 <HAL_GPIO_WritePin>
		break;
 8001926:	e249      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
 8001928:	24001920 	.word	0x24001920
 800192c:	24001bc0 	.word	0x24001bc0
 8001930:	08016ad0 	.word	0x08016ad0
 8001934:	58020400 	.word	0x58020400
 8001938:	08016ad8 	.word	0x08016ad8
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 800193c:	48bb      	ldr	r0, [pc, #748]	; (8001c2c <HAL_UART_RxCpltCallback+0x6d8>)
 800193e:	f014 fbe3 	bl	8016108 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8001942:	4bbb      	ldr	r3, [pc, #748]	; (8001c30 <HAL_UART_RxCpltCallback+0x6dc>)
 8001944:	2120      	movs	r1, #32
 8001946:	2201      	movs	r2, #1
 8001948:	4618      	mov	r0, r3
 800194a:	f007 fbb3 	bl	80090b4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 800194e:	2101      	movs	r1, #1
 8001950:	2008      	movs	r0, #8
 8001952:	f002 f959 	bl	8003c08 <set_rail_monitor_enable>
		break;
 8001956:	e231      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8001958:	48b6      	ldr	r0, [pc, #728]	; (8001c34 <HAL_UART_RxCpltCallback+0x6e0>)
 800195a:	f014 fbd5 	bl	8016108 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 800195e:	2308      	movs	r3, #8
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	e00f      	b.n	8001984 <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8001964:	4ab4      	ldr	r2, [pc, #720]	; (8001c38 <HAL_UART_RxCpltCallback+0x6e4>)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800196c:	4ab2      	ldr	r2, [pc, #712]	; (8001c38 <HAL_UART_RxCpltCallback+0x6e4>)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4413      	add	r3, r2
 8001974:	889b      	ldrh	r3, [r3, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	4619      	mov	r1, r3
 800197a:	f007 fb9b 	bl	80090b4 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	3b01      	subs	r3, #1
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b00      	cmp	r3, #0
 8001988:	dcec      	bgt.n	8001964 <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 800198a:	2310      	movs	r3, #16
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	e008      	b.n	80019a2 <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f002 f936 	bl	8003c08 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	3b01      	subs	r3, #1
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	2b07      	cmp	r3, #7
 80019a6:	dcf3      	bgt.n	8001990 <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 80019a8:	e208      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 80019aa:	48a4      	ldr	r0, [pc, #656]	; (8001c3c <HAL_UART_RxCpltCallback+0x6e8>)
 80019ac:	f014 fbac 	bl	8016108 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 80019b0:	4ba3      	ldr	r3, [pc, #652]	; (8001c40 <HAL_UART_RxCpltCallback+0x6ec>)
 80019b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019b6:	2201      	movs	r2, #1
 80019b8:	4618      	mov	r0, r3
 80019ba:	f007 fb7b 	bl	80090b4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 80019be:	2101      	movs	r1, #1
 80019c0:	2009      	movs	r0, #9
 80019c2:	f002 f921 	bl	8003c08 <set_rail_monitor_enable>

		break;
 80019c6:	e1f9      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 80019c8:	489e      	ldr	r0, [pc, #632]	; (8001c44 <HAL_UART_RxCpltCallback+0x6f0>)
 80019ca:	f014 fb9d 	bl	8016108 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 80019ce:	4b9c      	ldr	r3, [pc, #624]	; (8001c40 <HAL_UART_RxCpltCallback+0x6ec>)
 80019d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019d4:	2200      	movs	r2, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f007 fb6c 	bl	80090b4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 80019dc:	2100      	movs	r1, #0
 80019de:	2009      	movs	r0, #9
 80019e0:	f002 f912 	bl	8003c08 <set_rail_monitor_enable>
		break;
 80019e4:	e1ea      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 80019e6:	4898      	ldr	r0, [pc, #608]	; (8001c48 <HAL_UART_RxCpltCallback+0x6f4>)
 80019e8:	f014 fb8e 	bl	8016108 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 80019ec:	4b94      	ldr	r3, [pc, #592]	; (8001c40 <HAL_UART_RxCpltCallback+0x6ec>)
 80019ee:	2180      	movs	r1, #128	; 0x80
 80019f0:	2201      	movs	r2, #1
 80019f2:	4618      	mov	r0, r3
 80019f4:	f007 fb5e 	bl	80090b4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 80019f8:	2101      	movs	r1, #1
 80019fa:	200a      	movs	r0, #10
 80019fc:	f002 f904 	bl	8003c08 <set_rail_monitor_enable>

		break;
 8001a00:	e1dc      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8001a02:	4892      	ldr	r0, [pc, #584]	; (8001c4c <HAL_UART_RxCpltCallback+0x6f8>)
 8001a04:	f014 fb80 	bl	8016108 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8001a08:	4b8d      	ldr	r3, [pc, #564]	; (8001c40 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a0a:	2180      	movs	r1, #128	; 0x80
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f007 fb50 	bl	80090b4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8001a14:	2100      	movs	r1, #0
 8001a16:	200a      	movs	r0, #10
 8001a18:	f002 f8f6 	bl	8003c08 <set_rail_monitor_enable>
		break;
 8001a1c:	e1ce      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8001a1e:	488c      	ldr	r0, [pc, #560]	; (8001c50 <HAL_UART_RxCpltCallback+0x6fc>)
 8001a20:	f014 fb72 	bl	8016108 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8001a24:	4b86      	ldr	r3, [pc, #536]	; (8001c40 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a26:	2140      	movs	r1, #64	; 0x40
 8001a28:	2201      	movs	r2, #1
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f007 fb42 	bl	80090b4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8001a30:	2101      	movs	r1, #1
 8001a32:	200b      	movs	r0, #11
 8001a34:	f002 f8e8 	bl	8003c08 <set_rail_monitor_enable>

		break;
 8001a38:	e1c0      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8001a3a:	4886      	ldr	r0, [pc, #536]	; (8001c54 <HAL_UART_RxCpltCallback+0x700>)
 8001a3c:	f014 fb64 	bl	8016108 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8001a40:	4b7f      	ldr	r3, [pc, #508]	; (8001c40 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a42:	2140      	movs	r1, #64	; 0x40
 8001a44:	2200      	movs	r2, #0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f007 fb34 	bl	80090b4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	200b      	movs	r0, #11
 8001a50:	f002 f8da 	bl	8003c08 <set_rail_monitor_enable>
		break;
 8001a54:	e1b2      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8001a56:	4880      	ldr	r0, [pc, #512]	; (8001c58 <HAL_UART_RxCpltCallback+0x704>)
 8001a58:	f014 fb56 	bl	8016108 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8001a5c:	4b78      	ldr	r3, [pc, #480]	; (8001c40 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a62:	2201      	movs	r2, #1
 8001a64:	4618      	mov	r0, r3
 8001a66:	f007 fb25 	bl	80090b4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	200c      	movs	r0, #12
 8001a6e:	f002 f8cb 	bl	8003c08 <set_rail_monitor_enable>

		break;
 8001a72:	e1a3      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8001a74:	4879      	ldr	r0, [pc, #484]	; (8001c5c <HAL_UART_RxCpltCallback+0x708>)
 8001a76:	f014 fb47 	bl	8016108 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8001a7a:	4b71      	ldr	r3, [pc, #452]	; (8001c40 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a80:	2200      	movs	r2, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f007 fb16 	bl	80090b4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 8001a88:	2100      	movs	r1, #0
 8001a8a:	200c      	movs	r0, #12
 8001a8c:	f002 f8bc 	bl	8003c08 <set_rail_monitor_enable>
		break;
 8001a90:	e194      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8001a92:	4873      	ldr	r0, [pc, #460]	; (8001c60 <HAL_UART_RxCpltCallback+0x70c>)
 8001a94:	f014 fb38 	bl	8016108 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8001a98:	4b69      	ldr	r3, [pc, #420]	; (8001c40 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f007 fb07 	bl	80090b4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	200d      	movs	r0, #13
 8001aaa:	f002 f8ad 	bl	8003c08 <set_rail_monitor_enable>

		break;
 8001aae:	e185      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8001ab0:	486c      	ldr	r0, [pc, #432]	; (8001c64 <HAL_UART_RxCpltCallback+0x710>)
 8001ab2:	f014 fb29 	bl	8016108 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8001ab6:	4b62      	ldr	r3, [pc, #392]	; (8001c40 <HAL_UART_RxCpltCallback+0x6ec>)
 8001ab8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001abc:	2200      	movs	r2, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f007 faf8 	bl	80090b4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	200d      	movs	r0, #13
 8001ac8:	f002 f89e 	bl	8003c08 <set_rail_monitor_enable>
		break;
 8001acc:	e176      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8001ace:	4866      	ldr	r0, [pc, #408]	; (8001c68 <HAL_UART_RxCpltCallback+0x714>)
 8001ad0:	f014 fb1a 	bl	8016108 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8001ad4:	4b5a      	ldr	r3, [pc, #360]	; (8001c40 <HAL_UART_RxCpltCallback+0x6ec>)
 8001ad6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ada:	2201      	movs	r2, #1
 8001adc:	4618      	mov	r0, r3
 8001ade:	f007 fae9 	bl	80090b4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	200f      	movs	r0, #15
 8001ae6:	f002 f88f 	bl	8003c08 <set_rail_monitor_enable>

		break;
 8001aea:	e167      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8001aec:	485f      	ldr	r0, [pc, #380]	; (8001c6c <HAL_UART_RxCpltCallback+0x718>)
 8001aee:	f014 fb0b 	bl	8016108 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8001af2:	4b53      	ldr	r3, [pc, #332]	; (8001c40 <HAL_UART_RxCpltCallback+0x6ec>)
 8001af4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001af8:	2200      	movs	r2, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f007 fada 	bl	80090b4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8001b00:	2100      	movs	r1, #0
 8001b02:	200f      	movs	r0, #15
 8001b04:	f002 f880 	bl	8003c08 <set_rail_monitor_enable>
		break;
 8001b08:	e158      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8001b0a:	4859      	ldr	r0, [pc, #356]	; (8001c70 <HAL_UART_RxCpltCallback+0x71c>)
 8001b0c:	f014 fafc 	bl	8016108 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8001b10:	4b47      	ldr	r3, [pc, #284]	; (8001c30 <HAL_UART_RxCpltCallback+0x6dc>)
 8001b12:	2140      	movs	r1, #64	; 0x40
 8001b14:	2201      	movs	r2, #1
 8001b16:	4618      	mov	r0, r3
 8001b18:	f007 facc 	bl	80090b4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	2010      	movs	r0, #16
 8001b20:	f002 f872 	bl	8003c08 <set_rail_monitor_enable>

		break;
 8001b24:	e14a      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8001b26:	4853      	ldr	r0, [pc, #332]	; (8001c74 <HAL_UART_RxCpltCallback+0x720>)
 8001b28:	f014 faee 	bl	8016108 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8001b2c:	4b40      	ldr	r3, [pc, #256]	; (8001c30 <HAL_UART_RxCpltCallback+0x6dc>)
 8001b2e:	2140      	movs	r1, #64	; 0x40
 8001b30:	2200      	movs	r2, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f007 fabe 	bl	80090b4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8001b38:	2100      	movs	r1, #0
 8001b3a:	2010      	movs	r0, #16
 8001b3c:	f002 f864 	bl	8003c08 <set_rail_monitor_enable>
		break;
 8001b40:	e13c      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8001b42:	484d      	ldr	r0, [pc, #308]	; (8001c78 <HAL_UART_RxCpltCallback+0x724>)
 8001b44:	f014 fae0 	bl	8016108 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8001b48:	2300      	movs	r3, #0
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2320      	movs	r3, #32
 8001b4e:	4a4b      	ldr	r2, [pc, #300]	; (8001c7c <HAL_UART_RxCpltCallback+0x728>)
 8001b50:	2100      	movs	r1, #0
 8001b52:	484b      	ldr	r0, [pc, #300]	; (8001c80 <HAL_UART_RxCpltCallback+0x72c>)
 8001b54:	f003 ff12 	bl	800597c <HAL_DAC_Start_DMA>
		break;
 8001b58:	e130      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8001b5a:	484a      	ldr	r0, [pc, #296]	; (8001c84 <HAL_UART_RxCpltCallback+0x730>)
 8001b5c:	f014 fad4 	bl	8016108 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001b60:	2100      	movs	r1, #0
 8001b62:	4847      	ldr	r0, [pc, #284]	; (8001c80 <HAL_UART_RxCpltCallback+0x72c>)
 8001b64:	f003 ffca 	bl	8005afc <HAL_DAC_Stop_DMA>
		break;
 8001b68:	e128      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8001b6a:	4847      	ldr	r0, [pc, #284]	; (8001c88 <HAL_UART_RxCpltCallback+0x734>)
 8001b6c:	f014 facc 	bl	8016108 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001b70:	210c      	movs	r1, #12
 8001b72:	4846      	ldr	r0, [pc, #280]	; (8001c8c <HAL_UART_RxCpltCallback+0x738>)
 8001b74:	f00c fea2 	bl	800e8bc <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001b78:	4b45      	ldr	r3, [pc, #276]	; (8001c90 <HAL_UART_RxCpltCallback+0x73c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2102      	movs	r1, #2
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f011 f98a 	bl	8012e98 <osEventFlagsSet>
		break;
 8001b84:	e11a      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8001b86:	4843      	ldr	r0, [pc, #268]	; (8001c94 <HAL_UART_RxCpltCallback+0x740>)
 8001b88:	f014 fabe 	bl	8016108 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8001b8c:	210c      	movs	r1, #12
 8001b8e:	483f      	ldr	r0, [pc, #252]	; (8001c8c <HAL_UART_RxCpltCallback+0x738>)
 8001b90:	f00c ffee 	bl	800eb70 <HAL_TIM_OC_Stop_IT>
		break;
 8001b94:	e112      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8001b96:	4840      	ldr	r0, [pc, #256]	; (8001c98 <HAL_UART_RxCpltCallback+0x744>)
 8001b98:	f014 fab6 	bl	8016108 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	483f      	ldr	r0, [pc, #252]	; (8001c9c <HAL_UART_RxCpltCallback+0x748>)
 8001ba0:	f00c fe8c 	bl	800e8bc <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8001ba4:	4b3a      	ldr	r3, [pc, #232]	; (8001c90 <HAL_UART_RxCpltCallback+0x73c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2101      	movs	r1, #1
 8001baa:	4618      	mov	r0, r3
 8001bac:	f011 f974 	bl	8012e98 <osEventFlagsSet>
		break;
 8001bb0:	e104      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8001bb2:	483b      	ldr	r0, [pc, #236]	; (8001ca0 <HAL_UART_RxCpltCallback+0x74c>)
 8001bb4:	f014 faa8 	bl	8016108 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4838      	ldr	r0, [pc, #224]	; (8001c9c <HAL_UART_RxCpltCallback+0x748>)
 8001bbc:	f00c ffd8 	bl	800eb70 <HAL_TIM_OC_Stop_IT>
		break;
 8001bc0:	e0fc      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1C: {
		printf("HK ON \n");
 8001bc2:	4838      	ldr	r0, [pc, #224]	; (8001ca4 <HAL_UART_RxCpltCallback+0x750>)
 8001bc4:	f014 faa0 	bl	8016108 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001bc8:	4b31      	ldr	r3, [pc, #196]	; (8001c90 <HAL_UART_RxCpltCallback+0x73c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2104      	movs	r1, #4
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f011 f962 	bl	8012e98 <osEventFlagsSet>
		HK_ENABLED = 1;
 8001bd4:	4b34      	ldr	r3, [pc, #208]	; (8001ca8 <HAL_UART_RxCpltCallback+0x754>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	701a      	strb	r2, [r3, #0]
		break;
 8001bda:	e0ef      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8001bdc:	4833      	ldr	r0, [pc, #204]	; (8001cac <HAL_UART_RxCpltCallback+0x758>)
 8001bde:	f014 fa93 	bl	8016108 <puts>
		HK_ENABLED = 0;
 8001be2:	4b31      	ldr	r3, [pc, #196]	; (8001ca8 <HAL_UART_RxCpltCallback+0x754>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
		break;
 8001be8:	e0e8      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1D: {
		printf("Step Up\n");
 8001bea:	4831      	ldr	r0, [pc, #196]	; (8001cb0 <HAL_UART_RxCpltCallback+0x75c>)
 8001bec:	f014 fa8c 	bl	8016108 <puts>
		if (step < 14) {
 8001bf0:	4b30      	ldr	r3, [pc, #192]	; (8001cb4 <HAL_UART_RxCpltCallback+0x760>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b0d      	cmp	r3, #13
 8001bf8:	f200 80d9 	bhi.w	8001dae <HAL_UART_RxCpltCallback+0x85a>
			step += 2;
 8001bfc:	4b2d      	ldr	r3, [pc, #180]	; (8001cb4 <HAL_UART_RxCpltCallback+0x760>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	3302      	adds	r3, #2
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <HAL_UART_RxCpltCallback+0x760>)
 8001c08:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001c0a:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <HAL_UART_RxCpltCallback+0x760>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <HAL_UART_RxCpltCallback+0x728>)
 8001c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4818      	ldr	r0, [pc, #96]	; (8001c80 <HAL_UART_RxCpltCallback+0x72c>)
 8001c1e:	f004 f810 	bl	8005c42 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001c22:	2100      	movs	r1, #0
 8001c24:	4816      	ldr	r0, [pc, #88]	; (8001c80 <HAL_UART_RxCpltCallback+0x72c>)
 8001c26:	f003 fe51 	bl	80058cc <HAL_DAC_Start>
		}
		break;
 8001c2a:	e0c0      	b.n	8001dae <HAL_UART_RxCpltCallback+0x85a>
 8001c2c:	08016ae4 	.word	0x08016ae4
 8001c30:	58020400 	.word	0x58020400
 8001c34:	08016af0 	.word	0x08016af0
 8001c38:	08016dec 	.word	0x08016dec
 8001c3c:	08016afc 	.word	0x08016afc
 8001c40:	58020800 	.word	0x58020800
 8001c44:	08016b08 	.word	0x08016b08
 8001c48:	08016b18 	.word	0x08016b18
 8001c4c:	08016b24 	.word	0x08016b24
 8001c50:	08016b30 	.word	0x08016b30
 8001c54:	08016b3c 	.word	0x08016b3c
 8001c58:	08016b4c 	.word	0x08016b4c
 8001c5c:	08016b58 	.word	0x08016b58
 8001c60:	08016b64 	.word	0x08016b64
 8001c64:	08016b70 	.word	0x08016b70
 8001c68:	08016b7c 	.word	0x08016b7c
 8001c6c:	08016b8c 	.word	0x08016b8c
 8001c70:	08016b9c 	.word	0x08016b9c
 8001c74:	08016ba8 	.word	0x08016ba8
 8001c78:	08016bb8 	.word	0x08016bb8
 8001c7c:	24000000 	.word	0x24000000
 8001c80:	240002d4 	.word	0x240002d4
 8001c84:	08016bc8 	.word	0x08016bc8
 8001c88:	08016bd8 	.word	0x08016bd8
 8001c8c:	24001b74 	.word	0x24001b74
 8001c90:	24001914 	.word	0x24001914
 8001c94:	08016be0 	.word	0x08016be0
 8001c98:	08016bec 	.word	0x08016bec
 8001c9c:	24001b28 	.word	0x24001b28
 8001ca0:	08016bf4 	.word	0x08016bf4
 8001ca4:	08016bfc 	.word	0x08016bfc
 8001ca8:	24001960 	.word	0x24001960
 8001cac:	08016c04 	.word	0x08016c04
 8001cb0:	08016c0c 	.word	0x08016c0c
 8001cb4:	24001961 	.word	0x24001961
	}
	case 0x0D: {
		printf("Step Down\n");
 8001cb8:	4842      	ldr	r0, [pc, #264]	; (8001dc4 <HAL_UART_RxCpltCallback+0x870>)
 8001cba:	f014 fa25 	bl	8016108 <puts>
		if (step > 1) {
 8001cbe:	4b42      	ldr	r3, [pc, #264]	; (8001dc8 <HAL_UART_RxCpltCallback+0x874>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d974      	bls.n	8001db2 <HAL_UART_RxCpltCallback+0x85e>
			step -= 2;
 8001cc8:	4b3f      	ldr	r3, [pc, #252]	; (8001dc8 <HAL_UART_RxCpltCallback+0x874>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	3b02      	subs	r3, #2
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <HAL_UART_RxCpltCallback+0x874>)
 8001cd4:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001cd6:	4b3c      	ldr	r3, [pc, #240]	; (8001dc8 <HAL_UART_RxCpltCallback+0x874>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4b3b      	ldr	r3, [pc, #236]	; (8001dcc <HAL_UART_RxCpltCallback+0x878>)
 8001ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4839      	ldr	r0, [pc, #228]	; (8001dd0 <HAL_UART_RxCpltCallback+0x87c>)
 8001cea:	f003 ffaa 	bl	8005c42 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4837      	ldr	r0, [pc, #220]	; (8001dd0 <HAL_UART_RxCpltCallback+0x87c>)
 8001cf2:	f003 fdeb 	bl	80058cc <HAL_DAC_Start>
		}
		break;
 8001cf6:	e05c      	b.n	8001db2 <HAL_UART_RxCpltCallback+0x85e>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8001cf8:	4836      	ldr	r0, [pc, #216]	; (8001dd4 <HAL_UART_RxCpltCallback+0x880>)
 8001cfa:	f014 fa05 	bl	8016108 <puts>
		if (cadence <= 50000) {
 8001cfe:	4b36      	ldr	r3, [pc, #216]	; (8001dd8 <HAL_UART_RxCpltCallback+0x884>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d855      	bhi.n	8001db6 <HAL_UART_RxCpltCallback+0x862>
			cadence *= 2;
 8001d0a:	4b33      	ldr	r3, [pc, #204]	; (8001dd8 <HAL_UART_RxCpltCallback+0x884>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4a31      	ldr	r2, [pc, #196]	; (8001dd8 <HAL_UART_RxCpltCallback+0x884>)
 8001d12:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001d14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d18:	4b2f      	ldr	r3, [pc, #188]	; (8001dd8 <HAL_UART_RxCpltCallback+0x884>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001d1e:	e04a      	b.n	8001db6 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8001d20:	482e      	ldr	r0, [pc, #184]	; (8001ddc <HAL_UART_RxCpltCallback+0x888>)
 8001d22:	f014 f9f1 	bl	8016108 <puts>
		if (cadence >= 6250) {
 8001d26:	4b2c      	ldr	r3, [pc, #176]	; (8001dd8 <HAL_UART_RxCpltCallback+0x884>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f641 0269 	movw	r2, #6249	; 0x1869
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d943      	bls.n	8001dba <HAL_UART_RxCpltCallback+0x866>
			cadence /= 2;
 8001d32:	4b29      	ldr	r3, [pc, #164]	; (8001dd8 <HAL_UART_RxCpltCallback+0x884>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	085b      	lsrs	r3, r3, #1
 8001d38:	4a27      	ldr	r2, [pc, #156]	; (8001dd8 <HAL_UART_RxCpltCallback+0x884>)
 8001d3a:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001d3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d40:	4b25      	ldr	r3, [pc, #148]	; (8001dd8 <HAL_UART_RxCpltCallback+0x884>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001d46:	e038      	b.n	8001dba <HAL_UART_RxCpltCallback+0x866>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8001d48:	4825      	ldr	r0, [pc, #148]	; (8001de0 <HAL_UART_RxCpltCallback+0x88c>)
 8001d4a:	f014 f9dd 	bl	8016108 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 8001d4e:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <HAL_UART_RxCpltCallback+0x890>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2102      	movs	r1, #2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f011 f89f 	bl	8012e98 <osEventFlagsSet>
		break;
 8001d5a:	e02f      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8001d5c:	4822      	ldr	r0, [pc, #136]	; (8001de8 <HAL_UART_RxCpltCallback+0x894>)
 8001d5e:	f014 f9d3 	bl	8016108 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 8001d62:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <HAL_UART_RxCpltCallback+0x890>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2104      	movs	r1, #4
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f011 f895 	bl	8012e98 <osEventFlagsSet>
		break;
 8001d6e:	e025      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8001d70:	481e      	ldr	r0, [pc, #120]	; (8001dec <HAL_UART_RxCpltCallback+0x898>)
 8001d72:	f014 f9c9 	bl	8016108 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 8001d76:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <HAL_UART_RxCpltCallback+0x890>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2108      	movs	r1, #8
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f011 f88b 	bl	8012e98 <osEventFlagsSet>
		break;
 8001d82:	e01b      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xAF: {
		sync();
 8001d84:	f000 f958 	bl	8002038 <sync>
		break;
 8001d88:	e018      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 8001d8a:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <HAL_UART_RxCpltCallback+0x89c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2101      	movs	r1, #1
 8001d90:	4618      	mov	r0, r3
 8001d92:	f011 f881 	bl	8012e98 <osEventFlagsSet>
		break;
 8001d96:	e011      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8001d98:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <HAL_UART_RxCpltCallback+0x89c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2102      	movs	r1, #2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f011 f87a 	bl	8012e98 <osEventFlagsSet>
		break;
 8001da4:	e00a      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
	}
	default: {
		printf("Unknown Command\n");
 8001da6:	4813      	ldr	r0, [pc, #76]	; (8001df4 <HAL_UART_RxCpltCallback+0x8a0>)
 8001da8:	f014 f9ae 	bl	8016108 <puts>
		break;
 8001dac:	e006      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
		break;
 8001dae:	bf00      	nop
 8001db0:	e004      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
		break;
 8001db2:	bf00      	nop
 8001db4:	e002      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
		break;
 8001db6:	bf00      	nop
 8001db8:	e000      	b.n	8001dbc <HAL_UART_RxCpltCallback+0x868>
		break;
 8001dba:	bf00      	nop
	}
	}
}
 8001dbc:	bf00      	nop
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	08016c14 	.word	0x08016c14
 8001dc8:	24001961 	.word	0x24001961
 8001dcc:	24000000 	.word	0x24000000
 8001dd0:	240002d4 	.word	0x240002d4
 8001dd4:	08016c20 	.word	0x08016c20
 8001dd8:	24000080 	.word	0x24000080
 8001ddc:	08016c2c 	.word	0x08016c2c
 8001de0:	08016c38 	.word	0x08016c38
 8001de4:	24001918 	.word	0x24001918
 8001de8:	08016c48 	.word	0x08016c48
 8001dec:	08016c54 	.word	0x08016c54
 8001df0:	2400191c 	.word	0x2400191c
 8001df4:	08016c60 	.word	0x08016c60

08001df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dfc:	f001 ffd2 	bl	8003da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e00:	f000 f824 	bl	8001e4c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001e04:	f000 f8a2 	bl	8001f4c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e08:	f7ff fa18 	bl	800123c <MX_GPIO_Init>
  MX_DMA_Init();
 8001e0c:	f7fe ff6c 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001e10:	f001 fc32 	bl	8003678 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001e14:	f7ff fa8c 	bl	8001330 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001e18:	f000 fe2e 	bl	8002a78 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001e1c:	f001 fa54 	bl	80032c8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001e20:	f001 f9a4 	bl	800316c <MX_TIM1_Init>
  MX_ADC3_Init();
 8001e24:	f7fe fd00 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001e28:	f7fe fbdc 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001e2c:	f7fe fea8 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8001e30:	f000 fdca 	bl	80029c8 <MX_SPI1_Init>
  MX_RTC_Init();
 8001e34:	f000 fbae 	bl	8002594 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  system_setup();
 8001e38:	f000 f8b8 	bl	8001fac <system_setup>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001e3c:	f010 fed6 	bl	8012bec <osKernelInitialize>
  MX_FREERTOS_Init();
 8001e40:	f7fe ffa4 	bl	8000d8c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001e44:	f010 fef6 	bl	8012c34 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001e48:	e7fe      	b.n	8001e48 <main+0x50>
	...

08001e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b09c      	sub	sp, #112	; 0x70
 8001e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e56:	224c      	movs	r2, #76	; 0x4c
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f014 f8de 	bl	801601c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e60:	1d3b      	adds	r3, r7, #4
 8001e62:	2220      	movs	r2, #32
 8001e64:	2100      	movs	r1, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f014 f8d8 	bl	801601c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001e6c:	2002      	movs	r0, #2
 8001e6e:	f007 ff83 	bl	8009d78 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e72:	2300      	movs	r3, #0
 8001e74:	603b      	str	r3, [r7, #0]
 8001e76:	4b33      	ldr	r3, [pc, #204]	; (8001f44 <SystemClock_Config+0xf8>)
 8001e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7a:	4a32      	ldr	r2, [pc, #200]	; (8001f44 <SystemClock_Config+0xf8>)
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001e82:	4b30      	ldr	r3, [pc, #192]	; (8001f44 <SystemClock_Config+0xf8>)
 8001e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	4b2e      	ldr	r3, [pc, #184]	; (8001f48 <SystemClock_Config+0xfc>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e94:	4a2c      	ldr	r2, [pc, #176]	; (8001f48 <SystemClock_Config+0xfc>)
 8001e96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e9a:	6193      	str	r3, [r2, #24]
 8001e9c:	4b2a      	ldr	r3, [pc, #168]	; (8001f48 <SystemClock_Config+0xfc>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ea8:	bf00      	nop
 8001eaa:	4b27      	ldr	r3, [pc, #156]	; (8001f48 <SystemClock_Config+0xfc>)
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eb6:	d1f8      	bne.n	8001eaa <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ebc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001ec2:	2309      	movs	r3, #9
 8001ec4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ec6:	2340      	movs	r3, #64	; 0x40
 8001ec8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001ed6:	2320      	movs	r3, #32
 8001ed8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001eda:	2302      	movs	r3, #2
 8001edc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001ee6:	2308      	movs	r3, #8
 8001ee8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f007 ff78 	bl	8009dec <HAL_RCC_OscConfig>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001f02:	f000 f94f 	bl	80021a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f06:	233f      	movs	r3, #63	; 0x3f
 8001f08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001f1a:	2340      	movs	r3, #64	; 0x40
 8001f1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001f22:	2300      	movs	r3, #0
 8001f24:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	2102      	movs	r1, #2
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f008 fbb8 	bl	800a6a0 <HAL_RCC_ClockConfig>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001f36:	f000 f935 	bl	80021a4 <Error_Handler>
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	3770      	adds	r7, #112	; 0x70
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	58000400 	.word	0x58000400
 8001f48:	58024800 	.word	0x58024800

08001f4c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b0b0      	sub	sp, #192	; 0xc0
 8001f50:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f52:	463b      	mov	r3, r7
 8001f54:	22c0      	movs	r2, #192	; 0xc0
 8001f56:	2100      	movs	r1, #0
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f014 f85f 	bl	801601c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f5e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f62:	f04f 0300 	mov.w	r3, #0
 8001f66:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 8001f6e:	2320      	movs	r3, #32
 8001f70:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001f72:	2308      	movs	r3, #8
 8001f74:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001f76:	2302      	movs	r3, #2
 8001f78:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001f7e:	2380      	movs	r3, #128	; 0x80
 8001f80:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f90:	463b      	mov	r3, r7
 8001f92:	4618      	mov	r0, r3
 8001f94:	f008 ff52 	bl	800ae3c <HAL_RCCEx_PeriphCLKConfig>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001f9e:	f000 f901 	bl	80021a4 <Error_Handler>
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	37c0      	adds	r7, #192	; 0xc0
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts


	// ---- 1 ---- //
	packet_event_flags = osEventFlagsNew(NULL);
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f010 ff32 	bl	8012e1a <osEventFlagsNew>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	4a1a      	ldr	r2, [pc, #104]	; (8002024 <system_setup+0x78>)
 8001fba:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8001fbc:	4b19      	ldr	r3, [pc, #100]	; (8002024 <system_setup+0x78>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d100      	bne.n	8001fc6 <system_setup+0x1a>
        while (1);
 8001fc4:	e7fe      	b.n	8001fc4 <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f010 ff27 	bl	8012e1a <osEventFlagsNew>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4a16      	ldr	r2, [pc, #88]	; (8002028 <system_setup+0x7c>)
 8001fd0:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 8001fd2:	4b15      	ldr	r3, [pc, #84]	; (8002028 <system_setup+0x7c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d100      	bne.n	8001fdc <system_setup+0x30>
        while (1);
 8001fda:	e7fe      	b.n	8001fda <system_setup+0x2e>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 8001fdc:	2000      	movs	r0, #0
 8001fde:	f010 ff1c 	bl	8012e1a <osEventFlagsNew>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	4a11      	ldr	r2, [pc, #68]	; (800202c <system_setup+0x80>)
 8001fe6:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 8001fe8:	4b10      	ldr	r3, [pc, #64]	; (800202c <system_setup+0x80>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d100      	bne.n	8001ff2 <system_setup+0x46>
        while (1);
 8001ff0:	e7fe      	b.n	8001ff0 <system_setup+0x44>
    }



	// ---- 3 ---- //
	if (!voltage_monitor_init()) {
 8001ff2:	f001 fc4b 	bl	800388c <voltage_monitor_init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d100      	bne.n	8001ffe <system_setup+0x52>
		while (1);
 8001ffc:	e7fe      	b.n	8001ffc <system_setup+0x50>
	}


	// ---- 5 ---- //
	TIM2->CCR4 = 312;
 8001ffe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002002:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002006:	641a      	str	r2, [r3, #64]	; 0x40

	// ---- 6 ---- //
	if (!init_adc_dma()) {
 8002008:	f000 fb56 	bl	80026b8 <init_adc_dma>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d100      	bne.n	8002014 <system_setup+0x68>
		while (1);
 8002012:	e7fe      	b.n	8002012 <system_setup+0x66>
	}

	// ---- 7 ---- //
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002014:	2201      	movs	r2, #1
 8002016:	4906      	ldr	r1, [pc, #24]	; (8002030 <system_setup+0x84>)
 8002018:	4806      	ldr	r0, [pc, #24]	; (8002034 <system_setup+0x88>)
 800201a:	f00e f92f 	bl	801027c <HAL_UART_Receive_IT>

}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	24001914 	.word	0x24001914
 8002028:	24001918 	.word	0x24001918
 800202c:	2400191c 	.word	0x2400191c
 8002030:	24001920 	.word	0x24001920
 8002034:	24001bc0 	.word	0x24001bc0

08002038 <sync>:

void sync() {
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
	send_ACK();
 800203e:	f000 f81f 	bl	8002080 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 8002042:	480d      	ldr	r0, [pc, #52]	; (8002078 <sync+0x40>)
 8002044:	f00e f966 	bl	8010314 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8002048:	2364      	movs	r3, #100	; 0x64
 800204a:	2209      	movs	r2, #9
 800204c:	490b      	ldr	r1, [pc, #44]	; (800207c <sync+0x44>)
 800204e:	480a      	ldr	r0, [pc, #40]	; (8002078 <sync+0x40>)
 8002050:	f00e f84c 	bl	80100ec <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8002054:	4b09      	ldr	r3, [pc, #36]	; (800207c <sync+0x44>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	2bff      	cmp	r3, #255	; 0xff
 800205e:	d1f3      	bne.n	8002048 <sync+0x10>

	//calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002060:	2201      	movs	r2, #1
 8002062:	4906      	ldr	r1, [pc, #24]	; (800207c <sync+0x44>)
 8002064:	4804      	ldr	r0, [pc, #16]	; (8002078 <sync+0x40>)
 8002066:	f00e f909 	bl	801027c <HAL_UART_Receive_IT>

	send_ACK();
 800206a:	f000 f809 	bl	8002080 <send_ACK>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	24001bc0 	.word	0x24001bc0
 800207c:	24001920 	.word	0x24001920

08002080 <send_ACK>:

void send_ACK() {
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <send_ACK+0x1c>)
 8002086:	22ff      	movs	r2, #255	; 0xff
 8002088:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 800208a:	2364      	movs	r3, #100	; 0x64
 800208c:	2201      	movs	r2, #1
 800208e:	4903      	ldr	r1, [pc, #12]	; (800209c <send_ACK+0x1c>)
 8002090:	4803      	ldr	r0, [pc, #12]	; (80020a0 <send_ACK+0x20>)
 8002092:	f00d ff9d 	bl	800ffd0 <HAL_UART_Transmit>
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	2400196c 	.word	0x2400196c
 80020a0:	24001bc0 	.word	0x24001bc0

080020a4 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 80020aa:	4b2e      	ldr	r3, [pc, #184]	; (8002164 <get_current_step+0xc0>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d04a      	beq.n	8002150 <get_current_step+0xac>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020c0:	da48      	bge.n	8002154 <get_current_step+0xb0>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f640 628b 	movw	r2, #3723	; 0xe8b
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d03f      	beq.n	800214c <get_current_step+0xa8>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f640 628b 	movw	r2, #3723	; 0xe8b
 80020d2:	4293      	cmp	r3, r2
 80020d4:	dc3e      	bgt.n	8002154 <get_current_step+0xb0>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f640 421f 	movw	r2, #3103	; 0xc1f
 80020dc:	4293      	cmp	r3, r2
 80020de:	d033      	beq.n	8002148 <get_current_step+0xa4>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 80020e6:	da35      	bge.n	8002154 <get_current_step+0xb0>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d028      	beq.n	8002144 <get_current_step+0xa0>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80020f8:	4293      	cmp	r3, r2
 80020fa:	dc2b      	bgt.n	8002154 <get_current_step+0xb0>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f240 7245 	movw	r2, #1861	; 0x745
 8002102:	4293      	cmp	r3, r2
 8002104:	d01c      	beq.n	8002140 <get_current_step+0x9c>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f240 7245 	movw	r2, #1861	; 0x745
 800210c:	4293      	cmp	r3, r2
 800210e:	dc21      	bgt.n	8002154 <get_current_step+0xb0>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002116:	4293      	cmp	r3, r2
 8002118:	d010      	beq.n	800213c <get_current_step+0x98>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002120:	4293      	cmp	r3, r2
 8002122:	dc17      	bgt.n	8002154 <get_current_step+0xb0>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d004      	beq.n	8002134 <get_current_step+0x90>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002130:	d002      	beq.n	8002138 <get_current_step+0x94>
 8002132:	e00f      	b.n	8002154 <get_current_step+0xb0>
	case 0:
		return 0;
 8002134:	2300      	movs	r3, #0
 8002136:	e00e      	b.n	8002156 <get_current_step+0xb2>
	case 620:
		return 1;
 8002138:	2301      	movs	r3, #1
 800213a:	e00c      	b.n	8002156 <get_current_step+0xb2>
	case 1241:
		return 2;
 800213c:	2302      	movs	r3, #2
 800213e:	e00a      	b.n	8002156 <get_current_step+0xb2>
	case 1861:
		return 3;
 8002140:	2303      	movs	r3, #3
 8002142:	e008      	b.n	8002156 <get_current_step+0xb2>
	case 2482:
		return 4;
 8002144:	2304      	movs	r3, #4
 8002146:	e006      	b.n	8002156 <get_current_step+0xb2>
	case 3103:
		return 5;
 8002148:	2305      	movs	r3, #5
 800214a:	e004      	b.n	8002156 <get_current_step+0xb2>
	case 3723:
		return 6;
 800214c:	2306      	movs	r3, #6
 800214e:	e002      	b.n	8002156 <get_current_step+0xb2>
	case 4095:
		return 7;
 8002150:	2307      	movs	r3, #7
 8002152:	e000      	b.n	8002156 <get_current_step+0xb2>
	default:
		return -1;
 8002154:	23ff      	movs	r3, #255	; 0xff
	}
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40007400 	.word	0x40007400

08002168 <enter_stop>:

void enter_stop() {
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	  send_ACK();
 800216c:	f7ff ff88 	bl	8002080 <send_ACK>

	  vTaskSuspendAll();
 8002170:	f012 f9ea 	bl	8014548 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002174:	2101      	movs	r1, #1
 8002176:	2001      	movs	r0, #1
 8002178:	f007 fdc2 	bl	8009d00 <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 800217c:	f7ff f984 	bl	8001488 <__NVIC_SystemReset>

08002180 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d101      	bne.n	8002196 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002192:	f001 fe43 	bl	8003e1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40001000 	.word	0x40001000

080021a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80021a8:	b672      	cpsid	i
}
 80021aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80021ac:	e7fe      	b.n	80021ac <Error_Handler+0x8>
	...

080021b0 <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80021b6:	bf00      	nop
 80021b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021bc:	481c      	ldr	r0, [pc, #112]	; (8002230 <create_pmt_packet+0x80>)
 80021be:	f006 ff61 	bl	8009084 <HAL_GPIO_ReadPin>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1f7      	bne.n	80021b8 <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	4618      	mov	r0, r3
 80021cc:	f001 f9b4 	bl	8003538 <get_uptime>
	sample_pmt_spi(pmt_spi);
 80021d0:	f107 0308 	add.w	r3, r7, #8
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 faaf 	bl	8002738 <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 80021da:	23bb      	movs	r3, #187	; 0xbb
 80021dc:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 80021de:	23bb      	movs	r3, #187	; 0xbb
 80021e0:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 80021e2:	4b14      	ldr	r3, [pc, #80]	; (8002234 <create_pmt_packet+0x84>)
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	0a1b      	lsrs	r3, r3, #8
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 80021ee:	4b11      	ldr	r3, [pc, #68]	; (8002234 <create_pmt_packet+0x84>)
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 80021f6:	7a3b      	ldrb	r3, [r7, #8]
 80021f8:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 80021fa:	7a7b      	ldrb	r3, [r7, #9]
 80021fc:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 80021fe:	793b      	ldrb	r3, [r7, #4]
 8002200:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 8002202:	797b      	ldrb	r3, [r7, #5]
 8002204:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 8002206:	79bb      	ldrb	r3, [r7, #6]
 8002208:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 800220e:	f107 010c 	add.w	r1, r7, #12
 8002212:	2364      	movs	r3, #100	; 0x64
 8002214:	220a      	movs	r2, #10
 8002216:	4808      	ldr	r0, [pc, #32]	; (8002238 <create_pmt_packet+0x88>)
 8002218:	f00d feda 	bl	800ffd0 <HAL_UART_Transmit>

	pmt_seq++;
 800221c:	4b05      	ldr	r3, [pc, #20]	; (8002234 <create_pmt_packet+0x84>)
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	3301      	adds	r3, #1
 8002222:	b29a      	uxth	r2, r3
 8002224:	4b03      	ldr	r3, [pc, #12]	; (8002234 <create_pmt_packet+0x84>)
 8002226:	801a      	strh	r2, [r3, #0]
}
 8002228:	bf00      	nop
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	58020000 	.word	0x58020000
 8002234:	2400196e 	.word	0x2400196e
 8002238:	24001bc0 	.word	0x24001bc0

0800223c <create_erpa_packet>:


void create_erpa_packet() {
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8002242:	bf00      	nop
 8002244:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002248:	4828      	ldr	r0, [pc, #160]	; (80022ec <create_erpa_packet+0xb0>)
 800224a:	f006 ff1b 	bl	8009084 <HAL_GPIO_ReadPin>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f7      	bne.n	8002244 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 8002254:	23ff      	movs	r3, #255	; 0xff
 8002256:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 8002258:	1d3b      	adds	r3, r7, #4
 800225a:	4618      	mov	r0, r3
 800225c:	f001 f96c 	bl	8003538 <get_uptime>
	sweep_step = get_current_step();
 8002260:	f7ff ff20 	bl	80020a4 <get_current_step>
 8002264:	4603      	mov	r3, r0
 8002266:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 8002268:	f107 030c 	add.w	r3, r7, #12
 800226c:	4618      	mov	r0, r3
 800226e:	f000 fa87 	bl	8002780 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8002272:	f107 0308 	add.w	r3, r7, #8
 8002276:	4618      	mov	r0, r3
 8002278:	f000 faa6 	bl	80027c8 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 800227c:	23aa      	movs	r3, #170	; 0xaa
 800227e:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 8002280:	23aa      	movs	r3, #170	; 0xaa
 8002282:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8002284:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <create_erpa_packet+0xb4>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	0c1b      	lsrs	r3, r3, #16
 800228a:	b2db      	uxtb	r3, r3
 800228c:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 800228e:	4b18      	ldr	r3, [pc, #96]	; (80022f0 <create_erpa_packet+0xb4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	0a1b      	lsrs	r3, r3, #8
 8002294:	b2db      	uxtb	r3, r3
 8002296:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 8002298:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <create_erpa_packet+0xb4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 80022a0:	7ffb      	ldrb	r3, [r7, #31]
 80022a2:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 80022a4:	893b      	ldrh	r3, [r7, #8]
 80022a6:	0a1b      	lsrs	r3, r3, #8
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 80022ae:	893b      	ldrh	r3, [r7, #8]
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 80022b4:	7b3b      	ldrb	r3, [r7, #12]
 80022b6:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 80022b8:	7b7b      	ldrb	r3, [r7, #13]
 80022ba:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 80022bc:	793b      	ldrb	r3, [r7, #4]
 80022be:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 80022c0:	797b      	ldrb	r3, [r7, #5]
 80022c2:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 80022c4:	79bb      	ldrb	r3, [r7, #6]
 80022c6:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 80022cc:	f107 0110 	add.w	r1, r7, #16
 80022d0:	2364      	movs	r3, #100	; 0x64
 80022d2:	220e      	movs	r2, #14
 80022d4:	4807      	ldr	r0, [pc, #28]	; (80022f4 <create_erpa_packet+0xb8>)
 80022d6:	f00d fe7b 	bl	800ffd0 <HAL_UART_Transmit>

	erpa_seq++;
 80022da:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <create_erpa_packet+0xb4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	3301      	adds	r3, #1
 80022e0:	4a03      	ldr	r2, [pc, #12]	; (80022f0 <create_erpa_packet+0xb4>)
 80022e2:	6013      	str	r3, [r2, #0]
}
 80022e4:	bf00      	nop
 80022e6:	3720      	adds	r7, #32
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	58020400 	.word	0x58020400
 80022f0:	24001970 	.word	0x24001970
 80022f4:	24001bc0 	.word	0x24001bc0

080022f8 <create_hk_packet>:


void create_hk_packet() {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b094      	sub	sp, #80	; 0x50
 80022fc:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	4618      	mov	r0, r3
 8002302:	f001 f919 	bl	8003538 <get_uptime>
	get_timestamp(timestamp);
 8002306:	f107 0308 	add.w	r3, r7, #8
 800230a:	4618      	mov	r0, r3
 800230c:	f001 f964 	bl	80035d8 <get_timestamp>
	rail_monitor_ptr = get_rail_monitor();
 8002310:	f001 fc9a 	bl	8003c48 <get_rail_monitor>
 8002314:	64f8      	str	r0, [r7, #76]	; 0x4c


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8002316:	23cc      	movs	r3, #204	; 0xcc
 8002318:	753b      	strb	r3, [r7, #20]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 800231a:	23cc      	movs	r3, #204	; 0xcc
 800231c:	757b      	strb	r3, [r7, #21]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 800231e:	4b9b      	ldr	r3, [pc, #620]	; (800258c <create_hk_packet+0x294>)
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	0a1b      	lsrs	r3, r3, #8
 8002324:	b29b      	uxth	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	75bb      	strb	r3, [r7, #22]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 800232a:	4b98      	ldr	r3, [pc, #608]	; (800258c <create_hk_packet+0x294>)
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	b2db      	uxtb	r3, r3
 8002330:	75fb      	strb	r3, [r7, #23]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8002332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002334:	889b      	ldrh	r3, [r3, #4]
 8002336:	0a1b      	lsrs	r3, r3, #8
 8002338:	b29b      	uxth	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	763b      	strb	r3, [r7, #24]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 800233e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002340:	889b      	ldrh	r3, [r3, #4]
 8002342:	b2db      	uxtb	r3, r3
 8002344:	767b      	strb	r3, [r7, #25]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8002346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002348:	330a      	adds	r3, #10
 800234a:	889b      	ldrh	r3, [r3, #4]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	b29b      	uxth	r3, r3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	76bb      	strb	r3, [r7, #26]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8002354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002356:	330a      	adds	r3, #10
 8002358:	889b      	ldrh	r3, [r3, #4]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	76fb      	strb	r3, [r7, #27]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 800235e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002360:	3314      	adds	r3, #20
 8002362:	889b      	ldrh	r3, [r3, #4]
 8002364:	0a1b      	lsrs	r3, r3, #8
 8002366:	b29b      	uxth	r3, r3
 8002368:	b2db      	uxtb	r3, r3
 800236a:	773b      	strb	r3, [r7, #28]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 800236c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800236e:	3314      	adds	r3, #20
 8002370:	889b      	ldrh	r3, [r3, #4]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	777b      	strb	r3, [r7, #29]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002378:	331e      	adds	r3, #30
 800237a:	889b      	ldrh	r3, [r3, #4]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	b29b      	uxth	r3, r3
 8002380:	b2db      	uxtb	r3, r3
 8002382:	77bb      	strb	r3, [r7, #30]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 8002384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002386:	331e      	adds	r3, #30
 8002388:	889b      	ldrh	r3, [r3, #4]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	77fb      	strb	r3, [r7, #31]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 800238e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002390:	3328      	adds	r3, #40	; 0x28
 8002392:	889b      	ldrh	r3, [r3, #4]
 8002394:	0a1b      	lsrs	r3, r3, #8
 8002396:	b29b      	uxth	r3, r3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 800239e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023a0:	3328      	adds	r3, #40	; 0x28
 80023a2:	889b      	ldrh	r3, [r3, #4]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 80023aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ac:	3332      	adds	r3, #50	; 0x32
 80023ae:	889b      	ldrh	r3, [r3, #4]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 80023ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023bc:	3332      	adds	r3, #50	; 0x32
 80023be:	889b      	ldrh	r3, [r3, #4]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 80023c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023c8:	333c      	adds	r3, #60	; 0x3c
 80023ca:	889b      	ldrh	r3, [r3, #4]
 80023cc:	0a1b      	lsrs	r3, r3, #8
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 80023d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023d8:	333c      	adds	r3, #60	; 0x3c
 80023da:	889b      	ldrh	r3, [r3, #4]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 80023e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023e4:	3346      	adds	r3, #70	; 0x46
 80023e6:	889b      	ldrh	r3, [r3, #4]
 80023e8:	0a1b      	lsrs	r3, r3, #8
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 80023f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023f4:	3346      	adds	r3, #70	; 0x46
 80023f6:	889b      	ldrh	r3, [r3, #4]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 80023fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002400:	3350      	adds	r3, #80	; 0x50
 8002402:	889b      	ldrh	r3, [r3, #4]
 8002404:	0a1b      	lsrs	r3, r3, #8
 8002406:	b29b      	uxth	r3, r3
 8002408:	b2db      	uxtb	r3, r3
 800240a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 800240e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002410:	3350      	adds	r3, #80	; 0x50
 8002412:	889b      	ldrh	r3, [r3, #4]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 800241a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800241c:	335a      	adds	r3, #90	; 0x5a
 800241e:	889b      	ldrh	r3, [r3, #4]
 8002420:	0a1b      	lsrs	r3, r3, #8
 8002422:	b29b      	uxth	r3, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 800242a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800242c:	335a      	adds	r3, #90	; 0x5a
 800242e:	889b      	ldrh	r3, [r3, #4]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8002436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002438:	3364      	adds	r3, #100	; 0x64
 800243a:	889b      	ldrh	r3, [r3, #4]
 800243c:	0a1b      	lsrs	r3, r3, #8
 800243e:	b29b      	uxth	r3, r3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8002446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002448:	3364      	adds	r3, #100	; 0x64
 800244a:	889b      	ldrh	r3, [r3, #4]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 8002452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002454:	336e      	adds	r3, #110	; 0x6e
 8002456:	889b      	ldrh	r3, [r3, #4]
 8002458:	0a1b      	lsrs	r3, r3, #8
 800245a:	b29b      	uxth	r3, r3
 800245c:	b2db      	uxtb	r3, r3
 800245e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 8002462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002464:	336e      	adds	r3, #110	; 0x6e
 8002466:	889b      	ldrh	r3, [r3, #4]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 800246e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002470:	3378      	adds	r3, #120	; 0x78
 8002472:	889b      	ldrh	r3, [r3, #4]
 8002474:	0a1b      	lsrs	r3, r3, #8
 8002476:	b29b      	uxth	r3, r3
 8002478:	b2db      	uxtb	r3, r3
 800247a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 800247e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002480:	3378      	adds	r3, #120	; 0x78
 8002482:	889b      	ldrh	r3, [r3, #4]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 800248a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800248c:	3382      	adds	r3, #130	; 0x82
 800248e:	889b      	ldrh	r3, [r3, #4]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	b29b      	uxth	r3, r3
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 800249a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800249c:	3382      	adds	r3, #130	; 0x82
 800249e:	889b      	ldrh	r3, [r3, #4]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 80024a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a8:	338c      	adds	r3, #140	; 0x8c
 80024aa:	889b      	ldrh	r3, [r3, #4]
 80024ac:	0a1b      	lsrs	r3, r3, #8
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 80024b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b8:	338c      	adds	r3, #140	; 0x8c
 80024ba:	889b      	ldrh	r3, [r3, #4]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 80024c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024c4:	3396      	adds	r3, #150	; 0x96
 80024c6:	889b      	ldrh	r3, [r3, #4]
 80024c8:	0a1b      	lsrs	r3, r3, #8
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 80024d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d4:	3396      	adds	r3, #150	; 0x96
 80024d6:	889b      	ldrh	r3, [r3, #4]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 80024de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024e0:	33a0      	adds	r3, #160	; 0xa0
 80024e2:	889b      	ldrh	r3, [r3, #4]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 80024ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f0:	33a0      	adds	r3, #160	; 0xa0
 80024f2:	889b      	ldrh	r3, [r3, #4]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 80024fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024fc:	33aa      	adds	r3, #170	; 0xaa
 80024fe:	889b      	ldrh	r3, [r3, #4]
 8002500:	0a1b      	lsrs	r3, r3, #8
 8002502:	b29b      	uxth	r3, r3
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 800250a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800250c:	33aa      	adds	r3, #170	; 0xaa
 800250e:	889b      	ldrh	r3, [r3, #4]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[40] = timestamp[0];
 8002516:	7a3b      	ldrb	r3, [r7, #8]
 8002518:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[41] = timestamp[1];
 800251c:	7a7b      	ldrb	r3, [r7, #9]
 800251e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[42] = timestamp[2];
 8002522:	7abb      	ldrb	r3, [r7, #10]
 8002524:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[43] = timestamp[3];
 8002528:	7afb      	ldrb	r3, [r7, #11]
 800252a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[44] = timestamp[4];
 800252e:	7b3b      	ldrb	r3, [r7, #12]
 8002530:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[45] = timestamp[5];
 8002534:	7b7b      	ldrb	r3, [r7, #13]
 8002536:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	buffer[46] = timestamp[6];
 800253a:	7bbb      	ldrb	r3, [r7, #14]
 800253c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	buffer[47] = timestamp[7];
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	buffer[48] = timestamp[8];
 8002546:	7c3b      	ldrb	r3, [r7, #16]
 8002548:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	buffer[49] = timestamp[9];
 800254c:	7c7b      	ldrb	r3, [r7, #17]
 800254e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	buffer[50] = uptime[0];
 8002552:	793b      	ldrb	r3, [r7, #4]
 8002554:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	buffer[51] = uptime[1];
 8002558:	797b      	ldrb	r3, [r7, #5]
 800255a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	buffer[52] = uptime[2];
 800255e:	79bb      	ldrb	r3, [r7, #6]
 8002560:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	buffer[53] = uptime[3];
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 800256a:	f107 0114 	add.w	r1, r7, #20
 800256e:	2364      	movs	r3, #100	; 0x64
 8002570:	2236      	movs	r2, #54	; 0x36
 8002572:	4807      	ldr	r0, [pc, #28]	; (8002590 <create_hk_packet+0x298>)
 8002574:	f00d fd2c 	bl	800ffd0 <HAL_UART_Transmit>

	hk_seq++;
 8002578:	4b04      	ldr	r3, [pc, #16]	; (800258c <create_hk_packet+0x294>)
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	3301      	adds	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	4b02      	ldr	r3, [pc, #8]	; (800258c <create_hk_packet+0x294>)
 8002582:	801a      	strh	r2, [r3, #0]
}
 8002584:	bf00      	nop
 8002586:	3750      	adds	r7, #80	; 0x50
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	24001974 	.word	0x24001974
 8002590:	24001bc0 	.word	0x24001bc0

08002594 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800259a:	1d3b      	adds	r3, r7, #4
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	60da      	str	r2, [r3, #12]
 80025a6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80025a8:	2300      	movs	r3, #0
 80025aa:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80025ac:	4b26      	ldr	r3, [pc, #152]	; (8002648 <MX_RTC_Init+0xb4>)
 80025ae:	4a27      	ldr	r2, [pc, #156]	; (800264c <MX_RTC_Init+0xb8>)
 80025b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80025b2:	4b25      	ldr	r3, [pc, #148]	; (8002648 <MX_RTC_Init+0xb4>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 80025b8:	4b23      	ldr	r3, [pc, #140]	; (8002648 <MX_RTC_Init+0xb4>)
 80025ba:	2263      	movs	r2, #99	; 0x63
 80025bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 80025be:	4b22      	ldr	r3, [pc, #136]	; (8002648 <MX_RTC_Init+0xb4>)
 80025c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80025c4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80025c6:	4b20      	ldr	r3, [pc, #128]	; (8002648 <MX_RTC_Init+0xb4>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80025cc:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <MX_RTC_Init+0xb4>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80025d2:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <MX_RTC_Init+0xb4>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80025d8:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <MX_RTC_Init+0xb4>)
 80025da:	2200      	movs	r2, #0
 80025dc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80025de:	481a      	ldr	r0, [pc, #104]	; (8002648 <MX_RTC_Init+0xb4>)
 80025e0:	f00b f92a 	bl	800d838 <HAL_RTC_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80025ea:	f7ff fddb 	bl	80021a4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002602:	1d3b      	adds	r3, r7, #4
 8002604:	2201      	movs	r2, #1
 8002606:	4619      	mov	r1, r3
 8002608:	480f      	ldr	r0, [pc, #60]	; (8002648 <MX_RTC_Init+0xb4>)
 800260a:	f00b f997 	bl	800d93c <HAL_RTC_SetTime>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002614:	f7ff fdc6 	bl	80021a4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002618:	2301      	movs	r3, #1
 800261a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800261c:	2301      	movs	r3, #1
 800261e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002620:	2301      	movs	r3, #1
 8002622:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002624:	2300      	movs	r3, #0
 8002626:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002628:	463b      	mov	r3, r7
 800262a:	2201      	movs	r2, #1
 800262c:	4619      	mov	r1, r3
 800262e:	4806      	ldr	r0, [pc, #24]	; (8002648 <MX_RTC_Init+0xb4>)
 8002630:	f00b fa7e 	bl	800db30 <HAL_RTC_SetDate>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800263a:	f7ff fdb3 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800263e:	bf00      	nop
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	24001978 	.word	0x24001978
 800264c:	58004000 	.word	0x58004000

08002650 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b0b2      	sub	sp, #200	; 0xc8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002658:	f107 0308 	add.w	r3, r7, #8
 800265c:	22c0      	movs	r2, #192	; 0xc0
 800265e:	2100      	movs	r1, #0
 8002660:	4618      	mov	r0, r3
 8002662:	f013 fcdb 	bl	801601c <memset>
  if(rtcHandle->Instance==RTC)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a10      	ldr	r2, [pc, #64]	; (80026ac <HAL_RTC_MspInit+0x5c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d118      	bne.n	80026a2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002670:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 800267c:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <HAL_RTC_MspInit+0x60>)
 800267e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002682:	f107 0308 	add.w	r3, r7, #8
 8002686:	4618      	mov	r0, r3
 8002688:	f008 fbd8 	bl	800ae3c <HAL_RCCEx_PeriphCLKConfig>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8002692:	f7ff fd87 	bl	80021a4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002696:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <HAL_RTC_MspInit+0x64>)
 8002698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269a:	4a06      	ldr	r2, [pc, #24]	; (80026b4 <HAL_RTC_MspInit+0x64>)
 800269c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026a0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80026a2:	bf00      	nop
 80026a4:	37c8      	adds	r7, #200	; 0xc8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	58004000 	.word	0x58004000
 80026b0:	00019300 	.word	0x00019300
 80026b4:	58024400 	.word	0x58024400

080026b8 <init_adc_dma>:

ALIGN_32BYTES(static uint16_t ADC1_raw_data[ADC1_NUM_CHANNELS]);
ALIGN_32BYTES(static uint16_t ADC3_raw_data[ADC3_NUM_CHANNELS]);

// Public Functions
uint8_t init_adc_dma() {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80026c2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80026c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026ca:	4817      	ldr	r0, [pc, #92]	; (8002728 <init_adc_dma+0x70>)
 80026cc:	f002 feba 	bl	8005444 <HAL_ADCEx_Calibration_Start>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80026d6:	f7ff fd65 	bl	80021a4 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80026da:	220b      	movs	r2, #11
 80026dc:	4913      	ldr	r1, [pc, #76]	; (800272c <init_adc_dma+0x74>)
 80026de:	4812      	ldr	r0, [pc, #72]	; (8002728 <init_adc_dma+0x70>)
 80026e0:	f001 ff8e 	bl	8004600 <HAL_ADC_Start_DMA>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80026ea:	f7ff fd5b 	bl	80021a4 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80026ee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80026f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026f6:	480e      	ldr	r0, [pc, #56]	; (8002730 <init_adc_dma+0x78>)
 80026f8:	f002 fea4 	bl	8005444 <HAL_ADCEx_Calibration_Start>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8002702:	f7ff fd4f 	bl	80021a4 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8002706:	2204      	movs	r2, #4
 8002708:	490a      	ldr	r1, [pc, #40]	; (8002734 <init_adc_dma+0x7c>)
 800270a:	4809      	ldr	r0, [pc, #36]	; (8002730 <init_adc_dma+0x78>)
 800270c:	f001 ff78 	bl	8004600 <HAL_ADC_Start_DMA>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002716:	f7ff fd45 	bl	80021a4 <Error_Handler>
	}
	status = 1;
 800271a:	2301      	movs	r3, #1
 800271c:	71fb      	strb	r3, [r7, #7]

	return status;
 800271e:	79fb      	ldrb	r3, [r7, #7]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	2400011c 	.word	0x2400011c
 800272c:	240019a0 	.word	0x240019a0
 8002730:	24000180 	.word	0x24000180
 8002734:	240019c0 	.word	0x240019c0

08002738 <sample_pmt_spi>:

void sample_pmt_spi(uint8_t *buffer) {
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8002740:	f107 010c 	add.w	r1, r7, #12
 8002744:	2301      	movs	r3, #1
 8002746:	2201      	movs	r2, #1
 8002748:	480c      	ldr	r0, [pc, #48]	; (800277c <sample_pmt_spi+0x44>)
 800274a:	f00b fcbb 	bl	800e0c4 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 800274e:	2300      	movs	r3, #0
 8002750:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8002752:	7b7b      	ldrb	r3, [r7, #13]
 8002754:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <sample_pmt_spi+0x44>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b07      	ldr	r3, [pc, #28]	; (800277c <sample_pmt_spi+0x44>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002764:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	7bba      	ldrb	r2, [r7, #14]
 800276a:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3301      	adds	r3, #1
 8002770:	7bfa      	ldrb	r2, [r7, #15]
 8002772:	701a      	strb	r2, [r3, #0]
}
 8002774:	bf00      	nop
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	240019c8 	.word	0x240019c8

08002780 <sample_erpa_spi>:

void sample_erpa_spi(uint8_t *buffer) {
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8002788:	f107 010c 	add.w	r1, r7, #12
 800278c:	2364      	movs	r3, #100	; 0x64
 800278e:	2201      	movs	r2, #1
 8002790:	480c      	ldr	r0, [pc, #48]	; (80027c4 <sample_erpa_spi+0x44>)
 8002792:	f00b fc97 	bl	800e0c4 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8002796:	2300      	movs	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 800279a:	7b7b      	ldrb	r3, [r7, #13]
 800279c:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <sample_erpa_spi+0x44>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <sample_erpa_spi+0x44>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027ac:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	7bba      	ldrb	r2, [r7, #14]
 80027b2:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3301      	adds	r3, #1
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	701a      	strb	r2, [r3, #0]
}
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	24001a50 	.word	0x24001a50

080027c8 <sample_erpa_adc>:

void sample_erpa_adc(uint16_t *buffer) {
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <sample_erpa_adc+0x20>)
 80027d2:	885b      	ldrh	r3, [r3, #2]
 80027d4:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	89fa      	ldrh	r2, [r7, #14]
 80027da:	801a      	strh	r2, [r3, #0]
}
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	240019a0 	.word	0x240019a0

080027ec <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 80027f4:	2390      	movs	r3, #144	; 0x90
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 f8a2 	bl	8002940 <poll_i2c_sensor>
 80027fc:	4603      	mov	r3, r0
 80027fe:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8002800:	2394      	movs	r3, #148	; 0x94
 8002802:	4618      	mov	r0, r3
 8002804:	f000 f89c 	bl	8002940 <poll_i2c_sensor>
 8002808:	4603      	mov	r3, r0
 800280a:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 800280c:	2392      	movs	r3, #146	; 0x92
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f896 	bl	8002940 <poll_i2c_sensor>
 8002814:	4603      	mov	r3, r0
 8002816:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8002818:	2396      	movs	r3, #150	; 0x96
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f890 	bl	8002940 <poll_i2c_sensor>
 8002820:	4603      	mov	r3, r0
 8002822:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	89fa      	ldrh	r2, [r7, #14]
 8002828:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3302      	adds	r3, #2
 800282e:	89ba      	ldrh	r2, [r7, #12]
 8002830:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3304      	adds	r3, #4
 8002836:	897a      	ldrh	r2, [r7, #10]
 8002838:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3306      	adds	r3, #6
 800283e:	893a      	ldrh	r2, [r7, #8]
 8002840:	801a      	strh	r2, [r3, #0]
}
 8002842:	bf00      	nop
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 800284c:	b480      	push	{r7}
 800284e:	b089      	sub	sp, #36	; 0x24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8002854:	4b25      	ldr	r3, [pc, #148]	; (80028ec <sample_hk_adc1+0xa0>)
 8002856:	8a9b      	ldrh	r3, [r3, #20]
 8002858:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 800285a:	4b24      	ldr	r3, [pc, #144]	; (80028ec <sample_hk_adc1+0xa0>)
 800285c:	8a1b      	ldrh	r3, [r3, #16]
 800285e:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8002860:	4b22      	ldr	r3, [pc, #136]	; (80028ec <sample_hk_adc1+0xa0>)
 8002862:	899b      	ldrh	r3, [r3, #12]
 8002864:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8002866:	4b21      	ldr	r3, [pc, #132]	; (80028ec <sample_hk_adc1+0xa0>)
 8002868:	8a5b      	ldrh	r3, [r3, #18]
 800286a:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 800286c:	4b1f      	ldr	r3, [pc, #124]	; (80028ec <sample_hk_adc1+0xa0>)
 800286e:	889b      	ldrh	r3, [r3, #4]
 8002870:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8002872:	4b1e      	ldr	r3, [pc, #120]	; (80028ec <sample_hk_adc1+0xa0>)
 8002874:	88db      	ldrh	r3, [r3, #6]
 8002876:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8002878:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <sample_hk_adc1+0xa0>)
 800287a:	89db      	ldrh	r3, [r3, #14]
 800287c:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 800287e:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <sample_hk_adc1+0xa0>)
 8002880:	891b      	ldrh	r3, [r3, #8]
 8002882:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8002884:	4b19      	ldr	r3, [pc, #100]	; (80028ec <sample_hk_adc1+0xa0>)
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 800288a:	4b18      	ldr	r3, [pc, #96]	; (80028ec <sample_hk_adc1+0xa0>)
 800288c:	895b      	ldrh	r3, [r3, #10]
 800288e:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	8bfa      	ldrh	r2, [r7, #30]
 8002894:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3302      	adds	r3, #2
 800289a:	8bba      	ldrh	r2, [r7, #28]
 800289c:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3304      	adds	r3, #4
 80028a2:	8b7a      	ldrh	r2, [r7, #26]
 80028a4:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3306      	adds	r3, #6
 80028aa:	8b3a      	ldrh	r2, [r7, #24]
 80028ac:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3308      	adds	r3, #8
 80028b2:	8afa      	ldrh	r2, [r7, #22]
 80028b4:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	330a      	adds	r3, #10
 80028ba:	8aba      	ldrh	r2, [r7, #20]
 80028bc:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	330c      	adds	r3, #12
 80028c2:	8a7a      	ldrh	r2, [r7, #18]
 80028c4:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	330e      	adds	r3, #14
 80028ca:	8a3a      	ldrh	r2, [r7, #16]
 80028cc:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3310      	adds	r3, #16
 80028d2:	89fa      	ldrh	r2, [r7, #14]
 80028d4:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3312      	adds	r3, #18
 80028da:	89ba      	ldrh	r2, [r7, #12]
 80028dc:	801a      	strh	r2, [r3, #0]
}
 80028de:	bf00      	nop
 80028e0:	3724      	adds	r7, #36	; 0x24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	240019a0 	.word	0x240019a0

080028f0 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 80028f8:	4b10      	ldr	r3, [pc, #64]	; (800293c <sample_hk_adc3+0x4c>)
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 80028fe:	4b0f      	ldr	r3, [pc, #60]	; (800293c <sample_hk_adc3+0x4c>)
 8002900:	885b      	ldrh	r3, [r3, #2]
 8002902:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8002904:	4b0d      	ldr	r3, [pc, #52]	; (800293c <sample_hk_adc3+0x4c>)
 8002906:	889b      	ldrh	r3, [r3, #4]
 8002908:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 800290a:	4b0c      	ldr	r3, [pc, #48]	; (800293c <sample_hk_adc3+0x4c>)
 800290c:	88db      	ldrh	r3, [r3, #6]
 800290e:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	89fa      	ldrh	r2, [r7, #14]
 8002914:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3302      	adds	r3, #2
 800291a:	89ba      	ldrh	r2, [r7, #12]
 800291c:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3304      	adds	r3, #4
 8002922:	897a      	ldrh	r2, [r7, #10]
 8002924:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3306      	adds	r3, #6
 800292a:	893a      	ldrh	r2, [r7, #8]
 800292c:	801a      	strh	r2, [r3, #0]
}
 800292e:	bf00      	nop
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	240019c0 	.word	0x240019c0

08002940 <poll_i2c_sensor>:

int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af02      	add	r7, sp, #8
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 800294a:	2300      	movs	r3, #0
 800294c:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	b299      	uxth	r1, r3
 8002952:	f107 0208 	add.w	r2, r7, #8
 8002956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	2301      	movs	r3, #1
 800295e:	4817      	ldr	r0, [pc, #92]	; (80029bc <poll_i2c_sensor+0x7c>)
 8002960:	f006 fc5e 	bl	8009220 <HAL_I2C_Master_Transmit>
 8002964:	4603      	mov	r3, r0
 8002966:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8002968:	7b7b      	ldrb	r3, [r7, #13]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 800296e:	4814      	ldr	r0, [pc, #80]	; (80029c0 <poll_i2c_sensor+0x80>)
 8002970:	f013 fbca 	bl	8016108 <puts>
 8002974:	e01c      	b.n	80029b0 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	b299      	uxth	r1, r3
 800297a:	f107 0208 	add.w	r2, r7, #8
 800297e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	2302      	movs	r3, #2
 8002986:	480d      	ldr	r0, [pc, #52]	; (80029bc <poll_i2c_sensor+0x7c>)
 8002988:	f006 fd62 	bl	8009450 <HAL_I2C_Master_Receive>
 800298c:	4603      	mov	r3, r0
 800298e:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8002990:	7b7b      	ldrb	r3, [r7, #13]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8002996:	480b      	ldr	r0, [pc, #44]	; (80029c4 <poll_i2c_sensor+0x84>)
 8002998:	f013 fbb6 	bl	8016108 <puts>
 800299c:	e008      	b.n	80029b0 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 800299e:	7a3b      	ldrb	r3, [r7, #8]
 80029a0:	021b      	lsls	r3, r3, #8
 80029a2:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 80029a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029a8:	7a7a      	ldrb	r2, [r7, #9]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	10db      	asrs	r3, r3, #3
 80029ae:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 80029b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	240018c0 	.word	0x240018c0
 80029c0:	08016c70 	.word	0x08016c70
 80029c4:	08016c80 	.word	0x08016c80

080029c8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80029cc:	4b28      	ldr	r3, [pc, #160]	; (8002a70 <MX_SPI1_Init+0xa8>)
 80029ce:	4a29      	ldr	r2, [pc, #164]	; (8002a74 <MX_SPI1_Init+0xac>)
 80029d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029d2:	4b27      	ldr	r3, [pc, #156]	; (8002a70 <MX_SPI1_Init+0xa8>)
 80029d4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80029d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80029da:	4b25      	ldr	r3, [pc, #148]	; (8002a70 <MX_SPI1_Init+0xa8>)
 80029dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80029e0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80029e2:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <MX_SPI1_Init+0xa8>)
 80029e4:	220f      	movs	r2, #15
 80029e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029e8:	4b21      	ldr	r3, [pc, #132]	; (8002a70 <MX_SPI1_Init+0xa8>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029ee:	4b20      	ldr	r3, [pc, #128]	; (8002a70 <MX_SPI1_Init+0xa8>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029f4:	4b1e      	ldr	r3, [pc, #120]	; (8002a70 <MX_SPI1_Init+0xa8>)
 80029f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80029fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80029fc:	4b1c      	ldr	r3, [pc, #112]	; (8002a70 <MX_SPI1_Init+0xa8>)
 80029fe:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002a02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a04:	4b1a      	ldr	r3, [pc, #104]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a0a:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a10:	4b17      	ldr	r3, [pc, #92]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002a16:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a1c:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a22:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002a24:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002a2a:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002a30:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002a36:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002a42:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002a48:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002a4e:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a5a:	4805      	ldr	r0, [pc, #20]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a5c:	f00b fa0e 	bl	800de7c <HAL_SPI_Init>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8002a66:	f7ff fb9d 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	240019c8 	.word	0x240019c8
 8002a74:	40013000 	.word	0x40013000

08002a78 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002a7c:	4b28      	ldr	r3, [pc, #160]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002a7e:	4a29      	ldr	r2, [pc, #164]	; (8002b24 <MX_SPI2_Init+0xac>)
 8002a80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a82:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002a84:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002a88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002a8a:	4b25      	ldr	r3, [pc, #148]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002a8c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002a90:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002a92:	4b23      	ldr	r3, [pc, #140]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002a94:	220f      	movs	r2, #15
 8002a96:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a98:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a9e:	4b20      	ldr	r3, [pc, #128]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002aa4:	4b1e      	ldr	r3, [pc, #120]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002aa6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002aaa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002aac:	4b1c      	ldr	r3, [pc, #112]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002aae:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002ab2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ab4:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002aba:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ac0:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002ac6:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002acc:	4b14      	ldr	r3, [pc, #80]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002ace:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ad2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002ad4:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002ada:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002ae6:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002aec:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002af2:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002af8:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002afe:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002b04:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b0a:	4805      	ldr	r0, [pc, #20]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002b0c:	f00b f9b6 	bl	800de7c <HAL_SPI_Init>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8002b16:	f7ff fb45 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	24001a50 	.word	0x24001a50
 8002b24:	40003800 	.word	0x40003800

08002b28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b0bc      	sub	sp, #240	; 0xf0
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b30:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	60da      	str	r2, [r3, #12]
 8002b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b40:	f107 0318 	add.w	r3, r7, #24
 8002b44:	22c0      	movs	r2, #192	; 0xc0
 8002b46:	2100      	movs	r1, #0
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f013 fa67 	bl	801601c <memset>
  if(spiHandle->Instance==SPI1)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a4c      	ldr	r2, [pc, #304]	; (8002c84 <HAL_SPI_MspInit+0x15c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d145      	bne.n	8002be4 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002b58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b68:	f107 0318 	add.w	r3, r7, #24
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f008 f965 	bl	800ae3c <HAL_RCCEx_PeriphCLKConfig>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002b78:	f7ff fb14 	bl	80021a4 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b7c:	4b42      	ldr	r3, [pc, #264]	; (8002c88 <HAL_SPI_MspInit+0x160>)
 8002b7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b82:	4a41      	ldr	r2, [pc, #260]	; (8002c88 <HAL_SPI_MspInit+0x160>)
 8002b84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b88:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002b8c:	4b3e      	ldr	r3, [pc, #248]	; (8002c88 <HAL_SPI_MspInit+0x160>)
 8002b8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9a:	4b3b      	ldr	r3, [pc, #236]	; (8002c88 <HAL_SPI_MspInit+0x160>)
 8002b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ba0:	4a39      	ldr	r2, [pc, #228]	; (8002c88 <HAL_SPI_MspInit+0x160>)
 8002ba2:	f043 0302 	orr.w	r3, r3, #2
 8002ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002baa:	4b37      	ldr	r3, [pc, #220]	; (8002c88 <HAL_SPI_MspInit+0x160>)
 8002bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002bb8:	2318      	movs	r3, #24
 8002bba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bd0:	2305      	movs	r3, #5
 8002bd2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002bda:	4619      	mov	r1, r3
 8002bdc:	482b      	ldr	r0, [pc, #172]	; (8002c8c <HAL_SPI_MspInit+0x164>)
 8002bde:	f006 f8a1 	bl	8008d24 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002be2:	e04a      	b.n	8002c7a <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a29      	ldr	r2, [pc, #164]	; (8002c90 <HAL_SPI_MspInit+0x168>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d145      	bne.n	8002c7a <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002bee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bfe:	f107 0318 	add.w	r3, r7, #24
 8002c02:	4618      	mov	r0, r3
 8002c04:	f008 f91a 	bl	800ae3c <HAL_RCCEx_PeriphCLKConfig>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002c0e:	f7ff fac9 	bl	80021a4 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c12:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <HAL_SPI_MspInit+0x160>)
 8002c14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c18:	4a1b      	ldr	r2, [pc, #108]	; (8002c88 <HAL_SPI_MspInit+0x160>)
 8002c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c22:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <HAL_SPI_MspInit+0x160>)
 8002c24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c30:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <HAL_SPI_MspInit+0x160>)
 8002c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c36:	4a14      	ldr	r2, [pc, #80]	; (8002c88 <HAL_SPI_MspInit+0x160>)
 8002c38:	f043 0302 	orr.w	r3, r3, #2
 8002c3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c40:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <HAL_SPI_MspInit+0x160>)
 8002c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002c4e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002c52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c56:	2302      	movs	r3, #2
 8002c58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c68:	2305      	movs	r3, #5
 8002c6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c6e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c72:	4619      	mov	r1, r3
 8002c74:	4805      	ldr	r0, [pc, #20]	; (8002c8c <HAL_SPI_MspInit+0x164>)
 8002c76:	f006 f855 	bl	8008d24 <HAL_GPIO_Init>
}
 8002c7a:	bf00      	nop
 8002c7c:	37f0      	adds	r7, #240	; 0xf0
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40013000 	.word	0x40013000
 8002c88:	58024400 	.word	0x58024400
 8002c8c:	58020400 	.word	0x58020400
 8002c90:	40003800 	.word	0x40003800

08002c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <HAL_MspInit+0x38>)
 8002c9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ca0:	4a0a      	ldr	r2, [pc, #40]	; (8002ccc <HAL_MspInit+0x38>)
 8002ca2:	f043 0302 	orr.w	r3, r3, #2
 8002ca6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002caa:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <HAL_MspInit+0x38>)
 8002cac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	607b      	str	r3, [r7, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002cb8:	2200      	movs	r2, #0
 8002cba:	210f      	movs	r1, #15
 8002cbc:	f06f 0001 	mvn.w	r0, #1
 8002cc0:	f002 fdba 	bl	8005838 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cc4:	bf00      	nop
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	58024400 	.word	0x58024400

08002cd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b090      	sub	sp, #64	; 0x40
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b0f      	cmp	r3, #15
 8002cdc:	d827      	bhi.n	8002d2e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002cde:	2200      	movs	r2, #0
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	2036      	movs	r0, #54	; 0x36
 8002ce4:	f002 fda8 	bl	8005838 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ce8:	2036      	movs	r0, #54	; 0x36
 8002cea:	f002 fdbf 	bl	800586c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002cee:	4a29      	ldr	r2, [pc, #164]	; (8002d94 <HAL_InitTick+0xc4>)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002cf4:	4b28      	ldr	r3, [pc, #160]	; (8002d98 <HAL_InitTick+0xc8>)
 8002cf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cfa:	4a27      	ldr	r2, [pc, #156]	; (8002d98 <HAL_InitTick+0xc8>)
 8002cfc:	f043 0310 	orr.w	r3, r3, #16
 8002d00:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d04:	4b24      	ldr	r3, [pc, #144]	; (8002d98 <HAL_InitTick+0xc8>)
 8002d06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d12:	f107 0210 	add.w	r2, r7, #16
 8002d16:	f107 0314 	add.w	r3, r7, #20
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f008 f84b 	bl	800adb8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d24:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d106      	bne.n	8002d3a <HAL_InitTick+0x6a>
 8002d2c:	e001      	b.n	8002d32 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e02b      	b.n	8002d8a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002d32:	f008 f815 	bl	800ad60 <HAL_RCC_GetPCLK1Freq>
 8002d36:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002d38:	e004      	b.n	8002d44 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002d3a:	f008 f811 	bl	800ad60 <HAL_RCC_GetPCLK1Freq>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d46:	4a15      	ldr	r2, [pc, #84]	; (8002d9c <HAL_InitTick+0xcc>)
 8002d48:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4c:	0c9b      	lsrs	r3, r3, #18
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002d52:	4b13      	ldr	r3, [pc, #76]	; (8002da0 <HAL_InitTick+0xd0>)
 8002d54:	4a13      	ldr	r2, [pc, #76]	; (8002da4 <HAL_InitTick+0xd4>)
 8002d56:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002d58:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <HAL_InitTick+0xd0>)
 8002d5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d5e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002d60:	4a0f      	ldr	r2, [pc, #60]	; (8002da0 <HAL_InitTick+0xd0>)
 8002d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d64:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002d66:	4b0e      	ldr	r3, [pc, #56]	; (8002da0 <HAL_InitTick+0xd0>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d6c:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <HAL_InitTick+0xd0>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002d72:	480b      	ldr	r0, [pc, #44]	; (8002da0 <HAL_InitTick+0xd0>)
 8002d74:	f00b fcd3 	bl	800e71e <HAL_TIM_Base_Init>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d104      	bne.n	8002d88 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002d7e:	4808      	ldr	r0, [pc, #32]	; (8002da0 <HAL_InitTick+0xd0>)
 8002d80:	f00b fd24 	bl	800e7cc <HAL_TIM_Base_Start_IT>
 8002d84:	4603      	mov	r3, r0
 8002d86:	e000      	b.n	8002d8a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3740      	adds	r7, #64	; 0x40
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	2400008c 	.word	0x2400008c
 8002d98:	58024400 	.word	0x58024400
 8002d9c:	431bde83 	.word	0x431bde83
 8002da0:	24001ad8 	.word	0x24001ad8
 8002da4:	40001000 	.word	0x40001000

08002da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002dac:	e7fe      	b.n	8002dac <NMI_Handler+0x4>

08002dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002db2:	e7fe      	b.n	8002db2 <HardFault_Handler+0x4>

08002db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002db8:	e7fe      	b.n	8002db8 <MemManage_Handler+0x4>

08002dba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dbe:	e7fe      	b.n	8002dbe <BusFault_Handler+0x4>

08002dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc4:	e7fe      	b.n	8002dc4 <UsageFault_Handler+0x4>

08002dc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002dd8:	4802      	ldr	r0, [pc, #8]	; (8002de4 <DMA1_Stream0_IRQHandler+0x10>)
 8002dda:	f004 fc85 	bl	80076e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	240001e4 	.word	0x240001e4

08002de8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002dec:	4802      	ldr	r0, [pc, #8]	; (8002df8 <DMA1_Stream1_IRQHandler+0x10>)
 8002dee:	f004 fc7b 	bl	80076e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	2400025c 	.word	0x2400025c

08002dfc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002e00:	4802      	ldr	r0, [pc, #8]	; (8002e0c <DMA1_Stream2_IRQHandler+0x10>)
 8002e02:	f004 fc71 	bl	80076e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	24001c54 	.word	0x24001c54

08002e10 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002e14:	4802      	ldr	r0, [pc, #8]	; (8002e20 <DMA1_Stream5_IRQHandler+0x10>)
 8002e16:	f004 fc67 	bl	80076e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	240002e8 	.word	0x240002e8

08002e24 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e28:	4802      	ldr	r0, [pc, #8]	; (8002e34 <TIM1_BRK_IRQHandler+0x10>)
 8002e2a:	f00b ffe6 	bl	800edfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	24001b28 	.word	0x24001b28

08002e38 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e3c:	4802      	ldr	r0, [pc, #8]	; (8002e48 <TIM1_UP_IRQHandler+0x10>)
 8002e3e:	f00b ffdc 	bl	800edfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	24001b28 	.word	0x24001b28

08002e4c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e50:	4802      	ldr	r0, [pc, #8]	; (8002e5c <TIM1_TRG_COM_IRQHandler+0x10>)
 8002e52:	f00b ffd2 	bl	800edfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	24001b28 	.word	0x24001b28

08002e60 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e64:	4802      	ldr	r0, [pc, #8]	; (8002e70 <TIM1_CC_IRQHandler+0x10>)
 8002e66:	f00b ffc8 	bl	800edfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	24001b28 	.word	0x24001b28

08002e74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e78:	4802      	ldr	r0, [pc, #8]	; (8002e84 <TIM2_IRQHandler+0x10>)
 8002e7a:	f00b ffbe 	bl	800edfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	24001b74 	.word	0x24001b74

08002e88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e8c:	4802      	ldr	r0, [pc, #8]	; (8002e98 <USART1_IRQHandler+0x10>)
 8002e8e:	f00d faf7 	bl	8010480 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	24001bc0 	.word	0x24001bc0

08002e9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8002ea0:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <TIM6_DAC_IRQHandler+0x20>)
 8002ea2:	791b      	ldrb	r3, [r3, #4]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8002eaa:	4804      	ldr	r0, [pc, #16]	; (8002ebc <TIM6_DAC_IRQHandler+0x20>)
 8002eac:	f002 fe73 	bl	8005b96 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002eb0:	4803      	ldr	r0, [pc, #12]	; (8002ec0 <TIM6_DAC_IRQHandler+0x24>)
 8002eb2:	f00b ffa2 	bl	800edfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	240002d4 	.word	0x240002d4
 8002ec0:	24001ad8 	.word	0x24001ad8

08002ec4 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8002ece:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <ITM_SendChar+0x48>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a0e      	ldr	r2, [pc, #56]	; (8002f0c <ITM_SendChar+0x48>)
 8002ed4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ed8:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8002eda:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <ITM_SendChar+0x4c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a0c      	ldr	r2, [pc, #48]	; (8002f10 <ITM_SendChar+0x4c>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8002ee6:	bf00      	nop
 8002ee8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f8      	beq.n	8002ee8 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8002ef6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	6013      	str	r3, [r2, #0]
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	e000edfc 	.word	0xe000edfc
 8002f10:	e0000e00 	.word	0xe0000e00

08002f14 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	e00a      	b.n	8002f3c <_read+0x28>
		*ptr++ = __io_getchar();
 8002f26:	f3af 8000 	nop.w
 8002f2a:	4601      	mov	r1, r0
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	60ba      	str	r2, [r7, #8]
 8002f32:	b2ca      	uxtb	r2, r1
 8002f34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	dbf0      	blt.n	8002f26 <_read+0x12>
	}

	return len;
 8002f44:	687b      	ldr	r3, [r7, #4]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b086      	sub	sp, #24
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]
 8002f5e:	e009      	b.n	8002f74 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	60ba      	str	r2, [r7, #8]
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff ffab 	bl	8002ec4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	3301      	adds	r3, #1
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	dbf1      	blt.n	8002f60 <_write+0x12>
	}
	return len;
 8002f7c:	687b      	ldr	r3, [r7, #4]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <_close>:

int _close(int file) {
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <_fstat>:

int _fstat(int file, struct stat *st) {
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fae:	605a      	str	r2, [r3, #4]
	return 0;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <_isatty>:

int _isatty(int file) {
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002fc6:	2301      	movs	r3, #1
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
	...

08002ff0 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002ff8:	4a14      	ldr	r2, [pc, #80]	; (800304c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8002ffa:	4b15      	ldr	r3, [pc, #84]	; (8003050 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003004:	4b13      	ldr	r3, [pc, #76]	; (8003054 <_sbrk+0x64>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d102      	bne.n	8003012 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 800300c:	4b11      	ldr	r3, [pc, #68]	; (8003054 <_sbrk+0x64>)
 800300e:	4a12      	ldr	r2, [pc, #72]	; (8003058 <_sbrk+0x68>)
 8003010:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003012:	4b10      	ldr	r3, [pc, #64]	; (8003054 <_sbrk+0x64>)
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4413      	add	r3, r2
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	429a      	cmp	r2, r3
 800301e:	d207      	bcs.n	8003030 <_sbrk+0x40>
		errno = ENOMEM;
 8003020:	f012 ffc4 	bl	8015fac <__errno>
 8003024:	4603      	mov	r3, r0
 8003026:	220c      	movs	r2, #12
 8003028:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800302a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800302e:	e009      	b.n	8003044 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003030:	4b08      	ldr	r3, [pc, #32]	; (8003054 <_sbrk+0x64>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003036:	4b07      	ldr	r3, [pc, #28]	; (8003054 <_sbrk+0x64>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4413      	add	r3, r2
 800303e:	4a05      	ldr	r2, [pc, #20]	; (8003054 <_sbrk+0x64>)
 8003040:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003042:	68fb      	ldr	r3, [r7, #12]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	24080000 	.word	0x24080000
 8003050:	00000400 	.word	0x00000400
 8003054:	24001b24 	.word	0x24001b24
 8003058:	240066e8 	.word	0x240066e8

0800305c <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003060:	4b37      	ldr	r3, [pc, #220]	; (8003140 <SystemInit+0xe4>)
 8003062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003066:	4a36      	ldr	r2, [pc, #216]	; (8003140 <SystemInit+0xe4>)
 8003068:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800306c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003070:	4b34      	ldr	r3, [pc, #208]	; (8003144 <SystemInit+0xe8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	2b06      	cmp	r3, #6
 800307a:	d807      	bhi.n	800308c <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 800307c:	4b31      	ldr	r3, [pc, #196]	; (8003144 <SystemInit+0xe8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f023 030f 	bic.w	r3, r3, #15
 8003084:	4a2f      	ldr	r2, [pc, #188]	; (8003144 <SystemInit+0xe8>)
 8003086:	f043 0307 	orr.w	r3, r3, #7
 800308a:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 800308c:	4b2e      	ldr	r3, [pc, #184]	; (8003148 <SystemInit+0xec>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a2d      	ldr	r2, [pc, #180]	; (8003148 <SystemInit+0xec>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003098:	4b2b      	ldr	r3, [pc, #172]	; (8003148 <SystemInit+0xec>)
 800309a:	2200      	movs	r2, #0
 800309c:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 800309e:	4b2a      	ldr	r3, [pc, #168]	; (8003148 <SystemInit+0xec>)
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	4929      	ldr	r1, [pc, #164]	; (8003148 <SystemInit+0xec>)
 80030a4:	4b29      	ldr	r3, [pc, #164]	; (800314c <SystemInit+0xf0>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80030aa:	4b26      	ldr	r3, [pc, #152]	; (8003144 <SystemInit+0xe8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d007      	beq.n	80030c6 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80030b6:	4b23      	ldr	r3, [pc, #140]	; (8003144 <SystemInit+0xe8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f023 030f 	bic.w	r3, r3, #15
 80030be:	4a21      	ldr	r2, [pc, #132]	; (8003144 <SystemInit+0xe8>)
 80030c0:	f043 0307 	orr.w	r3, r3, #7
 80030c4:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80030c6:	4b20      	ldr	r3, [pc, #128]	; (8003148 <SystemInit+0xec>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80030cc:	4b1e      	ldr	r3, [pc, #120]	; (8003148 <SystemInit+0xec>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 80030d2:	4b1d      	ldr	r3, [pc, #116]	; (8003148 <SystemInit+0xec>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 80030d8:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <SystemInit+0xec>)
 80030da:	4a1d      	ldr	r2, [pc, #116]	; (8003150 <SystemInit+0xf4>)
 80030dc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 80030de:	4b1a      	ldr	r3, [pc, #104]	; (8003148 <SystemInit+0xec>)
 80030e0:	4a1c      	ldr	r2, [pc, #112]	; (8003154 <SystemInit+0xf8>)
 80030e2:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80030e4:	4b18      	ldr	r3, [pc, #96]	; (8003148 <SystemInit+0xec>)
 80030e6:	4a1c      	ldr	r2, [pc, #112]	; (8003158 <SystemInit+0xfc>)
 80030e8:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 80030ea:	4b17      	ldr	r3, [pc, #92]	; (8003148 <SystemInit+0xec>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 80030f0:	4b15      	ldr	r3, [pc, #84]	; (8003148 <SystemInit+0xec>)
 80030f2:	4a19      	ldr	r2, [pc, #100]	; (8003158 <SystemInit+0xfc>)
 80030f4:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 80030f6:	4b14      	ldr	r3, [pc, #80]	; (8003148 <SystemInit+0xec>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 80030fc:	4b12      	ldr	r3, [pc, #72]	; (8003148 <SystemInit+0xec>)
 80030fe:	4a16      	ldr	r2, [pc, #88]	; (8003158 <SystemInit+0xfc>)
 8003100:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003102:	4b11      	ldr	r3, [pc, #68]	; (8003148 <SystemInit+0xec>)
 8003104:	2200      	movs	r2, #0
 8003106:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003108:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <SystemInit+0xec>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a0e      	ldr	r2, [pc, #56]	; (8003148 <SystemInit+0xec>)
 800310e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003112:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003114:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <SystemInit+0xec>)
 8003116:	2200      	movs	r2, #0
 8003118:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800311a:	4b10      	ldr	r3, [pc, #64]	; (800315c <SystemInit+0x100>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4b10      	ldr	r3, [pc, #64]	; (8003160 <SystemInit+0x104>)
 8003120:	4013      	ands	r3, r2
 8003122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003126:	d202      	bcs.n	800312e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003128:	4b0e      	ldr	r3, [pc, #56]	; (8003164 <SystemInit+0x108>)
 800312a:	2201      	movs	r2, #1
 800312c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800312e:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <SystemInit+0x10c>)
 8003130:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003134:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003136:	bf00      	nop
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	e000ed00 	.word	0xe000ed00
 8003144:	52002000 	.word	0x52002000
 8003148:	58024400 	.word	0x58024400
 800314c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003150:	02020200 	.word	0x02020200
 8003154:	01ff0000 	.word	0x01ff0000
 8003158:	01010280 	.word	0x01010280
 800315c:	5c001000 	.word	0x5c001000
 8003160:	ffff0000 	.word	0xffff0000
 8003164:	51008108 	.word	0x51008108
 8003168:	52004000 	.word	0x52004000

0800316c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b09a      	sub	sp, #104	; 0x68
 8003170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003172:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	605a      	str	r2, [r3, #4]
 800317c:	609a      	str	r2, [r3, #8]
 800317e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003180:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800318c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	60da      	str	r2, [r3, #12]
 800319a:	611a      	str	r2, [r3, #16]
 800319c:	615a      	str	r2, [r3, #20]
 800319e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80031a0:	1d3b      	adds	r3, r7, #4
 80031a2:	222c      	movs	r2, #44	; 0x2c
 80031a4:	2100      	movs	r1, #0
 80031a6:	4618      	mov	r0, r3
 80031a8:	f012 ff38 	bl	801601c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031ac:	4b44      	ldr	r3, [pc, #272]	; (80032c0 <MX_TIM1_Init+0x154>)
 80031ae:	4a45      	ldr	r2, [pc, #276]	; (80032c4 <MX_TIM1_Init+0x158>)
 80031b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 80031b2:	4b43      	ldr	r3, [pc, #268]	; (80032c0 <MX_TIM1_Init+0x154>)
 80031b4:	2263      	movs	r2, #99	; 0x63
 80031b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031b8:	4b41      	ldr	r3, [pc, #260]	; (80032c0 <MX_TIM1_Init+0x154>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80031be:	4b40      	ldr	r3, [pc, #256]	; (80032c0 <MX_TIM1_Init+0x154>)
 80031c0:	f24f 4223 	movw	r2, #62499	; 0xf423
 80031c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031c6:	4b3e      	ldr	r3, [pc, #248]	; (80032c0 <MX_TIM1_Init+0x154>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031cc:	4b3c      	ldr	r3, [pc, #240]	; (80032c0 <MX_TIM1_Init+0x154>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031d2:	4b3b      	ldr	r3, [pc, #236]	; (80032c0 <MX_TIM1_Init+0x154>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80031d8:	4839      	ldr	r0, [pc, #228]	; (80032c0 <MX_TIM1_Init+0x154>)
 80031da:	f00b faa0 	bl	800e71e <HAL_TIM_Base_Init>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80031e4:	f7fe ffde 	bl	80021a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ec:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80031ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031f2:	4619      	mov	r1, r3
 80031f4:	4832      	ldr	r0, [pc, #200]	; (80032c0 <MX_TIM1_Init+0x154>)
 80031f6:	f00c f81b 	bl	800f230 <HAL_TIM_ConfigClockSource>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003200:	f7fe ffd0 	bl	80021a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003204:	482e      	ldr	r0, [pc, #184]	; (80032c0 <MX_TIM1_Init+0x154>)
 8003206:	f00b fd97 	bl	800ed38 <HAL_TIM_PWM_Init>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003210:	f7fe ffc8 	bl	80021a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003214:	2300      	movs	r3, #0
 8003216:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003218:	2300      	movs	r3, #0
 800321a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800321c:	2300      	movs	r3, #0
 800321e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003220:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003224:	4619      	mov	r1, r3
 8003226:	4826      	ldr	r0, [pc, #152]	; (80032c0 <MX_TIM1_Init+0x154>)
 8003228:	f00c fd58 	bl	800fcdc <HAL_TIMEx_MasterConfigSynchronization>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003232:	f7fe ffb7 	bl	80021a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003236:	2360      	movs	r3, #96	; 0x60
 8003238:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 800323a:	f240 13df 	movw	r3, #479	; 0x1df
 800323e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003240:	2300      	movs	r3, #0
 8003242:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003244:	2300      	movs	r3, #0
 8003246:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003248:	2300      	movs	r3, #0
 800324a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800324c:	2300      	movs	r3, #0
 800324e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003250:	2300      	movs	r3, #0
 8003252:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003254:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003258:	2200      	movs	r2, #0
 800325a:	4619      	mov	r1, r3
 800325c:	4818      	ldr	r0, [pc, #96]	; (80032c0 <MX_TIM1_Init+0x154>)
 800325e:	f00b fed3 	bl	800f008 <HAL_TIM_PWM_ConfigChannel>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8003268:	f7fe ff9c 	bl	80021a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800326c:	2300      	movs	r3, #0
 800326e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003270:	2300      	movs	r3, #0
 8003272:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003280:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003284:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800328a:	2300      	movs	r3, #0
 800328c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800328e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003294:	2300      	movs	r3, #0
 8003296:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003298:	2300      	movs	r3, #0
 800329a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800329c:	1d3b      	adds	r3, r7, #4
 800329e:	4619      	mov	r1, r3
 80032a0:	4807      	ldr	r0, [pc, #28]	; (80032c0 <MX_TIM1_Init+0x154>)
 80032a2:	f00c fda9 	bl	800fdf8 <HAL_TIMEx_ConfigBreakDeadTime>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80032ac:	f7fe ff7a 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80032b0:	4803      	ldr	r0, [pc, #12]	; (80032c0 <MX_TIM1_Init+0x154>)
 80032b2:	f000 f8dd 	bl	8003470 <HAL_TIM_MspPostInit>

}
 80032b6:	bf00      	nop
 80032b8:	3768      	adds	r7, #104	; 0x68
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	24001b28 	.word	0x24001b28
 80032c4:	40010000 	.word	0x40010000

080032c8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08e      	sub	sp, #56	; 0x38
 80032cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	605a      	str	r2, [r3, #4]
 80032d8:	609a      	str	r2, [r3, #8]
 80032da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032dc:	f107 031c 	add.w	r3, r7, #28
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	605a      	str	r2, [r3, #4]
 80032e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032e8:	463b      	mov	r3, r7
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	605a      	str	r2, [r3, #4]
 80032f0:	609a      	str	r2, [r3, #8]
 80032f2:	60da      	str	r2, [r3, #12]
 80032f4:	611a      	str	r2, [r3, #16]
 80032f6:	615a      	str	r2, [r3, #20]
 80032f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80032fa:	4b2d      	ldr	r3, [pc, #180]	; (80033b0 <MX_TIM2_Init+0xe8>)
 80032fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003300:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8003302:	4b2b      	ldr	r3, [pc, #172]	; (80033b0 <MX_TIM2_Init+0xe8>)
 8003304:	2263      	movs	r2, #99	; 0x63
 8003306:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003308:	4b29      	ldr	r3, [pc, #164]	; (80033b0 <MX_TIM2_Init+0xe8>)
 800330a:	2200      	movs	r2, #0
 800330c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 800330e:	4b28      	ldr	r3, [pc, #160]	; (80033b0 <MX_TIM2_Init+0xe8>)
 8003310:	f640 4234 	movw	r2, #3124	; 0xc34
 8003314:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003316:	4b26      	ldr	r3, [pc, #152]	; (80033b0 <MX_TIM2_Init+0xe8>)
 8003318:	2200      	movs	r2, #0
 800331a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800331c:	4b24      	ldr	r3, [pc, #144]	; (80033b0 <MX_TIM2_Init+0xe8>)
 800331e:	2280      	movs	r2, #128	; 0x80
 8003320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003322:	4823      	ldr	r0, [pc, #140]	; (80033b0 <MX_TIM2_Init+0xe8>)
 8003324:	f00b f9fb 	bl	800e71e <HAL_TIM_Base_Init>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800332e:	f7fe ff39 	bl	80021a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003336:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003338:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800333c:	4619      	mov	r1, r3
 800333e:	481c      	ldr	r0, [pc, #112]	; (80033b0 <MX_TIM2_Init+0xe8>)
 8003340:	f00b ff76 	bl	800f230 <HAL_TIM_ConfigClockSource>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800334a:	f7fe ff2b 	bl	80021a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800334e:	4818      	ldr	r0, [pc, #96]	; (80033b0 <MX_TIM2_Init+0xe8>)
 8003350:	f00b fcf2 	bl	800ed38 <HAL_TIM_PWM_Init>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800335a:	f7fe ff23 	bl	80021a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800335e:	2320      	movs	r3, #32
 8003360:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003362:	2300      	movs	r3, #0
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003366:	f107 031c 	add.w	r3, r7, #28
 800336a:	4619      	mov	r1, r3
 800336c:	4810      	ldr	r0, [pc, #64]	; (80033b0 <MX_TIM2_Init+0xe8>)
 800336e:	f00c fcb5 	bl	800fcdc <HAL_TIMEx_MasterConfigSynchronization>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003378:	f7fe ff14 	bl	80021a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800337c:	2360      	movs	r3, #96	; 0x60
 800337e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003380:	2300      	movs	r3, #0
 8003382:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003384:	2300      	movs	r3, #0
 8003386:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003388:	2300      	movs	r3, #0
 800338a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800338c:	463b      	mov	r3, r7
 800338e:	220c      	movs	r2, #12
 8003390:	4619      	mov	r1, r3
 8003392:	4807      	ldr	r0, [pc, #28]	; (80033b0 <MX_TIM2_Init+0xe8>)
 8003394:	f00b fe38 	bl	800f008 <HAL_TIM_PWM_ConfigChannel>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800339e:	f7fe ff01 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80033a2:	4803      	ldr	r0, [pc, #12]	; (80033b0 <MX_TIM2_Init+0xe8>)
 80033a4:	f000 f864 	bl	8003470 <HAL_TIM_MspPostInit>

}
 80033a8:	bf00      	nop
 80033aa:	3738      	adds	r7, #56	; 0x38
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	24001b74 	.word	0x24001b74

080033b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a29      	ldr	r2, [pc, #164]	; (8003468 <HAL_TIM_Base_MspInit+0xb4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d12f      	bne.n	8003426 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033c6:	4b29      	ldr	r3, [pc, #164]	; (800346c <HAL_TIM_Base_MspInit+0xb8>)
 80033c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033cc:	4a27      	ldr	r2, [pc, #156]	; (800346c <HAL_TIM_Base_MspInit+0xb8>)
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80033d6:	4b25      	ldr	r3, [pc, #148]	; (800346c <HAL_TIM_Base_MspInit+0xb8>)
 80033d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80033e4:	2200      	movs	r2, #0
 80033e6:	2105      	movs	r1, #5
 80033e8:	2018      	movs	r0, #24
 80033ea:	f002 fa25 	bl	8005838 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80033ee:	2018      	movs	r0, #24
 80033f0:	f002 fa3c 	bl	800586c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80033f4:	2200      	movs	r2, #0
 80033f6:	2105      	movs	r1, #5
 80033f8:	2019      	movs	r0, #25
 80033fa:	f002 fa1d 	bl	8005838 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80033fe:	2019      	movs	r0, #25
 8003400:	f002 fa34 	bl	800586c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8003404:	2200      	movs	r2, #0
 8003406:	2105      	movs	r1, #5
 8003408:	201a      	movs	r0, #26
 800340a:	f002 fa15 	bl	8005838 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800340e:	201a      	movs	r0, #26
 8003410:	f002 fa2c 	bl	800586c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8003414:	2200      	movs	r2, #0
 8003416:	2105      	movs	r1, #5
 8003418:	201b      	movs	r0, #27
 800341a:	f002 fa0d 	bl	8005838 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800341e:	201b      	movs	r0, #27
 8003420:	f002 fa24 	bl	800586c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003424:	e01b      	b.n	800345e <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342e:	d116      	bne.n	800345e <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003430:	4b0e      	ldr	r3, [pc, #56]	; (800346c <HAL_TIM_Base_MspInit+0xb8>)
 8003432:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003436:	4a0d      	ldr	r2, [pc, #52]	; (800346c <HAL_TIM_Base_MspInit+0xb8>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003440:	4b0a      	ldr	r3, [pc, #40]	; (800346c <HAL_TIM_Base_MspInit+0xb8>)
 8003442:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800344e:	2200      	movs	r2, #0
 8003450:	2105      	movs	r1, #5
 8003452:	201c      	movs	r0, #28
 8003454:	f002 f9f0 	bl	8005838 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003458:	201c      	movs	r0, #28
 800345a:	f002 fa07 	bl	800586c <HAL_NVIC_EnableIRQ>
}
 800345e:	bf00      	nop
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40010000 	.word	0x40010000
 800346c:	58024400 	.word	0x58024400

08003470 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08a      	sub	sp, #40	; 0x28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003478:	f107 0314 	add.w	r3, r7, #20
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a26      	ldr	r2, [pc, #152]	; (8003528 <HAL_TIM_MspPostInit+0xb8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d120      	bne.n	80034d4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003492:	4b26      	ldr	r3, [pc, #152]	; (800352c <HAL_TIM_MspPostInit+0xbc>)
 8003494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003498:	4a24      	ldr	r2, [pc, #144]	; (800352c <HAL_TIM_MspPostInit+0xbc>)
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034a2:	4b22      	ldr	r3, [pc, #136]	; (800352c <HAL_TIM_MspPostInit+0xbc>)
 80034a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80034b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b6:	2302      	movs	r3, #2
 80034b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034be:	2300      	movs	r3, #0
 80034c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034c2:	2301      	movs	r3, #1
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c6:	f107 0314 	add.w	r3, r7, #20
 80034ca:	4619      	mov	r1, r3
 80034cc:	4818      	ldr	r0, [pc, #96]	; (8003530 <HAL_TIM_MspPostInit+0xc0>)
 80034ce:	f005 fc29 	bl	8008d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80034d2:	e024      	b.n	800351e <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034dc:	d11f      	bne.n	800351e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034de:	4b13      	ldr	r3, [pc, #76]	; (800352c <HAL_TIM_MspPostInit+0xbc>)
 80034e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034e4:	4a11      	ldr	r2, [pc, #68]	; (800352c <HAL_TIM_MspPostInit+0xbc>)
 80034e6:	f043 0302 	orr.w	r3, r3, #2
 80034ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034ee:	4b0f      	ldr	r3, [pc, #60]	; (800352c <HAL_TIM_MspPostInit+0xbc>)
 80034f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80034fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003502:	2302      	movs	r3, #2
 8003504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003506:	2300      	movs	r3, #0
 8003508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350a:	2300      	movs	r3, #0
 800350c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800350e:	2301      	movs	r3, #1
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003512:	f107 0314 	add.w	r3, r7, #20
 8003516:	4619      	mov	r1, r3
 8003518:	4806      	ldr	r0, [pc, #24]	; (8003534 <HAL_TIM_MspPostInit+0xc4>)
 800351a:	f005 fc03 	bl	8008d24 <HAL_GPIO_Init>
}
 800351e:	bf00      	nop
 8003520:	3728      	adds	r7, #40	; 0x28
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40010000 	.word	0x40010000
 800352c:	58024400 	.word	0x58024400
 8003530:	58020000 	.word	0x58020000
 8003534:	58020400 	.word	0x58020400

08003538 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 8003544:	4b21      	ldr	r3, [pc, #132]	; (80035cc <get_uptime+0x94>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 800354a:	4b21      	ldr	r3, [pc, #132]	; (80035d0 <get_uptime+0x98>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8003550:	4b1e      	ldr	r3, [pc, #120]	; (80035cc <get_uptime+0x94>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	429a      	cmp	r2, r3
 8003558:	d005      	beq.n	8003566 <get_uptime+0x2e>
		ms = uptime_millis;
 800355a:	4b1c      	ldr	r3, [pc, #112]	; (80035cc <get_uptime+0x94>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 8003560:	4b1b      	ldr	r3, [pc, #108]	; (80035d0 <get_uptime+0x98>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800356c:	fb03 f202 	mul.w	r2, r3, r2
 8003570:	4b17      	ldr	r3, [pc, #92]	; (80035d0 <get_uptime+0x98>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	3301      	adds	r3, #1
 8003576:	4917      	ldr	r1, [pc, #92]	; (80035d4 <get_uptime+0x9c>)
 8003578:	fba1 1303 	umull	r1, r3, r1, r3
 800357c:	099b      	lsrs	r3, r3, #6
 800357e:	68f9      	ldr	r1, [r7, #12]
 8003580:	fbb1 f3f3 	udiv	r3, r1, r3
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <get_uptime+0x5a>
		uptime = 0;
 800358e:	2300      	movs	r3, #0
 8003590:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	0e1b      	lsrs	r3, r3, #24
 8003596:	b2da      	uxtb	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	0c1a      	lsrs	r2, r3, #16
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3301      	adds	r3, #1
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	0a1a      	lsrs	r2, r3, #8
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3302      	adds	r3, #2
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3303      	adds	r3, #3
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	701a      	strb	r2, [r3, #0]
}
 80035be:	bf00      	nop
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	24001964 	.word	0x24001964
 80035d0:	e000e010 	.word	0xe000e010
 80035d4:	10624dd3 	.word	0x10624dd3

080035d8 <get_timestamp>:

void get_timestamp(uint8_t *buffer) {
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08a      	sub	sp, #40	; 0x28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 80035e0:	f107 0310 	add.w	r3, r7, #16
 80035e4:	2200      	movs	r2, #0
 80035e6:	4619      	mov	r1, r3
 80035e8:	4821      	ldr	r0, [pc, #132]	; (8003670 <get_timestamp+0x98>)
 80035ea:	f00a fa45 	bl	800da78 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 80035ee:	f107 030c 	add.w	r3, r7, #12
 80035f2:	2200      	movs	r2, #0
 80035f4:	4619      	mov	r1, r3
 80035f6:	481e      	ldr	r0, [pc, #120]	; (8003670 <get_timestamp+0x98>)
 80035f8:	f00a fb22 	bl	800dc40 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	2264      	movs	r2, #100	; 0x64
 8003600:	fb03 f202 	mul.w	r2, r3, r2
 8003604:	4b1b      	ldr	r3, [pc, #108]	; (8003674 <get_timestamp+0x9c>)
 8003606:	1a9b      	subs	r3, r3, r2
 8003608:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 800360a:	7bfa      	ldrb	r2, [r7, #15]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3301      	adds	r3, #1
 8003614:	7b7a      	ldrb	r2, [r7, #13]
 8003616:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3302      	adds	r3, #2
 800361c:	7bba      	ldrb	r2, [r7, #14]
 800361e:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3303      	adds	r3, #3
 8003624:	7c3a      	ldrb	r2, [r7, #16]
 8003626:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3304      	adds	r3, #4
 800362c:	7c7a      	ldrb	r2, [r7, #17]
 800362e:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3305      	adds	r3, #5
 8003634:	7cba      	ldrb	r2, [r7, #18]
 8003636:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	0e1a      	lsrs	r2, r3, #24
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3306      	adds	r3, #6
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	0c1a      	lsrs	r2, r3, #16
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3307      	adds	r3, #7
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	0a1a      	lsrs	r2, r3, #8
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3308      	adds	r3, #8
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3309      	adds	r3, #9
 8003660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	701a      	strb	r2, [r3, #0]
}
 8003666:	bf00      	nop
 8003668:	3728      	adds	r7, #40	; 0x28
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	24001978 	.word	0x24001978
 8003674:	000f4240 	.word	0x000f4240

08003678 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800367c:	4b30      	ldr	r3, [pc, #192]	; (8003740 <MX_USART1_UART_Init+0xc8>)
 800367e:	4a31      	ldr	r2, [pc, #196]	; (8003744 <MX_USART1_UART_Init+0xcc>)
 8003680:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8003682:	4b2f      	ldr	r3, [pc, #188]	; (8003740 <MX_USART1_UART_Init+0xc8>)
 8003684:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8003688:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800368a:	4b2d      	ldr	r3, [pc, #180]	; (8003740 <MX_USART1_UART_Init+0xc8>)
 800368c:	2200      	movs	r2, #0
 800368e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003690:	4b2b      	ldr	r3, [pc, #172]	; (8003740 <MX_USART1_UART_Init+0xc8>)
 8003692:	2200      	movs	r2, #0
 8003694:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003696:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <MX_USART1_UART_Init+0xc8>)
 8003698:	2200      	movs	r2, #0
 800369a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800369c:	4b28      	ldr	r3, [pc, #160]	; (8003740 <MX_USART1_UART_Init+0xc8>)
 800369e:	220c      	movs	r2, #12
 80036a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036a2:	4b27      	ldr	r3, [pc, #156]	; (8003740 <MX_USART1_UART_Init+0xc8>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80036a8:	4b25      	ldr	r3, [pc, #148]	; (8003740 <MX_USART1_UART_Init+0xc8>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036ae:	4b24      	ldr	r3, [pc, #144]	; (8003740 <MX_USART1_UART_Init+0xc8>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80036b4:	4b22      	ldr	r3, [pc, #136]	; (8003740 <MX_USART1_UART_Init+0xc8>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036ba:	4b21      	ldr	r3, [pc, #132]	; (8003740 <MX_USART1_UART_Init+0xc8>)
 80036bc:	2200      	movs	r2, #0
 80036be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80036c0:	481f      	ldr	r0, [pc, #124]	; (8003740 <MX_USART1_UART_Init+0xc8>)
 80036c2:	f00c fc35 	bl	800ff30 <HAL_UART_Init>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80036cc:	f7fe fd6a 	bl	80021a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036d0:	2100      	movs	r1, #0
 80036d2:	481b      	ldr	r0, [pc, #108]	; (8003740 <MX_USART1_UART_Init+0xc8>)
 80036d4:	f00f f97b 	bl	80129ce <HAL_UARTEx_SetTxFifoThreshold>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80036de:	f7fe fd61 	bl	80021a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036e2:	2100      	movs	r1, #0
 80036e4:	4816      	ldr	r0, [pc, #88]	; (8003740 <MX_USART1_UART_Init+0xc8>)
 80036e6:	f00f f9b0 	bl	8012a4a <HAL_UARTEx_SetRxFifoThreshold>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80036f0:	f7fe fd58 	bl	80021a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80036f4:	4812      	ldr	r0, [pc, #72]	; (8003740 <MX_USART1_UART_Init+0xc8>)
 80036f6:	f00f f931 	bl	801295c <HAL_UARTEx_DisableFifoMode>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003700:	f7fe fd50 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8003704:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003708:	480d      	ldr	r0, [pc, #52]	; (8003740 <MX_USART1_UART_Init+0xc8>)
 800370a:	f00f f99e 	bl	8012a4a <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 800370e:	480c      	ldr	r0, [pc, #48]	; (8003740 <MX_USART1_UART_Init+0xc8>)
 8003710:	f00f f8e9 	bl	80128e6 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8003714:	480a      	ldr	r0, [pc, #40]	; (8003740 <MX_USART1_UART_Init+0xc8>)
 8003716:	f00f f8b3 	bl	8012880 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 800371a:	4b09      	ldr	r3, [pc, #36]	; (8003740 <MX_USART1_UART_Init+0xc8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	4b07      	ldr	r3, [pc, #28]	; (8003740 <MX_USART1_UART_Init+0xc8>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003728:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800372a:	4b05      	ldr	r3, [pc, #20]	; (8003740 <MX_USART1_UART_Init+0xc8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	4b03      	ldr	r3, [pc, #12]	; (8003740 <MX_USART1_UART_Init+0xc8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003738:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	24001bc0 	.word	0x24001bc0
 8003744:	40011000 	.word	0x40011000

08003748 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b0ba      	sub	sp, #232	; 0xe8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003750:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	609a      	str	r2, [r3, #8]
 800375c:	60da      	str	r2, [r3, #12]
 800375e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003760:	f107 0310 	add.w	r3, r7, #16
 8003764:	22c0      	movs	r2, #192	; 0xc0
 8003766:	2100      	movs	r1, #0
 8003768:	4618      	mov	r0, r3
 800376a:	f012 fc57 	bl	801601c <memset>
  if(uartHandle->Instance==USART1)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a41      	ldr	r2, [pc, #260]	; (8003878 <HAL_UART_MspInit+0x130>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d17b      	bne.n	8003870 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003778:	f04f 0201 	mov.w	r2, #1
 800377c:	f04f 0300 	mov.w	r3, #0
 8003780:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003784:	2318      	movs	r3, #24
 8003786:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800378a:	f107 0310 	add.w	r3, r7, #16
 800378e:	4618      	mov	r0, r3
 8003790:	f007 fb54 	bl	800ae3c <HAL_RCCEx_PeriphCLKConfig>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800379a:	f7fe fd03 	bl	80021a4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800379e:	4b37      	ldr	r3, [pc, #220]	; (800387c <HAL_UART_MspInit+0x134>)
 80037a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037a4:	4a35      	ldr	r2, [pc, #212]	; (800387c <HAL_UART_MspInit+0x134>)
 80037a6:	f043 0310 	orr.w	r3, r3, #16
 80037aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80037ae:	4b33      	ldr	r3, [pc, #204]	; (800387c <HAL_UART_MspInit+0x134>)
 80037b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037bc:	4b2f      	ldr	r3, [pc, #188]	; (800387c <HAL_UART_MspInit+0x134>)
 80037be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037c2:	4a2e      	ldr	r2, [pc, #184]	; (800387c <HAL_UART_MspInit+0x134>)
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037cc:	4b2b      	ldr	r3, [pc, #172]	; (800387c <HAL_UART_MspInit+0x134>)
 80037ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	60bb      	str	r3, [r7, #8]
 80037d8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80037da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80037de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e2:	2302      	movs	r3, #2
 80037e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e8:	2300      	movs	r3, #0
 80037ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ee:	2300      	movs	r3, #0
 80037f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037f4:	2307      	movs	r3, #7
 80037f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80037fe:	4619      	mov	r1, r3
 8003800:	481f      	ldr	r0, [pc, #124]	; (8003880 <HAL_UART_MspInit+0x138>)
 8003802:	f005 fa8f 	bl	8008d24 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8003806:	4b1f      	ldr	r3, [pc, #124]	; (8003884 <HAL_UART_MspInit+0x13c>)
 8003808:	4a1f      	ldr	r2, [pc, #124]	; (8003888 <HAL_UART_MspInit+0x140>)
 800380a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800380c:	4b1d      	ldr	r3, [pc, #116]	; (8003884 <HAL_UART_MspInit+0x13c>)
 800380e:	222a      	movs	r2, #42	; 0x2a
 8003810:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003812:	4b1c      	ldr	r3, [pc, #112]	; (8003884 <HAL_UART_MspInit+0x13c>)
 8003814:	2240      	movs	r2, #64	; 0x40
 8003816:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003818:	4b1a      	ldr	r3, [pc, #104]	; (8003884 <HAL_UART_MspInit+0x13c>)
 800381a:	2200      	movs	r2, #0
 800381c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800381e:	4b19      	ldr	r3, [pc, #100]	; (8003884 <HAL_UART_MspInit+0x13c>)
 8003820:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003824:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003826:	4b17      	ldr	r3, [pc, #92]	; (8003884 <HAL_UART_MspInit+0x13c>)
 8003828:	2200      	movs	r2, #0
 800382a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800382c:	4b15      	ldr	r3, [pc, #84]	; (8003884 <HAL_UART_MspInit+0x13c>)
 800382e:	2200      	movs	r2, #0
 8003830:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003832:	4b14      	ldr	r3, [pc, #80]	; (8003884 <HAL_UART_MspInit+0x13c>)
 8003834:	2200      	movs	r2, #0
 8003836:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003838:	4b12      	ldr	r3, [pc, #72]	; (8003884 <HAL_UART_MspInit+0x13c>)
 800383a:	2200      	movs	r2, #0
 800383c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800383e:	4b11      	ldr	r3, [pc, #68]	; (8003884 <HAL_UART_MspInit+0x13c>)
 8003840:	2200      	movs	r2, #0
 8003842:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003844:	480f      	ldr	r0, [pc, #60]	; (8003884 <HAL_UART_MspInit+0x13c>)
 8003846:	f002 fc25 	bl	8006094 <HAL_DMA_Init>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003850:	f7fe fca8 	bl	80021a4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a0b      	ldr	r2, [pc, #44]	; (8003884 <HAL_UART_MspInit+0x13c>)
 8003858:	67da      	str	r2, [r3, #124]	; 0x7c
 800385a:	4a0a      	ldr	r2, [pc, #40]	; (8003884 <HAL_UART_MspInit+0x13c>)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003860:	2200      	movs	r2, #0
 8003862:	2105      	movs	r1, #5
 8003864:	2025      	movs	r0, #37	; 0x25
 8003866:	f001 ffe7 	bl	8005838 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800386a:	2025      	movs	r0, #37	; 0x25
 800386c:	f001 fffe 	bl	800586c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003870:	bf00      	nop
 8003872:	37e8      	adds	r7, #232	; 0xe8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40011000 	.word	0x40011000
 800387c:	58024400 	.word	0x58024400
 8003880:	58020000 	.word	0x58020000
 8003884:	24001c54 	.word	0x24001c54
 8003888:	40020040 	.word	0x40020040

0800388c <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8003896:	4bc2      	ldr	r3, [pc, #776]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003898:	2200      	movs	r2, #0
 800389a:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 800389c:	4bc0      	ldr	r3, [pc, #768]	; (8003ba0 <voltage_monitor_init+0x314>)
 800389e:	2200      	movs	r2, #0
 80038a0:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 80038a2:	4bbf      	ldr	r3, [pc, #764]	; (8003ba0 <voltage_monitor_init+0x314>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 80038a8:	4bbd      	ldr	r3, [pc, #756]	; (8003ba0 <voltage_monitor_init+0x314>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 80038ae:	4bbc      	ldr	r3, [pc, #752]	; (8003ba0 <voltage_monitor_init+0x314>)
 80038b0:	f242 7210 	movw	r2, #10000	; 0x2710
 80038b4:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 80038b6:	4bba      	ldr	r3, [pc, #744]	; (8003ba0 <voltage_monitor_init+0x314>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 80038bc:	4bb8      	ldr	r3, [pc, #736]	; (8003ba0 <voltage_monitor_init+0x314>)
 80038be:	2201      	movs	r2, #1
 80038c0:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 80038c2:	4bb7      	ldr	r3, [pc, #732]	; (8003ba0 <voltage_monitor_init+0x314>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 80038c8:	4bb5      	ldr	r3, [pc, #724]	; (8003ba0 <voltage_monitor_init+0x314>)
 80038ca:	2201      	movs	r2, #1
 80038cc:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 80038ce:	4bb4      	ldr	r3, [pc, #720]	; (8003ba0 <voltage_monitor_init+0x314>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 80038d4:	4bb2      	ldr	r3, [pc, #712]	; (8003ba0 <voltage_monitor_init+0x314>)
 80038d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80038da:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 80038dc:	4bb0      	ldr	r3, [pc, #704]	; (8003ba0 <voltage_monitor_init+0x314>)
 80038de:	2200      	movs	r2, #0
 80038e0:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 80038e2:	4baf      	ldr	r3, [pc, #700]	; (8003ba0 <voltage_monitor_init+0x314>)
 80038e4:	2202      	movs	r2, #2
 80038e6:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 80038e8:	4bad      	ldr	r3, [pc, #692]	; (8003ba0 <voltage_monitor_init+0x314>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 80038ee:	4bac      	ldr	r3, [pc, #688]	; (8003ba0 <voltage_monitor_init+0x314>)
 80038f0:	2201      	movs	r2, #1
 80038f2:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 80038f4:	4baa      	ldr	r3, [pc, #680]	; (8003ba0 <voltage_monitor_init+0x314>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 80038fa:	4ba9      	ldr	r3, [pc, #676]	; (8003ba0 <voltage_monitor_init+0x314>)
 80038fc:	f242 7210 	movw	r2, #10000	; 0x2710
 8003900:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 8003902:	4ba7      	ldr	r3, [pc, #668]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003904:	2200      	movs	r2, #0
 8003906:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8003908:	4ba5      	ldr	r3, [pc, #660]	; (8003ba0 <voltage_monitor_init+0x314>)
 800390a:	2203      	movs	r2, #3
 800390c:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 800390e:	4ba4      	ldr	r3, [pc, #656]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003910:	2200      	movs	r2, #0
 8003912:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 8003914:	4ba2      	ldr	r3, [pc, #648]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 800391c:	4ba0      	ldr	r3, [pc, #640]	; (8003ba0 <voltage_monitor_init+0x314>)
 800391e:	2200      	movs	r2, #0
 8003920:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003922:	4b9f      	ldr	r3, [pc, #636]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003924:	f242 7210 	movw	r2, #10000	; 0x2710
 8003928:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 800392a:	4b9d      	ldr	r3, [pc, #628]	; (8003ba0 <voltage_monitor_init+0x314>)
 800392c:	2200      	movs	r2, #0
 800392e:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 8003930:	4b9b      	ldr	r3, [pc, #620]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003932:	2204      	movs	r2, #4
 8003934:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8003938:	4b99      	ldr	r3, [pc, #612]	; (8003ba0 <voltage_monitor_init+0x314>)
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 8003940:	4b97      	ldr	r3, [pc, #604]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003942:	2201      	movs	r2, #1
 8003944:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8003948:	4b95      	ldr	r3, [pc, #596]	; (8003ba0 <voltage_monitor_init+0x314>)
 800394a:	2200      	movs	r2, #0
 800394c:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 800394e:	4b94      	ldr	r3, [pc, #592]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003950:	f242 7210 	movw	r2, #10000	; 0x2710
 8003954:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8003956:	4b92      	ldr	r3, [pc, #584]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003958:	2200      	movs	r2, #0
 800395a:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 800395c:	4b90      	ldr	r3, [pc, #576]	; (8003ba0 <voltage_monitor_init+0x314>)
 800395e:	2205      	movs	r2, #5
 8003960:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8003964:	4b8e      	ldr	r3, [pc, #568]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 800396c:	4b8c      	ldr	r3, [pc, #560]	; (8003ba0 <voltage_monitor_init+0x314>)
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8003974:	4b8a      	ldr	r3, [pc, #552]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003976:	2200      	movs	r2, #0
 8003978:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 800397a:	4b89      	ldr	r3, [pc, #548]	; (8003ba0 <voltage_monitor_init+0x314>)
 800397c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003980:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 8003982:	4b87      	ldr	r3, [pc, #540]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003984:	2200      	movs	r2, #0
 8003986:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8003988:	4b85      	ldr	r3, [pc, #532]	; (8003ba0 <voltage_monitor_init+0x314>)
 800398a:	2206      	movs	r2, #6
 800398c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 8003990:	4b83      	ldr	r3, [pc, #524]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 8003998:	4b81      	ldr	r3, [pc, #516]	; (8003ba0 <voltage_monitor_init+0x314>)
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 80039a0:	4b7f      	ldr	r3, [pc, #508]	; (8003ba0 <voltage_monitor_init+0x314>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 80039a8:	4b7d      	ldr	r3, [pc, #500]	; (8003ba0 <voltage_monitor_init+0x314>)
 80039aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80039ae:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 80039b2:	4b7b      	ldr	r3, [pc, #492]	; (8003ba0 <voltage_monitor_init+0x314>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 80039ba:	4b79      	ldr	r3, [pc, #484]	; (8003ba0 <voltage_monitor_init+0x314>)
 80039bc:	2207      	movs	r2, #7
 80039be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 80039c2:	4b77      	ldr	r3, [pc, #476]	; (8003ba0 <voltage_monitor_init+0x314>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 80039ca:	4b75      	ldr	r3, [pc, #468]	; (8003ba0 <voltage_monitor_init+0x314>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 80039d2:	4b73      	ldr	r3, [pc, #460]	; (8003ba0 <voltage_monitor_init+0x314>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 80039da:	4b71      	ldr	r3, [pc, #452]	; (8003ba0 <voltage_monitor_init+0x314>)
 80039dc:	f242 7210 	movw	r2, #10000	; 0x2710
 80039e0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 80039e4:	4b6e      	ldr	r3, [pc, #440]	; (8003ba0 <voltage_monitor_init+0x314>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 80039ec:	4b6c      	ldr	r3, [pc, #432]	; (8003ba0 <voltage_monitor_init+0x314>)
 80039ee:	2208      	movs	r2, #8
 80039f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 80039f4:	4b6a      	ldr	r3, [pc, #424]	; (8003ba0 <voltage_monitor_init+0x314>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 80039fc:	4b68      	ldr	r3, [pc, #416]	; (8003ba0 <voltage_monitor_init+0x314>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 8003a04:	4b66      	ldr	r3, [pc, #408]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 8003a0c:	4b64      	ldr	r3, [pc, #400]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003a0e:	f640 42b9 	movw	r2, #3257	; 0xcb9
 8003a12:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 8003a16:	4b62      	ldr	r3, [pc, #392]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003a18:	f640 3283 	movw	r2, #2947	; 0xb83
 8003a1c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 8003a20:	4b5f      	ldr	r3, [pc, #380]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003a22:	2209      	movs	r2, #9
 8003a24:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8003a28:	4b5d      	ldr	r3, [pc, #372]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 8003a30:	4b5b      	ldr	r3, [pc, #364]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8003a38:	4b59      	ldr	r3, [pc, #356]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 8003a40:	4b57      	ldr	r3, [pc, #348]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003a42:	f640 7245 	movw	r2, #3909	; 0xf45
 8003a46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8003a4a:	4b55      	ldr	r3, [pc, #340]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8003a52:	4b53      	ldr	r3, [pc, #332]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003a54:	220a      	movs	r2, #10
 8003a56:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8003a5a:	4b51      	ldr	r3, [pc, #324]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 8003a62:	4b4f      	ldr	r3, [pc, #316]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 8003a6a:	4b4d      	ldr	r3, [pc, #308]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 8003a72:	4b4b      	ldr	r3, [pc, #300]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003a74:	f640 7245 	movw	r2, #3909	; 0xf45
 8003a78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 8003a7c:	4b48      	ldr	r3, [pc, #288]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003a7e:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8003a82:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8003a86:	4b46      	ldr	r3, [pc, #280]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003a88:	220b      	movs	r2, #11
 8003a8a:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 8003a8e:	4b44      	ldr	r3, [pc, #272]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8003a96:	4b42      	ldr	r3, [pc, #264]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 8003a9e:	4b40      	ldr	r3, [pc, #256]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 8003aa6:	4b3e      	ldr	r3, [pc, #248]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003aa8:	f640 72fb 	movw	r2, #4091	; 0xffb
 8003aac:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 8003ab0:	4b3b      	ldr	r3, [pc, #236]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003ab2:	f640 6276 	movw	r2, #3702	; 0xe76
 8003ab6:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 8003aba:	4b39      	ldr	r3, [pc, #228]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003abc:	220c      	movs	r2, #12
 8003abe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 8003ac2:	4b37      	ldr	r3, [pc, #220]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 8003aca:	4b35      	ldr	r3, [pc, #212]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 8003ad2:	4b33      	ldr	r3, [pc, #204]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 8003ada:	4b31      	ldr	r3, [pc, #196]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003adc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003ae0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8003ae4:	4b2e      	ldr	r3, [pc, #184]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8003aec:	4b2c      	ldr	r3, [pc, #176]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003aee:	220d      	movs	r2, #13
 8003af0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 8003af4:	4b2a      	ldr	r3, [pc, #168]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 8003afc:	4b28      	ldr	r3, [pc, #160]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 8003b04:	4b26      	ldr	r3, [pc, #152]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 8003b0c:	4b24      	ldr	r3, [pc, #144]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003b0e:	f640 7238 	movw	r2, #3896	; 0xf38
 8003b12:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 8003b16:	4b22      	ldr	r3, [pc, #136]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003b18:	f640 52c5 	movw	r2, #3525	; 0xdc5
 8003b1c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 8003b20:	4b1f      	ldr	r3, [pc, #124]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003b22:	220e      	movs	r2, #14
 8003b24:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8003b28:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8003b30:	4b1b      	ldr	r3, [pc, #108]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8003b38:	4b19      	ldr	r3, [pc, #100]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 8003b40:	4b17      	ldr	r3, [pc, #92]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003b42:	f640 7245 	movw	r2, #3909	; 0xf45
 8003b46:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 8003b4a:	4b15      	ldr	r3, [pc, #84]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003b4c:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8003b50:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8003b54:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003b56:	220f      	movs	r2, #15
 8003b58:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8003b5c:	4b10      	ldr	r3, [pc, #64]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8003b64:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 8003b6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 8003b74:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003b76:	f241 0264 	movw	r2, #4196	; 0x1064
 8003b7a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 8003b7e:	4b08      	ldr	r3, [pc, #32]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8003b86:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003b88:	2210      	movs	r2, #16
 8003b8a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 8003b8e:	4b04      	ldr	r3, [pc, #16]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 8003b96:	4b02      	ldr	r3, [pc, #8]	; (8003ba0 <voltage_monitor_init+0x314>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8003b9e:	e001      	b.n	8003ba4 <voltage_monitor_init+0x318>
 8003ba0:	24001ccc 	.word	0x24001ccc
	rail_monitor[RAIL_n800v].data = 0;
 8003ba4:	4b17      	ldr	r3, [pc, #92]	; (8003c04 <voltage_monitor_init+0x378>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 8003bac:	4b15      	ldr	r3, [pc, #84]	; (8003c04 <voltage_monitor_init+0x378>)
 8003bae:	f640 5208 	movw	r2, #3336	; 0xd08
 8003bb2:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 8003bb6:	4b13      	ldr	r3, [pc, #76]	; (8003c04 <voltage_monitor_init+0x378>)
 8003bb8:	f640 32ca 	movw	r2, #3018	; 0xbca
 8003bbc:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8003bc0:	4b10      	ldr	r3, [pc, #64]	; (8003c04 <voltage_monitor_init+0x378>)
 8003bc2:	2211      	movs	r2, #17
 8003bc4:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 8003bc8:	4b0e      	ldr	r3, [pc, #56]	; (8003c04 <voltage_monitor_init+0x378>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <voltage_monitor_init+0x378>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 8003bd8:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <voltage_monitor_init+0x378>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003be0:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <voltage_monitor_init+0x378>)
 8003be2:	f242 7210 	movw	r2, #10000	; 0x2710
 8003be6:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 8003bea:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <voltage_monitor_init+0x378>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	71fb      	strb	r3, [r7, #7]

	return status;
 8003bf6:	79fb      	ldrb	r3, [r7, #7]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	24001ccc 	.word	0x24001ccc

08003c08 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	460a      	mov	r2, r1
 8003c12:	71fb      	strb	r3, [r7, #7]
 8003c14:	4613      	mov	r3, r2
 8003c16:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8003c1c:	79fa      	ldrb	r2, [r7, #7]
 8003c1e:	4909      	ldr	r1, [pc, #36]	; (8003c44 <set_rail_monitor_enable+0x3c>)
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	440b      	add	r3, r1
 8003c2a:	3302      	adds	r3, #2
 8003c2c:	79ba      	ldrb	r2, [r7, #6]
 8003c2e:	701a      	strb	r2, [r3, #0]
	status = 1;
 8003c30:	2301      	movs	r3, #1
 8003c32:	73fb      	strb	r3, [r7, #15]

	return status;
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	24001ccc 	.word	0x24001ccc

08003c48 <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
	return rail_monitor;
 8003c4c:	4b02      	ldr	r3, [pc, #8]	; (8003c58 <get_rail_monitor+0x10>)
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	24001ccc 	.word	0x24001ccc

08003c5c <set_rail_monitor>:

uint8_t set_rail_monitor() {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08a      	sub	sp, #40	; 0x28
 8003c60:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003c62:	2300      	movs	r3, #0
 8003c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 8003c68:	463b      	mov	r3, r7
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fe fdbe 	bl	80027ec <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8003c70:	f107 0310 	add.w	r3, r7, #16
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fe fde9 	bl	800284c <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8003c7a:	f107 0308 	add.w	r3, r7, #8
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fe fe36 	bl	80028f0 <sample_hk_adc3>
 8003c84:	897a      	ldrh	r2, [r7, #10]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[1], sizeof(uint16_t));
 8003c86:	4b25      	ldr	r3, [pc, #148]	; (8003d1c <set_rail_monitor+0xc0>)
 8003c88:	809a      	strh	r2, [r3, #4]
 8003c8a:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[0], sizeof(uint16_t));
 8003c8c:	4b23      	ldr	r3, [pc, #140]	; (8003d1c <set_rail_monitor+0xc0>)
 8003c8e:	81da      	strh	r2, [r3, #14]
 8003c90:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 8003c92:	4b22      	ldr	r3, [pc, #136]	; (8003d1c <set_rail_monitor+0xc0>)
 8003c94:	831a      	strh	r2, [r3, #24]
 8003c96:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 8003c98:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <set_rail_monitor+0xc0>)
 8003c9a:	845a      	strh	r2, [r3, #34]	; 0x22
 8003c9c:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 8003c9e:	4b1f      	ldr	r3, [pc, #124]	; (8003d1c <set_rail_monitor+0xc0>)
 8003ca0:	859a      	strh	r2, [r3, #44]	; 0x2c
 8003ca2:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 8003ca4:	4b1d      	ldr	r3, [pc, #116]	; (8003d1c <set_rail_monitor+0xc0>)
 8003ca6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ca8:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 8003caa:	4b1c      	ldr	r3, [pc, #112]	; (8003d1c <set_rail_monitor+0xc0>)
 8003cac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8003cb0:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 8003cb2:	4b1a      	ldr	r3, [pc, #104]	; (8003d1c <set_rail_monitor+0xc0>)
 8003cb4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8003cb8:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 8003cba:	4b18      	ldr	r3, [pc, #96]	; (8003d1c <set_rail_monitor+0xc0>)
 8003cbc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003cc0:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 8003cc2:	4b16      	ldr	r3, [pc, #88]	; (8003d1c <set_rail_monitor+0xc0>)
 8003cc4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8003cc8:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 8003cca:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <set_rail_monitor+0xc0>)
 8003ccc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8003cd0:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 8003cd2:	4b12      	ldr	r3, [pc, #72]	; (8003d1c <set_rail_monitor+0xc0>)
 8003cd4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8003cd8:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 8003cda:	4b10      	ldr	r3, [pc, #64]	; (8003d1c <set_rail_monitor+0xc0>)
 8003cdc:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8003ce0:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 8003ce2:	4b0e      	ldr	r3, [pc, #56]	; (8003d1c <set_rail_monitor+0xc0>)
 8003ce4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8003ce8:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 8003cea:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <set_rail_monitor+0xc0>)
 8003cec:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8003cf0:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 8003cf2:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <set_rail_monitor+0xc0>)
 8003cf4:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8003cf8:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 8003cfa:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <set_rail_monitor+0xc0>)
 8003cfc:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8003d00:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 8003d02:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <set_rail_monitor+0xc0>)
 8003d04:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	status = 1;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 8003d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3728      	adds	r7, #40	; 0x28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	24001ccc 	.word	0x24001ccc

08003d20 <in_range>:


uint8_t in_range(uint16_t raw, int min, int max) {
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	4603      	mov	r3, r0
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 8003d2e:	89fb      	ldrh	r3, [r7, #14]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	db05      	blt.n	8003d42 <in_range+0x22>
 8003d36:	89fb      	ldrh	r3, [r7, #14]
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	dc01      	bgt.n	8003d42 <in_range+0x22>
		return 1;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <in_range+0x24>
	}
	return 0;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003d50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003d54:	f7ff f982 	bl	800305c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d58:	480c      	ldr	r0, [pc, #48]	; (8003d8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d5a:	490d      	ldr	r1, [pc, #52]	; (8003d90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d5c:	4a0d      	ldr	r2, [pc, #52]	; (8003d94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d60:	e002      	b.n	8003d68 <LoopCopyDataInit>

08003d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d66:	3304      	adds	r3, #4

08003d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d6c:	d3f9      	bcc.n	8003d62 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d6e:	4a0a      	ldr	r2, [pc, #40]	; (8003d98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003d70:	4c0a      	ldr	r4, [pc, #40]	; (8003d9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d74:	e001      	b.n	8003d7a <LoopFillZerobss>

08003d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d78:	3204      	adds	r2, #4

08003d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d7c:	d3fb      	bcc.n	8003d76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d7e:	f012 f91b 	bl	8015fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d82:	f7fe f839 	bl	8001df8 <main>
  bx  lr
 8003d86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d88:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003d8c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003d90:	240000fc 	.word	0x240000fc
  ldr r2, =_sidata
 8003d94:	08016ee8 	.word	0x08016ee8
  ldr r2, =_sbss
 8003d98:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 8003d9c:	240066e4 	.word	0x240066e4

08003da0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003da0:	e7fe      	b.n	8003da0 <ADC3_IRQHandler>
	...

08003da4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003daa:	2003      	movs	r0, #3
 8003dac:	f001 fd39 	bl	8005822 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003db0:	f006 fe2c 	bl	800aa0c <HAL_RCC_GetSysClockFreq>
 8003db4:	4602      	mov	r2, r0
 8003db6:	4b15      	ldr	r3, [pc, #84]	; (8003e0c <HAL_Init+0x68>)
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	0a1b      	lsrs	r3, r3, #8
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	4913      	ldr	r1, [pc, #76]	; (8003e10 <HAL_Init+0x6c>)
 8003dc2:	5ccb      	ldrb	r3, [r1, r3]
 8003dc4:	f003 031f 	and.w	r3, r3, #31
 8003dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dcc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dce:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <HAL_Init+0x68>)
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	4a0e      	ldr	r2, [pc, #56]	; (8003e10 <HAL_Init+0x6c>)
 8003dd8:	5cd3      	ldrb	r3, [r2, r3]
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	fa22 f303 	lsr.w	r3, r2, r3
 8003de4:	4a0b      	ldr	r2, [pc, #44]	; (8003e14 <HAL_Init+0x70>)
 8003de6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003de8:	4a0b      	ldr	r2, [pc, #44]	; (8003e18 <HAL_Init+0x74>)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dee:	2005      	movs	r0, #5
 8003df0:	f7fe ff6e 	bl	8002cd0 <HAL_InitTick>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e002      	b.n	8003e04 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003dfe:	f7fe ff49 	bl	8002c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	58024400 	.word	0x58024400
 8003e10:	08016e34 	.word	0x08016e34
 8003e14:	24000088 	.word	0x24000088
 8003e18:	24000084 	.word	0x24000084

08003e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e20:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <HAL_IncTick+0x20>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	461a      	mov	r2, r3
 8003e26:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <HAL_IncTick+0x24>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	4a04      	ldr	r2, [pc, #16]	; (8003e40 <HAL_IncTick+0x24>)
 8003e2e:	6013      	str	r3, [r2, #0]
}
 8003e30:	bf00      	nop
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	24000090 	.word	0x24000090
 8003e40:	24001d80 	.word	0x24001d80

08003e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  return uwTick;
 8003e48:	4b03      	ldr	r3, [pc, #12]	; (8003e58 <HAL_GetTick+0x14>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	24001d80 	.word	0x24001d80

08003e5c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003e60:	4b03      	ldr	r3, [pc, #12]	; (8003e70 <HAL_GetREVID+0x14>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	0c1b      	lsrs	r3, r3, #16
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	5c001000 	.word	0x5c001000

08003e74 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003e7e:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	43db      	mvns	r3, r3
 8003e86:	401a      	ands	r2, r3
 8003e88:	4904      	ldr	r1, [pc, #16]	; (8003e9c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	604b      	str	r3, [r1, #4]
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	58000400 	.word	0x58000400

08003ea0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	609a      	str	r2, [r3, #8]
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	609a      	str	r2, [r3, #8]
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	3360      	adds	r3, #96	; 0x60
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	430b      	orrs	r3, r1
 8003f36:	431a      	orrs	r2, r3
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003f3c:	bf00      	nop
 8003f3e:	371c      	adds	r7, #28
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	f003 031f 	and.w	r3, r3, #31
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	fa01 f303 	lsl.w	r3, r1, r3
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	611a      	str	r2, [r3, #16]
}
 8003f6e:	bf00      	nop
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b087      	sub	sp, #28
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	3360      	adds	r3, #96	; 0x60
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	601a      	str	r2, [r3, #0]
  }
}
 8003fa4:	bf00      	nop
 8003fa6:	371c      	adds	r7, #28
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e000      	b.n	8003fca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b087      	sub	sp, #28
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	60f8      	str	r0, [r7, #12]
 8003fde:	60b9      	str	r1, [r7, #8]
 8003fe0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	3330      	adds	r3, #48	; 0x30
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	0a1b      	lsrs	r3, r3, #8
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	f003 030c 	and.w	r3, r3, #12
 8003ff2:	4413      	add	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	f003 031f 	and.w	r3, r3, #31
 8004000:	211f      	movs	r1, #31
 8004002:	fa01 f303 	lsl.w	r3, r1, r3
 8004006:	43db      	mvns	r3, r3
 8004008:	401a      	ands	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	0e9b      	lsrs	r3, r3, #26
 800400e:	f003 011f 	and.w	r1, r3, #31
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	f003 031f 	and.w	r3, r3, #31
 8004018:	fa01 f303 	lsl.w	r3, r1, r3
 800401c:	431a      	orrs	r2, r3
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004022:	bf00      	nop
 8004024:	371c      	adds	r7, #28
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f023 0203 	bic.w	r2, r3, #3
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	60da      	str	r2, [r3, #12]
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	3314      	adds	r3, #20
 8004064:	461a      	mov	r2, r3
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	0e5b      	lsrs	r3, r3, #25
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	4413      	add	r3, r2
 8004072:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	0d1b      	lsrs	r3, r3, #20
 800407c:	f003 031f 	and.w	r3, r3, #31
 8004080:	2107      	movs	r1, #7
 8004082:	fa01 f303 	lsl.w	r3, r1, r3
 8004086:	43db      	mvns	r3, r3
 8004088:	401a      	ands	r2, r3
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	0d1b      	lsrs	r3, r3, #20
 800408e:	f003 031f 	and.w	r3, r3, #31
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	fa01 f303 	lsl.w	r3, r1, r3
 8004098:	431a      	orrs	r2, r3
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800409e:	bf00      	nop
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
	...

080040ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040c4:	43db      	mvns	r3, r3
 80040c6:	401a      	ands	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f003 0318 	and.w	r3, r3, #24
 80040ce:	4908      	ldr	r1, [pc, #32]	; (80040f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80040d0:	40d9      	lsrs	r1, r3
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	400b      	ands	r3, r1
 80040d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040da:	431a      	orrs	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80040e2:	bf00      	nop
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	000fffff 	.word	0x000fffff

080040f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 031f 	and.w	r3, r3, #31
}
 8004104:	4618      	mov	r0, r3
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	4b04      	ldr	r3, [pc, #16]	; (8004130 <LL_ADC_DisableDeepPowerDown+0x20>)
 800411e:	4013      	ands	r3, r2
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	6093      	str	r3, [r2, #8]
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	5fffffc0 	.word	0x5fffffc0

08004134 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004148:	d101      	bne.n	800414e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800414a:	2301      	movs	r3, #1
 800414c:	e000      	b.n	8004150 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	4b05      	ldr	r3, [pc, #20]	; (8004180 <LL_ADC_EnableInternalRegulator+0x24>)
 800416a:	4013      	ands	r3, r2
 800416c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	6fffffc0 	.word	0x6fffffc0

08004184 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004194:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004198:	d101      	bne.n	800419e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800419a:	2301      	movs	r3, #1
 800419c:	e000      	b.n	80041a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <LL_ADC_Enable+0x24>)
 80041ba:	4013      	ands	r3, r2
 80041bc:	f043 0201 	orr.w	r2, r3, #1
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	7fffffc0 	.word	0x7fffffc0

080041d4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <LL_ADC_Disable+0x24>)
 80041e2:	4013      	ands	r3, r2
 80041e4:	f043 0202 	orr.w	r2, r3, #2
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	7fffffc0 	.word	0x7fffffc0

080041fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <LL_ADC_IsEnabled+0x18>
 8004210:	2301      	movs	r3, #1
 8004212:	e000      	b.n	8004216 <LL_ADC_IsEnabled+0x1a>
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b02      	cmp	r3, #2
 8004234:	d101      	bne.n	800423a <LL_ADC_IsDisableOngoing+0x18>
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <LL_ADC_IsDisableOngoing+0x1a>
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	4b05      	ldr	r3, [pc, #20]	; (800426c <LL_ADC_REG_StartConversion+0x24>)
 8004256:	4013      	ands	r3, r2
 8004258:	f043 0204 	orr.w	r2, r3, #4
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	7fffffc0 	.word	0x7fffffc0

08004270 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b04      	cmp	r3, #4
 8004282:	d101      	bne.n	8004288 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004284:	2301      	movs	r3, #1
 8004286:	e000      	b.n	800428a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 0308 	and.w	r3, r3, #8
 80042a6:	2b08      	cmp	r3, #8
 80042a8:	d101      	bne.n	80042ae <LL_ADC_INJ_IsConversionOngoing+0x18>
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042bc:	b590      	push	{r4, r7, lr}
 80042be:	b089      	sub	sp, #36	; 0x24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042c4:	2300      	movs	r3, #0
 80042c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80042c8:	2300      	movs	r3, #0
 80042ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e18f      	b.n	80045f6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d109      	bne.n	80042f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7fc fb31 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff ff19 	bl	8004134 <LL_ADC_IsDeepPowerDownEnabled>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d004      	beq.n	8004312 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff feff 	bl	8004110 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff ff34 	bl	8004184 <LL_ADC_IsInternalRegulatorEnabled>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d114      	bne.n	800434c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f7ff ff18 	bl	800415c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800432c:	4b87      	ldr	r3, [pc, #540]	; (800454c <HAL_ADC_Init+0x290>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	099b      	lsrs	r3, r3, #6
 8004332:	4a87      	ldr	r2, [pc, #540]	; (8004550 <HAL_ADC_Init+0x294>)
 8004334:	fba2 2303 	umull	r2, r3, r2, r3
 8004338:	099b      	lsrs	r3, r3, #6
 800433a:	3301      	adds	r3, #1
 800433c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800433e:	e002      	b.n	8004346 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	3b01      	subs	r3, #1
 8004344:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1f9      	bne.n	8004340 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff ff17 	bl	8004184 <LL_ADC_IsInternalRegulatorEnabled>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10d      	bne.n	8004378 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004360:	f043 0210 	orr.w	r2, r3, #16
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436c:	f043 0201 	orr.w	r2, r3, #1
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff ff77 	bl	8004270 <LL_ADC_REG_IsConversionOngoing>
 8004382:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004388:	f003 0310 	and.w	r3, r3, #16
 800438c:	2b00      	cmp	r3, #0
 800438e:	f040 8129 	bne.w	80045e4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b00      	cmp	r3, #0
 8004396:	f040 8125 	bne.w	80045e4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80043a2:	f043 0202 	orr.w	r2, r3, #2
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff ff24 	bl	80041fc <LL_ADC_IsEnabled>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d136      	bne.n	8004428 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a65      	ldr	r2, [pc, #404]	; (8004554 <HAL_ADC_Init+0x298>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d004      	beq.n	80043ce <HAL_ADC_Init+0x112>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a63      	ldr	r2, [pc, #396]	; (8004558 <HAL_ADC_Init+0x29c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d10e      	bne.n	80043ec <HAL_ADC_Init+0x130>
 80043ce:	4861      	ldr	r0, [pc, #388]	; (8004554 <HAL_ADC_Init+0x298>)
 80043d0:	f7ff ff14 	bl	80041fc <LL_ADC_IsEnabled>
 80043d4:	4604      	mov	r4, r0
 80043d6:	4860      	ldr	r0, [pc, #384]	; (8004558 <HAL_ADC_Init+0x29c>)
 80043d8:	f7ff ff10 	bl	80041fc <LL_ADC_IsEnabled>
 80043dc:	4603      	mov	r3, r0
 80043de:	4323      	orrs	r3, r4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	bf0c      	ite	eq
 80043e4:	2301      	moveq	r3, #1
 80043e6:	2300      	movne	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	e008      	b.n	80043fe <HAL_ADC_Init+0x142>
 80043ec:	485b      	ldr	r0, [pc, #364]	; (800455c <HAL_ADC_Init+0x2a0>)
 80043ee:	f7ff ff05 	bl	80041fc <LL_ADC_IsEnabled>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	bf0c      	ite	eq
 80043f8:	2301      	moveq	r3, #1
 80043fa:	2300      	movne	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d012      	beq.n	8004428 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a53      	ldr	r2, [pc, #332]	; (8004554 <HAL_ADC_Init+0x298>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d004      	beq.n	8004416 <HAL_ADC_Init+0x15a>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a51      	ldr	r2, [pc, #324]	; (8004558 <HAL_ADC_Init+0x29c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d101      	bne.n	800441a <HAL_ADC_Init+0x15e>
 8004416:	4a52      	ldr	r2, [pc, #328]	; (8004560 <HAL_ADC_Init+0x2a4>)
 8004418:	e000      	b.n	800441c <HAL_ADC_Init+0x160>
 800441a:	4a52      	ldr	r2, [pc, #328]	; (8004564 <HAL_ADC_Init+0x2a8>)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	4619      	mov	r1, r3
 8004422:	4610      	mov	r0, r2
 8004424:	f7ff fd3c 	bl	8003ea0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004428:	f7ff fd18 	bl	8003e5c <HAL_GetREVID>
 800442c:	4603      	mov	r3, r0
 800442e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004432:	4293      	cmp	r3, r2
 8004434:	d914      	bls.n	8004460 <HAL_ADC_Init+0x1a4>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	2b10      	cmp	r3, #16
 800443c:	d110      	bne.n	8004460 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	7d5b      	ldrb	r3, [r3, #21]
 8004442:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004448:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800444e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	7f1b      	ldrb	r3, [r3, #28]
 8004454:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004456:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004458:	f043 030c 	orr.w	r3, r3, #12
 800445c:	61bb      	str	r3, [r7, #24]
 800445e:	e00d      	b.n	800447c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	7d5b      	ldrb	r3, [r3, #21]
 8004464:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800446a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004470:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	7f1b      	ldrb	r3, [r3, #28]
 8004476:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004478:	4313      	orrs	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	7f1b      	ldrb	r3, [r3, #28]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d106      	bne.n	8004492 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	3b01      	subs	r3, #1
 800448a:	045b      	lsls	r3, r3, #17
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4313      	orrs	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	2b00      	cmp	r3, #0
 8004498:	d009      	beq.n	80044ae <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68da      	ldr	r2, [r3, #12]
 80044b4:	4b2c      	ldr	r3, [pc, #176]	; (8004568 <HAL_ADC_Init+0x2ac>)
 80044b6:	4013      	ands	r3, r2
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6812      	ldr	r2, [r2, #0]
 80044bc:	69b9      	ldr	r1, [r7, #24]
 80044be:	430b      	orrs	r3, r1
 80044c0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff fed2 	bl	8004270 <LL_ADC_REG_IsConversionOngoing>
 80044cc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff fedf 	bl	8004296 <LL_ADC_INJ_IsConversionOngoing>
 80044d8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d15f      	bne.n	80045a0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d15c      	bne.n	80045a0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	7d1b      	ldrb	r3, [r3, #20]
 80044ea:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80044f0:	4313      	orrs	r3, r2
 80044f2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	4b1c      	ldr	r3, [pc, #112]	; (800456c <HAL_ADC_Init+0x2b0>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6812      	ldr	r2, [r2, #0]
 8004502:	69b9      	ldr	r1, [r7, #24]
 8004504:	430b      	orrs	r3, r1
 8004506:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800450e:	2b01      	cmp	r3, #1
 8004510:	d130      	bne.n	8004574 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	691a      	ldr	r2, [r3, #16]
 800451e:	4b14      	ldr	r3, [pc, #80]	; (8004570 <HAL_ADC_Init+0x2b4>)
 8004520:	4013      	ands	r3, r2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004526:	3a01      	subs	r2, #1
 8004528:	0411      	lsls	r1, r2, #16
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800452e:	4311      	orrs	r1, r2
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004534:	4311      	orrs	r1, r2
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800453a:	430a      	orrs	r2, r1
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	611a      	str	r2, [r3, #16]
 8004548:	e01c      	b.n	8004584 <HAL_ADC_Init+0x2c8>
 800454a:	bf00      	nop
 800454c:	24000084 	.word	0x24000084
 8004550:	053e2d63 	.word	0x053e2d63
 8004554:	40022000 	.word	0x40022000
 8004558:	40022100 	.word	0x40022100
 800455c:	58026000 	.word	0x58026000
 8004560:	40022300 	.word	0x40022300
 8004564:	58026300 	.word	0x58026300
 8004568:	fff0c003 	.word	0xfff0c003
 800456c:	ffffbffc 	.word	0xffffbffc
 8004570:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0201 	bic.w	r2, r2, #1
 8004582:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 fdec 	bl	8005178 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d10c      	bne.n	80045c2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	f023 010f 	bic.w	r1, r3, #15
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	1e5a      	subs	r2, r3, #1
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	631a      	str	r2, [r3, #48]	; 0x30
 80045c0:	e007      	b.n	80045d2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 020f 	bic.w	r2, r2, #15
 80045d0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d6:	f023 0303 	bic.w	r3, r3, #3
 80045da:	f043 0201 	orr.w	r2, r3, #1
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	655a      	str	r2, [r3, #84]	; 0x54
 80045e2:	e007      	b.n	80045f4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e8:	f043 0210 	orr.w	r2, r3, #16
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80045f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3724      	adds	r7, #36	; 0x24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd90      	pop	{r4, r7, pc}
 80045fe:	bf00      	nop

08004600 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a55      	ldr	r2, [pc, #340]	; (8004768 <HAL_ADC_Start_DMA+0x168>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d004      	beq.n	8004620 <HAL_ADC_Start_DMA+0x20>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a54      	ldr	r2, [pc, #336]	; (800476c <HAL_ADC_Start_DMA+0x16c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d101      	bne.n	8004624 <HAL_ADC_Start_DMA+0x24>
 8004620:	4b53      	ldr	r3, [pc, #332]	; (8004770 <HAL_ADC_Start_DMA+0x170>)
 8004622:	e000      	b.n	8004626 <HAL_ADC_Start_DMA+0x26>
 8004624:	4b53      	ldr	r3, [pc, #332]	; (8004774 <HAL_ADC_Start_DMA+0x174>)
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff fd64 	bl	80040f4 <LL_ADC_GetMultimode>
 800462c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff fe1c 	bl	8004270 <LL_ADC_REG_IsConversionOngoing>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	f040 808c 	bne.w	8004758 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_ADC_Start_DMA+0x4e>
 800464a:	2302      	movs	r3, #2
 800464c:	e087      	b.n	800475e <HAL_ADC_Start_DMA+0x15e>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	2b05      	cmp	r3, #5
 8004660:	d002      	beq.n	8004668 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	2b09      	cmp	r3, #9
 8004666:	d170      	bne.n	800474a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 fc07 	bl	8004e7c <ADC_Enable>
 800466e:	4603      	mov	r3, r0
 8004670:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004672:	7dfb      	ldrb	r3, [r7, #23]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d163      	bne.n	8004740 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800467c:	4b3e      	ldr	r3, [pc, #248]	; (8004778 <HAL_ADC_Start_DMA+0x178>)
 800467e:	4013      	ands	r3, r2
 8004680:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a37      	ldr	r2, [pc, #220]	; (800476c <HAL_ADC_Start_DMA+0x16c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d002      	beq.n	8004698 <HAL_ADC_Start_DMA+0x98>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	e000      	b.n	800469a <HAL_ADC_Start_DMA+0x9a>
 8004698:	4b33      	ldr	r3, [pc, #204]	; (8004768 <HAL_ADC_Start_DMA+0x168>)
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	6812      	ldr	r2, [r2, #0]
 800469e:	4293      	cmp	r3, r2
 80046a0:	d002      	beq.n	80046a8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d105      	bne.n	80046b4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d006      	beq.n	80046ce <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c4:	f023 0206 	bic.w	r2, r3, #6
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	659a      	str	r2, [r3, #88]	; 0x58
 80046cc:	e002      	b.n	80046d4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d8:	4a28      	ldr	r2, [pc, #160]	; (800477c <HAL_ADC_Start_DMA+0x17c>)
 80046da:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e0:	4a27      	ldr	r2, [pc, #156]	; (8004780 <HAL_ADC_Start_DMA+0x180>)
 80046e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e8:	4a26      	ldr	r2, [pc, #152]	; (8004784 <HAL_ADC_Start_DMA+0x184>)
 80046ea:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	221c      	movs	r2, #28
 80046f2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0210 	orr.w	r2, r2, #16
 800470a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	4619      	mov	r1, r3
 8004716:	4610      	mov	r0, r2
 8004718:	f7ff fc89 	bl	800402e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3340      	adds	r3, #64	; 0x40
 8004726:	4619      	mov	r1, r3
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f002 f80e 	bl	800674c <HAL_DMA_Start_IT>
 8004730:	4603      	mov	r3, r0
 8004732:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff fd85 	bl	8004248 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800473e:	e00d      	b.n	800475c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004748:	e008      	b.n	800475c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004756:	e001      	b.n	800475c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004758:	2302      	movs	r3, #2
 800475a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800475c:	7dfb      	ldrb	r3, [r7, #23]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40022000 	.word	0x40022000
 800476c:	40022100 	.word	0x40022100
 8004770:	40022300 	.word	0x40022300
 8004774:	58026300 	.word	0x58026300
 8004778:	fffff0fe 	.word	0xfffff0fe
 800477c:	0800504f 	.word	0x0800504f
 8004780:	08005127 	.word	0x08005127
 8004784:	08005143 	.word	0x08005143

08004788 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80047c4:	b590      	push	{r4, r7, lr}
 80047c6:	b0a1      	sub	sp, #132	; 0x84
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	4a65      	ldr	r2, [pc, #404]	; (8004974 <HAL_ADC_ConfigChannel+0x1b0>)
 80047de:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d101      	bne.n	80047ee <HAL_ADC_ConfigChannel+0x2a>
 80047ea:	2302      	movs	r3, #2
 80047ec:	e32e      	b.n	8004e4c <HAL_ADC_ConfigChannel+0x688>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff fd38 	bl	8004270 <LL_ADC_REG_IsConversionOngoing>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	f040 8313 	bne.w	8004e2e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	db2c      	blt.n	800486a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004818:	2b00      	cmp	r3, #0
 800481a:	d108      	bne.n	800482e <HAL_ADC_ConfigChannel+0x6a>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	0e9b      	lsrs	r3, r3, #26
 8004822:	f003 031f 	and.w	r3, r3, #31
 8004826:	2201      	movs	r2, #1
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	e016      	b.n	800485c <HAL_ADC_ConfigChannel+0x98>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004836:	fa93 f3a3 	rbit	r3, r3
 800483a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800483c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800483e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004840:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004846:	2320      	movs	r3, #32
 8004848:	e003      	b.n	8004852 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800484a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800484c:	fab3 f383 	clz	r3, r3
 8004850:	b2db      	uxtb	r3, r3
 8004852:	f003 031f 	and.w	r3, r3, #31
 8004856:	2201      	movs	r2, #1
 8004858:	fa02 f303 	lsl.w	r3, r2, r3
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6812      	ldr	r2, [r2, #0]
 8004860:	69d1      	ldr	r1, [r2, #28]
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6812      	ldr	r2, [r2, #0]
 8004866:	430b      	orrs	r3, r1
 8004868:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6818      	ldr	r0, [r3, #0]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	6859      	ldr	r1, [r3, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	f7ff fbad 	bl	8003fd6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff fcf5 	bl	8004270 <LL_ADC_REG_IsConversionOngoing>
 8004886:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4618      	mov	r0, r3
 800488e:	f7ff fd02 	bl	8004296 <LL_ADC_INJ_IsConversionOngoing>
 8004892:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004896:	2b00      	cmp	r3, #0
 8004898:	f040 80b8 	bne.w	8004a0c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800489c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f040 80b4 	bne.w	8004a0c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6818      	ldr	r0, [r3, #0]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	6819      	ldr	r1, [r3, #0]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	461a      	mov	r2, r3
 80048b2:	f7ff fbcf 	bl	8004054 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80048b6:	4b30      	ldr	r3, [pc, #192]	; (8004978 <HAL_ADC_ConfigChannel+0x1b4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80048be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048c2:	d10b      	bne.n	80048dc <HAL_ADC_ConfigChannel+0x118>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	695a      	ldr	r2, [r3, #20]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	089b      	lsrs	r3, r3, #2
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	e01d      	b.n	8004918 <HAL_ADC_ConfigChannel+0x154>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f003 0310 	and.w	r3, r3, #16
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10b      	bne.n	8004902 <HAL_ADC_ConfigChannel+0x13e>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	695a      	ldr	r2, [r3, #20]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	089b      	lsrs	r3, r3, #2
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004900:	e00a      	b.n	8004918 <HAL_ADC_ConfigChannel+0x154>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	695a      	ldr	r2, [r3, #20]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	089b      	lsrs	r3, r3, #2
 800490e:	f003 0304 	and.w	r3, r3, #4
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	2b04      	cmp	r3, #4
 8004920:	d02c      	beq.n	800497c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6818      	ldr	r0, [r3, #0]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	6919      	ldr	r1, [r3, #16]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004930:	f7ff faea 	bl	8003f08 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6818      	ldr	r0, [r3, #0]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	6919      	ldr	r1, [r3, #16]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	7e5b      	ldrb	r3, [r3, #25]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d102      	bne.n	800494a <HAL_ADC_ConfigChannel+0x186>
 8004944:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004948:	e000      	b.n	800494c <HAL_ADC_ConfigChannel+0x188>
 800494a:	2300      	movs	r3, #0
 800494c:	461a      	mov	r2, r3
 800494e:	f7ff fb14 	bl	8003f7a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	6919      	ldr	r1, [r3, #16]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	7e1b      	ldrb	r3, [r3, #24]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d102      	bne.n	8004968 <HAL_ADC_ConfigChannel+0x1a4>
 8004962:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004966:	e000      	b.n	800496a <HAL_ADC_ConfigChannel+0x1a6>
 8004968:	2300      	movs	r3, #0
 800496a:	461a      	mov	r2, r3
 800496c:	f7ff faec 	bl	8003f48 <LL_ADC_SetDataRightShift>
 8004970:	e04c      	b.n	8004a0c <HAL_ADC_ConfigChannel+0x248>
 8004972:	bf00      	nop
 8004974:	47ff0000 	.word	0x47ff0000
 8004978:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004982:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	069b      	lsls	r3, r3, #26
 800498c:	429a      	cmp	r2, r3
 800498e:	d107      	bne.n	80049a0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800499e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	069b      	lsls	r3, r3, #26
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d107      	bne.n	80049c4 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80049c2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	069b      	lsls	r3, r3, #26
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d107      	bne.n	80049e8 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80049e6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	069b      	lsls	r3, r3, #26
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d107      	bne.n	8004a0c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a0a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff fbf3 	bl	80041fc <LL_ADC_IsEnabled>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f040 8211 	bne.w	8004e40 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6818      	ldr	r0, [r3, #0]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	6819      	ldr	r1, [r3, #0]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f7ff fb3e 	bl	80040ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	4aa1      	ldr	r2, [pc, #644]	; (8004cbc <HAL_ADC_ConfigChannel+0x4f8>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	f040 812e 	bne.w	8004c98 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10b      	bne.n	8004a64 <HAL_ADC_ConfigChannel+0x2a0>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	0e9b      	lsrs	r3, r3, #26
 8004a52:	3301      	adds	r3, #1
 8004a54:	f003 031f 	and.w	r3, r3, #31
 8004a58:	2b09      	cmp	r3, #9
 8004a5a:	bf94      	ite	ls
 8004a5c:	2301      	movls	r3, #1
 8004a5e:	2300      	movhi	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	e019      	b.n	8004a98 <HAL_ADC_ConfigChannel+0x2d4>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a6c:	fa93 f3a3 	rbit	r3, r3
 8004a70:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a74:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004a7c:	2320      	movs	r3, #32
 8004a7e:	e003      	b.n	8004a88 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004a80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a82:	fab3 f383 	clz	r3, r3
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	3301      	adds	r3, #1
 8004a8a:	f003 031f 	and.w	r3, r3, #31
 8004a8e:	2b09      	cmp	r3, #9
 8004a90:	bf94      	ite	ls
 8004a92:	2301      	movls	r3, #1
 8004a94:	2300      	movhi	r3, #0
 8004a96:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d079      	beq.n	8004b90 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d107      	bne.n	8004ab8 <HAL_ADC_ConfigChannel+0x2f4>
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	0e9b      	lsrs	r3, r3, #26
 8004aae:	3301      	adds	r3, #1
 8004ab0:	069b      	lsls	r3, r3, #26
 8004ab2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ab6:	e015      	b.n	8004ae4 <HAL_ADC_ConfigChannel+0x320>
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ac0:	fa93 f3a3 	rbit	r3, r3
 8004ac4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ac8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004ad0:	2320      	movs	r3, #32
 8004ad2:	e003      	b.n	8004adc <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ad6:	fab3 f383 	clz	r3, r3
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	3301      	adds	r3, #1
 8004ade:	069b      	lsls	r3, r3, #26
 8004ae0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d109      	bne.n	8004b04 <HAL_ADC_ConfigChannel+0x340>
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	0e9b      	lsrs	r3, r3, #26
 8004af6:	3301      	adds	r3, #1
 8004af8:	f003 031f 	and.w	r3, r3, #31
 8004afc:	2101      	movs	r1, #1
 8004afe:	fa01 f303 	lsl.w	r3, r1, r3
 8004b02:	e017      	b.n	8004b34 <HAL_ADC_ConfigChannel+0x370>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b0c:	fa93 f3a3 	rbit	r3, r3
 8004b10:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b14:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004b1c:	2320      	movs	r3, #32
 8004b1e:	e003      	b.n	8004b28 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b22:	fab3 f383 	clz	r3, r3
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	3301      	adds	r3, #1
 8004b2a:	f003 031f 	and.w	r3, r3, #31
 8004b2e:	2101      	movs	r1, #1
 8004b30:	fa01 f303 	lsl.w	r3, r1, r3
 8004b34:	ea42 0103 	orr.w	r1, r2, r3
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10a      	bne.n	8004b5a <HAL_ADC_ConfigChannel+0x396>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	0e9b      	lsrs	r3, r3, #26
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	f003 021f 	and.w	r2, r3, #31
 8004b50:	4613      	mov	r3, r2
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	4413      	add	r3, r2
 8004b56:	051b      	lsls	r3, r3, #20
 8004b58:	e018      	b.n	8004b8c <HAL_ADC_ConfigChannel+0x3c8>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b62:	fa93 f3a3 	rbit	r3, r3
 8004b66:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004b72:	2320      	movs	r3, #32
 8004b74:	e003      	b.n	8004b7e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b78:	fab3 f383 	clz	r3, r3
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	3301      	adds	r3, #1
 8004b80:	f003 021f 	and.w	r2, r3, #31
 8004b84:	4613      	mov	r3, r2
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	4413      	add	r3, r2
 8004b8a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b8c:	430b      	orrs	r3, r1
 8004b8e:	e07e      	b.n	8004c8e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d107      	bne.n	8004bac <HAL_ADC_ConfigChannel+0x3e8>
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	0e9b      	lsrs	r3, r3, #26
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	069b      	lsls	r3, r3, #26
 8004ba6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004baa:	e015      	b.n	8004bd8 <HAL_ADC_ConfigChannel+0x414>
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb4:	fa93 f3a3 	rbit	r3, r3
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004bc4:	2320      	movs	r3, #32
 8004bc6:	e003      	b.n	8004bd0 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bca:	fab3 f383 	clz	r3, r3
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	069b      	lsls	r3, r3, #26
 8004bd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d109      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x434>
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	0e9b      	lsrs	r3, r3, #26
 8004bea:	3301      	adds	r3, #1
 8004bec:	f003 031f 	and.w	r3, r3, #31
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf6:	e017      	b.n	8004c28 <HAL_ADC_ConfigChannel+0x464>
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	fa93 f3a3 	rbit	r3, r3
 8004c04:	61bb      	str	r3, [r7, #24]
  return result;
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004c10:	2320      	movs	r3, #32
 8004c12:	e003      	b.n	8004c1c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	fab3 f383 	clz	r3, r3
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	f003 031f 	and.w	r3, r3, #31
 8004c22:	2101      	movs	r1, #1
 8004c24:	fa01 f303 	lsl.w	r3, r1, r3
 8004c28:	ea42 0103 	orr.w	r1, r2, r3
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10d      	bne.n	8004c54 <HAL_ADC_ConfigChannel+0x490>
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	0e9b      	lsrs	r3, r3, #26
 8004c3e:	3301      	adds	r3, #1
 8004c40:	f003 021f 	and.w	r2, r3, #31
 8004c44:	4613      	mov	r3, r2
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	4413      	add	r3, r2
 8004c4a:	3b1e      	subs	r3, #30
 8004c4c:	051b      	lsls	r3, r3, #20
 8004c4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c52:	e01b      	b.n	8004c8c <HAL_ADC_ConfigChannel+0x4c8>
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	fa93 f3a3 	rbit	r3, r3
 8004c60:	60fb      	str	r3, [r7, #12]
  return result;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004c6c:	2320      	movs	r3, #32
 8004c6e:	e003      	b.n	8004c78 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	fab3 f383 	clz	r3, r3
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	3301      	adds	r3, #1
 8004c7a:	f003 021f 	and.w	r2, r3, #31
 8004c7e:	4613      	mov	r3, r2
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	4413      	add	r3, r2
 8004c84:	3b1e      	subs	r3, #30
 8004c86:	051b      	lsls	r3, r3, #20
 8004c88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c8c:	430b      	orrs	r3, r1
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	6892      	ldr	r2, [r2, #8]
 8004c92:	4619      	mov	r1, r3
 8004c94:	f7ff f9de 	bl	8004054 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f280 80cf 	bge.w	8004e40 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a06      	ldr	r2, [pc, #24]	; (8004cc0 <HAL_ADC_ConfigChannel+0x4fc>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d004      	beq.n	8004cb6 <HAL_ADC_ConfigChannel+0x4f2>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a04      	ldr	r2, [pc, #16]	; (8004cc4 <HAL_ADC_ConfigChannel+0x500>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d10a      	bne.n	8004ccc <HAL_ADC_ConfigChannel+0x508>
 8004cb6:	4b04      	ldr	r3, [pc, #16]	; (8004cc8 <HAL_ADC_ConfigChannel+0x504>)
 8004cb8:	e009      	b.n	8004cce <HAL_ADC_ConfigChannel+0x50a>
 8004cba:	bf00      	nop
 8004cbc:	47ff0000 	.word	0x47ff0000
 8004cc0:	40022000 	.word	0x40022000
 8004cc4:	40022100 	.word	0x40022100
 8004cc8:	40022300 	.word	0x40022300
 8004ccc:	4b61      	ldr	r3, [pc, #388]	; (8004e54 <HAL_ADC_ConfigChannel+0x690>)
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7ff f90c 	bl	8003eec <LL_ADC_GetCommonPathInternalCh>
 8004cd4:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a5f      	ldr	r2, [pc, #380]	; (8004e58 <HAL_ADC_ConfigChannel+0x694>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d004      	beq.n	8004cea <HAL_ADC_ConfigChannel+0x526>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a5d      	ldr	r2, [pc, #372]	; (8004e5c <HAL_ADC_ConfigChannel+0x698>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d10e      	bne.n	8004d08 <HAL_ADC_ConfigChannel+0x544>
 8004cea:	485b      	ldr	r0, [pc, #364]	; (8004e58 <HAL_ADC_ConfigChannel+0x694>)
 8004cec:	f7ff fa86 	bl	80041fc <LL_ADC_IsEnabled>
 8004cf0:	4604      	mov	r4, r0
 8004cf2:	485a      	ldr	r0, [pc, #360]	; (8004e5c <HAL_ADC_ConfigChannel+0x698>)
 8004cf4:	f7ff fa82 	bl	80041fc <LL_ADC_IsEnabled>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	4323      	orrs	r3, r4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	bf0c      	ite	eq
 8004d00:	2301      	moveq	r3, #1
 8004d02:	2300      	movne	r3, #0
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	e008      	b.n	8004d1a <HAL_ADC_ConfigChannel+0x556>
 8004d08:	4855      	ldr	r0, [pc, #340]	; (8004e60 <HAL_ADC_ConfigChannel+0x69c>)
 8004d0a:	f7ff fa77 	bl	80041fc <LL_ADC_IsEnabled>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	bf0c      	ite	eq
 8004d14:	2301      	moveq	r3, #1
 8004d16:	2300      	movne	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d07d      	beq.n	8004e1a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a50      	ldr	r2, [pc, #320]	; (8004e64 <HAL_ADC_ConfigChannel+0x6a0>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d130      	bne.n	8004d8a <HAL_ADC_ConfigChannel+0x5c6>
 8004d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d12b      	bne.n	8004d8a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a4a      	ldr	r2, [pc, #296]	; (8004e60 <HAL_ADC_ConfigChannel+0x69c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	f040 8081 	bne.w	8004e40 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a45      	ldr	r2, [pc, #276]	; (8004e58 <HAL_ADC_ConfigChannel+0x694>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d004      	beq.n	8004d52 <HAL_ADC_ConfigChannel+0x58e>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a43      	ldr	r2, [pc, #268]	; (8004e5c <HAL_ADC_ConfigChannel+0x698>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d101      	bne.n	8004d56 <HAL_ADC_ConfigChannel+0x592>
 8004d52:	4a45      	ldr	r2, [pc, #276]	; (8004e68 <HAL_ADC_ConfigChannel+0x6a4>)
 8004d54:	e000      	b.n	8004d58 <HAL_ADC_ConfigChannel+0x594>
 8004d56:	4a3f      	ldr	r2, [pc, #252]	; (8004e54 <HAL_ADC_ConfigChannel+0x690>)
 8004d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4610      	mov	r0, r2
 8004d62:	f7ff f8b0 	bl	8003ec6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d66:	4b41      	ldr	r3, [pc, #260]	; (8004e6c <HAL_ADC_ConfigChannel+0x6a8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	099b      	lsrs	r3, r3, #6
 8004d6c:	4a40      	ldr	r2, [pc, #256]	; (8004e70 <HAL_ADC_ConfigChannel+0x6ac>)
 8004d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d72:	099b      	lsrs	r3, r3, #6
 8004d74:	3301      	adds	r3, #1
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004d7a:	e002      	b.n	8004d82 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1f9      	bne.n	8004d7c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d88:	e05a      	b.n	8004e40 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a39      	ldr	r2, [pc, #228]	; (8004e74 <HAL_ADC_ConfigChannel+0x6b0>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d11e      	bne.n	8004dd2 <HAL_ADC_ConfigChannel+0x60e>
 8004d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d119      	bne.n	8004dd2 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a2f      	ldr	r2, [pc, #188]	; (8004e60 <HAL_ADC_ConfigChannel+0x69c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d14b      	bne.n	8004e40 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a2a      	ldr	r2, [pc, #168]	; (8004e58 <HAL_ADC_ConfigChannel+0x694>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d004      	beq.n	8004dbc <HAL_ADC_ConfigChannel+0x5f8>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a29      	ldr	r2, [pc, #164]	; (8004e5c <HAL_ADC_ConfigChannel+0x698>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d101      	bne.n	8004dc0 <HAL_ADC_ConfigChannel+0x5fc>
 8004dbc:	4a2a      	ldr	r2, [pc, #168]	; (8004e68 <HAL_ADC_ConfigChannel+0x6a4>)
 8004dbe:	e000      	b.n	8004dc2 <HAL_ADC_ConfigChannel+0x5fe>
 8004dc0:	4a24      	ldr	r2, [pc, #144]	; (8004e54 <HAL_ADC_ConfigChannel+0x690>)
 8004dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4610      	mov	r0, r2
 8004dcc:	f7ff f87b 	bl	8003ec6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004dd0:	e036      	b.n	8004e40 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a28      	ldr	r2, [pc, #160]	; (8004e78 <HAL_ADC_ConfigChannel+0x6b4>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d131      	bne.n	8004e40 <HAL_ADC_ConfigChannel+0x67c>
 8004ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d12c      	bne.n	8004e40 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a1d      	ldr	r2, [pc, #116]	; (8004e60 <HAL_ADC_ConfigChannel+0x69c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d127      	bne.n	8004e40 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a18      	ldr	r2, [pc, #96]	; (8004e58 <HAL_ADC_ConfigChannel+0x694>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d004      	beq.n	8004e04 <HAL_ADC_ConfigChannel+0x640>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a17      	ldr	r2, [pc, #92]	; (8004e5c <HAL_ADC_ConfigChannel+0x698>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d101      	bne.n	8004e08 <HAL_ADC_ConfigChannel+0x644>
 8004e04:	4a18      	ldr	r2, [pc, #96]	; (8004e68 <HAL_ADC_ConfigChannel+0x6a4>)
 8004e06:	e000      	b.n	8004e0a <HAL_ADC_ConfigChannel+0x646>
 8004e08:	4a12      	ldr	r2, [pc, #72]	; (8004e54 <HAL_ADC_ConfigChannel+0x690>)
 8004e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e10:	4619      	mov	r1, r3
 8004e12:	4610      	mov	r0, r2
 8004e14:	f7ff f857 	bl	8003ec6 <LL_ADC_SetCommonPathInternalCh>
 8004e18:	e012      	b.n	8004e40 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1e:	f043 0220 	orr.w	r2, r3, #32
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004e2c:	e008      	b.n	8004e40 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e32:	f043 0220 	orr.w	r2, r3, #32
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004e48:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3784      	adds	r7, #132	; 0x84
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd90      	pop	{r4, r7, pc}
 8004e54:	58026300 	.word	0x58026300
 8004e58:	40022000 	.word	0x40022000
 8004e5c:	40022100 	.word	0x40022100
 8004e60:	58026000 	.word	0x58026000
 8004e64:	cb840000 	.word	0xcb840000
 8004e68:	40022300 	.word	0x40022300
 8004e6c:	24000084 	.word	0x24000084
 8004e70:	053e2d63 	.word	0x053e2d63
 8004e74:	c7520000 	.word	0xc7520000
 8004e78:	cfb80000 	.word	0xcfb80000

08004e7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff f9b7 	bl	80041fc <LL_ADC_IsEnabled>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d16e      	bne.n	8004f72 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	4b38      	ldr	r3, [pc, #224]	; (8004f7c <ADC_Enable+0x100>)
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00d      	beq.n	8004ebe <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea6:	f043 0210 	orr.w	r2, r3, #16
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb2:	f043 0201 	orr.w	r2, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e05a      	b.n	8004f74 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff f972 	bl	80041ac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004ec8:	f7fe ffbc 	bl	8003e44 <HAL_GetTick>
 8004ecc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a2b      	ldr	r2, [pc, #172]	; (8004f80 <ADC_Enable+0x104>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d004      	beq.n	8004ee2 <ADC_Enable+0x66>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a29      	ldr	r2, [pc, #164]	; (8004f84 <ADC_Enable+0x108>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d101      	bne.n	8004ee6 <ADC_Enable+0x6a>
 8004ee2:	4b29      	ldr	r3, [pc, #164]	; (8004f88 <ADC_Enable+0x10c>)
 8004ee4:	e000      	b.n	8004ee8 <ADC_Enable+0x6c>
 8004ee6:	4b29      	ldr	r3, [pc, #164]	; (8004f8c <ADC_Enable+0x110>)
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7ff f903 	bl	80040f4 <LL_ADC_GetMultimode>
 8004eee:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a23      	ldr	r2, [pc, #140]	; (8004f84 <ADC_Enable+0x108>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d002      	beq.n	8004f00 <ADC_Enable+0x84>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	e000      	b.n	8004f02 <ADC_Enable+0x86>
 8004f00:	4b1f      	ldr	r3, [pc, #124]	; (8004f80 <ADC_Enable+0x104>)
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6812      	ldr	r2, [r2, #0]
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d02c      	beq.n	8004f64 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d130      	bne.n	8004f72 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f10:	e028      	b.n	8004f64 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff f970 	bl	80041fc <LL_ADC_IsEnabled>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d104      	bne.n	8004f2c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7ff f940 	bl	80041ac <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f2c:	f7fe ff8a 	bl	8003e44 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d914      	bls.n	8004f64 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d00d      	beq.n	8004f64 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4c:	f043 0210 	orr.w	r2, r3, #16
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f58:	f043 0201 	orr.w	r2, r3, #1
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e007      	b.n	8004f74 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d1cf      	bne.n	8004f12 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	8000003f 	.word	0x8000003f
 8004f80:	40022000 	.word	0x40022000
 8004f84:	40022100 	.word	0x40022100
 8004f88:	40022300 	.word	0x40022300
 8004f8c:	58026300 	.word	0x58026300

08004f90 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff f940 	bl	8004222 <LL_ADC_IsDisableOngoing>
 8004fa2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7ff f927 	bl	80041fc <LL_ADC_IsEnabled>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d047      	beq.n	8005044 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d144      	bne.n	8005044 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f003 030d 	and.w	r3, r3, #13
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d10c      	bne.n	8004fe2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff f901 	bl	80041d4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2203      	movs	r2, #3
 8004fd8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004fda:	f7fe ff33 	bl	8003e44 <HAL_GetTick>
 8004fde:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004fe0:	e029      	b.n	8005036 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe6:	f043 0210 	orr.w	r2, r3, #16
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff2:	f043 0201 	orr.w	r2, r3, #1
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e023      	b.n	8005046 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ffe:	f7fe ff21 	bl	8003e44 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d914      	bls.n	8005036 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00d      	beq.n	8005036 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501e:	f043 0210 	orr.w	r2, r3, #16
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800502a:	f043 0201 	orr.w	r2, r3, #1
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e007      	b.n	8005046 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1dc      	bne.n	8004ffe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b084      	sub	sp, #16
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005060:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005064:	2b00      	cmp	r3, #0
 8005066:	d14b      	bne.n	8005100 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d021      	beq.n	80050c6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f7fe ff92 	bl	8003fb0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d032      	beq.n	80050f8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d12b      	bne.n	80050f8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d11f      	bne.n	80050f8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050bc:	f043 0201 	orr.w	r2, r3, #1
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	655a      	str	r2, [r3, #84]	; 0x54
 80050c4:	e018      	b.n	80050f8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f003 0303 	and.w	r3, r3, #3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d111      	bne.n	80050f8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d105      	bne.n	80050f8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f0:	f043 0201 	orr.w	r2, r3, #1
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f7ff fb45 	bl	8004788 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80050fe:	e00e      	b.n	800511e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005104:	f003 0310 	and.w	r3, r3, #16
 8005108:	2b00      	cmp	r3, #0
 800510a:	d003      	beq.n	8005114 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f7ff fb4f 	bl	80047b0 <HAL_ADC_ErrorCallback>
}
 8005112:	e004      	b.n	800511e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	4798      	blx	r3
}
 800511e:	bf00      	nop
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b084      	sub	sp, #16
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005132:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f7ff fb31 	bl	800479c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800513a:	bf00      	nop
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005154:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005160:	f043 0204 	orr.w	r2, r3, #4
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f7ff fb21 	bl	80047b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800516e:	bf00      	nop
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
	...

08005178 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a7a      	ldr	r2, [pc, #488]	; (8005370 <ADC_ConfigureBoostMode+0x1f8>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d004      	beq.n	8005194 <ADC_ConfigureBoostMode+0x1c>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a79      	ldr	r2, [pc, #484]	; (8005374 <ADC_ConfigureBoostMode+0x1fc>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d109      	bne.n	80051a8 <ADC_ConfigureBoostMode+0x30>
 8005194:	4b78      	ldr	r3, [pc, #480]	; (8005378 <ADC_ConfigureBoostMode+0x200>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800519c:	2b00      	cmp	r3, #0
 800519e:	bf14      	ite	ne
 80051a0:	2301      	movne	r3, #1
 80051a2:	2300      	moveq	r3, #0
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	e008      	b.n	80051ba <ADC_ConfigureBoostMode+0x42>
 80051a8:	4b74      	ldr	r3, [pc, #464]	; (800537c <ADC_ConfigureBoostMode+0x204>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	bf14      	ite	ne
 80051b4:	2301      	movne	r3, #1
 80051b6:	2300      	moveq	r3, #0
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d01c      	beq.n	80051f8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80051be:	f005 fd9f 	bl	800ad00 <HAL_RCC_GetHCLKFreq>
 80051c2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051cc:	d010      	beq.n	80051f0 <ADC_ConfigureBoostMode+0x78>
 80051ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051d2:	d873      	bhi.n	80052bc <ADC_ConfigureBoostMode+0x144>
 80051d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d8:	d002      	beq.n	80051e0 <ADC_ConfigureBoostMode+0x68>
 80051da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051de:	d16d      	bne.n	80052bc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	0c1b      	lsrs	r3, r3, #16
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ec:	60fb      	str	r3, [r7, #12]
        break;
 80051ee:	e068      	b.n	80052c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	089b      	lsrs	r3, r3, #2
 80051f4:	60fb      	str	r3, [r7, #12]
        break;
 80051f6:	e064      	b.n	80052c2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80051f8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80051fc:	f04f 0100 	mov.w	r1, #0
 8005200:	f007 f826 	bl	800c250 <HAL_RCCEx_GetPeriphCLKFreq>
 8005204:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800520e:	d051      	beq.n	80052b4 <ADC_ConfigureBoostMode+0x13c>
 8005210:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005214:	d854      	bhi.n	80052c0 <ADC_ConfigureBoostMode+0x148>
 8005216:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800521a:	d047      	beq.n	80052ac <ADC_ConfigureBoostMode+0x134>
 800521c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005220:	d84e      	bhi.n	80052c0 <ADC_ConfigureBoostMode+0x148>
 8005222:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005226:	d03d      	beq.n	80052a4 <ADC_ConfigureBoostMode+0x12c>
 8005228:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800522c:	d848      	bhi.n	80052c0 <ADC_ConfigureBoostMode+0x148>
 800522e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005232:	d033      	beq.n	800529c <ADC_ConfigureBoostMode+0x124>
 8005234:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005238:	d842      	bhi.n	80052c0 <ADC_ConfigureBoostMode+0x148>
 800523a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800523e:	d029      	beq.n	8005294 <ADC_ConfigureBoostMode+0x11c>
 8005240:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005244:	d83c      	bhi.n	80052c0 <ADC_ConfigureBoostMode+0x148>
 8005246:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800524a:	d01a      	beq.n	8005282 <ADC_ConfigureBoostMode+0x10a>
 800524c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005250:	d836      	bhi.n	80052c0 <ADC_ConfigureBoostMode+0x148>
 8005252:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005256:	d014      	beq.n	8005282 <ADC_ConfigureBoostMode+0x10a>
 8005258:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800525c:	d830      	bhi.n	80052c0 <ADC_ConfigureBoostMode+0x148>
 800525e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005262:	d00e      	beq.n	8005282 <ADC_ConfigureBoostMode+0x10a>
 8005264:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005268:	d82a      	bhi.n	80052c0 <ADC_ConfigureBoostMode+0x148>
 800526a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800526e:	d008      	beq.n	8005282 <ADC_ConfigureBoostMode+0x10a>
 8005270:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005274:	d824      	bhi.n	80052c0 <ADC_ConfigureBoostMode+0x148>
 8005276:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800527a:	d002      	beq.n	8005282 <ADC_ConfigureBoostMode+0x10a>
 800527c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005280:	d11e      	bne.n	80052c0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	0c9b      	lsrs	r3, r3, #18
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005290:	60fb      	str	r3, [r7, #12]
        break;
 8005292:	e016      	b.n	80052c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	091b      	lsrs	r3, r3, #4
 8005298:	60fb      	str	r3, [r7, #12]
        break;
 800529a:	e012      	b.n	80052c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	095b      	lsrs	r3, r3, #5
 80052a0:	60fb      	str	r3, [r7, #12]
        break;
 80052a2:	e00e      	b.n	80052c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	099b      	lsrs	r3, r3, #6
 80052a8:	60fb      	str	r3, [r7, #12]
        break;
 80052aa:	e00a      	b.n	80052c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	09db      	lsrs	r3, r3, #7
 80052b0:	60fb      	str	r3, [r7, #12]
        break;
 80052b2:	e006      	b.n	80052c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	0a1b      	lsrs	r3, r3, #8
 80052b8:	60fb      	str	r3, [r7, #12]
        break;
 80052ba:	e002      	b.n	80052c2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80052bc:	bf00      	nop
 80052be:	e000      	b.n	80052c2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80052c0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80052c2:	f7fe fdcb 	bl	8003e5c <HAL_GetREVID>
 80052c6:	4603      	mov	r3, r0
 80052c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d815      	bhi.n	80052fc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4a2b      	ldr	r2, [pc, #172]	; (8005380 <ADC_ConfigureBoostMode+0x208>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d908      	bls.n	80052ea <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689a      	ldr	r2, [r3, #8]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052e6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80052e8:	e03e      	b.n	8005368 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052f8:	609a      	str	r2, [r3, #8]
}
 80052fa:	e035      	b.n	8005368 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	085b      	lsrs	r3, r3, #1
 8005300:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4a1f      	ldr	r2, [pc, #124]	; (8005384 <ADC_ConfigureBoostMode+0x20c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d808      	bhi.n	800531c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005318:	609a      	str	r2, [r3, #8]
}
 800531a:	e025      	b.n	8005368 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4a1a      	ldr	r2, [pc, #104]	; (8005388 <ADC_ConfigureBoostMode+0x210>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d80a      	bhi.n	800533a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005336:	609a      	str	r2, [r3, #8]
}
 8005338:	e016      	b.n	8005368 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	4a13      	ldr	r2, [pc, #76]	; (800538c <ADC_ConfigureBoostMode+0x214>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d80a      	bhi.n	8005358 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005354:	609a      	str	r2, [r3, #8]
}
 8005356:	e007      	b.n	8005368 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689a      	ldr	r2, [r3, #8]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005366:	609a      	str	r2, [r3, #8]
}
 8005368:	bf00      	nop
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40022000 	.word	0x40022000
 8005374:	40022100 	.word	0x40022100
 8005378:	40022300 	.word	0x40022300
 800537c:	58026300 	.word	0x58026300
 8005380:	01312d00 	.word	0x01312d00
 8005384:	005f5e10 	.word	0x005f5e10
 8005388:	00bebc20 	.word	0x00bebc20
 800538c:	017d7840 	.word	0x017d7840

08005390 <LL_ADC_IsEnabled>:
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d101      	bne.n	80053a8 <LL_ADC_IsEnabled+0x18>
 80053a4:	2301      	movs	r3, #1
 80053a6:	e000      	b.n	80053aa <LL_ADC_IsEnabled+0x1a>
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
	...

080053b8 <LL_ADC_StartCalibration>:
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	4b09      	ldr	r3, [pc, #36]	; (80053f0 <LL_ADC_StartCalibration+0x38>)
 80053ca:	4013      	ands	r3, r2
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80053d8:	430a      	orrs	r2, r1
 80053da:	4313      	orrs	r3, r2
 80053dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	609a      	str	r2, [r3, #8]
}
 80053e4:	bf00      	nop
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	3ffeffc0 	.word	0x3ffeffc0

080053f4 <LL_ADC_IsCalibrationOnGoing>:
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005404:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005408:	d101      	bne.n	800540e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800540a:	2301      	movs	r3, #1
 800540c:	e000      	b.n	8005410 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <LL_ADC_REG_IsConversionOngoing>:
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b04      	cmp	r3, #4
 800542e:	d101      	bne.n	8005434 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005430:	2301      	movs	r3, #1
 8005432:	e000      	b.n	8005436 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
	...

08005444 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005450:	2300      	movs	r3, #0
 8005452:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800545a:	2b01      	cmp	r3, #1
 800545c:	d101      	bne.n	8005462 <HAL_ADCEx_Calibration_Start+0x1e>
 800545e:	2302      	movs	r3, #2
 8005460:	e04c      	b.n	80054fc <HAL_ADCEx_Calibration_Start+0xb8>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f7ff fd90 	bl	8004f90 <ADC_Disable>
 8005470:	4603      	mov	r3, r0
 8005472:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005474:	7dfb      	ldrb	r3, [r7, #23]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d135      	bne.n	80054e6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800547e:	4b21      	ldr	r3, [pc, #132]	; (8005504 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005480:	4013      	ands	r3, r2
 8005482:	f043 0202 	orr.w	r2, r3, #2
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	68b9      	ldr	r1, [r7, #8]
 8005492:	4618      	mov	r0, r3
 8005494:	f7ff ff90 	bl	80053b8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005498:	e014      	b.n	80054c4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	3301      	adds	r3, #1
 800549e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	4a19      	ldr	r2, [pc, #100]	; (8005508 <HAL_ADCEx_Calibration_Start+0xc4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d30d      	bcc.n	80054c4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ac:	f023 0312 	bic.w	r3, r3, #18
 80054b0:	f043 0210 	orr.w	r2, r3, #16
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e01b      	b.n	80054fc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7ff ff93 	bl	80053f4 <LL_ADC_IsCalibrationOnGoing>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1e2      	bne.n	800549a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d8:	f023 0303 	bic.w	r3, r3, #3
 80054dc:	f043 0201 	orr.w	r2, r3, #1
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	655a      	str	r2, [r3, #84]	; 0x54
 80054e4:	e005      	b.n	80054f2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ea:	f043 0210 	orr.w	r2, r3, #16
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80054fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	ffffeefd 	.word	0xffffeefd
 8005508:	25c3f800 	.word	0x25c3f800

0800550c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800550c:	b590      	push	{r4, r7, lr}
 800550e:	b09f      	sub	sp, #124	; 0x7c
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005522:	2b01      	cmp	r3, #1
 8005524:	d101      	bne.n	800552a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005526:	2302      	movs	r3, #2
 8005528:	e0be      	b.n	80056a8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005532:	2300      	movs	r3, #0
 8005534:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005536:	2300      	movs	r3, #0
 8005538:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a5c      	ldr	r2, [pc, #368]	; (80056b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d102      	bne.n	800554a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005544:	4b5b      	ldr	r3, [pc, #364]	; (80056b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005546:	60bb      	str	r3, [r7, #8]
 8005548:	e001      	b.n	800554e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800554a:	2300      	movs	r3, #0
 800554c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10b      	bne.n	800556c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005558:	f043 0220 	orr.w	r2, r3, #32
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e09d      	b.n	80056a8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4618      	mov	r0, r3
 8005570:	f7ff ff54 	bl	800541c <LL_ADC_REG_IsConversionOngoing>
 8005574:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4618      	mov	r0, r3
 800557c:	f7ff ff4e 	bl	800541c <LL_ADC_REG_IsConversionOngoing>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d17f      	bne.n	8005686 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005586:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005588:	2b00      	cmp	r3, #0
 800558a:	d17c      	bne.n	8005686 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a47      	ldr	r2, [pc, #284]	; (80056b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d004      	beq.n	80055a0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a46      	ldr	r2, [pc, #280]	; (80056b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d101      	bne.n	80055a4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80055a0:	4b45      	ldr	r3, [pc, #276]	; (80056b8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80055a2:	e000      	b.n	80055a6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80055a4:	4b45      	ldr	r3, [pc, #276]	; (80056bc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80055a6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d039      	beq.n	8005624 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80055b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	431a      	orrs	r2, r3
 80055be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a3a      	ldr	r2, [pc, #232]	; (80056b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d004      	beq.n	80055d6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a38      	ldr	r2, [pc, #224]	; (80056b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d10e      	bne.n	80055f4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80055d6:	4836      	ldr	r0, [pc, #216]	; (80056b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80055d8:	f7ff feda 	bl	8005390 <LL_ADC_IsEnabled>
 80055dc:	4604      	mov	r4, r0
 80055de:	4835      	ldr	r0, [pc, #212]	; (80056b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80055e0:	f7ff fed6 	bl	8005390 <LL_ADC_IsEnabled>
 80055e4:	4603      	mov	r3, r0
 80055e6:	4323      	orrs	r3, r4
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	bf0c      	ite	eq
 80055ec:	2301      	moveq	r3, #1
 80055ee:	2300      	movne	r3, #0
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	e008      	b.n	8005606 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80055f4:	4832      	ldr	r0, [pc, #200]	; (80056c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80055f6:	f7ff fecb 	bl	8005390 <LL_ADC_IsEnabled>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	bf0c      	ite	eq
 8005600:	2301      	moveq	r3, #1
 8005602:	2300      	movne	r3, #0
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d047      	beq.n	800569a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800560a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800560c:	689a      	ldr	r2, [r3, #8]
 800560e:	4b2d      	ldr	r3, [pc, #180]	; (80056c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005610:	4013      	ands	r3, r2
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	6811      	ldr	r1, [r2, #0]
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	6892      	ldr	r2, [r2, #8]
 800561a:	430a      	orrs	r2, r1
 800561c:	431a      	orrs	r2, r3
 800561e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005620:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005622:	e03a      	b.n	800569a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800562c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800562e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a1e      	ldr	r2, [pc, #120]	; (80056b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d004      	beq.n	8005644 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a1d      	ldr	r2, [pc, #116]	; (80056b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d10e      	bne.n	8005662 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005644:	481a      	ldr	r0, [pc, #104]	; (80056b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005646:	f7ff fea3 	bl	8005390 <LL_ADC_IsEnabled>
 800564a:	4604      	mov	r4, r0
 800564c:	4819      	ldr	r0, [pc, #100]	; (80056b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800564e:	f7ff fe9f 	bl	8005390 <LL_ADC_IsEnabled>
 8005652:	4603      	mov	r3, r0
 8005654:	4323      	orrs	r3, r4
 8005656:	2b00      	cmp	r3, #0
 8005658:	bf0c      	ite	eq
 800565a:	2301      	moveq	r3, #1
 800565c:	2300      	movne	r3, #0
 800565e:	b2db      	uxtb	r3, r3
 8005660:	e008      	b.n	8005674 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005662:	4817      	ldr	r0, [pc, #92]	; (80056c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005664:	f7ff fe94 	bl	8005390 <LL_ADC_IsEnabled>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	bf0c      	ite	eq
 800566e:	2301      	moveq	r3, #1
 8005670:	2300      	movne	r3, #0
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b00      	cmp	r3, #0
 8005676:	d010      	beq.n	800569a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	4b11      	ldr	r3, [pc, #68]	; (80056c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800567e:	4013      	ands	r3, r2
 8005680:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005682:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005684:	e009      	b.n	800569a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568a:	f043 0220 	orr.w	r2, r3, #32
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005698:	e000      	b.n	800569c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800569a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80056a4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	377c      	adds	r7, #124	; 0x7c
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd90      	pop	{r4, r7, pc}
 80056b0:	40022000 	.word	0x40022000
 80056b4:	40022100 	.word	0x40022100
 80056b8:	40022300 	.word	0x40022300
 80056bc:	58026300 	.word	0x58026300
 80056c0:	58026000 	.word	0x58026000
 80056c4:	fffff0e0 	.word	0xfffff0e0

080056c8 <__NVIC_SetPriorityGrouping>:
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f003 0307 	and.w	r3, r3, #7
 80056d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056d8:	4b0b      	ldr	r3, [pc, #44]	; (8005708 <__NVIC_SetPriorityGrouping+0x40>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056e4:	4013      	ands	r3, r2
 80056e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80056f0:	4b06      	ldr	r3, [pc, #24]	; (800570c <__NVIC_SetPriorityGrouping+0x44>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056f6:	4a04      	ldr	r2, [pc, #16]	; (8005708 <__NVIC_SetPriorityGrouping+0x40>)
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	60d3      	str	r3, [r2, #12]
}
 80056fc:	bf00      	nop
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	e000ed00 	.word	0xe000ed00
 800570c:	05fa0000 	.word	0x05fa0000

08005710 <__NVIC_GetPriorityGrouping>:
{
 8005710:	b480      	push	{r7}
 8005712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005714:	4b04      	ldr	r3, [pc, #16]	; (8005728 <__NVIC_GetPriorityGrouping+0x18>)
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	0a1b      	lsrs	r3, r3, #8
 800571a:	f003 0307 	and.w	r3, r3, #7
}
 800571e:	4618      	mov	r0, r3
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	e000ed00 	.word	0xe000ed00

0800572c <__NVIC_EnableIRQ>:
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	4603      	mov	r3, r0
 8005734:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800573a:	2b00      	cmp	r3, #0
 800573c:	db0b      	blt.n	8005756 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800573e:	88fb      	ldrh	r3, [r7, #6]
 8005740:	f003 021f 	and.w	r2, r3, #31
 8005744:	4907      	ldr	r1, [pc, #28]	; (8005764 <__NVIC_EnableIRQ+0x38>)
 8005746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800574a:	095b      	lsrs	r3, r3, #5
 800574c:	2001      	movs	r0, #1
 800574e:	fa00 f202 	lsl.w	r2, r0, r2
 8005752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005756:	bf00      	nop
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	e000e100 	.word	0xe000e100

08005768 <__NVIC_SetPriority>:
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	4603      	mov	r3, r0
 8005770:	6039      	str	r1, [r7, #0]
 8005772:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005774:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005778:	2b00      	cmp	r3, #0
 800577a:	db0a      	blt.n	8005792 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	b2da      	uxtb	r2, r3
 8005780:	490c      	ldr	r1, [pc, #48]	; (80057b4 <__NVIC_SetPriority+0x4c>)
 8005782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005786:	0112      	lsls	r2, r2, #4
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	440b      	add	r3, r1
 800578c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005790:	e00a      	b.n	80057a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	b2da      	uxtb	r2, r3
 8005796:	4908      	ldr	r1, [pc, #32]	; (80057b8 <__NVIC_SetPriority+0x50>)
 8005798:	88fb      	ldrh	r3, [r7, #6]
 800579a:	f003 030f 	and.w	r3, r3, #15
 800579e:	3b04      	subs	r3, #4
 80057a0:	0112      	lsls	r2, r2, #4
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	440b      	add	r3, r1
 80057a6:	761a      	strb	r2, [r3, #24]
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	e000e100 	.word	0xe000e100
 80057b8:	e000ed00 	.word	0xe000ed00

080057bc <NVIC_EncodePriority>:
{
 80057bc:	b480      	push	{r7}
 80057be:	b089      	sub	sp, #36	; 0x24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	f1c3 0307 	rsb	r3, r3, #7
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	bf28      	it	cs
 80057da:	2304      	movcs	r3, #4
 80057dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	3304      	adds	r3, #4
 80057e2:	2b06      	cmp	r3, #6
 80057e4:	d902      	bls.n	80057ec <NVIC_EncodePriority+0x30>
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	3b03      	subs	r3, #3
 80057ea:	e000      	b.n	80057ee <NVIC_EncodePriority+0x32>
 80057ec:	2300      	movs	r3, #0
 80057ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	fa02 f303 	lsl.w	r3, r2, r3
 80057fa:	43da      	mvns	r2, r3
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	401a      	ands	r2, r3
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005804:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	fa01 f303 	lsl.w	r3, r1, r3
 800580e:	43d9      	mvns	r1, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005814:	4313      	orrs	r3, r2
}
 8005816:	4618      	mov	r0, r3
 8005818:	3724      	adds	r7, #36	; 0x24
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b082      	sub	sp, #8
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7ff ff4c 	bl	80056c8 <__NVIC_SetPriorityGrouping>
}
 8005830:	bf00      	nop
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	4603      	mov	r3, r0
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
 8005844:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005846:	f7ff ff63 	bl	8005710 <__NVIC_GetPriorityGrouping>
 800584a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	68b9      	ldr	r1, [r7, #8]
 8005850:	6978      	ldr	r0, [r7, #20]
 8005852:	f7ff ffb3 	bl	80057bc <NVIC_EncodePriority>
 8005856:	4602      	mov	r2, r0
 8005858:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800585c:	4611      	mov	r1, r2
 800585e:	4618      	mov	r0, r3
 8005860:	f7ff ff82 	bl	8005768 <__NVIC_SetPriority>
}
 8005864:	bf00      	nop
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	4603      	mov	r3, r0
 8005874:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff ff56 	bl	800572c <__NVIC_EnableIRQ>
}
 8005880:	bf00      	nop
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e014      	b.n	80058c4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	791b      	ldrb	r3, [r3, #4]
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d105      	bne.n	80058b0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7fb f99a 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3708      	adds	r7, #8
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e046      	b.n	800596e <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	795b      	ldrb	r3, [r3, #5]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_DAC_Start+0x20>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e040      	b.n	800596e <HAL_DAC_Start+0xa2>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2202      	movs	r2, #2
 80058f6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6819      	ldr	r1, [r3, #0]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	f003 0310 	and.w	r3, r3, #16
 8005904:	2201      	movs	r2, #1
 8005906:	409a      	lsls	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	430a      	orrs	r2, r1
 800590e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10f      	bne.n	8005936 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005920:	2b02      	cmp	r3, #2
 8005922:	d11d      	bne.n	8005960 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0201 	orr.w	r2, r2, #1
 8005932:	605a      	str	r2, [r3, #4]
 8005934:	e014      	b.n	8005960 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	f003 0310 	and.w	r3, r3, #16
 8005946:	2102      	movs	r1, #2
 8005948:	fa01 f303 	lsl.w	r3, r1, r3
 800594c:	429a      	cmp	r2, r3
 800594e:	d107      	bne.n	8005960 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0202 	orr.w	r2, r2, #2
 800595e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
	...

0800597c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e0a2      	b.n	8005ada <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	795b      	ldrb	r3, [r3, #5]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d101      	bne.n	80059a0 <HAL_DAC_Start_DMA+0x24>
 800599c:	2302      	movs	r3, #2
 800599e:	e09c      	b.n	8005ada <HAL_DAC_Start_DMA+0x15e>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2201      	movs	r2, #1
 80059a4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2202      	movs	r2, #2
 80059aa:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d129      	bne.n	8005a06 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	4a4b      	ldr	r2, [pc, #300]	; (8005ae4 <HAL_DAC_Start_DMA+0x168>)
 80059b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	4a4a      	ldr	r2, [pc, #296]	; (8005ae8 <HAL_DAC_Start_DMA+0x16c>)
 80059c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	4a49      	ldr	r2, [pc, #292]	; (8005aec <HAL_DAC_Start_DMA+0x170>)
 80059c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059d8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d003      	beq.n	80059e8 <HAL_DAC_Start_DMA+0x6c>
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	2b04      	cmp	r3, #4
 80059e4:	d005      	beq.n	80059f2 <HAL_DAC_Start_DMA+0x76>
 80059e6:	e009      	b.n	80059fc <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3308      	adds	r3, #8
 80059ee:	613b      	str	r3, [r7, #16]
        break;
 80059f0:	e033      	b.n	8005a5a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	330c      	adds	r3, #12
 80059f8:	613b      	str	r3, [r7, #16]
        break;
 80059fa:	e02e      	b.n	8005a5a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3310      	adds	r3, #16
 8005a02:	613b      	str	r3, [r7, #16]
        break;
 8005a04:	e029      	b.n	8005a5a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	4a39      	ldr	r2, [pc, #228]	; (8005af0 <HAL_DAC_Start_DMA+0x174>)
 8005a0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	4a38      	ldr	r2, [pc, #224]	; (8005af4 <HAL_DAC_Start_DMA+0x178>)
 8005a14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	4a37      	ldr	r2, [pc, #220]	; (8005af8 <HAL_DAC_Start_DMA+0x17c>)
 8005a1c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005a2c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005a2e:	6a3b      	ldr	r3, [r7, #32]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d003      	beq.n	8005a3c <HAL_DAC_Start_DMA+0xc0>
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d005      	beq.n	8005a46 <HAL_DAC_Start_DMA+0xca>
 8005a3a:	e009      	b.n	8005a50 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3314      	adds	r3, #20
 8005a42:	613b      	str	r3, [r7, #16]
        break;
 8005a44:	e009      	b.n	8005a5a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3318      	adds	r3, #24
 8005a4c:	613b      	str	r3, [r7, #16]
        break;
 8005a4e:	e004      	b.n	8005a5a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	331c      	adds	r3, #28
 8005a56:	613b      	str	r3, [r7, #16]
        break;
 8005a58:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d111      	bne.n	8005a84 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a6e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6898      	ldr	r0, [r3, #8]
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	f000 fe67 	bl	800674c <HAL_DMA_Start_IT>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	75fb      	strb	r3, [r7, #23]
 8005a82:	e010      	b.n	8005aa6 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005a92:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	68d8      	ldr	r0, [r3, #12]
 8005a98:	6879      	ldr	r1, [r7, #4]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	f000 fe55 	bl	800674c <HAL_DMA_Start_IT>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005aac:	7dfb      	ldrb	r3, [r7, #23]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10c      	bne.n	8005acc <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6819      	ldr	r1, [r3, #0]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	f003 0310 	and.w	r3, r3, #16
 8005abe:	2201      	movs	r2, #1
 8005ac0:	409a      	lsls	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	e005      	b.n	8005ad8 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	f043 0204 	orr.w	r2, r3, #4
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	08005f6d 	.word	0x08005f6d
 8005ae8:	08005f8f 	.word	0x08005f8f
 8005aec:	08005fab 	.word	0x08005fab
 8005af0:	08006029 	.word	0x08006029
 8005af4:	0800604b 	.word	0x0800604b
 8005af8:	08006067 	.word	0x08006067

08005afc <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e03e      	b.n	8005b8e <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6819      	ldr	r1, [r3, #0]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	f003 0310 	and.w	r3, r3, #16
 8005b1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b20:	fa02 f303 	lsl.w	r3, r2, r3
 8005b24:	43da      	mvns	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	400a      	ands	r2, r1
 8005b2c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6819      	ldr	r1, [r3, #0]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	f003 0310 	and.w	r3, r3, #16
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b40:	43da      	mvns	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	400a      	ands	r2, r1
 8005b48:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10d      	bne.n	8005b6c <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f001 f863 	bl	8006c20 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	e00c      	b.n	8005b86 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	4618      	mov	r0, r3
 8005b72:	f001 f855 	bl	8006c20 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005b84:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b084      	sub	sp, #16
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bac:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d01d      	beq.n	8005bf4 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d018      	beq.n	8005bf4 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2204      	movs	r2, #4
 8005bc6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	f043 0201 	orr.w	r2, r3, #1
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005bdc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bec:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f86f 	bl	8005cd2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d01d      	beq.n	8005c3a <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d018      	beq.n	8005c3a <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2204      	movs	r2, #4
 8005c0c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f043 0202 	orr.w	r2, r3, #2
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005c22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005c32:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f9ed 	bl	8006014 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005c3a:	bf00      	nop
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b087      	sub	sp, #28
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	60f8      	str	r0, [r7, #12]
 8005c4a:	60b9      	str	r1, [r7, #8]
 8005c4c:	607a      	str	r2, [r7, #4]
 8005c4e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005c50:	2300      	movs	r3, #0
 8005c52:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e015      	b.n	8005c8a <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d105      	bne.n	8005c76 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4413      	add	r3, r2
 8005c70:	3308      	adds	r3, #8
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	e004      	b.n	8005c80 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	3314      	adds	r3, #20
 8005c7e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	461a      	mov	r2, r3
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	371c      	adds	r7, #28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b083      	sub	sp, #12
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b083      	sub	sp, #12
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005cb2:	bf00      	nop
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005cda:	bf00      	nop
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
	...

08005ce8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b08a      	sub	sp, #40	; 0x28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <HAL_DAC_ConfigChannel+0x1e>
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e12a      	b.n	8005f60 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	795b      	ldrb	r3, [r3, #5]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d101      	bne.n	8005d16 <HAL_DAC_ConfigChannel+0x2e>
 8005d12:	2302      	movs	r3, #2
 8005d14:	e124      	b.n	8005f60 <HAL_DAC_ConfigChannel+0x278>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d17a      	bne.n	8005e20 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005d2a:	f7fe f88b 	bl	8003e44 <HAL_GetTick>
 8005d2e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d13d      	bne.n	8005db2 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005d36:	e018      	b.n	8005d6a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005d38:	f7fe f884 	bl	8003e44 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d911      	bls.n	8005d6a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d4c:	4b86      	ldr	r3, [pc, #536]	; (8005f68 <HAL_DAC_ConfigChannel+0x280>)
 8005d4e:	4013      	ands	r3, r2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00a      	beq.n	8005d6a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	f043 0208 	orr.w	r2, r3, #8
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2203      	movs	r2, #3
 8005d64:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e0fa      	b.n	8005f60 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d70:	4b7d      	ldr	r3, [pc, #500]	; (8005f68 <HAL_DAC_ConfigChannel+0x280>)
 8005d72:	4013      	ands	r3, r2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1df      	bne.n	8005d38 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	6992      	ldr	r2, [r2, #24]
 8005d80:	641a      	str	r2, [r3, #64]	; 0x40
 8005d82:	e020      	b.n	8005dc6 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005d84:	f7fe f85e 	bl	8003e44 <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d90f      	bls.n	8005db2 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	da0a      	bge.n	8005db2 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	f043 0208 	orr.w	r2, r3, #8
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2203      	movs	r2, #3
 8005dac:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e0d6      	b.n	8005f60 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	dbe3      	blt.n	8005d84 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	6992      	ldr	r2, [r2, #24]
 8005dc4:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f003 0310 	and.w	r3, r3, #16
 8005dd2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dda:	43db      	mvns	r3, r3
 8005ddc:	ea02 0103 	and.w	r1, r2, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	69da      	ldr	r2, [r3, #28]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f003 0310 	and.w	r3, r3, #16
 8005dea:	409a      	lsls	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f003 0310 	and.w	r3, r3, #16
 8005e00:	21ff      	movs	r1, #255	; 0xff
 8005e02:	fa01 f303 	lsl.w	r3, r1, r3
 8005e06:	43db      	mvns	r3, r3
 8005e08:	ea02 0103 	and.w	r1, r2, r3
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	6a1a      	ldr	r2, [r3, #32]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f003 0310 	and.w	r3, r3, #16
 8005e16:	409a      	lsls	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d11d      	bne.n	8005e64 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f003 0310 	and.w	r3, r3, #16
 8005e36:	221f      	movs	r2, #31
 8005e38:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3c:	43db      	mvns	r3, r3
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	4013      	ands	r3, r2
 8005e42:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f003 0310 	and.w	r3, r3, #16
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	fa02 f303 	lsl.w	r3, r2, r3
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e6a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f003 0310 	and.w	r3, r3, #16
 8005e72:	2207      	movs	r2, #7
 8005e74:	fa02 f303 	lsl.w	r3, r2, r3
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d102      	bne.n	8005e8e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e8c:	e00f      	b.n	8005eae <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d102      	bne.n	8005e9c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005e96:	2301      	movs	r3, #1
 8005e98:	627b      	str	r3, [r7, #36]	; 0x24
 8005e9a:	e008      	b.n	8005eae <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d102      	bne.n	8005eaa <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea8:	e001      	b.n	8005eae <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f003 0310 	and.w	r3, r3, #16
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6819      	ldr	r1, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f003 0310 	and.w	r3, r3, #16
 8005ee4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eec:	43da      	mvns	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	400a      	ands	r2, r1
 8005ef4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f003 0310 	and.w	r3, r3, #16
 8005f04:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005f08:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0c:	43db      	mvns	r3, r3
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	4013      	ands	r3, r2
 8005f12:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f003 0310 	and.w	r3, r3, #16
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	fa02 f303 	lsl.w	r3, r2, r3
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6819      	ldr	r1, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f003 0310 	and.w	r3, r3, #16
 8005f40:	22c0      	movs	r2, #192	; 0xc0
 8005f42:	fa02 f303 	lsl.w	r3, r2, r3
 8005f46:	43da      	mvns	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	400a      	ands	r2, r1
 8005f4e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2201      	movs	r2, #1
 8005f54:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005f5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3728      	adds	r7, #40	; 0x28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	20008000 	.word	0x20008000

08005f6c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f78:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f7ff fe8b 	bl	8005c96 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2201      	movs	r2, #1
 8005f84:	711a      	strb	r2, [r3, #4]
}
 8005f86:	bf00      	nop
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f7ff fe84 	bl	8005caa <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005fa2:	bf00      	nop
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b084      	sub	sp, #16
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	f043 0204 	orr.w	r2, r3, #4
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f7ff fe7a 	bl	8005cbe <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	711a      	strb	r2, [r3, #4]
}
 8005fd0:	bf00      	nop
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006034:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f7ff ffce 	bl	8005fd8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2201      	movs	r2, #1
 8006040:	711a      	strb	r2, [r3, #4]
}
 8006042:	bf00      	nop
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b084      	sub	sp, #16
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006056:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f7ff ffc7 	bl	8005fec <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800605e:	bf00      	nop
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b084      	sub	sp, #16
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006072:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	f043 0204 	orr.w	r2, r3, #4
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f7ff ffbd 	bl	8006000 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2201      	movs	r2, #1
 800608a:	711a      	strb	r2, [r3, #4]
}
 800608c:	bf00      	nop
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800609c:	f7fd fed2 	bl	8003e44 <HAL_GetTick>
 80060a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d101      	bne.n	80060ac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e316      	b.n	80066da <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a66      	ldr	r2, [pc, #408]	; (800624c <HAL_DMA_Init+0x1b8>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d04a      	beq.n	800614c <HAL_DMA_Init+0xb8>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a65      	ldr	r2, [pc, #404]	; (8006250 <HAL_DMA_Init+0x1bc>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d045      	beq.n	800614c <HAL_DMA_Init+0xb8>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a63      	ldr	r2, [pc, #396]	; (8006254 <HAL_DMA_Init+0x1c0>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d040      	beq.n	800614c <HAL_DMA_Init+0xb8>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a62      	ldr	r2, [pc, #392]	; (8006258 <HAL_DMA_Init+0x1c4>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d03b      	beq.n	800614c <HAL_DMA_Init+0xb8>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a60      	ldr	r2, [pc, #384]	; (800625c <HAL_DMA_Init+0x1c8>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d036      	beq.n	800614c <HAL_DMA_Init+0xb8>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a5f      	ldr	r2, [pc, #380]	; (8006260 <HAL_DMA_Init+0x1cc>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d031      	beq.n	800614c <HAL_DMA_Init+0xb8>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a5d      	ldr	r2, [pc, #372]	; (8006264 <HAL_DMA_Init+0x1d0>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d02c      	beq.n	800614c <HAL_DMA_Init+0xb8>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a5c      	ldr	r2, [pc, #368]	; (8006268 <HAL_DMA_Init+0x1d4>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d027      	beq.n	800614c <HAL_DMA_Init+0xb8>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a5a      	ldr	r2, [pc, #360]	; (800626c <HAL_DMA_Init+0x1d8>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d022      	beq.n	800614c <HAL_DMA_Init+0xb8>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a59      	ldr	r2, [pc, #356]	; (8006270 <HAL_DMA_Init+0x1dc>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d01d      	beq.n	800614c <HAL_DMA_Init+0xb8>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a57      	ldr	r2, [pc, #348]	; (8006274 <HAL_DMA_Init+0x1e0>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d018      	beq.n	800614c <HAL_DMA_Init+0xb8>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a56      	ldr	r2, [pc, #344]	; (8006278 <HAL_DMA_Init+0x1e4>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d013      	beq.n	800614c <HAL_DMA_Init+0xb8>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a54      	ldr	r2, [pc, #336]	; (800627c <HAL_DMA_Init+0x1e8>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d00e      	beq.n	800614c <HAL_DMA_Init+0xb8>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a53      	ldr	r2, [pc, #332]	; (8006280 <HAL_DMA_Init+0x1ec>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d009      	beq.n	800614c <HAL_DMA_Init+0xb8>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a51      	ldr	r2, [pc, #324]	; (8006284 <HAL_DMA_Init+0x1f0>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d004      	beq.n	800614c <HAL_DMA_Init+0xb8>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a50      	ldr	r2, [pc, #320]	; (8006288 <HAL_DMA_Init+0x1f4>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d101      	bne.n	8006150 <HAL_DMA_Init+0xbc>
 800614c:	2301      	movs	r3, #1
 800614e:	e000      	b.n	8006152 <HAL_DMA_Init+0xbe>
 8006150:	2300      	movs	r3, #0
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 813b 	beq.w	80063ce <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2202      	movs	r2, #2
 800615c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a37      	ldr	r2, [pc, #220]	; (800624c <HAL_DMA_Init+0x1b8>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d04a      	beq.n	8006208 <HAL_DMA_Init+0x174>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a36      	ldr	r2, [pc, #216]	; (8006250 <HAL_DMA_Init+0x1bc>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d045      	beq.n	8006208 <HAL_DMA_Init+0x174>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a34      	ldr	r2, [pc, #208]	; (8006254 <HAL_DMA_Init+0x1c0>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d040      	beq.n	8006208 <HAL_DMA_Init+0x174>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a33      	ldr	r2, [pc, #204]	; (8006258 <HAL_DMA_Init+0x1c4>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d03b      	beq.n	8006208 <HAL_DMA_Init+0x174>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a31      	ldr	r2, [pc, #196]	; (800625c <HAL_DMA_Init+0x1c8>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d036      	beq.n	8006208 <HAL_DMA_Init+0x174>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a30      	ldr	r2, [pc, #192]	; (8006260 <HAL_DMA_Init+0x1cc>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d031      	beq.n	8006208 <HAL_DMA_Init+0x174>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a2e      	ldr	r2, [pc, #184]	; (8006264 <HAL_DMA_Init+0x1d0>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d02c      	beq.n	8006208 <HAL_DMA_Init+0x174>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a2d      	ldr	r2, [pc, #180]	; (8006268 <HAL_DMA_Init+0x1d4>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d027      	beq.n	8006208 <HAL_DMA_Init+0x174>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a2b      	ldr	r2, [pc, #172]	; (800626c <HAL_DMA_Init+0x1d8>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d022      	beq.n	8006208 <HAL_DMA_Init+0x174>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a2a      	ldr	r2, [pc, #168]	; (8006270 <HAL_DMA_Init+0x1dc>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d01d      	beq.n	8006208 <HAL_DMA_Init+0x174>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a28      	ldr	r2, [pc, #160]	; (8006274 <HAL_DMA_Init+0x1e0>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d018      	beq.n	8006208 <HAL_DMA_Init+0x174>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a27      	ldr	r2, [pc, #156]	; (8006278 <HAL_DMA_Init+0x1e4>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d013      	beq.n	8006208 <HAL_DMA_Init+0x174>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a25      	ldr	r2, [pc, #148]	; (800627c <HAL_DMA_Init+0x1e8>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d00e      	beq.n	8006208 <HAL_DMA_Init+0x174>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a24      	ldr	r2, [pc, #144]	; (8006280 <HAL_DMA_Init+0x1ec>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d009      	beq.n	8006208 <HAL_DMA_Init+0x174>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a22      	ldr	r2, [pc, #136]	; (8006284 <HAL_DMA_Init+0x1f0>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d004      	beq.n	8006208 <HAL_DMA_Init+0x174>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a21      	ldr	r2, [pc, #132]	; (8006288 <HAL_DMA_Init+0x1f4>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d108      	bne.n	800621a <HAL_DMA_Init+0x186>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f022 0201 	bic.w	r2, r2, #1
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	e007      	b.n	800622a <HAL_DMA_Init+0x196>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 0201 	bic.w	r2, r2, #1
 8006228:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800622a:	e02f      	b.n	800628c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800622c:	f7fd fe0a 	bl	8003e44 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b05      	cmp	r3, #5
 8006238:	d928      	bls.n	800628c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2220      	movs	r2, #32
 800623e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2203      	movs	r2, #3
 8006244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e246      	b.n	80066da <HAL_DMA_Init+0x646>
 800624c:	40020010 	.word	0x40020010
 8006250:	40020028 	.word	0x40020028
 8006254:	40020040 	.word	0x40020040
 8006258:	40020058 	.word	0x40020058
 800625c:	40020070 	.word	0x40020070
 8006260:	40020088 	.word	0x40020088
 8006264:	400200a0 	.word	0x400200a0
 8006268:	400200b8 	.word	0x400200b8
 800626c:	40020410 	.word	0x40020410
 8006270:	40020428 	.word	0x40020428
 8006274:	40020440 	.word	0x40020440
 8006278:	40020458 	.word	0x40020458
 800627c:	40020470 	.word	0x40020470
 8006280:	40020488 	.word	0x40020488
 8006284:	400204a0 	.word	0x400204a0
 8006288:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1c8      	bne.n	800622c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	4b83      	ldr	r3, [pc, #524]	; (80064b4 <HAL_DMA_Init+0x420>)
 80062a6:	4013      	ands	r3, r2
 80062a8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80062b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062be:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062ca:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062dc:	2b04      	cmp	r3, #4
 80062de:	d107      	bne.n	80062f0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e8:	4313      	orrs	r3, r2
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80062f0:	4b71      	ldr	r3, [pc, #452]	; (80064b8 <HAL_DMA_Init+0x424>)
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	4b71      	ldr	r3, [pc, #452]	; (80064bc <HAL_DMA_Init+0x428>)
 80062f6:	4013      	ands	r3, r2
 80062f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062fc:	d328      	bcc.n	8006350 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	2b28      	cmp	r3, #40	; 0x28
 8006304:	d903      	bls.n	800630e <HAL_DMA_Init+0x27a>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	2b2e      	cmp	r3, #46	; 0x2e
 800630c:	d917      	bls.n	800633e <HAL_DMA_Init+0x2aa>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	2b3e      	cmp	r3, #62	; 0x3e
 8006314:	d903      	bls.n	800631e <HAL_DMA_Init+0x28a>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	2b42      	cmp	r3, #66	; 0x42
 800631c:	d90f      	bls.n	800633e <HAL_DMA_Init+0x2aa>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2b46      	cmp	r3, #70	; 0x46
 8006324:	d903      	bls.n	800632e <HAL_DMA_Init+0x29a>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	2b48      	cmp	r3, #72	; 0x48
 800632c:	d907      	bls.n	800633e <HAL_DMA_Init+0x2aa>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	2b4e      	cmp	r3, #78	; 0x4e
 8006334:	d905      	bls.n	8006342 <HAL_DMA_Init+0x2ae>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	2b52      	cmp	r3, #82	; 0x52
 800633c:	d801      	bhi.n	8006342 <HAL_DMA_Init+0x2ae>
 800633e:	2301      	movs	r3, #1
 8006340:	e000      	b.n	8006344 <HAL_DMA_Init+0x2b0>
 8006342:	2300      	movs	r3, #0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800634e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f023 0307 	bic.w	r3, r3, #7
 8006366:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	4313      	orrs	r3, r2
 8006370:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006376:	2b04      	cmp	r3, #4
 8006378:	d117      	bne.n	80063aa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	4313      	orrs	r3, r2
 8006382:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00e      	beq.n	80063aa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f002 fb3f 	bl	8008a10 <DMA_CheckFifoParam>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d008      	beq.n	80063aa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2240      	movs	r2, #64	; 0x40
 800639c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e197      	b.n	80066da <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f002 fa7a 	bl	80088ac <DMA_CalcBaseAndBitshift>
 80063b8:	4603      	mov	r3, r0
 80063ba:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c0:	f003 031f 	and.w	r3, r3, #31
 80063c4:	223f      	movs	r2, #63	; 0x3f
 80063c6:	409a      	lsls	r2, r3
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	609a      	str	r2, [r3, #8]
 80063cc:	e0cd      	b.n	800656a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a3b      	ldr	r2, [pc, #236]	; (80064c0 <HAL_DMA_Init+0x42c>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d022      	beq.n	800641e <HAL_DMA_Init+0x38a>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a39      	ldr	r2, [pc, #228]	; (80064c4 <HAL_DMA_Init+0x430>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d01d      	beq.n	800641e <HAL_DMA_Init+0x38a>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a38      	ldr	r2, [pc, #224]	; (80064c8 <HAL_DMA_Init+0x434>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d018      	beq.n	800641e <HAL_DMA_Init+0x38a>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a36      	ldr	r2, [pc, #216]	; (80064cc <HAL_DMA_Init+0x438>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d013      	beq.n	800641e <HAL_DMA_Init+0x38a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a35      	ldr	r2, [pc, #212]	; (80064d0 <HAL_DMA_Init+0x43c>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d00e      	beq.n	800641e <HAL_DMA_Init+0x38a>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a33      	ldr	r2, [pc, #204]	; (80064d4 <HAL_DMA_Init+0x440>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d009      	beq.n	800641e <HAL_DMA_Init+0x38a>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a32      	ldr	r2, [pc, #200]	; (80064d8 <HAL_DMA_Init+0x444>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d004      	beq.n	800641e <HAL_DMA_Init+0x38a>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a30      	ldr	r2, [pc, #192]	; (80064dc <HAL_DMA_Init+0x448>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d101      	bne.n	8006422 <HAL_DMA_Init+0x38e>
 800641e:	2301      	movs	r3, #1
 8006420:	e000      	b.n	8006424 <HAL_DMA_Init+0x390>
 8006422:	2300      	movs	r3, #0
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 8097 	beq.w	8006558 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a24      	ldr	r2, [pc, #144]	; (80064c0 <HAL_DMA_Init+0x42c>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d021      	beq.n	8006478 <HAL_DMA_Init+0x3e4>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a22      	ldr	r2, [pc, #136]	; (80064c4 <HAL_DMA_Init+0x430>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d01c      	beq.n	8006478 <HAL_DMA_Init+0x3e4>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a21      	ldr	r2, [pc, #132]	; (80064c8 <HAL_DMA_Init+0x434>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d017      	beq.n	8006478 <HAL_DMA_Init+0x3e4>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a1f      	ldr	r2, [pc, #124]	; (80064cc <HAL_DMA_Init+0x438>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d012      	beq.n	8006478 <HAL_DMA_Init+0x3e4>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a1e      	ldr	r2, [pc, #120]	; (80064d0 <HAL_DMA_Init+0x43c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d00d      	beq.n	8006478 <HAL_DMA_Init+0x3e4>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a1c      	ldr	r2, [pc, #112]	; (80064d4 <HAL_DMA_Init+0x440>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d008      	beq.n	8006478 <HAL_DMA_Init+0x3e4>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a1b      	ldr	r2, [pc, #108]	; (80064d8 <HAL_DMA_Init+0x444>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d003      	beq.n	8006478 <HAL_DMA_Init+0x3e4>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a19      	ldr	r2, [pc, #100]	; (80064dc <HAL_DMA_Init+0x448>)
 8006476:	4293      	cmp	r3, r2
 8006478:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2202      	movs	r2, #2
 800647e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	4b12      	ldr	r3, [pc, #72]	; (80064e0 <HAL_DMA_Init+0x44c>)
 8006496:	4013      	ands	r3, r2
 8006498:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	2b40      	cmp	r3, #64	; 0x40
 80064a0:	d020      	beq.n	80064e4 <HAL_DMA_Init+0x450>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	2b80      	cmp	r3, #128	; 0x80
 80064a8:	d102      	bne.n	80064b0 <HAL_DMA_Init+0x41c>
 80064aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80064ae:	e01a      	b.n	80064e6 <HAL_DMA_Init+0x452>
 80064b0:	2300      	movs	r3, #0
 80064b2:	e018      	b.n	80064e6 <HAL_DMA_Init+0x452>
 80064b4:	fe10803f 	.word	0xfe10803f
 80064b8:	5c001000 	.word	0x5c001000
 80064bc:	ffff0000 	.word	0xffff0000
 80064c0:	58025408 	.word	0x58025408
 80064c4:	5802541c 	.word	0x5802541c
 80064c8:	58025430 	.word	0x58025430
 80064cc:	58025444 	.word	0x58025444
 80064d0:	58025458 	.word	0x58025458
 80064d4:	5802546c 	.word	0x5802546c
 80064d8:	58025480 	.word	0x58025480
 80064dc:	58025494 	.word	0x58025494
 80064e0:	fffe000f 	.word	0xfffe000f
 80064e4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	68d2      	ldr	r2, [r2, #12]
 80064ea:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80064ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80064f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80064fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006504:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800650c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006514:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	4313      	orrs	r3, r2
 800651a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	461a      	mov	r2, r3
 800652a:	4b6e      	ldr	r3, [pc, #440]	; (80066e4 <HAL_DMA_Init+0x650>)
 800652c:	4413      	add	r3, r2
 800652e:	4a6e      	ldr	r2, [pc, #440]	; (80066e8 <HAL_DMA_Init+0x654>)
 8006530:	fba2 2303 	umull	r2, r3, r2, r3
 8006534:	091b      	lsrs	r3, r3, #4
 8006536:	009a      	lsls	r2, r3, #2
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f002 f9b5 	bl	80088ac <DMA_CalcBaseAndBitshift>
 8006542:	4603      	mov	r3, r0
 8006544:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800654a:	f003 031f 	and.w	r3, r3, #31
 800654e:	2201      	movs	r2, #1
 8006550:	409a      	lsls	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	605a      	str	r2, [r3, #4]
 8006556:	e008      	b.n	800656a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2240      	movs	r2, #64	; 0x40
 800655c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2203      	movs	r2, #3
 8006562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e0b7      	b.n	80066da <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a5f      	ldr	r2, [pc, #380]	; (80066ec <HAL_DMA_Init+0x658>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d072      	beq.n	800665a <HAL_DMA_Init+0x5c6>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a5d      	ldr	r2, [pc, #372]	; (80066f0 <HAL_DMA_Init+0x65c>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d06d      	beq.n	800665a <HAL_DMA_Init+0x5c6>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a5c      	ldr	r2, [pc, #368]	; (80066f4 <HAL_DMA_Init+0x660>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d068      	beq.n	800665a <HAL_DMA_Init+0x5c6>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a5a      	ldr	r2, [pc, #360]	; (80066f8 <HAL_DMA_Init+0x664>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d063      	beq.n	800665a <HAL_DMA_Init+0x5c6>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a59      	ldr	r2, [pc, #356]	; (80066fc <HAL_DMA_Init+0x668>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d05e      	beq.n	800665a <HAL_DMA_Init+0x5c6>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a57      	ldr	r2, [pc, #348]	; (8006700 <HAL_DMA_Init+0x66c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d059      	beq.n	800665a <HAL_DMA_Init+0x5c6>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a56      	ldr	r2, [pc, #344]	; (8006704 <HAL_DMA_Init+0x670>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d054      	beq.n	800665a <HAL_DMA_Init+0x5c6>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a54      	ldr	r2, [pc, #336]	; (8006708 <HAL_DMA_Init+0x674>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d04f      	beq.n	800665a <HAL_DMA_Init+0x5c6>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a53      	ldr	r2, [pc, #332]	; (800670c <HAL_DMA_Init+0x678>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d04a      	beq.n	800665a <HAL_DMA_Init+0x5c6>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a51      	ldr	r2, [pc, #324]	; (8006710 <HAL_DMA_Init+0x67c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d045      	beq.n	800665a <HAL_DMA_Init+0x5c6>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a50      	ldr	r2, [pc, #320]	; (8006714 <HAL_DMA_Init+0x680>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d040      	beq.n	800665a <HAL_DMA_Init+0x5c6>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a4e      	ldr	r2, [pc, #312]	; (8006718 <HAL_DMA_Init+0x684>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d03b      	beq.n	800665a <HAL_DMA_Init+0x5c6>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a4d      	ldr	r2, [pc, #308]	; (800671c <HAL_DMA_Init+0x688>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d036      	beq.n	800665a <HAL_DMA_Init+0x5c6>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a4b      	ldr	r2, [pc, #300]	; (8006720 <HAL_DMA_Init+0x68c>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d031      	beq.n	800665a <HAL_DMA_Init+0x5c6>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a4a      	ldr	r2, [pc, #296]	; (8006724 <HAL_DMA_Init+0x690>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d02c      	beq.n	800665a <HAL_DMA_Init+0x5c6>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a48      	ldr	r2, [pc, #288]	; (8006728 <HAL_DMA_Init+0x694>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d027      	beq.n	800665a <HAL_DMA_Init+0x5c6>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a47      	ldr	r2, [pc, #284]	; (800672c <HAL_DMA_Init+0x698>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d022      	beq.n	800665a <HAL_DMA_Init+0x5c6>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a45      	ldr	r2, [pc, #276]	; (8006730 <HAL_DMA_Init+0x69c>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d01d      	beq.n	800665a <HAL_DMA_Init+0x5c6>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a44      	ldr	r2, [pc, #272]	; (8006734 <HAL_DMA_Init+0x6a0>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d018      	beq.n	800665a <HAL_DMA_Init+0x5c6>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a42      	ldr	r2, [pc, #264]	; (8006738 <HAL_DMA_Init+0x6a4>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d013      	beq.n	800665a <HAL_DMA_Init+0x5c6>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a41      	ldr	r2, [pc, #260]	; (800673c <HAL_DMA_Init+0x6a8>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d00e      	beq.n	800665a <HAL_DMA_Init+0x5c6>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a3f      	ldr	r2, [pc, #252]	; (8006740 <HAL_DMA_Init+0x6ac>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d009      	beq.n	800665a <HAL_DMA_Init+0x5c6>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a3e      	ldr	r2, [pc, #248]	; (8006744 <HAL_DMA_Init+0x6b0>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d004      	beq.n	800665a <HAL_DMA_Init+0x5c6>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a3c      	ldr	r2, [pc, #240]	; (8006748 <HAL_DMA_Init+0x6b4>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d101      	bne.n	800665e <HAL_DMA_Init+0x5ca>
 800665a:	2301      	movs	r3, #1
 800665c:	e000      	b.n	8006660 <HAL_DMA_Init+0x5cc>
 800665e:	2300      	movs	r3, #0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d032      	beq.n	80066ca <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f002 fa4f 	bl	8008b08 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	2b80      	cmp	r3, #128	; 0x80
 8006670:	d102      	bne.n	8006678 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006680:	b2d2      	uxtb	r2, r2
 8006682:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800668c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d010      	beq.n	80066b8 <HAL_DMA_Init+0x624>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	2b08      	cmp	r3, #8
 800669c:	d80c      	bhi.n	80066b8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f002 facc 	bl	8008c3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066a8:	2200      	movs	r2, #0
 80066aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80066b4:	605a      	str	r2, [r3, #4]
 80066b6:	e008      	b.n	80066ca <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	a7fdabf8 	.word	0xa7fdabf8
 80066e8:	cccccccd 	.word	0xcccccccd
 80066ec:	40020010 	.word	0x40020010
 80066f0:	40020028 	.word	0x40020028
 80066f4:	40020040 	.word	0x40020040
 80066f8:	40020058 	.word	0x40020058
 80066fc:	40020070 	.word	0x40020070
 8006700:	40020088 	.word	0x40020088
 8006704:	400200a0 	.word	0x400200a0
 8006708:	400200b8 	.word	0x400200b8
 800670c:	40020410 	.word	0x40020410
 8006710:	40020428 	.word	0x40020428
 8006714:	40020440 	.word	0x40020440
 8006718:	40020458 	.word	0x40020458
 800671c:	40020470 	.word	0x40020470
 8006720:	40020488 	.word	0x40020488
 8006724:	400204a0 	.word	0x400204a0
 8006728:	400204b8 	.word	0x400204b8
 800672c:	58025408 	.word	0x58025408
 8006730:	5802541c 	.word	0x5802541c
 8006734:	58025430 	.word	0x58025430
 8006738:	58025444 	.word	0x58025444
 800673c:	58025458 	.word	0x58025458
 8006740:	5802546c 	.word	0x5802546c
 8006744:	58025480 	.word	0x58025480
 8006748:	58025494 	.word	0x58025494

0800674c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
 8006758:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800675a:	2300      	movs	r3, #0
 800675c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e226      	b.n	8006bb6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800676e:	2b01      	cmp	r3, #1
 8006770:	d101      	bne.n	8006776 <HAL_DMA_Start_IT+0x2a>
 8006772:	2302      	movs	r3, #2
 8006774:	e21f      	b.n	8006bb6 <HAL_DMA_Start_IT+0x46a>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b01      	cmp	r3, #1
 8006788:	f040 820a 	bne.w	8006ba0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2202      	movs	r2, #2
 8006790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a68      	ldr	r2, [pc, #416]	; (8006940 <HAL_DMA_Start_IT+0x1f4>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d04a      	beq.n	800683a <HAL_DMA_Start_IT+0xee>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a66      	ldr	r2, [pc, #408]	; (8006944 <HAL_DMA_Start_IT+0x1f8>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d045      	beq.n	800683a <HAL_DMA_Start_IT+0xee>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a65      	ldr	r2, [pc, #404]	; (8006948 <HAL_DMA_Start_IT+0x1fc>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d040      	beq.n	800683a <HAL_DMA_Start_IT+0xee>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a63      	ldr	r2, [pc, #396]	; (800694c <HAL_DMA_Start_IT+0x200>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d03b      	beq.n	800683a <HAL_DMA_Start_IT+0xee>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a62      	ldr	r2, [pc, #392]	; (8006950 <HAL_DMA_Start_IT+0x204>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d036      	beq.n	800683a <HAL_DMA_Start_IT+0xee>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a60      	ldr	r2, [pc, #384]	; (8006954 <HAL_DMA_Start_IT+0x208>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d031      	beq.n	800683a <HAL_DMA_Start_IT+0xee>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a5f      	ldr	r2, [pc, #380]	; (8006958 <HAL_DMA_Start_IT+0x20c>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d02c      	beq.n	800683a <HAL_DMA_Start_IT+0xee>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a5d      	ldr	r2, [pc, #372]	; (800695c <HAL_DMA_Start_IT+0x210>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d027      	beq.n	800683a <HAL_DMA_Start_IT+0xee>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a5c      	ldr	r2, [pc, #368]	; (8006960 <HAL_DMA_Start_IT+0x214>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d022      	beq.n	800683a <HAL_DMA_Start_IT+0xee>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a5a      	ldr	r2, [pc, #360]	; (8006964 <HAL_DMA_Start_IT+0x218>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d01d      	beq.n	800683a <HAL_DMA_Start_IT+0xee>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a59      	ldr	r2, [pc, #356]	; (8006968 <HAL_DMA_Start_IT+0x21c>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d018      	beq.n	800683a <HAL_DMA_Start_IT+0xee>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a57      	ldr	r2, [pc, #348]	; (800696c <HAL_DMA_Start_IT+0x220>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d013      	beq.n	800683a <HAL_DMA_Start_IT+0xee>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a56      	ldr	r2, [pc, #344]	; (8006970 <HAL_DMA_Start_IT+0x224>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d00e      	beq.n	800683a <HAL_DMA_Start_IT+0xee>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a54      	ldr	r2, [pc, #336]	; (8006974 <HAL_DMA_Start_IT+0x228>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d009      	beq.n	800683a <HAL_DMA_Start_IT+0xee>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a53      	ldr	r2, [pc, #332]	; (8006978 <HAL_DMA_Start_IT+0x22c>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d004      	beq.n	800683a <HAL_DMA_Start_IT+0xee>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a51      	ldr	r2, [pc, #324]	; (800697c <HAL_DMA_Start_IT+0x230>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d108      	bne.n	800684c <HAL_DMA_Start_IT+0x100>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 0201 	bic.w	r2, r2, #1
 8006848:	601a      	str	r2, [r3, #0]
 800684a:	e007      	b.n	800685c <HAL_DMA_Start_IT+0x110>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f022 0201 	bic.w	r2, r2, #1
 800685a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	68b9      	ldr	r1, [r7, #8]
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f001 fe76 	bl	8008554 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a34      	ldr	r2, [pc, #208]	; (8006940 <HAL_DMA_Start_IT+0x1f4>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d04a      	beq.n	8006908 <HAL_DMA_Start_IT+0x1bc>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a33      	ldr	r2, [pc, #204]	; (8006944 <HAL_DMA_Start_IT+0x1f8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d045      	beq.n	8006908 <HAL_DMA_Start_IT+0x1bc>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a31      	ldr	r2, [pc, #196]	; (8006948 <HAL_DMA_Start_IT+0x1fc>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d040      	beq.n	8006908 <HAL_DMA_Start_IT+0x1bc>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a30      	ldr	r2, [pc, #192]	; (800694c <HAL_DMA_Start_IT+0x200>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d03b      	beq.n	8006908 <HAL_DMA_Start_IT+0x1bc>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a2e      	ldr	r2, [pc, #184]	; (8006950 <HAL_DMA_Start_IT+0x204>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d036      	beq.n	8006908 <HAL_DMA_Start_IT+0x1bc>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a2d      	ldr	r2, [pc, #180]	; (8006954 <HAL_DMA_Start_IT+0x208>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d031      	beq.n	8006908 <HAL_DMA_Start_IT+0x1bc>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a2b      	ldr	r2, [pc, #172]	; (8006958 <HAL_DMA_Start_IT+0x20c>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d02c      	beq.n	8006908 <HAL_DMA_Start_IT+0x1bc>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a2a      	ldr	r2, [pc, #168]	; (800695c <HAL_DMA_Start_IT+0x210>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d027      	beq.n	8006908 <HAL_DMA_Start_IT+0x1bc>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a28      	ldr	r2, [pc, #160]	; (8006960 <HAL_DMA_Start_IT+0x214>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d022      	beq.n	8006908 <HAL_DMA_Start_IT+0x1bc>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a27      	ldr	r2, [pc, #156]	; (8006964 <HAL_DMA_Start_IT+0x218>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d01d      	beq.n	8006908 <HAL_DMA_Start_IT+0x1bc>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a25      	ldr	r2, [pc, #148]	; (8006968 <HAL_DMA_Start_IT+0x21c>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d018      	beq.n	8006908 <HAL_DMA_Start_IT+0x1bc>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a24      	ldr	r2, [pc, #144]	; (800696c <HAL_DMA_Start_IT+0x220>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d013      	beq.n	8006908 <HAL_DMA_Start_IT+0x1bc>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a22      	ldr	r2, [pc, #136]	; (8006970 <HAL_DMA_Start_IT+0x224>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d00e      	beq.n	8006908 <HAL_DMA_Start_IT+0x1bc>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a21      	ldr	r2, [pc, #132]	; (8006974 <HAL_DMA_Start_IT+0x228>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d009      	beq.n	8006908 <HAL_DMA_Start_IT+0x1bc>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a1f      	ldr	r2, [pc, #124]	; (8006978 <HAL_DMA_Start_IT+0x22c>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d004      	beq.n	8006908 <HAL_DMA_Start_IT+0x1bc>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a1e      	ldr	r2, [pc, #120]	; (800697c <HAL_DMA_Start_IT+0x230>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d101      	bne.n	800690c <HAL_DMA_Start_IT+0x1c0>
 8006908:	2301      	movs	r3, #1
 800690a:	e000      	b.n	800690e <HAL_DMA_Start_IT+0x1c2>
 800690c:	2300      	movs	r3, #0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d036      	beq.n	8006980 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f023 021e 	bic.w	r2, r3, #30
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f042 0216 	orr.w	r2, r2, #22
 8006924:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692a:	2b00      	cmp	r3, #0
 800692c:	d03e      	beq.n	80069ac <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f042 0208 	orr.w	r2, r2, #8
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	e035      	b.n	80069ac <HAL_DMA_Start_IT+0x260>
 8006940:	40020010 	.word	0x40020010
 8006944:	40020028 	.word	0x40020028
 8006948:	40020040 	.word	0x40020040
 800694c:	40020058 	.word	0x40020058
 8006950:	40020070 	.word	0x40020070
 8006954:	40020088 	.word	0x40020088
 8006958:	400200a0 	.word	0x400200a0
 800695c:	400200b8 	.word	0x400200b8
 8006960:	40020410 	.word	0x40020410
 8006964:	40020428 	.word	0x40020428
 8006968:	40020440 	.word	0x40020440
 800696c:	40020458 	.word	0x40020458
 8006970:	40020470 	.word	0x40020470
 8006974:	40020488 	.word	0x40020488
 8006978:	400204a0 	.word	0x400204a0
 800697c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f023 020e 	bic.w	r2, r3, #14
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f042 020a 	orr.w	r2, r2, #10
 8006992:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006998:	2b00      	cmp	r3, #0
 800699a:	d007      	beq.n	80069ac <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0204 	orr.w	r2, r2, #4
 80069aa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a83      	ldr	r2, [pc, #524]	; (8006bc0 <HAL_DMA_Start_IT+0x474>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d072      	beq.n	8006a9c <HAL_DMA_Start_IT+0x350>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a82      	ldr	r2, [pc, #520]	; (8006bc4 <HAL_DMA_Start_IT+0x478>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d06d      	beq.n	8006a9c <HAL_DMA_Start_IT+0x350>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a80      	ldr	r2, [pc, #512]	; (8006bc8 <HAL_DMA_Start_IT+0x47c>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d068      	beq.n	8006a9c <HAL_DMA_Start_IT+0x350>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a7f      	ldr	r2, [pc, #508]	; (8006bcc <HAL_DMA_Start_IT+0x480>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d063      	beq.n	8006a9c <HAL_DMA_Start_IT+0x350>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a7d      	ldr	r2, [pc, #500]	; (8006bd0 <HAL_DMA_Start_IT+0x484>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d05e      	beq.n	8006a9c <HAL_DMA_Start_IT+0x350>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a7c      	ldr	r2, [pc, #496]	; (8006bd4 <HAL_DMA_Start_IT+0x488>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d059      	beq.n	8006a9c <HAL_DMA_Start_IT+0x350>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a7a      	ldr	r2, [pc, #488]	; (8006bd8 <HAL_DMA_Start_IT+0x48c>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d054      	beq.n	8006a9c <HAL_DMA_Start_IT+0x350>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a79      	ldr	r2, [pc, #484]	; (8006bdc <HAL_DMA_Start_IT+0x490>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d04f      	beq.n	8006a9c <HAL_DMA_Start_IT+0x350>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a77      	ldr	r2, [pc, #476]	; (8006be0 <HAL_DMA_Start_IT+0x494>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d04a      	beq.n	8006a9c <HAL_DMA_Start_IT+0x350>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a76      	ldr	r2, [pc, #472]	; (8006be4 <HAL_DMA_Start_IT+0x498>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d045      	beq.n	8006a9c <HAL_DMA_Start_IT+0x350>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a74      	ldr	r2, [pc, #464]	; (8006be8 <HAL_DMA_Start_IT+0x49c>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d040      	beq.n	8006a9c <HAL_DMA_Start_IT+0x350>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a73      	ldr	r2, [pc, #460]	; (8006bec <HAL_DMA_Start_IT+0x4a0>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d03b      	beq.n	8006a9c <HAL_DMA_Start_IT+0x350>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a71      	ldr	r2, [pc, #452]	; (8006bf0 <HAL_DMA_Start_IT+0x4a4>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d036      	beq.n	8006a9c <HAL_DMA_Start_IT+0x350>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a70      	ldr	r2, [pc, #448]	; (8006bf4 <HAL_DMA_Start_IT+0x4a8>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d031      	beq.n	8006a9c <HAL_DMA_Start_IT+0x350>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a6e      	ldr	r2, [pc, #440]	; (8006bf8 <HAL_DMA_Start_IT+0x4ac>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d02c      	beq.n	8006a9c <HAL_DMA_Start_IT+0x350>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a6d      	ldr	r2, [pc, #436]	; (8006bfc <HAL_DMA_Start_IT+0x4b0>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d027      	beq.n	8006a9c <HAL_DMA_Start_IT+0x350>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a6b      	ldr	r2, [pc, #428]	; (8006c00 <HAL_DMA_Start_IT+0x4b4>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d022      	beq.n	8006a9c <HAL_DMA_Start_IT+0x350>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a6a      	ldr	r2, [pc, #424]	; (8006c04 <HAL_DMA_Start_IT+0x4b8>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d01d      	beq.n	8006a9c <HAL_DMA_Start_IT+0x350>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a68      	ldr	r2, [pc, #416]	; (8006c08 <HAL_DMA_Start_IT+0x4bc>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d018      	beq.n	8006a9c <HAL_DMA_Start_IT+0x350>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a67      	ldr	r2, [pc, #412]	; (8006c0c <HAL_DMA_Start_IT+0x4c0>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d013      	beq.n	8006a9c <HAL_DMA_Start_IT+0x350>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a65      	ldr	r2, [pc, #404]	; (8006c10 <HAL_DMA_Start_IT+0x4c4>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d00e      	beq.n	8006a9c <HAL_DMA_Start_IT+0x350>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a64      	ldr	r2, [pc, #400]	; (8006c14 <HAL_DMA_Start_IT+0x4c8>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d009      	beq.n	8006a9c <HAL_DMA_Start_IT+0x350>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a62      	ldr	r2, [pc, #392]	; (8006c18 <HAL_DMA_Start_IT+0x4cc>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d004      	beq.n	8006a9c <HAL_DMA_Start_IT+0x350>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a61      	ldr	r2, [pc, #388]	; (8006c1c <HAL_DMA_Start_IT+0x4d0>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d101      	bne.n	8006aa0 <HAL_DMA_Start_IT+0x354>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e000      	b.n	8006aa2 <HAL_DMA_Start_IT+0x356>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d01a      	beq.n	8006adc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d007      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006abe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ac2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d007      	beq.n	8006adc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ad6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ada:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a37      	ldr	r2, [pc, #220]	; (8006bc0 <HAL_DMA_Start_IT+0x474>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d04a      	beq.n	8006b7c <HAL_DMA_Start_IT+0x430>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a36      	ldr	r2, [pc, #216]	; (8006bc4 <HAL_DMA_Start_IT+0x478>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d045      	beq.n	8006b7c <HAL_DMA_Start_IT+0x430>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a34      	ldr	r2, [pc, #208]	; (8006bc8 <HAL_DMA_Start_IT+0x47c>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d040      	beq.n	8006b7c <HAL_DMA_Start_IT+0x430>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a33      	ldr	r2, [pc, #204]	; (8006bcc <HAL_DMA_Start_IT+0x480>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d03b      	beq.n	8006b7c <HAL_DMA_Start_IT+0x430>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a31      	ldr	r2, [pc, #196]	; (8006bd0 <HAL_DMA_Start_IT+0x484>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d036      	beq.n	8006b7c <HAL_DMA_Start_IT+0x430>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a30      	ldr	r2, [pc, #192]	; (8006bd4 <HAL_DMA_Start_IT+0x488>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d031      	beq.n	8006b7c <HAL_DMA_Start_IT+0x430>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a2e      	ldr	r2, [pc, #184]	; (8006bd8 <HAL_DMA_Start_IT+0x48c>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d02c      	beq.n	8006b7c <HAL_DMA_Start_IT+0x430>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a2d      	ldr	r2, [pc, #180]	; (8006bdc <HAL_DMA_Start_IT+0x490>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d027      	beq.n	8006b7c <HAL_DMA_Start_IT+0x430>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a2b      	ldr	r2, [pc, #172]	; (8006be0 <HAL_DMA_Start_IT+0x494>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d022      	beq.n	8006b7c <HAL_DMA_Start_IT+0x430>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a2a      	ldr	r2, [pc, #168]	; (8006be4 <HAL_DMA_Start_IT+0x498>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d01d      	beq.n	8006b7c <HAL_DMA_Start_IT+0x430>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a28      	ldr	r2, [pc, #160]	; (8006be8 <HAL_DMA_Start_IT+0x49c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d018      	beq.n	8006b7c <HAL_DMA_Start_IT+0x430>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a27      	ldr	r2, [pc, #156]	; (8006bec <HAL_DMA_Start_IT+0x4a0>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d013      	beq.n	8006b7c <HAL_DMA_Start_IT+0x430>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a25      	ldr	r2, [pc, #148]	; (8006bf0 <HAL_DMA_Start_IT+0x4a4>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d00e      	beq.n	8006b7c <HAL_DMA_Start_IT+0x430>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a24      	ldr	r2, [pc, #144]	; (8006bf4 <HAL_DMA_Start_IT+0x4a8>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d009      	beq.n	8006b7c <HAL_DMA_Start_IT+0x430>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a22      	ldr	r2, [pc, #136]	; (8006bf8 <HAL_DMA_Start_IT+0x4ac>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d004      	beq.n	8006b7c <HAL_DMA_Start_IT+0x430>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a21      	ldr	r2, [pc, #132]	; (8006bfc <HAL_DMA_Start_IT+0x4b0>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d108      	bne.n	8006b8e <HAL_DMA_Start_IT+0x442>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f042 0201 	orr.w	r2, r2, #1
 8006b8a:	601a      	str	r2, [r3, #0]
 8006b8c:	e012      	b.n	8006bb4 <HAL_DMA_Start_IT+0x468>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f042 0201 	orr.w	r2, r2, #1
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	e009      	b.n	8006bb4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ba6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3718      	adds	r7, #24
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	40020010 	.word	0x40020010
 8006bc4:	40020028 	.word	0x40020028
 8006bc8:	40020040 	.word	0x40020040
 8006bcc:	40020058 	.word	0x40020058
 8006bd0:	40020070 	.word	0x40020070
 8006bd4:	40020088 	.word	0x40020088
 8006bd8:	400200a0 	.word	0x400200a0
 8006bdc:	400200b8 	.word	0x400200b8
 8006be0:	40020410 	.word	0x40020410
 8006be4:	40020428 	.word	0x40020428
 8006be8:	40020440 	.word	0x40020440
 8006bec:	40020458 	.word	0x40020458
 8006bf0:	40020470 	.word	0x40020470
 8006bf4:	40020488 	.word	0x40020488
 8006bf8:	400204a0 	.word	0x400204a0
 8006bfc:	400204b8 	.word	0x400204b8
 8006c00:	58025408 	.word	0x58025408
 8006c04:	5802541c 	.word	0x5802541c
 8006c08:	58025430 	.word	0x58025430
 8006c0c:	58025444 	.word	0x58025444
 8006c10:	58025458 	.word	0x58025458
 8006c14:	5802546c 	.word	0x5802546c
 8006c18:	58025480 	.word	0x58025480
 8006c1c:	58025494 	.word	0x58025494

08006c20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006c28:	f7fd f90c 	bl	8003e44 <HAL_GetTick>
 8006c2c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d101      	bne.n	8006c38 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e2dc      	b.n	80071f2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d008      	beq.n	8006c56 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2280      	movs	r2, #128	; 0x80
 8006c48:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e2cd      	b.n	80071f2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a76      	ldr	r2, [pc, #472]	; (8006e34 <HAL_DMA_Abort+0x214>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d04a      	beq.n	8006cf6 <HAL_DMA_Abort+0xd6>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a74      	ldr	r2, [pc, #464]	; (8006e38 <HAL_DMA_Abort+0x218>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d045      	beq.n	8006cf6 <HAL_DMA_Abort+0xd6>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a73      	ldr	r2, [pc, #460]	; (8006e3c <HAL_DMA_Abort+0x21c>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d040      	beq.n	8006cf6 <HAL_DMA_Abort+0xd6>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a71      	ldr	r2, [pc, #452]	; (8006e40 <HAL_DMA_Abort+0x220>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d03b      	beq.n	8006cf6 <HAL_DMA_Abort+0xd6>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a70      	ldr	r2, [pc, #448]	; (8006e44 <HAL_DMA_Abort+0x224>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d036      	beq.n	8006cf6 <HAL_DMA_Abort+0xd6>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a6e      	ldr	r2, [pc, #440]	; (8006e48 <HAL_DMA_Abort+0x228>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d031      	beq.n	8006cf6 <HAL_DMA_Abort+0xd6>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a6d      	ldr	r2, [pc, #436]	; (8006e4c <HAL_DMA_Abort+0x22c>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d02c      	beq.n	8006cf6 <HAL_DMA_Abort+0xd6>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a6b      	ldr	r2, [pc, #428]	; (8006e50 <HAL_DMA_Abort+0x230>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d027      	beq.n	8006cf6 <HAL_DMA_Abort+0xd6>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a6a      	ldr	r2, [pc, #424]	; (8006e54 <HAL_DMA_Abort+0x234>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d022      	beq.n	8006cf6 <HAL_DMA_Abort+0xd6>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a68      	ldr	r2, [pc, #416]	; (8006e58 <HAL_DMA_Abort+0x238>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d01d      	beq.n	8006cf6 <HAL_DMA_Abort+0xd6>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a67      	ldr	r2, [pc, #412]	; (8006e5c <HAL_DMA_Abort+0x23c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d018      	beq.n	8006cf6 <HAL_DMA_Abort+0xd6>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a65      	ldr	r2, [pc, #404]	; (8006e60 <HAL_DMA_Abort+0x240>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d013      	beq.n	8006cf6 <HAL_DMA_Abort+0xd6>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a64      	ldr	r2, [pc, #400]	; (8006e64 <HAL_DMA_Abort+0x244>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d00e      	beq.n	8006cf6 <HAL_DMA_Abort+0xd6>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a62      	ldr	r2, [pc, #392]	; (8006e68 <HAL_DMA_Abort+0x248>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d009      	beq.n	8006cf6 <HAL_DMA_Abort+0xd6>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a61      	ldr	r2, [pc, #388]	; (8006e6c <HAL_DMA_Abort+0x24c>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d004      	beq.n	8006cf6 <HAL_DMA_Abort+0xd6>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a5f      	ldr	r2, [pc, #380]	; (8006e70 <HAL_DMA_Abort+0x250>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d101      	bne.n	8006cfa <HAL_DMA_Abort+0xda>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e000      	b.n	8006cfc <HAL_DMA_Abort+0xdc>
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d013      	beq.n	8006d28 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f022 021e 	bic.w	r2, r2, #30
 8006d0e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	695a      	ldr	r2, [r3, #20]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d1e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	617b      	str	r3, [r7, #20]
 8006d26:	e00a      	b.n	8006d3e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f022 020e 	bic.w	r2, r2, #14
 8006d36:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a3c      	ldr	r2, [pc, #240]	; (8006e34 <HAL_DMA_Abort+0x214>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d072      	beq.n	8006e2e <HAL_DMA_Abort+0x20e>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a3a      	ldr	r2, [pc, #232]	; (8006e38 <HAL_DMA_Abort+0x218>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d06d      	beq.n	8006e2e <HAL_DMA_Abort+0x20e>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a39      	ldr	r2, [pc, #228]	; (8006e3c <HAL_DMA_Abort+0x21c>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d068      	beq.n	8006e2e <HAL_DMA_Abort+0x20e>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a37      	ldr	r2, [pc, #220]	; (8006e40 <HAL_DMA_Abort+0x220>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d063      	beq.n	8006e2e <HAL_DMA_Abort+0x20e>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a36      	ldr	r2, [pc, #216]	; (8006e44 <HAL_DMA_Abort+0x224>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d05e      	beq.n	8006e2e <HAL_DMA_Abort+0x20e>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a34      	ldr	r2, [pc, #208]	; (8006e48 <HAL_DMA_Abort+0x228>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d059      	beq.n	8006e2e <HAL_DMA_Abort+0x20e>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a33      	ldr	r2, [pc, #204]	; (8006e4c <HAL_DMA_Abort+0x22c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d054      	beq.n	8006e2e <HAL_DMA_Abort+0x20e>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a31      	ldr	r2, [pc, #196]	; (8006e50 <HAL_DMA_Abort+0x230>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d04f      	beq.n	8006e2e <HAL_DMA_Abort+0x20e>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a30      	ldr	r2, [pc, #192]	; (8006e54 <HAL_DMA_Abort+0x234>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d04a      	beq.n	8006e2e <HAL_DMA_Abort+0x20e>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a2e      	ldr	r2, [pc, #184]	; (8006e58 <HAL_DMA_Abort+0x238>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d045      	beq.n	8006e2e <HAL_DMA_Abort+0x20e>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a2d      	ldr	r2, [pc, #180]	; (8006e5c <HAL_DMA_Abort+0x23c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d040      	beq.n	8006e2e <HAL_DMA_Abort+0x20e>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a2b      	ldr	r2, [pc, #172]	; (8006e60 <HAL_DMA_Abort+0x240>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d03b      	beq.n	8006e2e <HAL_DMA_Abort+0x20e>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a2a      	ldr	r2, [pc, #168]	; (8006e64 <HAL_DMA_Abort+0x244>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d036      	beq.n	8006e2e <HAL_DMA_Abort+0x20e>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a28      	ldr	r2, [pc, #160]	; (8006e68 <HAL_DMA_Abort+0x248>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d031      	beq.n	8006e2e <HAL_DMA_Abort+0x20e>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a27      	ldr	r2, [pc, #156]	; (8006e6c <HAL_DMA_Abort+0x24c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d02c      	beq.n	8006e2e <HAL_DMA_Abort+0x20e>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a25      	ldr	r2, [pc, #148]	; (8006e70 <HAL_DMA_Abort+0x250>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d027      	beq.n	8006e2e <HAL_DMA_Abort+0x20e>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a24      	ldr	r2, [pc, #144]	; (8006e74 <HAL_DMA_Abort+0x254>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d022      	beq.n	8006e2e <HAL_DMA_Abort+0x20e>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a22      	ldr	r2, [pc, #136]	; (8006e78 <HAL_DMA_Abort+0x258>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d01d      	beq.n	8006e2e <HAL_DMA_Abort+0x20e>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a21      	ldr	r2, [pc, #132]	; (8006e7c <HAL_DMA_Abort+0x25c>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d018      	beq.n	8006e2e <HAL_DMA_Abort+0x20e>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a1f      	ldr	r2, [pc, #124]	; (8006e80 <HAL_DMA_Abort+0x260>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d013      	beq.n	8006e2e <HAL_DMA_Abort+0x20e>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a1e      	ldr	r2, [pc, #120]	; (8006e84 <HAL_DMA_Abort+0x264>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d00e      	beq.n	8006e2e <HAL_DMA_Abort+0x20e>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a1c      	ldr	r2, [pc, #112]	; (8006e88 <HAL_DMA_Abort+0x268>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d009      	beq.n	8006e2e <HAL_DMA_Abort+0x20e>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a1b      	ldr	r2, [pc, #108]	; (8006e8c <HAL_DMA_Abort+0x26c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d004      	beq.n	8006e2e <HAL_DMA_Abort+0x20e>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a19      	ldr	r2, [pc, #100]	; (8006e90 <HAL_DMA_Abort+0x270>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d132      	bne.n	8006e94 <HAL_DMA_Abort+0x274>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e031      	b.n	8006e96 <HAL_DMA_Abort+0x276>
 8006e32:	bf00      	nop
 8006e34:	40020010 	.word	0x40020010
 8006e38:	40020028 	.word	0x40020028
 8006e3c:	40020040 	.word	0x40020040
 8006e40:	40020058 	.word	0x40020058
 8006e44:	40020070 	.word	0x40020070
 8006e48:	40020088 	.word	0x40020088
 8006e4c:	400200a0 	.word	0x400200a0
 8006e50:	400200b8 	.word	0x400200b8
 8006e54:	40020410 	.word	0x40020410
 8006e58:	40020428 	.word	0x40020428
 8006e5c:	40020440 	.word	0x40020440
 8006e60:	40020458 	.word	0x40020458
 8006e64:	40020470 	.word	0x40020470
 8006e68:	40020488 	.word	0x40020488
 8006e6c:	400204a0 	.word	0x400204a0
 8006e70:	400204b8 	.word	0x400204b8
 8006e74:	58025408 	.word	0x58025408
 8006e78:	5802541c 	.word	0x5802541c
 8006e7c:	58025430 	.word	0x58025430
 8006e80:	58025444 	.word	0x58025444
 8006e84:	58025458 	.word	0x58025458
 8006e88:	5802546c 	.word	0x5802546c
 8006e8c:	58025480 	.word	0x58025480
 8006e90:	58025494 	.word	0x58025494
 8006e94:	2300      	movs	r3, #0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d007      	beq.n	8006eaa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ea4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ea8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a6d      	ldr	r2, [pc, #436]	; (8007064 <HAL_DMA_Abort+0x444>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d04a      	beq.n	8006f4a <HAL_DMA_Abort+0x32a>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a6b      	ldr	r2, [pc, #428]	; (8007068 <HAL_DMA_Abort+0x448>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d045      	beq.n	8006f4a <HAL_DMA_Abort+0x32a>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a6a      	ldr	r2, [pc, #424]	; (800706c <HAL_DMA_Abort+0x44c>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d040      	beq.n	8006f4a <HAL_DMA_Abort+0x32a>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a68      	ldr	r2, [pc, #416]	; (8007070 <HAL_DMA_Abort+0x450>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d03b      	beq.n	8006f4a <HAL_DMA_Abort+0x32a>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a67      	ldr	r2, [pc, #412]	; (8007074 <HAL_DMA_Abort+0x454>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d036      	beq.n	8006f4a <HAL_DMA_Abort+0x32a>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a65      	ldr	r2, [pc, #404]	; (8007078 <HAL_DMA_Abort+0x458>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d031      	beq.n	8006f4a <HAL_DMA_Abort+0x32a>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a64      	ldr	r2, [pc, #400]	; (800707c <HAL_DMA_Abort+0x45c>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d02c      	beq.n	8006f4a <HAL_DMA_Abort+0x32a>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a62      	ldr	r2, [pc, #392]	; (8007080 <HAL_DMA_Abort+0x460>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d027      	beq.n	8006f4a <HAL_DMA_Abort+0x32a>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a61      	ldr	r2, [pc, #388]	; (8007084 <HAL_DMA_Abort+0x464>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d022      	beq.n	8006f4a <HAL_DMA_Abort+0x32a>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a5f      	ldr	r2, [pc, #380]	; (8007088 <HAL_DMA_Abort+0x468>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d01d      	beq.n	8006f4a <HAL_DMA_Abort+0x32a>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a5e      	ldr	r2, [pc, #376]	; (800708c <HAL_DMA_Abort+0x46c>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d018      	beq.n	8006f4a <HAL_DMA_Abort+0x32a>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a5c      	ldr	r2, [pc, #368]	; (8007090 <HAL_DMA_Abort+0x470>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d013      	beq.n	8006f4a <HAL_DMA_Abort+0x32a>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a5b      	ldr	r2, [pc, #364]	; (8007094 <HAL_DMA_Abort+0x474>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d00e      	beq.n	8006f4a <HAL_DMA_Abort+0x32a>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a59      	ldr	r2, [pc, #356]	; (8007098 <HAL_DMA_Abort+0x478>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d009      	beq.n	8006f4a <HAL_DMA_Abort+0x32a>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a58      	ldr	r2, [pc, #352]	; (800709c <HAL_DMA_Abort+0x47c>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d004      	beq.n	8006f4a <HAL_DMA_Abort+0x32a>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a56      	ldr	r2, [pc, #344]	; (80070a0 <HAL_DMA_Abort+0x480>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d108      	bne.n	8006f5c <HAL_DMA_Abort+0x33c>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 0201 	bic.w	r2, r2, #1
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	e007      	b.n	8006f6c <HAL_DMA_Abort+0x34c>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f022 0201 	bic.w	r2, r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006f6c:	e013      	b.n	8006f96 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f6e:	f7fc ff69 	bl	8003e44 <HAL_GetTick>
 8006f72:	4602      	mov	r2, r0
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	2b05      	cmp	r3, #5
 8006f7a:	d90c      	bls.n	8006f96 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2203      	movs	r2, #3
 8006f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e12d      	b.n	80071f2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e5      	bne.n	8006f6e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a2f      	ldr	r2, [pc, #188]	; (8007064 <HAL_DMA_Abort+0x444>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d04a      	beq.n	8007042 <HAL_DMA_Abort+0x422>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a2d      	ldr	r2, [pc, #180]	; (8007068 <HAL_DMA_Abort+0x448>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d045      	beq.n	8007042 <HAL_DMA_Abort+0x422>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a2c      	ldr	r2, [pc, #176]	; (800706c <HAL_DMA_Abort+0x44c>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d040      	beq.n	8007042 <HAL_DMA_Abort+0x422>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a2a      	ldr	r2, [pc, #168]	; (8007070 <HAL_DMA_Abort+0x450>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d03b      	beq.n	8007042 <HAL_DMA_Abort+0x422>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a29      	ldr	r2, [pc, #164]	; (8007074 <HAL_DMA_Abort+0x454>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d036      	beq.n	8007042 <HAL_DMA_Abort+0x422>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a27      	ldr	r2, [pc, #156]	; (8007078 <HAL_DMA_Abort+0x458>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d031      	beq.n	8007042 <HAL_DMA_Abort+0x422>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a26      	ldr	r2, [pc, #152]	; (800707c <HAL_DMA_Abort+0x45c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d02c      	beq.n	8007042 <HAL_DMA_Abort+0x422>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a24      	ldr	r2, [pc, #144]	; (8007080 <HAL_DMA_Abort+0x460>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d027      	beq.n	8007042 <HAL_DMA_Abort+0x422>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a23      	ldr	r2, [pc, #140]	; (8007084 <HAL_DMA_Abort+0x464>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d022      	beq.n	8007042 <HAL_DMA_Abort+0x422>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a21      	ldr	r2, [pc, #132]	; (8007088 <HAL_DMA_Abort+0x468>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d01d      	beq.n	8007042 <HAL_DMA_Abort+0x422>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a20      	ldr	r2, [pc, #128]	; (800708c <HAL_DMA_Abort+0x46c>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d018      	beq.n	8007042 <HAL_DMA_Abort+0x422>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a1e      	ldr	r2, [pc, #120]	; (8007090 <HAL_DMA_Abort+0x470>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d013      	beq.n	8007042 <HAL_DMA_Abort+0x422>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a1d      	ldr	r2, [pc, #116]	; (8007094 <HAL_DMA_Abort+0x474>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d00e      	beq.n	8007042 <HAL_DMA_Abort+0x422>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a1b      	ldr	r2, [pc, #108]	; (8007098 <HAL_DMA_Abort+0x478>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d009      	beq.n	8007042 <HAL_DMA_Abort+0x422>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a1a      	ldr	r2, [pc, #104]	; (800709c <HAL_DMA_Abort+0x47c>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d004      	beq.n	8007042 <HAL_DMA_Abort+0x422>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a18      	ldr	r2, [pc, #96]	; (80070a0 <HAL_DMA_Abort+0x480>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d101      	bne.n	8007046 <HAL_DMA_Abort+0x426>
 8007042:	2301      	movs	r3, #1
 8007044:	e000      	b.n	8007048 <HAL_DMA_Abort+0x428>
 8007046:	2300      	movs	r3, #0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d02b      	beq.n	80070a4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007050:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007056:	f003 031f 	and.w	r3, r3, #31
 800705a:	223f      	movs	r2, #63	; 0x3f
 800705c:	409a      	lsls	r2, r3
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	609a      	str	r2, [r3, #8]
 8007062:	e02a      	b.n	80070ba <HAL_DMA_Abort+0x49a>
 8007064:	40020010 	.word	0x40020010
 8007068:	40020028 	.word	0x40020028
 800706c:	40020040 	.word	0x40020040
 8007070:	40020058 	.word	0x40020058
 8007074:	40020070 	.word	0x40020070
 8007078:	40020088 	.word	0x40020088
 800707c:	400200a0 	.word	0x400200a0
 8007080:	400200b8 	.word	0x400200b8
 8007084:	40020410 	.word	0x40020410
 8007088:	40020428 	.word	0x40020428
 800708c:	40020440 	.word	0x40020440
 8007090:	40020458 	.word	0x40020458
 8007094:	40020470 	.word	0x40020470
 8007098:	40020488 	.word	0x40020488
 800709c:	400204a0 	.word	0x400204a0
 80070a0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ae:	f003 031f 	and.w	r3, r3, #31
 80070b2:	2201      	movs	r2, #1
 80070b4:	409a      	lsls	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a4f      	ldr	r2, [pc, #316]	; (80071fc <HAL_DMA_Abort+0x5dc>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d072      	beq.n	80071aa <HAL_DMA_Abort+0x58a>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a4d      	ldr	r2, [pc, #308]	; (8007200 <HAL_DMA_Abort+0x5e0>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d06d      	beq.n	80071aa <HAL_DMA_Abort+0x58a>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a4c      	ldr	r2, [pc, #304]	; (8007204 <HAL_DMA_Abort+0x5e4>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d068      	beq.n	80071aa <HAL_DMA_Abort+0x58a>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a4a      	ldr	r2, [pc, #296]	; (8007208 <HAL_DMA_Abort+0x5e8>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d063      	beq.n	80071aa <HAL_DMA_Abort+0x58a>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a49      	ldr	r2, [pc, #292]	; (800720c <HAL_DMA_Abort+0x5ec>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d05e      	beq.n	80071aa <HAL_DMA_Abort+0x58a>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a47      	ldr	r2, [pc, #284]	; (8007210 <HAL_DMA_Abort+0x5f0>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d059      	beq.n	80071aa <HAL_DMA_Abort+0x58a>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a46      	ldr	r2, [pc, #280]	; (8007214 <HAL_DMA_Abort+0x5f4>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d054      	beq.n	80071aa <HAL_DMA_Abort+0x58a>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a44      	ldr	r2, [pc, #272]	; (8007218 <HAL_DMA_Abort+0x5f8>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d04f      	beq.n	80071aa <HAL_DMA_Abort+0x58a>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a43      	ldr	r2, [pc, #268]	; (800721c <HAL_DMA_Abort+0x5fc>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d04a      	beq.n	80071aa <HAL_DMA_Abort+0x58a>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a41      	ldr	r2, [pc, #260]	; (8007220 <HAL_DMA_Abort+0x600>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d045      	beq.n	80071aa <HAL_DMA_Abort+0x58a>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a40      	ldr	r2, [pc, #256]	; (8007224 <HAL_DMA_Abort+0x604>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d040      	beq.n	80071aa <HAL_DMA_Abort+0x58a>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a3e      	ldr	r2, [pc, #248]	; (8007228 <HAL_DMA_Abort+0x608>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d03b      	beq.n	80071aa <HAL_DMA_Abort+0x58a>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a3d      	ldr	r2, [pc, #244]	; (800722c <HAL_DMA_Abort+0x60c>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d036      	beq.n	80071aa <HAL_DMA_Abort+0x58a>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a3b      	ldr	r2, [pc, #236]	; (8007230 <HAL_DMA_Abort+0x610>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d031      	beq.n	80071aa <HAL_DMA_Abort+0x58a>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a3a      	ldr	r2, [pc, #232]	; (8007234 <HAL_DMA_Abort+0x614>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d02c      	beq.n	80071aa <HAL_DMA_Abort+0x58a>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a38      	ldr	r2, [pc, #224]	; (8007238 <HAL_DMA_Abort+0x618>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d027      	beq.n	80071aa <HAL_DMA_Abort+0x58a>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a37      	ldr	r2, [pc, #220]	; (800723c <HAL_DMA_Abort+0x61c>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d022      	beq.n	80071aa <HAL_DMA_Abort+0x58a>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a35      	ldr	r2, [pc, #212]	; (8007240 <HAL_DMA_Abort+0x620>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d01d      	beq.n	80071aa <HAL_DMA_Abort+0x58a>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a34      	ldr	r2, [pc, #208]	; (8007244 <HAL_DMA_Abort+0x624>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d018      	beq.n	80071aa <HAL_DMA_Abort+0x58a>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a32      	ldr	r2, [pc, #200]	; (8007248 <HAL_DMA_Abort+0x628>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d013      	beq.n	80071aa <HAL_DMA_Abort+0x58a>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a31      	ldr	r2, [pc, #196]	; (800724c <HAL_DMA_Abort+0x62c>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d00e      	beq.n	80071aa <HAL_DMA_Abort+0x58a>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a2f      	ldr	r2, [pc, #188]	; (8007250 <HAL_DMA_Abort+0x630>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d009      	beq.n	80071aa <HAL_DMA_Abort+0x58a>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a2e      	ldr	r2, [pc, #184]	; (8007254 <HAL_DMA_Abort+0x634>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d004      	beq.n	80071aa <HAL_DMA_Abort+0x58a>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a2c      	ldr	r2, [pc, #176]	; (8007258 <HAL_DMA_Abort+0x638>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d101      	bne.n	80071ae <HAL_DMA_Abort+0x58e>
 80071aa:	2301      	movs	r3, #1
 80071ac:	e000      	b.n	80071b0 <HAL_DMA_Abort+0x590>
 80071ae:	2300      	movs	r3, #0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d015      	beq.n	80071e0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80071bc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00c      	beq.n	80071e0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071d4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80071de:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	40020010 	.word	0x40020010
 8007200:	40020028 	.word	0x40020028
 8007204:	40020040 	.word	0x40020040
 8007208:	40020058 	.word	0x40020058
 800720c:	40020070 	.word	0x40020070
 8007210:	40020088 	.word	0x40020088
 8007214:	400200a0 	.word	0x400200a0
 8007218:	400200b8 	.word	0x400200b8
 800721c:	40020410 	.word	0x40020410
 8007220:	40020428 	.word	0x40020428
 8007224:	40020440 	.word	0x40020440
 8007228:	40020458 	.word	0x40020458
 800722c:	40020470 	.word	0x40020470
 8007230:	40020488 	.word	0x40020488
 8007234:	400204a0 	.word	0x400204a0
 8007238:	400204b8 	.word	0x400204b8
 800723c:	58025408 	.word	0x58025408
 8007240:	5802541c 	.word	0x5802541c
 8007244:	58025430 	.word	0x58025430
 8007248:	58025444 	.word	0x58025444
 800724c:	58025458 	.word	0x58025458
 8007250:	5802546c 	.word	0x5802546c
 8007254:	58025480 	.word	0x58025480
 8007258:	58025494 	.word	0x58025494

0800725c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e237      	b.n	80076de <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b02      	cmp	r3, #2
 8007278:	d004      	beq.n	8007284 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2280      	movs	r2, #128	; 0x80
 800727e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e22c      	b.n	80076de <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a5c      	ldr	r2, [pc, #368]	; (80073fc <HAL_DMA_Abort_IT+0x1a0>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d04a      	beq.n	8007324 <HAL_DMA_Abort_IT+0xc8>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a5b      	ldr	r2, [pc, #364]	; (8007400 <HAL_DMA_Abort_IT+0x1a4>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d045      	beq.n	8007324 <HAL_DMA_Abort_IT+0xc8>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a59      	ldr	r2, [pc, #356]	; (8007404 <HAL_DMA_Abort_IT+0x1a8>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d040      	beq.n	8007324 <HAL_DMA_Abort_IT+0xc8>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a58      	ldr	r2, [pc, #352]	; (8007408 <HAL_DMA_Abort_IT+0x1ac>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d03b      	beq.n	8007324 <HAL_DMA_Abort_IT+0xc8>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a56      	ldr	r2, [pc, #344]	; (800740c <HAL_DMA_Abort_IT+0x1b0>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d036      	beq.n	8007324 <HAL_DMA_Abort_IT+0xc8>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a55      	ldr	r2, [pc, #340]	; (8007410 <HAL_DMA_Abort_IT+0x1b4>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d031      	beq.n	8007324 <HAL_DMA_Abort_IT+0xc8>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a53      	ldr	r2, [pc, #332]	; (8007414 <HAL_DMA_Abort_IT+0x1b8>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d02c      	beq.n	8007324 <HAL_DMA_Abort_IT+0xc8>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a52      	ldr	r2, [pc, #328]	; (8007418 <HAL_DMA_Abort_IT+0x1bc>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d027      	beq.n	8007324 <HAL_DMA_Abort_IT+0xc8>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a50      	ldr	r2, [pc, #320]	; (800741c <HAL_DMA_Abort_IT+0x1c0>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d022      	beq.n	8007324 <HAL_DMA_Abort_IT+0xc8>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a4f      	ldr	r2, [pc, #316]	; (8007420 <HAL_DMA_Abort_IT+0x1c4>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d01d      	beq.n	8007324 <HAL_DMA_Abort_IT+0xc8>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a4d      	ldr	r2, [pc, #308]	; (8007424 <HAL_DMA_Abort_IT+0x1c8>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d018      	beq.n	8007324 <HAL_DMA_Abort_IT+0xc8>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a4c      	ldr	r2, [pc, #304]	; (8007428 <HAL_DMA_Abort_IT+0x1cc>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d013      	beq.n	8007324 <HAL_DMA_Abort_IT+0xc8>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a4a      	ldr	r2, [pc, #296]	; (800742c <HAL_DMA_Abort_IT+0x1d0>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d00e      	beq.n	8007324 <HAL_DMA_Abort_IT+0xc8>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a49      	ldr	r2, [pc, #292]	; (8007430 <HAL_DMA_Abort_IT+0x1d4>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d009      	beq.n	8007324 <HAL_DMA_Abort_IT+0xc8>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a47      	ldr	r2, [pc, #284]	; (8007434 <HAL_DMA_Abort_IT+0x1d8>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d004      	beq.n	8007324 <HAL_DMA_Abort_IT+0xc8>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a46      	ldr	r2, [pc, #280]	; (8007438 <HAL_DMA_Abort_IT+0x1dc>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d101      	bne.n	8007328 <HAL_DMA_Abort_IT+0xcc>
 8007324:	2301      	movs	r3, #1
 8007326:	e000      	b.n	800732a <HAL_DMA_Abort_IT+0xce>
 8007328:	2300      	movs	r3, #0
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 8086 	beq.w	800743c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2204      	movs	r2, #4
 8007334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a2f      	ldr	r2, [pc, #188]	; (80073fc <HAL_DMA_Abort_IT+0x1a0>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d04a      	beq.n	80073d8 <HAL_DMA_Abort_IT+0x17c>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a2e      	ldr	r2, [pc, #184]	; (8007400 <HAL_DMA_Abort_IT+0x1a4>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d045      	beq.n	80073d8 <HAL_DMA_Abort_IT+0x17c>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a2c      	ldr	r2, [pc, #176]	; (8007404 <HAL_DMA_Abort_IT+0x1a8>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d040      	beq.n	80073d8 <HAL_DMA_Abort_IT+0x17c>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a2b      	ldr	r2, [pc, #172]	; (8007408 <HAL_DMA_Abort_IT+0x1ac>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d03b      	beq.n	80073d8 <HAL_DMA_Abort_IT+0x17c>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a29      	ldr	r2, [pc, #164]	; (800740c <HAL_DMA_Abort_IT+0x1b0>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d036      	beq.n	80073d8 <HAL_DMA_Abort_IT+0x17c>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a28      	ldr	r2, [pc, #160]	; (8007410 <HAL_DMA_Abort_IT+0x1b4>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d031      	beq.n	80073d8 <HAL_DMA_Abort_IT+0x17c>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a26      	ldr	r2, [pc, #152]	; (8007414 <HAL_DMA_Abort_IT+0x1b8>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d02c      	beq.n	80073d8 <HAL_DMA_Abort_IT+0x17c>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a25      	ldr	r2, [pc, #148]	; (8007418 <HAL_DMA_Abort_IT+0x1bc>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d027      	beq.n	80073d8 <HAL_DMA_Abort_IT+0x17c>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a23      	ldr	r2, [pc, #140]	; (800741c <HAL_DMA_Abort_IT+0x1c0>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d022      	beq.n	80073d8 <HAL_DMA_Abort_IT+0x17c>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a22      	ldr	r2, [pc, #136]	; (8007420 <HAL_DMA_Abort_IT+0x1c4>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d01d      	beq.n	80073d8 <HAL_DMA_Abort_IT+0x17c>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a20      	ldr	r2, [pc, #128]	; (8007424 <HAL_DMA_Abort_IT+0x1c8>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d018      	beq.n	80073d8 <HAL_DMA_Abort_IT+0x17c>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a1f      	ldr	r2, [pc, #124]	; (8007428 <HAL_DMA_Abort_IT+0x1cc>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d013      	beq.n	80073d8 <HAL_DMA_Abort_IT+0x17c>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a1d      	ldr	r2, [pc, #116]	; (800742c <HAL_DMA_Abort_IT+0x1d0>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d00e      	beq.n	80073d8 <HAL_DMA_Abort_IT+0x17c>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a1c      	ldr	r2, [pc, #112]	; (8007430 <HAL_DMA_Abort_IT+0x1d4>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d009      	beq.n	80073d8 <HAL_DMA_Abort_IT+0x17c>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a1a      	ldr	r2, [pc, #104]	; (8007434 <HAL_DMA_Abort_IT+0x1d8>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d004      	beq.n	80073d8 <HAL_DMA_Abort_IT+0x17c>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a19      	ldr	r2, [pc, #100]	; (8007438 <HAL_DMA_Abort_IT+0x1dc>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d108      	bne.n	80073ea <HAL_DMA_Abort_IT+0x18e>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f022 0201 	bic.w	r2, r2, #1
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	e178      	b.n	80076dc <HAL_DMA_Abort_IT+0x480>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f022 0201 	bic.w	r2, r2, #1
 80073f8:	601a      	str	r2, [r3, #0]
 80073fa:	e16f      	b.n	80076dc <HAL_DMA_Abort_IT+0x480>
 80073fc:	40020010 	.word	0x40020010
 8007400:	40020028 	.word	0x40020028
 8007404:	40020040 	.word	0x40020040
 8007408:	40020058 	.word	0x40020058
 800740c:	40020070 	.word	0x40020070
 8007410:	40020088 	.word	0x40020088
 8007414:	400200a0 	.word	0x400200a0
 8007418:	400200b8 	.word	0x400200b8
 800741c:	40020410 	.word	0x40020410
 8007420:	40020428 	.word	0x40020428
 8007424:	40020440 	.word	0x40020440
 8007428:	40020458 	.word	0x40020458
 800742c:	40020470 	.word	0x40020470
 8007430:	40020488 	.word	0x40020488
 8007434:	400204a0 	.word	0x400204a0
 8007438:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f022 020e 	bic.w	r2, r2, #14
 800744a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a6c      	ldr	r2, [pc, #432]	; (8007604 <HAL_DMA_Abort_IT+0x3a8>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d04a      	beq.n	80074ec <HAL_DMA_Abort_IT+0x290>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a6b      	ldr	r2, [pc, #428]	; (8007608 <HAL_DMA_Abort_IT+0x3ac>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d045      	beq.n	80074ec <HAL_DMA_Abort_IT+0x290>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a69      	ldr	r2, [pc, #420]	; (800760c <HAL_DMA_Abort_IT+0x3b0>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d040      	beq.n	80074ec <HAL_DMA_Abort_IT+0x290>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a68      	ldr	r2, [pc, #416]	; (8007610 <HAL_DMA_Abort_IT+0x3b4>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d03b      	beq.n	80074ec <HAL_DMA_Abort_IT+0x290>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a66      	ldr	r2, [pc, #408]	; (8007614 <HAL_DMA_Abort_IT+0x3b8>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d036      	beq.n	80074ec <HAL_DMA_Abort_IT+0x290>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a65      	ldr	r2, [pc, #404]	; (8007618 <HAL_DMA_Abort_IT+0x3bc>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d031      	beq.n	80074ec <HAL_DMA_Abort_IT+0x290>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a63      	ldr	r2, [pc, #396]	; (800761c <HAL_DMA_Abort_IT+0x3c0>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d02c      	beq.n	80074ec <HAL_DMA_Abort_IT+0x290>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a62      	ldr	r2, [pc, #392]	; (8007620 <HAL_DMA_Abort_IT+0x3c4>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d027      	beq.n	80074ec <HAL_DMA_Abort_IT+0x290>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a60      	ldr	r2, [pc, #384]	; (8007624 <HAL_DMA_Abort_IT+0x3c8>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d022      	beq.n	80074ec <HAL_DMA_Abort_IT+0x290>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a5f      	ldr	r2, [pc, #380]	; (8007628 <HAL_DMA_Abort_IT+0x3cc>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d01d      	beq.n	80074ec <HAL_DMA_Abort_IT+0x290>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a5d      	ldr	r2, [pc, #372]	; (800762c <HAL_DMA_Abort_IT+0x3d0>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d018      	beq.n	80074ec <HAL_DMA_Abort_IT+0x290>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a5c      	ldr	r2, [pc, #368]	; (8007630 <HAL_DMA_Abort_IT+0x3d4>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d013      	beq.n	80074ec <HAL_DMA_Abort_IT+0x290>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a5a      	ldr	r2, [pc, #360]	; (8007634 <HAL_DMA_Abort_IT+0x3d8>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d00e      	beq.n	80074ec <HAL_DMA_Abort_IT+0x290>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a59      	ldr	r2, [pc, #356]	; (8007638 <HAL_DMA_Abort_IT+0x3dc>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d009      	beq.n	80074ec <HAL_DMA_Abort_IT+0x290>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a57      	ldr	r2, [pc, #348]	; (800763c <HAL_DMA_Abort_IT+0x3e0>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d004      	beq.n	80074ec <HAL_DMA_Abort_IT+0x290>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a56      	ldr	r2, [pc, #344]	; (8007640 <HAL_DMA_Abort_IT+0x3e4>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d108      	bne.n	80074fe <HAL_DMA_Abort_IT+0x2a2>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f022 0201 	bic.w	r2, r2, #1
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	e007      	b.n	800750e <HAL_DMA_Abort_IT+0x2b2>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f022 0201 	bic.w	r2, r2, #1
 800750c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a3c      	ldr	r2, [pc, #240]	; (8007604 <HAL_DMA_Abort_IT+0x3a8>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d072      	beq.n	80075fe <HAL_DMA_Abort_IT+0x3a2>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a3a      	ldr	r2, [pc, #232]	; (8007608 <HAL_DMA_Abort_IT+0x3ac>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d06d      	beq.n	80075fe <HAL_DMA_Abort_IT+0x3a2>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a39      	ldr	r2, [pc, #228]	; (800760c <HAL_DMA_Abort_IT+0x3b0>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d068      	beq.n	80075fe <HAL_DMA_Abort_IT+0x3a2>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a37      	ldr	r2, [pc, #220]	; (8007610 <HAL_DMA_Abort_IT+0x3b4>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d063      	beq.n	80075fe <HAL_DMA_Abort_IT+0x3a2>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a36      	ldr	r2, [pc, #216]	; (8007614 <HAL_DMA_Abort_IT+0x3b8>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d05e      	beq.n	80075fe <HAL_DMA_Abort_IT+0x3a2>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a34      	ldr	r2, [pc, #208]	; (8007618 <HAL_DMA_Abort_IT+0x3bc>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d059      	beq.n	80075fe <HAL_DMA_Abort_IT+0x3a2>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a33      	ldr	r2, [pc, #204]	; (800761c <HAL_DMA_Abort_IT+0x3c0>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d054      	beq.n	80075fe <HAL_DMA_Abort_IT+0x3a2>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a31      	ldr	r2, [pc, #196]	; (8007620 <HAL_DMA_Abort_IT+0x3c4>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d04f      	beq.n	80075fe <HAL_DMA_Abort_IT+0x3a2>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a30      	ldr	r2, [pc, #192]	; (8007624 <HAL_DMA_Abort_IT+0x3c8>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d04a      	beq.n	80075fe <HAL_DMA_Abort_IT+0x3a2>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a2e      	ldr	r2, [pc, #184]	; (8007628 <HAL_DMA_Abort_IT+0x3cc>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d045      	beq.n	80075fe <HAL_DMA_Abort_IT+0x3a2>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a2d      	ldr	r2, [pc, #180]	; (800762c <HAL_DMA_Abort_IT+0x3d0>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d040      	beq.n	80075fe <HAL_DMA_Abort_IT+0x3a2>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a2b      	ldr	r2, [pc, #172]	; (8007630 <HAL_DMA_Abort_IT+0x3d4>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d03b      	beq.n	80075fe <HAL_DMA_Abort_IT+0x3a2>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a2a      	ldr	r2, [pc, #168]	; (8007634 <HAL_DMA_Abort_IT+0x3d8>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d036      	beq.n	80075fe <HAL_DMA_Abort_IT+0x3a2>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a28      	ldr	r2, [pc, #160]	; (8007638 <HAL_DMA_Abort_IT+0x3dc>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d031      	beq.n	80075fe <HAL_DMA_Abort_IT+0x3a2>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a27      	ldr	r2, [pc, #156]	; (800763c <HAL_DMA_Abort_IT+0x3e0>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d02c      	beq.n	80075fe <HAL_DMA_Abort_IT+0x3a2>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a25      	ldr	r2, [pc, #148]	; (8007640 <HAL_DMA_Abort_IT+0x3e4>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d027      	beq.n	80075fe <HAL_DMA_Abort_IT+0x3a2>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a24      	ldr	r2, [pc, #144]	; (8007644 <HAL_DMA_Abort_IT+0x3e8>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d022      	beq.n	80075fe <HAL_DMA_Abort_IT+0x3a2>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a22      	ldr	r2, [pc, #136]	; (8007648 <HAL_DMA_Abort_IT+0x3ec>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d01d      	beq.n	80075fe <HAL_DMA_Abort_IT+0x3a2>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a21      	ldr	r2, [pc, #132]	; (800764c <HAL_DMA_Abort_IT+0x3f0>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d018      	beq.n	80075fe <HAL_DMA_Abort_IT+0x3a2>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a1f      	ldr	r2, [pc, #124]	; (8007650 <HAL_DMA_Abort_IT+0x3f4>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d013      	beq.n	80075fe <HAL_DMA_Abort_IT+0x3a2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a1e      	ldr	r2, [pc, #120]	; (8007654 <HAL_DMA_Abort_IT+0x3f8>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d00e      	beq.n	80075fe <HAL_DMA_Abort_IT+0x3a2>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a1c      	ldr	r2, [pc, #112]	; (8007658 <HAL_DMA_Abort_IT+0x3fc>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d009      	beq.n	80075fe <HAL_DMA_Abort_IT+0x3a2>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a1b      	ldr	r2, [pc, #108]	; (800765c <HAL_DMA_Abort_IT+0x400>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d004      	beq.n	80075fe <HAL_DMA_Abort_IT+0x3a2>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a19      	ldr	r2, [pc, #100]	; (8007660 <HAL_DMA_Abort_IT+0x404>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d132      	bne.n	8007664 <HAL_DMA_Abort_IT+0x408>
 80075fe:	2301      	movs	r3, #1
 8007600:	e031      	b.n	8007666 <HAL_DMA_Abort_IT+0x40a>
 8007602:	bf00      	nop
 8007604:	40020010 	.word	0x40020010
 8007608:	40020028 	.word	0x40020028
 800760c:	40020040 	.word	0x40020040
 8007610:	40020058 	.word	0x40020058
 8007614:	40020070 	.word	0x40020070
 8007618:	40020088 	.word	0x40020088
 800761c:	400200a0 	.word	0x400200a0
 8007620:	400200b8 	.word	0x400200b8
 8007624:	40020410 	.word	0x40020410
 8007628:	40020428 	.word	0x40020428
 800762c:	40020440 	.word	0x40020440
 8007630:	40020458 	.word	0x40020458
 8007634:	40020470 	.word	0x40020470
 8007638:	40020488 	.word	0x40020488
 800763c:	400204a0 	.word	0x400204a0
 8007640:	400204b8 	.word	0x400204b8
 8007644:	58025408 	.word	0x58025408
 8007648:	5802541c 	.word	0x5802541c
 800764c:	58025430 	.word	0x58025430
 8007650:	58025444 	.word	0x58025444
 8007654:	58025458 	.word	0x58025458
 8007658:	5802546c 	.word	0x5802546c
 800765c:	58025480 	.word	0x58025480
 8007660:	58025494 	.word	0x58025494
 8007664:	2300      	movs	r3, #0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d028      	beq.n	80076bc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007674:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007678:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800767e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007684:	f003 031f 	and.w	r3, r3, #31
 8007688:	2201      	movs	r2, #1
 800768a:	409a      	lsls	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007698:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00c      	beq.n	80076bc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076b0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80076ba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d003      	beq.n	80076dc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop

080076e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b08a      	sub	sp, #40	; 0x28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80076f0:	2300      	movs	r3, #0
 80076f2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80076f4:	4b67      	ldr	r3, [pc, #412]	; (8007894 <HAL_DMA_IRQHandler+0x1ac>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a67      	ldr	r2, [pc, #412]	; (8007898 <HAL_DMA_IRQHandler+0x1b0>)
 80076fa:	fba2 2303 	umull	r2, r3, r2, r3
 80076fe:	0a9b      	lsrs	r3, r3, #10
 8007700:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007706:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800770c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800770e:	6a3b      	ldr	r3, [r7, #32]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a5f      	ldr	r2, [pc, #380]	; (800789c <HAL_DMA_IRQHandler+0x1b4>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d04a      	beq.n	80077ba <HAL_DMA_IRQHandler+0xd2>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a5d      	ldr	r2, [pc, #372]	; (80078a0 <HAL_DMA_IRQHandler+0x1b8>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d045      	beq.n	80077ba <HAL_DMA_IRQHandler+0xd2>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a5c      	ldr	r2, [pc, #368]	; (80078a4 <HAL_DMA_IRQHandler+0x1bc>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d040      	beq.n	80077ba <HAL_DMA_IRQHandler+0xd2>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a5a      	ldr	r2, [pc, #360]	; (80078a8 <HAL_DMA_IRQHandler+0x1c0>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d03b      	beq.n	80077ba <HAL_DMA_IRQHandler+0xd2>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a59      	ldr	r2, [pc, #356]	; (80078ac <HAL_DMA_IRQHandler+0x1c4>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d036      	beq.n	80077ba <HAL_DMA_IRQHandler+0xd2>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a57      	ldr	r2, [pc, #348]	; (80078b0 <HAL_DMA_IRQHandler+0x1c8>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d031      	beq.n	80077ba <HAL_DMA_IRQHandler+0xd2>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a56      	ldr	r2, [pc, #344]	; (80078b4 <HAL_DMA_IRQHandler+0x1cc>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d02c      	beq.n	80077ba <HAL_DMA_IRQHandler+0xd2>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a54      	ldr	r2, [pc, #336]	; (80078b8 <HAL_DMA_IRQHandler+0x1d0>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d027      	beq.n	80077ba <HAL_DMA_IRQHandler+0xd2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a53      	ldr	r2, [pc, #332]	; (80078bc <HAL_DMA_IRQHandler+0x1d4>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d022      	beq.n	80077ba <HAL_DMA_IRQHandler+0xd2>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a51      	ldr	r2, [pc, #324]	; (80078c0 <HAL_DMA_IRQHandler+0x1d8>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d01d      	beq.n	80077ba <HAL_DMA_IRQHandler+0xd2>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a50      	ldr	r2, [pc, #320]	; (80078c4 <HAL_DMA_IRQHandler+0x1dc>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d018      	beq.n	80077ba <HAL_DMA_IRQHandler+0xd2>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a4e      	ldr	r2, [pc, #312]	; (80078c8 <HAL_DMA_IRQHandler+0x1e0>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d013      	beq.n	80077ba <HAL_DMA_IRQHandler+0xd2>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a4d      	ldr	r2, [pc, #308]	; (80078cc <HAL_DMA_IRQHandler+0x1e4>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d00e      	beq.n	80077ba <HAL_DMA_IRQHandler+0xd2>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a4b      	ldr	r2, [pc, #300]	; (80078d0 <HAL_DMA_IRQHandler+0x1e8>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d009      	beq.n	80077ba <HAL_DMA_IRQHandler+0xd2>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a4a      	ldr	r2, [pc, #296]	; (80078d4 <HAL_DMA_IRQHandler+0x1ec>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d004      	beq.n	80077ba <HAL_DMA_IRQHandler+0xd2>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a48      	ldr	r2, [pc, #288]	; (80078d8 <HAL_DMA_IRQHandler+0x1f0>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d101      	bne.n	80077be <HAL_DMA_IRQHandler+0xd6>
 80077ba:	2301      	movs	r3, #1
 80077bc:	e000      	b.n	80077c0 <HAL_DMA_IRQHandler+0xd8>
 80077be:	2300      	movs	r3, #0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f000 842b 	beq.w	800801c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077ca:	f003 031f 	and.w	r3, r3, #31
 80077ce:	2208      	movs	r2, #8
 80077d0:	409a      	lsls	r2, r3
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	4013      	ands	r3, r2
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f000 80a2 	beq.w	8007920 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a2e      	ldr	r2, [pc, #184]	; (800789c <HAL_DMA_IRQHandler+0x1b4>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d04a      	beq.n	800787c <HAL_DMA_IRQHandler+0x194>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a2d      	ldr	r2, [pc, #180]	; (80078a0 <HAL_DMA_IRQHandler+0x1b8>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d045      	beq.n	800787c <HAL_DMA_IRQHandler+0x194>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a2b      	ldr	r2, [pc, #172]	; (80078a4 <HAL_DMA_IRQHandler+0x1bc>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d040      	beq.n	800787c <HAL_DMA_IRQHandler+0x194>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a2a      	ldr	r2, [pc, #168]	; (80078a8 <HAL_DMA_IRQHandler+0x1c0>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d03b      	beq.n	800787c <HAL_DMA_IRQHandler+0x194>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a28      	ldr	r2, [pc, #160]	; (80078ac <HAL_DMA_IRQHandler+0x1c4>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d036      	beq.n	800787c <HAL_DMA_IRQHandler+0x194>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a27      	ldr	r2, [pc, #156]	; (80078b0 <HAL_DMA_IRQHandler+0x1c8>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d031      	beq.n	800787c <HAL_DMA_IRQHandler+0x194>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a25      	ldr	r2, [pc, #148]	; (80078b4 <HAL_DMA_IRQHandler+0x1cc>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d02c      	beq.n	800787c <HAL_DMA_IRQHandler+0x194>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a24      	ldr	r2, [pc, #144]	; (80078b8 <HAL_DMA_IRQHandler+0x1d0>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d027      	beq.n	800787c <HAL_DMA_IRQHandler+0x194>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a22      	ldr	r2, [pc, #136]	; (80078bc <HAL_DMA_IRQHandler+0x1d4>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d022      	beq.n	800787c <HAL_DMA_IRQHandler+0x194>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a21      	ldr	r2, [pc, #132]	; (80078c0 <HAL_DMA_IRQHandler+0x1d8>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d01d      	beq.n	800787c <HAL_DMA_IRQHandler+0x194>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a1f      	ldr	r2, [pc, #124]	; (80078c4 <HAL_DMA_IRQHandler+0x1dc>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d018      	beq.n	800787c <HAL_DMA_IRQHandler+0x194>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a1e      	ldr	r2, [pc, #120]	; (80078c8 <HAL_DMA_IRQHandler+0x1e0>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d013      	beq.n	800787c <HAL_DMA_IRQHandler+0x194>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a1c      	ldr	r2, [pc, #112]	; (80078cc <HAL_DMA_IRQHandler+0x1e4>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d00e      	beq.n	800787c <HAL_DMA_IRQHandler+0x194>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a1b      	ldr	r2, [pc, #108]	; (80078d0 <HAL_DMA_IRQHandler+0x1e8>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d009      	beq.n	800787c <HAL_DMA_IRQHandler+0x194>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a19      	ldr	r2, [pc, #100]	; (80078d4 <HAL_DMA_IRQHandler+0x1ec>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d004      	beq.n	800787c <HAL_DMA_IRQHandler+0x194>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a18      	ldr	r2, [pc, #96]	; (80078d8 <HAL_DMA_IRQHandler+0x1f0>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d12f      	bne.n	80078dc <HAL_DMA_IRQHandler+0x1f4>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 0304 	and.w	r3, r3, #4
 8007886:	2b00      	cmp	r3, #0
 8007888:	bf14      	ite	ne
 800788a:	2301      	movne	r3, #1
 800788c:	2300      	moveq	r3, #0
 800788e:	b2db      	uxtb	r3, r3
 8007890:	e02e      	b.n	80078f0 <HAL_DMA_IRQHandler+0x208>
 8007892:	bf00      	nop
 8007894:	24000084 	.word	0x24000084
 8007898:	1b4e81b5 	.word	0x1b4e81b5
 800789c:	40020010 	.word	0x40020010
 80078a0:	40020028 	.word	0x40020028
 80078a4:	40020040 	.word	0x40020040
 80078a8:	40020058 	.word	0x40020058
 80078ac:	40020070 	.word	0x40020070
 80078b0:	40020088 	.word	0x40020088
 80078b4:	400200a0 	.word	0x400200a0
 80078b8:	400200b8 	.word	0x400200b8
 80078bc:	40020410 	.word	0x40020410
 80078c0:	40020428 	.word	0x40020428
 80078c4:	40020440 	.word	0x40020440
 80078c8:	40020458 	.word	0x40020458
 80078cc:	40020470 	.word	0x40020470
 80078d0:	40020488 	.word	0x40020488
 80078d4:	400204a0 	.word	0x400204a0
 80078d8:	400204b8 	.word	0x400204b8
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0308 	and.w	r3, r3, #8
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	bf14      	ite	ne
 80078ea:	2301      	movne	r3, #1
 80078ec:	2300      	moveq	r3, #0
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d015      	beq.n	8007920 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f022 0204 	bic.w	r2, r2, #4
 8007902:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007908:	f003 031f 	and.w	r3, r3, #31
 800790c:	2208      	movs	r2, #8
 800790e:	409a      	lsls	r2, r3
 8007910:	6a3b      	ldr	r3, [r7, #32]
 8007912:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007918:	f043 0201 	orr.w	r2, r3, #1
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007924:	f003 031f 	and.w	r3, r3, #31
 8007928:	69ba      	ldr	r2, [r7, #24]
 800792a:	fa22 f303 	lsr.w	r3, r2, r3
 800792e:	f003 0301 	and.w	r3, r3, #1
 8007932:	2b00      	cmp	r3, #0
 8007934:	d06e      	beq.n	8007a14 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a69      	ldr	r2, [pc, #420]	; (8007ae0 <HAL_DMA_IRQHandler+0x3f8>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d04a      	beq.n	80079d6 <HAL_DMA_IRQHandler+0x2ee>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a67      	ldr	r2, [pc, #412]	; (8007ae4 <HAL_DMA_IRQHandler+0x3fc>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d045      	beq.n	80079d6 <HAL_DMA_IRQHandler+0x2ee>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a66      	ldr	r2, [pc, #408]	; (8007ae8 <HAL_DMA_IRQHandler+0x400>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d040      	beq.n	80079d6 <HAL_DMA_IRQHandler+0x2ee>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a64      	ldr	r2, [pc, #400]	; (8007aec <HAL_DMA_IRQHandler+0x404>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d03b      	beq.n	80079d6 <HAL_DMA_IRQHandler+0x2ee>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a63      	ldr	r2, [pc, #396]	; (8007af0 <HAL_DMA_IRQHandler+0x408>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d036      	beq.n	80079d6 <HAL_DMA_IRQHandler+0x2ee>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a61      	ldr	r2, [pc, #388]	; (8007af4 <HAL_DMA_IRQHandler+0x40c>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d031      	beq.n	80079d6 <HAL_DMA_IRQHandler+0x2ee>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a60      	ldr	r2, [pc, #384]	; (8007af8 <HAL_DMA_IRQHandler+0x410>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d02c      	beq.n	80079d6 <HAL_DMA_IRQHandler+0x2ee>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a5e      	ldr	r2, [pc, #376]	; (8007afc <HAL_DMA_IRQHandler+0x414>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d027      	beq.n	80079d6 <HAL_DMA_IRQHandler+0x2ee>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a5d      	ldr	r2, [pc, #372]	; (8007b00 <HAL_DMA_IRQHandler+0x418>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d022      	beq.n	80079d6 <HAL_DMA_IRQHandler+0x2ee>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a5b      	ldr	r2, [pc, #364]	; (8007b04 <HAL_DMA_IRQHandler+0x41c>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d01d      	beq.n	80079d6 <HAL_DMA_IRQHandler+0x2ee>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a5a      	ldr	r2, [pc, #360]	; (8007b08 <HAL_DMA_IRQHandler+0x420>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d018      	beq.n	80079d6 <HAL_DMA_IRQHandler+0x2ee>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a58      	ldr	r2, [pc, #352]	; (8007b0c <HAL_DMA_IRQHandler+0x424>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d013      	beq.n	80079d6 <HAL_DMA_IRQHandler+0x2ee>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a57      	ldr	r2, [pc, #348]	; (8007b10 <HAL_DMA_IRQHandler+0x428>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d00e      	beq.n	80079d6 <HAL_DMA_IRQHandler+0x2ee>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a55      	ldr	r2, [pc, #340]	; (8007b14 <HAL_DMA_IRQHandler+0x42c>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d009      	beq.n	80079d6 <HAL_DMA_IRQHandler+0x2ee>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a54      	ldr	r2, [pc, #336]	; (8007b18 <HAL_DMA_IRQHandler+0x430>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d004      	beq.n	80079d6 <HAL_DMA_IRQHandler+0x2ee>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a52      	ldr	r2, [pc, #328]	; (8007b1c <HAL_DMA_IRQHandler+0x434>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d10a      	bne.n	80079ec <HAL_DMA_IRQHandler+0x304>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	695b      	ldr	r3, [r3, #20]
 80079dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	bf14      	ite	ne
 80079e4:	2301      	movne	r3, #1
 80079e6:	2300      	moveq	r3, #0
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	e003      	b.n	80079f4 <HAL_DMA_IRQHandler+0x30c>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2300      	movs	r3, #0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00d      	beq.n	8007a14 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079fc:	f003 031f 	and.w	r3, r3, #31
 8007a00:	2201      	movs	r2, #1
 8007a02:	409a      	lsls	r2, r3
 8007a04:	6a3b      	ldr	r3, [r7, #32]
 8007a06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a0c:	f043 0202 	orr.w	r2, r3, #2
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a18:	f003 031f 	and.w	r3, r3, #31
 8007a1c:	2204      	movs	r2, #4
 8007a1e:	409a      	lsls	r2, r3
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	4013      	ands	r3, r2
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 808f 	beq.w	8007b48 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a2c      	ldr	r2, [pc, #176]	; (8007ae0 <HAL_DMA_IRQHandler+0x3f8>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d04a      	beq.n	8007aca <HAL_DMA_IRQHandler+0x3e2>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a2a      	ldr	r2, [pc, #168]	; (8007ae4 <HAL_DMA_IRQHandler+0x3fc>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d045      	beq.n	8007aca <HAL_DMA_IRQHandler+0x3e2>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a29      	ldr	r2, [pc, #164]	; (8007ae8 <HAL_DMA_IRQHandler+0x400>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d040      	beq.n	8007aca <HAL_DMA_IRQHandler+0x3e2>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a27      	ldr	r2, [pc, #156]	; (8007aec <HAL_DMA_IRQHandler+0x404>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d03b      	beq.n	8007aca <HAL_DMA_IRQHandler+0x3e2>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a26      	ldr	r2, [pc, #152]	; (8007af0 <HAL_DMA_IRQHandler+0x408>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d036      	beq.n	8007aca <HAL_DMA_IRQHandler+0x3e2>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a24      	ldr	r2, [pc, #144]	; (8007af4 <HAL_DMA_IRQHandler+0x40c>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d031      	beq.n	8007aca <HAL_DMA_IRQHandler+0x3e2>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a23      	ldr	r2, [pc, #140]	; (8007af8 <HAL_DMA_IRQHandler+0x410>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d02c      	beq.n	8007aca <HAL_DMA_IRQHandler+0x3e2>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a21      	ldr	r2, [pc, #132]	; (8007afc <HAL_DMA_IRQHandler+0x414>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d027      	beq.n	8007aca <HAL_DMA_IRQHandler+0x3e2>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a20      	ldr	r2, [pc, #128]	; (8007b00 <HAL_DMA_IRQHandler+0x418>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d022      	beq.n	8007aca <HAL_DMA_IRQHandler+0x3e2>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a1e      	ldr	r2, [pc, #120]	; (8007b04 <HAL_DMA_IRQHandler+0x41c>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d01d      	beq.n	8007aca <HAL_DMA_IRQHandler+0x3e2>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a1d      	ldr	r2, [pc, #116]	; (8007b08 <HAL_DMA_IRQHandler+0x420>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d018      	beq.n	8007aca <HAL_DMA_IRQHandler+0x3e2>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a1b      	ldr	r2, [pc, #108]	; (8007b0c <HAL_DMA_IRQHandler+0x424>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d013      	beq.n	8007aca <HAL_DMA_IRQHandler+0x3e2>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a1a      	ldr	r2, [pc, #104]	; (8007b10 <HAL_DMA_IRQHandler+0x428>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d00e      	beq.n	8007aca <HAL_DMA_IRQHandler+0x3e2>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a18      	ldr	r2, [pc, #96]	; (8007b14 <HAL_DMA_IRQHandler+0x42c>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d009      	beq.n	8007aca <HAL_DMA_IRQHandler+0x3e2>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a17      	ldr	r2, [pc, #92]	; (8007b18 <HAL_DMA_IRQHandler+0x430>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d004      	beq.n	8007aca <HAL_DMA_IRQHandler+0x3e2>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a15      	ldr	r2, [pc, #84]	; (8007b1c <HAL_DMA_IRQHandler+0x434>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d12a      	bne.n	8007b20 <HAL_DMA_IRQHandler+0x438>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	bf14      	ite	ne
 8007ad8:	2301      	movne	r3, #1
 8007ada:	2300      	moveq	r3, #0
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	e023      	b.n	8007b28 <HAL_DMA_IRQHandler+0x440>
 8007ae0:	40020010 	.word	0x40020010
 8007ae4:	40020028 	.word	0x40020028
 8007ae8:	40020040 	.word	0x40020040
 8007aec:	40020058 	.word	0x40020058
 8007af0:	40020070 	.word	0x40020070
 8007af4:	40020088 	.word	0x40020088
 8007af8:	400200a0 	.word	0x400200a0
 8007afc:	400200b8 	.word	0x400200b8
 8007b00:	40020410 	.word	0x40020410
 8007b04:	40020428 	.word	0x40020428
 8007b08:	40020440 	.word	0x40020440
 8007b0c:	40020458 	.word	0x40020458
 8007b10:	40020470 	.word	0x40020470
 8007b14:	40020488 	.word	0x40020488
 8007b18:	400204a0 	.word	0x400204a0
 8007b1c:	400204b8 	.word	0x400204b8
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2300      	movs	r3, #0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00d      	beq.n	8007b48 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b30:	f003 031f 	and.w	r3, r3, #31
 8007b34:	2204      	movs	r2, #4
 8007b36:	409a      	lsls	r2, r3
 8007b38:	6a3b      	ldr	r3, [r7, #32]
 8007b3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b40:	f043 0204 	orr.w	r2, r3, #4
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b4c:	f003 031f 	and.w	r3, r3, #31
 8007b50:	2210      	movs	r2, #16
 8007b52:	409a      	lsls	r2, r3
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	4013      	ands	r3, r2
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 80a6 	beq.w	8007caa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a85      	ldr	r2, [pc, #532]	; (8007d78 <HAL_DMA_IRQHandler+0x690>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d04a      	beq.n	8007bfe <HAL_DMA_IRQHandler+0x516>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a83      	ldr	r2, [pc, #524]	; (8007d7c <HAL_DMA_IRQHandler+0x694>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d045      	beq.n	8007bfe <HAL_DMA_IRQHandler+0x516>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a82      	ldr	r2, [pc, #520]	; (8007d80 <HAL_DMA_IRQHandler+0x698>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d040      	beq.n	8007bfe <HAL_DMA_IRQHandler+0x516>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a80      	ldr	r2, [pc, #512]	; (8007d84 <HAL_DMA_IRQHandler+0x69c>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d03b      	beq.n	8007bfe <HAL_DMA_IRQHandler+0x516>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a7f      	ldr	r2, [pc, #508]	; (8007d88 <HAL_DMA_IRQHandler+0x6a0>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d036      	beq.n	8007bfe <HAL_DMA_IRQHandler+0x516>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a7d      	ldr	r2, [pc, #500]	; (8007d8c <HAL_DMA_IRQHandler+0x6a4>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d031      	beq.n	8007bfe <HAL_DMA_IRQHandler+0x516>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a7c      	ldr	r2, [pc, #496]	; (8007d90 <HAL_DMA_IRQHandler+0x6a8>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d02c      	beq.n	8007bfe <HAL_DMA_IRQHandler+0x516>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a7a      	ldr	r2, [pc, #488]	; (8007d94 <HAL_DMA_IRQHandler+0x6ac>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d027      	beq.n	8007bfe <HAL_DMA_IRQHandler+0x516>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a79      	ldr	r2, [pc, #484]	; (8007d98 <HAL_DMA_IRQHandler+0x6b0>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d022      	beq.n	8007bfe <HAL_DMA_IRQHandler+0x516>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a77      	ldr	r2, [pc, #476]	; (8007d9c <HAL_DMA_IRQHandler+0x6b4>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d01d      	beq.n	8007bfe <HAL_DMA_IRQHandler+0x516>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a76      	ldr	r2, [pc, #472]	; (8007da0 <HAL_DMA_IRQHandler+0x6b8>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d018      	beq.n	8007bfe <HAL_DMA_IRQHandler+0x516>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a74      	ldr	r2, [pc, #464]	; (8007da4 <HAL_DMA_IRQHandler+0x6bc>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d013      	beq.n	8007bfe <HAL_DMA_IRQHandler+0x516>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a73      	ldr	r2, [pc, #460]	; (8007da8 <HAL_DMA_IRQHandler+0x6c0>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d00e      	beq.n	8007bfe <HAL_DMA_IRQHandler+0x516>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a71      	ldr	r2, [pc, #452]	; (8007dac <HAL_DMA_IRQHandler+0x6c4>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d009      	beq.n	8007bfe <HAL_DMA_IRQHandler+0x516>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a70      	ldr	r2, [pc, #448]	; (8007db0 <HAL_DMA_IRQHandler+0x6c8>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d004      	beq.n	8007bfe <HAL_DMA_IRQHandler+0x516>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a6e      	ldr	r2, [pc, #440]	; (8007db4 <HAL_DMA_IRQHandler+0x6cc>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d10a      	bne.n	8007c14 <HAL_DMA_IRQHandler+0x52c>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0308 	and.w	r3, r3, #8
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	bf14      	ite	ne
 8007c0c:	2301      	movne	r3, #1
 8007c0e:	2300      	moveq	r3, #0
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	e009      	b.n	8007c28 <HAL_DMA_IRQHandler+0x540>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 0304 	and.w	r3, r3, #4
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	bf14      	ite	ne
 8007c22:	2301      	movne	r3, #1
 8007c24:	2300      	moveq	r3, #0
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d03e      	beq.n	8007caa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c30:	f003 031f 	and.w	r3, r3, #31
 8007c34:	2210      	movs	r2, #16
 8007c36:	409a      	lsls	r2, r3
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d018      	beq.n	8007c7c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d108      	bne.n	8007c6a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d024      	beq.n	8007caa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	4798      	blx	r3
 8007c68:	e01f      	b.n	8007caa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d01b      	beq.n	8007caa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	4798      	blx	r3
 8007c7a:	e016      	b.n	8007caa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d107      	bne.n	8007c9a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f022 0208 	bic.w	r2, r2, #8
 8007c98:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d003      	beq.n	8007caa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cae:	f003 031f 	and.w	r3, r3, #31
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	409a      	lsls	r2, r3
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	4013      	ands	r3, r2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f000 8110 	beq.w	8007ee0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a2c      	ldr	r2, [pc, #176]	; (8007d78 <HAL_DMA_IRQHandler+0x690>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d04a      	beq.n	8007d60 <HAL_DMA_IRQHandler+0x678>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a2b      	ldr	r2, [pc, #172]	; (8007d7c <HAL_DMA_IRQHandler+0x694>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d045      	beq.n	8007d60 <HAL_DMA_IRQHandler+0x678>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a29      	ldr	r2, [pc, #164]	; (8007d80 <HAL_DMA_IRQHandler+0x698>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d040      	beq.n	8007d60 <HAL_DMA_IRQHandler+0x678>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a28      	ldr	r2, [pc, #160]	; (8007d84 <HAL_DMA_IRQHandler+0x69c>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d03b      	beq.n	8007d60 <HAL_DMA_IRQHandler+0x678>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a26      	ldr	r2, [pc, #152]	; (8007d88 <HAL_DMA_IRQHandler+0x6a0>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d036      	beq.n	8007d60 <HAL_DMA_IRQHandler+0x678>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a25      	ldr	r2, [pc, #148]	; (8007d8c <HAL_DMA_IRQHandler+0x6a4>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d031      	beq.n	8007d60 <HAL_DMA_IRQHandler+0x678>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a23      	ldr	r2, [pc, #140]	; (8007d90 <HAL_DMA_IRQHandler+0x6a8>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d02c      	beq.n	8007d60 <HAL_DMA_IRQHandler+0x678>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a22      	ldr	r2, [pc, #136]	; (8007d94 <HAL_DMA_IRQHandler+0x6ac>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d027      	beq.n	8007d60 <HAL_DMA_IRQHandler+0x678>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a20      	ldr	r2, [pc, #128]	; (8007d98 <HAL_DMA_IRQHandler+0x6b0>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d022      	beq.n	8007d60 <HAL_DMA_IRQHandler+0x678>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a1f      	ldr	r2, [pc, #124]	; (8007d9c <HAL_DMA_IRQHandler+0x6b4>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d01d      	beq.n	8007d60 <HAL_DMA_IRQHandler+0x678>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a1d      	ldr	r2, [pc, #116]	; (8007da0 <HAL_DMA_IRQHandler+0x6b8>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d018      	beq.n	8007d60 <HAL_DMA_IRQHandler+0x678>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a1c      	ldr	r2, [pc, #112]	; (8007da4 <HAL_DMA_IRQHandler+0x6bc>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d013      	beq.n	8007d60 <HAL_DMA_IRQHandler+0x678>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a1a      	ldr	r2, [pc, #104]	; (8007da8 <HAL_DMA_IRQHandler+0x6c0>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d00e      	beq.n	8007d60 <HAL_DMA_IRQHandler+0x678>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a19      	ldr	r2, [pc, #100]	; (8007dac <HAL_DMA_IRQHandler+0x6c4>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d009      	beq.n	8007d60 <HAL_DMA_IRQHandler+0x678>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a17      	ldr	r2, [pc, #92]	; (8007db0 <HAL_DMA_IRQHandler+0x6c8>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d004      	beq.n	8007d60 <HAL_DMA_IRQHandler+0x678>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a16      	ldr	r2, [pc, #88]	; (8007db4 <HAL_DMA_IRQHandler+0x6cc>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d12b      	bne.n	8007db8 <HAL_DMA_IRQHandler+0x6d0>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0310 	and.w	r3, r3, #16
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	bf14      	ite	ne
 8007d6e:	2301      	movne	r3, #1
 8007d70:	2300      	moveq	r3, #0
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	e02a      	b.n	8007dcc <HAL_DMA_IRQHandler+0x6e4>
 8007d76:	bf00      	nop
 8007d78:	40020010 	.word	0x40020010
 8007d7c:	40020028 	.word	0x40020028
 8007d80:	40020040 	.word	0x40020040
 8007d84:	40020058 	.word	0x40020058
 8007d88:	40020070 	.word	0x40020070
 8007d8c:	40020088 	.word	0x40020088
 8007d90:	400200a0 	.word	0x400200a0
 8007d94:	400200b8 	.word	0x400200b8
 8007d98:	40020410 	.word	0x40020410
 8007d9c:	40020428 	.word	0x40020428
 8007da0:	40020440 	.word	0x40020440
 8007da4:	40020458 	.word	0x40020458
 8007da8:	40020470 	.word	0x40020470
 8007dac:	40020488 	.word	0x40020488
 8007db0:	400204a0 	.word	0x400204a0
 8007db4:	400204b8 	.word	0x400204b8
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0302 	and.w	r3, r3, #2
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	bf14      	ite	ne
 8007dc6:	2301      	movne	r3, #1
 8007dc8:	2300      	moveq	r3, #0
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f000 8087 	beq.w	8007ee0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dd6:	f003 031f 	and.w	r3, r3, #31
 8007dda:	2220      	movs	r2, #32
 8007ddc:	409a      	lsls	r2, r3
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b04      	cmp	r3, #4
 8007dec:	d139      	bne.n	8007e62 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f022 0216 	bic.w	r2, r2, #22
 8007dfc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	695a      	ldr	r2, [r3, #20]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e0c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d103      	bne.n	8007e1e <HAL_DMA_IRQHandler+0x736>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d007      	beq.n	8007e2e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f022 0208 	bic.w	r2, r2, #8
 8007e2c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e32:	f003 031f 	and.w	r3, r3, #31
 8007e36:	223f      	movs	r2, #63	; 0x3f
 8007e38:	409a      	lsls	r2, r3
 8007e3a:	6a3b      	ldr	r3, [r7, #32]
 8007e3c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f000 834a 	beq.w	80084ec <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	4798      	blx	r3
          }
          return;
 8007e60:	e344      	b.n	80084ec <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d018      	beq.n	8007ea2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d108      	bne.n	8007e90 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d02c      	beq.n	8007ee0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	4798      	blx	r3
 8007e8e:	e027      	b.n	8007ee0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d023      	beq.n	8007ee0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	4798      	blx	r3
 8007ea0:	e01e      	b.n	8007ee0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10f      	bne.n	8007ed0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f022 0210 	bic.w	r2, r2, #16
 8007ebe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d003      	beq.n	8007ee0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 8306 	beq.w	80084f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eee:	f003 0301 	and.w	r3, r3, #1
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f000 8088 	beq.w	8008008 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2204      	movs	r2, #4
 8007efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a7a      	ldr	r2, [pc, #488]	; (80080f0 <HAL_DMA_IRQHandler+0xa08>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d04a      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x8b8>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a79      	ldr	r2, [pc, #484]	; (80080f4 <HAL_DMA_IRQHandler+0xa0c>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d045      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x8b8>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a77      	ldr	r2, [pc, #476]	; (80080f8 <HAL_DMA_IRQHandler+0xa10>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d040      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x8b8>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a76      	ldr	r2, [pc, #472]	; (80080fc <HAL_DMA_IRQHandler+0xa14>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d03b      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x8b8>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a74      	ldr	r2, [pc, #464]	; (8008100 <HAL_DMA_IRQHandler+0xa18>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d036      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x8b8>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a73      	ldr	r2, [pc, #460]	; (8008104 <HAL_DMA_IRQHandler+0xa1c>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d031      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x8b8>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a71      	ldr	r2, [pc, #452]	; (8008108 <HAL_DMA_IRQHandler+0xa20>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d02c      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x8b8>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a70      	ldr	r2, [pc, #448]	; (800810c <HAL_DMA_IRQHandler+0xa24>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d027      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x8b8>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a6e      	ldr	r2, [pc, #440]	; (8008110 <HAL_DMA_IRQHandler+0xa28>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d022      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x8b8>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a6d      	ldr	r2, [pc, #436]	; (8008114 <HAL_DMA_IRQHandler+0xa2c>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d01d      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x8b8>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a6b      	ldr	r2, [pc, #428]	; (8008118 <HAL_DMA_IRQHandler+0xa30>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d018      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x8b8>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a6a      	ldr	r2, [pc, #424]	; (800811c <HAL_DMA_IRQHandler+0xa34>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d013      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x8b8>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a68      	ldr	r2, [pc, #416]	; (8008120 <HAL_DMA_IRQHandler+0xa38>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d00e      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x8b8>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a67      	ldr	r2, [pc, #412]	; (8008124 <HAL_DMA_IRQHandler+0xa3c>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d009      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x8b8>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a65      	ldr	r2, [pc, #404]	; (8008128 <HAL_DMA_IRQHandler+0xa40>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d004      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x8b8>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a64      	ldr	r2, [pc, #400]	; (800812c <HAL_DMA_IRQHandler+0xa44>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d108      	bne.n	8007fb2 <HAL_DMA_IRQHandler+0x8ca>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f022 0201 	bic.w	r2, r2, #1
 8007fae:	601a      	str	r2, [r3, #0]
 8007fb0:	e007      	b.n	8007fc2 <HAL_DMA_IRQHandler+0x8da>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f022 0201 	bic.w	r2, r2, #1
 8007fc0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	60fb      	str	r3, [r7, #12]
 8007fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d307      	bcc.n	8007fde <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0301 	and.w	r3, r3, #1
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1f2      	bne.n	8007fc2 <HAL_DMA_IRQHandler+0x8da>
 8007fdc:	e000      	b.n	8007fe0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007fde:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d004      	beq.n	8007ff8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2203      	movs	r2, #3
 8007ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007ff6:	e003      	b.n	8008000 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800800c:	2b00      	cmp	r3, #0
 800800e:	f000 8272 	beq.w	80084f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	4798      	blx	r3
 800801a:	e26c      	b.n	80084f6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a43      	ldr	r2, [pc, #268]	; (8008130 <HAL_DMA_IRQHandler+0xa48>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d022      	beq.n	800806c <HAL_DMA_IRQHandler+0x984>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a42      	ldr	r2, [pc, #264]	; (8008134 <HAL_DMA_IRQHandler+0xa4c>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d01d      	beq.n	800806c <HAL_DMA_IRQHandler+0x984>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a40      	ldr	r2, [pc, #256]	; (8008138 <HAL_DMA_IRQHandler+0xa50>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d018      	beq.n	800806c <HAL_DMA_IRQHandler+0x984>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a3f      	ldr	r2, [pc, #252]	; (800813c <HAL_DMA_IRQHandler+0xa54>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d013      	beq.n	800806c <HAL_DMA_IRQHandler+0x984>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a3d      	ldr	r2, [pc, #244]	; (8008140 <HAL_DMA_IRQHandler+0xa58>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d00e      	beq.n	800806c <HAL_DMA_IRQHandler+0x984>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a3c      	ldr	r2, [pc, #240]	; (8008144 <HAL_DMA_IRQHandler+0xa5c>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d009      	beq.n	800806c <HAL_DMA_IRQHandler+0x984>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a3a      	ldr	r2, [pc, #232]	; (8008148 <HAL_DMA_IRQHandler+0xa60>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d004      	beq.n	800806c <HAL_DMA_IRQHandler+0x984>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a39      	ldr	r2, [pc, #228]	; (800814c <HAL_DMA_IRQHandler+0xa64>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d101      	bne.n	8008070 <HAL_DMA_IRQHandler+0x988>
 800806c:	2301      	movs	r3, #1
 800806e:	e000      	b.n	8008072 <HAL_DMA_IRQHandler+0x98a>
 8008070:	2300      	movs	r3, #0
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 823f 	beq.w	80084f6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008084:	f003 031f 	and.w	r3, r3, #31
 8008088:	2204      	movs	r2, #4
 800808a:	409a      	lsls	r2, r3
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	4013      	ands	r3, r2
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 80cd 	beq.w	8008230 <HAL_DMA_IRQHandler+0xb48>
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	f003 0304 	and.w	r3, r3, #4
 800809c:	2b00      	cmp	r3, #0
 800809e:	f000 80c7 	beq.w	8008230 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a6:	f003 031f 	and.w	r3, r3, #31
 80080aa:	2204      	movs	r2, #4
 80080ac:	409a      	lsls	r2, r3
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d049      	beq.n	8008150 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d109      	bne.n	80080da <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 8210 	beq.w	80084f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080d8:	e20a      	b.n	80084f0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080de:	2b00      	cmp	r3, #0
 80080e0:	f000 8206 	beq.w	80084f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080ec:	e200      	b.n	80084f0 <HAL_DMA_IRQHandler+0xe08>
 80080ee:	bf00      	nop
 80080f0:	40020010 	.word	0x40020010
 80080f4:	40020028 	.word	0x40020028
 80080f8:	40020040 	.word	0x40020040
 80080fc:	40020058 	.word	0x40020058
 8008100:	40020070 	.word	0x40020070
 8008104:	40020088 	.word	0x40020088
 8008108:	400200a0 	.word	0x400200a0
 800810c:	400200b8 	.word	0x400200b8
 8008110:	40020410 	.word	0x40020410
 8008114:	40020428 	.word	0x40020428
 8008118:	40020440 	.word	0x40020440
 800811c:	40020458 	.word	0x40020458
 8008120:	40020470 	.word	0x40020470
 8008124:	40020488 	.word	0x40020488
 8008128:	400204a0 	.word	0x400204a0
 800812c:	400204b8 	.word	0x400204b8
 8008130:	58025408 	.word	0x58025408
 8008134:	5802541c 	.word	0x5802541c
 8008138:	58025430 	.word	0x58025430
 800813c:	58025444 	.word	0x58025444
 8008140:	58025458 	.word	0x58025458
 8008144:	5802546c 	.word	0x5802546c
 8008148:	58025480 	.word	0x58025480
 800814c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	f003 0320 	and.w	r3, r3, #32
 8008156:	2b00      	cmp	r3, #0
 8008158:	d160      	bne.n	800821c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a7f      	ldr	r2, [pc, #508]	; (800835c <HAL_DMA_IRQHandler+0xc74>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d04a      	beq.n	80081fa <HAL_DMA_IRQHandler+0xb12>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a7d      	ldr	r2, [pc, #500]	; (8008360 <HAL_DMA_IRQHandler+0xc78>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d045      	beq.n	80081fa <HAL_DMA_IRQHandler+0xb12>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a7c      	ldr	r2, [pc, #496]	; (8008364 <HAL_DMA_IRQHandler+0xc7c>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d040      	beq.n	80081fa <HAL_DMA_IRQHandler+0xb12>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a7a      	ldr	r2, [pc, #488]	; (8008368 <HAL_DMA_IRQHandler+0xc80>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d03b      	beq.n	80081fa <HAL_DMA_IRQHandler+0xb12>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a79      	ldr	r2, [pc, #484]	; (800836c <HAL_DMA_IRQHandler+0xc84>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d036      	beq.n	80081fa <HAL_DMA_IRQHandler+0xb12>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a77      	ldr	r2, [pc, #476]	; (8008370 <HAL_DMA_IRQHandler+0xc88>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d031      	beq.n	80081fa <HAL_DMA_IRQHandler+0xb12>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a76      	ldr	r2, [pc, #472]	; (8008374 <HAL_DMA_IRQHandler+0xc8c>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d02c      	beq.n	80081fa <HAL_DMA_IRQHandler+0xb12>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a74      	ldr	r2, [pc, #464]	; (8008378 <HAL_DMA_IRQHandler+0xc90>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d027      	beq.n	80081fa <HAL_DMA_IRQHandler+0xb12>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a73      	ldr	r2, [pc, #460]	; (800837c <HAL_DMA_IRQHandler+0xc94>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d022      	beq.n	80081fa <HAL_DMA_IRQHandler+0xb12>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a71      	ldr	r2, [pc, #452]	; (8008380 <HAL_DMA_IRQHandler+0xc98>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d01d      	beq.n	80081fa <HAL_DMA_IRQHandler+0xb12>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a70      	ldr	r2, [pc, #448]	; (8008384 <HAL_DMA_IRQHandler+0xc9c>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d018      	beq.n	80081fa <HAL_DMA_IRQHandler+0xb12>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a6e      	ldr	r2, [pc, #440]	; (8008388 <HAL_DMA_IRQHandler+0xca0>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d013      	beq.n	80081fa <HAL_DMA_IRQHandler+0xb12>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a6d      	ldr	r2, [pc, #436]	; (800838c <HAL_DMA_IRQHandler+0xca4>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d00e      	beq.n	80081fa <HAL_DMA_IRQHandler+0xb12>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a6b      	ldr	r2, [pc, #428]	; (8008390 <HAL_DMA_IRQHandler+0xca8>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d009      	beq.n	80081fa <HAL_DMA_IRQHandler+0xb12>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a6a      	ldr	r2, [pc, #424]	; (8008394 <HAL_DMA_IRQHandler+0xcac>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d004      	beq.n	80081fa <HAL_DMA_IRQHandler+0xb12>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a68      	ldr	r2, [pc, #416]	; (8008398 <HAL_DMA_IRQHandler+0xcb0>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d108      	bne.n	800820c <HAL_DMA_IRQHandler+0xb24>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f022 0208 	bic.w	r2, r2, #8
 8008208:	601a      	str	r2, [r3, #0]
 800820a:	e007      	b.n	800821c <HAL_DMA_IRQHandler+0xb34>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f022 0204 	bic.w	r2, r2, #4
 800821a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 8165 	beq.w	80084f0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800822e:	e15f      	b.n	80084f0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008234:	f003 031f 	and.w	r3, r3, #31
 8008238:	2202      	movs	r2, #2
 800823a:	409a      	lsls	r2, r3
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	4013      	ands	r3, r2
 8008240:	2b00      	cmp	r3, #0
 8008242:	f000 80c5 	beq.w	80083d0 <HAL_DMA_IRQHandler+0xce8>
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	f003 0302 	and.w	r3, r3, #2
 800824c:	2b00      	cmp	r3, #0
 800824e:	f000 80bf 	beq.w	80083d0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008256:	f003 031f 	and.w	r3, r3, #31
 800825a:	2202      	movs	r2, #2
 800825c:	409a      	lsls	r2, r3
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008268:	2b00      	cmp	r3, #0
 800826a:	d018      	beq.n	800829e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008272:	2b00      	cmp	r3, #0
 8008274:	d109      	bne.n	800828a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800827a:	2b00      	cmp	r3, #0
 800827c:	f000 813a 	beq.w	80084f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008288:	e134      	b.n	80084f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 8130 	beq.w	80084f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800829c:	e12a      	b.n	80084f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	f003 0320 	and.w	r3, r3, #32
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f040 8089 	bne.w	80083bc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a2b      	ldr	r2, [pc, #172]	; (800835c <HAL_DMA_IRQHandler+0xc74>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d04a      	beq.n	800834a <HAL_DMA_IRQHandler+0xc62>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a29      	ldr	r2, [pc, #164]	; (8008360 <HAL_DMA_IRQHandler+0xc78>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d045      	beq.n	800834a <HAL_DMA_IRQHandler+0xc62>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a28      	ldr	r2, [pc, #160]	; (8008364 <HAL_DMA_IRQHandler+0xc7c>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d040      	beq.n	800834a <HAL_DMA_IRQHandler+0xc62>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a26      	ldr	r2, [pc, #152]	; (8008368 <HAL_DMA_IRQHandler+0xc80>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d03b      	beq.n	800834a <HAL_DMA_IRQHandler+0xc62>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a25      	ldr	r2, [pc, #148]	; (800836c <HAL_DMA_IRQHandler+0xc84>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d036      	beq.n	800834a <HAL_DMA_IRQHandler+0xc62>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a23      	ldr	r2, [pc, #140]	; (8008370 <HAL_DMA_IRQHandler+0xc88>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d031      	beq.n	800834a <HAL_DMA_IRQHandler+0xc62>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a22      	ldr	r2, [pc, #136]	; (8008374 <HAL_DMA_IRQHandler+0xc8c>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d02c      	beq.n	800834a <HAL_DMA_IRQHandler+0xc62>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a20      	ldr	r2, [pc, #128]	; (8008378 <HAL_DMA_IRQHandler+0xc90>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d027      	beq.n	800834a <HAL_DMA_IRQHandler+0xc62>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a1f      	ldr	r2, [pc, #124]	; (800837c <HAL_DMA_IRQHandler+0xc94>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d022      	beq.n	800834a <HAL_DMA_IRQHandler+0xc62>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a1d      	ldr	r2, [pc, #116]	; (8008380 <HAL_DMA_IRQHandler+0xc98>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d01d      	beq.n	800834a <HAL_DMA_IRQHandler+0xc62>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a1c      	ldr	r2, [pc, #112]	; (8008384 <HAL_DMA_IRQHandler+0xc9c>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d018      	beq.n	800834a <HAL_DMA_IRQHandler+0xc62>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a1a      	ldr	r2, [pc, #104]	; (8008388 <HAL_DMA_IRQHandler+0xca0>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d013      	beq.n	800834a <HAL_DMA_IRQHandler+0xc62>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a19      	ldr	r2, [pc, #100]	; (800838c <HAL_DMA_IRQHandler+0xca4>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d00e      	beq.n	800834a <HAL_DMA_IRQHandler+0xc62>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a17      	ldr	r2, [pc, #92]	; (8008390 <HAL_DMA_IRQHandler+0xca8>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d009      	beq.n	800834a <HAL_DMA_IRQHandler+0xc62>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a16      	ldr	r2, [pc, #88]	; (8008394 <HAL_DMA_IRQHandler+0xcac>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d004      	beq.n	800834a <HAL_DMA_IRQHandler+0xc62>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a14      	ldr	r2, [pc, #80]	; (8008398 <HAL_DMA_IRQHandler+0xcb0>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d128      	bne.n	800839c <HAL_DMA_IRQHandler+0xcb4>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f022 0214 	bic.w	r2, r2, #20
 8008358:	601a      	str	r2, [r3, #0]
 800835a:	e027      	b.n	80083ac <HAL_DMA_IRQHandler+0xcc4>
 800835c:	40020010 	.word	0x40020010
 8008360:	40020028 	.word	0x40020028
 8008364:	40020040 	.word	0x40020040
 8008368:	40020058 	.word	0x40020058
 800836c:	40020070 	.word	0x40020070
 8008370:	40020088 	.word	0x40020088
 8008374:	400200a0 	.word	0x400200a0
 8008378:	400200b8 	.word	0x400200b8
 800837c:	40020410 	.word	0x40020410
 8008380:	40020428 	.word	0x40020428
 8008384:	40020440 	.word	0x40020440
 8008388:	40020458 	.word	0x40020458
 800838c:	40020470 	.word	0x40020470
 8008390:	40020488 	.word	0x40020488
 8008394:	400204a0 	.word	0x400204a0
 8008398:	400204b8 	.word	0x400204b8
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f022 020a 	bic.w	r2, r2, #10
 80083aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f000 8097 	beq.w	80084f4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083ce:	e091      	b.n	80084f4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083d4:	f003 031f 	and.w	r3, r3, #31
 80083d8:	2208      	movs	r2, #8
 80083da:	409a      	lsls	r2, r3
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	4013      	ands	r3, r2
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f000 8088 	beq.w	80084f6 <HAL_DMA_IRQHandler+0xe0e>
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	f003 0308 	and.w	r3, r3, #8
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f000 8082 	beq.w	80084f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a41      	ldr	r2, [pc, #260]	; (80084fc <HAL_DMA_IRQHandler+0xe14>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d04a      	beq.n	8008492 <HAL_DMA_IRQHandler+0xdaa>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a3f      	ldr	r2, [pc, #252]	; (8008500 <HAL_DMA_IRQHandler+0xe18>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d045      	beq.n	8008492 <HAL_DMA_IRQHandler+0xdaa>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a3e      	ldr	r2, [pc, #248]	; (8008504 <HAL_DMA_IRQHandler+0xe1c>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d040      	beq.n	8008492 <HAL_DMA_IRQHandler+0xdaa>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a3c      	ldr	r2, [pc, #240]	; (8008508 <HAL_DMA_IRQHandler+0xe20>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d03b      	beq.n	8008492 <HAL_DMA_IRQHandler+0xdaa>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a3b      	ldr	r2, [pc, #236]	; (800850c <HAL_DMA_IRQHandler+0xe24>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d036      	beq.n	8008492 <HAL_DMA_IRQHandler+0xdaa>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a39      	ldr	r2, [pc, #228]	; (8008510 <HAL_DMA_IRQHandler+0xe28>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d031      	beq.n	8008492 <HAL_DMA_IRQHandler+0xdaa>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a38      	ldr	r2, [pc, #224]	; (8008514 <HAL_DMA_IRQHandler+0xe2c>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d02c      	beq.n	8008492 <HAL_DMA_IRQHandler+0xdaa>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a36      	ldr	r2, [pc, #216]	; (8008518 <HAL_DMA_IRQHandler+0xe30>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d027      	beq.n	8008492 <HAL_DMA_IRQHandler+0xdaa>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a35      	ldr	r2, [pc, #212]	; (800851c <HAL_DMA_IRQHandler+0xe34>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d022      	beq.n	8008492 <HAL_DMA_IRQHandler+0xdaa>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a33      	ldr	r2, [pc, #204]	; (8008520 <HAL_DMA_IRQHandler+0xe38>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d01d      	beq.n	8008492 <HAL_DMA_IRQHandler+0xdaa>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a32      	ldr	r2, [pc, #200]	; (8008524 <HAL_DMA_IRQHandler+0xe3c>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d018      	beq.n	8008492 <HAL_DMA_IRQHandler+0xdaa>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a30      	ldr	r2, [pc, #192]	; (8008528 <HAL_DMA_IRQHandler+0xe40>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d013      	beq.n	8008492 <HAL_DMA_IRQHandler+0xdaa>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a2f      	ldr	r2, [pc, #188]	; (800852c <HAL_DMA_IRQHandler+0xe44>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d00e      	beq.n	8008492 <HAL_DMA_IRQHandler+0xdaa>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a2d      	ldr	r2, [pc, #180]	; (8008530 <HAL_DMA_IRQHandler+0xe48>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d009      	beq.n	8008492 <HAL_DMA_IRQHandler+0xdaa>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a2c      	ldr	r2, [pc, #176]	; (8008534 <HAL_DMA_IRQHandler+0xe4c>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d004      	beq.n	8008492 <HAL_DMA_IRQHandler+0xdaa>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a2a      	ldr	r2, [pc, #168]	; (8008538 <HAL_DMA_IRQHandler+0xe50>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d108      	bne.n	80084a4 <HAL_DMA_IRQHandler+0xdbc>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f022 021c 	bic.w	r2, r2, #28
 80084a0:	601a      	str	r2, [r3, #0]
 80084a2:	e007      	b.n	80084b4 <HAL_DMA_IRQHandler+0xdcc>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f022 020e 	bic.w	r2, r2, #14
 80084b2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084b8:	f003 031f 	and.w	r3, r3, #31
 80084bc:	2201      	movs	r2, #1
 80084be:	409a      	lsls	r2, r3
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d009      	beq.n	80084f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	4798      	blx	r3
 80084ea:	e004      	b.n	80084f6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80084ec:	bf00      	nop
 80084ee:	e002      	b.n	80084f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084f0:	bf00      	nop
 80084f2:	e000      	b.n	80084f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084f4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80084f6:	3728      	adds	r7, #40	; 0x28
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	40020010 	.word	0x40020010
 8008500:	40020028 	.word	0x40020028
 8008504:	40020040 	.word	0x40020040
 8008508:	40020058 	.word	0x40020058
 800850c:	40020070 	.word	0x40020070
 8008510:	40020088 	.word	0x40020088
 8008514:	400200a0 	.word	0x400200a0
 8008518:	400200b8 	.word	0x400200b8
 800851c:	40020410 	.word	0x40020410
 8008520:	40020428 	.word	0x40020428
 8008524:	40020440 	.word	0x40020440
 8008528:	40020458 	.word	0x40020458
 800852c:	40020470 	.word	0x40020470
 8008530:	40020488 	.word	0x40020488
 8008534:	400204a0 	.word	0x400204a0
 8008538:	400204b8 	.word	0x400204b8

0800853c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008548:	4618      	mov	r0, r3
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008554:	b480      	push	{r7}
 8008556:	b087      	sub	sp, #28
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
 8008560:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008566:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800856c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a7f      	ldr	r2, [pc, #508]	; (8008770 <DMA_SetConfig+0x21c>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d072      	beq.n	800865e <DMA_SetConfig+0x10a>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a7d      	ldr	r2, [pc, #500]	; (8008774 <DMA_SetConfig+0x220>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d06d      	beq.n	800865e <DMA_SetConfig+0x10a>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a7c      	ldr	r2, [pc, #496]	; (8008778 <DMA_SetConfig+0x224>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d068      	beq.n	800865e <DMA_SetConfig+0x10a>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a7a      	ldr	r2, [pc, #488]	; (800877c <DMA_SetConfig+0x228>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d063      	beq.n	800865e <DMA_SetConfig+0x10a>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a79      	ldr	r2, [pc, #484]	; (8008780 <DMA_SetConfig+0x22c>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d05e      	beq.n	800865e <DMA_SetConfig+0x10a>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a77      	ldr	r2, [pc, #476]	; (8008784 <DMA_SetConfig+0x230>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d059      	beq.n	800865e <DMA_SetConfig+0x10a>
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a76      	ldr	r2, [pc, #472]	; (8008788 <DMA_SetConfig+0x234>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d054      	beq.n	800865e <DMA_SetConfig+0x10a>
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a74      	ldr	r2, [pc, #464]	; (800878c <DMA_SetConfig+0x238>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d04f      	beq.n	800865e <DMA_SetConfig+0x10a>
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a73      	ldr	r2, [pc, #460]	; (8008790 <DMA_SetConfig+0x23c>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d04a      	beq.n	800865e <DMA_SetConfig+0x10a>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a71      	ldr	r2, [pc, #452]	; (8008794 <DMA_SetConfig+0x240>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d045      	beq.n	800865e <DMA_SetConfig+0x10a>
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a70      	ldr	r2, [pc, #448]	; (8008798 <DMA_SetConfig+0x244>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d040      	beq.n	800865e <DMA_SetConfig+0x10a>
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a6e      	ldr	r2, [pc, #440]	; (800879c <DMA_SetConfig+0x248>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d03b      	beq.n	800865e <DMA_SetConfig+0x10a>
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a6d      	ldr	r2, [pc, #436]	; (80087a0 <DMA_SetConfig+0x24c>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d036      	beq.n	800865e <DMA_SetConfig+0x10a>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a6b      	ldr	r2, [pc, #428]	; (80087a4 <DMA_SetConfig+0x250>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d031      	beq.n	800865e <DMA_SetConfig+0x10a>
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a6a      	ldr	r2, [pc, #424]	; (80087a8 <DMA_SetConfig+0x254>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d02c      	beq.n	800865e <DMA_SetConfig+0x10a>
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a68      	ldr	r2, [pc, #416]	; (80087ac <DMA_SetConfig+0x258>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d027      	beq.n	800865e <DMA_SetConfig+0x10a>
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a67      	ldr	r2, [pc, #412]	; (80087b0 <DMA_SetConfig+0x25c>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d022      	beq.n	800865e <DMA_SetConfig+0x10a>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a65      	ldr	r2, [pc, #404]	; (80087b4 <DMA_SetConfig+0x260>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d01d      	beq.n	800865e <DMA_SetConfig+0x10a>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a64      	ldr	r2, [pc, #400]	; (80087b8 <DMA_SetConfig+0x264>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d018      	beq.n	800865e <DMA_SetConfig+0x10a>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a62      	ldr	r2, [pc, #392]	; (80087bc <DMA_SetConfig+0x268>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d013      	beq.n	800865e <DMA_SetConfig+0x10a>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a61      	ldr	r2, [pc, #388]	; (80087c0 <DMA_SetConfig+0x26c>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d00e      	beq.n	800865e <DMA_SetConfig+0x10a>
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a5f      	ldr	r2, [pc, #380]	; (80087c4 <DMA_SetConfig+0x270>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d009      	beq.n	800865e <DMA_SetConfig+0x10a>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a5e      	ldr	r2, [pc, #376]	; (80087c8 <DMA_SetConfig+0x274>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d004      	beq.n	800865e <DMA_SetConfig+0x10a>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a5c      	ldr	r2, [pc, #368]	; (80087cc <DMA_SetConfig+0x278>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d101      	bne.n	8008662 <DMA_SetConfig+0x10e>
 800865e:	2301      	movs	r3, #1
 8008660:	e000      	b.n	8008664 <DMA_SetConfig+0x110>
 8008662:	2300      	movs	r3, #0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00d      	beq.n	8008684 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008670:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008676:	2b00      	cmp	r3, #0
 8008678:	d004      	beq.n	8008684 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008682:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a39      	ldr	r2, [pc, #228]	; (8008770 <DMA_SetConfig+0x21c>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d04a      	beq.n	8008724 <DMA_SetConfig+0x1d0>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a38      	ldr	r2, [pc, #224]	; (8008774 <DMA_SetConfig+0x220>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d045      	beq.n	8008724 <DMA_SetConfig+0x1d0>
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a36      	ldr	r2, [pc, #216]	; (8008778 <DMA_SetConfig+0x224>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d040      	beq.n	8008724 <DMA_SetConfig+0x1d0>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a35      	ldr	r2, [pc, #212]	; (800877c <DMA_SetConfig+0x228>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d03b      	beq.n	8008724 <DMA_SetConfig+0x1d0>
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a33      	ldr	r2, [pc, #204]	; (8008780 <DMA_SetConfig+0x22c>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d036      	beq.n	8008724 <DMA_SetConfig+0x1d0>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a32      	ldr	r2, [pc, #200]	; (8008784 <DMA_SetConfig+0x230>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d031      	beq.n	8008724 <DMA_SetConfig+0x1d0>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a30      	ldr	r2, [pc, #192]	; (8008788 <DMA_SetConfig+0x234>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d02c      	beq.n	8008724 <DMA_SetConfig+0x1d0>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a2f      	ldr	r2, [pc, #188]	; (800878c <DMA_SetConfig+0x238>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d027      	beq.n	8008724 <DMA_SetConfig+0x1d0>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a2d      	ldr	r2, [pc, #180]	; (8008790 <DMA_SetConfig+0x23c>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d022      	beq.n	8008724 <DMA_SetConfig+0x1d0>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a2c      	ldr	r2, [pc, #176]	; (8008794 <DMA_SetConfig+0x240>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d01d      	beq.n	8008724 <DMA_SetConfig+0x1d0>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a2a      	ldr	r2, [pc, #168]	; (8008798 <DMA_SetConfig+0x244>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d018      	beq.n	8008724 <DMA_SetConfig+0x1d0>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a29      	ldr	r2, [pc, #164]	; (800879c <DMA_SetConfig+0x248>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d013      	beq.n	8008724 <DMA_SetConfig+0x1d0>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a27      	ldr	r2, [pc, #156]	; (80087a0 <DMA_SetConfig+0x24c>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d00e      	beq.n	8008724 <DMA_SetConfig+0x1d0>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a26      	ldr	r2, [pc, #152]	; (80087a4 <DMA_SetConfig+0x250>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d009      	beq.n	8008724 <DMA_SetConfig+0x1d0>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a24      	ldr	r2, [pc, #144]	; (80087a8 <DMA_SetConfig+0x254>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d004      	beq.n	8008724 <DMA_SetConfig+0x1d0>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a23      	ldr	r2, [pc, #140]	; (80087ac <DMA_SetConfig+0x258>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d101      	bne.n	8008728 <DMA_SetConfig+0x1d4>
 8008724:	2301      	movs	r3, #1
 8008726:	e000      	b.n	800872a <DMA_SetConfig+0x1d6>
 8008728:	2300      	movs	r3, #0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d059      	beq.n	80087e2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008732:	f003 031f 	and.w	r3, r3, #31
 8008736:	223f      	movs	r2, #63	; 0x3f
 8008738:	409a      	lsls	r2, r3
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800874c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	683a      	ldr	r2, [r7, #0]
 8008754:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	2b40      	cmp	r3, #64	; 0x40
 800875c:	d138      	bne.n	80087d0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800876e:	e086      	b.n	800887e <DMA_SetConfig+0x32a>
 8008770:	40020010 	.word	0x40020010
 8008774:	40020028 	.word	0x40020028
 8008778:	40020040 	.word	0x40020040
 800877c:	40020058 	.word	0x40020058
 8008780:	40020070 	.word	0x40020070
 8008784:	40020088 	.word	0x40020088
 8008788:	400200a0 	.word	0x400200a0
 800878c:	400200b8 	.word	0x400200b8
 8008790:	40020410 	.word	0x40020410
 8008794:	40020428 	.word	0x40020428
 8008798:	40020440 	.word	0x40020440
 800879c:	40020458 	.word	0x40020458
 80087a0:	40020470 	.word	0x40020470
 80087a4:	40020488 	.word	0x40020488
 80087a8:	400204a0 	.word	0x400204a0
 80087ac:	400204b8 	.word	0x400204b8
 80087b0:	58025408 	.word	0x58025408
 80087b4:	5802541c 	.word	0x5802541c
 80087b8:	58025430 	.word	0x58025430
 80087bc:	58025444 	.word	0x58025444
 80087c0:	58025458 	.word	0x58025458
 80087c4:	5802546c 	.word	0x5802546c
 80087c8:	58025480 	.word	0x58025480
 80087cc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	60da      	str	r2, [r3, #12]
}
 80087e0:	e04d      	b.n	800887e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a29      	ldr	r2, [pc, #164]	; (800888c <DMA_SetConfig+0x338>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d022      	beq.n	8008832 <DMA_SetConfig+0x2de>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a27      	ldr	r2, [pc, #156]	; (8008890 <DMA_SetConfig+0x33c>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d01d      	beq.n	8008832 <DMA_SetConfig+0x2de>
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a26      	ldr	r2, [pc, #152]	; (8008894 <DMA_SetConfig+0x340>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d018      	beq.n	8008832 <DMA_SetConfig+0x2de>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a24      	ldr	r2, [pc, #144]	; (8008898 <DMA_SetConfig+0x344>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d013      	beq.n	8008832 <DMA_SetConfig+0x2de>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a23      	ldr	r2, [pc, #140]	; (800889c <DMA_SetConfig+0x348>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d00e      	beq.n	8008832 <DMA_SetConfig+0x2de>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a21      	ldr	r2, [pc, #132]	; (80088a0 <DMA_SetConfig+0x34c>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d009      	beq.n	8008832 <DMA_SetConfig+0x2de>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a20      	ldr	r2, [pc, #128]	; (80088a4 <DMA_SetConfig+0x350>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d004      	beq.n	8008832 <DMA_SetConfig+0x2de>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a1e      	ldr	r2, [pc, #120]	; (80088a8 <DMA_SetConfig+0x354>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d101      	bne.n	8008836 <DMA_SetConfig+0x2e2>
 8008832:	2301      	movs	r3, #1
 8008834:	e000      	b.n	8008838 <DMA_SetConfig+0x2e4>
 8008836:	2300      	movs	r3, #0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d020      	beq.n	800887e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008840:	f003 031f 	and.w	r3, r3, #31
 8008844:	2201      	movs	r2, #1
 8008846:	409a      	lsls	r2, r3
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	683a      	ldr	r2, [r7, #0]
 8008852:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	2b40      	cmp	r3, #64	; 0x40
 800885a:	d108      	bne.n	800886e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	60da      	str	r2, [r3, #12]
}
 800886c:	e007      	b.n	800887e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68ba      	ldr	r2, [r7, #8]
 8008874:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	60da      	str	r2, [r3, #12]
}
 800887e:	bf00      	nop
 8008880:	371c      	adds	r7, #28
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	58025408 	.word	0x58025408
 8008890:	5802541c 	.word	0x5802541c
 8008894:	58025430 	.word	0x58025430
 8008898:	58025444 	.word	0x58025444
 800889c:	58025458 	.word	0x58025458
 80088a0:	5802546c 	.word	0x5802546c
 80088a4:	58025480 	.word	0x58025480
 80088a8:	58025494 	.word	0x58025494

080088ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a42      	ldr	r2, [pc, #264]	; (80089c4 <DMA_CalcBaseAndBitshift+0x118>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d04a      	beq.n	8008954 <DMA_CalcBaseAndBitshift+0xa8>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a41      	ldr	r2, [pc, #260]	; (80089c8 <DMA_CalcBaseAndBitshift+0x11c>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d045      	beq.n	8008954 <DMA_CalcBaseAndBitshift+0xa8>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a3f      	ldr	r2, [pc, #252]	; (80089cc <DMA_CalcBaseAndBitshift+0x120>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d040      	beq.n	8008954 <DMA_CalcBaseAndBitshift+0xa8>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a3e      	ldr	r2, [pc, #248]	; (80089d0 <DMA_CalcBaseAndBitshift+0x124>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d03b      	beq.n	8008954 <DMA_CalcBaseAndBitshift+0xa8>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a3c      	ldr	r2, [pc, #240]	; (80089d4 <DMA_CalcBaseAndBitshift+0x128>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d036      	beq.n	8008954 <DMA_CalcBaseAndBitshift+0xa8>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a3b      	ldr	r2, [pc, #236]	; (80089d8 <DMA_CalcBaseAndBitshift+0x12c>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d031      	beq.n	8008954 <DMA_CalcBaseAndBitshift+0xa8>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a39      	ldr	r2, [pc, #228]	; (80089dc <DMA_CalcBaseAndBitshift+0x130>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d02c      	beq.n	8008954 <DMA_CalcBaseAndBitshift+0xa8>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a38      	ldr	r2, [pc, #224]	; (80089e0 <DMA_CalcBaseAndBitshift+0x134>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d027      	beq.n	8008954 <DMA_CalcBaseAndBitshift+0xa8>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a36      	ldr	r2, [pc, #216]	; (80089e4 <DMA_CalcBaseAndBitshift+0x138>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d022      	beq.n	8008954 <DMA_CalcBaseAndBitshift+0xa8>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a35      	ldr	r2, [pc, #212]	; (80089e8 <DMA_CalcBaseAndBitshift+0x13c>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d01d      	beq.n	8008954 <DMA_CalcBaseAndBitshift+0xa8>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a33      	ldr	r2, [pc, #204]	; (80089ec <DMA_CalcBaseAndBitshift+0x140>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d018      	beq.n	8008954 <DMA_CalcBaseAndBitshift+0xa8>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a32      	ldr	r2, [pc, #200]	; (80089f0 <DMA_CalcBaseAndBitshift+0x144>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d013      	beq.n	8008954 <DMA_CalcBaseAndBitshift+0xa8>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a30      	ldr	r2, [pc, #192]	; (80089f4 <DMA_CalcBaseAndBitshift+0x148>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d00e      	beq.n	8008954 <DMA_CalcBaseAndBitshift+0xa8>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a2f      	ldr	r2, [pc, #188]	; (80089f8 <DMA_CalcBaseAndBitshift+0x14c>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d009      	beq.n	8008954 <DMA_CalcBaseAndBitshift+0xa8>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a2d      	ldr	r2, [pc, #180]	; (80089fc <DMA_CalcBaseAndBitshift+0x150>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d004      	beq.n	8008954 <DMA_CalcBaseAndBitshift+0xa8>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a2c      	ldr	r2, [pc, #176]	; (8008a00 <DMA_CalcBaseAndBitshift+0x154>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d101      	bne.n	8008958 <DMA_CalcBaseAndBitshift+0xac>
 8008954:	2301      	movs	r3, #1
 8008956:	e000      	b.n	800895a <DMA_CalcBaseAndBitshift+0xae>
 8008958:	2300      	movs	r3, #0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d024      	beq.n	80089a8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	b2db      	uxtb	r3, r3
 8008964:	3b10      	subs	r3, #16
 8008966:	4a27      	ldr	r2, [pc, #156]	; (8008a04 <DMA_CalcBaseAndBitshift+0x158>)
 8008968:	fba2 2303 	umull	r2, r3, r2, r3
 800896c:	091b      	lsrs	r3, r3, #4
 800896e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f003 0307 	and.w	r3, r3, #7
 8008976:	4a24      	ldr	r2, [pc, #144]	; (8008a08 <DMA_CalcBaseAndBitshift+0x15c>)
 8008978:	5cd3      	ldrb	r3, [r2, r3]
 800897a:	461a      	mov	r2, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2b03      	cmp	r3, #3
 8008984:	d908      	bls.n	8008998 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	461a      	mov	r2, r3
 800898c:	4b1f      	ldr	r3, [pc, #124]	; (8008a0c <DMA_CalcBaseAndBitshift+0x160>)
 800898e:	4013      	ands	r3, r2
 8008990:	1d1a      	adds	r2, r3, #4
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	659a      	str	r2, [r3, #88]	; 0x58
 8008996:	e00d      	b.n	80089b4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	461a      	mov	r2, r3
 800899e:	4b1b      	ldr	r3, [pc, #108]	; (8008a0c <DMA_CalcBaseAndBitshift+0x160>)
 80089a0:	4013      	ands	r3, r2
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	6593      	str	r3, [r2, #88]	; 0x58
 80089a6:	e005      	b.n	80089b4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3714      	adds	r7, #20
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr
 80089c4:	40020010 	.word	0x40020010
 80089c8:	40020028 	.word	0x40020028
 80089cc:	40020040 	.word	0x40020040
 80089d0:	40020058 	.word	0x40020058
 80089d4:	40020070 	.word	0x40020070
 80089d8:	40020088 	.word	0x40020088
 80089dc:	400200a0 	.word	0x400200a0
 80089e0:	400200b8 	.word	0x400200b8
 80089e4:	40020410 	.word	0x40020410
 80089e8:	40020428 	.word	0x40020428
 80089ec:	40020440 	.word	0x40020440
 80089f0:	40020458 	.word	0x40020458
 80089f4:	40020470 	.word	0x40020470
 80089f8:	40020488 	.word	0x40020488
 80089fc:	400204a0 	.word	0x400204a0
 8008a00:	400204b8 	.word	0x400204b8
 8008a04:	aaaaaaab 	.word	0xaaaaaaab
 8008a08:	08016e44 	.word	0x08016e44
 8008a0c:	fffffc00 	.word	0xfffffc00

08008a10 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b085      	sub	sp, #20
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	699b      	ldr	r3, [r3, #24]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d120      	bne.n	8008a66 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a28:	2b03      	cmp	r3, #3
 8008a2a:	d858      	bhi.n	8008ade <DMA_CheckFifoParam+0xce>
 8008a2c:	a201      	add	r2, pc, #4	; (adr r2, 8008a34 <DMA_CheckFifoParam+0x24>)
 8008a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a32:	bf00      	nop
 8008a34:	08008a45 	.word	0x08008a45
 8008a38:	08008a57 	.word	0x08008a57
 8008a3c:	08008a45 	.word	0x08008a45
 8008a40:	08008adf 	.word	0x08008adf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d048      	beq.n	8008ae2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a54:	e045      	b.n	8008ae2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008a5e:	d142      	bne.n	8008ae6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a64:	e03f      	b.n	8008ae6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a6e:	d123      	bne.n	8008ab8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a74:	2b03      	cmp	r3, #3
 8008a76:	d838      	bhi.n	8008aea <DMA_CheckFifoParam+0xda>
 8008a78:	a201      	add	r2, pc, #4	; (adr r2, 8008a80 <DMA_CheckFifoParam+0x70>)
 8008a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a7e:	bf00      	nop
 8008a80:	08008a91 	.word	0x08008a91
 8008a84:	08008a97 	.word	0x08008a97
 8008a88:	08008a91 	.word	0x08008a91
 8008a8c:	08008aa9 	.word	0x08008aa9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	73fb      	strb	r3, [r7, #15]
        break;
 8008a94:	e030      	b.n	8008af8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d025      	beq.n	8008aee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008aa6:	e022      	b.n	8008aee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008ab0:	d11f      	bne.n	8008af2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ab6:	e01c      	b.n	8008af2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	d902      	bls.n	8008ac6 <DMA_CheckFifoParam+0xb6>
 8008ac0:	2b03      	cmp	r3, #3
 8008ac2:	d003      	beq.n	8008acc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008ac4:	e018      	b.n	8008af8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	73fb      	strb	r3, [r7, #15]
        break;
 8008aca:	e015      	b.n	8008af8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00e      	beq.n	8008af6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	73fb      	strb	r3, [r7, #15]
    break;
 8008adc:	e00b      	b.n	8008af6 <DMA_CheckFifoParam+0xe6>
        break;
 8008ade:	bf00      	nop
 8008ae0:	e00a      	b.n	8008af8 <DMA_CheckFifoParam+0xe8>
        break;
 8008ae2:	bf00      	nop
 8008ae4:	e008      	b.n	8008af8 <DMA_CheckFifoParam+0xe8>
        break;
 8008ae6:	bf00      	nop
 8008ae8:	e006      	b.n	8008af8 <DMA_CheckFifoParam+0xe8>
        break;
 8008aea:	bf00      	nop
 8008aec:	e004      	b.n	8008af8 <DMA_CheckFifoParam+0xe8>
        break;
 8008aee:	bf00      	nop
 8008af0:	e002      	b.n	8008af8 <DMA_CheckFifoParam+0xe8>
        break;
 8008af2:	bf00      	nop
 8008af4:	e000      	b.n	8008af8 <DMA_CheckFifoParam+0xe8>
    break;
 8008af6:	bf00      	nop
    }
  }

  return status;
 8008af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3714      	adds	r7, #20
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop

08008b08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a38      	ldr	r2, [pc, #224]	; (8008bfc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d022      	beq.n	8008b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a36      	ldr	r2, [pc, #216]	; (8008c00 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d01d      	beq.n	8008b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a35      	ldr	r2, [pc, #212]	; (8008c04 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d018      	beq.n	8008b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a33      	ldr	r2, [pc, #204]	; (8008c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d013      	beq.n	8008b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a32      	ldr	r2, [pc, #200]	; (8008c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d00e      	beq.n	8008b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a30      	ldr	r2, [pc, #192]	; (8008c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d009      	beq.n	8008b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a2f      	ldr	r2, [pc, #188]	; (8008c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d004      	beq.n	8008b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a2d      	ldr	r2, [pc, #180]	; (8008c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d101      	bne.n	8008b6a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008b66:	2301      	movs	r3, #1
 8008b68:	e000      	b.n	8008b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d01a      	beq.n	8008ba6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	3b08      	subs	r3, #8
 8008b78:	4a28      	ldr	r2, [pc, #160]	; (8008c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b7e:	091b      	lsrs	r3, r3, #4
 8008b80:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	4b26      	ldr	r3, [pc, #152]	; (8008c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008b86:	4413      	add	r3, r2
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a24      	ldr	r2, [pc, #144]	; (8008c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008b94:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f003 031f 	and.w	r3, r3, #31
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	409a      	lsls	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008ba4:	e024      	b.n	8008bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	3b10      	subs	r3, #16
 8008bae:	4a1e      	ldr	r2, [pc, #120]	; (8008c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb4:	091b      	lsrs	r3, r3, #4
 8008bb6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	4a1c      	ldr	r2, [pc, #112]	; (8008c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d806      	bhi.n	8008bce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	4a1b      	ldr	r2, [pc, #108]	; (8008c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d902      	bls.n	8008bce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	3308      	adds	r3, #8
 8008bcc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	4b18      	ldr	r3, [pc, #96]	; (8008c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008bd2:	4413      	add	r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a16      	ldr	r2, [pc, #88]	; (8008c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008be0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f003 031f 	and.w	r3, r3, #31
 8008be8:	2201      	movs	r2, #1
 8008bea:	409a      	lsls	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008bf0:	bf00      	nop
 8008bf2:	3714      	adds	r7, #20
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr
 8008bfc:	58025408 	.word	0x58025408
 8008c00:	5802541c 	.word	0x5802541c
 8008c04:	58025430 	.word	0x58025430
 8008c08:	58025444 	.word	0x58025444
 8008c0c:	58025458 	.word	0x58025458
 8008c10:	5802546c 	.word	0x5802546c
 8008c14:	58025480 	.word	0x58025480
 8008c18:	58025494 	.word	0x58025494
 8008c1c:	cccccccd 	.word	0xcccccccd
 8008c20:	16009600 	.word	0x16009600
 8008c24:	58025880 	.word	0x58025880
 8008c28:	aaaaaaab 	.word	0xaaaaaaab
 8008c2c:	400204b8 	.word	0x400204b8
 8008c30:	4002040f 	.word	0x4002040f
 8008c34:	10008200 	.word	0x10008200
 8008c38:	40020880 	.word	0x40020880

08008c3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d04a      	beq.n	8008ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2b08      	cmp	r3, #8
 8008c56:	d847      	bhi.n	8008ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a25      	ldr	r2, [pc, #148]	; (8008cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d022      	beq.n	8008ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a24      	ldr	r2, [pc, #144]	; (8008cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d01d      	beq.n	8008ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a22      	ldr	r2, [pc, #136]	; (8008cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d018      	beq.n	8008ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a21      	ldr	r2, [pc, #132]	; (8008d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d013      	beq.n	8008ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a1f      	ldr	r2, [pc, #124]	; (8008d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d00e      	beq.n	8008ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a1e      	ldr	r2, [pc, #120]	; (8008d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d009      	beq.n	8008ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a1c      	ldr	r2, [pc, #112]	; (8008d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d004      	beq.n	8008ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a1b      	ldr	r2, [pc, #108]	; (8008d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d101      	bne.n	8008cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e000      	b.n	8008cae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008cac:	2300      	movs	r3, #0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00a      	beq.n	8008cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	4b17      	ldr	r3, [pc, #92]	; (8008d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008cb6:	4413      	add	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	461a      	mov	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a15      	ldr	r2, [pc, #84]	; (8008d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008cc4:	671a      	str	r2, [r3, #112]	; 0x70
 8008cc6:	e009      	b.n	8008cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	4b14      	ldr	r3, [pc, #80]	; (8008d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008ccc:	4413      	add	r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a11      	ldr	r2, [pc, #68]	; (8008d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008cda:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	409a      	lsls	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008ce8:	bf00      	nop
 8008cea:	3714      	adds	r7, #20
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr
 8008cf4:	58025408 	.word	0x58025408
 8008cf8:	5802541c 	.word	0x5802541c
 8008cfc:	58025430 	.word	0x58025430
 8008d00:	58025444 	.word	0x58025444
 8008d04:	58025458 	.word	0x58025458
 8008d08:	5802546c 	.word	0x5802546c
 8008d0c:	58025480 	.word	0x58025480
 8008d10:	58025494 	.word	0x58025494
 8008d14:	1600963f 	.word	0x1600963f
 8008d18:	58025940 	.word	0x58025940
 8008d1c:	1000823f 	.word	0x1000823f
 8008d20:	40020940 	.word	0x40020940

08008d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b089      	sub	sp, #36	; 0x24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008d32:	4b89      	ldr	r3, [pc, #548]	; (8008f58 <HAL_GPIO_Init+0x234>)
 8008d34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008d36:	e194      	b.n	8009062 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	2101      	movs	r1, #1
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	fa01 f303 	lsl.w	r3, r1, r3
 8008d44:	4013      	ands	r3, r2
 8008d46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	f000 8186 	beq.w	800905c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	f003 0303 	and.w	r3, r3, #3
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d005      	beq.n	8008d68 <HAL_GPIO_Init+0x44>
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	f003 0303 	and.w	r3, r3, #3
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d130      	bne.n	8008dca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	005b      	lsls	r3, r3, #1
 8008d72:	2203      	movs	r2, #3
 8008d74:	fa02 f303 	lsl.w	r3, r2, r3
 8008d78:	43db      	mvns	r3, r3
 8008d7a:	69ba      	ldr	r2, [r7, #24]
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	68da      	ldr	r2, [r3, #12]
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	005b      	lsls	r3, r3, #1
 8008d88:	fa02 f303 	lsl.w	r3, r2, r3
 8008d8c:	69ba      	ldr	r2, [r7, #24]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	69ba      	ldr	r2, [r7, #24]
 8008d96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008d9e:	2201      	movs	r2, #1
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	fa02 f303 	lsl.w	r3, r2, r3
 8008da6:	43db      	mvns	r3, r3
 8008da8:	69ba      	ldr	r2, [r7, #24]
 8008daa:	4013      	ands	r3, r2
 8008dac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	091b      	lsrs	r3, r3, #4
 8008db4:	f003 0201 	and.w	r2, r3, #1
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	fa02 f303 	lsl.w	r3, r2, r3
 8008dbe:	69ba      	ldr	r2, [r7, #24]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	69ba      	ldr	r2, [r7, #24]
 8008dc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	f003 0303 	and.w	r3, r3, #3
 8008dd2:	2b03      	cmp	r3, #3
 8008dd4:	d017      	beq.n	8008e06 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	005b      	lsls	r3, r3, #1
 8008de0:	2203      	movs	r2, #3
 8008de2:	fa02 f303 	lsl.w	r3, r2, r3
 8008de6:	43db      	mvns	r3, r3
 8008de8:	69ba      	ldr	r2, [r7, #24]
 8008dea:	4013      	ands	r3, r2
 8008dec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	689a      	ldr	r2, [r3, #8]
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	005b      	lsls	r3, r3, #1
 8008df6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dfa:	69ba      	ldr	r2, [r7, #24]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	69ba      	ldr	r2, [r7, #24]
 8008e04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f003 0303 	and.w	r3, r3, #3
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d123      	bne.n	8008e5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	08da      	lsrs	r2, r3, #3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	3208      	adds	r2, #8
 8008e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	f003 0307 	and.w	r3, r3, #7
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	220f      	movs	r2, #15
 8008e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e2e:	43db      	mvns	r3, r3
 8008e30:	69ba      	ldr	r2, [r7, #24]
 8008e32:	4013      	ands	r3, r2
 8008e34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	691a      	ldr	r2, [r3, #16]
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	f003 0307 	and.w	r3, r3, #7
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	fa02 f303 	lsl.w	r3, r2, r3
 8008e46:	69ba      	ldr	r2, [r7, #24]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	08da      	lsrs	r2, r3, #3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	3208      	adds	r2, #8
 8008e54:	69b9      	ldr	r1, [r7, #24]
 8008e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	005b      	lsls	r3, r3, #1
 8008e64:	2203      	movs	r2, #3
 8008e66:	fa02 f303 	lsl.w	r3, r2, r3
 8008e6a:	43db      	mvns	r3, r3
 8008e6c:	69ba      	ldr	r2, [r7, #24]
 8008e6e:	4013      	ands	r3, r2
 8008e70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	f003 0203 	and.w	r2, r3, #3
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	005b      	lsls	r3, r3, #1
 8008e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e82:	69ba      	ldr	r2, [r7, #24]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	69ba      	ldr	r2, [r7, #24]
 8008e8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f000 80e0 	beq.w	800905c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e9c:	4b2f      	ldr	r3, [pc, #188]	; (8008f5c <HAL_GPIO_Init+0x238>)
 8008e9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008ea2:	4a2e      	ldr	r2, [pc, #184]	; (8008f5c <HAL_GPIO_Init+0x238>)
 8008ea4:	f043 0302 	orr.w	r3, r3, #2
 8008ea8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008eac:	4b2b      	ldr	r3, [pc, #172]	; (8008f5c <HAL_GPIO_Init+0x238>)
 8008eae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008eb2:	f003 0302 	and.w	r3, r3, #2
 8008eb6:	60fb      	str	r3, [r7, #12]
 8008eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008eba:	4a29      	ldr	r2, [pc, #164]	; (8008f60 <HAL_GPIO_Init+0x23c>)
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	089b      	lsrs	r3, r3, #2
 8008ec0:	3302      	adds	r3, #2
 8008ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	f003 0303 	and.w	r3, r3, #3
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	220f      	movs	r2, #15
 8008ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed6:	43db      	mvns	r3, r3
 8008ed8:	69ba      	ldr	r2, [r7, #24]
 8008eda:	4013      	ands	r3, r2
 8008edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4a20      	ldr	r2, [pc, #128]	; (8008f64 <HAL_GPIO_Init+0x240>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d052      	beq.n	8008f8c <HAL_GPIO_Init+0x268>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4a1f      	ldr	r2, [pc, #124]	; (8008f68 <HAL_GPIO_Init+0x244>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d031      	beq.n	8008f52 <HAL_GPIO_Init+0x22e>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4a1e      	ldr	r2, [pc, #120]	; (8008f6c <HAL_GPIO_Init+0x248>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d02b      	beq.n	8008f4e <HAL_GPIO_Init+0x22a>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4a1d      	ldr	r2, [pc, #116]	; (8008f70 <HAL_GPIO_Init+0x24c>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d025      	beq.n	8008f4a <HAL_GPIO_Init+0x226>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a1c      	ldr	r2, [pc, #112]	; (8008f74 <HAL_GPIO_Init+0x250>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d01f      	beq.n	8008f46 <HAL_GPIO_Init+0x222>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a1b      	ldr	r2, [pc, #108]	; (8008f78 <HAL_GPIO_Init+0x254>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d019      	beq.n	8008f42 <HAL_GPIO_Init+0x21e>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a1a      	ldr	r2, [pc, #104]	; (8008f7c <HAL_GPIO_Init+0x258>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d013      	beq.n	8008f3e <HAL_GPIO_Init+0x21a>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a19      	ldr	r2, [pc, #100]	; (8008f80 <HAL_GPIO_Init+0x25c>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d00d      	beq.n	8008f3a <HAL_GPIO_Init+0x216>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4a18      	ldr	r2, [pc, #96]	; (8008f84 <HAL_GPIO_Init+0x260>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d007      	beq.n	8008f36 <HAL_GPIO_Init+0x212>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4a17      	ldr	r2, [pc, #92]	; (8008f88 <HAL_GPIO_Init+0x264>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d101      	bne.n	8008f32 <HAL_GPIO_Init+0x20e>
 8008f2e:	2309      	movs	r3, #9
 8008f30:	e02d      	b.n	8008f8e <HAL_GPIO_Init+0x26a>
 8008f32:	230a      	movs	r3, #10
 8008f34:	e02b      	b.n	8008f8e <HAL_GPIO_Init+0x26a>
 8008f36:	2308      	movs	r3, #8
 8008f38:	e029      	b.n	8008f8e <HAL_GPIO_Init+0x26a>
 8008f3a:	2307      	movs	r3, #7
 8008f3c:	e027      	b.n	8008f8e <HAL_GPIO_Init+0x26a>
 8008f3e:	2306      	movs	r3, #6
 8008f40:	e025      	b.n	8008f8e <HAL_GPIO_Init+0x26a>
 8008f42:	2305      	movs	r3, #5
 8008f44:	e023      	b.n	8008f8e <HAL_GPIO_Init+0x26a>
 8008f46:	2304      	movs	r3, #4
 8008f48:	e021      	b.n	8008f8e <HAL_GPIO_Init+0x26a>
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	e01f      	b.n	8008f8e <HAL_GPIO_Init+0x26a>
 8008f4e:	2302      	movs	r3, #2
 8008f50:	e01d      	b.n	8008f8e <HAL_GPIO_Init+0x26a>
 8008f52:	2301      	movs	r3, #1
 8008f54:	e01b      	b.n	8008f8e <HAL_GPIO_Init+0x26a>
 8008f56:	bf00      	nop
 8008f58:	58000080 	.word	0x58000080
 8008f5c:	58024400 	.word	0x58024400
 8008f60:	58000400 	.word	0x58000400
 8008f64:	58020000 	.word	0x58020000
 8008f68:	58020400 	.word	0x58020400
 8008f6c:	58020800 	.word	0x58020800
 8008f70:	58020c00 	.word	0x58020c00
 8008f74:	58021000 	.word	0x58021000
 8008f78:	58021400 	.word	0x58021400
 8008f7c:	58021800 	.word	0x58021800
 8008f80:	58021c00 	.word	0x58021c00
 8008f84:	58022000 	.word	0x58022000
 8008f88:	58022400 	.word	0x58022400
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	69fa      	ldr	r2, [r7, #28]
 8008f90:	f002 0203 	and.w	r2, r2, #3
 8008f94:	0092      	lsls	r2, r2, #2
 8008f96:	4093      	lsls	r3, r2
 8008f98:	69ba      	ldr	r2, [r7, #24]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008f9e:	4938      	ldr	r1, [pc, #224]	; (8009080 <HAL_GPIO_Init+0x35c>)
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	089b      	lsrs	r3, r3, #2
 8008fa4:	3302      	adds	r3, #2
 8008fa6:	69ba      	ldr	r2, [r7, #24]
 8008fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	43db      	mvns	r3, r3
 8008fb8:	69ba      	ldr	r2, [r7, #24]
 8008fba:	4013      	ands	r3, r2
 8008fbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d003      	beq.n	8008fd2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008fca:	69ba      	ldr	r2, [r7, #24]
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008fd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	43db      	mvns	r3, r3
 8008fe6:	69ba      	ldr	r2, [r7, #24]
 8008fe8:	4013      	ands	r3, r2
 8008fea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d003      	beq.n	8009000 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008ff8:	69ba      	ldr	r2, [r7, #24]
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009000:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	43db      	mvns	r3, r3
 8009012:	69ba      	ldr	r2, [r7, #24]
 8009014:	4013      	ands	r3, r2
 8009016:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009020:	2b00      	cmp	r3, #0
 8009022:	d003      	beq.n	800902c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009024:	69ba      	ldr	r2, [r7, #24]
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	4313      	orrs	r3, r2
 800902a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	69ba      	ldr	r2, [r7, #24]
 8009030:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	43db      	mvns	r3, r3
 800903c:	69ba      	ldr	r2, [r7, #24]
 800903e:	4013      	ands	r3, r2
 8009040:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800904a:	2b00      	cmp	r3, #0
 800904c:	d003      	beq.n	8009056 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800904e:	69ba      	ldr	r2, [r7, #24]
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	4313      	orrs	r3, r2
 8009054:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	69ba      	ldr	r2, [r7, #24]
 800905a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	3301      	adds	r3, #1
 8009060:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	fa22 f303 	lsr.w	r3, r2, r3
 800906c:	2b00      	cmp	r3, #0
 800906e:	f47f ae63 	bne.w	8008d38 <HAL_GPIO_Init+0x14>
  }
}
 8009072:	bf00      	nop
 8009074:	bf00      	nop
 8009076:	3724      	adds	r7, #36	; 0x24
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr
 8009080:	58000400 	.word	0x58000400

08009084 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	460b      	mov	r3, r1
 800908e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	691a      	ldr	r2, [r3, #16]
 8009094:	887b      	ldrh	r3, [r7, #2]
 8009096:	4013      	ands	r3, r2
 8009098:	2b00      	cmp	r3, #0
 800909a:	d002      	beq.n	80090a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800909c:	2301      	movs	r3, #1
 800909e:	73fb      	strb	r3, [r7, #15]
 80090a0:	e001      	b.n	80090a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80090a2:	2300      	movs	r3, #0
 80090a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80090a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3714      	adds	r7, #20
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	460b      	mov	r3, r1
 80090be:	807b      	strh	r3, [r7, #2]
 80090c0:	4613      	mov	r3, r2
 80090c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80090c4:	787b      	ldrb	r3, [r7, #1]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d003      	beq.n	80090d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80090ca:	887a      	ldrh	r2, [r7, #2]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80090d0:	e003      	b.n	80090da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80090d2:	887b      	ldrh	r3, [r7, #2]
 80090d4:	041a      	lsls	r2, r3, #16
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	619a      	str	r2, [r3, #24]
}
 80090da:	bf00      	nop
 80090dc:	370c      	adds	r7, #12
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
	...

080090e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d101      	bne.n	80090fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e08b      	b.n	8009212 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009100:	b2db      	uxtb	r3, r3
 8009102:	2b00      	cmp	r3, #0
 8009104:	d106      	bne.n	8009114 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f7f8 f950 	bl	80013b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2224      	movs	r2, #36	; 0x24
 8009118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f022 0201 	bic.w	r2, r2, #1
 800912a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	685a      	ldr	r2, [r3, #4]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009138:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	689a      	ldr	r2, [r3, #8]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009148:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d107      	bne.n	8009162 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	689a      	ldr	r2, [r3, #8]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800915e:	609a      	str	r2, [r3, #8]
 8009160:	e006      	b.n	8009170 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	689a      	ldr	r2, [r3, #8]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800916e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	2b02      	cmp	r3, #2
 8009176:	d108      	bne.n	800918a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	685a      	ldr	r2, [r3, #4]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009186:	605a      	str	r2, [r3, #4]
 8009188:	e007      	b.n	800919a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	685a      	ldr	r2, [r3, #4]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009198:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	6859      	ldr	r1, [r3, #4]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	4b1d      	ldr	r3, [pc, #116]	; (800921c <HAL_I2C_Init+0x134>)
 80091a6:	430b      	orrs	r3, r1
 80091a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	68da      	ldr	r2, [r3, #12]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80091b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	691a      	ldr	r2, [r3, #16]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	699b      	ldr	r3, [r3, #24]
 80091ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	430a      	orrs	r2, r1
 80091d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	69d9      	ldr	r1, [r3, #28]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a1a      	ldr	r2, [r3, #32]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	430a      	orrs	r2, r1
 80091e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f042 0201 	orr.w	r2, r2, #1
 80091f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2220      	movs	r2, #32
 80091fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	02008000 	.word	0x02008000

08009220 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b088      	sub	sp, #32
 8009224:	af02      	add	r7, sp, #8
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	607a      	str	r2, [r7, #4]
 800922a:	461a      	mov	r2, r3
 800922c:	460b      	mov	r3, r1
 800922e:	817b      	strh	r3, [r7, #10]
 8009230:	4613      	mov	r3, r2
 8009232:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800923a:	b2db      	uxtb	r3, r3
 800923c:	2b20      	cmp	r3, #32
 800923e:	f040 80fd 	bne.w	800943c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009248:	2b01      	cmp	r3, #1
 800924a:	d101      	bne.n	8009250 <HAL_I2C_Master_Transmit+0x30>
 800924c:	2302      	movs	r3, #2
 800924e:	e0f6      	b.n	800943e <HAL_I2C_Master_Transmit+0x21e>
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009258:	f7fa fdf4 	bl	8003e44 <HAL_GetTick>
 800925c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	9300      	str	r3, [sp, #0]
 8009262:	2319      	movs	r3, #25
 8009264:	2201      	movs	r2, #1
 8009266:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f000 fa0a 	bl	8009684 <I2C_WaitOnFlagUntilTimeout>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d001      	beq.n	800927a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e0e1      	b.n	800943e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2221      	movs	r2, #33	; 0x21
 800927e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2210      	movs	r2, #16
 8009286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2200      	movs	r2, #0
 800928e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	893a      	ldrh	r2, [r7, #8]
 800929a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	2bff      	cmp	r3, #255	; 0xff
 80092aa:	d906      	bls.n	80092ba <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	22ff      	movs	r2, #255	; 0xff
 80092b0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80092b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80092b6:	617b      	str	r3, [r7, #20]
 80092b8:	e007      	b.n	80092ca <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092be:	b29a      	uxth	r2, r3
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80092c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092c8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d024      	beq.n	800931c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d6:	781a      	ldrb	r2, [r3, #0]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e2:	1c5a      	adds	r2, r3, #1
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	3b01      	subs	r3, #1
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092fa:	3b01      	subs	r3, #1
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009306:	b2db      	uxtb	r3, r3
 8009308:	3301      	adds	r3, #1
 800930a:	b2da      	uxtb	r2, r3
 800930c:	8979      	ldrh	r1, [r7, #10]
 800930e:	4b4e      	ldr	r3, [pc, #312]	; (8009448 <HAL_I2C_Master_Transmit+0x228>)
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f000 fc05 	bl	8009b24 <I2C_TransferConfig>
 800931a:	e066      	b.n	80093ea <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009320:	b2da      	uxtb	r2, r3
 8009322:	8979      	ldrh	r1, [r7, #10]
 8009324:	4b48      	ldr	r3, [pc, #288]	; (8009448 <HAL_I2C_Master_Transmit+0x228>)
 8009326:	9300      	str	r3, [sp, #0]
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f000 fbfa 	bl	8009b24 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009330:	e05b      	b.n	80093ea <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009332:	693a      	ldr	r2, [r7, #16]
 8009334:	6a39      	ldr	r1, [r7, #32]
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f000 f9fd 	bl	8009736 <I2C_WaitOnTXISFlagUntilTimeout>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d001      	beq.n	8009346 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	e07b      	b.n	800943e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934a:	781a      	ldrb	r2, [r3, #0]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009356:	1c5a      	adds	r2, r3, #1
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009360:	b29b      	uxth	r3, r3
 8009362:	3b01      	subs	r3, #1
 8009364:	b29a      	uxth	r2, r3
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800936e:	3b01      	subs	r3, #1
 8009370:	b29a      	uxth	r2, r3
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800937a:	b29b      	uxth	r3, r3
 800937c:	2b00      	cmp	r3, #0
 800937e:	d034      	beq.n	80093ea <HAL_I2C_Master_Transmit+0x1ca>
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009384:	2b00      	cmp	r3, #0
 8009386:	d130      	bne.n	80093ea <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	6a3b      	ldr	r3, [r7, #32]
 800938e:	2200      	movs	r2, #0
 8009390:	2180      	movs	r1, #128	; 0x80
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f000 f976 	bl	8009684 <I2C_WaitOnFlagUntilTimeout>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d001      	beq.n	80093a2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	e04d      	b.n	800943e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	2bff      	cmp	r3, #255	; 0xff
 80093aa:	d90e      	bls.n	80093ca <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	22ff      	movs	r2, #255	; 0xff
 80093b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093b6:	b2da      	uxtb	r2, r3
 80093b8:	8979      	ldrh	r1, [r7, #10]
 80093ba:	2300      	movs	r3, #0
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f000 fbae 	bl	8009b24 <I2C_TransferConfig>
 80093c8:	e00f      	b.n	80093ea <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093d8:	b2da      	uxtb	r2, r3
 80093da:	8979      	ldrh	r1, [r7, #10]
 80093dc:	2300      	movs	r3, #0
 80093de:	9300      	str	r3, [sp, #0]
 80093e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f000 fb9d 	bl	8009b24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d19e      	bne.n	8009332 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093f4:	693a      	ldr	r2, [r7, #16]
 80093f6:	6a39      	ldr	r1, [r7, #32]
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f000 f9e3 	bl	80097c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d001      	beq.n	8009408 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e01a      	b.n	800943e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2220      	movs	r2, #32
 800940e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	6859      	ldr	r1, [r3, #4]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	4b0c      	ldr	r3, [pc, #48]	; (800944c <HAL_I2C_Master_Transmit+0x22c>)
 800941c:	400b      	ands	r3, r1
 800941e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2220      	movs	r2, #32
 8009424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2200      	movs	r2, #0
 800942c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2200      	movs	r2, #0
 8009434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009438:	2300      	movs	r3, #0
 800943a:	e000      	b.n	800943e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800943c:	2302      	movs	r3, #2
  }
}
 800943e:	4618      	mov	r0, r3
 8009440:	3718      	adds	r7, #24
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	80002000 	.word	0x80002000
 800944c:	fe00e800 	.word	0xfe00e800

08009450 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b088      	sub	sp, #32
 8009454:	af02      	add	r7, sp, #8
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	607a      	str	r2, [r7, #4]
 800945a:	461a      	mov	r2, r3
 800945c:	460b      	mov	r3, r1
 800945e:	817b      	strh	r3, [r7, #10]
 8009460:	4613      	mov	r3, r2
 8009462:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800946a:	b2db      	uxtb	r3, r3
 800946c:	2b20      	cmp	r3, #32
 800946e:	f040 80db 	bne.w	8009628 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009478:	2b01      	cmp	r3, #1
 800947a:	d101      	bne.n	8009480 <HAL_I2C_Master_Receive+0x30>
 800947c:	2302      	movs	r3, #2
 800947e:	e0d4      	b.n	800962a <HAL_I2C_Master_Receive+0x1da>
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2201      	movs	r2, #1
 8009484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009488:	f7fa fcdc 	bl	8003e44 <HAL_GetTick>
 800948c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	9300      	str	r3, [sp, #0]
 8009492:	2319      	movs	r3, #25
 8009494:	2201      	movs	r2, #1
 8009496:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f000 f8f2 	bl	8009684 <I2C_WaitOnFlagUntilTimeout>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d001      	beq.n	80094aa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e0bf      	b.n	800962a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2222      	movs	r2, #34	; 0x22
 80094ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2210      	movs	r2, #16
 80094b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2200      	movs	r2, #0
 80094be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	893a      	ldrh	r2, [r7, #8]
 80094ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2200      	movs	r2, #0
 80094d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	2bff      	cmp	r3, #255	; 0xff
 80094da:	d90e      	bls.n	80094fa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	22ff      	movs	r2, #255	; 0xff
 80094e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094e6:	b2da      	uxtb	r2, r3
 80094e8:	8979      	ldrh	r1, [r7, #10]
 80094ea:	4b52      	ldr	r3, [pc, #328]	; (8009634 <HAL_I2C_Master_Receive+0x1e4>)
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f000 fb16 	bl	8009b24 <I2C_TransferConfig>
 80094f8:	e06d      	b.n	80095d6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094fe:	b29a      	uxth	r2, r3
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009508:	b2da      	uxtb	r2, r3
 800950a:	8979      	ldrh	r1, [r7, #10]
 800950c:	4b49      	ldr	r3, [pc, #292]	; (8009634 <HAL_I2C_Master_Receive+0x1e4>)
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009514:	68f8      	ldr	r0, [r7, #12]
 8009516:	f000 fb05 	bl	8009b24 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800951a:	e05c      	b.n	80095d6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800951c:	697a      	ldr	r2, [r7, #20]
 800951e:	6a39      	ldr	r1, [r7, #32]
 8009520:	68f8      	ldr	r0, [r7, #12]
 8009522:	f000 f993 	bl	800984c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d001      	beq.n	8009530 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	e07c      	b.n	800962a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953a:	b2d2      	uxtb	r2, r2
 800953c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009542:	1c5a      	adds	r2, r3, #1
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800954c:	3b01      	subs	r3, #1
 800954e:	b29a      	uxth	r2, r3
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009558:	b29b      	uxth	r3, r3
 800955a:	3b01      	subs	r3, #1
 800955c:	b29a      	uxth	r2, r3
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009566:	b29b      	uxth	r3, r3
 8009568:	2b00      	cmp	r3, #0
 800956a:	d034      	beq.n	80095d6 <HAL_I2C_Master_Receive+0x186>
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009570:	2b00      	cmp	r3, #0
 8009572:	d130      	bne.n	80095d6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	9300      	str	r3, [sp, #0]
 8009578:	6a3b      	ldr	r3, [r7, #32]
 800957a:	2200      	movs	r2, #0
 800957c:	2180      	movs	r1, #128	; 0x80
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	f000 f880 	bl	8009684 <I2C_WaitOnFlagUntilTimeout>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e04d      	b.n	800962a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009592:	b29b      	uxth	r3, r3
 8009594:	2bff      	cmp	r3, #255	; 0xff
 8009596:	d90e      	bls.n	80095b6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	22ff      	movs	r2, #255	; 0xff
 800959c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095a2:	b2da      	uxtb	r2, r3
 80095a4:	8979      	ldrh	r1, [r7, #10]
 80095a6:	2300      	movs	r3, #0
 80095a8:	9300      	str	r3, [sp, #0]
 80095aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	f000 fab8 	bl	8009b24 <I2C_TransferConfig>
 80095b4:	e00f      	b.n	80095d6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095c4:	b2da      	uxtb	r2, r3
 80095c6:	8979      	ldrh	r1, [r7, #10]
 80095c8:	2300      	movs	r3, #0
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f000 faa7 	bl	8009b24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095da:	b29b      	uxth	r3, r3
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d19d      	bne.n	800951c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095e0:	697a      	ldr	r2, [r7, #20]
 80095e2:	6a39      	ldr	r1, [r7, #32]
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f000 f8ed 	bl	80097c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d001      	beq.n	80095f4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e01a      	b.n	800962a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2220      	movs	r2, #32
 80095fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	6859      	ldr	r1, [r3, #4]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	4b0c      	ldr	r3, [pc, #48]	; (8009638 <HAL_I2C_Master_Receive+0x1e8>)
 8009608:	400b      	ands	r3, r1
 800960a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2220      	movs	r2, #32
 8009610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2200      	movs	r2, #0
 8009618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2200      	movs	r2, #0
 8009620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009624:	2300      	movs	r3, #0
 8009626:	e000      	b.n	800962a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009628:	2302      	movs	r3, #2
  }
}
 800962a:	4618      	mov	r0, r3
 800962c:	3718      	adds	r7, #24
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	80002400 	.word	0x80002400
 8009638:	fe00e800 	.word	0xfe00e800

0800963c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	699b      	ldr	r3, [r3, #24]
 800964a:	f003 0302 	and.w	r3, r3, #2
 800964e:	2b02      	cmp	r3, #2
 8009650:	d103      	bne.n	800965a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2200      	movs	r2, #0
 8009658:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	699b      	ldr	r3, [r3, #24]
 8009660:	f003 0301 	and.w	r3, r3, #1
 8009664:	2b01      	cmp	r3, #1
 8009666:	d007      	beq.n	8009678 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	699a      	ldr	r2, [r3, #24]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f042 0201 	orr.w	r2, r2, #1
 8009676:	619a      	str	r2, [r3, #24]
  }
}
 8009678:	bf00      	nop
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	603b      	str	r3, [r7, #0]
 8009690:	4613      	mov	r3, r2
 8009692:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009694:	e03b      	b.n	800970e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009696:	69ba      	ldr	r2, [r7, #24]
 8009698:	6839      	ldr	r1, [r7, #0]
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f000 f962 	bl	8009964 <I2C_IsErrorOccurred>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d001      	beq.n	80096aa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	e041      	b.n	800972e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096b0:	d02d      	beq.n	800970e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096b2:	f7fa fbc7 	bl	8003e44 <HAL_GetTick>
 80096b6:	4602      	mov	r2, r0
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	683a      	ldr	r2, [r7, #0]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d302      	bcc.n	80096c8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d122      	bne.n	800970e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	699a      	ldr	r2, [r3, #24]
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	4013      	ands	r3, r2
 80096d2:	68ba      	ldr	r2, [r7, #8]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	bf0c      	ite	eq
 80096d8:	2301      	moveq	r3, #1
 80096da:	2300      	movne	r3, #0
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	461a      	mov	r2, r3
 80096e0:	79fb      	ldrb	r3, [r7, #7]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d113      	bne.n	800970e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ea:	f043 0220 	orr.w	r2, r3, #32
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2220      	movs	r2, #32
 80096f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2200      	movs	r2, #0
 8009706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	e00f      	b.n	800972e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	699a      	ldr	r2, [r3, #24]
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	4013      	ands	r3, r2
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	429a      	cmp	r2, r3
 800971c:	bf0c      	ite	eq
 800971e:	2301      	moveq	r3, #1
 8009720:	2300      	movne	r3, #0
 8009722:	b2db      	uxtb	r3, r3
 8009724:	461a      	mov	r2, r3
 8009726:	79fb      	ldrb	r3, [r7, #7]
 8009728:	429a      	cmp	r2, r3
 800972a:	d0b4      	beq.n	8009696 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b084      	sub	sp, #16
 800973a:	af00      	add	r7, sp, #0
 800973c:	60f8      	str	r0, [r7, #12]
 800973e:	60b9      	str	r1, [r7, #8]
 8009740:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009742:	e033      	b.n	80097ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	68b9      	ldr	r1, [r7, #8]
 8009748:	68f8      	ldr	r0, [r7, #12]
 800974a:	f000 f90b 	bl	8009964 <I2C_IsErrorOccurred>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d001      	beq.n	8009758 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	e031      	b.n	80097bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800975e:	d025      	beq.n	80097ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009760:	f7fa fb70 	bl	8003e44 <HAL_GetTick>
 8009764:	4602      	mov	r2, r0
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	1ad3      	subs	r3, r2, r3
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	429a      	cmp	r2, r3
 800976e:	d302      	bcc.n	8009776 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d11a      	bne.n	80097ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	699b      	ldr	r3, [r3, #24]
 800977c:	f003 0302 	and.w	r3, r3, #2
 8009780:	2b02      	cmp	r3, #2
 8009782:	d013      	beq.n	80097ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009788:	f043 0220 	orr.w	r2, r3, #32
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2220      	movs	r2, #32
 8009794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2200      	movs	r2, #0
 800979c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e007      	b.n	80097bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	699b      	ldr	r3, [r3, #24]
 80097b2:	f003 0302 	and.w	r3, r3, #2
 80097b6:	2b02      	cmp	r3, #2
 80097b8:	d1c4      	bne.n	8009744 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80097d0:	e02f      	b.n	8009832 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	68b9      	ldr	r1, [r7, #8]
 80097d6:	68f8      	ldr	r0, [r7, #12]
 80097d8:	f000 f8c4 	bl	8009964 <I2C_IsErrorOccurred>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d001      	beq.n	80097e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	e02d      	b.n	8009842 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097e6:	f7fa fb2d 	bl	8003e44 <HAL_GetTick>
 80097ea:	4602      	mov	r2, r0
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	68ba      	ldr	r2, [r7, #8]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d302      	bcc.n	80097fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d11a      	bne.n	8009832 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	699b      	ldr	r3, [r3, #24]
 8009802:	f003 0320 	and.w	r3, r3, #32
 8009806:	2b20      	cmp	r3, #32
 8009808:	d013      	beq.n	8009832 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800980e:	f043 0220 	orr.w	r2, r3, #32
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2220      	movs	r2, #32
 800981a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2200      	movs	r2, #0
 8009822:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2200      	movs	r2, #0
 800982a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	e007      	b.n	8009842 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	699b      	ldr	r3, [r3, #24]
 8009838:	f003 0320 	and.w	r3, r3, #32
 800983c:	2b20      	cmp	r3, #32
 800983e:	d1c8      	bne.n	80097d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
	...

0800984c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b086      	sub	sp, #24
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009858:	2300      	movs	r3, #0
 800985a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800985c:	e071      	b.n	8009942 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	68b9      	ldr	r1, [r7, #8]
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f000 f87e 	bl	8009964 <I2C_IsErrorOccurred>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d001      	beq.n	8009872 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	699b      	ldr	r3, [r3, #24]
 8009878:	f003 0320 	and.w	r3, r3, #32
 800987c:	2b20      	cmp	r3, #32
 800987e:	d13b      	bne.n	80098f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009880:	7dfb      	ldrb	r3, [r7, #23]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d138      	bne.n	80098f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	699b      	ldr	r3, [r3, #24]
 800988c:	f003 0304 	and.w	r3, r3, #4
 8009890:	2b04      	cmp	r3, #4
 8009892:	d105      	bne.n	80098a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009898:	2b00      	cmp	r3, #0
 800989a:	d001      	beq.n	80098a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800989c:	2300      	movs	r3, #0
 800989e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	699b      	ldr	r3, [r3, #24]
 80098a6:	f003 0310 	and.w	r3, r3, #16
 80098aa:	2b10      	cmp	r3, #16
 80098ac:	d121      	bne.n	80098f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2210      	movs	r2, #16
 80098b4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2204      	movs	r2, #4
 80098ba:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2220      	movs	r2, #32
 80098c2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	6859      	ldr	r1, [r3, #4]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	4b24      	ldr	r3, [pc, #144]	; (8009960 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80098d0:	400b      	ands	r3, r1
 80098d2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2220      	movs	r2, #32
 80098d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2200      	movs	r2, #0
 80098e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80098ec:	2301      	movs	r3, #1
 80098ee:	75fb      	strb	r3, [r7, #23]
 80098f0:	e002      	b.n	80098f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2200      	movs	r2, #0
 80098f6:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80098f8:	f7fa faa4 	bl	8003e44 <HAL_GetTick>
 80098fc:	4602      	mov	r2, r0
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	1ad3      	subs	r3, r2, r3
 8009902:	68ba      	ldr	r2, [r7, #8]
 8009904:	429a      	cmp	r2, r3
 8009906:	d302      	bcc.n	800990e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d119      	bne.n	8009942 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800990e:	7dfb      	ldrb	r3, [r7, #23]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d116      	bne.n	8009942 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	699b      	ldr	r3, [r3, #24]
 800991a:	f003 0304 	and.w	r3, r3, #4
 800991e:	2b04      	cmp	r3, #4
 8009920:	d00f      	beq.n	8009942 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009926:	f043 0220 	orr.w	r2, r3, #32
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2220      	movs	r2, #32
 8009932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2200      	movs	r2, #0
 800993a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	699b      	ldr	r3, [r3, #24]
 8009948:	f003 0304 	and.w	r3, r3, #4
 800994c:	2b04      	cmp	r3, #4
 800994e:	d002      	beq.n	8009956 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009950:	7dfb      	ldrb	r3, [r7, #23]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d083      	beq.n	800985e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009956:	7dfb      	ldrb	r3, [r7, #23]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3718      	adds	r7, #24
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	fe00e800 	.word	0xfe00e800

08009964 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b08a      	sub	sp, #40	; 0x28
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009970:	2300      	movs	r3, #0
 8009972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	699b      	ldr	r3, [r3, #24]
 800997c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800997e:	2300      	movs	r3, #0
 8009980:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	f003 0310 	and.w	r3, r3, #16
 800998c:	2b00      	cmp	r3, #0
 800998e:	d068      	beq.n	8009a62 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2210      	movs	r2, #16
 8009996:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009998:	e049      	b.n	8009a2e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099a0:	d045      	beq.n	8009a2e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80099a2:	f7fa fa4f 	bl	8003e44 <HAL_GetTick>
 80099a6:	4602      	mov	r2, r0
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	1ad3      	subs	r3, r2, r3
 80099ac:	68ba      	ldr	r2, [r7, #8]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d302      	bcc.n	80099b8 <I2C_IsErrorOccurred+0x54>
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d13a      	bne.n	8009a2e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80099ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	699b      	ldr	r3, [r3, #24]
 80099d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099da:	d121      	bne.n	8009a20 <I2C_IsErrorOccurred+0xbc>
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099e2:	d01d      	beq.n	8009a20 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80099e4:	7cfb      	ldrb	r3, [r7, #19]
 80099e6:	2b20      	cmp	r3, #32
 80099e8:	d01a      	beq.n	8009a20 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	685a      	ldr	r2, [r3, #4]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80099f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80099fa:	f7fa fa23 	bl	8003e44 <HAL_GetTick>
 80099fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a00:	e00e      	b.n	8009a20 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009a02:	f7fa fa1f 	bl	8003e44 <HAL_GetTick>
 8009a06:	4602      	mov	r2, r0
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	1ad3      	subs	r3, r2, r3
 8009a0c:	2b19      	cmp	r3, #25
 8009a0e:	d907      	bls.n	8009a20 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009a10:	6a3b      	ldr	r3, [r7, #32]
 8009a12:	f043 0320 	orr.w	r3, r3, #32
 8009a16:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009a1e:	e006      	b.n	8009a2e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	699b      	ldr	r3, [r3, #24]
 8009a26:	f003 0320 	and.w	r3, r3, #32
 8009a2a:	2b20      	cmp	r3, #32
 8009a2c:	d1e9      	bne.n	8009a02 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	f003 0320 	and.w	r3, r3, #32
 8009a38:	2b20      	cmp	r3, #32
 8009a3a:	d003      	beq.n	8009a44 <I2C_IsErrorOccurred+0xe0>
 8009a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d0aa      	beq.n	800999a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009a44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d103      	bne.n	8009a54 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2220      	movs	r2, #32
 8009a52:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009a54:	6a3b      	ldr	r3, [r7, #32]
 8009a56:	f043 0304 	orr.w	r3, r3, #4
 8009a5a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	699b      	ldr	r3, [r3, #24]
 8009a68:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00b      	beq.n	8009a8c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009a74:	6a3b      	ldr	r3, [r7, #32]
 8009a76:	f043 0301 	orr.w	r3, r3, #1
 8009a7a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a86:	2301      	movs	r3, #1
 8009a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d00b      	beq.n	8009aae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009a96:	6a3b      	ldr	r3, [r7, #32]
 8009a98:	f043 0308 	orr.w	r3, r3, #8
 8009a9c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009aa6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d00b      	beq.n	8009ad0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009ab8:	6a3b      	ldr	r3, [r7, #32]
 8009aba:	f043 0302 	orr.w	r3, r3, #2
 8009abe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ac8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d01c      	beq.n	8009b12 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f7ff fdaf 	bl	800963c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	6859      	ldr	r1, [r3, #4]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	4b0d      	ldr	r3, [pc, #52]	; (8009b20 <I2C_IsErrorOccurred+0x1bc>)
 8009aea:	400b      	ands	r3, r1
 8009aec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009af2:	6a3b      	ldr	r3, [r7, #32]
 8009af4:	431a      	orrs	r2, r3
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2220      	movs	r2, #32
 8009afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009b12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3728      	adds	r7, #40	; 0x28
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	fe00e800 	.word	0xfe00e800

08009b24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b087      	sub	sp, #28
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	607b      	str	r3, [r7, #4]
 8009b2e:	460b      	mov	r3, r1
 8009b30:	817b      	strh	r3, [r7, #10]
 8009b32:	4613      	mov	r3, r2
 8009b34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b36:	897b      	ldrh	r3, [r7, #10]
 8009b38:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009b3c:	7a7b      	ldrb	r3, [r7, #9]
 8009b3e:	041b      	lsls	r3, r3, #16
 8009b40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b44:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b4a:	6a3b      	ldr	r3, [r7, #32]
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b52:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	685a      	ldr	r2, [r3, #4]
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	0d5b      	lsrs	r3, r3, #21
 8009b5e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009b62:	4b08      	ldr	r3, [pc, #32]	; (8009b84 <I2C_TransferConfig+0x60>)
 8009b64:	430b      	orrs	r3, r1
 8009b66:	43db      	mvns	r3, r3
 8009b68:	ea02 0103 	and.w	r1, r2, r3
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	697a      	ldr	r2, [r7, #20]
 8009b72:	430a      	orrs	r2, r1
 8009b74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009b76:	bf00      	nop
 8009b78:	371c      	adds	r7, #28
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	03ff63ff 	.word	0x03ff63ff

08009b88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	2b20      	cmp	r3, #32
 8009b9c:	d138      	bne.n	8009c10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d101      	bne.n	8009bac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009ba8:	2302      	movs	r3, #2
 8009baa:	e032      	b.n	8009c12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2224      	movs	r2, #36	; 0x24
 8009bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f022 0201 	bic.w	r2, r2, #1
 8009bca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009bda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	6819      	ldr	r1, [r3, #0]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	683a      	ldr	r2, [r7, #0]
 8009be8:	430a      	orrs	r2, r1
 8009bea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f042 0201 	orr.w	r2, r2, #1
 8009bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2220      	movs	r2, #32
 8009c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	e000      	b.n	8009c12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009c10:	2302      	movs	r3, #2
  }
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	370c      	adds	r7, #12
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr

08009c1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009c1e:	b480      	push	{r7}
 8009c20:	b085      	sub	sp, #20
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
 8009c26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	2b20      	cmp	r3, #32
 8009c32:	d139      	bne.n	8009ca8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d101      	bne.n	8009c42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009c3e:	2302      	movs	r3, #2
 8009c40:	e033      	b.n	8009caa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2201      	movs	r2, #1
 8009c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2224      	movs	r2, #36	; 0x24
 8009c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f022 0201 	bic.w	r2, r2, #1
 8009c60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009c70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	021b      	lsls	r3, r3, #8
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	68fa      	ldr	r2, [r7, #12]
 8009c82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f042 0201 	orr.w	r2, r2, #1
 8009c92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2220      	movs	r2, #32
 8009c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	e000      	b.n	8009caa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009ca8:	2302      	movs	r3, #2
  }
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3714      	adds	r7, #20
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr
	...

08009cb8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009cc0:	4b0d      	ldr	r3, [pc, #52]	; (8009cf8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009cc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009cc6:	4a0c      	ldr	r2, [pc, #48]	; (8009cf8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009cc8:	f043 0302 	orr.w	r3, r3, #2
 8009ccc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009cd0:	4b09      	ldr	r3, [pc, #36]	; (8009cf8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009cd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009cd6:	f003 0302 	and.w	r3, r3, #2
 8009cda:	60fb      	str	r3, [r7, #12]
 8009cdc:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009cde:	4b07      	ldr	r3, [pc, #28]	; (8009cfc <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009ce0:	685a      	ldr	r2, [r3, #4]
 8009ce2:	4906      	ldr	r1, [pc, #24]	; (8009cfc <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	604b      	str	r3, [r1, #4]
}
 8009cea:	bf00      	nop
 8009cec:	3714      	adds	r7, #20
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	58024400 	.word	0x58024400
 8009cfc:	58000400 	.word	0x58000400

08009d00 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	460b      	mov	r3, r1
 8009d0a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8009d0c:	4b18      	ldr	r3, [pc, #96]	; (8009d70 <HAL_PWR_EnterSTOPMode+0x70>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f023 0201 	bic.w	r2, r3, #1
 8009d14:	4916      	ldr	r1, [pc, #88]	; (8009d70 <HAL_PWR_EnterSTOPMode+0x70>)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8009d1c:	4b14      	ldr	r3, [pc, #80]	; (8009d70 <HAL_PWR_EnterSTOPMode+0x70>)
 8009d1e:	691b      	ldr	r3, [r3, #16]
 8009d20:	4a13      	ldr	r2, [pc, #76]	; (8009d70 <HAL_PWR_EnterSTOPMode+0x70>)
 8009d22:	f023 0305 	bic.w	r3, r3, #5
 8009d26:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8009d28:	4b11      	ldr	r3, [pc, #68]	; (8009d70 <HAL_PWR_EnterSTOPMode+0x70>)
 8009d2a:	691b      	ldr	r3, [r3, #16]
 8009d2c:	4a10      	ldr	r2, [pc, #64]	; (8009d70 <HAL_PWR_EnterSTOPMode+0x70>)
 8009d2e:	f023 0302 	bic.w	r3, r3, #2
 8009d32:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009d34:	4b0f      	ldr	r3, [pc, #60]	; (8009d74 <HAL_PWR_EnterSTOPMode+0x74>)
 8009d36:	691b      	ldr	r3, [r3, #16]
 8009d38:	4a0e      	ldr	r2, [pc, #56]	; (8009d74 <HAL_PWR_EnterSTOPMode+0x74>)
 8009d3a:	f043 0304 	orr.w	r3, r3, #4
 8009d3e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8009d40:	f3bf 8f4f 	dsb	sy
}
 8009d44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009d46:	f3bf 8f6f 	isb	sy
}
 8009d4a:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8009d4c:	78fb      	ldrb	r3, [r7, #3]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d101      	bne.n	8009d56 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8009d52:	bf30      	wfi
 8009d54:	e000      	b.n	8009d58 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8009d56:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009d58:	4b06      	ldr	r3, [pc, #24]	; (8009d74 <HAL_PWR_EnterSTOPMode+0x74>)
 8009d5a:	691b      	ldr	r3, [r3, #16]
 8009d5c:	4a05      	ldr	r2, [pc, #20]	; (8009d74 <HAL_PWR_EnterSTOPMode+0x74>)
 8009d5e:	f023 0304 	bic.w	r3, r3, #4
 8009d62:	6113      	str	r3, [r2, #16]
}
 8009d64:	bf00      	nop
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr
 8009d70:	58024800 	.word	0x58024800
 8009d74:	e000ed00 	.word	0xe000ed00

08009d78 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009d80:	4b19      	ldr	r3, [pc, #100]	; (8009de8 <HAL_PWREx_ConfigSupply+0x70>)
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	f003 0304 	and.w	r3, r3, #4
 8009d88:	2b04      	cmp	r3, #4
 8009d8a:	d00a      	beq.n	8009da2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009d8c:	4b16      	ldr	r3, [pc, #88]	; (8009de8 <HAL_PWREx_ConfigSupply+0x70>)
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	f003 0307 	and.w	r3, r3, #7
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d001      	beq.n	8009d9e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e01f      	b.n	8009dde <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	e01d      	b.n	8009dde <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009da2:	4b11      	ldr	r3, [pc, #68]	; (8009de8 <HAL_PWREx_ConfigSupply+0x70>)
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	f023 0207 	bic.w	r2, r3, #7
 8009daa:	490f      	ldr	r1, [pc, #60]	; (8009de8 <HAL_PWREx_ConfigSupply+0x70>)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009db2:	f7fa f847 	bl	8003e44 <HAL_GetTick>
 8009db6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009db8:	e009      	b.n	8009dce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009dba:	f7fa f843 	bl	8003e44 <HAL_GetTick>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	1ad3      	subs	r3, r2, r3
 8009dc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009dc8:	d901      	bls.n	8009dce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e007      	b.n	8009dde <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009dce:	4b06      	ldr	r3, [pc, #24]	; (8009de8 <HAL_PWREx_ConfigSupply+0x70>)
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dda:	d1ee      	bne.n	8009dba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	58024800 	.word	0x58024800

08009dec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b08c      	sub	sp, #48	; 0x30
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d102      	bne.n	8009e00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	f000 bc48 	b.w	800a690 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f003 0301 	and.w	r3, r3, #1
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f000 8088 	beq.w	8009f1e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e0e:	4b99      	ldr	r3, [pc, #612]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009e18:	4b96      	ldr	r3, [pc, #600]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e20:	2b10      	cmp	r3, #16
 8009e22:	d007      	beq.n	8009e34 <HAL_RCC_OscConfig+0x48>
 8009e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e26:	2b18      	cmp	r3, #24
 8009e28:	d111      	bne.n	8009e4e <HAL_RCC_OscConfig+0x62>
 8009e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2c:	f003 0303 	and.w	r3, r3, #3
 8009e30:	2b02      	cmp	r3, #2
 8009e32:	d10c      	bne.n	8009e4e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e34:	4b8f      	ldr	r3, [pc, #572]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d06d      	beq.n	8009f1c <HAL_RCC_OscConfig+0x130>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d169      	bne.n	8009f1c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	f000 bc21 	b.w	800a690 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e56:	d106      	bne.n	8009e66 <HAL_RCC_OscConfig+0x7a>
 8009e58:	4b86      	ldr	r3, [pc, #536]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a85      	ldr	r2, [pc, #532]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e62:	6013      	str	r3, [r2, #0]
 8009e64:	e02e      	b.n	8009ec4 <HAL_RCC_OscConfig+0xd8>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d10c      	bne.n	8009e88 <HAL_RCC_OscConfig+0x9c>
 8009e6e:	4b81      	ldr	r3, [pc, #516]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a80      	ldr	r2, [pc, #512]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e78:	6013      	str	r3, [r2, #0]
 8009e7a:	4b7e      	ldr	r3, [pc, #504]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a7d      	ldr	r2, [pc, #500]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009e80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e84:	6013      	str	r3, [r2, #0]
 8009e86:	e01d      	b.n	8009ec4 <HAL_RCC_OscConfig+0xd8>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e90:	d10c      	bne.n	8009eac <HAL_RCC_OscConfig+0xc0>
 8009e92:	4b78      	ldr	r3, [pc, #480]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a77      	ldr	r2, [pc, #476]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e9c:	6013      	str	r3, [r2, #0]
 8009e9e:	4b75      	ldr	r3, [pc, #468]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a74      	ldr	r2, [pc, #464]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ea8:	6013      	str	r3, [r2, #0]
 8009eaa:	e00b      	b.n	8009ec4 <HAL_RCC_OscConfig+0xd8>
 8009eac:	4b71      	ldr	r3, [pc, #452]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a70      	ldr	r2, [pc, #448]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009eb6:	6013      	str	r3, [r2, #0]
 8009eb8:	4b6e      	ldr	r3, [pc, #440]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a6d      	ldr	r2, [pc, #436]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d013      	beq.n	8009ef4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ecc:	f7f9 ffba 	bl	8003e44 <HAL_GetTick>
 8009ed0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ed2:	e008      	b.n	8009ee6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ed4:	f7f9 ffb6 	bl	8003e44 <HAL_GetTick>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	2b64      	cmp	r3, #100	; 0x64
 8009ee0:	d901      	bls.n	8009ee6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009ee2:	2303      	movs	r3, #3
 8009ee4:	e3d4      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ee6:	4b63      	ldr	r3, [pc, #396]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d0f0      	beq.n	8009ed4 <HAL_RCC_OscConfig+0xe8>
 8009ef2:	e014      	b.n	8009f1e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ef4:	f7f9 ffa6 	bl	8003e44 <HAL_GetTick>
 8009ef8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009efa:	e008      	b.n	8009f0e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009efc:	f7f9 ffa2 	bl	8003e44 <HAL_GetTick>
 8009f00:	4602      	mov	r2, r0
 8009f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f04:	1ad3      	subs	r3, r2, r3
 8009f06:	2b64      	cmp	r3, #100	; 0x64
 8009f08:	d901      	bls.n	8009f0e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009f0a:	2303      	movs	r3, #3
 8009f0c:	e3c0      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009f0e:	4b59      	ldr	r3, [pc, #356]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d1f0      	bne.n	8009efc <HAL_RCC_OscConfig+0x110>
 8009f1a:	e000      	b.n	8009f1e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f003 0302 	and.w	r3, r3, #2
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	f000 80ca 	beq.w	800a0c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f2c:	4b51      	ldr	r3, [pc, #324]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f34:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f36:	4b4f      	ldr	r3, [pc, #316]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f3a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009f3c:	6a3b      	ldr	r3, [r7, #32]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d007      	beq.n	8009f52 <HAL_RCC_OscConfig+0x166>
 8009f42:	6a3b      	ldr	r3, [r7, #32]
 8009f44:	2b18      	cmp	r3, #24
 8009f46:	d156      	bne.n	8009ff6 <HAL_RCC_OscConfig+0x20a>
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	f003 0303 	and.w	r3, r3, #3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d151      	bne.n	8009ff6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f52:	4b48      	ldr	r3, [pc, #288]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 0304 	and.w	r3, r3, #4
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d005      	beq.n	8009f6a <HAL_RCC_OscConfig+0x17e>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d101      	bne.n	8009f6a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	e392      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009f6a:	4b42      	ldr	r3, [pc, #264]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f023 0219 	bic.w	r2, r3, #25
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	493f      	ldr	r1, [pc, #252]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f7c:	f7f9 ff62 	bl	8003e44 <HAL_GetTick>
 8009f80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f82:	e008      	b.n	8009f96 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f84:	f7f9 ff5e 	bl	8003e44 <HAL_GetTick>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8c:	1ad3      	subs	r3, r2, r3
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	d901      	bls.n	8009f96 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009f92:	2303      	movs	r3, #3
 8009f94:	e37c      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f96:	4b37      	ldr	r3, [pc, #220]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 0304 	and.w	r3, r3, #4
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d0f0      	beq.n	8009f84 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fa2:	f7f9 ff5b 	bl	8003e5c <HAL_GetREVID>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	f241 0203 	movw	r2, #4099	; 0x1003
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d817      	bhi.n	8009fe0 <HAL_RCC_OscConfig+0x1f4>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	691b      	ldr	r3, [r3, #16]
 8009fb4:	2b40      	cmp	r3, #64	; 0x40
 8009fb6:	d108      	bne.n	8009fca <HAL_RCC_OscConfig+0x1de>
 8009fb8:	4b2e      	ldr	r3, [pc, #184]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009fc0:	4a2c      	ldr	r2, [pc, #176]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fc6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fc8:	e07a      	b.n	800a0c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fca:	4b2a      	ldr	r3, [pc, #168]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	691b      	ldr	r3, [r3, #16]
 8009fd6:	031b      	lsls	r3, r3, #12
 8009fd8:	4926      	ldr	r1, [pc, #152]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fde:	e06f      	b.n	800a0c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fe0:	4b24      	ldr	r3, [pc, #144]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	691b      	ldr	r3, [r3, #16]
 8009fec:	061b      	lsls	r3, r3, #24
 8009fee:	4921      	ldr	r1, [pc, #132]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ff4:	e064      	b.n	800a0c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d047      	beq.n	800a08e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009ffe:	4b1d      	ldr	r3, [pc, #116]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f023 0219 	bic.w	r2, r3, #25
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	491a      	ldr	r1, [pc, #104]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 800a00c:	4313      	orrs	r3, r2
 800a00e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a010:	f7f9 ff18 	bl	8003e44 <HAL_GetTick>
 800a014:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a016:	e008      	b.n	800a02a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a018:	f7f9 ff14 	bl	8003e44 <HAL_GetTick>
 800a01c:	4602      	mov	r2, r0
 800a01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	2b02      	cmp	r3, #2
 800a024:	d901      	bls.n	800a02a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a026:	2303      	movs	r3, #3
 800a028:	e332      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a02a:	4b12      	ldr	r3, [pc, #72]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f003 0304 	and.w	r3, r3, #4
 800a032:	2b00      	cmp	r3, #0
 800a034:	d0f0      	beq.n	800a018 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a036:	f7f9 ff11 	bl	8003e5c <HAL_GetREVID>
 800a03a:	4603      	mov	r3, r0
 800a03c:	f241 0203 	movw	r2, #4099	; 0x1003
 800a040:	4293      	cmp	r3, r2
 800a042:	d819      	bhi.n	800a078 <HAL_RCC_OscConfig+0x28c>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	2b40      	cmp	r3, #64	; 0x40
 800a04a:	d108      	bne.n	800a05e <HAL_RCC_OscConfig+0x272>
 800a04c:	4b09      	ldr	r3, [pc, #36]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a054:	4a07      	ldr	r2, [pc, #28]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 800a056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a05a:	6053      	str	r3, [r2, #4]
 800a05c:	e030      	b.n	800a0c0 <HAL_RCC_OscConfig+0x2d4>
 800a05e:	4b05      	ldr	r3, [pc, #20]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	031b      	lsls	r3, r3, #12
 800a06c:	4901      	ldr	r1, [pc, #4]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 800a06e:	4313      	orrs	r3, r2
 800a070:	604b      	str	r3, [r1, #4]
 800a072:	e025      	b.n	800a0c0 <HAL_RCC_OscConfig+0x2d4>
 800a074:	58024400 	.word	0x58024400
 800a078:	4b9a      	ldr	r3, [pc, #616]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	691b      	ldr	r3, [r3, #16]
 800a084:	061b      	lsls	r3, r3, #24
 800a086:	4997      	ldr	r1, [pc, #604]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a088:	4313      	orrs	r3, r2
 800a08a:	604b      	str	r3, [r1, #4]
 800a08c:	e018      	b.n	800a0c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a08e:	4b95      	ldr	r3, [pc, #596]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a94      	ldr	r2, [pc, #592]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a094:	f023 0301 	bic.w	r3, r3, #1
 800a098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a09a:	f7f9 fed3 	bl	8003e44 <HAL_GetTick>
 800a09e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a0a0:	e008      	b.n	800a0b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a0a2:	f7f9 fecf 	bl	8003e44 <HAL_GetTick>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0aa:	1ad3      	subs	r3, r2, r3
 800a0ac:	2b02      	cmp	r3, #2
 800a0ae:	d901      	bls.n	800a0b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	e2ed      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a0b4:	4b8b      	ldr	r3, [pc, #556]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f003 0304 	and.w	r3, r3, #4
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d1f0      	bne.n	800a0a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f003 0310 	and.w	r3, r3, #16
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f000 80a9 	beq.w	800a220 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0ce:	4b85      	ldr	r3, [pc, #532]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a0d8:	4b82      	ldr	r3, [pc, #520]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0dc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	2b08      	cmp	r3, #8
 800a0e2:	d007      	beq.n	800a0f4 <HAL_RCC_OscConfig+0x308>
 800a0e4:	69bb      	ldr	r3, [r7, #24]
 800a0e6:	2b18      	cmp	r3, #24
 800a0e8:	d13a      	bne.n	800a160 <HAL_RCC_OscConfig+0x374>
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	f003 0303 	and.w	r3, r3, #3
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d135      	bne.n	800a160 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a0f4:	4b7b      	ldr	r3, [pc, #492]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d005      	beq.n	800a10c <HAL_RCC_OscConfig+0x320>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	69db      	ldr	r3, [r3, #28]
 800a104:	2b80      	cmp	r3, #128	; 0x80
 800a106:	d001      	beq.n	800a10c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	e2c1      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a10c:	f7f9 fea6 	bl	8003e5c <HAL_GetREVID>
 800a110:	4603      	mov	r3, r0
 800a112:	f241 0203 	movw	r2, #4099	; 0x1003
 800a116:	4293      	cmp	r3, r2
 800a118:	d817      	bhi.n	800a14a <HAL_RCC_OscConfig+0x35e>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6a1b      	ldr	r3, [r3, #32]
 800a11e:	2b20      	cmp	r3, #32
 800a120:	d108      	bne.n	800a134 <HAL_RCC_OscConfig+0x348>
 800a122:	4b70      	ldr	r3, [pc, #448]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a12a:	4a6e      	ldr	r2, [pc, #440]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a12c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a130:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a132:	e075      	b.n	800a220 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a134:	4b6b      	ldr	r3, [pc, #428]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a1b      	ldr	r3, [r3, #32]
 800a140:	069b      	lsls	r3, r3, #26
 800a142:	4968      	ldr	r1, [pc, #416]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a144:	4313      	orrs	r3, r2
 800a146:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a148:	e06a      	b.n	800a220 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a14a:	4b66      	ldr	r3, [pc, #408]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a1b      	ldr	r3, [r3, #32]
 800a156:	061b      	lsls	r3, r3, #24
 800a158:	4962      	ldr	r1, [pc, #392]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a15a:	4313      	orrs	r3, r2
 800a15c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a15e:	e05f      	b.n	800a220 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	69db      	ldr	r3, [r3, #28]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d042      	beq.n	800a1ee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a168:	4b5e      	ldr	r3, [pc, #376]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a5d      	ldr	r2, [pc, #372]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a16e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a174:	f7f9 fe66 	bl	8003e44 <HAL_GetTick>
 800a178:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a17a:	e008      	b.n	800a18e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a17c:	f7f9 fe62 	bl	8003e44 <HAL_GetTick>
 800a180:	4602      	mov	r2, r0
 800a182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a184:	1ad3      	subs	r3, r2, r3
 800a186:	2b02      	cmp	r3, #2
 800a188:	d901      	bls.n	800a18e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a18a:	2303      	movs	r3, #3
 800a18c:	e280      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a18e:	4b55      	ldr	r3, [pc, #340]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a196:	2b00      	cmp	r3, #0
 800a198:	d0f0      	beq.n	800a17c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a19a:	f7f9 fe5f 	bl	8003e5c <HAL_GetREVID>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	f241 0203 	movw	r2, #4099	; 0x1003
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d817      	bhi.n	800a1d8 <HAL_RCC_OscConfig+0x3ec>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a1b      	ldr	r3, [r3, #32]
 800a1ac:	2b20      	cmp	r3, #32
 800a1ae:	d108      	bne.n	800a1c2 <HAL_RCC_OscConfig+0x3d6>
 800a1b0:	4b4c      	ldr	r3, [pc, #304]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a1b8:	4a4a      	ldr	r2, [pc, #296]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a1ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a1be:	6053      	str	r3, [r2, #4]
 800a1c0:	e02e      	b.n	800a220 <HAL_RCC_OscConfig+0x434>
 800a1c2:	4b48      	ldr	r3, [pc, #288]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	069b      	lsls	r3, r3, #26
 800a1d0:	4944      	ldr	r1, [pc, #272]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	604b      	str	r3, [r1, #4]
 800a1d6:	e023      	b.n	800a220 <HAL_RCC_OscConfig+0x434>
 800a1d8:	4b42      	ldr	r3, [pc, #264]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6a1b      	ldr	r3, [r3, #32]
 800a1e4:	061b      	lsls	r3, r3, #24
 800a1e6:	493f      	ldr	r1, [pc, #252]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	60cb      	str	r3, [r1, #12]
 800a1ec:	e018      	b.n	800a220 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a1ee:	4b3d      	ldr	r3, [pc, #244]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a3c      	ldr	r2, [pc, #240]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a1f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1fa:	f7f9 fe23 	bl	8003e44 <HAL_GetTick>
 800a1fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a200:	e008      	b.n	800a214 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a202:	f7f9 fe1f 	bl	8003e44 <HAL_GetTick>
 800a206:	4602      	mov	r2, r0
 800a208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20a:	1ad3      	subs	r3, r2, r3
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	d901      	bls.n	800a214 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a210:	2303      	movs	r3, #3
 800a212:	e23d      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a214:	4b33      	ldr	r3, [pc, #204]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d1f0      	bne.n	800a202 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f003 0308 	and.w	r3, r3, #8
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d036      	beq.n	800a29a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	695b      	ldr	r3, [r3, #20]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d019      	beq.n	800a268 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a234:	4b2b      	ldr	r3, [pc, #172]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a238:	4a2a      	ldr	r2, [pc, #168]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a23a:	f043 0301 	orr.w	r3, r3, #1
 800a23e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a240:	f7f9 fe00 	bl	8003e44 <HAL_GetTick>
 800a244:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a246:	e008      	b.n	800a25a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a248:	f7f9 fdfc 	bl	8003e44 <HAL_GetTick>
 800a24c:	4602      	mov	r2, r0
 800a24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a250:	1ad3      	subs	r3, r2, r3
 800a252:	2b02      	cmp	r3, #2
 800a254:	d901      	bls.n	800a25a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a256:	2303      	movs	r3, #3
 800a258:	e21a      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a25a:	4b22      	ldr	r3, [pc, #136]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a25c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a25e:	f003 0302 	and.w	r3, r3, #2
 800a262:	2b00      	cmp	r3, #0
 800a264:	d0f0      	beq.n	800a248 <HAL_RCC_OscConfig+0x45c>
 800a266:	e018      	b.n	800a29a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a268:	4b1e      	ldr	r3, [pc, #120]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a26a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a26c:	4a1d      	ldr	r2, [pc, #116]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a26e:	f023 0301 	bic.w	r3, r3, #1
 800a272:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a274:	f7f9 fde6 	bl	8003e44 <HAL_GetTick>
 800a278:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a27a:	e008      	b.n	800a28e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a27c:	f7f9 fde2 	bl	8003e44 <HAL_GetTick>
 800a280:	4602      	mov	r2, r0
 800a282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a284:	1ad3      	subs	r3, r2, r3
 800a286:	2b02      	cmp	r3, #2
 800a288:	d901      	bls.n	800a28e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a28a:	2303      	movs	r3, #3
 800a28c:	e200      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a28e:	4b15      	ldr	r3, [pc, #84]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a292:	f003 0302 	and.w	r3, r3, #2
 800a296:	2b00      	cmp	r3, #0
 800a298:	d1f0      	bne.n	800a27c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f003 0320 	and.w	r3, r3, #32
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d039      	beq.n	800a31a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	699b      	ldr	r3, [r3, #24]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d01c      	beq.n	800a2e8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a2ae:	4b0d      	ldr	r3, [pc, #52]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a0c      	ldr	r2, [pc, #48]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a2b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a2b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a2ba:	f7f9 fdc3 	bl	8003e44 <HAL_GetTick>
 800a2be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a2c0:	e008      	b.n	800a2d4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a2c2:	f7f9 fdbf 	bl	8003e44 <HAL_GetTick>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ca:	1ad3      	subs	r3, r2, r3
 800a2cc:	2b02      	cmp	r3, #2
 800a2ce:	d901      	bls.n	800a2d4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a2d0:	2303      	movs	r3, #3
 800a2d2:	e1dd      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a2d4:	4b03      	ldr	r3, [pc, #12]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d0f0      	beq.n	800a2c2 <HAL_RCC_OscConfig+0x4d6>
 800a2e0:	e01b      	b.n	800a31a <HAL_RCC_OscConfig+0x52e>
 800a2e2:	bf00      	nop
 800a2e4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a2e8:	4b9b      	ldr	r3, [pc, #620]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a9a      	ldr	r2, [pc, #616]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a2ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a2f4:	f7f9 fda6 	bl	8003e44 <HAL_GetTick>
 800a2f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a2fa:	e008      	b.n	800a30e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a2fc:	f7f9 fda2 	bl	8003e44 <HAL_GetTick>
 800a300:	4602      	mov	r2, r0
 800a302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a304:	1ad3      	subs	r3, r2, r3
 800a306:	2b02      	cmp	r3, #2
 800a308:	d901      	bls.n	800a30e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a30a:	2303      	movs	r3, #3
 800a30c:	e1c0      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a30e:	4b92      	ldr	r3, [pc, #584]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a316:	2b00      	cmp	r3, #0
 800a318:	d1f0      	bne.n	800a2fc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f003 0304 	and.w	r3, r3, #4
 800a322:	2b00      	cmp	r3, #0
 800a324:	f000 8081 	beq.w	800a42a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a328:	4b8c      	ldr	r3, [pc, #560]	; (800a55c <HAL_RCC_OscConfig+0x770>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a8b      	ldr	r2, [pc, #556]	; (800a55c <HAL_RCC_OscConfig+0x770>)
 800a32e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a332:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a334:	f7f9 fd86 	bl	8003e44 <HAL_GetTick>
 800a338:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a33a:	e008      	b.n	800a34e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a33c:	f7f9 fd82 	bl	8003e44 <HAL_GetTick>
 800a340:	4602      	mov	r2, r0
 800a342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a344:	1ad3      	subs	r3, r2, r3
 800a346:	2b64      	cmp	r3, #100	; 0x64
 800a348:	d901      	bls.n	800a34e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a34a:	2303      	movs	r3, #3
 800a34c:	e1a0      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a34e:	4b83      	ldr	r3, [pc, #524]	; (800a55c <HAL_RCC_OscConfig+0x770>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a356:	2b00      	cmp	r3, #0
 800a358:	d0f0      	beq.n	800a33c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d106      	bne.n	800a370 <HAL_RCC_OscConfig+0x584>
 800a362:	4b7d      	ldr	r3, [pc, #500]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a366:	4a7c      	ldr	r2, [pc, #496]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a368:	f043 0301 	orr.w	r3, r3, #1
 800a36c:	6713      	str	r3, [r2, #112]	; 0x70
 800a36e:	e02d      	b.n	800a3cc <HAL_RCC_OscConfig+0x5e0>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d10c      	bne.n	800a392 <HAL_RCC_OscConfig+0x5a6>
 800a378:	4b77      	ldr	r3, [pc, #476]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a37a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a37c:	4a76      	ldr	r2, [pc, #472]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a37e:	f023 0301 	bic.w	r3, r3, #1
 800a382:	6713      	str	r3, [r2, #112]	; 0x70
 800a384:	4b74      	ldr	r3, [pc, #464]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a388:	4a73      	ldr	r2, [pc, #460]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a38a:	f023 0304 	bic.w	r3, r3, #4
 800a38e:	6713      	str	r3, [r2, #112]	; 0x70
 800a390:	e01c      	b.n	800a3cc <HAL_RCC_OscConfig+0x5e0>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	2b05      	cmp	r3, #5
 800a398:	d10c      	bne.n	800a3b4 <HAL_RCC_OscConfig+0x5c8>
 800a39a:	4b6f      	ldr	r3, [pc, #444]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a39c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a39e:	4a6e      	ldr	r2, [pc, #440]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a3a0:	f043 0304 	orr.w	r3, r3, #4
 800a3a4:	6713      	str	r3, [r2, #112]	; 0x70
 800a3a6:	4b6c      	ldr	r3, [pc, #432]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a3a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3aa:	4a6b      	ldr	r2, [pc, #428]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a3ac:	f043 0301 	orr.w	r3, r3, #1
 800a3b0:	6713      	str	r3, [r2, #112]	; 0x70
 800a3b2:	e00b      	b.n	800a3cc <HAL_RCC_OscConfig+0x5e0>
 800a3b4:	4b68      	ldr	r3, [pc, #416]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a3b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3b8:	4a67      	ldr	r2, [pc, #412]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a3ba:	f023 0301 	bic.w	r3, r3, #1
 800a3be:	6713      	str	r3, [r2, #112]	; 0x70
 800a3c0:	4b65      	ldr	r3, [pc, #404]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a3c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3c4:	4a64      	ldr	r2, [pc, #400]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a3c6:	f023 0304 	bic.w	r3, r3, #4
 800a3ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d015      	beq.n	800a400 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3d4:	f7f9 fd36 	bl	8003e44 <HAL_GetTick>
 800a3d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3da:	e00a      	b.n	800a3f2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3dc:	f7f9 fd32 	bl	8003e44 <HAL_GetTick>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e4:	1ad3      	subs	r3, r2, r3
 800a3e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d901      	bls.n	800a3f2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a3ee:	2303      	movs	r3, #3
 800a3f0:	e14e      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3f2:	4b59      	ldr	r3, [pc, #356]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a3f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3f6:	f003 0302 	and.w	r3, r3, #2
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d0ee      	beq.n	800a3dc <HAL_RCC_OscConfig+0x5f0>
 800a3fe:	e014      	b.n	800a42a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a400:	f7f9 fd20 	bl	8003e44 <HAL_GetTick>
 800a404:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a406:	e00a      	b.n	800a41e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a408:	f7f9 fd1c 	bl	8003e44 <HAL_GetTick>
 800a40c:	4602      	mov	r2, r0
 800a40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a410:	1ad3      	subs	r3, r2, r3
 800a412:	f241 3288 	movw	r2, #5000	; 0x1388
 800a416:	4293      	cmp	r3, r2
 800a418:	d901      	bls.n	800a41e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a41a:	2303      	movs	r3, #3
 800a41c:	e138      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a41e:	4b4e      	ldr	r3, [pc, #312]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a422:	f003 0302 	and.w	r3, r3, #2
 800a426:	2b00      	cmp	r3, #0
 800a428:	d1ee      	bne.n	800a408 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f000 812d 	beq.w	800a68e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a434:	4b48      	ldr	r3, [pc, #288]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a43c:	2b18      	cmp	r3, #24
 800a43e:	f000 80bd 	beq.w	800a5bc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a446:	2b02      	cmp	r3, #2
 800a448:	f040 809e 	bne.w	800a588 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a44c:	4b42      	ldr	r3, [pc, #264]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a41      	ldr	r2, [pc, #260]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a452:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a458:	f7f9 fcf4 	bl	8003e44 <HAL_GetTick>
 800a45c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a45e:	e008      	b.n	800a472 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a460:	f7f9 fcf0 	bl	8003e44 <HAL_GetTick>
 800a464:	4602      	mov	r2, r0
 800a466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	2b02      	cmp	r3, #2
 800a46c:	d901      	bls.n	800a472 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a46e:	2303      	movs	r3, #3
 800a470:	e10e      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a472:	4b39      	ldr	r3, [pc, #228]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d1f0      	bne.n	800a460 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a47e:	4b36      	ldr	r3, [pc, #216]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a482:	4b37      	ldr	r3, [pc, #220]	; (800a560 <HAL_RCC_OscConfig+0x774>)
 800a484:	4013      	ands	r3, r2
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a48e:	0112      	lsls	r2, r2, #4
 800a490:	430a      	orrs	r2, r1
 800a492:	4931      	ldr	r1, [pc, #196]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a494:	4313      	orrs	r3, r2
 800a496:	628b      	str	r3, [r1, #40]	; 0x28
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a49c:	3b01      	subs	r3, #1
 800a49e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	025b      	lsls	r3, r3, #9
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	431a      	orrs	r2, r3
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	041b      	lsls	r3, r3, #16
 800a4b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a4ba:	431a      	orrs	r2, r3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	061b      	lsls	r3, r3, #24
 800a4c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a4c8:	4923      	ldr	r1, [pc, #140]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a4ce:	4b22      	ldr	r3, [pc, #136]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d2:	4a21      	ldr	r2, [pc, #132]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a4d4:	f023 0301 	bic.w	r3, r3, #1
 800a4d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a4da:	4b1f      	ldr	r3, [pc, #124]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a4dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4de:	4b21      	ldr	r3, [pc, #132]	; (800a564 <HAL_RCC_OscConfig+0x778>)
 800a4e0:	4013      	ands	r3, r2
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a4e6:	00d2      	lsls	r2, r2, #3
 800a4e8:	491b      	ldr	r1, [pc, #108]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a4ee:	4b1a      	ldr	r3, [pc, #104]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f2:	f023 020c 	bic.w	r2, r3, #12
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4fa:	4917      	ldr	r1, [pc, #92]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a500:	4b15      	ldr	r3, [pc, #84]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a504:	f023 0202 	bic.w	r2, r3, #2
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a50c:	4912      	ldr	r1, [pc, #72]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a50e:	4313      	orrs	r3, r2
 800a510:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a512:	4b11      	ldr	r3, [pc, #68]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a516:	4a10      	ldr	r2, [pc, #64]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a51c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a51e:	4b0e      	ldr	r3, [pc, #56]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a522:	4a0d      	ldr	r2, [pc, #52]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a528:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a52a:	4b0b      	ldr	r3, [pc, #44]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a52c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52e:	4a0a      	ldr	r2, [pc, #40]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a534:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a536:	4b08      	ldr	r3, [pc, #32]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a53a:	4a07      	ldr	r2, [pc, #28]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a53c:	f043 0301 	orr.w	r3, r3, #1
 800a540:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a542:	4b05      	ldr	r3, [pc, #20]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a04      	ldr	r2, [pc, #16]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a548:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a54c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a54e:	f7f9 fc79 	bl	8003e44 <HAL_GetTick>
 800a552:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a554:	e011      	b.n	800a57a <HAL_RCC_OscConfig+0x78e>
 800a556:	bf00      	nop
 800a558:	58024400 	.word	0x58024400
 800a55c:	58024800 	.word	0x58024800
 800a560:	fffffc0c 	.word	0xfffffc0c
 800a564:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a568:	f7f9 fc6c 	bl	8003e44 <HAL_GetTick>
 800a56c:	4602      	mov	r2, r0
 800a56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a570:	1ad3      	subs	r3, r2, r3
 800a572:	2b02      	cmp	r3, #2
 800a574:	d901      	bls.n	800a57a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a576:	2303      	movs	r3, #3
 800a578:	e08a      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a57a:	4b47      	ldr	r3, [pc, #284]	; (800a698 <HAL_RCC_OscConfig+0x8ac>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a582:	2b00      	cmp	r3, #0
 800a584:	d0f0      	beq.n	800a568 <HAL_RCC_OscConfig+0x77c>
 800a586:	e082      	b.n	800a68e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a588:	4b43      	ldr	r3, [pc, #268]	; (800a698 <HAL_RCC_OscConfig+0x8ac>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a42      	ldr	r2, [pc, #264]	; (800a698 <HAL_RCC_OscConfig+0x8ac>)
 800a58e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a594:	f7f9 fc56 	bl	8003e44 <HAL_GetTick>
 800a598:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a59a:	e008      	b.n	800a5ae <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a59c:	f7f9 fc52 	bl	8003e44 <HAL_GetTick>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a4:	1ad3      	subs	r3, r2, r3
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	d901      	bls.n	800a5ae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a5aa:	2303      	movs	r3, #3
 800a5ac:	e070      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a5ae:	4b3a      	ldr	r3, [pc, #232]	; (800a698 <HAL_RCC_OscConfig+0x8ac>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1f0      	bne.n	800a59c <HAL_RCC_OscConfig+0x7b0>
 800a5ba:	e068      	b.n	800a68e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a5bc:	4b36      	ldr	r3, [pc, #216]	; (800a698 <HAL_RCC_OscConfig+0x8ac>)
 800a5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a5c2:	4b35      	ldr	r3, [pc, #212]	; (800a698 <HAL_RCC_OscConfig+0x8ac>)
 800a5c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d031      	beq.n	800a634 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	f003 0203 	and.w	r2, r3, #3
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d12a      	bne.n	800a634 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	091b      	lsrs	r3, r3, #4
 800a5e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d122      	bne.n	800a634 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d11a      	bne.n	800a634 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	0a5b      	lsrs	r3, r3, #9
 800a602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a60a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d111      	bne.n	800a634 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	0c1b      	lsrs	r3, r3, #16
 800a614:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a61c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a61e:	429a      	cmp	r2, r3
 800a620:	d108      	bne.n	800a634 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	0e1b      	lsrs	r3, r3, #24
 800a626:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a62e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a630:	429a      	cmp	r2, r3
 800a632:	d001      	beq.n	800a638 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a634:	2301      	movs	r3, #1
 800a636:	e02b      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a638:	4b17      	ldr	r3, [pc, #92]	; (800a698 <HAL_RCC_OscConfig+0x8ac>)
 800a63a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a63c:	08db      	lsrs	r3, r3, #3
 800a63e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a642:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a648:	693a      	ldr	r2, [r7, #16]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d01f      	beq.n	800a68e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a64e:	4b12      	ldr	r3, [pc, #72]	; (800a698 <HAL_RCC_OscConfig+0x8ac>)
 800a650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a652:	4a11      	ldr	r2, [pc, #68]	; (800a698 <HAL_RCC_OscConfig+0x8ac>)
 800a654:	f023 0301 	bic.w	r3, r3, #1
 800a658:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a65a:	f7f9 fbf3 	bl	8003e44 <HAL_GetTick>
 800a65e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a660:	bf00      	nop
 800a662:	f7f9 fbef 	bl	8003e44 <HAL_GetTick>
 800a666:	4602      	mov	r2, r0
 800a668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d0f9      	beq.n	800a662 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a66e:	4b0a      	ldr	r3, [pc, #40]	; (800a698 <HAL_RCC_OscConfig+0x8ac>)
 800a670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a672:	4b0a      	ldr	r3, [pc, #40]	; (800a69c <HAL_RCC_OscConfig+0x8b0>)
 800a674:	4013      	ands	r3, r2
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a67a:	00d2      	lsls	r2, r2, #3
 800a67c:	4906      	ldr	r1, [pc, #24]	; (800a698 <HAL_RCC_OscConfig+0x8ac>)
 800a67e:	4313      	orrs	r3, r2
 800a680:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a682:	4b05      	ldr	r3, [pc, #20]	; (800a698 <HAL_RCC_OscConfig+0x8ac>)
 800a684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a686:	4a04      	ldr	r2, [pc, #16]	; (800a698 <HAL_RCC_OscConfig+0x8ac>)
 800a688:	f043 0301 	orr.w	r3, r3, #1
 800a68c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a68e:	2300      	movs	r3, #0
}
 800a690:	4618      	mov	r0, r3
 800a692:	3730      	adds	r7, #48	; 0x30
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}
 800a698:	58024400 	.word	0x58024400
 800a69c:	ffff0007 	.word	0xffff0007

0800a6a0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b086      	sub	sp, #24
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d101      	bne.n	800a6b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	e19c      	b.n	800a9ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a6b4:	4b8a      	ldr	r3, [pc, #552]	; (800a8e0 <HAL_RCC_ClockConfig+0x240>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f003 030f 	and.w	r3, r3, #15
 800a6bc:	683a      	ldr	r2, [r7, #0]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d910      	bls.n	800a6e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6c2:	4b87      	ldr	r3, [pc, #540]	; (800a8e0 <HAL_RCC_ClockConfig+0x240>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f023 020f 	bic.w	r2, r3, #15
 800a6ca:	4985      	ldr	r1, [pc, #532]	; (800a8e0 <HAL_RCC_ClockConfig+0x240>)
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6d2:	4b83      	ldr	r3, [pc, #524]	; (800a8e0 <HAL_RCC_ClockConfig+0x240>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f003 030f 	and.w	r3, r3, #15
 800a6da:	683a      	ldr	r2, [r7, #0]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d001      	beq.n	800a6e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e184      	b.n	800a9ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f003 0304 	and.w	r3, r3, #4
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d010      	beq.n	800a712 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	691a      	ldr	r2, [r3, #16]
 800a6f4:	4b7b      	ldr	r3, [pc, #492]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a6f6:	699b      	ldr	r3, [r3, #24]
 800a6f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d908      	bls.n	800a712 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a700:	4b78      	ldr	r3, [pc, #480]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a702:	699b      	ldr	r3, [r3, #24]
 800a704:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	4975      	ldr	r1, [pc, #468]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a70e:	4313      	orrs	r3, r2
 800a710:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f003 0308 	and.w	r3, r3, #8
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d010      	beq.n	800a740 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	695a      	ldr	r2, [r3, #20]
 800a722:	4b70      	ldr	r3, [pc, #448]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a724:	69db      	ldr	r3, [r3, #28]
 800a726:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d908      	bls.n	800a740 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a72e:	4b6d      	ldr	r3, [pc, #436]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a730:	69db      	ldr	r3, [r3, #28]
 800a732:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	695b      	ldr	r3, [r3, #20]
 800a73a:	496a      	ldr	r1, [pc, #424]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a73c:	4313      	orrs	r3, r2
 800a73e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f003 0310 	and.w	r3, r3, #16
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d010      	beq.n	800a76e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	699a      	ldr	r2, [r3, #24]
 800a750:	4b64      	ldr	r3, [pc, #400]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a752:	69db      	ldr	r3, [r3, #28]
 800a754:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a758:	429a      	cmp	r2, r3
 800a75a:	d908      	bls.n	800a76e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a75c:	4b61      	ldr	r3, [pc, #388]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a75e:	69db      	ldr	r3, [r3, #28]
 800a760:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	699b      	ldr	r3, [r3, #24]
 800a768:	495e      	ldr	r1, [pc, #376]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a76a:	4313      	orrs	r3, r2
 800a76c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f003 0320 	and.w	r3, r3, #32
 800a776:	2b00      	cmp	r3, #0
 800a778:	d010      	beq.n	800a79c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	69da      	ldr	r2, [r3, #28]
 800a77e:	4b59      	ldr	r3, [pc, #356]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a780:	6a1b      	ldr	r3, [r3, #32]
 800a782:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a786:	429a      	cmp	r2, r3
 800a788:	d908      	bls.n	800a79c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a78a:	4b56      	ldr	r3, [pc, #344]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a78c:	6a1b      	ldr	r3, [r3, #32]
 800a78e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	69db      	ldr	r3, [r3, #28]
 800a796:	4953      	ldr	r1, [pc, #332]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a798:	4313      	orrs	r3, r2
 800a79a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f003 0302 	and.w	r3, r3, #2
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d010      	beq.n	800a7ca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	68da      	ldr	r2, [r3, #12]
 800a7ac:	4b4d      	ldr	r3, [pc, #308]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a7ae:	699b      	ldr	r3, [r3, #24]
 800a7b0:	f003 030f 	and.w	r3, r3, #15
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d908      	bls.n	800a7ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a7b8:	4b4a      	ldr	r3, [pc, #296]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a7ba:	699b      	ldr	r3, [r3, #24]
 800a7bc:	f023 020f 	bic.w	r2, r3, #15
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	4947      	ldr	r1, [pc, #284]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f003 0301 	and.w	r3, r3, #1
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d055      	beq.n	800a882 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a7d6:	4b43      	ldr	r3, [pc, #268]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a7d8:	699b      	ldr	r3, [r3, #24]
 800a7da:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	4940      	ldr	r1, [pc, #256]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	2b02      	cmp	r3, #2
 800a7ee:	d107      	bne.n	800a800 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7f0:	4b3c      	ldr	r3, [pc, #240]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d121      	bne.n	800a840 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e0f6      	b.n	800a9ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	2b03      	cmp	r3, #3
 800a806:	d107      	bne.n	800a818 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a808:	4b36      	ldr	r3, [pc, #216]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a810:	2b00      	cmp	r3, #0
 800a812:	d115      	bne.n	800a840 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a814:	2301      	movs	r3, #1
 800a816:	e0ea      	b.n	800a9ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d107      	bne.n	800a830 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a820:	4b30      	ldr	r3, [pc, #192]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d109      	bne.n	800a840 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	e0de      	b.n	800a9ee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a830:	4b2c      	ldr	r3, [pc, #176]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 0304 	and.w	r3, r3, #4
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d101      	bne.n	800a840 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a83c:	2301      	movs	r3, #1
 800a83e:	e0d6      	b.n	800a9ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a840:	4b28      	ldr	r3, [pc, #160]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a842:	691b      	ldr	r3, [r3, #16]
 800a844:	f023 0207 	bic.w	r2, r3, #7
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	4925      	ldr	r1, [pc, #148]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a84e:	4313      	orrs	r3, r2
 800a850:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a852:	f7f9 faf7 	bl	8003e44 <HAL_GetTick>
 800a856:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a858:	e00a      	b.n	800a870 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a85a:	f7f9 faf3 	bl	8003e44 <HAL_GetTick>
 800a85e:	4602      	mov	r2, r0
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	f241 3288 	movw	r2, #5000	; 0x1388
 800a868:	4293      	cmp	r3, r2
 800a86a:	d901      	bls.n	800a870 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a86c:	2303      	movs	r3, #3
 800a86e:	e0be      	b.n	800a9ee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a870:	4b1c      	ldr	r3, [pc, #112]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a872:	691b      	ldr	r3, [r3, #16]
 800a874:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	00db      	lsls	r3, r3, #3
 800a87e:	429a      	cmp	r2, r3
 800a880:	d1eb      	bne.n	800a85a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f003 0302 	and.w	r3, r3, #2
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d010      	beq.n	800a8b0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	68da      	ldr	r2, [r3, #12]
 800a892:	4b14      	ldr	r3, [pc, #80]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a894:	699b      	ldr	r3, [r3, #24]
 800a896:	f003 030f 	and.w	r3, r3, #15
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d208      	bcs.n	800a8b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a89e:	4b11      	ldr	r3, [pc, #68]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a8a0:	699b      	ldr	r3, [r3, #24]
 800a8a2:	f023 020f 	bic.w	r2, r3, #15
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	490e      	ldr	r1, [pc, #56]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a8b0:	4b0b      	ldr	r3, [pc, #44]	; (800a8e0 <HAL_RCC_ClockConfig+0x240>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f003 030f 	and.w	r3, r3, #15
 800a8b8:	683a      	ldr	r2, [r7, #0]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d214      	bcs.n	800a8e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8be:	4b08      	ldr	r3, [pc, #32]	; (800a8e0 <HAL_RCC_ClockConfig+0x240>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f023 020f 	bic.w	r2, r3, #15
 800a8c6:	4906      	ldr	r1, [pc, #24]	; (800a8e0 <HAL_RCC_ClockConfig+0x240>)
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8ce:	4b04      	ldr	r3, [pc, #16]	; (800a8e0 <HAL_RCC_ClockConfig+0x240>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f003 030f 	and.w	r3, r3, #15
 800a8d6:	683a      	ldr	r2, [r7, #0]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d005      	beq.n	800a8e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e086      	b.n	800a9ee <HAL_RCC_ClockConfig+0x34e>
 800a8e0:	52002000 	.word	0x52002000
 800a8e4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f003 0304 	and.w	r3, r3, #4
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d010      	beq.n	800a916 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	691a      	ldr	r2, [r3, #16]
 800a8f8:	4b3f      	ldr	r3, [pc, #252]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a8fa:	699b      	ldr	r3, [r3, #24]
 800a8fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a900:	429a      	cmp	r2, r3
 800a902:	d208      	bcs.n	800a916 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a904:	4b3c      	ldr	r3, [pc, #240]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a906:	699b      	ldr	r3, [r3, #24]
 800a908:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	4939      	ldr	r1, [pc, #228]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a912:	4313      	orrs	r3, r2
 800a914:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f003 0308 	and.w	r3, r3, #8
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d010      	beq.n	800a944 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	695a      	ldr	r2, [r3, #20]
 800a926:	4b34      	ldr	r3, [pc, #208]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a928:	69db      	ldr	r3, [r3, #28]
 800a92a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a92e:	429a      	cmp	r2, r3
 800a930:	d208      	bcs.n	800a944 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a932:	4b31      	ldr	r3, [pc, #196]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	695b      	ldr	r3, [r3, #20]
 800a93e:	492e      	ldr	r1, [pc, #184]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a940:	4313      	orrs	r3, r2
 800a942:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f003 0310 	and.w	r3, r3, #16
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d010      	beq.n	800a972 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	699a      	ldr	r2, [r3, #24]
 800a954:	4b28      	ldr	r3, [pc, #160]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a956:	69db      	ldr	r3, [r3, #28]
 800a958:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d208      	bcs.n	800a972 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a960:	4b25      	ldr	r3, [pc, #148]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a962:	69db      	ldr	r3, [r3, #28]
 800a964:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	699b      	ldr	r3, [r3, #24]
 800a96c:	4922      	ldr	r1, [pc, #136]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a96e:	4313      	orrs	r3, r2
 800a970:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f003 0320 	and.w	r3, r3, #32
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d010      	beq.n	800a9a0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	69da      	ldr	r2, [r3, #28]
 800a982:	4b1d      	ldr	r3, [pc, #116]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a984:	6a1b      	ldr	r3, [r3, #32]
 800a986:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d208      	bcs.n	800a9a0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a98e:	4b1a      	ldr	r3, [pc, #104]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a990:	6a1b      	ldr	r3, [r3, #32]
 800a992:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	69db      	ldr	r3, [r3, #28]
 800a99a:	4917      	ldr	r1, [pc, #92]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a99c:	4313      	orrs	r3, r2
 800a99e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a9a0:	f000 f834 	bl	800aa0c <HAL_RCC_GetSysClockFreq>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	4b14      	ldr	r3, [pc, #80]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a9a8:	699b      	ldr	r3, [r3, #24]
 800a9aa:	0a1b      	lsrs	r3, r3, #8
 800a9ac:	f003 030f 	and.w	r3, r3, #15
 800a9b0:	4912      	ldr	r1, [pc, #72]	; (800a9fc <HAL_RCC_ClockConfig+0x35c>)
 800a9b2:	5ccb      	ldrb	r3, [r1, r3]
 800a9b4:	f003 031f 	and.w	r3, r3, #31
 800a9b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a9bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a9be:	4b0e      	ldr	r3, [pc, #56]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a9c0:	699b      	ldr	r3, [r3, #24]
 800a9c2:	f003 030f 	and.w	r3, r3, #15
 800a9c6:	4a0d      	ldr	r2, [pc, #52]	; (800a9fc <HAL_RCC_ClockConfig+0x35c>)
 800a9c8:	5cd3      	ldrb	r3, [r2, r3]
 800a9ca:	f003 031f 	and.w	r3, r3, #31
 800a9ce:	693a      	ldr	r2, [r7, #16]
 800a9d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a9d4:	4a0a      	ldr	r2, [pc, #40]	; (800aa00 <HAL_RCC_ClockConfig+0x360>)
 800a9d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a9d8:	4a0a      	ldr	r2, [pc, #40]	; (800aa04 <HAL_RCC_ClockConfig+0x364>)
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a9de:	4b0a      	ldr	r3, [pc, #40]	; (800aa08 <HAL_RCC_ClockConfig+0x368>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7f8 f974 	bl	8002cd0 <HAL_InitTick>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a9ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3718      	adds	r7, #24
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	58024400 	.word	0x58024400
 800a9fc:	08016e34 	.word	0x08016e34
 800aa00:	24000088 	.word	0x24000088
 800aa04:	24000084 	.word	0x24000084
 800aa08:	2400008c 	.word	0x2400008c

0800aa0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b089      	sub	sp, #36	; 0x24
 800aa10:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aa12:	4bb3      	ldr	r3, [pc, #716]	; (800ace0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa14:	691b      	ldr	r3, [r3, #16]
 800aa16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa1a:	2b18      	cmp	r3, #24
 800aa1c:	f200 8155 	bhi.w	800acca <HAL_RCC_GetSysClockFreq+0x2be>
 800aa20:	a201      	add	r2, pc, #4	; (adr r2, 800aa28 <HAL_RCC_GetSysClockFreq+0x1c>)
 800aa22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa26:	bf00      	nop
 800aa28:	0800aa8d 	.word	0x0800aa8d
 800aa2c:	0800accb 	.word	0x0800accb
 800aa30:	0800accb 	.word	0x0800accb
 800aa34:	0800accb 	.word	0x0800accb
 800aa38:	0800accb 	.word	0x0800accb
 800aa3c:	0800accb 	.word	0x0800accb
 800aa40:	0800accb 	.word	0x0800accb
 800aa44:	0800accb 	.word	0x0800accb
 800aa48:	0800aab3 	.word	0x0800aab3
 800aa4c:	0800accb 	.word	0x0800accb
 800aa50:	0800accb 	.word	0x0800accb
 800aa54:	0800accb 	.word	0x0800accb
 800aa58:	0800accb 	.word	0x0800accb
 800aa5c:	0800accb 	.word	0x0800accb
 800aa60:	0800accb 	.word	0x0800accb
 800aa64:	0800accb 	.word	0x0800accb
 800aa68:	0800aab9 	.word	0x0800aab9
 800aa6c:	0800accb 	.word	0x0800accb
 800aa70:	0800accb 	.word	0x0800accb
 800aa74:	0800accb 	.word	0x0800accb
 800aa78:	0800accb 	.word	0x0800accb
 800aa7c:	0800accb 	.word	0x0800accb
 800aa80:	0800accb 	.word	0x0800accb
 800aa84:	0800accb 	.word	0x0800accb
 800aa88:	0800aabf 	.word	0x0800aabf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa8c:	4b94      	ldr	r3, [pc, #592]	; (800ace0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f003 0320 	and.w	r3, r3, #32
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d009      	beq.n	800aaac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa98:	4b91      	ldr	r3, [pc, #580]	; (800ace0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	08db      	lsrs	r3, r3, #3
 800aa9e:	f003 0303 	and.w	r3, r3, #3
 800aaa2:	4a90      	ldr	r2, [pc, #576]	; (800ace4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aaa4:	fa22 f303 	lsr.w	r3, r2, r3
 800aaa8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800aaaa:	e111      	b.n	800acd0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800aaac:	4b8d      	ldr	r3, [pc, #564]	; (800ace4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aaae:	61bb      	str	r3, [r7, #24]
      break;
 800aab0:	e10e      	b.n	800acd0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800aab2:	4b8d      	ldr	r3, [pc, #564]	; (800ace8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aab4:	61bb      	str	r3, [r7, #24]
      break;
 800aab6:	e10b      	b.n	800acd0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800aab8:	4b8c      	ldr	r3, [pc, #560]	; (800acec <HAL_RCC_GetSysClockFreq+0x2e0>)
 800aaba:	61bb      	str	r3, [r7, #24]
      break;
 800aabc:	e108      	b.n	800acd0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aabe:	4b88      	ldr	r3, [pc, #544]	; (800ace0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aac2:	f003 0303 	and.w	r3, r3, #3
 800aac6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800aac8:	4b85      	ldr	r3, [pc, #532]	; (800ace0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aacc:	091b      	lsrs	r3, r3, #4
 800aace:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aad2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800aad4:	4b82      	ldr	r3, [pc, #520]	; (800ace0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad8:	f003 0301 	and.w	r3, r3, #1
 800aadc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aade:	4b80      	ldr	r3, [pc, #512]	; (800ace0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aae2:	08db      	lsrs	r3, r3, #3
 800aae4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	fb02 f303 	mul.w	r3, r2, r3
 800aaee:	ee07 3a90 	vmov	s15, r3
 800aaf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaf6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f000 80e1 	beq.w	800acc4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	2b02      	cmp	r3, #2
 800ab06:	f000 8083 	beq.w	800ac10 <HAL_RCC_GetSysClockFreq+0x204>
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	2b02      	cmp	r3, #2
 800ab0e:	f200 80a1 	bhi.w	800ac54 <HAL_RCC_GetSysClockFreq+0x248>
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d003      	beq.n	800ab20 <HAL_RCC_GetSysClockFreq+0x114>
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d056      	beq.n	800abcc <HAL_RCC_GetSysClockFreq+0x1c0>
 800ab1e:	e099      	b.n	800ac54 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab20:	4b6f      	ldr	r3, [pc, #444]	; (800ace0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f003 0320 	and.w	r3, r3, #32
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d02d      	beq.n	800ab88 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab2c:	4b6c      	ldr	r3, [pc, #432]	; (800ace0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	08db      	lsrs	r3, r3, #3
 800ab32:	f003 0303 	and.w	r3, r3, #3
 800ab36:	4a6b      	ldr	r2, [pc, #428]	; (800ace4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ab38:	fa22 f303 	lsr.w	r3, r2, r3
 800ab3c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	ee07 3a90 	vmov	s15, r3
 800ab44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	ee07 3a90 	vmov	s15, r3
 800ab4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab56:	4b62      	ldr	r3, [pc, #392]	; (800ace0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab5e:	ee07 3a90 	vmov	s15, r3
 800ab62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab66:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab6a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800acf0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab82:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ab86:	e087      	b.n	800ac98 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	ee07 3a90 	vmov	s15, r3
 800ab8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab92:	eddf 6a58 	vldr	s13, [pc, #352]	; 800acf4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ab96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab9a:	4b51      	ldr	r3, [pc, #324]	; (800ace0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aba2:	ee07 3a90 	vmov	s15, r3
 800aba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abaa:	ed97 6a02 	vldr	s12, [r7, #8]
 800abae:	eddf 5a50 	vldr	s11, [pc, #320]	; 800acf0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800abb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800abca:	e065      	b.n	800ac98 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	ee07 3a90 	vmov	s15, r3
 800abd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abd6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800acf8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800abda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abde:	4b40      	ldr	r3, [pc, #256]	; (800ace0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abe6:	ee07 3a90 	vmov	s15, r3
 800abea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abee:	ed97 6a02 	vldr	s12, [r7, #8]
 800abf2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800acf0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800abf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ac0e:	e043      	b.n	800ac98 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	ee07 3a90 	vmov	s15, r3
 800ac16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac1a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800acfc <HAL_RCC_GetSysClockFreq+0x2f0>
 800ac1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac22:	4b2f      	ldr	r3, [pc, #188]	; (800ace0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac2a:	ee07 3a90 	vmov	s15, r3
 800ac2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac32:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac36:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800acf0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ac52:	e021      	b.n	800ac98 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	ee07 3a90 	vmov	s15, r3
 800ac5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac5e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800acf8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ac62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac66:	4b1e      	ldr	r3, [pc, #120]	; (800ace0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac6e:	ee07 3a90 	vmov	s15, r3
 800ac72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac76:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac7a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800acf0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ac96:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ac98:	4b11      	ldr	r3, [pc, #68]	; (800ace0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac9c:	0a5b      	lsrs	r3, r3, #9
 800ac9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aca2:	3301      	adds	r3, #1
 800aca4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	ee07 3a90 	vmov	s15, r3
 800acac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800acb0:	edd7 6a07 	vldr	s13, [r7, #28]
 800acb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acbc:	ee17 3a90 	vmov	r3, s15
 800acc0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800acc2:	e005      	b.n	800acd0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800acc4:	2300      	movs	r3, #0
 800acc6:	61bb      	str	r3, [r7, #24]
      break;
 800acc8:	e002      	b.n	800acd0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800acca:	4b07      	ldr	r3, [pc, #28]	; (800ace8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800accc:	61bb      	str	r3, [r7, #24]
      break;
 800acce:	bf00      	nop
  }

  return sysclockfreq;
 800acd0:	69bb      	ldr	r3, [r7, #24]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3724      	adds	r7, #36	; 0x24
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr
 800acde:	bf00      	nop
 800ace0:	58024400 	.word	0x58024400
 800ace4:	03d09000 	.word	0x03d09000
 800ace8:	003d0900 	.word	0x003d0900
 800acec:	017d7840 	.word	0x017d7840
 800acf0:	46000000 	.word	0x46000000
 800acf4:	4c742400 	.word	0x4c742400
 800acf8:	4a742400 	.word	0x4a742400
 800acfc:	4bbebc20 	.word	0x4bbebc20

0800ad00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ad06:	f7ff fe81 	bl	800aa0c <HAL_RCC_GetSysClockFreq>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	4b10      	ldr	r3, [pc, #64]	; (800ad50 <HAL_RCC_GetHCLKFreq+0x50>)
 800ad0e:	699b      	ldr	r3, [r3, #24]
 800ad10:	0a1b      	lsrs	r3, r3, #8
 800ad12:	f003 030f 	and.w	r3, r3, #15
 800ad16:	490f      	ldr	r1, [pc, #60]	; (800ad54 <HAL_RCC_GetHCLKFreq+0x54>)
 800ad18:	5ccb      	ldrb	r3, [r1, r3]
 800ad1a:	f003 031f 	and.w	r3, r3, #31
 800ad1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ad22:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ad24:	4b0a      	ldr	r3, [pc, #40]	; (800ad50 <HAL_RCC_GetHCLKFreq+0x50>)
 800ad26:	699b      	ldr	r3, [r3, #24]
 800ad28:	f003 030f 	and.w	r3, r3, #15
 800ad2c:	4a09      	ldr	r2, [pc, #36]	; (800ad54 <HAL_RCC_GetHCLKFreq+0x54>)
 800ad2e:	5cd3      	ldrb	r3, [r2, r3]
 800ad30:	f003 031f 	and.w	r3, r3, #31
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	fa22 f303 	lsr.w	r3, r2, r3
 800ad3a:	4a07      	ldr	r2, [pc, #28]	; (800ad58 <HAL_RCC_GetHCLKFreq+0x58>)
 800ad3c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ad3e:	4a07      	ldr	r2, [pc, #28]	; (800ad5c <HAL_RCC_GetHCLKFreq+0x5c>)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ad44:	4b04      	ldr	r3, [pc, #16]	; (800ad58 <HAL_RCC_GetHCLKFreq+0x58>)
 800ad46:	681b      	ldr	r3, [r3, #0]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3708      	adds	r7, #8
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}
 800ad50:	58024400 	.word	0x58024400
 800ad54:	08016e34 	.word	0x08016e34
 800ad58:	24000088 	.word	0x24000088
 800ad5c:	24000084 	.word	0x24000084

0800ad60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ad64:	f7ff ffcc 	bl	800ad00 <HAL_RCC_GetHCLKFreq>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	4b06      	ldr	r3, [pc, #24]	; (800ad84 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ad6c:	69db      	ldr	r3, [r3, #28]
 800ad6e:	091b      	lsrs	r3, r3, #4
 800ad70:	f003 0307 	and.w	r3, r3, #7
 800ad74:	4904      	ldr	r1, [pc, #16]	; (800ad88 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ad76:	5ccb      	ldrb	r3, [r1, r3]
 800ad78:	f003 031f 	and.w	r3, r3, #31
 800ad7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	bd80      	pop	{r7, pc}
 800ad84:	58024400 	.word	0x58024400
 800ad88:	08016e34 	.word	0x08016e34

0800ad8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ad90:	f7ff ffb6 	bl	800ad00 <HAL_RCC_GetHCLKFreq>
 800ad94:	4602      	mov	r2, r0
 800ad96:	4b06      	ldr	r3, [pc, #24]	; (800adb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad98:	69db      	ldr	r3, [r3, #28]
 800ad9a:	0a1b      	lsrs	r3, r3, #8
 800ad9c:	f003 0307 	and.w	r3, r3, #7
 800ada0:	4904      	ldr	r1, [pc, #16]	; (800adb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ada2:	5ccb      	ldrb	r3, [r1, r3]
 800ada4:	f003 031f 	and.w	r3, r3, #31
 800ada8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800adac:	4618      	mov	r0, r3
 800adae:	bd80      	pop	{r7, pc}
 800adb0:	58024400 	.word	0x58024400
 800adb4:	08016e34 	.word	0x08016e34

0800adb8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	223f      	movs	r2, #63	; 0x3f
 800adc6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800adc8:	4b1a      	ldr	r3, [pc, #104]	; (800ae34 <HAL_RCC_GetClockConfig+0x7c>)
 800adca:	691b      	ldr	r3, [r3, #16]
 800adcc:	f003 0207 	and.w	r2, r3, #7
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800add4:	4b17      	ldr	r3, [pc, #92]	; (800ae34 <HAL_RCC_GetClockConfig+0x7c>)
 800add6:	699b      	ldr	r3, [r3, #24]
 800add8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800ade0:	4b14      	ldr	r3, [pc, #80]	; (800ae34 <HAL_RCC_GetClockConfig+0x7c>)
 800ade2:	699b      	ldr	r3, [r3, #24]
 800ade4:	f003 020f 	and.w	r2, r3, #15
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800adec:	4b11      	ldr	r3, [pc, #68]	; (800ae34 <HAL_RCC_GetClockConfig+0x7c>)
 800adee:	699b      	ldr	r3, [r3, #24]
 800adf0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800adf8:	4b0e      	ldr	r3, [pc, #56]	; (800ae34 <HAL_RCC_GetClockConfig+0x7c>)
 800adfa:	69db      	ldr	r3, [r3, #28]
 800adfc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800ae04:	4b0b      	ldr	r3, [pc, #44]	; (800ae34 <HAL_RCC_GetClockConfig+0x7c>)
 800ae06:	69db      	ldr	r3, [r3, #28]
 800ae08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800ae10:	4b08      	ldr	r3, [pc, #32]	; (800ae34 <HAL_RCC_GetClockConfig+0x7c>)
 800ae12:	6a1b      	ldr	r3, [r3, #32]
 800ae14:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ae1c:	4b06      	ldr	r3, [pc, #24]	; (800ae38 <HAL_RCC_GetClockConfig+0x80>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f003 020f 	and.w	r2, r3, #15
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	601a      	str	r2, [r3, #0]
}
 800ae28:	bf00      	nop
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr
 800ae34:	58024400 	.word	0x58024400
 800ae38:	52002000 	.word	0x52002000

0800ae3c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ae3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae40:	b0ca      	sub	sp, #296	; 0x128
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ae48:	2300      	movs	r3, #0
 800ae4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ae4e:	2300      	movs	r3, #0
 800ae50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ae54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800ae60:	2500      	movs	r5, #0
 800ae62:	ea54 0305 	orrs.w	r3, r4, r5
 800ae66:	d049      	beq.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ae68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ae72:	d02f      	beq.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ae74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ae78:	d828      	bhi.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ae7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae7e:	d01a      	beq.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ae80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae84:	d822      	bhi.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d003      	beq.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ae8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae8e:	d007      	beq.n	800aea0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ae90:	e01c      	b.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae92:	4bb8      	ldr	r3, [pc, #736]	; (800b174 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae96:	4ab7      	ldr	r2, [pc, #732]	; (800b174 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ae9e:	e01a      	b.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aea4:	3308      	adds	r3, #8
 800aea6:	2102      	movs	r1, #2
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f002 fb61 	bl	800d570 <RCCEx_PLL2_Config>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aeb4:	e00f      	b.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aeb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeba:	3328      	adds	r3, #40	; 0x28
 800aebc:	2102      	movs	r1, #2
 800aebe:	4618      	mov	r0, r3
 800aec0:	f002 fc08 	bl	800d6d4 <RCCEx_PLL3_Config>
 800aec4:	4603      	mov	r3, r0
 800aec6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aeca:	e004      	b.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aed2:	e000      	b.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800aed4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aed6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d10a      	bne.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aede:	4ba5      	ldr	r3, [pc, #660]	; (800b174 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aee2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800aee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aeec:	4aa1      	ldr	r2, [pc, #644]	; (800b174 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aeee:	430b      	orrs	r3, r1
 800aef0:	6513      	str	r3, [r2, #80]	; 0x50
 800aef2:	e003      	b.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aef4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aef8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aefc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af04:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800af08:	f04f 0900 	mov.w	r9, #0
 800af0c:	ea58 0309 	orrs.w	r3, r8, r9
 800af10:	d047      	beq.n	800afa2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800af12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af18:	2b04      	cmp	r3, #4
 800af1a:	d82a      	bhi.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800af1c:	a201      	add	r2, pc, #4	; (adr r2, 800af24 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800af1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af22:	bf00      	nop
 800af24:	0800af39 	.word	0x0800af39
 800af28:	0800af47 	.word	0x0800af47
 800af2c:	0800af5d 	.word	0x0800af5d
 800af30:	0800af7b 	.word	0x0800af7b
 800af34:	0800af7b 	.word	0x0800af7b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af38:	4b8e      	ldr	r3, [pc, #568]	; (800b174 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3c:	4a8d      	ldr	r2, [pc, #564]	; (800b174 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af44:	e01a      	b.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af4a:	3308      	adds	r3, #8
 800af4c:	2100      	movs	r1, #0
 800af4e:	4618      	mov	r0, r3
 800af50:	f002 fb0e 	bl	800d570 <RCCEx_PLL2_Config>
 800af54:	4603      	mov	r3, r0
 800af56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af5a:	e00f      	b.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af60:	3328      	adds	r3, #40	; 0x28
 800af62:	2100      	movs	r1, #0
 800af64:	4618      	mov	r0, r3
 800af66:	f002 fbb5 	bl	800d6d4 <RCCEx_PLL3_Config>
 800af6a:	4603      	mov	r3, r0
 800af6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af70:	e004      	b.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af78:	e000      	b.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800af7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af80:	2b00      	cmp	r3, #0
 800af82:	d10a      	bne.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800af84:	4b7b      	ldr	r3, [pc, #492]	; (800b174 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af88:	f023 0107 	bic.w	r1, r3, #7
 800af8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af92:	4a78      	ldr	r2, [pc, #480]	; (800b174 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af94:	430b      	orrs	r3, r1
 800af96:	6513      	str	r3, [r2, #80]	; 0x50
 800af98:	e003      	b.n	800afa2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800afa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afaa:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800afae:	f04f 0b00 	mov.w	fp, #0
 800afb2:	ea5a 030b 	orrs.w	r3, sl, fp
 800afb6:	d04c      	beq.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800afb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afc2:	d030      	beq.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800afc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afc8:	d829      	bhi.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800afca:	2bc0      	cmp	r3, #192	; 0xc0
 800afcc:	d02d      	beq.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800afce:	2bc0      	cmp	r3, #192	; 0xc0
 800afd0:	d825      	bhi.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800afd2:	2b80      	cmp	r3, #128	; 0x80
 800afd4:	d018      	beq.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800afd6:	2b80      	cmp	r3, #128	; 0x80
 800afd8:	d821      	bhi.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d002      	beq.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800afde:	2b40      	cmp	r3, #64	; 0x40
 800afe0:	d007      	beq.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800afe2:	e01c      	b.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afe4:	4b63      	ldr	r3, [pc, #396]	; (800b174 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe8:	4a62      	ldr	r2, [pc, #392]	; (800b174 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800aff0:	e01c      	b.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aff6:	3308      	adds	r3, #8
 800aff8:	2100      	movs	r1, #0
 800affa:	4618      	mov	r0, r3
 800affc:	f002 fab8 	bl	800d570 <RCCEx_PLL2_Config>
 800b000:	4603      	mov	r3, r0
 800b002:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b006:	e011      	b.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b00c:	3328      	adds	r3, #40	; 0x28
 800b00e:	2100      	movs	r1, #0
 800b010:	4618      	mov	r0, r3
 800b012:	f002 fb5f 	bl	800d6d4 <RCCEx_PLL3_Config>
 800b016:	4603      	mov	r3, r0
 800b018:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b01c:	e006      	b.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b01e:	2301      	movs	r3, #1
 800b020:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b024:	e002      	b.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b026:	bf00      	nop
 800b028:	e000      	b.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b02a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b02c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b030:	2b00      	cmp	r3, #0
 800b032:	d10a      	bne.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b034:	4b4f      	ldr	r3, [pc, #316]	; (800b174 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b038:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b03c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b042:	4a4c      	ldr	r2, [pc, #304]	; (800b174 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b044:	430b      	orrs	r3, r1
 800b046:	6513      	str	r3, [r2, #80]	; 0x50
 800b048:	e003      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b04a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b04e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b05e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b062:	2300      	movs	r3, #0
 800b064:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b068:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b06c:	460b      	mov	r3, r1
 800b06e:	4313      	orrs	r3, r2
 800b070:	d053      	beq.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b076:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b07a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b07e:	d035      	beq.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b080:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b084:	d82e      	bhi.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b086:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b08a:	d031      	beq.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b08c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b090:	d828      	bhi.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b092:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b096:	d01a      	beq.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b098:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b09c:	d822      	bhi.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d003      	beq.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b0a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b0a6:	d007      	beq.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b0a8:	e01c      	b.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0aa:	4b32      	ldr	r3, [pc, #200]	; (800b174 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ae:	4a31      	ldr	r2, [pc, #196]	; (800b174 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b0b6:	e01c      	b.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0bc:	3308      	adds	r3, #8
 800b0be:	2100      	movs	r1, #0
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f002 fa55 	bl	800d570 <RCCEx_PLL2_Config>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b0cc:	e011      	b.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b0ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0d2:	3328      	adds	r3, #40	; 0x28
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f002 fafc 	bl	800d6d4 <RCCEx_PLL3_Config>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b0e2:	e006      	b.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b0ea:	e002      	b.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b0ec:	bf00      	nop
 800b0ee:	e000      	b.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b0f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d10b      	bne.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b0fa:	4b1e      	ldr	r3, [pc, #120]	; (800b174 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0fe:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b106:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b10a:	4a1a      	ldr	r2, [pc, #104]	; (800b174 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b10c:	430b      	orrs	r3, r1
 800b10e:	6593      	str	r3, [r2, #88]	; 0x58
 800b110:	e003      	b.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b112:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b116:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b11a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b122:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b126:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b12a:	2300      	movs	r3, #0
 800b12c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b130:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b134:	460b      	mov	r3, r1
 800b136:	4313      	orrs	r3, r2
 800b138:	d056      	beq.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b13a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b13e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b142:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b146:	d038      	beq.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b148:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b14c:	d831      	bhi.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b14e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b152:	d034      	beq.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b154:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b158:	d82b      	bhi.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b15a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b15e:	d01d      	beq.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b160:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b164:	d825      	bhi.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b166:	2b00      	cmp	r3, #0
 800b168:	d006      	beq.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b16a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b16e:	d00a      	beq.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b170:	e01f      	b.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b172:	bf00      	nop
 800b174:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b178:	4ba2      	ldr	r3, [pc, #648]	; (800b404 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b17c:	4aa1      	ldr	r2, [pc, #644]	; (800b404 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b17e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b182:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b184:	e01c      	b.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b18a:	3308      	adds	r3, #8
 800b18c:	2100      	movs	r1, #0
 800b18e:	4618      	mov	r0, r3
 800b190:	f002 f9ee 	bl	800d570 <RCCEx_PLL2_Config>
 800b194:	4603      	mov	r3, r0
 800b196:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b19a:	e011      	b.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b19c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1a0:	3328      	adds	r3, #40	; 0x28
 800b1a2:	2100      	movs	r1, #0
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f002 fa95 	bl	800d6d4 <RCCEx_PLL3_Config>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1b0:	e006      	b.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1b8:	e002      	b.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b1ba:	bf00      	nop
 800b1bc:	e000      	b.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b1be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d10b      	bne.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b1c8:	4b8e      	ldr	r3, [pc, #568]	; (800b404 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b1ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1cc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b1d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b1d8:	4a8a      	ldr	r2, [pc, #552]	; (800b404 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b1da:	430b      	orrs	r3, r1
 800b1dc:	6593      	str	r3, [r2, #88]	; 0x58
 800b1de:	e003      	b.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b1e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b1f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b1fe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b202:	460b      	mov	r3, r1
 800b204:	4313      	orrs	r3, r2
 800b206:	d03a      	beq.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b20c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b20e:	2b30      	cmp	r3, #48	; 0x30
 800b210:	d01f      	beq.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b212:	2b30      	cmp	r3, #48	; 0x30
 800b214:	d819      	bhi.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b216:	2b20      	cmp	r3, #32
 800b218:	d00c      	beq.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b21a:	2b20      	cmp	r3, #32
 800b21c:	d815      	bhi.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d019      	beq.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b222:	2b10      	cmp	r3, #16
 800b224:	d111      	bne.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b226:	4b77      	ldr	r3, [pc, #476]	; (800b404 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22a:	4a76      	ldr	r2, [pc, #472]	; (800b404 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b22c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b230:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b232:	e011      	b.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b238:	3308      	adds	r3, #8
 800b23a:	2102      	movs	r1, #2
 800b23c:	4618      	mov	r0, r3
 800b23e:	f002 f997 	bl	800d570 <RCCEx_PLL2_Config>
 800b242:	4603      	mov	r3, r0
 800b244:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b248:	e006      	b.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b24a:	2301      	movs	r3, #1
 800b24c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b250:	e002      	b.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b252:	bf00      	nop
 800b254:	e000      	b.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b256:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b258:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d10a      	bne.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b260:	4b68      	ldr	r3, [pc, #416]	; (800b404 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b264:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b26c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b26e:	4a65      	ldr	r2, [pc, #404]	; (800b404 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b270:	430b      	orrs	r3, r1
 800b272:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b274:	e003      	b.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b276:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b27a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b27e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b286:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b28a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b28e:	2300      	movs	r3, #0
 800b290:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b294:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b298:	460b      	mov	r3, r1
 800b29a:	4313      	orrs	r3, r2
 800b29c:	d051      	beq.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b29e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b2a8:	d035      	beq.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b2aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b2ae:	d82e      	bhi.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b2b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b2b4:	d031      	beq.n	800b31a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b2b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b2ba:	d828      	bhi.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b2bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2c0:	d01a      	beq.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b2c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2c6:	d822      	bhi.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d003      	beq.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b2cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2d0:	d007      	beq.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b2d2:	e01c      	b.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2d4:	4b4b      	ldr	r3, [pc, #300]	; (800b404 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d8:	4a4a      	ldr	r2, [pc, #296]	; (800b404 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b2e0:	e01c      	b.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2e6:	3308      	adds	r3, #8
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f002 f940 	bl	800d570 <RCCEx_PLL2_Config>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b2f6:	e011      	b.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b2f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2fc:	3328      	adds	r3, #40	; 0x28
 800b2fe:	2100      	movs	r1, #0
 800b300:	4618      	mov	r0, r3
 800b302:	f002 f9e7 	bl	800d6d4 <RCCEx_PLL3_Config>
 800b306:	4603      	mov	r3, r0
 800b308:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b30c:	e006      	b.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b30e:	2301      	movs	r3, #1
 800b310:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b314:	e002      	b.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b316:	bf00      	nop
 800b318:	e000      	b.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b31a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b31c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b320:	2b00      	cmp	r3, #0
 800b322:	d10a      	bne.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b324:	4b37      	ldr	r3, [pc, #220]	; (800b404 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b328:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b32c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b332:	4a34      	ldr	r2, [pc, #208]	; (800b404 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b334:	430b      	orrs	r3, r1
 800b336:	6513      	str	r3, [r2, #80]	; 0x50
 800b338:	e003      	b.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b33a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b33e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b34e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b352:	2300      	movs	r3, #0
 800b354:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b358:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b35c:	460b      	mov	r3, r1
 800b35e:	4313      	orrs	r3, r2
 800b360:	d056      	beq.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b36c:	d033      	beq.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b36e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b372:	d82c      	bhi.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b374:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b378:	d02f      	beq.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b37a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b37e:	d826      	bhi.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b380:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b384:	d02b      	beq.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b386:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b38a:	d820      	bhi.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b38c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b390:	d012      	beq.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b392:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b396:	d81a      	bhi.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d022      	beq.n	800b3e2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b39c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3a0:	d115      	bne.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3a6:	3308      	adds	r3, #8
 800b3a8:	2101      	movs	r1, #1
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f002 f8e0 	bl	800d570 <RCCEx_PLL2_Config>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b3b6:	e015      	b.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b3b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3bc:	3328      	adds	r3, #40	; 0x28
 800b3be:	2101      	movs	r1, #1
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f002 f987 	bl	800d6d4 <RCCEx_PLL3_Config>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b3cc:	e00a      	b.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3d4:	e006      	b.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b3d6:	bf00      	nop
 800b3d8:	e004      	b.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b3da:	bf00      	nop
 800b3dc:	e002      	b.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b3de:	bf00      	nop
 800b3e0:	e000      	b.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b3e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d10d      	bne.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b3ec:	4b05      	ldr	r3, [pc, #20]	; (800b404 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3f0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b3f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3fa:	4a02      	ldr	r2, [pc, #8]	; (800b404 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3fc:	430b      	orrs	r3, r1
 800b3fe:	6513      	str	r3, [r2, #80]	; 0x50
 800b400:	e006      	b.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b402:	bf00      	nop
 800b404:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b408:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b40c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b418:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b41c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b420:	2300      	movs	r3, #0
 800b422:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b426:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b42a:	460b      	mov	r3, r1
 800b42c:	4313      	orrs	r3, r2
 800b42e:	d055      	beq.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b434:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b438:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b43c:	d033      	beq.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b43e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b442:	d82c      	bhi.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b448:	d02f      	beq.n	800b4aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b44a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b44e:	d826      	bhi.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b450:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b454:	d02b      	beq.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b456:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b45a:	d820      	bhi.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b45c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b460:	d012      	beq.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b466:	d81a      	bhi.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d022      	beq.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b46c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b470:	d115      	bne.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b476:	3308      	adds	r3, #8
 800b478:	2101      	movs	r1, #1
 800b47a:	4618      	mov	r0, r3
 800b47c:	f002 f878 	bl	800d570 <RCCEx_PLL2_Config>
 800b480:	4603      	mov	r3, r0
 800b482:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b486:	e015      	b.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b48c:	3328      	adds	r3, #40	; 0x28
 800b48e:	2101      	movs	r1, #1
 800b490:	4618      	mov	r0, r3
 800b492:	f002 f91f 	bl	800d6d4 <RCCEx_PLL3_Config>
 800b496:	4603      	mov	r3, r0
 800b498:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b49c:	e00a      	b.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4a4:	e006      	b.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b4a6:	bf00      	nop
 800b4a8:	e004      	b.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b4aa:	bf00      	nop
 800b4ac:	e002      	b.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b4ae:	bf00      	nop
 800b4b0:	e000      	b.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b4b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d10b      	bne.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b4bc:	4ba3      	ldr	r3, [pc, #652]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4c0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b4c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4cc:	4a9f      	ldr	r2, [pc, #636]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4ce:	430b      	orrs	r3, r1
 800b4d0:	6593      	str	r3, [r2, #88]	; 0x58
 800b4d2:	e003      	b.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b4dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b4e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b4f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	d037      	beq.n	800b56c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b4fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b502:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b506:	d00e      	beq.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b50c:	d816      	bhi.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d018      	beq.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b512:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b516:	d111      	bne.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b518:	4b8c      	ldr	r3, [pc, #560]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b51c:	4a8b      	ldr	r2, [pc, #556]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b51e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b522:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b524:	e00f      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b52a:	3308      	adds	r3, #8
 800b52c:	2101      	movs	r1, #1
 800b52e:	4618      	mov	r0, r3
 800b530:	f002 f81e 	bl	800d570 <RCCEx_PLL2_Config>
 800b534:	4603      	mov	r3, r0
 800b536:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b53a:	e004      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b53c:	2301      	movs	r3, #1
 800b53e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b542:	e000      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b544:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b546:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d10a      	bne.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b54e:	4b7f      	ldr	r3, [pc, #508]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b552:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b55a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b55c:	4a7b      	ldr	r2, [pc, #492]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b55e:	430b      	orrs	r3, r1
 800b560:	6513      	str	r3, [r2, #80]	; 0x50
 800b562:	e003      	b.n	800b56c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b564:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b568:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b56c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b574:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b578:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b57c:	2300      	movs	r3, #0
 800b57e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b582:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b586:	460b      	mov	r3, r1
 800b588:	4313      	orrs	r3, r2
 800b58a:	d039      	beq.n	800b600 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b58c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b592:	2b03      	cmp	r3, #3
 800b594:	d81c      	bhi.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b596:	a201      	add	r2, pc, #4	; (adr r2, 800b59c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b59c:	0800b5d9 	.word	0x0800b5d9
 800b5a0:	0800b5ad 	.word	0x0800b5ad
 800b5a4:	0800b5bb 	.word	0x0800b5bb
 800b5a8:	0800b5d9 	.word	0x0800b5d9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5ac:	4b67      	ldr	r3, [pc, #412]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b0:	4a66      	ldr	r2, [pc, #408]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b5b8:	e00f      	b.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b5ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5be:	3308      	adds	r3, #8
 800b5c0:	2102      	movs	r1, #2
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f001 ffd4 	bl	800d570 <RCCEx_PLL2_Config>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b5ce:	e004      	b.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5d6:	e000      	b.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b5d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d10a      	bne.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b5e2:	4b5a      	ldr	r3, [pc, #360]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5e6:	f023 0103 	bic.w	r1, r3, #3
 800b5ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5f0:	4a56      	ldr	r2, [pc, #344]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5f2:	430b      	orrs	r3, r1
 800b5f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b5f6:	e003      	b.n	800b600 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b608:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b60c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b610:	2300      	movs	r3, #0
 800b612:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b616:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b61a:	460b      	mov	r3, r1
 800b61c:	4313      	orrs	r3, r2
 800b61e:	f000 809f 	beq.w	800b760 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b622:	4b4b      	ldr	r3, [pc, #300]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	4a4a      	ldr	r2, [pc, #296]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b62c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b62e:	f7f8 fc09 	bl	8003e44 <HAL_GetTick>
 800b632:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b636:	e00b      	b.n	800b650 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b638:	f7f8 fc04 	bl	8003e44 <HAL_GetTick>
 800b63c:	4602      	mov	r2, r0
 800b63e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b642:	1ad3      	subs	r3, r2, r3
 800b644:	2b64      	cmp	r3, #100	; 0x64
 800b646:	d903      	bls.n	800b650 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b648:	2303      	movs	r3, #3
 800b64a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b64e:	e005      	b.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b650:	4b3f      	ldr	r3, [pc, #252]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d0ed      	beq.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b65c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b660:	2b00      	cmp	r3, #0
 800b662:	d179      	bne.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b664:	4b39      	ldr	r3, [pc, #228]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b666:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b66c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b670:	4053      	eors	r3, r2
 800b672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b676:	2b00      	cmp	r3, #0
 800b678:	d015      	beq.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b67a:	4b34      	ldr	r3, [pc, #208]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b67c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b67e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b682:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b686:	4b31      	ldr	r3, [pc, #196]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b68a:	4a30      	ldr	r2, [pc, #192]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b68c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b690:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b692:	4b2e      	ldr	r3, [pc, #184]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b696:	4a2d      	ldr	r2, [pc, #180]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b69c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b69e:	4a2b      	ldr	r2, [pc, #172]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b6a4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b6a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b6ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6b2:	d118      	bne.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6b4:	f7f8 fbc6 	bl	8003e44 <HAL_GetTick>
 800b6b8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b6bc:	e00d      	b.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b6be:	f7f8 fbc1 	bl	8003e44 <HAL_GetTick>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b6c8:	1ad2      	subs	r2, r2, r3
 800b6ca:	f241 3388 	movw	r3, #5000	; 0x1388
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d903      	bls.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b6d2:	2303      	movs	r3, #3
 800b6d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b6d8:	e005      	b.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b6da:	4b1c      	ldr	r3, [pc, #112]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6de:	f003 0302 	and.w	r3, r3, #2
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d0eb      	beq.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b6e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d129      	bne.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b6ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b6f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6fe:	d10e      	bne.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b700:	4b12      	ldr	r3, [pc, #72]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b702:	691b      	ldr	r3, [r3, #16]
 800b704:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b70c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b710:	091a      	lsrs	r2, r3, #4
 800b712:	4b10      	ldr	r3, [pc, #64]	; (800b754 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b714:	4013      	ands	r3, r2
 800b716:	4a0d      	ldr	r2, [pc, #52]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b718:	430b      	orrs	r3, r1
 800b71a:	6113      	str	r3, [r2, #16]
 800b71c:	e005      	b.n	800b72a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b71e:	4b0b      	ldr	r3, [pc, #44]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b720:	691b      	ldr	r3, [r3, #16]
 800b722:	4a0a      	ldr	r2, [pc, #40]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b724:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b728:	6113      	str	r3, [r2, #16]
 800b72a:	4b08      	ldr	r3, [pc, #32]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b72c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b72e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b732:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b73a:	4a04      	ldr	r2, [pc, #16]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b73c:	430b      	orrs	r3, r1
 800b73e:	6713      	str	r3, [r2, #112]	; 0x70
 800b740:	e00e      	b.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b742:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b746:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b74a:	e009      	b.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b74c:	58024400 	.word	0x58024400
 800b750:	58024800 	.word	0x58024800
 800b754:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b758:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b75c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b768:	f002 0301 	and.w	r3, r2, #1
 800b76c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b770:	2300      	movs	r3, #0
 800b772:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b776:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b77a:	460b      	mov	r3, r1
 800b77c:	4313      	orrs	r3, r2
 800b77e:	f000 8089 	beq.w	800b894 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b786:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b788:	2b28      	cmp	r3, #40	; 0x28
 800b78a:	d86b      	bhi.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b78c:	a201      	add	r2, pc, #4	; (adr r2, 800b794 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b78e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b792:	bf00      	nop
 800b794:	0800b86d 	.word	0x0800b86d
 800b798:	0800b865 	.word	0x0800b865
 800b79c:	0800b865 	.word	0x0800b865
 800b7a0:	0800b865 	.word	0x0800b865
 800b7a4:	0800b865 	.word	0x0800b865
 800b7a8:	0800b865 	.word	0x0800b865
 800b7ac:	0800b865 	.word	0x0800b865
 800b7b0:	0800b865 	.word	0x0800b865
 800b7b4:	0800b839 	.word	0x0800b839
 800b7b8:	0800b865 	.word	0x0800b865
 800b7bc:	0800b865 	.word	0x0800b865
 800b7c0:	0800b865 	.word	0x0800b865
 800b7c4:	0800b865 	.word	0x0800b865
 800b7c8:	0800b865 	.word	0x0800b865
 800b7cc:	0800b865 	.word	0x0800b865
 800b7d0:	0800b865 	.word	0x0800b865
 800b7d4:	0800b84f 	.word	0x0800b84f
 800b7d8:	0800b865 	.word	0x0800b865
 800b7dc:	0800b865 	.word	0x0800b865
 800b7e0:	0800b865 	.word	0x0800b865
 800b7e4:	0800b865 	.word	0x0800b865
 800b7e8:	0800b865 	.word	0x0800b865
 800b7ec:	0800b865 	.word	0x0800b865
 800b7f0:	0800b865 	.word	0x0800b865
 800b7f4:	0800b86d 	.word	0x0800b86d
 800b7f8:	0800b865 	.word	0x0800b865
 800b7fc:	0800b865 	.word	0x0800b865
 800b800:	0800b865 	.word	0x0800b865
 800b804:	0800b865 	.word	0x0800b865
 800b808:	0800b865 	.word	0x0800b865
 800b80c:	0800b865 	.word	0x0800b865
 800b810:	0800b865 	.word	0x0800b865
 800b814:	0800b86d 	.word	0x0800b86d
 800b818:	0800b865 	.word	0x0800b865
 800b81c:	0800b865 	.word	0x0800b865
 800b820:	0800b865 	.word	0x0800b865
 800b824:	0800b865 	.word	0x0800b865
 800b828:	0800b865 	.word	0x0800b865
 800b82c:	0800b865 	.word	0x0800b865
 800b830:	0800b865 	.word	0x0800b865
 800b834:	0800b86d 	.word	0x0800b86d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b83c:	3308      	adds	r3, #8
 800b83e:	2101      	movs	r1, #1
 800b840:	4618      	mov	r0, r3
 800b842:	f001 fe95 	bl	800d570 <RCCEx_PLL2_Config>
 800b846:	4603      	mov	r3, r0
 800b848:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b84c:	e00f      	b.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b84e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b852:	3328      	adds	r3, #40	; 0x28
 800b854:	2101      	movs	r1, #1
 800b856:	4618      	mov	r0, r3
 800b858:	f001 ff3c 	bl	800d6d4 <RCCEx_PLL3_Config>
 800b85c:	4603      	mov	r3, r0
 800b85e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b862:	e004      	b.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b864:	2301      	movs	r3, #1
 800b866:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b86a:	e000      	b.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b86c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b86e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b872:	2b00      	cmp	r3, #0
 800b874:	d10a      	bne.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b876:	4bbf      	ldr	r3, [pc, #764]	; (800bb74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b87a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b87e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b882:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b884:	4abb      	ldr	r2, [pc, #748]	; (800bb74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b886:	430b      	orrs	r3, r1
 800b888:	6553      	str	r3, [r2, #84]	; 0x54
 800b88a:	e003      	b.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b88c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b890:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89c:	f002 0302 	and.w	r3, r2, #2
 800b8a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b8aa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	d041      	beq.n	800b938 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b8b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b8ba:	2b05      	cmp	r3, #5
 800b8bc:	d824      	bhi.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b8be:	a201      	add	r2, pc, #4	; (adr r2, 800b8c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b8c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c4:	0800b911 	.word	0x0800b911
 800b8c8:	0800b8dd 	.word	0x0800b8dd
 800b8cc:	0800b8f3 	.word	0x0800b8f3
 800b8d0:	0800b911 	.word	0x0800b911
 800b8d4:	0800b911 	.word	0x0800b911
 800b8d8:	0800b911 	.word	0x0800b911
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b8dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8e0:	3308      	adds	r3, #8
 800b8e2:	2101      	movs	r1, #1
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f001 fe43 	bl	800d570 <RCCEx_PLL2_Config>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b8f0:	e00f      	b.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b8f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8f6:	3328      	adds	r3, #40	; 0x28
 800b8f8:	2101      	movs	r1, #1
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f001 feea 	bl	800d6d4 <RCCEx_PLL3_Config>
 800b900:	4603      	mov	r3, r0
 800b902:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b906:	e004      	b.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b908:	2301      	movs	r3, #1
 800b90a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b90e:	e000      	b.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b910:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b912:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b916:	2b00      	cmp	r3, #0
 800b918:	d10a      	bne.n	800b930 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b91a:	4b96      	ldr	r3, [pc, #600]	; (800bb74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b91c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b91e:	f023 0107 	bic.w	r1, r3, #7
 800b922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b926:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b928:	4a92      	ldr	r2, [pc, #584]	; (800bb74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b92a:	430b      	orrs	r3, r1
 800b92c:	6553      	str	r3, [r2, #84]	; 0x54
 800b92e:	e003      	b.n	800b938 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b930:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b934:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b940:	f002 0304 	and.w	r3, r2, #4
 800b944:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b948:	2300      	movs	r3, #0
 800b94a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b94e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b952:	460b      	mov	r3, r1
 800b954:	4313      	orrs	r3, r2
 800b956:	d044      	beq.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b95c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b960:	2b05      	cmp	r3, #5
 800b962:	d825      	bhi.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b964:	a201      	add	r2, pc, #4	; (adr r2, 800b96c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b96a:	bf00      	nop
 800b96c:	0800b9b9 	.word	0x0800b9b9
 800b970:	0800b985 	.word	0x0800b985
 800b974:	0800b99b 	.word	0x0800b99b
 800b978:	0800b9b9 	.word	0x0800b9b9
 800b97c:	0800b9b9 	.word	0x0800b9b9
 800b980:	0800b9b9 	.word	0x0800b9b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b988:	3308      	adds	r3, #8
 800b98a:	2101      	movs	r1, #1
 800b98c:	4618      	mov	r0, r3
 800b98e:	f001 fdef 	bl	800d570 <RCCEx_PLL2_Config>
 800b992:	4603      	mov	r3, r0
 800b994:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b998:	e00f      	b.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b99a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b99e:	3328      	adds	r3, #40	; 0x28
 800b9a0:	2101      	movs	r1, #1
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f001 fe96 	bl	800d6d4 <RCCEx_PLL3_Config>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b9ae:	e004      	b.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b9b6:	e000      	b.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b9b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d10b      	bne.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b9c2:	4b6c      	ldr	r3, [pc, #432]	; (800bb74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b9c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9c6:	f023 0107 	bic.w	r1, r3, #7
 800b9ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b9d2:	4a68      	ldr	r2, [pc, #416]	; (800bb74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b9d4:	430b      	orrs	r3, r1
 800b9d6:	6593      	str	r3, [r2, #88]	; 0x58
 800b9d8:	e003      	b.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b9e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ea:	f002 0320 	and.w	r3, r2, #32
 800b9ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b9f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	d055      	beq.n	800baae <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ba02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba0e:	d033      	beq.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800ba10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba14:	d82c      	bhi.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ba16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba1a:	d02f      	beq.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800ba1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba20:	d826      	bhi.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ba22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba26:	d02b      	beq.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800ba28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba2c:	d820      	bhi.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ba2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba32:	d012      	beq.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800ba34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba38:	d81a      	bhi.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d022      	beq.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800ba3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba42:	d115      	bne.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba48:	3308      	adds	r3, #8
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f001 fd8f 	bl	800d570 <RCCEx_PLL2_Config>
 800ba52:	4603      	mov	r3, r0
 800ba54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ba58:	e015      	b.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ba5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba5e:	3328      	adds	r3, #40	; 0x28
 800ba60:	2102      	movs	r1, #2
 800ba62:	4618      	mov	r0, r3
 800ba64:	f001 fe36 	bl	800d6d4 <RCCEx_PLL3_Config>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ba6e:	e00a      	b.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba70:	2301      	movs	r3, #1
 800ba72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba76:	e006      	b.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ba78:	bf00      	nop
 800ba7a:	e004      	b.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ba7c:	bf00      	nop
 800ba7e:	e002      	b.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ba80:	bf00      	nop
 800ba82:	e000      	b.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ba84:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d10b      	bne.n	800baa6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ba8e:	4b39      	ldr	r3, [pc, #228]	; (800bb74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba92:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ba96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba9e:	4a35      	ldr	r2, [pc, #212]	; (800bb74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800baa0:	430b      	orrs	r3, r1
 800baa2:	6553      	str	r3, [r2, #84]	; 0x54
 800baa4:	e003      	b.n	800baae <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800baaa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800baae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800baba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800babe:	2300      	movs	r3, #0
 800bac0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bac4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bac8:	460b      	mov	r3, r1
 800baca:	4313      	orrs	r3, r2
 800bacc:	d058      	beq.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bad2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bad6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bada:	d033      	beq.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800badc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bae0:	d82c      	bhi.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bae6:	d02f      	beq.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baec:	d826      	bhi.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800baee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800baf2:	d02b      	beq.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800baf4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800baf8:	d820      	bhi.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bafa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bafe:	d012      	beq.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bb00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb04:	d81a      	bhi.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d022      	beq.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bb0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb0e:	d115      	bne.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb14:	3308      	adds	r3, #8
 800bb16:	2100      	movs	r1, #0
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f001 fd29 	bl	800d570 <RCCEx_PLL2_Config>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bb24:	e015      	b.n	800bb52 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb2a:	3328      	adds	r3, #40	; 0x28
 800bb2c:	2102      	movs	r1, #2
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f001 fdd0 	bl	800d6d4 <RCCEx_PLL3_Config>
 800bb34:	4603      	mov	r3, r0
 800bb36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bb3a:	e00a      	b.n	800bb52 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb42:	e006      	b.n	800bb52 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bb44:	bf00      	nop
 800bb46:	e004      	b.n	800bb52 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bb48:	bf00      	nop
 800bb4a:	e002      	b.n	800bb52 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bb4c:	bf00      	nop
 800bb4e:	e000      	b.n	800bb52 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bb50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d10e      	bne.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bb5a:	4b06      	ldr	r3, [pc, #24]	; (800bb74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb5e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bb62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bb6a:	4a02      	ldr	r2, [pc, #8]	; (800bb74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb6c:	430b      	orrs	r3, r1
 800bb6e:	6593      	str	r3, [r2, #88]	; 0x58
 800bb70:	e006      	b.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bb72:	bf00      	nop
 800bb74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bb80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb88:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bb8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bb90:	2300      	movs	r3, #0
 800bb92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bb96:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	d055      	beq.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bba4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bba8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bbac:	d033      	beq.n	800bc16 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800bbae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bbb2:	d82c      	bhi.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bbb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbb8:	d02f      	beq.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800bbba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbbe:	d826      	bhi.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bbc0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bbc4:	d02b      	beq.n	800bc1e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800bbc6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bbca:	d820      	bhi.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bbcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbd0:	d012      	beq.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800bbd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbd6:	d81a      	bhi.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d022      	beq.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800bbdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbe0:	d115      	bne.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbe6:	3308      	adds	r3, #8
 800bbe8:	2100      	movs	r1, #0
 800bbea:	4618      	mov	r0, r3
 800bbec:	f001 fcc0 	bl	800d570 <RCCEx_PLL2_Config>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bbf6:	e015      	b.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bbf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbfc:	3328      	adds	r3, #40	; 0x28
 800bbfe:	2102      	movs	r1, #2
 800bc00:	4618      	mov	r0, r3
 800bc02:	f001 fd67 	bl	800d6d4 <RCCEx_PLL3_Config>
 800bc06:	4603      	mov	r3, r0
 800bc08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bc0c:	e00a      	b.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc0e:	2301      	movs	r3, #1
 800bc10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc14:	e006      	b.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bc16:	bf00      	nop
 800bc18:	e004      	b.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bc1a:	bf00      	nop
 800bc1c:	e002      	b.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bc1e:	bf00      	nop
 800bc20:	e000      	b.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bc22:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d10b      	bne.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bc2c:	4ba1      	ldr	r3, [pc, #644]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc30:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800bc34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bc3c:	4a9d      	ldr	r2, [pc, #628]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc3e:	430b      	orrs	r3, r1
 800bc40:	6593      	str	r3, [r2, #88]	; 0x58
 800bc42:	e003      	b.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bc4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc54:	f002 0308 	and.w	r3, r2, #8
 800bc58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bc62:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bc66:	460b      	mov	r3, r1
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	d01e      	beq.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bc6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc78:	d10c      	bne.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bc7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc7e:	3328      	adds	r3, #40	; 0x28
 800bc80:	2102      	movs	r1, #2
 800bc82:	4618      	mov	r0, r3
 800bc84:	f001 fd26 	bl	800d6d4 <RCCEx_PLL3_Config>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d002      	beq.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bc94:	4b87      	ldr	r3, [pc, #540]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc98:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bc9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bca4:	4a83      	ldr	r2, [pc, #524]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bca6:	430b      	orrs	r3, r1
 800bca8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bcaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb2:	f002 0310 	and.w	r3, r2, #16
 800bcb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bcba:	2300      	movs	r3, #0
 800bcbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bcc0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	d01e      	beq.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bcca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bcd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcd6:	d10c      	bne.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bcd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcdc:	3328      	adds	r3, #40	; 0x28
 800bcde:	2102      	movs	r1, #2
 800bce0:	4618      	mov	r0, r3
 800bce2:	f001 fcf7 	bl	800d6d4 <RCCEx_PLL3_Config>
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d002      	beq.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bcec:	2301      	movs	r3, #1
 800bcee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bcf2:	4b70      	ldr	r3, [pc, #448]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bcf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcf6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bcfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bd02:	4a6c      	ldr	r2, [pc, #432]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd04:	430b      	orrs	r3, r1
 800bd06:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bd08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd10:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bd14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bd18:	2300      	movs	r3, #0
 800bd1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bd1e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bd22:	460b      	mov	r3, r1
 800bd24:	4313      	orrs	r3, r2
 800bd26:	d03e      	beq.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bd28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bd30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd34:	d022      	beq.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800bd36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd3a:	d81b      	bhi.n	800bd74 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d003      	beq.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800bd40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd44:	d00b      	beq.n	800bd5e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800bd46:	e015      	b.n	800bd74 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd4c:	3308      	adds	r3, #8
 800bd4e:	2100      	movs	r1, #0
 800bd50:	4618      	mov	r0, r3
 800bd52:	f001 fc0d 	bl	800d570 <RCCEx_PLL2_Config>
 800bd56:	4603      	mov	r3, r0
 800bd58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bd5c:	e00f      	b.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd62:	3328      	adds	r3, #40	; 0x28
 800bd64:	2102      	movs	r1, #2
 800bd66:	4618      	mov	r0, r3
 800bd68:	f001 fcb4 	bl	800d6d4 <RCCEx_PLL3_Config>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bd72:	e004      	b.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd74:	2301      	movs	r3, #1
 800bd76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd7a:	e000      	b.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800bd7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d10b      	bne.n	800bd9e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bd86:	4b4b      	ldr	r3, [pc, #300]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd8a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bd8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bd96:	4a47      	ldr	r2, [pc, #284]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd98:	430b      	orrs	r3, r1
 800bd9a:	6593      	str	r3, [r2, #88]	; 0x58
 800bd9c:	e003      	b.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bda2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bda6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdae:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bdb2:	67bb      	str	r3, [r7, #120]	; 0x78
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bdb8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	d03b      	beq.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bdc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bdce:	d01f      	beq.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800bdd0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bdd4:	d818      	bhi.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800bdd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bdda:	d003      	beq.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800bddc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bde0:	d007      	beq.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800bde2:	e011      	b.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bde4:	4b33      	ldr	r3, [pc, #204]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bde6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bde8:	4a32      	ldr	r2, [pc, #200]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bdea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bdf0:	e00f      	b.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bdf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdf6:	3328      	adds	r3, #40	; 0x28
 800bdf8:	2101      	movs	r1, #1
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f001 fc6a 	bl	800d6d4 <RCCEx_PLL3_Config>
 800be00:	4603      	mov	r3, r0
 800be02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800be06:	e004      	b.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be08:	2301      	movs	r3, #1
 800be0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be0e:	e000      	b.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800be10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be16:	2b00      	cmp	r3, #0
 800be18:	d10b      	bne.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800be1a:	4b26      	ldr	r3, [pc, #152]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be1e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800be22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be2a:	4a22      	ldr	r2, [pc, #136]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be2c:	430b      	orrs	r3, r1
 800be2e:	6553      	str	r3, [r2, #84]	; 0x54
 800be30:	e003      	b.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800be3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be42:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800be46:	673b      	str	r3, [r7, #112]	; 0x70
 800be48:	2300      	movs	r3, #0
 800be4a:	677b      	str	r3, [r7, #116]	; 0x74
 800be4c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800be50:	460b      	mov	r3, r1
 800be52:	4313      	orrs	r3, r2
 800be54:	d034      	beq.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800be56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d003      	beq.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800be60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be64:	d007      	beq.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800be66:	e011      	b.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be68:	4b12      	ldr	r3, [pc, #72]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be6c:	4a11      	ldr	r2, [pc, #68]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800be74:	e00e      	b.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800be76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be7a:	3308      	adds	r3, #8
 800be7c:	2102      	movs	r1, #2
 800be7e:	4618      	mov	r0, r3
 800be80:	f001 fb76 	bl	800d570 <RCCEx_PLL2_Config>
 800be84:	4603      	mov	r3, r0
 800be86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800be8a:	e003      	b.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800be8c:	2301      	movs	r3, #1
 800be8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d10d      	bne.n	800beb8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800be9c:	4b05      	ldr	r3, [pc, #20]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bea0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800beaa:	4a02      	ldr	r2, [pc, #8]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800beac:	430b      	orrs	r3, r1
 800beae:	64d3      	str	r3, [r2, #76]	; 0x4c
 800beb0:	e006      	b.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800beb2:	bf00      	nop
 800beb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bebc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800becc:	66bb      	str	r3, [r7, #104]	; 0x68
 800bece:	2300      	movs	r3, #0
 800bed0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bed2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bed6:	460b      	mov	r3, r1
 800bed8:	4313      	orrs	r3, r2
 800beda:	d00c      	beq.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bedc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bee0:	3328      	adds	r3, #40	; 0x28
 800bee2:	2102      	movs	r1, #2
 800bee4:	4618      	mov	r0, r3
 800bee6:	f001 fbf5 	bl	800d6d4 <RCCEx_PLL3_Config>
 800beea:	4603      	mov	r3, r0
 800beec:	2b00      	cmp	r3, #0
 800beee:	d002      	beq.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800bef0:	2301      	movs	r3, #1
 800bef2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800befa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befe:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bf02:	663b      	str	r3, [r7, #96]	; 0x60
 800bf04:	2300      	movs	r3, #0
 800bf06:	667b      	str	r3, [r7, #100]	; 0x64
 800bf08:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	d038      	beq.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bf12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf1e:	d018      	beq.n	800bf52 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800bf20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf24:	d811      	bhi.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bf26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf2a:	d014      	beq.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800bf2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf30:	d80b      	bhi.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d011      	beq.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800bf36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf3a:	d106      	bne.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf3c:	4bc3      	ldr	r3, [pc, #780]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf40:	4ac2      	ldr	r2, [pc, #776]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bf48:	e008      	b.n	800bf5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf50:	e004      	b.n	800bf5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bf52:	bf00      	nop
 800bf54:	e002      	b.n	800bf5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bf56:	bf00      	nop
 800bf58:	e000      	b.n	800bf5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bf5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d10b      	bne.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bf64:	4bb9      	ldr	r3, [pc, #740]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf68:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bf6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf74:	4ab5      	ldr	r2, [pc, #724]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf76:	430b      	orrs	r3, r1
 800bf78:	6553      	str	r3, [r2, #84]	; 0x54
 800bf7a:	e003      	b.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bf84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bf90:	65bb      	str	r3, [r7, #88]	; 0x58
 800bf92:	2300      	movs	r3, #0
 800bf94:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf96:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	d009      	beq.n	800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bfa0:	4baa      	ldr	r3, [pc, #680]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfa4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bfa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfae:	4aa7      	ldr	r2, [pc, #668]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfb0:	430b      	orrs	r3, r1
 800bfb2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bfb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfbc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800bfc0:	653b      	str	r3, [r7, #80]	; 0x50
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	657b      	str	r3, [r7, #84]	; 0x54
 800bfc6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bfca:	460b      	mov	r3, r1
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	d00a      	beq.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bfd0:	4b9e      	ldr	r3, [pc, #632]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfd2:	691b      	ldr	r3, [r3, #16]
 800bfd4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800bfd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfdc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bfe0:	4a9a      	ldr	r2, [pc, #616]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfe2:	430b      	orrs	r3, r1
 800bfe4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bfe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfee:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bff2:	64bb      	str	r3, [r7, #72]	; 0x48
 800bff4:	2300      	movs	r3, #0
 800bff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bff8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bffc:	460b      	mov	r3, r1
 800bffe:	4313      	orrs	r3, r2
 800c000:	d009      	beq.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c002:	4b92      	ldr	r3, [pc, #584]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c006:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c00a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c00e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c010:	4a8e      	ldr	r2, [pc, #568]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c012:	430b      	orrs	r3, r1
 800c014:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c022:	643b      	str	r3, [r7, #64]	; 0x40
 800c024:	2300      	movs	r3, #0
 800c026:	647b      	str	r3, [r7, #68]	; 0x44
 800c028:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c02c:	460b      	mov	r3, r1
 800c02e:	4313      	orrs	r3, r2
 800c030:	d00e      	beq.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c032:	4b86      	ldr	r3, [pc, #536]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c034:	691b      	ldr	r3, [r3, #16]
 800c036:	4a85      	ldr	r2, [pc, #532]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c038:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c03c:	6113      	str	r3, [r2, #16]
 800c03e:	4b83      	ldr	r3, [pc, #524]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c040:	6919      	ldr	r1, [r3, #16]
 800c042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c046:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c04a:	4a80      	ldr	r2, [pc, #512]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c04c:	430b      	orrs	r3, r1
 800c04e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c058:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c05c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c05e:	2300      	movs	r3, #0
 800c060:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c062:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c066:	460b      	mov	r3, r1
 800c068:	4313      	orrs	r3, r2
 800c06a:	d009      	beq.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c06c:	4b77      	ldr	r3, [pc, #476]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c06e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c070:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c07a:	4a74      	ldr	r2, [pc, #464]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c07c:	430b      	orrs	r3, r1
 800c07e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c088:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c08c:	633b      	str	r3, [r7, #48]	; 0x30
 800c08e:	2300      	movs	r3, #0
 800c090:	637b      	str	r3, [r7, #52]	; 0x34
 800c092:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c096:	460b      	mov	r3, r1
 800c098:	4313      	orrs	r3, r2
 800c09a:	d00a      	beq.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c09c:	4b6b      	ldr	r3, [pc, #428]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c09e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0a0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c0a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0ac:	4a67      	ldr	r2, [pc, #412]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0ae:	430b      	orrs	r3, r1
 800c0b0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c0b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ba:	2100      	movs	r1, #0
 800c0bc:	62b9      	str	r1, [r7, #40]	; 0x28
 800c0be:	f003 0301 	and.w	r3, r3, #1
 800c0c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0c4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	d011      	beq.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c0ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0d2:	3308      	adds	r3, #8
 800c0d4:	2100      	movs	r1, #0
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f001 fa4a 	bl	800d570 <RCCEx_PLL2_Config>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c0e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d003      	beq.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fa:	2100      	movs	r1, #0
 800c0fc:	6239      	str	r1, [r7, #32]
 800c0fe:	f003 0302 	and.w	r3, r3, #2
 800c102:	627b      	str	r3, [r7, #36]	; 0x24
 800c104:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c108:	460b      	mov	r3, r1
 800c10a:	4313      	orrs	r3, r2
 800c10c:	d011      	beq.n	800c132 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c10e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c112:	3308      	adds	r3, #8
 800c114:	2101      	movs	r1, #1
 800c116:	4618      	mov	r0, r3
 800c118:	f001 fa2a 	bl	800d570 <RCCEx_PLL2_Config>
 800c11c:	4603      	mov	r3, r0
 800c11e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c122:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c126:	2b00      	cmp	r3, #0
 800c128:	d003      	beq.n	800c132 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c12a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c12e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13a:	2100      	movs	r1, #0
 800c13c:	61b9      	str	r1, [r7, #24]
 800c13e:	f003 0304 	and.w	r3, r3, #4
 800c142:	61fb      	str	r3, [r7, #28]
 800c144:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c148:	460b      	mov	r3, r1
 800c14a:	4313      	orrs	r3, r2
 800c14c:	d011      	beq.n	800c172 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c14e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c152:	3308      	adds	r3, #8
 800c154:	2102      	movs	r1, #2
 800c156:	4618      	mov	r0, r3
 800c158:	f001 fa0a 	bl	800d570 <RCCEx_PLL2_Config>
 800c15c:	4603      	mov	r3, r0
 800c15e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c162:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c166:	2b00      	cmp	r3, #0
 800c168:	d003      	beq.n	800c172 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c16a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c16e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17a:	2100      	movs	r1, #0
 800c17c:	6139      	str	r1, [r7, #16]
 800c17e:	f003 0308 	and.w	r3, r3, #8
 800c182:	617b      	str	r3, [r7, #20]
 800c184:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c188:	460b      	mov	r3, r1
 800c18a:	4313      	orrs	r3, r2
 800c18c:	d011      	beq.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c18e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c192:	3328      	adds	r3, #40	; 0x28
 800c194:	2100      	movs	r1, #0
 800c196:	4618      	mov	r0, r3
 800c198:	f001 fa9c 	bl	800d6d4 <RCCEx_PLL3_Config>
 800c19c:	4603      	mov	r3, r0
 800c19e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c1a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d003      	beq.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c1b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ba:	2100      	movs	r1, #0
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	f003 0310 	and.w	r3, r3, #16
 800c1c2:	60fb      	str	r3, [r7, #12]
 800c1c4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c1c8:	460b      	mov	r3, r1
 800c1ca:	4313      	orrs	r3, r2
 800c1cc:	d011      	beq.n	800c1f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c1ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1d2:	3328      	adds	r3, #40	; 0x28
 800c1d4:	2101      	movs	r1, #1
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f001 fa7c 	bl	800d6d4 <RCCEx_PLL3_Config>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c1e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d003      	beq.n	800c1f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c1f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fa:	2100      	movs	r1, #0
 800c1fc:	6039      	str	r1, [r7, #0]
 800c1fe:	f003 0320 	and.w	r3, r3, #32
 800c202:	607b      	str	r3, [r7, #4]
 800c204:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c208:	460b      	mov	r3, r1
 800c20a:	4313      	orrs	r3, r2
 800c20c:	d011      	beq.n	800c232 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c20e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c212:	3328      	adds	r3, #40	; 0x28
 800c214:	2102      	movs	r1, #2
 800c216:	4618      	mov	r0, r3
 800c218:	f001 fa5c 	bl	800d6d4 <RCCEx_PLL3_Config>
 800c21c:	4603      	mov	r3, r0
 800c21e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c222:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c226:	2b00      	cmp	r3, #0
 800c228:	d003      	beq.n	800c232 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c22a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c22e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c232:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c236:	2b00      	cmp	r3, #0
 800c238:	d101      	bne.n	800c23e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c23a:	2300      	movs	r3, #0
 800c23c:	e000      	b.n	800c240 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c23e:	2301      	movs	r3, #1
}
 800c240:	4618      	mov	r0, r3
 800c242:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c246:	46bd      	mov	sp, r7
 800c248:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c24c:	58024400 	.word	0x58024400

0800c250 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b090      	sub	sp, #64	; 0x40
 800c254:	af00      	add	r7, sp, #0
 800c256:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c25a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c25e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c262:	430b      	orrs	r3, r1
 800c264:	f040 8094 	bne.w	800c390 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c268:	4b9e      	ldr	r3, [pc, #632]	; (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c26a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c26c:	f003 0307 	and.w	r3, r3, #7
 800c270:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c274:	2b04      	cmp	r3, #4
 800c276:	f200 8087 	bhi.w	800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c27a:	a201      	add	r2, pc, #4	; (adr r2, 800c280 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c280:	0800c295 	.word	0x0800c295
 800c284:	0800c2bd 	.word	0x0800c2bd
 800c288:	0800c2e5 	.word	0x0800c2e5
 800c28c:	0800c381 	.word	0x0800c381
 800c290:	0800c30d 	.word	0x0800c30d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c294:	4b93      	ldr	r3, [pc, #588]	; (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c29c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2a0:	d108      	bne.n	800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f001 f810 	bl	800d2cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2b0:	f000 bd45 	b.w	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2b8:	f000 bd41 	b.w	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2bc:	4b89      	ldr	r3, [pc, #548]	; (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2c8:	d108      	bne.n	800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2ca:	f107 0318 	add.w	r3, r7, #24
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f000 fd54 	bl	800cd7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c2d4:	69bb      	ldr	r3, [r7, #24]
 800c2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2d8:	f000 bd31 	b.w	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2e0:	f000 bd2d 	b.w	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c2e4:	4b7f      	ldr	r3, [pc, #508]	; (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2f0:	d108      	bne.n	800c304 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2f2:	f107 030c 	add.w	r3, r7, #12
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f000 fe94 	bl	800d024 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c300:	f000 bd1d 	b.w	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c304:	2300      	movs	r3, #0
 800c306:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c308:	f000 bd19 	b.w	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c30c:	4b75      	ldr	r3, [pc, #468]	; (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c30e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c310:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c314:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c316:	4b73      	ldr	r3, [pc, #460]	; (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f003 0304 	and.w	r3, r3, #4
 800c31e:	2b04      	cmp	r3, #4
 800c320:	d10c      	bne.n	800c33c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c324:	2b00      	cmp	r3, #0
 800c326:	d109      	bne.n	800c33c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c328:	4b6e      	ldr	r3, [pc, #440]	; (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	08db      	lsrs	r3, r3, #3
 800c32e:	f003 0303 	and.w	r3, r3, #3
 800c332:	4a6d      	ldr	r2, [pc, #436]	; (800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c334:	fa22 f303 	lsr.w	r3, r2, r3
 800c338:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c33a:	e01f      	b.n	800c37c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c33c:	4b69      	ldr	r3, [pc, #420]	; (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c348:	d106      	bne.n	800c358 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c34c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c350:	d102      	bne.n	800c358 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c352:	4b66      	ldr	r3, [pc, #408]	; (800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c354:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c356:	e011      	b.n	800c37c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c358:	4b62      	ldr	r3, [pc, #392]	; (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c360:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c364:	d106      	bne.n	800c374 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c36c:	d102      	bne.n	800c374 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c36e:	4b60      	ldr	r3, [pc, #384]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c370:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c372:	e003      	b.n	800c37c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c374:	2300      	movs	r3, #0
 800c376:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c378:	f000 bce1 	b.w	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c37c:	f000 bcdf 	b.w	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c380:	4b5c      	ldr	r3, [pc, #368]	; (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c384:	f000 bcdb 	b.w	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c388:	2300      	movs	r3, #0
 800c38a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c38c:	f000 bcd7 	b.w	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c390:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c394:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c398:	430b      	orrs	r3, r1
 800c39a:	f040 80ad 	bne.w	800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c39e:	4b51      	ldr	r3, [pc, #324]	; (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3a2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c3a6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3ae:	d056      	beq.n	800c45e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3b6:	f200 8090 	bhi.w	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3bc:	2bc0      	cmp	r3, #192	; 0xc0
 800c3be:	f000 8088 	beq.w	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c4:	2bc0      	cmp	r3, #192	; 0xc0
 800c3c6:	f200 8088 	bhi.w	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3cc:	2b80      	cmp	r3, #128	; 0x80
 800c3ce:	d032      	beq.n	800c436 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d2:	2b80      	cmp	r3, #128	; 0x80
 800c3d4:	f200 8081 	bhi.w	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d003      	beq.n	800c3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e0:	2b40      	cmp	r3, #64	; 0x40
 800c3e2:	d014      	beq.n	800c40e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c3e4:	e079      	b.n	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c3e6:	4b3f      	ldr	r3, [pc, #252]	; (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3f2:	d108      	bne.n	800c406 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f000 ff67 	bl	800d2cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c400:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c402:	f000 bc9c 	b.w	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c406:	2300      	movs	r3, #0
 800c408:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c40a:	f000 bc98 	b.w	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c40e:	4b35      	ldr	r3, [pc, #212]	; (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c416:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c41a:	d108      	bne.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c41c:	f107 0318 	add.w	r3, r7, #24
 800c420:	4618      	mov	r0, r3
 800c422:	f000 fcab 	bl	800cd7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c426:	69bb      	ldr	r3, [r7, #24]
 800c428:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c42a:	f000 bc88 	b.w	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c42e:	2300      	movs	r3, #0
 800c430:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c432:	f000 bc84 	b.w	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c436:	4b2b      	ldr	r3, [pc, #172]	; (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c43e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c442:	d108      	bne.n	800c456 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c444:	f107 030c 	add.w	r3, r7, #12
 800c448:	4618      	mov	r0, r3
 800c44a:	f000 fdeb 	bl	800d024 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c452:	f000 bc74 	b.w	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c456:	2300      	movs	r3, #0
 800c458:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c45a:	f000 bc70 	b.w	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c45e:	4b21      	ldr	r3, [pc, #132]	; (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c462:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c466:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c468:	4b1e      	ldr	r3, [pc, #120]	; (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f003 0304 	and.w	r3, r3, #4
 800c470:	2b04      	cmp	r3, #4
 800c472:	d10c      	bne.n	800c48e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c476:	2b00      	cmp	r3, #0
 800c478:	d109      	bne.n	800c48e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c47a:	4b1a      	ldr	r3, [pc, #104]	; (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	08db      	lsrs	r3, r3, #3
 800c480:	f003 0303 	and.w	r3, r3, #3
 800c484:	4a18      	ldr	r2, [pc, #96]	; (800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c486:	fa22 f303 	lsr.w	r3, r2, r3
 800c48a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c48c:	e01f      	b.n	800c4ce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c48e:	4b15      	ldr	r3, [pc, #84]	; (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c49a:	d106      	bne.n	800c4aa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c49c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c49e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4a2:	d102      	bne.n	800c4aa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c4a4:	4b11      	ldr	r3, [pc, #68]	; (800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4a8:	e011      	b.n	800c4ce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c4aa:	4b0e      	ldr	r3, [pc, #56]	; (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4b6:	d106      	bne.n	800c4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c4b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4be:	d102      	bne.n	800c4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c4c0:	4b0b      	ldr	r3, [pc, #44]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4c4:	e003      	b.n	800c4ce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c4ca:	f000 bc38 	b.w	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c4ce:	f000 bc36 	b.w	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c4d2:	4b08      	ldr	r3, [pc, #32]	; (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c4d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4d6:	f000 bc32 	b.w	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4de:	f000 bc2e 	b.w	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c4e2:	bf00      	nop
 800c4e4:	58024400 	.word	0x58024400
 800c4e8:	03d09000 	.word	0x03d09000
 800c4ec:	003d0900 	.word	0x003d0900
 800c4f0:	017d7840 	.word	0x017d7840
 800c4f4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c4f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4fc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c500:	430b      	orrs	r3, r1
 800c502:	f040 809c 	bne.w	800c63e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c506:	4b9e      	ldr	r3, [pc, #632]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c50a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c50e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c512:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c516:	d054      	beq.n	800c5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c51e:	f200 808b 	bhi.w	800c638 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c524:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c528:	f000 8083 	beq.w	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c532:	f200 8081 	bhi.w	800c638 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c538:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c53c:	d02f      	beq.n	800c59e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c540:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c544:	d878      	bhi.n	800c638 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d004      	beq.n	800c556 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c552:	d012      	beq.n	800c57a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c554:	e070      	b.n	800c638 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c556:	4b8a      	ldr	r3, [pc, #552]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c55e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c562:	d107      	bne.n	800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c568:	4618      	mov	r0, r3
 800c56a:	f000 feaf 	bl	800d2cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c570:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c572:	e3e4      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c574:	2300      	movs	r3, #0
 800c576:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c578:	e3e1      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c57a:	4b81      	ldr	r3, [pc, #516]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c582:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c586:	d107      	bne.n	800c598 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c588:	f107 0318 	add.w	r3, r7, #24
 800c58c:	4618      	mov	r0, r3
 800c58e:	f000 fbf5 	bl	800cd7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c592:	69bb      	ldr	r3, [r7, #24]
 800c594:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c596:	e3d2      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c598:	2300      	movs	r3, #0
 800c59a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c59c:	e3cf      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c59e:	4b78      	ldr	r3, [pc, #480]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5aa:	d107      	bne.n	800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5ac:	f107 030c 	add.w	r3, r7, #12
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f000 fd37 	bl	800d024 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5ba:	e3c0      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5c0:	e3bd      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c5c2:	4b6f      	ldr	r3, [pc, #444]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c5ca:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c5cc:	4b6c      	ldr	r3, [pc, #432]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f003 0304 	and.w	r3, r3, #4
 800c5d4:	2b04      	cmp	r3, #4
 800c5d6:	d10c      	bne.n	800c5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c5d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d109      	bne.n	800c5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5de:	4b68      	ldr	r3, [pc, #416]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	08db      	lsrs	r3, r3, #3
 800c5e4:	f003 0303 	and.w	r3, r3, #3
 800c5e8:	4a66      	ldr	r2, [pc, #408]	; (800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c5ea:	fa22 f303 	lsr.w	r3, r2, r3
 800c5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5f0:	e01e      	b.n	800c630 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c5f2:	4b63      	ldr	r3, [pc, #396]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5fe:	d106      	bne.n	800c60e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c602:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c606:	d102      	bne.n	800c60e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c608:	4b5f      	ldr	r3, [pc, #380]	; (800c788 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c60a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c60c:	e010      	b.n	800c630 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c60e:	4b5c      	ldr	r3, [pc, #368]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c616:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c61a:	d106      	bne.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c61c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c61e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c622:	d102      	bne.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c624:	4b59      	ldr	r3, [pc, #356]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c626:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c628:	e002      	b.n	800c630 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c62a:	2300      	movs	r3, #0
 800c62c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c62e:	e386      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c630:	e385      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c632:	4b57      	ldr	r3, [pc, #348]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c634:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c636:	e382      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c638:	2300      	movs	r3, #0
 800c63a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c63c:	e37f      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c63e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c642:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c646:	430b      	orrs	r3, r1
 800c648:	f040 80a7 	bne.w	800c79a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c64c:	4b4c      	ldr	r3, [pc, #304]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c64e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c650:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c654:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c658:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c65c:	d055      	beq.n	800c70a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c660:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c664:	f200 8096 	bhi.w	800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c66e:	f000 8084 	beq.w	800c77a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c674:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c678:	f200 808c 	bhi.w	800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c682:	d030      	beq.n	800c6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c686:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c68a:	f200 8083 	bhi.w	800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c690:	2b00      	cmp	r3, #0
 800c692:	d004      	beq.n	800c69e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c696:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c69a:	d012      	beq.n	800c6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c69c:	e07a      	b.n	800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c69e:	4b38      	ldr	r3, [pc, #224]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c6aa:	d107      	bne.n	800c6bc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c6ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f000 fe0b 	bl	800d2cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6ba:	e340      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c0:	e33d      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c6c2:	4b2f      	ldr	r3, [pc, #188]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6ce:	d107      	bne.n	800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6d0:	f107 0318 	add.w	r3, r7, #24
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f000 fb51 	bl	800cd7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c6da:	69bb      	ldr	r3, [r7, #24]
 800c6dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6de:	e32e      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6e4:	e32b      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c6e6:	4b26      	ldr	r3, [pc, #152]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6f2:	d107      	bne.n	800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6f4:	f107 030c 	add.w	r3, r7, #12
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f000 fc93 	bl	800d024 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c702:	e31c      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c704:	2300      	movs	r3, #0
 800c706:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c708:	e319      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c70a:	4b1d      	ldr	r3, [pc, #116]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c70c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c70e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c712:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c714:	4b1a      	ldr	r3, [pc, #104]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f003 0304 	and.w	r3, r3, #4
 800c71c:	2b04      	cmp	r3, #4
 800c71e:	d10c      	bne.n	800c73a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c722:	2b00      	cmp	r3, #0
 800c724:	d109      	bne.n	800c73a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c726:	4b16      	ldr	r3, [pc, #88]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	08db      	lsrs	r3, r3, #3
 800c72c:	f003 0303 	and.w	r3, r3, #3
 800c730:	4a14      	ldr	r2, [pc, #80]	; (800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c732:	fa22 f303 	lsr.w	r3, r2, r3
 800c736:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c738:	e01e      	b.n	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c73a:	4b11      	ldr	r3, [pc, #68]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c746:	d106      	bne.n	800c756 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c74a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c74e:	d102      	bne.n	800c756 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c750:	4b0d      	ldr	r3, [pc, #52]	; (800c788 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c752:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c754:	e010      	b.n	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c756:	4b0a      	ldr	r3, [pc, #40]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c75e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c762:	d106      	bne.n	800c772 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c76a:	d102      	bne.n	800c772 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c76c:	4b07      	ldr	r3, [pc, #28]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c76e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c770:	e002      	b.n	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c772:	2300      	movs	r3, #0
 800c774:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c776:	e2e2      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c778:	e2e1      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c77a:	4b05      	ldr	r3, [pc, #20]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c77c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c77e:	e2de      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c780:	58024400 	.word	0x58024400
 800c784:	03d09000 	.word	0x03d09000
 800c788:	003d0900 	.word	0x003d0900
 800c78c:	017d7840 	.word	0x017d7840
 800c790:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c794:	2300      	movs	r3, #0
 800c796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c798:	e2d1      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c79a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c79e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c7a2:	430b      	orrs	r3, r1
 800c7a4:	f040 809c 	bne.w	800c8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c7a8:	4b93      	ldr	r3, [pc, #588]	; (800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7ac:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c7b0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c7b8:	d054      	beq.n	800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c7c0:	f200 808b 	bhi.w	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c7ca:	f000 8083 	beq.w	800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c7d4:	f200 8081 	bhi.w	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7de:	d02f      	beq.n	800c840 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7e6:	d878      	bhi.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d004      	beq.n	800c7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7f4:	d012      	beq.n	800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c7f6:	e070      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c7f8:	4b7f      	ldr	r3, [pc, #508]	; (800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c800:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c804:	d107      	bne.n	800c816 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c80a:	4618      	mov	r0, r3
 800c80c:	f000 fd5e 	bl	800d2cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c812:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c814:	e293      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c816:	2300      	movs	r3, #0
 800c818:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c81a:	e290      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c81c:	4b76      	ldr	r3, [pc, #472]	; (800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c824:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c828:	d107      	bne.n	800c83a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c82a:	f107 0318 	add.w	r3, r7, #24
 800c82e:	4618      	mov	r0, r3
 800c830:	f000 faa4 	bl	800cd7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c834:	69bb      	ldr	r3, [r7, #24]
 800c836:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c838:	e281      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c83a:	2300      	movs	r3, #0
 800c83c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c83e:	e27e      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c840:	4b6d      	ldr	r3, [pc, #436]	; (800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c84c:	d107      	bne.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c84e:	f107 030c 	add.w	r3, r7, #12
 800c852:	4618      	mov	r0, r3
 800c854:	f000 fbe6 	bl	800d024 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c85c:	e26f      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c85e:	2300      	movs	r3, #0
 800c860:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c862:	e26c      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c864:	4b64      	ldr	r3, [pc, #400]	; (800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c868:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c86c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c86e:	4b62      	ldr	r3, [pc, #392]	; (800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f003 0304 	and.w	r3, r3, #4
 800c876:	2b04      	cmp	r3, #4
 800c878:	d10c      	bne.n	800c894 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c87a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d109      	bne.n	800c894 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c880:	4b5d      	ldr	r3, [pc, #372]	; (800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	08db      	lsrs	r3, r3, #3
 800c886:	f003 0303 	and.w	r3, r3, #3
 800c88a:	4a5c      	ldr	r2, [pc, #368]	; (800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c88c:	fa22 f303 	lsr.w	r3, r2, r3
 800c890:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c892:	e01e      	b.n	800c8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c894:	4b58      	ldr	r3, [pc, #352]	; (800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c89c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8a0:	d106      	bne.n	800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c8a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8a8:	d102      	bne.n	800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c8aa:	4b55      	ldr	r3, [pc, #340]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8ae:	e010      	b.n	800c8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c8b0:	4b51      	ldr	r3, [pc, #324]	; (800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8bc:	d106      	bne.n	800c8cc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8c4:	d102      	bne.n	800c8cc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c8c6:	4b4f      	ldr	r3, [pc, #316]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c8c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8ca:	e002      	b.n	800c8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c8d0:	e235      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c8d2:	e234      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c8d4:	4b4c      	ldr	r3, [pc, #304]	; (800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8d8:	e231      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8de:	e22e      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c8e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8e4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c8e8:	430b      	orrs	r3, r1
 800c8ea:	f040 808f 	bne.w	800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c8ee:	4b42      	ldr	r3, [pc, #264]	; (800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8f2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c8f6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c8fe:	d06b      	beq.n	800c9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c902:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c906:	d874      	bhi.n	800c9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c90a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c90e:	d056      	beq.n	800c9be <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c912:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c916:	d86c      	bhi.n	800c9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c91a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c91e:	d03b      	beq.n	800c998 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c922:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c926:	d864      	bhi.n	800c9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c92e:	d021      	beq.n	800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c932:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c936:	d85c      	bhi.n	800c9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d004      	beq.n	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c944:	d004      	beq.n	800c950 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c946:	e054      	b.n	800c9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c948:	f7fe fa0a 	bl	800ad60 <HAL_RCC_GetPCLK1Freq>
 800c94c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c94e:	e1f6      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c950:	4b29      	ldr	r3, [pc, #164]	; (800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c958:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c95c:	d107      	bne.n	800c96e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c95e:	f107 0318 	add.w	r3, r7, #24
 800c962:	4618      	mov	r0, r3
 800c964:	f000 fa0a 	bl	800cd7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c968:	69fb      	ldr	r3, [r7, #28]
 800c96a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c96c:	e1e7      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c96e:	2300      	movs	r3, #0
 800c970:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c972:	e1e4      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c974:	4b20      	ldr	r3, [pc, #128]	; (800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c97c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c980:	d107      	bne.n	800c992 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c982:	f107 030c 	add.w	r3, r7, #12
 800c986:	4618      	mov	r0, r3
 800c988:	f000 fb4c 	bl	800d024 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c990:	e1d5      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c992:	2300      	movs	r3, #0
 800c994:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c996:	e1d2      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c998:	4b17      	ldr	r3, [pc, #92]	; (800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f003 0304 	and.w	r3, r3, #4
 800c9a0:	2b04      	cmp	r3, #4
 800c9a2:	d109      	bne.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9a4:	4b14      	ldr	r3, [pc, #80]	; (800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	08db      	lsrs	r3, r3, #3
 800c9aa:	f003 0303 	and.w	r3, r3, #3
 800c9ae:	4a13      	ldr	r2, [pc, #76]	; (800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c9b0:	fa22 f303 	lsr.w	r3, r2, r3
 800c9b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9b6:	e1c2      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9bc:	e1bf      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c9be:	4b0e      	ldr	r3, [pc, #56]	; (800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9ca:	d102      	bne.n	800c9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c9cc:	4b0c      	ldr	r3, [pc, #48]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9d0:	e1b5      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9d6:	e1b2      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c9d8:	4b07      	ldr	r3, [pc, #28]	; (800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9e4:	d102      	bne.n	800c9ec <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c9e6:	4b07      	ldr	r3, [pc, #28]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9ea:	e1a8      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9f0:	e1a5      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9f6:	e1a2      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c9f8:	58024400 	.word	0x58024400
 800c9fc:	03d09000 	.word	0x03d09000
 800ca00:	003d0900 	.word	0x003d0900
 800ca04:	017d7840 	.word	0x017d7840
 800ca08:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ca0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca10:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800ca14:	430b      	orrs	r3, r1
 800ca16:	d173      	bne.n	800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ca18:	4b9c      	ldr	r3, [pc, #624]	; (800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ca20:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ca22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca28:	d02f      	beq.n	800ca8a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ca2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca30:	d863      	bhi.n	800cafa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ca32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d004      	beq.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ca38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca3e:	d012      	beq.n	800ca66 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ca40:	e05b      	b.n	800cafa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca42:	4b92      	ldr	r3, [pc, #584]	; (800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca4e:	d107      	bne.n	800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca50:	f107 0318 	add.w	r3, r7, #24
 800ca54:	4618      	mov	r0, r3
 800ca56:	f000 f991 	bl	800cd7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ca5a:	69bb      	ldr	r3, [r7, #24]
 800ca5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca5e:	e16e      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca60:	2300      	movs	r3, #0
 800ca62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca64:	e16b      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca66:	4b89      	ldr	r3, [pc, #548]	; (800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca72:	d107      	bne.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca74:	f107 030c 	add.w	r3, r7, #12
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f000 fad3 	bl	800d024 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca82:	e15c      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca84:	2300      	movs	r3, #0
 800ca86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca88:	e159      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ca8a:	4b80      	ldr	r3, [pc, #512]	; (800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca92:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ca94:	4b7d      	ldr	r3, [pc, #500]	; (800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f003 0304 	and.w	r3, r3, #4
 800ca9c:	2b04      	cmp	r3, #4
 800ca9e:	d10c      	bne.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800caa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d109      	bne.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800caa6:	4b79      	ldr	r3, [pc, #484]	; (800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	08db      	lsrs	r3, r3, #3
 800caac:	f003 0303 	and.w	r3, r3, #3
 800cab0:	4a77      	ldr	r2, [pc, #476]	; (800cc90 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cab2:	fa22 f303 	lsr.w	r3, r2, r3
 800cab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cab8:	e01e      	b.n	800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800caba:	4b74      	ldr	r3, [pc, #464]	; (800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cac6:	d106      	bne.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800cac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cace:	d102      	bne.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cad0:	4b70      	ldr	r3, [pc, #448]	; (800cc94 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cad4:	e010      	b.n	800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cad6:	4b6d      	ldr	r3, [pc, #436]	; (800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cade:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cae2:	d106      	bne.n	800caf2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800cae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800caea:	d102      	bne.n	800caf2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800caec:	4b6a      	ldr	r3, [pc, #424]	; (800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800caee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800caf0:	e002      	b.n	800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800caf2:	2300      	movs	r3, #0
 800caf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800caf6:	e122      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800caf8:	e121      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cafa:	2300      	movs	r3, #0
 800cafc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cafe:	e11e      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cb00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb04:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cb08:	430b      	orrs	r3, r1
 800cb0a:	d133      	bne.n	800cb74 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cb0c:	4b5f      	ldr	r3, [pc, #380]	; (800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb14:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cb16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d004      	beq.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800cb1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb22:	d012      	beq.n	800cb4a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cb24:	e023      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cb26:	4b59      	ldr	r3, [pc, #356]	; (800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb32:	d107      	bne.n	800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f000 fbc7 	bl	800d2cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb42:	e0fc      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb44:	2300      	movs	r3, #0
 800cb46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb48:	e0f9      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb4a:	4b50      	ldr	r3, [pc, #320]	; (800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb56:	d107      	bne.n	800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb58:	f107 0318 	add.w	r3, r7, #24
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f000 f90d 	bl	800cd7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cb62:	6a3b      	ldr	r3, [r7, #32]
 800cb64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb66:	e0ea      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb6c:	e0e7      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb72:	e0e4      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cb74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb78:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cb7c:	430b      	orrs	r3, r1
 800cb7e:	f040 808d 	bne.w	800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cb82:	4b42      	ldr	r3, [pc, #264]	; (800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb86:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cb8a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb92:	d06b      	beq.n	800cc6c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800cb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb9a:	d874      	bhi.n	800cc86 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cba2:	d056      	beq.n	800cc52 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800cba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbaa:	d86c      	bhi.n	800cc86 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cbb2:	d03b      	beq.n	800cc2c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800cbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cbba:	d864      	bhi.n	800cc86 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbc2:	d021      	beq.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800cbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbca:	d85c      	bhi.n	800cc86 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d004      	beq.n	800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800cbd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbd8:	d004      	beq.n	800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800cbda:	e054      	b.n	800cc86 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cbdc:	f000 f8b8 	bl	800cd50 <HAL_RCCEx_GetD3PCLK1Freq>
 800cbe0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cbe2:	e0ac      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbe4:	4b29      	ldr	r3, [pc, #164]	; (800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbf0:	d107      	bne.n	800cc02 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbf2:	f107 0318 	add.w	r3, r7, #24
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f000 f8c0 	bl	800cd7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cbfc:	69fb      	ldr	r3, [r7, #28]
 800cbfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc00:	e09d      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc02:	2300      	movs	r3, #0
 800cc04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc06:	e09a      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc08:	4b20      	ldr	r3, [pc, #128]	; (800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc14:	d107      	bne.n	800cc26 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc16:	f107 030c 	add.w	r3, r7, #12
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f000 fa02 	bl	800d024 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc24:	e08b      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc26:	2300      	movs	r3, #0
 800cc28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc2a:	e088      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cc2c:	4b17      	ldr	r3, [pc, #92]	; (800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f003 0304 	and.w	r3, r3, #4
 800cc34:	2b04      	cmp	r3, #4
 800cc36:	d109      	bne.n	800cc4c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc38:	4b14      	ldr	r3, [pc, #80]	; (800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	08db      	lsrs	r3, r3, #3
 800cc3e:	f003 0303 	and.w	r3, r3, #3
 800cc42:	4a13      	ldr	r2, [pc, #76]	; (800cc90 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cc44:	fa22 f303 	lsr.w	r3, r2, r3
 800cc48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc4a:	e078      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc50:	e075      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cc52:	4b0e      	ldr	r3, [pc, #56]	; (800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc5e:	d102      	bne.n	800cc66 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800cc60:	4b0c      	ldr	r3, [pc, #48]	; (800cc94 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cc62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc64:	e06b      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc66:	2300      	movs	r3, #0
 800cc68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc6a:	e068      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cc6c:	4b07      	ldr	r3, [pc, #28]	; (800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc78:	d102      	bne.n	800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800cc7a:	4b07      	ldr	r3, [pc, #28]	; (800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cc7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc7e:	e05e      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc80:	2300      	movs	r3, #0
 800cc82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc84:	e05b      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cc86:	2300      	movs	r3, #0
 800cc88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc8a:	e058      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cc8c:	58024400 	.word	0x58024400
 800cc90:	03d09000 	.word	0x03d09000
 800cc94:	003d0900 	.word	0x003d0900
 800cc98:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cc9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cca0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cca4:	430b      	orrs	r3, r1
 800cca6:	d148      	bne.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cca8:	4b27      	ldr	r3, [pc, #156]	; (800cd48 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ccaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ccb0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ccb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccb8:	d02a      	beq.n	800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ccba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccc0:	d838      	bhi.n	800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ccc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d004      	beq.n	800ccd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ccc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ccce:	d00d      	beq.n	800ccec <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ccd0:	e030      	b.n	800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ccd2:	4b1d      	ldr	r3, [pc, #116]	; (800cd48 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ccde:	d102      	bne.n	800cce6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800cce0:	4b1a      	ldr	r3, [pc, #104]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800cce2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cce4:	e02b      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cce6:	2300      	movs	r3, #0
 800cce8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccea:	e028      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ccec:	4b16      	ldr	r3, [pc, #88]	; (800cd48 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ccf8:	d107      	bne.n	800cd0a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ccfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f000 fae4 	bl	800d2cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd08:	e019      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd0e:	e016      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd10:	4b0d      	ldr	r3, [pc, #52]	; (800cd48 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd1c:	d107      	bne.n	800cd2e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd1e:	f107 0318 	add.w	r3, r7, #24
 800cd22:	4618      	mov	r0, r3
 800cd24:	f000 f82a 	bl	800cd7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cd28:	69fb      	ldr	r3, [r7, #28]
 800cd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd2c:	e007      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd32:	e004      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cd34:	2300      	movs	r3, #0
 800cd36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd38:	e001      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800cd3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3740      	adds	r7, #64	; 0x40
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	58024400 	.word	0x58024400
 800cd4c:	017d7840 	.word	0x017d7840

0800cd50 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cd54:	f7fd ffd4 	bl	800ad00 <HAL_RCC_GetHCLKFreq>
 800cd58:	4602      	mov	r2, r0
 800cd5a:	4b06      	ldr	r3, [pc, #24]	; (800cd74 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cd5c:	6a1b      	ldr	r3, [r3, #32]
 800cd5e:	091b      	lsrs	r3, r3, #4
 800cd60:	f003 0307 	and.w	r3, r3, #7
 800cd64:	4904      	ldr	r1, [pc, #16]	; (800cd78 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cd66:	5ccb      	ldrb	r3, [r1, r3]
 800cd68:	f003 031f 	and.w	r3, r3, #31
 800cd6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	bd80      	pop	{r7, pc}
 800cd74:	58024400 	.word	0x58024400
 800cd78:	08016e34 	.word	0x08016e34

0800cd7c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b089      	sub	sp, #36	; 0x24
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cd84:	4ba1      	ldr	r3, [pc, #644]	; (800d00c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd88:	f003 0303 	and.w	r3, r3, #3
 800cd8c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cd8e:	4b9f      	ldr	r3, [pc, #636]	; (800d00c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd92:	0b1b      	lsrs	r3, r3, #12
 800cd94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd98:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cd9a:	4b9c      	ldr	r3, [pc, #624]	; (800d00c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd9e:	091b      	lsrs	r3, r3, #4
 800cda0:	f003 0301 	and.w	r3, r3, #1
 800cda4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cda6:	4b99      	ldr	r3, [pc, #612]	; (800d00c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cda8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdaa:	08db      	lsrs	r3, r3, #3
 800cdac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cdb0:	693a      	ldr	r2, [r7, #16]
 800cdb2:	fb02 f303 	mul.w	r3, r2, r3
 800cdb6:	ee07 3a90 	vmov	s15, r3
 800cdba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	f000 8111 	beq.w	800cfec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cdca:	69bb      	ldr	r3, [r7, #24]
 800cdcc:	2b02      	cmp	r3, #2
 800cdce:	f000 8083 	beq.w	800ced8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cdd2:	69bb      	ldr	r3, [r7, #24]
 800cdd4:	2b02      	cmp	r3, #2
 800cdd6:	f200 80a1 	bhi.w	800cf1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cdda:	69bb      	ldr	r3, [r7, #24]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d003      	beq.n	800cde8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cde0:	69bb      	ldr	r3, [r7, #24]
 800cde2:	2b01      	cmp	r3, #1
 800cde4:	d056      	beq.n	800ce94 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cde6:	e099      	b.n	800cf1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cde8:	4b88      	ldr	r3, [pc, #544]	; (800d00c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f003 0320 	and.w	r3, r3, #32
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d02d      	beq.n	800ce50 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cdf4:	4b85      	ldr	r3, [pc, #532]	; (800d00c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	08db      	lsrs	r3, r3, #3
 800cdfa:	f003 0303 	and.w	r3, r3, #3
 800cdfe:	4a84      	ldr	r2, [pc, #528]	; (800d010 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ce00:	fa22 f303 	lsr.w	r3, r2, r3
 800ce04:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	ee07 3a90 	vmov	s15, r3
 800ce0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	ee07 3a90 	vmov	s15, r3
 800ce16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce1e:	4b7b      	ldr	r3, [pc, #492]	; (800d00c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce26:	ee07 3a90 	vmov	s15, r3
 800ce2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce32:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d014 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ce4e:	e087      	b.n	800cf60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	ee07 3a90 	vmov	s15, r3
 800ce56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce5a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d018 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ce5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce62:	4b6a      	ldr	r3, [pc, #424]	; (800d00c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce6a:	ee07 3a90 	vmov	s15, r3
 800ce6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce72:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce76:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d014 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce92:	e065      	b.n	800cf60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	ee07 3a90 	vmov	s15, r3
 800ce9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce9e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d01c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cea6:	4b59      	ldr	r3, [pc, #356]	; (800d00c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ceae:	ee07 3a90 	vmov	s15, r3
 800ceb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ceb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ceba:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d014 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ceca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cece:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ced2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ced6:	e043      	b.n	800cf60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	ee07 3a90 	vmov	s15, r3
 800cede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cee2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d020 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ceea:	4b48      	ldr	r3, [pc, #288]	; (800d00c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ceec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cef2:	ee07 3a90 	vmov	s15, r3
 800cef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cefa:	ed97 6a03 	vldr	s12, [r7, #12]
 800cefe:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d014 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf1a:	e021      	b.n	800cf60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	ee07 3a90 	vmov	s15, r3
 800cf22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf26:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d01c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cf2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf2e:	4b37      	ldr	r3, [pc, #220]	; (800d00c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf36:	ee07 3a90 	vmov	s15, r3
 800cf3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf42:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d014 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf5e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cf60:	4b2a      	ldr	r3, [pc, #168]	; (800d00c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf64:	0a5b      	lsrs	r3, r3, #9
 800cf66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf6a:	ee07 3a90 	vmov	s15, r3
 800cf6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf76:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf7a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf86:	ee17 2a90 	vmov	r2, s15
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cf8e:	4b1f      	ldr	r3, [pc, #124]	; (800d00c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf92:	0c1b      	lsrs	r3, r3, #16
 800cf94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf98:	ee07 3a90 	vmov	s15, r3
 800cf9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfa0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cfa4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfa8:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfb4:	ee17 2a90 	vmov	r2, s15
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cfbc:	4b13      	ldr	r3, [pc, #76]	; (800d00c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfc0:	0e1b      	lsrs	r3, r3, #24
 800cfc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfc6:	ee07 3a90 	vmov	s15, r3
 800cfca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cfd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfd6:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfe2:	ee17 2a90 	vmov	r2, s15
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cfea:	e008      	b.n	800cffe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2200      	movs	r2, #0
 800cff0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2200      	movs	r2, #0
 800cff6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2200      	movs	r2, #0
 800cffc:	609a      	str	r2, [r3, #8]
}
 800cffe:	bf00      	nop
 800d000:	3724      	adds	r7, #36	; 0x24
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr
 800d00a:	bf00      	nop
 800d00c:	58024400 	.word	0x58024400
 800d010:	03d09000 	.word	0x03d09000
 800d014:	46000000 	.word	0x46000000
 800d018:	4c742400 	.word	0x4c742400
 800d01c:	4a742400 	.word	0x4a742400
 800d020:	4bbebc20 	.word	0x4bbebc20

0800d024 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d024:	b480      	push	{r7}
 800d026:	b089      	sub	sp, #36	; 0x24
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d02c:	4ba1      	ldr	r3, [pc, #644]	; (800d2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d030:	f003 0303 	and.w	r3, r3, #3
 800d034:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d036:	4b9f      	ldr	r3, [pc, #636]	; (800d2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d03a:	0d1b      	lsrs	r3, r3, #20
 800d03c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d040:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d042:	4b9c      	ldr	r3, [pc, #624]	; (800d2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d046:	0a1b      	lsrs	r3, r3, #8
 800d048:	f003 0301 	and.w	r3, r3, #1
 800d04c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d04e:	4b99      	ldr	r3, [pc, #612]	; (800d2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d052:	08db      	lsrs	r3, r3, #3
 800d054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d058:	693a      	ldr	r2, [r7, #16]
 800d05a:	fb02 f303 	mul.w	r3, r2, r3
 800d05e:	ee07 3a90 	vmov	s15, r3
 800d062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d066:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	f000 8111 	beq.w	800d294 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d072:	69bb      	ldr	r3, [r7, #24]
 800d074:	2b02      	cmp	r3, #2
 800d076:	f000 8083 	beq.w	800d180 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d07a:	69bb      	ldr	r3, [r7, #24]
 800d07c:	2b02      	cmp	r3, #2
 800d07e:	f200 80a1 	bhi.w	800d1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d082:	69bb      	ldr	r3, [r7, #24]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d003      	beq.n	800d090 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d088:	69bb      	ldr	r3, [r7, #24]
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	d056      	beq.n	800d13c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d08e:	e099      	b.n	800d1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d090:	4b88      	ldr	r3, [pc, #544]	; (800d2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f003 0320 	and.w	r3, r3, #32
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d02d      	beq.n	800d0f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d09c:	4b85      	ldr	r3, [pc, #532]	; (800d2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	08db      	lsrs	r3, r3, #3
 800d0a2:	f003 0303 	and.w	r3, r3, #3
 800d0a6:	4a84      	ldr	r2, [pc, #528]	; (800d2b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d0a8:	fa22 f303 	lsr.w	r3, r2, r3
 800d0ac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	ee07 3a90 	vmov	s15, r3
 800d0b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	ee07 3a90 	vmov	s15, r3
 800d0be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0c6:	4b7b      	ldr	r3, [pc, #492]	; (800d2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0ce:	ee07 3a90 	vmov	s15, r3
 800d0d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0da:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d2bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d0de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d0f6:	e087      	b.n	800d208 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	ee07 3a90 	vmov	s15, r3
 800d0fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d102:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d2c0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d10a:	4b6a      	ldr	r3, [pc, #424]	; (800d2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d10c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d10e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d112:	ee07 3a90 	vmov	s15, r3
 800d116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d11a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d11e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d2bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d12a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d12e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d132:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d136:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d13a:	e065      	b.n	800d208 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	ee07 3a90 	vmov	s15, r3
 800d142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d146:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d14a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d14e:	4b59      	ldr	r3, [pc, #356]	; (800d2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d156:	ee07 3a90 	vmov	s15, r3
 800d15a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d15e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d162:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d2bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d16a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d16e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d17a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d17e:	e043      	b.n	800d208 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	ee07 3a90 	vmov	s15, r3
 800d186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d18a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d18e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d192:	4b48      	ldr	r3, [pc, #288]	; (800d2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d19a:	ee07 3a90 	vmov	s15, r3
 800d19e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d2bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d1aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1c2:	e021      	b.n	800d208 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	ee07 3a90 	vmov	s15, r3
 800d1ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d1d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1d6:	4b37      	ldr	r3, [pc, #220]	; (800d2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1de:	ee07 3a90 	vmov	s15, r3
 800d1e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d2bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d1ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d202:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d206:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d208:	4b2a      	ldr	r3, [pc, #168]	; (800d2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d20c:	0a5b      	lsrs	r3, r3, #9
 800d20e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d212:	ee07 3a90 	vmov	s15, r3
 800d216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d21a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d21e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d222:	edd7 6a07 	vldr	s13, [r7, #28]
 800d226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d22a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d22e:	ee17 2a90 	vmov	r2, s15
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d236:	4b1f      	ldr	r3, [pc, #124]	; (800d2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d23a:	0c1b      	lsrs	r3, r3, #16
 800d23c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d240:	ee07 3a90 	vmov	s15, r3
 800d244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d248:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d24c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d250:	edd7 6a07 	vldr	s13, [r7, #28]
 800d254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d25c:	ee17 2a90 	vmov	r2, s15
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d264:	4b13      	ldr	r3, [pc, #76]	; (800d2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d268:	0e1b      	lsrs	r3, r3, #24
 800d26a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d26e:	ee07 3a90 	vmov	s15, r3
 800d272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d276:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d27a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d27e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d28a:	ee17 2a90 	vmov	r2, s15
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d292:	e008      	b.n	800d2a6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2200      	movs	r2, #0
 800d298:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2200      	movs	r2, #0
 800d29e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	609a      	str	r2, [r3, #8]
}
 800d2a6:	bf00      	nop
 800d2a8:	3724      	adds	r7, #36	; 0x24
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b0:	4770      	bx	lr
 800d2b2:	bf00      	nop
 800d2b4:	58024400 	.word	0x58024400
 800d2b8:	03d09000 	.word	0x03d09000
 800d2bc:	46000000 	.word	0x46000000
 800d2c0:	4c742400 	.word	0x4c742400
 800d2c4:	4a742400 	.word	0x4a742400
 800d2c8:	4bbebc20 	.word	0x4bbebc20

0800d2cc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b089      	sub	sp, #36	; 0x24
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d2d4:	4ba0      	ldr	r3, [pc, #640]	; (800d558 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2d8:	f003 0303 	and.w	r3, r3, #3
 800d2dc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d2de:	4b9e      	ldr	r3, [pc, #632]	; (800d558 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2e2:	091b      	lsrs	r3, r3, #4
 800d2e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2e8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d2ea:	4b9b      	ldr	r3, [pc, #620]	; (800d558 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ee:	f003 0301 	and.w	r3, r3, #1
 800d2f2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d2f4:	4b98      	ldr	r3, [pc, #608]	; (800d558 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2f8:	08db      	lsrs	r3, r3, #3
 800d2fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2fe:	693a      	ldr	r2, [r7, #16]
 800d300:	fb02 f303 	mul.w	r3, r2, r3
 800d304:	ee07 3a90 	vmov	s15, r3
 800d308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d30c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	2b00      	cmp	r3, #0
 800d314:	f000 8111 	beq.w	800d53a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d318:	69bb      	ldr	r3, [r7, #24]
 800d31a:	2b02      	cmp	r3, #2
 800d31c:	f000 8083 	beq.w	800d426 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d320:	69bb      	ldr	r3, [r7, #24]
 800d322:	2b02      	cmp	r3, #2
 800d324:	f200 80a1 	bhi.w	800d46a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d328:	69bb      	ldr	r3, [r7, #24]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d003      	beq.n	800d336 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d32e:	69bb      	ldr	r3, [r7, #24]
 800d330:	2b01      	cmp	r3, #1
 800d332:	d056      	beq.n	800d3e2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d334:	e099      	b.n	800d46a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d336:	4b88      	ldr	r3, [pc, #544]	; (800d558 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f003 0320 	and.w	r3, r3, #32
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d02d      	beq.n	800d39e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d342:	4b85      	ldr	r3, [pc, #532]	; (800d558 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	08db      	lsrs	r3, r3, #3
 800d348:	f003 0303 	and.w	r3, r3, #3
 800d34c:	4a83      	ldr	r2, [pc, #524]	; (800d55c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d34e:	fa22 f303 	lsr.w	r3, r2, r3
 800d352:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	ee07 3a90 	vmov	s15, r3
 800d35a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	ee07 3a90 	vmov	s15, r3
 800d364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d368:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d36c:	4b7a      	ldr	r3, [pc, #488]	; (800d558 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d36e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d374:	ee07 3a90 	vmov	s15, r3
 800d378:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d37c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d380:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d560 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d384:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d388:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d38c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d390:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d394:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d398:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d39c:	e087      	b.n	800d4ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	ee07 3a90 	vmov	s15, r3
 800d3a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3a8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d3ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3b0:	4b69      	ldr	r3, [pc, #420]	; (800d558 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3b8:	ee07 3a90 	vmov	s15, r3
 800d3bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3c4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d560 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d3c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3e0:	e065      	b.n	800d4ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	ee07 3a90 	vmov	s15, r3
 800d3e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3ec:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d568 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d3f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3f4:	4b58      	ldr	r3, [pc, #352]	; (800d558 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3fc:	ee07 3a90 	vmov	s15, r3
 800d400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d404:	ed97 6a03 	vldr	s12, [r7, #12]
 800d408:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d560 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d40c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d410:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d414:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d418:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d41c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d420:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d424:	e043      	b.n	800d4ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	ee07 3a90 	vmov	s15, r3
 800d42c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d430:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d56c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d434:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d438:	4b47      	ldr	r3, [pc, #284]	; (800d558 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d43a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d43c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d440:	ee07 3a90 	vmov	s15, r3
 800d444:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d448:	ed97 6a03 	vldr	s12, [r7, #12]
 800d44c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d560 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d450:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d454:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d458:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d45c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d460:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d464:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d468:	e021      	b.n	800d4ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	ee07 3a90 	vmov	s15, r3
 800d470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d474:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d478:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d47c:	4b36      	ldr	r3, [pc, #216]	; (800d558 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d47e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d484:	ee07 3a90 	vmov	s15, r3
 800d488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d48c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d490:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d560 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d494:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d498:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d49c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4ac:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d4ae:	4b2a      	ldr	r3, [pc, #168]	; (800d558 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4b2:	0a5b      	lsrs	r3, r3, #9
 800d4b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4b8:	ee07 3a90 	vmov	s15, r3
 800d4bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4d4:	ee17 2a90 	vmov	r2, s15
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d4dc:	4b1e      	ldr	r3, [pc, #120]	; (800d558 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4e0:	0c1b      	lsrs	r3, r3, #16
 800d4e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4e6:	ee07 3a90 	vmov	s15, r3
 800d4ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d502:	ee17 2a90 	vmov	r2, s15
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d50a:	4b13      	ldr	r3, [pc, #76]	; (800d558 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d50e:	0e1b      	lsrs	r3, r3, #24
 800d510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d514:	ee07 3a90 	vmov	s15, r3
 800d518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d51c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d520:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d524:	edd7 6a07 	vldr	s13, [r7, #28]
 800d528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d52c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d530:	ee17 2a90 	vmov	r2, s15
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d538:	e008      	b.n	800d54c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2200      	movs	r2, #0
 800d53e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2200      	movs	r2, #0
 800d544:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2200      	movs	r2, #0
 800d54a:	609a      	str	r2, [r3, #8]
}
 800d54c:	bf00      	nop
 800d54e:	3724      	adds	r7, #36	; 0x24
 800d550:	46bd      	mov	sp, r7
 800d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d556:	4770      	bx	lr
 800d558:	58024400 	.word	0x58024400
 800d55c:	03d09000 	.word	0x03d09000
 800d560:	46000000 	.word	0x46000000
 800d564:	4c742400 	.word	0x4c742400
 800d568:	4a742400 	.word	0x4a742400
 800d56c:	4bbebc20 	.word	0x4bbebc20

0800d570 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d57a:	2300      	movs	r3, #0
 800d57c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d57e:	4b53      	ldr	r3, [pc, #332]	; (800d6cc <RCCEx_PLL2_Config+0x15c>)
 800d580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d582:	f003 0303 	and.w	r3, r3, #3
 800d586:	2b03      	cmp	r3, #3
 800d588:	d101      	bne.n	800d58e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d58a:	2301      	movs	r3, #1
 800d58c:	e099      	b.n	800d6c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d58e:	4b4f      	ldr	r3, [pc, #316]	; (800d6cc <RCCEx_PLL2_Config+0x15c>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	4a4e      	ldr	r2, [pc, #312]	; (800d6cc <RCCEx_PLL2_Config+0x15c>)
 800d594:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d598:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d59a:	f7f6 fc53 	bl	8003e44 <HAL_GetTick>
 800d59e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d5a0:	e008      	b.n	800d5b4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d5a2:	f7f6 fc4f 	bl	8003e44 <HAL_GetTick>
 800d5a6:	4602      	mov	r2, r0
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	1ad3      	subs	r3, r2, r3
 800d5ac:	2b02      	cmp	r3, #2
 800d5ae:	d901      	bls.n	800d5b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d5b0:	2303      	movs	r3, #3
 800d5b2:	e086      	b.n	800d6c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d5b4:	4b45      	ldr	r3, [pc, #276]	; (800d6cc <RCCEx_PLL2_Config+0x15c>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d1f0      	bne.n	800d5a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d5c0:	4b42      	ldr	r3, [pc, #264]	; (800d6cc <RCCEx_PLL2_Config+0x15c>)
 800d5c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5c4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	031b      	lsls	r3, r3, #12
 800d5ce:	493f      	ldr	r1, [pc, #252]	; (800d6cc <RCCEx_PLL2_Config+0x15c>)
 800d5d0:	4313      	orrs	r3, r2
 800d5d2:	628b      	str	r3, [r1, #40]	; 0x28
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	3b01      	subs	r3, #1
 800d5da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	689b      	ldr	r3, [r3, #8]
 800d5e2:	3b01      	subs	r3, #1
 800d5e4:	025b      	lsls	r3, r3, #9
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	431a      	orrs	r2, r3
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	68db      	ldr	r3, [r3, #12]
 800d5ee:	3b01      	subs	r3, #1
 800d5f0:	041b      	lsls	r3, r3, #16
 800d5f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d5f6:	431a      	orrs	r2, r3
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	691b      	ldr	r3, [r3, #16]
 800d5fc:	3b01      	subs	r3, #1
 800d5fe:	061b      	lsls	r3, r3, #24
 800d600:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d604:	4931      	ldr	r1, [pc, #196]	; (800d6cc <RCCEx_PLL2_Config+0x15c>)
 800d606:	4313      	orrs	r3, r2
 800d608:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d60a:	4b30      	ldr	r3, [pc, #192]	; (800d6cc <RCCEx_PLL2_Config+0x15c>)
 800d60c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d60e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	695b      	ldr	r3, [r3, #20]
 800d616:	492d      	ldr	r1, [pc, #180]	; (800d6cc <RCCEx_PLL2_Config+0x15c>)
 800d618:	4313      	orrs	r3, r2
 800d61a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d61c:	4b2b      	ldr	r3, [pc, #172]	; (800d6cc <RCCEx_PLL2_Config+0x15c>)
 800d61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d620:	f023 0220 	bic.w	r2, r3, #32
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	699b      	ldr	r3, [r3, #24]
 800d628:	4928      	ldr	r1, [pc, #160]	; (800d6cc <RCCEx_PLL2_Config+0x15c>)
 800d62a:	4313      	orrs	r3, r2
 800d62c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d62e:	4b27      	ldr	r3, [pc, #156]	; (800d6cc <RCCEx_PLL2_Config+0x15c>)
 800d630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d632:	4a26      	ldr	r2, [pc, #152]	; (800d6cc <RCCEx_PLL2_Config+0x15c>)
 800d634:	f023 0310 	bic.w	r3, r3, #16
 800d638:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d63a:	4b24      	ldr	r3, [pc, #144]	; (800d6cc <RCCEx_PLL2_Config+0x15c>)
 800d63c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d63e:	4b24      	ldr	r3, [pc, #144]	; (800d6d0 <RCCEx_PLL2_Config+0x160>)
 800d640:	4013      	ands	r3, r2
 800d642:	687a      	ldr	r2, [r7, #4]
 800d644:	69d2      	ldr	r2, [r2, #28]
 800d646:	00d2      	lsls	r2, r2, #3
 800d648:	4920      	ldr	r1, [pc, #128]	; (800d6cc <RCCEx_PLL2_Config+0x15c>)
 800d64a:	4313      	orrs	r3, r2
 800d64c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d64e:	4b1f      	ldr	r3, [pc, #124]	; (800d6cc <RCCEx_PLL2_Config+0x15c>)
 800d650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d652:	4a1e      	ldr	r2, [pc, #120]	; (800d6cc <RCCEx_PLL2_Config+0x15c>)
 800d654:	f043 0310 	orr.w	r3, r3, #16
 800d658:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d106      	bne.n	800d66e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d660:	4b1a      	ldr	r3, [pc, #104]	; (800d6cc <RCCEx_PLL2_Config+0x15c>)
 800d662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d664:	4a19      	ldr	r2, [pc, #100]	; (800d6cc <RCCEx_PLL2_Config+0x15c>)
 800d666:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d66a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d66c:	e00f      	b.n	800d68e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	2b01      	cmp	r3, #1
 800d672:	d106      	bne.n	800d682 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d674:	4b15      	ldr	r3, [pc, #84]	; (800d6cc <RCCEx_PLL2_Config+0x15c>)
 800d676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d678:	4a14      	ldr	r2, [pc, #80]	; (800d6cc <RCCEx_PLL2_Config+0x15c>)
 800d67a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d67e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d680:	e005      	b.n	800d68e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d682:	4b12      	ldr	r3, [pc, #72]	; (800d6cc <RCCEx_PLL2_Config+0x15c>)
 800d684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d686:	4a11      	ldr	r2, [pc, #68]	; (800d6cc <RCCEx_PLL2_Config+0x15c>)
 800d688:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d68c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d68e:	4b0f      	ldr	r3, [pc, #60]	; (800d6cc <RCCEx_PLL2_Config+0x15c>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	4a0e      	ldr	r2, [pc, #56]	; (800d6cc <RCCEx_PLL2_Config+0x15c>)
 800d694:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d698:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d69a:	f7f6 fbd3 	bl	8003e44 <HAL_GetTick>
 800d69e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d6a0:	e008      	b.n	800d6b4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d6a2:	f7f6 fbcf 	bl	8003e44 <HAL_GetTick>
 800d6a6:	4602      	mov	r2, r0
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	1ad3      	subs	r3, r2, r3
 800d6ac:	2b02      	cmp	r3, #2
 800d6ae:	d901      	bls.n	800d6b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d6b0:	2303      	movs	r3, #3
 800d6b2:	e006      	b.n	800d6c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d6b4:	4b05      	ldr	r3, [pc, #20]	; (800d6cc <RCCEx_PLL2_Config+0x15c>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d0f0      	beq.n	800d6a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3710      	adds	r7, #16
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	58024400 	.word	0x58024400
 800d6d0:	ffff0007 	.word	0xffff0007

0800d6d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b084      	sub	sp, #16
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d6e2:	4b53      	ldr	r3, [pc, #332]	; (800d830 <RCCEx_PLL3_Config+0x15c>)
 800d6e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6e6:	f003 0303 	and.w	r3, r3, #3
 800d6ea:	2b03      	cmp	r3, #3
 800d6ec:	d101      	bne.n	800d6f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	e099      	b.n	800d826 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d6f2:	4b4f      	ldr	r3, [pc, #316]	; (800d830 <RCCEx_PLL3_Config+0x15c>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4a4e      	ldr	r2, [pc, #312]	; (800d830 <RCCEx_PLL3_Config+0x15c>)
 800d6f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d6fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6fe:	f7f6 fba1 	bl	8003e44 <HAL_GetTick>
 800d702:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d704:	e008      	b.n	800d718 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d706:	f7f6 fb9d 	bl	8003e44 <HAL_GetTick>
 800d70a:	4602      	mov	r2, r0
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	1ad3      	subs	r3, r2, r3
 800d710:	2b02      	cmp	r3, #2
 800d712:	d901      	bls.n	800d718 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d714:	2303      	movs	r3, #3
 800d716:	e086      	b.n	800d826 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d718:	4b45      	ldr	r3, [pc, #276]	; (800d830 <RCCEx_PLL3_Config+0x15c>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d720:	2b00      	cmp	r3, #0
 800d722:	d1f0      	bne.n	800d706 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d724:	4b42      	ldr	r3, [pc, #264]	; (800d830 <RCCEx_PLL3_Config+0x15c>)
 800d726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d728:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	051b      	lsls	r3, r3, #20
 800d732:	493f      	ldr	r1, [pc, #252]	; (800d830 <RCCEx_PLL3_Config+0x15c>)
 800d734:	4313      	orrs	r3, r2
 800d736:	628b      	str	r3, [r1, #40]	; 0x28
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	685b      	ldr	r3, [r3, #4]
 800d73c:	3b01      	subs	r3, #1
 800d73e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	689b      	ldr	r3, [r3, #8]
 800d746:	3b01      	subs	r3, #1
 800d748:	025b      	lsls	r3, r3, #9
 800d74a:	b29b      	uxth	r3, r3
 800d74c:	431a      	orrs	r2, r3
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	68db      	ldr	r3, [r3, #12]
 800d752:	3b01      	subs	r3, #1
 800d754:	041b      	lsls	r3, r3, #16
 800d756:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d75a:	431a      	orrs	r2, r3
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	691b      	ldr	r3, [r3, #16]
 800d760:	3b01      	subs	r3, #1
 800d762:	061b      	lsls	r3, r3, #24
 800d764:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d768:	4931      	ldr	r1, [pc, #196]	; (800d830 <RCCEx_PLL3_Config+0x15c>)
 800d76a:	4313      	orrs	r3, r2
 800d76c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d76e:	4b30      	ldr	r3, [pc, #192]	; (800d830 <RCCEx_PLL3_Config+0x15c>)
 800d770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d772:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	695b      	ldr	r3, [r3, #20]
 800d77a:	492d      	ldr	r1, [pc, #180]	; (800d830 <RCCEx_PLL3_Config+0x15c>)
 800d77c:	4313      	orrs	r3, r2
 800d77e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d780:	4b2b      	ldr	r3, [pc, #172]	; (800d830 <RCCEx_PLL3_Config+0x15c>)
 800d782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d784:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	699b      	ldr	r3, [r3, #24]
 800d78c:	4928      	ldr	r1, [pc, #160]	; (800d830 <RCCEx_PLL3_Config+0x15c>)
 800d78e:	4313      	orrs	r3, r2
 800d790:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d792:	4b27      	ldr	r3, [pc, #156]	; (800d830 <RCCEx_PLL3_Config+0x15c>)
 800d794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d796:	4a26      	ldr	r2, [pc, #152]	; (800d830 <RCCEx_PLL3_Config+0x15c>)
 800d798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d79c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d79e:	4b24      	ldr	r3, [pc, #144]	; (800d830 <RCCEx_PLL3_Config+0x15c>)
 800d7a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d7a2:	4b24      	ldr	r3, [pc, #144]	; (800d834 <RCCEx_PLL3_Config+0x160>)
 800d7a4:	4013      	ands	r3, r2
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	69d2      	ldr	r2, [r2, #28]
 800d7aa:	00d2      	lsls	r2, r2, #3
 800d7ac:	4920      	ldr	r1, [pc, #128]	; (800d830 <RCCEx_PLL3_Config+0x15c>)
 800d7ae:	4313      	orrs	r3, r2
 800d7b0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d7b2:	4b1f      	ldr	r3, [pc, #124]	; (800d830 <RCCEx_PLL3_Config+0x15c>)
 800d7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b6:	4a1e      	ldr	r2, [pc, #120]	; (800d830 <RCCEx_PLL3_Config+0x15c>)
 800d7b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d7bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d106      	bne.n	800d7d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d7c4:	4b1a      	ldr	r3, [pc, #104]	; (800d830 <RCCEx_PLL3_Config+0x15c>)
 800d7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c8:	4a19      	ldr	r2, [pc, #100]	; (800d830 <RCCEx_PLL3_Config+0x15c>)
 800d7ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d7ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d7d0:	e00f      	b.n	800d7f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	d106      	bne.n	800d7e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d7d8:	4b15      	ldr	r3, [pc, #84]	; (800d830 <RCCEx_PLL3_Config+0x15c>)
 800d7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7dc:	4a14      	ldr	r2, [pc, #80]	; (800d830 <RCCEx_PLL3_Config+0x15c>)
 800d7de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d7e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d7e4:	e005      	b.n	800d7f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d7e6:	4b12      	ldr	r3, [pc, #72]	; (800d830 <RCCEx_PLL3_Config+0x15c>)
 800d7e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ea:	4a11      	ldr	r2, [pc, #68]	; (800d830 <RCCEx_PLL3_Config+0x15c>)
 800d7ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d7f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d7f2:	4b0f      	ldr	r3, [pc, #60]	; (800d830 <RCCEx_PLL3_Config+0x15c>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	4a0e      	ldr	r2, [pc, #56]	; (800d830 <RCCEx_PLL3_Config+0x15c>)
 800d7f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d7fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d7fe:	f7f6 fb21 	bl	8003e44 <HAL_GetTick>
 800d802:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d804:	e008      	b.n	800d818 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d806:	f7f6 fb1d 	bl	8003e44 <HAL_GetTick>
 800d80a:	4602      	mov	r2, r0
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	1ad3      	subs	r3, r2, r3
 800d810:	2b02      	cmp	r3, #2
 800d812:	d901      	bls.n	800d818 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d814:	2303      	movs	r3, #3
 800d816:	e006      	b.n	800d826 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d818:	4b05      	ldr	r3, [pc, #20]	; (800d830 <RCCEx_PLL3_Config+0x15c>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d820:	2b00      	cmp	r3, #0
 800d822:	d0f0      	beq.n	800d806 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d824:	7bfb      	ldrb	r3, [r7, #15]
}
 800d826:	4618      	mov	r0, r3
 800d828:	3710      	adds	r7, #16
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
 800d82e:	bf00      	nop
 800d830:	58024400 	.word	0x58024400
 800d834:	ffff0007 	.word	0xffff0007

0800d838 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b084      	sub	sp, #16
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d840:	2301      	movs	r3, #1
 800d842:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d071      	beq.n	800d92e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d850:	b2db      	uxtb	r3, r3
 800d852:	2b00      	cmp	r3, #0
 800d854:	d106      	bne.n	800d864 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2200      	movs	r2, #0
 800d85a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f7f4 fef6 	bl	8002650 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2202      	movs	r2, #2
 800d868:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	68db      	ldr	r3, [r3, #12]
 800d872:	f003 0310 	and.w	r3, r3, #16
 800d876:	2b10      	cmp	r3, #16
 800d878:	d050      	beq.n	800d91c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	22ca      	movs	r2, #202	; 0xca
 800d880:	625a      	str	r2, [r3, #36]	; 0x24
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	2253      	movs	r2, #83	; 0x53
 800d888:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f000 fa4a 	bl	800dd24 <RTC_EnterInitMode>
 800d890:	4603      	mov	r3, r0
 800d892:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d894:	7bfb      	ldrb	r3, [r7, #15]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d124      	bne.n	800d8e4 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	6899      	ldr	r1, [r3, #8]
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681a      	ldr	r2, [r3, #0]
 800d8a4:	4b24      	ldr	r3, [pc, #144]	; (800d938 <HAL_RTC_Init+0x100>)
 800d8a6:	400b      	ands	r3, r1
 800d8a8:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	6899      	ldr	r1, [r3, #8]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	685a      	ldr	r2, [r3, #4]
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	691b      	ldr	r3, [r3, #16]
 800d8b8:	431a      	orrs	r2, r3
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	699b      	ldr	r3, [r3, #24]
 800d8be:	431a      	orrs	r2, r3
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	430a      	orrs	r2, r1
 800d8c6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	689b      	ldr	r3, [r3, #8]
 800d8cc:	0419      	lsls	r1, r3, #16
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	68da      	ldr	r2, [r3, #12]
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	430a      	orrs	r2, r1
 800d8d8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f000 fa56 	bl	800dd8c <RTC_ExitInitMode>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d8e4:	7bfb      	ldrb	r3, [r7, #15]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d113      	bne.n	800d912 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	f022 0203 	bic.w	r2, r2, #3
 800d8f8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	69da      	ldr	r2, [r3, #28]
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	695b      	ldr	r3, [r3, #20]
 800d908:	431a      	orrs	r2, r3
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	430a      	orrs	r2, r1
 800d910:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	22ff      	movs	r2, #255	; 0xff
 800d918:	625a      	str	r2, [r3, #36]	; 0x24
 800d91a:	e001      	b.n	800d920 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d91c:	2300      	movs	r3, #0
 800d91e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d920:	7bfb      	ldrb	r3, [r7, #15]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d103      	bne.n	800d92e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2201      	movs	r2, #1
 800d92a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800d92e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d930:	4618      	mov	r0, r3
 800d932:	3710      	adds	r7, #16
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}
 800d938:	ff8fffbf 	.word	0xff8fffbf

0800d93c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d93c:	b590      	push	{r4, r7, lr}
 800d93e:	b087      	sub	sp, #28
 800d940:	af00      	add	r7, sp, #0
 800d942:	60f8      	str	r0, [r7, #12]
 800d944:	60b9      	str	r1, [r7, #8]
 800d946:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d94e:	2b01      	cmp	r3, #1
 800d950:	d101      	bne.n	800d956 <HAL_RTC_SetTime+0x1a>
 800d952:	2302      	movs	r3, #2
 800d954:	e089      	b.n	800da6a <HAL_RTC_SetTime+0x12e>
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	2201      	movs	r2, #1
 800d95a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	2202      	movs	r2, #2
 800d962:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	22ca      	movs	r2, #202	; 0xca
 800d96c:	625a      	str	r2, [r3, #36]	; 0x24
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	2253      	movs	r2, #83	; 0x53
 800d974:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d976:	68f8      	ldr	r0, [r7, #12]
 800d978:	f000 f9d4 	bl	800dd24 <RTC_EnterInitMode>
 800d97c:	4603      	mov	r3, r0
 800d97e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d980:	7cfb      	ldrb	r3, [r7, #19]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d161      	bne.n	800da4a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d126      	bne.n	800d9da <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	689b      	ldr	r3, [r3, #8]
 800d992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d996:	2b00      	cmp	r3, #0
 800d998:	d102      	bne.n	800d9a0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	2200      	movs	r2, #0
 800d99e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f000 fa2f 	bl	800de08 <RTC_ByteToBcd2>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	785b      	ldrb	r3, [r3, #1]
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f000 fa28 	bl	800de08 <RTC_ByteToBcd2>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d9bc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	789b      	ldrb	r3, [r3, #2]
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f000 fa20 	bl	800de08 <RTC_ByteToBcd2>
 800d9c8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d9ca:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	78db      	ldrb	r3, [r3, #3]
 800d9d2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d9d4:	4313      	orrs	r3, r2
 800d9d6:	617b      	str	r3, [r7, #20]
 800d9d8:	e018      	b.n	800da0c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	689b      	ldr	r3, [r3, #8]
 800d9e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d102      	bne.n	800d9ee <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	781b      	ldrb	r3, [r3, #0]
 800d9f2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	785b      	ldrb	r3, [r3, #1]
 800d9f8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d9fa:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d9fc:	68ba      	ldr	r2, [r7, #8]
 800d9fe:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800da00:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	78db      	ldrb	r3, [r3, #3]
 800da06:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800da08:	4313      	orrs	r3, r2
 800da0a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681a      	ldr	r2, [r3, #0]
 800da10:	6979      	ldr	r1, [r7, #20]
 800da12:	4b18      	ldr	r3, [pc, #96]	; (800da74 <HAL_RTC_SetTime+0x138>)
 800da14:	400b      	ands	r3, r1
 800da16:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	689a      	ldr	r2, [r3, #8]
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800da26:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	6899      	ldr	r1, [r3, #8]
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	68da      	ldr	r2, [r3, #12]
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	691b      	ldr	r3, [r3, #16]
 800da36:	431a      	orrs	r2, r3
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	430a      	orrs	r2, r1
 800da3e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800da40:	68f8      	ldr	r0, [r7, #12]
 800da42:	f000 f9a3 	bl	800dd8c <RTC_ExitInitMode>
 800da46:	4603      	mov	r3, r0
 800da48:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	22ff      	movs	r2, #255	; 0xff
 800da50:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800da52:	7cfb      	ldrb	r3, [r7, #19]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d103      	bne.n	800da60 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	2201      	movs	r2, #1
 800da5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	2200      	movs	r2, #0
 800da64:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800da68:	7cfb      	ldrb	r3, [r7, #19]
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	371c      	adds	r7, #28
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd90      	pop	{r4, r7, pc}
 800da72:	bf00      	nop
 800da74:	007f7f7f 	.word	0x007f7f7f

0800da78 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b086      	sub	sp, #24
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	60f8      	str	r0, [r7, #12]
 800da80:	60b9      	str	r1, [r7, #8]
 800da82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	691b      	ldr	r3, [r3, #16]
 800da94:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	681a      	ldr	r2, [r3, #0]
 800daa2:	4b22      	ldr	r3, [pc, #136]	; (800db2c <HAL_RTC_GetTime+0xb4>)
 800daa4:	4013      	ands	r3, r2
 800daa6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	0c1b      	lsrs	r3, r3, #16
 800daac:	b2db      	uxtb	r3, r3
 800daae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dab2:	b2da      	uxtb	r2, r3
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	0a1b      	lsrs	r3, r3, #8
 800dabc:	b2db      	uxtb	r3, r3
 800dabe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dac2:	b2da      	uxtb	r2, r3
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	b2db      	uxtb	r3, r3
 800dacc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dad0:	b2da      	uxtb	r2, r3
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	0d9b      	lsrs	r3, r3, #22
 800dada:	b2db      	uxtb	r3, r3
 800dadc:	f003 0301 	and.w	r3, r3, #1
 800dae0:	b2da      	uxtb	r2, r3
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d11a      	bne.n	800db22 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	781b      	ldrb	r3, [r3, #0]
 800daf0:	4618      	mov	r0, r3
 800daf2:	f000 f9a9 	bl	800de48 <RTC_Bcd2ToByte>
 800daf6:	4603      	mov	r3, r0
 800daf8:	461a      	mov	r2, r3
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	785b      	ldrb	r3, [r3, #1]
 800db02:	4618      	mov	r0, r3
 800db04:	f000 f9a0 	bl	800de48 <RTC_Bcd2ToByte>
 800db08:	4603      	mov	r3, r0
 800db0a:	461a      	mov	r2, r3
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	789b      	ldrb	r3, [r3, #2]
 800db14:	4618      	mov	r0, r3
 800db16:	f000 f997 	bl	800de48 <RTC_Bcd2ToByte>
 800db1a:	4603      	mov	r3, r0
 800db1c:	461a      	mov	r2, r3
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800db22:	2300      	movs	r3, #0
}
 800db24:	4618      	mov	r0, r3
 800db26:	3718      	adds	r7, #24
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}
 800db2c:	007f7f7f 	.word	0x007f7f7f

0800db30 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800db30:	b590      	push	{r4, r7, lr}
 800db32:	b087      	sub	sp, #28
 800db34:	af00      	add	r7, sp, #0
 800db36:	60f8      	str	r0, [r7, #12]
 800db38:	60b9      	str	r1, [r7, #8]
 800db3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800db42:	2b01      	cmp	r3, #1
 800db44:	d101      	bne.n	800db4a <HAL_RTC_SetDate+0x1a>
 800db46:	2302      	movs	r3, #2
 800db48:	e073      	b.n	800dc32 <HAL_RTC_SetDate+0x102>
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	2201      	movs	r2, #1
 800db4e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	2202      	movs	r2, #2
 800db56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d10e      	bne.n	800db7e <HAL_RTC_SetDate+0x4e>
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	785b      	ldrb	r3, [r3, #1]
 800db64:	f003 0310 	and.w	r3, r3, #16
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d008      	beq.n	800db7e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	785b      	ldrb	r3, [r3, #1]
 800db70:	f023 0310 	bic.w	r3, r3, #16
 800db74:	b2db      	uxtb	r3, r3
 800db76:	330a      	adds	r3, #10
 800db78:	b2da      	uxtb	r2, r3
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d11c      	bne.n	800dbbe <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	78db      	ldrb	r3, [r3, #3]
 800db88:	4618      	mov	r0, r3
 800db8a:	f000 f93d 	bl	800de08 <RTC_ByteToBcd2>
 800db8e:	4603      	mov	r3, r0
 800db90:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	785b      	ldrb	r3, [r3, #1]
 800db96:	4618      	mov	r0, r3
 800db98:	f000 f936 	bl	800de08 <RTC_ByteToBcd2>
 800db9c:	4603      	mov	r3, r0
 800db9e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dba0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	789b      	ldrb	r3, [r3, #2]
 800dba6:	4618      	mov	r0, r3
 800dba8:	f000 f92e 	bl	800de08 <RTC_ByteToBcd2>
 800dbac:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800dbae:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	781b      	ldrb	r3, [r3, #0]
 800dbb6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dbb8:	4313      	orrs	r3, r2
 800dbba:	617b      	str	r3, [r7, #20]
 800dbbc:	e00e      	b.n	800dbdc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	78db      	ldrb	r3, [r3, #3]
 800dbc2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	785b      	ldrb	r3, [r3, #1]
 800dbc8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dbca:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800dbcc:	68ba      	ldr	r2, [r7, #8]
 800dbce:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800dbd0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	781b      	ldrb	r3, [r3, #0]
 800dbd6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dbd8:	4313      	orrs	r3, r2
 800dbda:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	22ca      	movs	r2, #202	; 0xca
 800dbe2:	625a      	str	r2, [r3, #36]	; 0x24
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	2253      	movs	r2, #83	; 0x53
 800dbea:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800dbec:	68f8      	ldr	r0, [r7, #12]
 800dbee:	f000 f899 	bl	800dd24 <RTC_EnterInitMode>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dbf6:	7cfb      	ldrb	r3, [r7, #19]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d10a      	bne.n	800dc12 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	681a      	ldr	r2, [r3, #0]
 800dc00:	6979      	ldr	r1, [r7, #20]
 800dc02:	4b0e      	ldr	r3, [pc, #56]	; (800dc3c <HAL_RTC_SetDate+0x10c>)
 800dc04:	400b      	ands	r3, r1
 800dc06:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dc08:	68f8      	ldr	r0, [r7, #12]
 800dc0a:	f000 f8bf 	bl	800dd8c <RTC_ExitInitMode>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	22ff      	movs	r2, #255	; 0xff
 800dc18:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800dc1a:	7cfb      	ldrb	r3, [r7, #19]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d103      	bne.n	800dc28 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	2201      	movs	r2, #1
 800dc24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800dc30:	7cfb      	ldrb	r3, [r7, #19]


}
 800dc32:	4618      	mov	r0, r3
 800dc34:	371c      	adds	r7, #28
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd90      	pop	{r4, r7, pc}
 800dc3a:	bf00      	nop
 800dc3c:	00ffff3f 	.word	0x00ffff3f

0800dc40 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b086      	sub	sp, #24
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	60f8      	str	r0, [r7, #12]
 800dc48:	60b9      	str	r1, [r7, #8]
 800dc4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	685a      	ldr	r2, [r3, #4]
 800dc52:	4b21      	ldr	r3, [pc, #132]	; (800dcd8 <HAL_RTC_GetDate+0x98>)
 800dc54:	4013      	ands	r3, r2
 800dc56:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	0c1b      	lsrs	r3, r3, #16
 800dc5c:	b2da      	uxtb	r2, r3
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	0a1b      	lsrs	r3, r3, #8
 800dc66:	b2db      	uxtb	r3, r3
 800dc68:	f003 031f 	and.w	r3, r3, #31
 800dc6c:	b2da      	uxtb	r2, r3
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	b2db      	uxtb	r3, r3
 800dc76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc7a:	b2da      	uxtb	r2, r3
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	0b5b      	lsrs	r3, r3, #13
 800dc84:	b2db      	uxtb	r3, r3
 800dc86:	f003 0307 	and.w	r3, r3, #7
 800dc8a:	b2da      	uxtb	r2, r3
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d11a      	bne.n	800dccc <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	78db      	ldrb	r3, [r3, #3]
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f000 f8d4 	bl	800de48 <RTC_Bcd2ToByte>
 800dca0:	4603      	mov	r3, r0
 800dca2:	461a      	mov	r2, r3
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	785b      	ldrb	r3, [r3, #1]
 800dcac:	4618      	mov	r0, r3
 800dcae:	f000 f8cb 	bl	800de48 <RTC_Bcd2ToByte>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	789b      	ldrb	r3, [r3, #2]
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f000 f8c2 	bl	800de48 <RTC_Bcd2ToByte>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	461a      	mov	r2, r3
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800dccc:	2300      	movs	r3, #0
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3718      	adds	r7, #24
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	00ffff3f 	.word	0x00ffff3f

0800dcdc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b084      	sub	sp, #16
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	4a0d      	ldr	r2, [pc, #52]	; (800dd20 <HAL_RTC_WaitForSynchro+0x44>)
 800dcea:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800dcec:	f7f6 f8aa 	bl	8003e44 <HAL_GetTick>
 800dcf0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dcf2:	e009      	b.n	800dd08 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dcf4:	f7f6 f8a6 	bl	8003e44 <HAL_GetTick>
 800dcf8:	4602      	mov	r2, r0
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	1ad3      	subs	r3, r2, r3
 800dcfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dd02:	d901      	bls.n	800dd08 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800dd04:	2303      	movs	r3, #3
 800dd06:	e007      	b.n	800dd18 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	68db      	ldr	r3, [r3, #12]
 800dd0e:	f003 0320 	and.w	r3, r3, #32
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d0ee      	beq.n	800dcf4 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800dd16:	2300      	movs	r3, #0
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3710      	adds	r7, #16
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}
 800dd20:	0003ff5f 	.word	0x0003ff5f

0800dd24 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b084      	sub	sp, #16
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	68db      	ldr	r3, [r3, #12]
 800dd36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d120      	bne.n	800dd80 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd46:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800dd48:	f7f6 f87c 	bl	8003e44 <HAL_GetTick>
 800dd4c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dd4e:	e00d      	b.n	800dd6c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dd50:	f7f6 f878 	bl	8003e44 <HAL_GetTick>
 800dd54:	4602      	mov	r2, r0
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	1ad3      	subs	r3, r2, r3
 800dd5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dd5e:	d905      	bls.n	800dd6c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800dd60:	2303      	movs	r3, #3
 800dd62:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2203      	movs	r2, #3
 800dd68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	68db      	ldr	r3, [r3, #12]
 800dd72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d102      	bne.n	800dd80 <RTC_EnterInitMode+0x5c>
 800dd7a:	7bfb      	ldrb	r3, [r7, #15]
 800dd7c:	2b03      	cmp	r3, #3
 800dd7e:	d1e7      	bne.n	800dd50 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800dd80:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3710      	adds	r7, #16
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}
	...

0800dd8c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b084      	sub	sp, #16
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dd94:	2300      	movs	r3, #0
 800dd96:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800dd98:	4b1a      	ldr	r3, [pc, #104]	; (800de04 <RTC_ExitInitMode+0x78>)
 800dd9a:	68db      	ldr	r3, [r3, #12]
 800dd9c:	4a19      	ldr	r2, [pc, #100]	; (800de04 <RTC_ExitInitMode+0x78>)
 800dd9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dda2:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800dda4:	4b17      	ldr	r3, [pc, #92]	; (800de04 <RTC_ExitInitMode+0x78>)
 800dda6:	689b      	ldr	r3, [r3, #8]
 800dda8:	f003 0320 	and.w	r3, r3, #32
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d10c      	bne.n	800ddca <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	f7ff ff93 	bl	800dcdc <HAL_RTC_WaitForSynchro>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d01e      	beq.n	800ddfa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2203      	movs	r2, #3
 800ddc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800ddc4:	2303      	movs	r3, #3
 800ddc6:	73fb      	strb	r3, [r7, #15]
 800ddc8:	e017      	b.n	800ddfa <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ddca:	4b0e      	ldr	r3, [pc, #56]	; (800de04 <RTC_ExitInitMode+0x78>)
 800ddcc:	689b      	ldr	r3, [r3, #8]
 800ddce:	4a0d      	ldr	r2, [pc, #52]	; (800de04 <RTC_ExitInitMode+0x78>)
 800ddd0:	f023 0320 	bic.w	r3, r3, #32
 800ddd4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f7ff ff80 	bl	800dcdc <HAL_RTC_WaitForSynchro>
 800dddc:	4603      	mov	r3, r0
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d005      	beq.n	800ddee <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2203      	movs	r2, #3
 800dde6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800ddea:	2303      	movs	r3, #3
 800ddec:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ddee:	4b05      	ldr	r3, [pc, #20]	; (800de04 <RTC_ExitInitMode+0x78>)
 800ddf0:	689b      	ldr	r3, [r3, #8]
 800ddf2:	4a04      	ldr	r2, [pc, #16]	; (800de04 <RTC_ExitInitMode+0x78>)
 800ddf4:	f043 0320 	orr.w	r3, r3, #32
 800ddf8:	6093      	str	r3, [r2, #8]
  }

  return status;
 800ddfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3710      	adds	r7, #16
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}
 800de04:	58004000 	.word	0x58004000

0800de08 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800de08:	b480      	push	{r7}
 800de0a:	b085      	sub	sp, #20
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	4603      	mov	r3, r0
 800de10:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800de12:	2300      	movs	r3, #0
 800de14:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800de16:	79fb      	ldrb	r3, [r7, #7]
 800de18:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800de1a:	e005      	b.n	800de28 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	3301      	adds	r3, #1
 800de20:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800de22:	7afb      	ldrb	r3, [r7, #11]
 800de24:	3b0a      	subs	r3, #10
 800de26:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800de28:	7afb      	ldrb	r3, [r7, #11]
 800de2a:	2b09      	cmp	r3, #9
 800de2c:	d8f6      	bhi.n	800de1c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	b2db      	uxtb	r3, r3
 800de32:	011b      	lsls	r3, r3, #4
 800de34:	b2da      	uxtb	r2, r3
 800de36:	7afb      	ldrb	r3, [r7, #11]
 800de38:	4313      	orrs	r3, r2
 800de3a:	b2db      	uxtb	r3, r3
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3714      	adds	r7, #20
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr

0800de48 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800de48:	b480      	push	{r7}
 800de4a:	b085      	sub	sp, #20
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	4603      	mov	r3, r0
 800de50:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800de52:	79fb      	ldrb	r3, [r7, #7]
 800de54:	091b      	lsrs	r3, r3, #4
 800de56:	b2db      	uxtb	r3, r3
 800de58:	461a      	mov	r2, r3
 800de5a:	0092      	lsls	r2, r2, #2
 800de5c:	4413      	add	r3, r2
 800de5e:	005b      	lsls	r3, r3, #1
 800de60:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800de62:	79fb      	ldrb	r3, [r7, #7]
 800de64:	f003 030f 	and.w	r3, r3, #15
 800de68:	b2da      	uxtb	r2, r3
 800de6a:	7bfb      	ldrb	r3, [r7, #15]
 800de6c:	4413      	add	r3, r2
 800de6e:	b2db      	uxtb	r3, r3
}
 800de70:	4618      	mov	r0, r3
 800de72:	3714      	adds	r7, #20
 800de74:	46bd      	mov	sp, r7
 800de76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7a:	4770      	bx	lr

0800de7c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b084      	sub	sp, #16
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d101      	bne.n	800de8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800de8a:	2301      	movs	r3, #1
 800de8c:	e10f      	b.n	800e0ae <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2200      	movs	r2, #0
 800de92:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	4a87      	ldr	r2, [pc, #540]	; (800e0b8 <HAL_SPI_Init+0x23c>)
 800de9a:	4293      	cmp	r3, r2
 800de9c:	d00f      	beq.n	800debe <HAL_SPI_Init+0x42>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	4a86      	ldr	r2, [pc, #536]	; (800e0bc <HAL_SPI_Init+0x240>)
 800dea4:	4293      	cmp	r3, r2
 800dea6:	d00a      	beq.n	800debe <HAL_SPI_Init+0x42>
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	4a84      	ldr	r2, [pc, #528]	; (800e0c0 <HAL_SPI_Init+0x244>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d005      	beq.n	800debe <HAL_SPI_Init+0x42>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	68db      	ldr	r3, [r3, #12]
 800deb6:	2b0f      	cmp	r3, #15
 800deb8:	d901      	bls.n	800debe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800deba:	2301      	movs	r3, #1
 800debc:	e0f7      	b.n	800e0ae <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f000 fc12 	bl	800e6e8 <SPI_GetPacketSize>
 800dec4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	4a7b      	ldr	r2, [pc, #492]	; (800e0b8 <HAL_SPI_Init+0x23c>)
 800decc:	4293      	cmp	r3, r2
 800dece:	d00c      	beq.n	800deea <HAL_SPI_Init+0x6e>
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	4a79      	ldr	r2, [pc, #484]	; (800e0bc <HAL_SPI_Init+0x240>)
 800ded6:	4293      	cmp	r3, r2
 800ded8:	d007      	beq.n	800deea <HAL_SPI_Init+0x6e>
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	4a78      	ldr	r2, [pc, #480]	; (800e0c0 <HAL_SPI_Init+0x244>)
 800dee0:	4293      	cmp	r3, r2
 800dee2:	d002      	beq.n	800deea <HAL_SPI_Init+0x6e>
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	2b08      	cmp	r3, #8
 800dee8:	d811      	bhi.n	800df0e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800deee:	4a72      	ldr	r2, [pc, #456]	; (800e0b8 <HAL_SPI_Init+0x23c>)
 800def0:	4293      	cmp	r3, r2
 800def2:	d009      	beq.n	800df08 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	4a70      	ldr	r2, [pc, #448]	; (800e0bc <HAL_SPI_Init+0x240>)
 800defa:	4293      	cmp	r3, r2
 800defc:	d004      	beq.n	800df08 <HAL_SPI_Init+0x8c>
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	4a6f      	ldr	r2, [pc, #444]	; (800e0c0 <HAL_SPI_Init+0x244>)
 800df04:	4293      	cmp	r3, r2
 800df06:	d104      	bne.n	800df12 <HAL_SPI_Init+0x96>
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	2b10      	cmp	r3, #16
 800df0c:	d901      	bls.n	800df12 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800df0e:	2301      	movs	r3, #1
 800df10:	e0cd      	b.n	800e0ae <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800df18:	b2db      	uxtb	r3, r3
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d106      	bne.n	800df2c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2200      	movs	r2, #0
 800df22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f7f4 fdfe 	bl	8002b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2202      	movs	r2, #2
 800df30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	681a      	ldr	r2, [r3, #0]
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	f022 0201 	bic.w	r2, r2, #1
 800df42:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	689b      	ldr	r3, [r3, #8]
 800df4a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800df4e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	699b      	ldr	r3, [r3, #24]
 800df54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800df58:	d119      	bne.n	800df8e <HAL_SPI_Init+0x112>
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	685b      	ldr	r3, [r3, #4]
 800df5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800df62:	d103      	bne.n	800df6c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d008      	beq.n	800df7e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800df70:	2b00      	cmp	r3, #0
 800df72:	d10c      	bne.n	800df8e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800df78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800df7c:	d107      	bne.n	800df8e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	681a      	ldr	r2, [r3, #0]
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800df8c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	685b      	ldr	r3, [r3, #4]
 800df92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800df96:	2b00      	cmp	r3, #0
 800df98:	d00f      	beq.n	800dfba <HAL_SPI_Init+0x13e>
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	68db      	ldr	r3, [r3, #12]
 800df9e:	2b06      	cmp	r3, #6
 800dfa0:	d90b      	bls.n	800dfba <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	430a      	orrs	r2, r1
 800dfb6:	601a      	str	r2, [r3, #0]
 800dfb8:	e007      	b.n	800dfca <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	681a      	ldr	r2, [r3, #0]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dfc8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	69da      	ldr	r2, [r3, #28]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfd2:	431a      	orrs	r2, r3
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	431a      	orrs	r2, r3
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfdc:	ea42 0103 	orr.w	r1, r2, r3
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	68da      	ldr	r2, [r3, #12]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	430a      	orrs	r2, r1
 800dfea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dff4:	431a      	orrs	r2, r3
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dffa:	431a      	orrs	r2, r3
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	699b      	ldr	r3, [r3, #24]
 800e000:	431a      	orrs	r2, r3
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	691b      	ldr	r3, [r3, #16]
 800e006:	431a      	orrs	r2, r3
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	695b      	ldr	r3, [r3, #20]
 800e00c:	431a      	orrs	r2, r3
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6a1b      	ldr	r3, [r3, #32]
 800e012:	431a      	orrs	r2, r3
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	685b      	ldr	r3, [r3, #4]
 800e018:	431a      	orrs	r2, r3
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e01e:	431a      	orrs	r2, r3
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	689b      	ldr	r3, [r3, #8]
 800e024:	431a      	orrs	r2, r3
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e02a:	ea42 0103 	orr.w	r1, r2, r3
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	430a      	orrs	r2, r1
 800e038:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	685b      	ldr	r3, [r3, #4]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d113      	bne.n	800e06a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	689b      	ldr	r3, [r3, #8]
 800e048:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e054:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	689b      	ldr	r3, [r3, #8]
 800e05c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e068:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f022 0201 	bic.w	r2, r2, #1
 800e078:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	685b      	ldr	r3, [r3, #4]
 800e07e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e082:	2b00      	cmp	r3, #0
 800e084:	d00a      	beq.n	800e09c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	68db      	ldr	r3, [r3, #12]
 800e08c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	430a      	orrs	r2, r1
 800e09a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2201      	movs	r2, #1
 800e0a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e0ac:	2300      	movs	r3, #0
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3710      	adds	r7, #16
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
 800e0b6:	bf00      	nop
 800e0b8:	40013000 	.word	0x40013000
 800e0bc:	40003800 	.word	0x40003800
 800e0c0:	40003c00 	.word	0x40003c00

0800e0c4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b088      	sub	sp, #32
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	60f8      	str	r0, [r7, #12]
 800e0cc:	60b9      	str	r1, [r7, #8]
 800e0ce:	603b      	str	r3, [r7, #0]
 800e0d0:	4613      	mov	r3, r2
 800e0d2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0d8:	095b      	lsrs	r3, r3, #5
 800e0da:	b29b      	uxth	r3, r3
 800e0dc:	3301      	adds	r3, #1
 800e0de:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	3330      	adds	r3, #48	; 0x30
 800e0e6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e0e8:	f7f5 feac 	bl	8003e44 <HAL_GetTick>
 800e0ec:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e0f4:	b2db      	uxtb	r3, r3
 800e0f6:	2b01      	cmp	r3, #1
 800e0f8:	d001      	beq.n	800e0fe <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800e0fa:	2302      	movs	r3, #2
 800e0fc:	e250      	b.n	800e5a0 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e0fe:	68bb      	ldr	r3, [r7, #8]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d002      	beq.n	800e10a <HAL_SPI_Receive+0x46>
 800e104:	88fb      	ldrh	r3, [r7, #6]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d101      	bne.n	800e10e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800e10a:	2301      	movs	r3, #1
 800e10c:	e248      	b.n	800e5a0 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e114:	2b01      	cmp	r3, #1
 800e116:	d101      	bne.n	800e11c <HAL_SPI_Receive+0x58>
 800e118:	2302      	movs	r3, #2
 800e11a:	e241      	b.n	800e5a0 <HAL_SPI_Receive+0x4dc>
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	2201      	movs	r2, #1
 800e120:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	2204      	movs	r2, #4
 800e128:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2200      	movs	r2, #0
 800e130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	68ba      	ldr	r2, [r7, #8]
 800e138:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	88fa      	ldrh	r2, [r7, #6]
 800e13e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	88fa      	ldrh	r2, [r7, #6]
 800e146:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	2200      	movs	r2, #0
 800e14e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	2200      	movs	r2, #0
 800e154:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	2200      	movs	r2, #0
 800e15c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	2200      	movs	r2, #0
 800e164:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	2200      	movs	r2, #0
 800e16a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	689b      	ldr	r3, [r3, #8]
 800e170:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e174:	d108      	bne.n	800e188 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	681a      	ldr	r2, [r3, #0]
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e184:	601a      	str	r2, [r3, #0]
 800e186:	e009      	b.n	800e19c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	68db      	ldr	r3, [r3, #12]
 800e18e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e19a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	685a      	ldr	r2, [r3, #4]
 800e1a2:	4b95      	ldr	r3, [pc, #596]	; (800e3f8 <HAL_SPI_Receive+0x334>)
 800e1a4:	4013      	ands	r3, r2
 800e1a6:	88f9      	ldrh	r1, [r7, #6]
 800e1a8:	68fa      	ldr	r2, [r7, #12]
 800e1aa:	6812      	ldr	r2, [r2, #0]
 800e1ac:	430b      	orrs	r3, r1
 800e1ae:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	681a      	ldr	r2, [r3, #0]
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f042 0201 	orr.w	r2, r2, #1
 800e1be:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	685b      	ldr	r3, [r3, #4]
 800e1c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e1c8:	d107      	bne.n	800e1da <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	681a      	ldr	r2, [r3, #0]
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e1d8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	68db      	ldr	r3, [r3, #12]
 800e1de:	2b0f      	cmp	r3, #15
 800e1e0:	d96c      	bls.n	800e2bc <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e1e2:	e064      	b.n	800e2ae <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	695b      	ldr	r3, [r3, #20]
 800e1ea:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	695b      	ldr	r3, [r3, #20]
 800e1f2:	f003 0301 	and.w	r3, r3, #1
 800e1f6:	2b01      	cmp	r3, #1
 800e1f8:	d114      	bne.n	800e224 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681a      	ldr	r2, [r3, #0]
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e202:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e204:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e20a:	1d1a      	adds	r2, r3, #4
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e216:	b29b      	uxth	r3, r3
 800e218:	3b01      	subs	r3, #1
 800e21a:	b29a      	uxth	r2, r3
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e222:	e044      	b.n	800e2ae <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e22a:	b29b      	uxth	r3, r3
 800e22c:	8bfa      	ldrh	r2, [r7, #30]
 800e22e:	429a      	cmp	r2, r3
 800e230:	d919      	bls.n	800e266 <HAL_SPI_Receive+0x1a2>
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d014      	beq.n	800e266 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	681a      	ldr	r2, [r3, #0]
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e244:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e246:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e24c:	1d1a      	adds	r2, r3, #4
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e258:	b29b      	uxth	r3, r3
 800e25a:	3b01      	subs	r3, #1
 800e25c:	b29a      	uxth	r2, r3
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e264:	e023      	b.n	800e2ae <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e266:	f7f5 fded 	bl	8003e44 <HAL_GetTick>
 800e26a:	4602      	mov	r2, r0
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	1ad3      	subs	r3, r2, r3
 800e270:	683a      	ldr	r2, [r7, #0]
 800e272:	429a      	cmp	r2, r3
 800e274:	d803      	bhi.n	800e27e <HAL_SPI_Receive+0x1ba>
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e27c:	d102      	bne.n	800e284 <HAL_SPI_Receive+0x1c0>
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d114      	bne.n	800e2ae <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e284:	68f8      	ldr	r0, [r7, #12]
 800e286:	f000 f98f 	bl	800e5a8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e290:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	2201      	movs	r2, #1
 800e29e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e2aa:	2303      	movs	r3, #3
 800e2ac:	e178      	b.n	800e5a0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2b4:	b29b      	uxth	r3, r3
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d194      	bne.n	800e1e4 <HAL_SPI_Receive+0x120>
 800e2ba:	e15e      	b.n	800e57a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	68db      	ldr	r3, [r3, #12]
 800e2c0:	2b07      	cmp	r3, #7
 800e2c2:	f240 8153 	bls.w	800e56c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e2c6:	e08f      	b.n	800e3e8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	695b      	ldr	r3, [r3, #20]
 800e2ce:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	695b      	ldr	r3, [r3, #20]
 800e2d6:	f003 0301 	and.w	r3, r3, #1
 800e2da:	2b01      	cmp	r3, #1
 800e2dc:	d114      	bne.n	800e308 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2e2:	69ba      	ldr	r2, [r7, #24]
 800e2e4:	8812      	ldrh	r2, [r2, #0]
 800e2e6:	b292      	uxth	r2, r2
 800e2e8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2ee:	1c9a      	adds	r2, r3, #2
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2fa:	b29b      	uxth	r3, r3
 800e2fc:	3b01      	subs	r3, #1
 800e2fe:	b29a      	uxth	r2, r3
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e306:	e06f      	b.n	800e3e8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e30e:	b29b      	uxth	r3, r3
 800e310:	8bfa      	ldrh	r2, [r7, #30]
 800e312:	429a      	cmp	r2, r3
 800e314:	d924      	bls.n	800e360 <HAL_SPI_Receive+0x29c>
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d01f      	beq.n	800e360 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e324:	69ba      	ldr	r2, [r7, #24]
 800e326:	8812      	ldrh	r2, [r2, #0]
 800e328:	b292      	uxth	r2, r2
 800e32a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e330:	1c9a      	adds	r2, r3, #2
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e33a:	69ba      	ldr	r2, [r7, #24]
 800e33c:	8812      	ldrh	r2, [r2, #0]
 800e33e:	b292      	uxth	r2, r2
 800e340:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e346:	1c9a      	adds	r2, r3, #2
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e352:	b29b      	uxth	r3, r3
 800e354:	3b02      	subs	r3, #2
 800e356:	b29a      	uxth	r2, r3
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e35e:	e043      	b.n	800e3e8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e366:	b29b      	uxth	r3, r3
 800e368:	2b01      	cmp	r3, #1
 800e36a:	d119      	bne.n	800e3a0 <HAL_SPI_Receive+0x2dc>
 800e36c:	693b      	ldr	r3, [r7, #16]
 800e36e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e372:	2b00      	cmp	r3, #0
 800e374:	d014      	beq.n	800e3a0 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e37a:	69ba      	ldr	r2, [r7, #24]
 800e37c:	8812      	ldrh	r2, [r2, #0]
 800e37e:	b292      	uxth	r2, r2
 800e380:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e386:	1c9a      	adds	r2, r3, #2
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e392:	b29b      	uxth	r3, r3
 800e394:	3b01      	subs	r3, #1
 800e396:	b29a      	uxth	r2, r3
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e39e:	e023      	b.n	800e3e8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e3a0:	f7f5 fd50 	bl	8003e44 <HAL_GetTick>
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	1ad3      	subs	r3, r2, r3
 800e3aa:	683a      	ldr	r2, [r7, #0]
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d803      	bhi.n	800e3b8 <HAL_SPI_Receive+0x2f4>
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3b6:	d102      	bne.n	800e3be <HAL_SPI_Receive+0x2fa>
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d114      	bne.n	800e3e8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e3be:	68f8      	ldr	r0, [r7, #12]
 800e3c0:	f000 f8f2 	bl	800e5a8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	2201      	movs	r2, #1
 800e3d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e3e4:	2303      	movs	r3, #3
 800e3e6:	e0db      	b.n	800e5a0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3ee:	b29b      	uxth	r3, r3
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	f47f af69 	bne.w	800e2c8 <HAL_SPI_Receive+0x204>
 800e3f6:	e0c0      	b.n	800e57a <HAL_SPI_Receive+0x4b6>
 800e3f8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	695b      	ldr	r3, [r3, #20]
 800e402:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	695b      	ldr	r3, [r3, #20]
 800e40a:	f003 0301 	and.w	r3, r3, #1
 800e40e:	2b01      	cmp	r3, #1
 800e410:	d117      	bne.n	800e442 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e41e:	7812      	ldrb	r2, [r2, #0]
 800e420:	b2d2      	uxtb	r2, r2
 800e422:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e428:	1c5a      	adds	r2, r3, #1
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e434:	b29b      	uxth	r3, r3
 800e436:	3b01      	subs	r3, #1
 800e438:	b29a      	uxth	r2, r3
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e440:	e094      	b.n	800e56c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e448:	b29b      	uxth	r3, r3
 800e44a:	8bfa      	ldrh	r2, [r7, #30]
 800e44c:	429a      	cmp	r2, r3
 800e44e:	d946      	bls.n	800e4de <HAL_SPI_Receive+0x41a>
 800e450:	693b      	ldr	r3, [r7, #16]
 800e452:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e456:	2b00      	cmp	r3, #0
 800e458:	d041      	beq.n	800e4de <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e466:	7812      	ldrb	r2, [r2, #0]
 800e468:	b2d2      	uxtb	r2, r2
 800e46a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e470:	1c5a      	adds	r2, r3, #1
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e482:	7812      	ldrb	r2, [r2, #0]
 800e484:	b2d2      	uxtb	r2, r2
 800e486:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e48c:	1c5a      	adds	r2, r3, #1
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e49e:	7812      	ldrb	r2, [r2, #0]
 800e4a0:	b2d2      	uxtb	r2, r2
 800e4a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4a8:	1c5a      	adds	r2, r3, #1
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4ba:	7812      	ldrb	r2, [r2, #0]
 800e4bc:	b2d2      	uxtb	r2, r2
 800e4be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4c4:	1c5a      	adds	r2, r3, #1
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4d0:	b29b      	uxth	r3, r3
 800e4d2:	3b04      	subs	r3, #4
 800e4d4:	b29a      	uxth	r2, r3
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e4dc:	e046      	b.n	800e56c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4e4:	b29b      	uxth	r3, r3
 800e4e6:	2b03      	cmp	r3, #3
 800e4e8:	d81c      	bhi.n	800e524 <HAL_SPI_Receive+0x460>
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d017      	beq.n	800e524 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e500:	7812      	ldrb	r2, [r2, #0]
 800e502:	b2d2      	uxtb	r2, r2
 800e504:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e50a:	1c5a      	adds	r2, r3, #1
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e516:	b29b      	uxth	r3, r3
 800e518:	3b01      	subs	r3, #1
 800e51a:	b29a      	uxth	r2, r3
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e522:	e023      	b.n	800e56c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e524:	f7f5 fc8e 	bl	8003e44 <HAL_GetTick>
 800e528:	4602      	mov	r2, r0
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	1ad3      	subs	r3, r2, r3
 800e52e:	683a      	ldr	r2, [r7, #0]
 800e530:	429a      	cmp	r2, r3
 800e532:	d803      	bhi.n	800e53c <HAL_SPI_Receive+0x478>
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e53a:	d102      	bne.n	800e542 <HAL_SPI_Receive+0x47e>
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d114      	bne.n	800e56c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e542:	68f8      	ldr	r0, [r7, #12]
 800e544:	f000 f830 	bl	800e5a8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e54e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2201      	movs	r2, #1
 800e55c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	2200      	movs	r2, #0
 800e564:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e568:	2303      	movs	r3, #3
 800e56a:	e019      	b.n	800e5a0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e572:	b29b      	uxth	r3, r3
 800e574:	2b00      	cmp	r3, #0
 800e576:	f47f af41 	bne.w	800e3fc <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e57a:	68f8      	ldr	r0, [r7, #12]
 800e57c:	f000 f814 	bl	800e5a8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	2201      	movs	r2, #1
 800e584:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	2200      	movs	r2, #0
 800e58c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e596:	2b00      	cmp	r3, #0
 800e598:	d001      	beq.n	800e59e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e59a:	2301      	movs	r3, #1
 800e59c:	e000      	b.n	800e5a0 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e59e:	2300      	movs	r3, #0
  }
}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	3720      	adds	r7, #32
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}

0800e5a8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b085      	sub	sp, #20
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	695b      	ldr	r3, [r3, #20]
 800e5b6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	699a      	ldr	r2, [r3, #24]
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	f042 0208 	orr.w	r2, r2, #8
 800e5c6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	699a      	ldr	r2, [r3, #24]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f042 0210 	orr.w	r2, r2, #16
 800e5d6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	681a      	ldr	r2, [r3, #0]
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	f022 0201 	bic.w	r2, r2, #1
 800e5e6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	6919      	ldr	r1, [r3, #16]
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681a      	ldr	r2, [r3, #0]
 800e5f2:	4b3c      	ldr	r3, [pc, #240]	; (800e6e4 <SPI_CloseTransfer+0x13c>)
 800e5f4:	400b      	ands	r3, r1
 800e5f6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	689a      	ldr	r2, [r3, #8]
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e606:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e60e:	b2db      	uxtb	r3, r3
 800e610:	2b04      	cmp	r3, #4
 800e612:	d014      	beq.n	800e63e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	f003 0320 	and.w	r3, r3, #32
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d00f      	beq.n	800e63e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e624:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	699a      	ldr	r2, [r3, #24]
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f042 0220 	orr.w	r2, r2, #32
 800e63c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e644:	b2db      	uxtb	r3, r3
 800e646:	2b03      	cmp	r3, #3
 800e648:	d014      	beq.n	800e674 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e650:	2b00      	cmp	r3, #0
 800e652:	d00f      	beq.n	800e674 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e65a:	f043 0204 	orr.w	r2, r3, #4
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	699a      	ldr	r2, [r3, #24]
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e672:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d00f      	beq.n	800e69e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e684:	f043 0201 	orr.w	r2, r3, #1
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	699a      	ldr	r2, [r3, #24]
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e69c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d00f      	beq.n	800e6c8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6ae:	f043 0208 	orr.w	r2, r3, #8
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	699a      	ldr	r2, [r3, #24]
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e6c6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e6d8:	bf00      	nop
 800e6da:	3714      	adds	r7, #20
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e2:	4770      	bx	lr
 800e6e4:	fffffc90 	.word	0xfffffc90

0800e6e8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e6e8:	b480      	push	{r7}
 800e6ea:	b085      	sub	sp, #20
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6f4:	095b      	lsrs	r3, r3, #5
 800e6f6:	3301      	adds	r3, #1
 800e6f8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	68db      	ldr	r3, [r3, #12]
 800e6fe:	3301      	adds	r3, #1
 800e700:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e702:	68bb      	ldr	r3, [r7, #8]
 800e704:	3307      	adds	r3, #7
 800e706:	08db      	lsrs	r3, r3, #3
 800e708:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	68fa      	ldr	r2, [r7, #12]
 800e70e:	fb02 f303 	mul.w	r3, r2, r3
}
 800e712:	4618      	mov	r0, r3
 800e714:	3714      	adds	r7, #20
 800e716:	46bd      	mov	sp, r7
 800e718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71c:	4770      	bx	lr

0800e71e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e71e:	b580      	push	{r7, lr}
 800e720:	b082      	sub	sp, #8
 800e722:	af00      	add	r7, sp, #0
 800e724:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d101      	bne.n	800e730 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e72c:	2301      	movs	r3, #1
 800e72e:	e049      	b.n	800e7c4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e736:	b2db      	uxtb	r3, r3
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d106      	bne.n	800e74a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2200      	movs	r2, #0
 800e740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e744:	6878      	ldr	r0, [r7, #4]
 800e746:	f7f4 fe35 	bl	80033b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2202      	movs	r2, #2
 800e74e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681a      	ldr	r2, [r3, #0]
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	3304      	adds	r3, #4
 800e75a:	4619      	mov	r1, r3
 800e75c:	4610      	mov	r0, r2
 800e75e:	f000 fe7d 	bl	800f45c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2201      	movs	r2, #1
 800e766:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2201      	movs	r2, #1
 800e76e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2201      	movs	r2, #1
 800e776:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2201      	movs	r2, #1
 800e77e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	2201      	movs	r2, #1
 800e786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	2201      	movs	r2, #1
 800e78e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2201      	movs	r2, #1
 800e796:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2201      	movs	r2, #1
 800e79e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2201      	movs	r2, #1
 800e7a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2201      	movs	r2, #1
 800e7ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2201      	movs	r2, #1
 800e7b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2201      	movs	r2, #1
 800e7be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e7c2:	2300      	movs	r3, #0
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3708      	adds	r7, #8
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}

0800e7cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	b085      	sub	sp, #20
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e7da:	b2db      	uxtb	r3, r3
 800e7dc:	2b01      	cmp	r3, #1
 800e7de:	d001      	beq.n	800e7e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	e054      	b.n	800e88e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2202      	movs	r2, #2
 800e7e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	68da      	ldr	r2, [r3, #12]
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	f042 0201 	orr.w	r2, r2, #1
 800e7fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	4a26      	ldr	r2, [pc, #152]	; (800e89c <HAL_TIM_Base_Start_IT+0xd0>)
 800e802:	4293      	cmp	r3, r2
 800e804:	d022      	beq.n	800e84c <HAL_TIM_Base_Start_IT+0x80>
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e80e:	d01d      	beq.n	800e84c <HAL_TIM_Base_Start_IT+0x80>
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	4a22      	ldr	r2, [pc, #136]	; (800e8a0 <HAL_TIM_Base_Start_IT+0xd4>)
 800e816:	4293      	cmp	r3, r2
 800e818:	d018      	beq.n	800e84c <HAL_TIM_Base_Start_IT+0x80>
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	4a21      	ldr	r2, [pc, #132]	; (800e8a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800e820:	4293      	cmp	r3, r2
 800e822:	d013      	beq.n	800e84c <HAL_TIM_Base_Start_IT+0x80>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	4a1f      	ldr	r2, [pc, #124]	; (800e8a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800e82a:	4293      	cmp	r3, r2
 800e82c:	d00e      	beq.n	800e84c <HAL_TIM_Base_Start_IT+0x80>
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	4a1e      	ldr	r2, [pc, #120]	; (800e8ac <HAL_TIM_Base_Start_IT+0xe0>)
 800e834:	4293      	cmp	r3, r2
 800e836:	d009      	beq.n	800e84c <HAL_TIM_Base_Start_IT+0x80>
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	4a1c      	ldr	r2, [pc, #112]	; (800e8b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800e83e:	4293      	cmp	r3, r2
 800e840:	d004      	beq.n	800e84c <HAL_TIM_Base_Start_IT+0x80>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	4a1b      	ldr	r2, [pc, #108]	; (800e8b4 <HAL_TIM_Base_Start_IT+0xe8>)
 800e848:	4293      	cmp	r3, r2
 800e84a:	d115      	bne.n	800e878 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	689a      	ldr	r2, [r3, #8]
 800e852:	4b19      	ldr	r3, [pc, #100]	; (800e8b8 <HAL_TIM_Base_Start_IT+0xec>)
 800e854:	4013      	ands	r3, r2
 800e856:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	2b06      	cmp	r3, #6
 800e85c:	d015      	beq.n	800e88a <HAL_TIM_Base_Start_IT+0xbe>
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e864:	d011      	beq.n	800e88a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	681a      	ldr	r2, [r3, #0]
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	f042 0201 	orr.w	r2, r2, #1
 800e874:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e876:	e008      	b.n	800e88a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	681a      	ldr	r2, [r3, #0]
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	f042 0201 	orr.w	r2, r2, #1
 800e886:	601a      	str	r2, [r3, #0]
 800e888:	e000      	b.n	800e88c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e88a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e88c:	2300      	movs	r3, #0
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3714      	adds	r7, #20
 800e892:	46bd      	mov	sp, r7
 800e894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e898:	4770      	bx	lr
 800e89a:	bf00      	nop
 800e89c:	40010000 	.word	0x40010000
 800e8a0:	40000400 	.word	0x40000400
 800e8a4:	40000800 	.word	0x40000800
 800e8a8:	40000c00 	.word	0x40000c00
 800e8ac:	40010400 	.word	0x40010400
 800e8b0:	40001800 	.word	0x40001800
 800e8b4:	40014000 	.word	0x40014000
 800e8b8:	00010007 	.word	0x00010007

0800e8bc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b084      	sub	sp, #16
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d109      	bne.n	800e8e4 <HAL_TIM_OC_Start_IT+0x28>
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e8d6:	b2db      	uxtb	r3, r3
 800e8d8:	2b01      	cmp	r3, #1
 800e8da:	bf14      	ite	ne
 800e8dc:	2301      	movne	r3, #1
 800e8de:	2300      	moveq	r3, #0
 800e8e0:	b2db      	uxtb	r3, r3
 800e8e2:	e03c      	b.n	800e95e <HAL_TIM_OC_Start_IT+0xa2>
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	2b04      	cmp	r3, #4
 800e8e8:	d109      	bne.n	800e8fe <HAL_TIM_OC_Start_IT+0x42>
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e8f0:	b2db      	uxtb	r3, r3
 800e8f2:	2b01      	cmp	r3, #1
 800e8f4:	bf14      	ite	ne
 800e8f6:	2301      	movne	r3, #1
 800e8f8:	2300      	moveq	r3, #0
 800e8fa:	b2db      	uxtb	r3, r3
 800e8fc:	e02f      	b.n	800e95e <HAL_TIM_OC_Start_IT+0xa2>
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	2b08      	cmp	r3, #8
 800e902:	d109      	bne.n	800e918 <HAL_TIM_OC_Start_IT+0x5c>
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e90a:	b2db      	uxtb	r3, r3
 800e90c:	2b01      	cmp	r3, #1
 800e90e:	bf14      	ite	ne
 800e910:	2301      	movne	r3, #1
 800e912:	2300      	moveq	r3, #0
 800e914:	b2db      	uxtb	r3, r3
 800e916:	e022      	b.n	800e95e <HAL_TIM_OC_Start_IT+0xa2>
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	2b0c      	cmp	r3, #12
 800e91c:	d109      	bne.n	800e932 <HAL_TIM_OC_Start_IT+0x76>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e924:	b2db      	uxtb	r3, r3
 800e926:	2b01      	cmp	r3, #1
 800e928:	bf14      	ite	ne
 800e92a:	2301      	movne	r3, #1
 800e92c:	2300      	moveq	r3, #0
 800e92e:	b2db      	uxtb	r3, r3
 800e930:	e015      	b.n	800e95e <HAL_TIM_OC_Start_IT+0xa2>
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	2b10      	cmp	r3, #16
 800e936:	d109      	bne.n	800e94c <HAL_TIM_OC_Start_IT+0x90>
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e93e:	b2db      	uxtb	r3, r3
 800e940:	2b01      	cmp	r3, #1
 800e942:	bf14      	ite	ne
 800e944:	2301      	movne	r3, #1
 800e946:	2300      	moveq	r3, #0
 800e948:	b2db      	uxtb	r3, r3
 800e94a:	e008      	b.n	800e95e <HAL_TIM_OC_Start_IT+0xa2>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e952:	b2db      	uxtb	r3, r3
 800e954:	2b01      	cmp	r3, #1
 800e956:	bf14      	ite	ne
 800e958:	2301      	movne	r3, #1
 800e95a:	2300      	moveq	r3, #0
 800e95c:	b2db      	uxtb	r3, r3
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d001      	beq.n	800e966 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800e962:	2301      	movs	r3, #1
 800e964:	e0ec      	b.n	800eb40 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d104      	bne.n	800e976 <HAL_TIM_OC_Start_IT+0xba>
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2202      	movs	r2, #2
 800e970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e974:	e023      	b.n	800e9be <HAL_TIM_OC_Start_IT+0x102>
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	2b04      	cmp	r3, #4
 800e97a:	d104      	bne.n	800e986 <HAL_TIM_OC_Start_IT+0xca>
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2202      	movs	r2, #2
 800e980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e984:	e01b      	b.n	800e9be <HAL_TIM_OC_Start_IT+0x102>
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	2b08      	cmp	r3, #8
 800e98a:	d104      	bne.n	800e996 <HAL_TIM_OC_Start_IT+0xda>
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2202      	movs	r2, #2
 800e990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e994:	e013      	b.n	800e9be <HAL_TIM_OC_Start_IT+0x102>
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	2b0c      	cmp	r3, #12
 800e99a:	d104      	bne.n	800e9a6 <HAL_TIM_OC_Start_IT+0xea>
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2202      	movs	r2, #2
 800e9a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e9a4:	e00b      	b.n	800e9be <HAL_TIM_OC_Start_IT+0x102>
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	2b10      	cmp	r3, #16
 800e9aa:	d104      	bne.n	800e9b6 <HAL_TIM_OC_Start_IT+0xfa>
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2202      	movs	r2, #2
 800e9b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e9b4:	e003      	b.n	800e9be <HAL_TIM_OC_Start_IT+0x102>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2202      	movs	r2, #2
 800e9ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	2b0c      	cmp	r3, #12
 800e9c2:	d841      	bhi.n	800ea48 <HAL_TIM_OC_Start_IT+0x18c>
 800e9c4:	a201      	add	r2, pc, #4	; (adr r2, 800e9cc <HAL_TIM_OC_Start_IT+0x110>)
 800e9c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9ca:	bf00      	nop
 800e9cc:	0800ea01 	.word	0x0800ea01
 800e9d0:	0800ea49 	.word	0x0800ea49
 800e9d4:	0800ea49 	.word	0x0800ea49
 800e9d8:	0800ea49 	.word	0x0800ea49
 800e9dc:	0800ea13 	.word	0x0800ea13
 800e9e0:	0800ea49 	.word	0x0800ea49
 800e9e4:	0800ea49 	.word	0x0800ea49
 800e9e8:	0800ea49 	.word	0x0800ea49
 800e9ec:	0800ea25 	.word	0x0800ea25
 800e9f0:	0800ea49 	.word	0x0800ea49
 800e9f4:	0800ea49 	.word	0x0800ea49
 800e9f8:	0800ea49 	.word	0x0800ea49
 800e9fc:	0800ea37 	.word	0x0800ea37
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	68da      	ldr	r2, [r3, #12]
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	f042 0202 	orr.w	r2, r2, #2
 800ea0e:	60da      	str	r2, [r3, #12]
      break;
 800ea10:	e01d      	b.n	800ea4e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	68da      	ldr	r2, [r3, #12]
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	f042 0204 	orr.w	r2, r2, #4
 800ea20:	60da      	str	r2, [r3, #12]
      break;
 800ea22:	e014      	b.n	800ea4e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	68da      	ldr	r2, [r3, #12]
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	f042 0208 	orr.w	r2, r2, #8
 800ea32:	60da      	str	r2, [r3, #12]
      break;
 800ea34:	e00b      	b.n	800ea4e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	68da      	ldr	r2, [r3, #12]
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f042 0210 	orr.w	r2, r2, #16
 800ea44:	60da      	str	r2, [r3, #12]
      break;
 800ea46:	e002      	b.n	800ea4e <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ea48:	2301      	movs	r3, #1
 800ea4a:	73fb      	strb	r3, [r7, #15]
      break;
 800ea4c:	bf00      	nop
  }

  if (status == HAL_OK)
 800ea4e:	7bfb      	ldrb	r3, [r7, #15]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d174      	bne.n	800eb3e <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	2201      	movs	r2, #1
 800ea5a:	6839      	ldr	r1, [r7, #0]
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f001 f917 	bl	800fc90 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	4a38      	ldr	r2, [pc, #224]	; (800eb48 <HAL_TIM_OC_Start_IT+0x28c>)
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	d013      	beq.n	800ea94 <HAL_TIM_OC_Start_IT+0x1d8>
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	4a36      	ldr	r2, [pc, #216]	; (800eb4c <HAL_TIM_OC_Start_IT+0x290>)
 800ea72:	4293      	cmp	r3, r2
 800ea74:	d00e      	beq.n	800ea94 <HAL_TIM_OC_Start_IT+0x1d8>
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	4a35      	ldr	r2, [pc, #212]	; (800eb50 <HAL_TIM_OC_Start_IT+0x294>)
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	d009      	beq.n	800ea94 <HAL_TIM_OC_Start_IT+0x1d8>
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	4a33      	ldr	r2, [pc, #204]	; (800eb54 <HAL_TIM_OC_Start_IT+0x298>)
 800ea86:	4293      	cmp	r3, r2
 800ea88:	d004      	beq.n	800ea94 <HAL_TIM_OC_Start_IT+0x1d8>
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	4a32      	ldr	r2, [pc, #200]	; (800eb58 <HAL_TIM_OC_Start_IT+0x29c>)
 800ea90:	4293      	cmp	r3, r2
 800ea92:	d101      	bne.n	800ea98 <HAL_TIM_OC_Start_IT+0x1dc>
 800ea94:	2301      	movs	r3, #1
 800ea96:	e000      	b.n	800ea9a <HAL_TIM_OC_Start_IT+0x1de>
 800ea98:	2300      	movs	r3, #0
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d007      	beq.n	800eaae <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800eaac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	4a25      	ldr	r2, [pc, #148]	; (800eb48 <HAL_TIM_OC_Start_IT+0x28c>)
 800eab4:	4293      	cmp	r3, r2
 800eab6:	d022      	beq.n	800eafe <HAL_TIM_OC_Start_IT+0x242>
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eac0:	d01d      	beq.n	800eafe <HAL_TIM_OC_Start_IT+0x242>
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	4a25      	ldr	r2, [pc, #148]	; (800eb5c <HAL_TIM_OC_Start_IT+0x2a0>)
 800eac8:	4293      	cmp	r3, r2
 800eaca:	d018      	beq.n	800eafe <HAL_TIM_OC_Start_IT+0x242>
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	4a23      	ldr	r2, [pc, #140]	; (800eb60 <HAL_TIM_OC_Start_IT+0x2a4>)
 800ead2:	4293      	cmp	r3, r2
 800ead4:	d013      	beq.n	800eafe <HAL_TIM_OC_Start_IT+0x242>
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	4a22      	ldr	r2, [pc, #136]	; (800eb64 <HAL_TIM_OC_Start_IT+0x2a8>)
 800eadc:	4293      	cmp	r3, r2
 800eade:	d00e      	beq.n	800eafe <HAL_TIM_OC_Start_IT+0x242>
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	4a19      	ldr	r2, [pc, #100]	; (800eb4c <HAL_TIM_OC_Start_IT+0x290>)
 800eae6:	4293      	cmp	r3, r2
 800eae8:	d009      	beq.n	800eafe <HAL_TIM_OC_Start_IT+0x242>
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	4a1e      	ldr	r2, [pc, #120]	; (800eb68 <HAL_TIM_OC_Start_IT+0x2ac>)
 800eaf0:	4293      	cmp	r3, r2
 800eaf2:	d004      	beq.n	800eafe <HAL_TIM_OC_Start_IT+0x242>
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	4a15      	ldr	r2, [pc, #84]	; (800eb50 <HAL_TIM_OC_Start_IT+0x294>)
 800eafa:	4293      	cmp	r3, r2
 800eafc:	d115      	bne.n	800eb2a <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	689a      	ldr	r2, [r3, #8]
 800eb04:	4b19      	ldr	r3, [pc, #100]	; (800eb6c <HAL_TIM_OC_Start_IT+0x2b0>)
 800eb06:	4013      	ands	r3, r2
 800eb08:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	2b06      	cmp	r3, #6
 800eb0e:	d015      	beq.n	800eb3c <HAL_TIM_OC_Start_IT+0x280>
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb16:	d011      	beq.n	800eb3c <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	681a      	ldr	r2, [r3, #0]
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	f042 0201 	orr.w	r2, r2, #1
 800eb26:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb28:	e008      	b.n	800eb3c <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	681a      	ldr	r2, [r3, #0]
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	f042 0201 	orr.w	r2, r2, #1
 800eb38:	601a      	str	r2, [r3, #0]
 800eb3a:	e000      	b.n	800eb3e <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb3c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800eb3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	3710      	adds	r7, #16
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}
 800eb48:	40010000 	.word	0x40010000
 800eb4c:	40010400 	.word	0x40010400
 800eb50:	40014000 	.word	0x40014000
 800eb54:	40014400 	.word	0x40014400
 800eb58:	40014800 	.word	0x40014800
 800eb5c:	40000400 	.word	0x40000400
 800eb60:	40000800 	.word	0x40000800
 800eb64:	40000c00 	.word	0x40000c00
 800eb68:	40001800 	.word	0x40001800
 800eb6c:	00010007 	.word	0x00010007

0800eb70 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b084      	sub	sp, #16
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
 800eb78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	2b0c      	cmp	r3, #12
 800eb82:	d841      	bhi.n	800ec08 <HAL_TIM_OC_Stop_IT+0x98>
 800eb84:	a201      	add	r2, pc, #4	; (adr r2, 800eb8c <HAL_TIM_OC_Stop_IT+0x1c>)
 800eb86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb8a:	bf00      	nop
 800eb8c:	0800ebc1 	.word	0x0800ebc1
 800eb90:	0800ec09 	.word	0x0800ec09
 800eb94:	0800ec09 	.word	0x0800ec09
 800eb98:	0800ec09 	.word	0x0800ec09
 800eb9c:	0800ebd3 	.word	0x0800ebd3
 800eba0:	0800ec09 	.word	0x0800ec09
 800eba4:	0800ec09 	.word	0x0800ec09
 800eba8:	0800ec09 	.word	0x0800ec09
 800ebac:	0800ebe5 	.word	0x0800ebe5
 800ebb0:	0800ec09 	.word	0x0800ec09
 800ebb4:	0800ec09 	.word	0x0800ec09
 800ebb8:	0800ec09 	.word	0x0800ec09
 800ebbc:	0800ebf7 	.word	0x0800ebf7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	68da      	ldr	r2, [r3, #12]
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	f022 0202 	bic.w	r2, r2, #2
 800ebce:	60da      	str	r2, [r3, #12]
      break;
 800ebd0:	e01d      	b.n	800ec0e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	68da      	ldr	r2, [r3, #12]
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	f022 0204 	bic.w	r2, r2, #4
 800ebe0:	60da      	str	r2, [r3, #12]
      break;
 800ebe2:	e014      	b.n	800ec0e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	68da      	ldr	r2, [r3, #12]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	f022 0208 	bic.w	r2, r2, #8
 800ebf2:	60da      	str	r2, [r3, #12]
      break;
 800ebf4:	e00b      	b.n	800ec0e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	68da      	ldr	r2, [r3, #12]
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	f022 0210 	bic.w	r2, r2, #16
 800ec04:	60da      	str	r2, [r3, #12]
      break;
 800ec06:	e002      	b.n	800ec0e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800ec08:	2301      	movs	r3, #1
 800ec0a:	73fb      	strb	r3, [r7, #15]
      break;
 800ec0c:	bf00      	nop
  }

  if (status == HAL_OK)
 800ec0e:	7bfb      	ldrb	r3, [r7, #15]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	f040 8081 	bne.w	800ed18 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	6839      	ldr	r1, [r7, #0]
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f001 f836 	bl	800fc90 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	4a3e      	ldr	r2, [pc, #248]	; (800ed24 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800ec2a:	4293      	cmp	r3, r2
 800ec2c:	d013      	beq.n	800ec56 <HAL_TIM_OC_Stop_IT+0xe6>
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	4a3d      	ldr	r2, [pc, #244]	; (800ed28 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800ec34:	4293      	cmp	r3, r2
 800ec36:	d00e      	beq.n	800ec56 <HAL_TIM_OC_Stop_IT+0xe6>
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	4a3b      	ldr	r2, [pc, #236]	; (800ed2c <HAL_TIM_OC_Stop_IT+0x1bc>)
 800ec3e:	4293      	cmp	r3, r2
 800ec40:	d009      	beq.n	800ec56 <HAL_TIM_OC_Stop_IT+0xe6>
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	4a3a      	ldr	r2, [pc, #232]	; (800ed30 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800ec48:	4293      	cmp	r3, r2
 800ec4a:	d004      	beq.n	800ec56 <HAL_TIM_OC_Stop_IT+0xe6>
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	4a38      	ldr	r2, [pc, #224]	; (800ed34 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800ec52:	4293      	cmp	r3, r2
 800ec54:	d101      	bne.n	800ec5a <HAL_TIM_OC_Stop_IT+0xea>
 800ec56:	2301      	movs	r3, #1
 800ec58:	e000      	b.n	800ec5c <HAL_TIM_OC_Stop_IT+0xec>
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d017      	beq.n	800ec90 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	6a1a      	ldr	r2, [r3, #32]
 800ec66:	f241 1311 	movw	r3, #4369	; 0x1111
 800ec6a:	4013      	ands	r3, r2
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d10f      	bne.n	800ec90 <HAL_TIM_OC_Stop_IT+0x120>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	6a1a      	ldr	r2, [r3, #32]
 800ec76:	f240 4344 	movw	r3, #1092	; 0x444
 800ec7a:	4013      	ands	r3, r2
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d107      	bne.n	800ec90 <HAL_TIM_OC_Stop_IT+0x120>
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ec8e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	6a1a      	ldr	r2, [r3, #32]
 800ec96:	f241 1311 	movw	r3, #4369	; 0x1111
 800ec9a:	4013      	ands	r3, r2
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d10f      	bne.n	800ecc0 <HAL_TIM_OC_Stop_IT+0x150>
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	6a1a      	ldr	r2, [r3, #32]
 800eca6:	f240 4344 	movw	r3, #1092	; 0x444
 800ecaa:	4013      	ands	r3, r2
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d107      	bne.n	800ecc0 <HAL_TIM_OC_Stop_IT+0x150>
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	681a      	ldr	r2, [r3, #0]
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	f022 0201 	bic.w	r2, r2, #1
 800ecbe:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d104      	bne.n	800ecd0 <HAL_TIM_OC_Stop_IT+0x160>
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2201      	movs	r2, #1
 800ecca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ecce:	e023      	b.n	800ed18 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	2b04      	cmp	r3, #4
 800ecd4:	d104      	bne.n	800ece0 <HAL_TIM_OC_Stop_IT+0x170>
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2201      	movs	r2, #1
 800ecda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ecde:	e01b      	b.n	800ed18 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	2b08      	cmp	r3, #8
 800ece4:	d104      	bne.n	800ecf0 <HAL_TIM_OC_Stop_IT+0x180>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2201      	movs	r2, #1
 800ecea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ecee:	e013      	b.n	800ed18 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	2b0c      	cmp	r3, #12
 800ecf4:	d104      	bne.n	800ed00 <HAL_TIM_OC_Stop_IT+0x190>
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2201      	movs	r2, #1
 800ecfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ecfe:	e00b      	b.n	800ed18 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	2b10      	cmp	r3, #16
 800ed04:	d104      	bne.n	800ed10 <HAL_TIM_OC_Stop_IT+0x1a0>
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2201      	movs	r2, #1
 800ed0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ed0e:	e003      	b.n	800ed18 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2201      	movs	r2, #1
 800ed14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800ed18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	3710      	adds	r7, #16
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}
 800ed22:	bf00      	nop
 800ed24:	40010000 	.word	0x40010000
 800ed28:	40010400 	.word	0x40010400
 800ed2c:	40014000 	.word	0x40014000
 800ed30:	40014400 	.word	0x40014400
 800ed34:	40014800 	.word	0x40014800

0800ed38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b082      	sub	sp, #8
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d101      	bne.n	800ed4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ed46:	2301      	movs	r3, #1
 800ed48:	e049      	b.n	800edde <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed50:	b2db      	uxtb	r3, r3
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d106      	bne.n	800ed64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2200      	movs	r2, #0
 800ed5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f000 f841 	bl	800ede6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2202      	movs	r2, #2
 800ed68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681a      	ldr	r2, [r3, #0]
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	3304      	adds	r3, #4
 800ed74:	4619      	mov	r1, r3
 800ed76:	4610      	mov	r0, r2
 800ed78:	f000 fb70 	bl	800f45c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2201      	movs	r2, #1
 800ed80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2201      	movs	r2, #1
 800ed88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2201      	movs	r2, #1
 800ed90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2201      	movs	r2, #1
 800ed98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2201      	movs	r2, #1
 800eda0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2201      	movs	r2, #1
 800eda8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2201      	movs	r2, #1
 800edb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2201      	movs	r2, #1
 800edb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2201      	movs	r2, #1
 800edc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2201      	movs	r2, #1
 800edc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2201      	movs	r2, #1
 800edd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2201      	movs	r2, #1
 800edd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eddc:	2300      	movs	r3, #0
}
 800edde:	4618      	mov	r0, r3
 800ede0:	3708      	adds	r7, #8
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}

0800ede6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ede6:	b480      	push	{r7}
 800ede8:	b083      	sub	sp, #12
 800edea:	af00      	add	r7, sp, #0
 800edec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800edee:	bf00      	nop
 800edf0:	370c      	adds	r7, #12
 800edf2:	46bd      	mov	sp, r7
 800edf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf8:	4770      	bx	lr

0800edfa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800edfa:	b580      	push	{r7, lr}
 800edfc:	b084      	sub	sp, #16
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	68db      	ldr	r3, [r3, #12]
 800ee08:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	691b      	ldr	r3, [r3, #16]
 800ee10:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	f003 0302 	and.w	r3, r3, #2
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d020      	beq.n	800ee5e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	f003 0302 	and.w	r3, r3, #2
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d01b      	beq.n	800ee5e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	f06f 0202 	mvn.w	r2, #2
 800ee2e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2201      	movs	r2, #1
 800ee34:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	699b      	ldr	r3, [r3, #24]
 800ee3c:	f003 0303 	and.w	r3, r3, #3
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d003      	beq.n	800ee4c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f000 faeb 	bl	800f420 <HAL_TIM_IC_CaptureCallback>
 800ee4a:	e005      	b.n	800ee58 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f7f2 fb31 	bl	80014b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f000 faee 	bl	800f434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	f003 0304 	and.w	r3, r3, #4
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d020      	beq.n	800eeaa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	f003 0304 	and.w	r3, r3, #4
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d01b      	beq.n	800eeaa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f06f 0204 	mvn.w	r2, #4
 800ee7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2202      	movs	r2, #2
 800ee80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	699b      	ldr	r3, [r3, #24]
 800ee88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d003      	beq.n	800ee98 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f000 fac5 	bl	800f420 <HAL_TIM_IC_CaptureCallback>
 800ee96:	e005      	b.n	800eea4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f7f2 fb0b 	bl	80014b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f000 fac8 	bl	800f434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2200      	movs	r2, #0
 800eea8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	f003 0308 	and.w	r3, r3, #8
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d020      	beq.n	800eef6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	f003 0308 	and.w	r3, r3, #8
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d01b      	beq.n	800eef6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	f06f 0208 	mvn.w	r2, #8
 800eec6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2204      	movs	r2, #4
 800eecc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	69db      	ldr	r3, [r3, #28]
 800eed4:	f003 0303 	and.w	r3, r3, #3
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d003      	beq.n	800eee4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f000 fa9f 	bl	800f420 <HAL_TIM_IC_CaptureCallback>
 800eee2:	e005      	b.n	800eef0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f7f2 fae5 	bl	80014b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f000 faa2 	bl	800f434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2200      	movs	r2, #0
 800eef4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	f003 0310 	and.w	r3, r3, #16
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d020      	beq.n	800ef42 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	f003 0310 	and.w	r3, r3, #16
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d01b      	beq.n	800ef42 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	f06f 0210 	mvn.w	r2, #16
 800ef12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2208      	movs	r2, #8
 800ef18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	69db      	ldr	r3, [r3, #28]
 800ef20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d003      	beq.n	800ef30 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f000 fa79 	bl	800f420 <HAL_TIM_IC_CaptureCallback>
 800ef2e:	e005      	b.n	800ef3c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f7f2 fabf 	bl	80014b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f000 fa7c 	bl	800f434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2200      	movs	r2, #0
 800ef40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	f003 0301 	and.w	r3, r3, #1
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d00c      	beq.n	800ef66 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	f003 0301 	and.w	r3, r3, #1
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d007      	beq.n	800ef66 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	f06f 0201 	mvn.w	r2, #1
 800ef5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ef60:	6878      	ldr	r0, [r7, #4]
 800ef62:	f7f3 f90d 	bl	8002180 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d104      	bne.n	800ef7a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d00c      	beq.n	800ef94 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d007      	beq.n	800ef94 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800ef8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f000 ffba 	bl	800ff08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d00c      	beq.n	800efb8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d007      	beq.n	800efb8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800efb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f000 ffb2 	bl	800ff1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d00c      	beq.n	800efdc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d007      	beq.n	800efdc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800efd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	f000 fa36 	bl	800f448 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	f003 0320 	and.w	r3, r3, #32
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d00c      	beq.n	800f000 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	f003 0320 	and.w	r3, r3, #32
 800efec:	2b00      	cmp	r3, #0
 800efee:	d007      	beq.n	800f000 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	f06f 0220 	mvn.w	r2, #32
 800eff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f000 ff7a 	bl	800fef4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f000:	bf00      	nop
 800f002:	3710      	adds	r7, #16
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b086      	sub	sp, #24
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	60f8      	str	r0, [r7, #12]
 800f010:	60b9      	str	r1, [r7, #8]
 800f012:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f014:	2300      	movs	r3, #0
 800f016:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f01e:	2b01      	cmp	r3, #1
 800f020:	d101      	bne.n	800f026 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f022:	2302      	movs	r3, #2
 800f024:	e0ff      	b.n	800f226 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	2201      	movs	r2, #1
 800f02a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2b14      	cmp	r3, #20
 800f032:	f200 80f0 	bhi.w	800f216 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f036:	a201      	add	r2, pc, #4	; (adr r2, 800f03c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f03c:	0800f091 	.word	0x0800f091
 800f040:	0800f217 	.word	0x0800f217
 800f044:	0800f217 	.word	0x0800f217
 800f048:	0800f217 	.word	0x0800f217
 800f04c:	0800f0d1 	.word	0x0800f0d1
 800f050:	0800f217 	.word	0x0800f217
 800f054:	0800f217 	.word	0x0800f217
 800f058:	0800f217 	.word	0x0800f217
 800f05c:	0800f113 	.word	0x0800f113
 800f060:	0800f217 	.word	0x0800f217
 800f064:	0800f217 	.word	0x0800f217
 800f068:	0800f217 	.word	0x0800f217
 800f06c:	0800f153 	.word	0x0800f153
 800f070:	0800f217 	.word	0x0800f217
 800f074:	0800f217 	.word	0x0800f217
 800f078:	0800f217 	.word	0x0800f217
 800f07c:	0800f195 	.word	0x0800f195
 800f080:	0800f217 	.word	0x0800f217
 800f084:	0800f217 	.word	0x0800f217
 800f088:	0800f217 	.word	0x0800f217
 800f08c:	0800f1d5 	.word	0x0800f1d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	68b9      	ldr	r1, [r7, #8]
 800f096:	4618      	mov	r0, r3
 800f098:	f000 fa86 	bl	800f5a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	699a      	ldr	r2, [r3, #24]
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	f042 0208 	orr.w	r2, r2, #8
 800f0aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	699a      	ldr	r2, [r3, #24]
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	f022 0204 	bic.w	r2, r2, #4
 800f0ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	6999      	ldr	r1, [r3, #24]
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	691a      	ldr	r2, [r3, #16]
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	430a      	orrs	r2, r1
 800f0cc:	619a      	str	r2, [r3, #24]
      break;
 800f0ce:	e0a5      	b.n	800f21c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	68b9      	ldr	r1, [r7, #8]
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f000 faf6 	bl	800f6c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	699a      	ldr	r2, [r3, #24]
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f0ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	699a      	ldr	r2, [r3, #24]
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f0fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	6999      	ldr	r1, [r3, #24]
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	691b      	ldr	r3, [r3, #16]
 800f106:	021a      	lsls	r2, r3, #8
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	430a      	orrs	r2, r1
 800f10e:	619a      	str	r2, [r3, #24]
      break;
 800f110:	e084      	b.n	800f21c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	68b9      	ldr	r1, [r7, #8]
 800f118:	4618      	mov	r0, r3
 800f11a:	f000 fb5f 	bl	800f7dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	69da      	ldr	r2, [r3, #28]
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	f042 0208 	orr.w	r2, r2, #8
 800f12c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	69da      	ldr	r2, [r3, #28]
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	f022 0204 	bic.w	r2, r2, #4
 800f13c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	69d9      	ldr	r1, [r3, #28]
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	691a      	ldr	r2, [r3, #16]
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	430a      	orrs	r2, r1
 800f14e:	61da      	str	r2, [r3, #28]
      break;
 800f150:	e064      	b.n	800f21c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	68b9      	ldr	r1, [r7, #8]
 800f158:	4618      	mov	r0, r3
 800f15a:	f000 fbc7 	bl	800f8ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	69da      	ldr	r2, [r3, #28]
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f16c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	69da      	ldr	r2, [r3, #28]
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f17c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	69d9      	ldr	r1, [r3, #28]
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	691b      	ldr	r3, [r3, #16]
 800f188:	021a      	lsls	r2, r3, #8
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	430a      	orrs	r2, r1
 800f190:	61da      	str	r2, [r3, #28]
      break;
 800f192:	e043      	b.n	800f21c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	68b9      	ldr	r1, [r7, #8]
 800f19a:	4618      	mov	r0, r3
 800f19c:	f000 fc10 	bl	800f9c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	f042 0208 	orr.w	r2, r2, #8
 800f1ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	f022 0204 	bic.w	r2, r2, #4
 800f1be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	691a      	ldr	r2, [r3, #16]
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	430a      	orrs	r2, r1
 800f1d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f1d2:	e023      	b.n	800f21c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	68b9      	ldr	r1, [r7, #8]
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f000 fc54 	bl	800fa88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f1ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f1fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	691b      	ldr	r3, [r3, #16]
 800f20a:	021a      	lsls	r2, r3, #8
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	430a      	orrs	r2, r1
 800f212:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f214:	e002      	b.n	800f21c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f216:	2301      	movs	r3, #1
 800f218:	75fb      	strb	r3, [r7, #23]
      break;
 800f21a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	2200      	movs	r2, #0
 800f220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f224:	7dfb      	ldrb	r3, [r7, #23]
}
 800f226:	4618      	mov	r0, r3
 800f228:	3718      	adds	r7, #24
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}
 800f22e:	bf00      	nop

0800f230 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b084      	sub	sp, #16
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f23a:	2300      	movs	r3, #0
 800f23c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f244:	2b01      	cmp	r3, #1
 800f246:	d101      	bne.n	800f24c <HAL_TIM_ConfigClockSource+0x1c>
 800f248:	2302      	movs	r3, #2
 800f24a:	e0dc      	b.n	800f406 <HAL_TIM_ConfigClockSource+0x1d6>
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2201      	movs	r2, #1
 800f250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2202      	movs	r2, #2
 800f258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	689b      	ldr	r3, [r3, #8]
 800f262:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f264:	68ba      	ldr	r2, [r7, #8]
 800f266:	4b6a      	ldr	r3, [pc, #424]	; (800f410 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f268:	4013      	ands	r3, r2
 800f26a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f272:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	68ba      	ldr	r2, [r7, #8]
 800f27a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	4a64      	ldr	r2, [pc, #400]	; (800f414 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f282:	4293      	cmp	r3, r2
 800f284:	f000 80a9 	beq.w	800f3da <HAL_TIM_ConfigClockSource+0x1aa>
 800f288:	4a62      	ldr	r2, [pc, #392]	; (800f414 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f28a:	4293      	cmp	r3, r2
 800f28c:	f200 80ae 	bhi.w	800f3ec <HAL_TIM_ConfigClockSource+0x1bc>
 800f290:	4a61      	ldr	r2, [pc, #388]	; (800f418 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f292:	4293      	cmp	r3, r2
 800f294:	f000 80a1 	beq.w	800f3da <HAL_TIM_ConfigClockSource+0x1aa>
 800f298:	4a5f      	ldr	r2, [pc, #380]	; (800f418 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f29a:	4293      	cmp	r3, r2
 800f29c:	f200 80a6 	bhi.w	800f3ec <HAL_TIM_ConfigClockSource+0x1bc>
 800f2a0:	4a5e      	ldr	r2, [pc, #376]	; (800f41c <HAL_TIM_ConfigClockSource+0x1ec>)
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	f000 8099 	beq.w	800f3da <HAL_TIM_ConfigClockSource+0x1aa>
 800f2a8:	4a5c      	ldr	r2, [pc, #368]	; (800f41c <HAL_TIM_ConfigClockSource+0x1ec>)
 800f2aa:	4293      	cmp	r3, r2
 800f2ac:	f200 809e 	bhi.w	800f3ec <HAL_TIM_ConfigClockSource+0x1bc>
 800f2b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f2b4:	f000 8091 	beq.w	800f3da <HAL_TIM_ConfigClockSource+0x1aa>
 800f2b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f2bc:	f200 8096 	bhi.w	800f3ec <HAL_TIM_ConfigClockSource+0x1bc>
 800f2c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f2c4:	f000 8089 	beq.w	800f3da <HAL_TIM_ConfigClockSource+0x1aa>
 800f2c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f2cc:	f200 808e 	bhi.w	800f3ec <HAL_TIM_ConfigClockSource+0x1bc>
 800f2d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f2d4:	d03e      	beq.n	800f354 <HAL_TIM_ConfigClockSource+0x124>
 800f2d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f2da:	f200 8087 	bhi.w	800f3ec <HAL_TIM_ConfigClockSource+0x1bc>
 800f2de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2e2:	f000 8086 	beq.w	800f3f2 <HAL_TIM_ConfigClockSource+0x1c2>
 800f2e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2ea:	d87f      	bhi.n	800f3ec <HAL_TIM_ConfigClockSource+0x1bc>
 800f2ec:	2b70      	cmp	r3, #112	; 0x70
 800f2ee:	d01a      	beq.n	800f326 <HAL_TIM_ConfigClockSource+0xf6>
 800f2f0:	2b70      	cmp	r3, #112	; 0x70
 800f2f2:	d87b      	bhi.n	800f3ec <HAL_TIM_ConfigClockSource+0x1bc>
 800f2f4:	2b60      	cmp	r3, #96	; 0x60
 800f2f6:	d050      	beq.n	800f39a <HAL_TIM_ConfigClockSource+0x16a>
 800f2f8:	2b60      	cmp	r3, #96	; 0x60
 800f2fa:	d877      	bhi.n	800f3ec <HAL_TIM_ConfigClockSource+0x1bc>
 800f2fc:	2b50      	cmp	r3, #80	; 0x50
 800f2fe:	d03c      	beq.n	800f37a <HAL_TIM_ConfigClockSource+0x14a>
 800f300:	2b50      	cmp	r3, #80	; 0x50
 800f302:	d873      	bhi.n	800f3ec <HAL_TIM_ConfigClockSource+0x1bc>
 800f304:	2b40      	cmp	r3, #64	; 0x40
 800f306:	d058      	beq.n	800f3ba <HAL_TIM_ConfigClockSource+0x18a>
 800f308:	2b40      	cmp	r3, #64	; 0x40
 800f30a:	d86f      	bhi.n	800f3ec <HAL_TIM_ConfigClockSource+0x1bc>
 800f30c:	2b30      	cmp	r3, #48	; 0x30
 800f30e:	d064      	beq.n	800f3da <HAL_TIM_ConfigClockSource+0x1aa>
 800f310:	2b30      	cmp	r3, #48	; 0x30
 800f312:	d86b      	bhi.n	800f3ec <HAL_TIM_ConfigClockSource+0x1bc>
 800f314:	2b20      	cmp	r3, #32
 800f316:	d060      	beq.n	800f3da <HAL_TIM_ConfigClockSource+0x1aa>
 800f318:	2b20      	cmp	r3, #32
 800f31a:	d867      	bhi.n	800f3ec <HAL_TIM_ConfigClockSource+0x1bc>
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d05c      	beq.n	800f3da <HAL_TIM_ConfigClockSource+0x1aa>
 800f320:	2b10      	cmp	r3, #16
 800f322:	d05a      	beq.n	800f3da <HAL_TIM_ConfigClockSource+0x1aa>
 800f324:	e062      	b.n	800f3ec <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6818      	ldr	r0, [r3, #0]
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	6899      	ldr	r1, [r3, #8]
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	685a      	ldr	r2, [r3, #4]
 800f332:	683b      	ldr	r3, [r7, #0]
 800f334:	68db      	ldr	r3, [r3, #12]
 800f336:	f000 fc8b 	bl	800fc50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	689b      	ldr	r3, [r3, #8]
 800f340:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f348:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	68ba      	ldr	r2, [r7, #8]
 800f350:	609a      	str	r2, [r3, #8]
      break;
 800f352:	e04f      	b.n	800f3f4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6818      	ldr	r0, [r3, #0]
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	6899      	ldr	r1, [r3, #8]
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	685a      	ldr	r2, [r3, #4]
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	68db      	ldr	r3, [r3, #12]
 800f364:	f000 fc74 	bl	800fc50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	689a      	ldr	r2, [r3, #8]
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f376:	609a      	str	r2, [r3, #8]
      break;
 800f378:	e03c      	b.n	800f3f4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6818      	ldr	r0, [r3, #0]
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	6859      	ldr	r1, [r3, #4]
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	68db      	ldr	r3, [r3, #12]
 800f386:	461a      	mov	r2, r3
 800f388:	f000 fbe4 	bl	800fb54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	2150      	movs	r1, #80	; 0x50
 800f392:	4618      	mov	r0, r3
 800f394:	f000 fc3e 	bl	800fc14 <TIM_ITRx_SetConfig>
      break;
 800f398:	e02c      	b.n	800f3f4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6818      	ldr	r0, [r3, #0]
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	6859      	ldr	r1, [r3, #4]
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	68db      	ldr	r3, [r3, #12]
 800f3a6:	461a      	mov	r2, r3
 800f3a8:	f000 fc03 	bl	800fbb2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	2160      	movs	r1, #96	; 0x60
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f000 fc2e 	bl	800fc14 <TIM_ITRx_SetConfig>
      break;
 800f3b8:	e01c      	b.n	800f3f4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6818      	ldr	r0, [r3, #0]
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	6859      	ldr	r1, [r3, #4]
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	68db      	ldr	r3, [r3, #12]
 800f3c6:	461a      	mov	r2, r3
 800f3c8:	f000 fbc4 	bl	800fb54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	2140      	movs	r1, #64	; 0x40
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f000 fc1e 	bl	800fc14 <TIM_ITRx_SetConfig>
      break;
 800f3d8:	e00c      	b.n	800f3f4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681a      	ldr	r2, [r3, #0]
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	4619      	mov	r1, r3
 800f3e4:	4610      	mov	r0, r2
 800f3e6:	f000 fc15 	bl	800fc14 <TIM_ITRx_SetConfig>
      break;
 800f3ea:	e003      	b.n	800f3f4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f3ec:	2301      	movs	r3, #1
 800f3ee:	73fb      	strb	r3, [r7, #15]
      break;
 800f3f0:	e000      	b.n	800f3f4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f3f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2201      	movs	r2, #1
 800f3f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2200      	movs	r2, #0
 800f400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f404:	7bfb      	ldrb	r3, [r7, #15]
}
 800f406:	4618      	mov	r0, r3
 800f408:	3710      	adds	r7, #16
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}
 800f40e:	bf00      	nop
 800f410:	ffceff88 	.word	0xffceff88
 800f414:	00100040 	.word	0x00100040
 800f418:	00100030 	.word	0x00100030
 800f41c:	00100020 	.word	0x00100020

0800f420 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f420:	b480      	push	{r7}
 800f422:	b083      	sub	sp, #12
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f428:	bf00      	nop
 800f42a:	370c      	adds	r7, #12
 800f42c:	46bd      	mov	sp, r7
 800f42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f432:	4770      	bx	lr

0800f434 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f434:	b480      	push	{r7}
 800f436:	b083      	sub	sp, #12
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f43c:	bf00      	nop
 800f43e:	370c      	adds	r7, #12
 800f440:	46bd      	mov	sp, r7
 800f442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f446:	4770      	bx	lr

0800f448 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f448:	b480      	push	{r7}
 800f44a:	b083      	sub	sp, #12
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f450:	bf00      	nop
 800f452:	370c      	adds	r7, #12
 800f454:	46bd      	mov	sp, r7
 800f456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45a:	4770      	bx	lr

0800f45c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f45c:	b480      	push	{r7}
 800f45e:	b085      	sub	sp, #20
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
 800f464:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	4a46      	ldr	r2, [pc, #280]	; (800f588 <TIM_Base_SetConfig+0x12c>)
 800f470:	4293      	cmp	r3, r2
 800f472:	d013      	beq.n	800f49c <TIM_Base_SetConfig+0x40>
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f47a:	d00f      	beq.n	800f49c <TIM_Base_SetConfig+0x40>
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	4a43      	ldr	r2, [pc, #268]	; (800f58c <TIM_Base_SetConfig+0x130>)
 800f480:	4293      	cmp	r3, r2
 800f482:	d00b      	beq.n	800f49c <TIM_Base_SetConfig+0x40>
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	4a42      	ldr	r2, [pc, #264]	; (800f590 <TIM_Base_SetConfig+0x134>)
 800f488:	4293      	cmp	r3, r2
 800f48a:	d007      	beq.n	800f49c <TIM_Base_SetConfig+0x40>
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	4a41      	ldr	r2, [pc, #260]	; (800f594 <TIM_Base_SetConfig+0x138>)
 800f490:	4293      	cmp	r3, r2
 800f492:	d003      	beq.n	800f49c <TIM_Base_SetConfig+0x40>
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	4a40      	ldr	r2, [pc, #256]	; (800f598 <TIM_Base_SetConfig+0x13c>)
 800f498:	4293      	cmp	r3, r2
 800f49a:	d108      	bne.n	800f4ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	685b      	ldr	r3, [r3, #4]
 800f4a8:	68fa      	ldr	r2, [r7, #12]
 800f4aa:	4313      	orrs	r3, r2
 800f4ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	4a35      	ldr	r2, [pc, #212]	; (800f588 <TIM_Base_SetConfig+0x12c>)
 800f4b2:	4293      	cmp	r3, r2
 800f4b4:	d01f      	beq.n	800f4f6 <TIM_Base_SetConfig+0x9a>
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4bc:	d01b      	beq.n	800f4f6 <TIM_Base_SetConfig+0x9a>
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	4a32      	ldr	r2, [pc, #200]	; (800f58c <TIM_Base_SetConfig+0x130>)
 800f4c2:	4293      	cmp	r3, r2
 800f4c4:	d017      	beq.n	800f4f6 <TIM_Base_SetConfig+0x9a>
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	4a31      	ldr	r2, [pc, #196]	; (800f590 <TIM_Base_SetConfig+0x134>)
 800f4ca:	4293      	cmp	r3, r2
 800f4cc:	d013      	beq.n	800f4f6 <TIM_Base_SetConfig+0x9a>
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	4a30      	ldr	r2, [pc, #192]	; (800f594 <TIM_Base_SetConfig+0x138>)
 800f4d2:	4293      	cmp	r3, r2
 800f4d4:	d00f      	beq.n	800f4f6 <TIM_Base_SetConfig+0x9a>
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	4a2f      	ldr	r2, [pc, #188]	; (800f598 <TIM_Base_SetConfig+0x13c>)
 800f4da:	4293      	cmp	r3, r2
 800f4dc:	d00b      	beq.n	800f4f6 <TIM_Base_SetConfig+0x9a>
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	4a2e      	ldr	r2, [pc, #184]	; (800f59c <TIM_Base_SetConfig+0x140>)
 800f4e2:	4293      	cmp	r3, r2
 800f4e4:	d007      	beq.n	800f4f6 <TIM_Base_SetConfig+0x9a>
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	4a2d      	ldr	r2, [pc, #180]	; (800f5a0 <TIM_Base_SetConfig+0x144>)
 800f4ea:	4293      	cmp	r3, r2
 800f4ec:	d003      	beq.n	800f4f6 <TIM_Base_SetConfig+0x9a>
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	4a2c      	ldr	r2, [pc, #176]	; (800f5a4 <TIM_Base_SetConfig+0x148>)
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	d108      	bne.n	800f508 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f4fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	68db      	ldr	r3, [r3, #12]
 800f502:	68fa      	ldr	r2, [r7, #12]
 800f504:	4313      	orrs	r3, r2
 800f506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	695b      	ldr	r3, [r3, #20]
 800f512:	4313      	orrs	r3, r2
 800f514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	68fa      	ldr	r2, [r7, #12]
 800f51a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	689a      	ldr	r2, [r3, #8]
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	681a      	ldr	r2, [r3, #0]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	4a16      	ldr	r2, [pc, #88]	; (800f588 <TIM_Base_SetConfig+0x12c>)
 800f530:	4293      	cmp	r3, r2
 800f532:	d00f      	beq.n	800f554 <TIM_Base_SetConfig+0xf8>
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	4a18      	ldr	r2, [pc, #96]	; (800f598 <TIM_Base_SetConfig+0x13c>)
 800f538:	4293      	cmp	r3, r2
 800f53a:	d00b      	beq.n	800f554 <TIM_Base_SetConfig+0xf8>
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	4a17      	ldr	r2, [pc, #92]	; (800f59c <TIM_Base_SetConfig+0x140>)
 800f540:	4293      	cmp	r3, r2
 800f542:	d007      	beq.n	800f554 <TIM_Base_SetConfig+0xf8>
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	4a16      	ldr	r2, [pc, #88]	; (800f5a0 <TIM_Base_SetConfig+0x144>)
 800f548:	4293      	cmp	r3, r2
 800f54a:	d003      	beq.n	800f554 <TIM_Base_SetConfig+0xf8>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	4a15      	ldr	r2, [pc, #84]	; (800f5a4 <TIM_Base_SetConfig+0x148>)
 800f550:	4293      	cmp	r3, r2
 800f552:	d103      	bne.n	800f55c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	691a      	ldr	r2, [r3, #16]
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2201      	movs	r2, #1
 800f560:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	691b      	ldr	r3, [r3, #16]
 800f566:	f003 0301 	and.w	r3, r3, #1
 800f56a:	2b01      	cmp	r3, #1
 800f56c:	d105      	bne.n	800f57a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	691b      	ldr	r3, [r3, #16]
 800f572:	f023 0201 	bic.w	r2, r3, #1
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	611a      	str	r2, [r3, #16]
  }
}
 800f57a:	bf00      	nop
 800f57c:	3714      	adds	r7, #20
 800f57e:	46bd      	mov	sp, r7
 800f580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f584:	4770      	bx	lr
 800f586:	bf00      	nop
 800f588:	40010000 	.word	0x40010000
 800f58c:	40000400 	.word	0x40000400
 800f590:	40000800 	.word	0x40000800
 800f594:	40000c00 	.word	0x40000c00
 800f598:	40010400 	.word	0x40010400
 800f59c:	40014000 	.word	0x40014000
 800f5a0:	40014400 	.word	0x40014400
 800f5a4:	40014800 	.word	0x40014800

0800f5a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f5a8:	b480      	push	{r7}
 800f5aa:	b087      	sub	sp, #28
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
 800f5b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6a1b      	ldr	r3, [r3, #32]
 800f5b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	6a1b      	ldr	r3, [r3, #32]
 800f5bc:	f023 0201 	bic.w	r2, r3, #1
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	685b      	ldr	r3, [r3, #4]
 800f5c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	699b      	ldr	r3, [r3, #24]
 800f5ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f5d0:	68fa      	ldr	r2, [r7, #12]
 800f5d2:	4b37      	ldr	r3, [pc, #220]	; (800f6b0 <TIM_OC1_SetConfig+0x108>)
 800f5d4:	4013      	ands	r3, r2
 800f5d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	f023 0303 	bic.w	r3, r3, #3
 800f5de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	68fa      	ldr	r2, [r7, #12]
 800f5e6:	4313      	orrs	r3, r2
 800f5e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	f023 0302 	bic.w	r3, r3, #2
 800f5f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	689b      	ldr	r3, [r3, #8]
 800f5f6:	697a      	ldr	r2, [r7, #20]
 800f5f8:	4313      	orrs	r3, r2
 800f5fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	4a2d      	ldr	r2, [pc, #180]	; (800f6b4 <TIM_OC1_SetConfig+0x10c>)
 800f600:	4293      	cmp	r3, r2
 800f602:	d00f      	beq.n	800f624 <TIM_OC1_SetConfig+0x7c>
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	4a2c      	ldr	r2, [pc, #176]	; (800f6b8 <TIM_OC1_SetConfig+0x110>)
 800f608:	4293      	cmp	r3, r2
 800f60a:	d00b      	beq.n	800f624 <TIM_OC1_SetConfig+0x7c>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	4a2b      	ldr	r2, [pc, #172]	; (800f6bc <TIM_OC1_SetConfig+0x114>)
 800f610:	4293      	cmp	r3, r2
 800f612:	d007      	beq.n	800f624 <TIM_OC1_SetConfig+0x7c>
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	4a2a      	ldr	r2, [pc, #168]	; (800f6c0 <TIM_OC1_SetConfig+0x118>)
 800f618:	4293      	cmp	r3, r2
 800f61a:	d003      	beq.n	800f624 <TIM_OC1_SetConfig+0x7c>
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	4a29      	ldr	r2, [pc, #164]	; (800f6c4 <TIM_OC1_SetConfig+0x11c>)
 800f620:	4293      	cmp	r3, r2
 800f622:	d10c      	bne.n	800f63e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	f023 0308 	bic.w	r3, r3, #8
 800f62a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	68db      	ldr	r3, [r3, #12]
 800f630:	697a      	ldr	r2, [r7, #20]
 800f632:	4313      	orrs	r3, r2
 800f634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	f023 0304 	bic.w	r3, r3, #4
 800f63c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	4a1c      	ldr	r2, [pc, #112]	; (800f6b4 <TIM_OC1_SetConfig+0x10c>)
 800f642:	4293      	cmp	r3, r2
 800f644:	d00f      	beq.n	800f666 <TIM_OC1_SetConfig+0xbe>
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	4a1b      	ldr	r2, [pc, #108]	; (800f6b8 <TIM_OC1_SetConfig+0x110>)
 800f64a:	4293      	cmp	r3, r2
 800f64c:	d00b      	beq.n	800f666 <TIM_OC1_SetConfig+0xbe>
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	4a1a      	ldr	r2, [pc, #104]	; (800f6bc <TIM_OC1_SetConfig+0x114>)
 800f652:	4293      	cmp	r3, r2
 800f654:	d007      	beq.n	800f666 <TIM_OC1_SetConfig+0xbe>
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	4a19      	ldr	r2, [pc, #100]	; (800f6c0 <TIM_OC1_SetConfig+0x118>)
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d003      	beq.n	800f666 <TIM_OC1_SetConfig+0xbe>
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	4a18      	ldr	r2, [pc, #96]	; (800f6c4 <TIM_OC1_SetConfig+0x11c>)
 800f662:	4293      	cmp	r3, r2
 800f664:	d111      	bne.n	800f68a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f666:	693b      	ldr	r3, [r7, #16]
 800f668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f66c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	695b      	ldr	r3, [r3, #20]
 800f67a:	693a      	ldr	r2, [r7, #16]
 800f67c:	4313      	orrs	r3, r2
 800f67e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	699b      	ldr	r3, [r3, #24]
 800f684:	693a      	ldr	r2, [r7, #16]
 800f686:	4313      	orrs	r3, r2
 800f688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	693a      	ldr	r2, [r7, #16]
 800f68e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	68fa      	ldr	r2, [r7, #12]
 800f694:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	685a      	ldr	r2, [r3, #4]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	697a      	ldr	r2, [r7, #20]
 800f6a2:	621a      	str	r2, [r3, #32]
}
 800f6a4:	bf00      	nop
 800f6a6:	371c      	adds	r7, #28
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ae:	4770      	bx	lr
 800f6b0:	fffeff8f 	.word	0xfffeff8f
 800f6b4:	40010000 	.word	0x40010000
 800f6b8:	40010400 	.word	0x40010400
 800f6bc:	40014000 	.word	0x40014000
 800f6c0:	40014400 	.word	0x40014400
 800f6c4:	40014800 	.word	0x40014800

0800f6c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	b087      	sub	sp, #28
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
 800f6d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	6a1b      	ldr	r3, [r3, #32]
 800f6d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	6a1b      	ldr	r3, [r3, #32]
 800f6dc:	f023 0210 	bic.w	r2, r3, #16
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	685b      	ldr	r3, [r3, #4]
 800f6e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	699b      	ldr	r3, [r3, #24]
 800f6ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f6f0:	68fa      	ldr	r2, [r7, #12]
 800f6f2:	4b34      	ldr	r3, [pc, #208]	; (800f7c4 <TIM_OC2_SetConfig+0xfc>)
 800f6f4:	4013      	ands	r3, r2
 800f6f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f6fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	021b      	lsls	r3, r3, #8
 800f706:	68fa      	ldr	r2, [r7, #12]
 800f708:	4313      	orrs	r3, r2
 800f70a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f70c:	697b      	ldr	r3, [r7, #20]
 800f70e:	f023 0320 	bic.w	r3, r3, #32
 800f712:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	689b      	ldr	r3, [r3, #8]
 800f718:	011b      	lsls	r3, r3, #4
 800f71a:	697a      	ldr	r2, [r7, #20]
 800f71c:	4313      	orrs	r3, r2
 800f71e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	4a29      	ldr	r2, [pc, #164]	; (800f7c8 <TIM_OC2_SetConfig+0x100>)
 800f724:	4293      	cmp	r3, r2
 800f726:	d003      	beq.n	800f730 <TIM_OC2_SetConfig+0x68>
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	4a28      	ldr	r2, [pc, #160]	; (800f7cc <TIM_OC2_SetConfig+0x104>)
 800f72c:	4293      	cmp	r3, r2
 800f72e:	d10d      	bne.n	800f74c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	68db      	ldr	r3, [r3, #12]
 800f73c:	011b      	lsls	r3, r3, #4
 800f73e:	697a      	ldr	r2, [r7, #20]
 800f740:	4313      	orrs	r3, r2
 800f742:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f744:	697b      	ldr	r3, [r7, #20]
 800f746:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f74a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	4a1e      	ldr	r2, [pc, #120]	; (800f7c8 <TIM_OC2_SetConfig+0x100>)
 800f750:	4293      	cmp	r3, r2
 800f752:	d00f      	beq.n	800f774 <TIM_OC2_SetConfig+0xac>
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	4a1d      	ldr	r2, [pc, #116]	; (800f7cc <TIM_OC2_SetConfig+0x104>)
 800f758:	4293      	cmp	r3, r2
 800f75a:	d00b      	beq.n	800f774 <TIM_OC2_SetConfig+0xac>
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	4a1c      	ldr	r2, [pc, #112]	; (800f7d0 <TIM_OC2_SetConfig+0x108>)
 800f760:	4293      	cmp	r3, r2
 800f762:	d007      	beq.n	800f774 <TIM_OC2_SetConfig+0xac>
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	4a1b      	ldr	r2, [pc, #108]	; (800f7d4 <TIM_OC2_SetConfig+0x10c>)
 800f768:	4293      	cmp	r3, r2
 800f76a:	d003      	beq.n	800f774 <TIM_OC2_SetConfig+0xac>
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	4a1a      	ldr	r2, [pc, #104]	; (800f7d8 <TIM_OC2_SetConfig+0x110>)
 800f770:	4293      	cmp	r3, r2
 800f772:	d113      	bne.n	800f79c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f774:	693b      	ldr	r3, [r7, #16]
 800f776:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f77a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f77c:	693b      	ldr	r3, [r7, #16]
 800f77e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f782:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	695b      	ldr	r3, [r3, #20]
 800f788:	009b      	lsls	r3, r3, #2
 800f78a:	693a      	ldr	r2, [r7, #16]
 800f78c:	4313      	orrs	r3, r2
 800f78e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	699b      	ldr	r3, [r3, #24]
 800f794:	009b      	lsls	r3, r3, #2
 800f796:	693a      	ldr	r2, [r7, #16]
 800f798:	4313      	orrs	r3, r2
 800f79a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	693a      	ldr	r2, [r7, #16]
 800f7a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	68fa      	ldr	r2, [r7, #12]
 800f7a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	685a      	ldr	r2, [r3, #4]
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	697a      	ldr	r2, [r7, #20]
 800f7b4:	621a      	str	r2, [r3, #32]
}
 800f7b6:	bf00      	nop
 800f7b8:	371c      	adds	r7, #28
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c0:	4770      	bx	lr
 800f7c2:	bf00      	nop
 800f7c4:	feff8fff 	.word	0xfeff8fff
 800f7c8:	40010000 	.word	0x40010000
 800f7cc:	40010400 	.word	0x40010400
 800f7d0:	40014000 	.word	0x40014000
 800f7d4:	40014400 	.word	0x40014400
 800f7d8:	40014800 	.word	0x40014800

0800f7dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f7dc:	b480      	push	{r7}
 800f7de:	b087      	sub	sp, #28
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
 800f7e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	6a1b      	ldr	r3, [r3, #32]
 800f7ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	6a1b      	ldr	r3, [r3, #32]
 800f7f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	685b      	ldr	r3, [r3, #4]
 800f7fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	69db      	ldr	r3, [r3, #28]
 800f802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f804:	68fa      	ldr	r2, [r7, #12]
 800f806:	4b33      	ldr	r3, [pc, #204]	; (800f8d4 <TIM_OC3_SetConfig+0xf8>)
 800f808:	4013      	ands	r3, r2
 800f80a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	f023 0303 	bic.w	r3, r3, #3
 800f812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	68fa      	ldr	r2, [r7, #12]
 800f81a:	4313      	orrs	r3, r2
 800f81c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f824:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	689b      	ldr	r3, [r3, #8]
 800f82a:	021b      	lsls	r3, r3, #8
 800f82c:	697a      	ldr	r2, [r7, #20]
 800f82e:	4313      	orrs	r3, r2
 800f830:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	4a28      	ldr	r2, [pc, #160]	; (800f8d8 <TIM_OC3_SetConfig+0xfc>)
 800f836:	4293      	cmp	r3, r2
 800f838:	d003      	beq.n	800f842 <TIM_OC3_SetConfig+0x66>
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	4a27      	ldr	r2, [pc, #156]	; (800f8dc <TIM_OC3_SetConfig+0x100>)
 800f83e:	4293      	cmp	r3, r2
 800f840:	d10d      	bne.n	800f85e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f848:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	68db      	ldr	r3, [r3, #12]
 800f84e:	021b      	lsls	r3, r3, #8
 800f850:	697a      	ldr	r2, [r7, #20]
 800f852:	4313      	orrs	r3, r2
 800f854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f85c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	4a1d      	ldr	r2, [pc, #116]	; (800f8d8 <TIM_OC3_SetConfig+0xfc>)
 800f862:	4293      	cmp	r3, r2
 800f864:	d00f      	beq.n	800f886 <TIM_OC3_SetConfig+0xaa>
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	4a1c      	ldr	r2, [pc, #112]	; (800f8dc <TIM_OC3_SetConfig+0x100>)
 800f86a:	4293      	cmp	r3, r2
 800f86c:	d00b      	beq.n	800f886 <TIM_OC3_SetConfig+0xaa>
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	4a1b      	ldr	r2, [pc, #108]	; (800f8e0 <TIM_OC3_SetConfig+0x104>)
 800f872:	4293      	cmp	r3, r2
 800f874:	d007      	beq.n	800f886 <TIM_OC3_SetConfig+0xaa>
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	4a1a      	ldr	r2, [pc, #104]	; (800f8e4 <TIM_OC3_SetConfig+0x108>)
 800f87a:	4293      	cmp	r3, r2
 800f87c:	d003      	beq.n	800f886 <TIM_OC3_SetConfig+0xaa>
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	4a19      	ldr	r2, [pc, #100]	; (800f8e8 <TIM_OC3_SetConfig+0x10c>)
 800f882:	4293      	cmp	r3, r2
 800f884:	d113      	bne.n	800f8ae <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f886:	693b      	ldr	r3, [r7, #16]
 800f888:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f88c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f88e:	693b      	ldr	r3, [r7, #16]
 800f890:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f894:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	695b      	ldr	r3, [r3, #20]
 800f89a:	011b      	lsls	r3, r3, #4
 800f89c:	693a      	ldr	r2, [r7, #16]
 800f89e:	4313      	orrs	r3, r2
 800f8a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	699b      	ldr	r3, [r3, #24]
 800f8a6:	011b      	lsls	r3, r3, #4
 800f8a8:	693a      	ldr	r2, [r7, #16]
 800f8aa:	4313      	orrs	r3, r2
 800f8ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	693a      	ldr	r2, [r7, #16]
 800f8b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	68fa      	ldr	r2, [r7, #12]
 800f8b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	685a      	ldr	r2, [r3, #4]
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	697a      	ldr	r2, [r7, #20]
 800f8c6:	621a      	str	r2, [r3, #32]
}
 800f8c8:	bf00      	nop
 800f8ca:	371c      	adds	r7, #28
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d2:	4770      	bx	lr
 800f8d4:	fffeff8f 	.word	0xfffeff8f
 800f8d8:	40010000 	.word	0x40010000
 800f8dc:	40010400 	.word	0x40010400
 800f8e0:	40014000 	.word	0x40014000
 800f8e4:	40014400 	.word	0x40014400
 800f8e8:	40014800 	.word	0x40014800

0800f8ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f8ec:	b480      	push	{r7}
 800f8ee:	b087      	sub	sp, #28
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
 800f8f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6a1b      	ldr	r3, [r3, #32]
 800f8fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	6a1b      	ldr	r3, [r3, #32]
 800f900:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	685b      	ldr	r3, [r3, #4]
 800f90c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	69db      	ldr	r3, [r3, #28]
 800f912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f914:	68fa      	ldr	r2, [r7, #12]
 800f916:	4b24      	ldr	r3, [pc, #144]	; (800f9a8 <TIM_OC4_SetConfig+0xbc>)
 800f918:	4013      	ands	r3, r2
 800f91a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	021b      	lsls	r3, r3, #8
 800f92a:	68fa      	ldr	r2, [r7, #12]
 800f92c:	4313      	orrs	r3, r2
 800f92e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f936:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	689b      	ldr	r3, [r3, #8]
 800f93c:	031b      	lsls	r3, r3, #12
 800f93e:	693a      	ldr	r2, [r7, #16]
 800f940:	4313      	orrs	r3, r2
 800f942:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	4a19      	ldr	r2, [pc, #100]	; (800f9ac <TIM_OC4_SetConfig+0xc0>)
 800f948:	4293      	cmp	r3, r2
 800f94a:	d00f      	beq.n	800f96c <TIM_OC4_SetConfig+0x80>
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	4a18      	ldr	r2, [pc, #96]	; (800f9b0 <TIM_OC4_SetConfig+0xc4>)
 800f950:	4293      	cmp	r3, r2
 800f952:	d00b      	beq.n	800f96c <TIM_OC4_SetConfig+0x80>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	4a17      	ldr	r2, [pc, #92]	; (800f9b4 <TIM_OC4_SetConfig+0xc8>)
 800f958:	4293      	cmp	r3, r2
 800f95a:	d007      	beq.n	800f96c <TIM_OC4_SetConfig+0x80>
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	4a16      	ldr	r2, [pc, #88]	; (800f9b8 <TIM_OC4_SetConfig+0xcc>)
 800f960:	4293      	cmp	r3, r2
 800f962:	d003      	beq.n	800f96c <TIM_OC4_SetConfig+0x80>
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	4a15      	ldr	r2, [pc, #84]	; (800f9bc <TIM_OC4_SetConfig+0xd0>)
 800f968:	4293      	cmp	r3, r2
 800f96a:	d109      	bne.n	800f980 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f96c:	697b      	ldr	r3, [r7, #20]
 800f96e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f972:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	695b      	ldr	r3, [r3, #20]
 800f978:	019b      	lsls	r3, r3, #6
 800f97a:	697a      	ldr	r2, [r7, #20]
 800f97c:	4313      	orrs	r3, r2
 800f97e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	697a      	ldr	r2, [r7, #20]
 800f984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	68fa      	ldr	r2, [r7, #12]
 800f98a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	685a      	ldr	r2, [r3, #4]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	693a      	ldr	r2, [r7, #16]
 800f998:	621a      	str	r2, [r3, #32]
}
 800f99a:	bf00      	nop
 800f99c:	371c      	adds	r7, #28
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a4:	4770      	bx	lr
 800f9a6:	bf00      	nop
 800f9a8:	feff8fff 	.word	0xfeff8fff
 800f9ac:	40010000 	.word	0x40010000
 800f9b0:	40010400 	.word	0x40010400
 800f9b4:	40014000 	.word	0x40014000
 800f9b8:	40014400 	.word	0x40014400
 800f9bc:	40014800 	.word	0x40014800

0800f9c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f9c0:	b480      	push	{r7}
 800f9c2:	b087      	sub	sp, #28
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
 800f9c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6a1b      	ldr	r3, [r3, #32]
 800f9ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	6a1b      	ldr	r3, [r3, #32]
 800f9d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	685b      	ldr	r3, [r3, #4]
 800f9e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f9e8:	68fa      	ldr	r2, [r7, #12]
 800f9ea:	4b21      	ldr	r3, [pc, #132]	; (800fa70 <TIM_OC5_SetConfig+0xb0>)
 800f9ec:	4013      	ands	r3, r2
 800f9ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	68fa      	ldr	r2, [r7, #12]
 800f9f6:	4313      	orrs	r3, r2
 800f9f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f9fa:	693b      	ldr	r3, [r7, #16]
 800f9fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fa00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	689b      	ldr	r3, [r3, #8]
 800fa06:	041b      	lsls	r3, r3, #16
 800fa08:	693a      	ldr	r2, [r7, #16]
 800fa0a:	4313      	orrs	r3, r2
 800fa0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	4a18      	ldr	r2, [pc, #96]	; (800fa74 <TIM_OC5_SetConfig+0xb4>)
 800fa12:	4293      	cmp	r3, r2
 800fa14:	d00f      	beq.n	800fa36 <TIM_OC5_SetConfig+0x76>
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	4a17      	ldr	r2, [pc, #92]	; (800fa78 <TIM_OC5_SetConfig+0xb8>)
 800fa1a:	4293      	cmp	r3, r2
 800fa1c:	d00b      	beq.n	800fa36 <TIM_OC5_SetConfig+0x76>
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	4a16      	ldr	r2, [pc, #88]	; (800fa7c <TIM_OC5_SetConfig+0xbc>)
 800fa22:	4293      	cmp	r3, r2
 800fa24:	d007      	beq.n	800fa36 <TIM_OC5_SetConfig+0x76>
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	4a15      	ldr	r2, [pc, #84]	; (800fa80 <TIM_OC5_SetConfig+0xc0>)
 800fa2a:	4293      	cmp	r3, r2
 800fa2c:	d003      	beq.n	800fa36 <TIM_OC5_SetConfig+0x76>
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	4a14      	ldr	r2, [pc, #80]	; (800fa84 <TIM_OC5_SetConfig+0xc4>)
 800fa32:	4293      	cmp	r3, r2
 800fa34:	d109      	bne.n	800fa4a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fa3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	695b      	ldr	r3, [r3, #20]
 800fa42:	021b      	lsls	r3, r3, #8
 800fa44:	697a      	ldr	r2, [r7, #20]
 800fa46:	4313      	orrs	r3, r2
 800fa48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	697a      	ldr	r2, [r7, #20]
 800fa4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	68fa      	ldr	r2, [r7, #12]
 800fa54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	685a      	ldr	r2, [r3, #4]
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	693a      	ldr	r2, [r7, #16]
 800fa62:	621a      	str	r2, [r3, #32]
}
 800fa64:	bf00      	nop
 800fa66:	371c      	adds	r7, #28
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6e:	4770      	bx	lr
 800fa70:	fffeff8f 	.word	0xfffeff8f
 800fa74:	40010000 	.word	0x40010000
 800fa78:	40010400 	.word	0x40010400
 800fa7c:	40014000 	.word	0x40014000
 800fa80:	40014400 	.word	0x40014400
 800fa84:	40014800 	.word	0x40014800

0800fa88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fa88:	b480      	push	{r7}
 800fa8a:	b087      	sub	sp, #28
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	6a1b      	ldr	r3, [r3, #32]
 800fa96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	6a1b      	ldr	r3, [r3, #32]
 800fa9c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	685b      	ldr	r3, [r3, #4]
 800faa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800faae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fab0:	68fa      	ldr	r2, [r7, #12]
 800fab2:	4b22      	ldr	r3, [pc, #136]	; (800fb3c <TIM_OC6_SetConfig+0xb4>)
 800fab4:	4013      	ands	r3, r2
 800fab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fab8:	683b      	ldr	r3, [r7, #0]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	021b      	lsls	r3, r3, #8
 800fabe:	68fa      	ldr	r2, [r7, #12]
 800fac0:	4313      	orrs	r3, r2
 800fac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fac4:	693b      	ldr	r3, [r7, #16]
 800fac6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800faca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800facc:	683b      	ldr	r3, [r7, #0]
 800face:	689b      	ldr	r3, [r3, #8]
 800fad0:	051b      	lsls	r3, r3, #20
 800fad2:	693a      	ldr	r2, [r7, #16]
 800fad4:	4313      	orrs	r3, r2
 800fad6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	4a19      	ldr	r2, [pc, #100]	; (800fb40 <TIM_OC6_SetConfig+0xb8>)
 800fadc:	4293      	cmp	r3, r2
 800fade:	d00f      	beq.n	800fb00 <TIM_OC6_SetConfig+0x78>
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	4a18      	ldr	r2, [pc, #96]	; (800fb44 <TIM_OC6_SetConfig+0xbc>)
 800fae4:	4293      	cmp	r3, r2
 800fae6:	d00b      	beq.n	800fb00 <TIM_OC6_SetConfig+0x78>
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	4a17      	ldr	r2, [pc, #92]	; (800fb48 <TIM_OC6_SetConfig+0xc0>)
 800faec:	4293      	cmp	r3, r2
 800faee:	d007      	beq.n	800fb00 <TIM_OC6_SetConfig+0x78>
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	4a16      	ldr	r2, [pc, #88]	; (800fb4c <TIM_OC6_SetConfig+0xc4>)
 800faf4:	4293      	cmp	r3, r2
 800faf6:	d003      	beq.n	800fb00 <TIM_OC6_SetConfig+0x78>
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	4a15      	ldr	r2, [pc, #84]	; (800fb50 <TIM_OC6_SetConfig+0xc8>)
 800fafc:	4293      	cmp	r3, r2
 800fafe:	d109      	bne.n	800fb14 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fb06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	695b      	ldr	r3, [r3, #20]
 800fb0c:	029b      	lsls	r3, r3, #10
 800fb0e:	697a      	ldr	r2, [r7, #20]
 800fb10:	4313      	orrs	r3, r2
 800fb12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	697a      	ldr	r2, [r7, #20]
 800fb18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	68fa      	ldr	r2, [r7, #12]
 800fb1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	685a      	ldr	r2, [r3, #4]
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	693a      	ldr	r2, [r7, #16]
 800fb2c:	621a      	str	r2, [r3, #32]
}
 800fb2e:	bf00      	nop
 800fb30:	371c      	adds	r7, #28
 800fb32:	46bd      	mov	sp, r7
 800fb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb38:	4770      	bx	lr
 800fb3a:	bf00      	nop
 800fb3c:	feff8fff 	.word	0xfeff8fff
 800fb40:	40010000 	.word	0x40010000
 800fb44:	40010400 	.word	0x40010400
 800fb48:	40014000 	.word	0x40014000
 800fb4c:	40014400 	.word	0x40014400
 800fb50:	40014800 	.word	0x40014800

0800fb54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fb54:	b480      	push	{r7}
 800fb56:	b087      	sub	sp, #28
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	60f8      	str	r0, [r7, #12]
 800fb5c:	60b9      	str	r1, [r7, #8]
 800fb5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	6a1b      	ldr	r3, [r3, #32]
 800fb64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	6a1b      	ldr	r3, [r3, #32]
 800fb6a:	f023 0201 	bic.w	r2, r3, #1
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	699b      	ldr	r3, [r3, #24]
 800fb76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fb7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	011b      	lsls	r3, r3, #4
 800fb84:	693a      	ldr	r2, [r7, #16]
 800fb86:	4313      	orrs	r3, r2
 800fb88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	f023 030a 	bic.w	r3, r3, #10
 800fb90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fb92:	697a      	ldr	r2, [r7, #20]
 800fb94:	68bb      	ldr	r3, [r7, #8]
 800fb96:	4313      	orrs	r3, r2
 800fb98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	693a      	ldr	r2, [r7, #16]
 800fb9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	697a      	ldr	r2, [r7, #20]
 800fba4:	621a      	str	r2, [r3, #32]
}
 800fba6:	bf00      	nop
 800fba8:	371c      	adds	r7, #28
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb0:	4770      	bx	lr

0800fbb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fbb2:	b480      	push	{r7}
 800fbb4:	b087      	sub	sp, #28
 800fbb6:	af00      	add	r7, sp, #0
 800fbb8:	60f8      	str	r0, [r7, #12]
 800fbba:	60b9      	str	r1, [r7, #8]
 800fbbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	6a1b      	ldr	r3, [r3, #32]
 800fbc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	6a1b      	ldr	r3, [r3, #32]
 800fbc8:	f023 0210 	bic.w	r2, r3, #16
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	699b      	ldr	r3, [r3, #24]
 800fbd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fbd6:	693b      	ldr	r3, [r7, #16]
 800fbd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fbdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	031b      	lsls	r3, r3, #12
 800fbe2:	693a      	ldr	r2, [r7, #16]
 800fbe4:	4313      	orrs	r3, r2
 800fbe6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fbee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fbf0:	68bb      	ldr	r3, [r7, #8]
 800fbf2:	011b      	lsls	r3, r3, #4
 800fbf4:	697a      	ldr	r2, [r7, #20]
 800fbf6:	4313      	orrs	r3, r2
 800fbf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	693a      	ldr	r2, [r7, #16]
 800fbfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	697a      	ldr	r2, [r7, #20]
 800fc04:	621a      	str	r2, [r3, #32]
}
 800fc06:	bf00      	nop
 800fc08:	371c      	adds	r7, #28
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc10:	4770      	bx	lr
	...

0800fc14 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fc14:	b480      	push	{r7}
 800fc16:	b085      	sub	sp, #20
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	689b      	ldr	r3, [r3, #8]
 800fc22:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fc24:	68fa      	ldr	r2, [r7, #12]
 800fc26:	4b09      	ldr	r3, [pc, #36]	; (800fc4c <TIM_ITRx_SetConfig+0x38>)
 800fc28:	4013      	ands	r3, r2
 800fc2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fc2c:	683a      	ldr	r2, [r7, #0]
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	4313      	orrs	r3, r2
 800fc32:	f043 0307 	orr.w	r3, r3, #7
 800fc36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	68fa      	ldr	r2, [r7, #12]
 800fc3c:	609a      	str	r2, [r3, #8]
}
 800fc3e:	bf00      	nop
 800fc40:	3714      	adds	r7, #20
 800fc42:	46bd      	mov	sp, r7
 800fc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc48:	4770      	bx	lr
 800fc4a:	bf00      	nop
 800fc4c:	ffcfff8f 	.word	0xffcfff8f

0800fc50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fc50:	b480      	push	{r7}
 800fc52:	b087      	sub	sp, #28
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	60f8      	str	r0, [r7, #12]
 800fc58:	60b9      	str	r1, [r7, #8]
 800fc5a:	607a      	str	r2, [r7, #4]
 800fc5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	689b      	ldr	r3, [r3, #8]
 800fc62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fc64:	697b      	ldr	r3, [r7, #20]
 800fc66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fc6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	021a      	lsls	r2, r3, #8
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	431a      	orrs	r2, r3
 800fc74:	68bb      	ldr	r3, [r7, #8]
 800fc76:	4313      	orrs	r3, r2
 800fc78:	697a      	ldr	r2, [r7, #20]
 800fc7a:	4313      	orrs	r3, r2
 800fc7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	697a      	ldr	r2, [r7, #20]
 800fc82:	609a      	str	r2, [r3, #8]
}
 800fc84:	bf00      	nop
 800fc86:	371c      	adds	r7, #28
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8e:	4770      	bx	lr

0800fc90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fc90:	b480      	push	{r7}
 800fc92:	b087      	sub	sp, #28
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	60f8      	str	r0, [r7, #12]
 800fc98:	60b9      	str	r1, [r7, #8]
 800fc9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	f003 031f 	and.w	r3, r3, #31
 800fca2:	2201      	movs	r2, #1
 800fca4:	fa02 f303 	lsl.w	r3, r2, r3
 800fca8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	6a1a      	ldr	r2, [r3, #32]
 800fcae:	697b      	ldr	r3, [r7, #20]
 800fcb0:	43db      	mvns	r3, r3
 800fcb2:	401a      	ands	r2, r3
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	6a1a      	ldr	r2, [r3, #32]
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	f003 031f 	and.w	r3, r3, #31
 800fcc2:	6879      	ldr	r1, [r7, #4]
 800fcc4:	fa01 f303 	lsl.w	r3, r1, r3
 800fcc8:	431a      	orrs	r2, r3
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	621a      	str	r2, [r3, #32]
}
 800fcce:	bf00      	nop
 800fcd0:	371c      	adds	r7, #28
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd8:	4770      	bx	lr
	...

0800fcdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fcdc:	b480      	push	{r7}
 800fcde:	b085      	sub	sp, #20
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fcec:	2b01      	cmp	r3, #1
 800fcee:	d101      	bne.n	800fcf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fcf0:	2302      	movs	r3, #2
 800fcf2:	e06d      	b.n	800fdd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2201      	movs	r2, #1
 800fcf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2202      	movs	r2, #2
 800fd00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	685b      	ldr	r3, [r3, #4]
 800fd0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	689b      	ldr	r3, [r3, #8]
 800fd12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	4a30      	ldr	r2, [pc, #192]	; (800fddc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fd1a:	4293      	cmp	r3, r2
 800fd1c:	d004      	beq.n	800fd28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	4a2f      	ldr	r2, [pc, #188]	; (800fde0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fd24:	4293      	cmp	r3, r2
 800fd26:	d108      	bne.n	800fd3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fd2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	685b      	ldr	r3, [r3, #4]
 800fd34:	68fa      	ldr	r2, [r7, #12]
 800fd36:	4313      	orrs	r3, r2
 800fd38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fd42:	683b      	ldr	r3, [r7, #0]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	68fa      	ldr	r2, [r7, #12]
 800fd48:	4313      	orrs	r3, r2
 800fd4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	68fa      	ldr	r2, [r7, #12]
 800fd52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	4a20      	ldr	r2, [pc, #128]	; (800fddc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fd5a:	4293      	cmp	r3, r2
 800fd5c:	d022      	beq.n	800fda4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd66:	d01d      	beq.n	800fda4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	4a1d      	ldr	r2, [pc, #116]	; (800fde4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fd6e:	4293      	cmp	r3, r2
 800fd70:	d018      	beq.n	800fda4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	4a1c      	ldr	r2, [pc, #112]	; (800fde8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fd78:	4293      	cmp	r3, r2
 800fd7a:	d013      	beq.n	800fda4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	4a1a      	ldr	r2, [pc, #104]	; (800fdec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fd82:	4293      	cmp	r3, r2
 800fd84:	d00e      	beq.n	800fda4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	4a15      	ldr	r2, [pc, #84]	; (800fde0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fd8c:	4293      	cmp	r3, r2
 800fd8e:	d009      	beq.n	800fda4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	4a16      	ldr	r2, [pc, #88]	; (800fdf0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fd96:	4293      	cmp	r3, r2
 800fd98:	d004      	beq.n	800fda4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	4a15      	ldr	r2, [pc, #84]	; (800fdf4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fda0:	4293      	cmp	r3, r2
 800fda2:	d10c      	bne.n	800fdbe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fda4:	68bb      	ldr	r3, [r7, #8]
 800fda6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fdaa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fdac:	683b      	ldr	r3, [r7, #0]
 800fdae:	689b      	ldr	r3, [r3, #8]
 800fdb0:	68ba      	ldr	r2, [r7, #8]
 800fdb2:	4313      	orrs	r3, r2
 800fdb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	68ba      	ldr	r2, [r7, #8]
 800fdbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	2201      	movs	r2, #1
 800fdc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2200      	movs	r2, #0
 800fdca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fdce:	2300      	movs	r3, #0
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3714      	adds	r7, #20
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdda:	4770      	bx	lr
 800fddc:	40010000 	.word	0x40010000
 800fde0:	40010400 	.word	0x40010400
 800fde4:	40000400 	.word	0x40000400
 800fde8:	40000800 	.word	0x40000800
 800fdec:	40000c00 	.word	0x40000c00
 800fdf0:	40001800 	.word	0x40001800
 800fdf4:	40014000 	.word	0x40014000

0800fdf8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fdf8:	b480      	push	{r7}
 800fdfa:	b085      	sub	sp, #20
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
 800fe00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fe02:	2300      	movs	r3, #0
 800fe04:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	d101      	bne.n	800fe14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fe10:	2302      	movs	r3, #2
 800fe12:	e065      	b.n	800fee0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2201      	movs	r2, #1
 800fe18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fe22:	683b      	ldr	r3, [r7, #0]
 800fe24:	68db      	ldr	r3, [r3, #12]
 800fe26:	4313      	orrs	r3, r2
 800fe28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fe30:	683b      	ldr	r3, [r7, #0]
 800fe32:	689b      	ldr	r3, [r3, #8]
 800fe34:	4313      	orrs	r3, r2
 800fe36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	685b      	ldr	r3, [r3, #4]
 800fe42:	4313      	orrs	r3, r2
 800fe44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	4313      	orrs	r3, r2
 800fe52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	691b      	ldr	r3, [r3, #16]
 800fe5e:	4313      	orrs	r3, r2
 800fe60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	695b      	ldr	r3, [r3, #20]
 800fe6c:	4313      	orrs	r3, r2
 800fe6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe7a:	4313      	orrs	r3, r2
 800fe7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	699b      	ldr	r3, [r3, #24]
 800fe88:	041b      	lsls	r3, r3, #16
 800fe8a:	4313      	orrs	r3, r2
 800fe8c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	4a16      	ldr	r2, [pc, #88]	; (800feec <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800fe94:	4293      	cmp	r3, r2
 800fe96:	d004      	beq.n	800fea2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	4a14      	ldr	r2, [pc, #80]	; (800fef0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800fe9e:	4293      	cmp	r3, r2
 800fea0:	d115      	bne.n	800fece <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feac:	051b      	lsls	r3, r3, #20
 800feae:	4313      	orrs	r3, r2
 800feb0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800feb8:	683b      	ldr	r3, [r7, #0]
 800feba:	69db      	ldr	r3, [r3, #28]
 800febc:	4313      	orrs	r3, r2
 800febe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	6a1b      	ldr	r3, [r3, #32]
 800feca:	4313      	orrs	r3, r2
 800fecc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	68fa      	ldr	r2, [r7, #12]
 800fed4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2200      	movs	r2, #0
 800feda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fede:	2300      	movs	r3, #0
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	3714      	adds	r7, #20
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr
 800feec:	40010000 	.word	0x40010000
 800fef0:	40010400 	.word	0x40010400

0800fef4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fef4:	b480      	push	{r7}
 800fef6:	b083      	sub	sp, #12
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fefc:	bf00      	nop
 800fefe:	370c      	adds	r7, #12
 800ff00:	46bd      	mov	sp, r7
 800ff02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff06:	4770      	bx	lr

0800ff08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ff08:	b480      	push	{r7}
 800ff0a:	b083      	sub	sp, #12
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ff10:	bf00      	nop
 800ff12:	370c      	adds	r7, #12
 800ff14:	46bd      	mov	sp, r7
 800ff16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1a:	4770      	bx	lr

0800ff1c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ff1c:	b480      	push	{r7}
 800ff1e:	b083      	sub	sp, #12
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ff24:	bf00      	nop
 800ff26:	370c      	adds	r7, #12
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2e:	4770      	bx	lr

0800ff30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b082      	sub	sp, #8
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d101      	bne.n	800ff42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ff3e:	2301      	movs	r3, #1
 800ff40:	e042      	b.n	800ffc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d106      	bne.n	800ff5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	2200      	movs	r2, #0
 800ff50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f7f3 fbf7 	bl	8003748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2224      	movs	r2, #36	; 0x24
 800ff5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	681a      	ldr	r2, [r3, #0]
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	f022 0201 	bic.w	r2, r2, #1
 800ff70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d002      	beq.n	800ff80 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f001 fbc2 	bl	8011704 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ff80:	6878      	ldr	r0, [r7, #4]
 800ff82:	f000 fe57 	bl	8010c34 <UART_SetConfig>
 800ff86:	4603      	mov	r3, r0
 800ff88:	2b01      	cmp	r3, #1
 800ff8a:	d101      	bne.n	800ff90 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	e01b      	b.n	800ffc8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	685a      	ldr	r2, [r3, #4]
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ff9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	689a      	ldr	r2, [r3, #8]
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ffae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	681a      	ldr	r2, [r3, #0]
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	f042 0201 	orr.w	r2, r2, #1
 800ffbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ffc0:	6878      	ldr	r0, [r7, #4]
 800ffc2:	f001 fc41 	bl	8011848 <UART_CheckIdleState>
 800ffc6:	4603      	mov	r3, r0
}
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3708      	adds	r7, #8
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}

0800ffd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b08a      	sub	sp, #40	; 0x28
 800ffd4:	af02      	add	r7, sp, #8
 800ffd6:	60f8      	str	r0, [r7, #12]
 800ffd8:	60b9      	str	r1, [r7, #8]
 800ffda:	603b      	str	r3, [r7, #0]
 800ffdc:	4613      	mov	r3, r2
 800ffde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ffe6:	2b20      	cmp	r3, #32
 800ffe8:	d17b      	bne.n	80100e2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d002      	beq.n	800fff6 <HAL_UART_Transmit+0x26>
 800fff0:	88fb      	ldrh	r3, [r7, #6]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d101      	bne.n	800fffa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fff6:	2301      	movs	r3, #1
 800fff8:	e074      	b.n	80100e4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	2200      	movs	r2, #0
 800fffe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	2221      	movs	r2, #33	; 0x21
 8010006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801000a:	f7f3 ff1b 	bl	8003e44 <HAL_GetTick>
 801000e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	88fa      	ldrh	r2, [r7, #6]
 8010014:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	88fa      	ldrh	r2, [r7, #6]
 801001c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	689b      	ldr	r3, [r3, #8]
 8010024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010028:	d108      	bne.n	801003c <HAL_UART_Transmit+0x6c>
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	691b      	ldr	r3, [r3, #16]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d104      	bne.n	801003c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8010032:	2300      	movs	r3, #0
 8010034:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010036:	68bb      	ldr	r3, [r7, #8]
 8010038:	61bb      	str	r3, [r7, #24]
 801003a:	e003      	b.n	8010044 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010040:	2300      	movs	r3, #0
 8010042:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010044:	e030      	b.n	80100a8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010046:	683b      	ldr	r3, [r7, #0]
 8010048:	9300      	str	r3, [sp, #0]
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	2200      	movs	r2, #0
 801004e:	2180      	movs	r1, #128	; 0x80
 8010050:	68f8      	ldr	r0, [r7, #12]
 8010052:	f001 fca3 	bl	801199c <UART_WaitOnFlagUntilTimeout>
 8010056:	4603      	mov	r3, r0
 8010058:	2b00      	cmp	r3, #0
 801005a:	d005      	beq.n	8010068 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	2220      	movs	r2, #32
 8010060:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8010064:	2303      	movs	r3, #3
 8010066:	e03d      	b.n	80100e4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8010068:	69fb      	ldr	r3, [r7, #28]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d10b      	bne.n	8010086 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801006e:	69bb      	ldr	r3, [r7, #24]
 8010070:	881b      	ldrh	r3, [r3, #0]
 8010072:	461a      	mov	r2, r3
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801007c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801007e:	69bb      	ldr	r3, [r7, #24]
 8010080:	3302      	adds	r3, #2
 8010082:	61bb      	str	r3, [r7, #24]
 8010084:	e007      	b.n	8010096 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010086:	69fb      	ldr	r3, [r7, #28]
 8010088:	781a      	ldrb	r2, [r3, #0]
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010090:	69fb      	ldr	r3, [r7, #28]
 8010092:	3301      	adds	r3, #1
 8010094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801009c:	b29b      	uxth	r3, r3
 801009e:	3b01      	subs	r3, #1
 80100a0:	b29a      	uxth	r2, r3
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80100ae:	b29b      	uxth	r3, r3
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d1c8      	bne.n	8010046 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	9300      	str	r3, [sp, #0]
 80100b8:	697b      	ldr	r3, [r7, #20]
 80100ba:	2200      	movs	r2, #0
 80100bc:	2140      	movs	r1, #64	; 0x40
 80100be:	68f8      	ldr	r0, [r7, #12]
 80100c0:	f001 fc6c 	bl	801199c <UART_WaitOnFlagUntilTimeout>
 80100c4:	4603      	mov	r3, r0
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d005      	beq.n	80100d6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	2220      	movs	r2, #32
 80100ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80100d2:	2303      	movs	r3, #3
 80100d4:	e006      	b.n	80100e4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	2220      	movs	r2, #32
 80100da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80100de:	2300      	movs	r3, #0
 80100e0:	e000      	b.n	80100e4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80100e2:	2302      	movs	r3, #2
  }
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	3720      	adds	r7, #32
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}

080100ec <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b08a      	sub	sp, #40	; 0x28
 80100f0:	af02      	add	r7, sp, #8
 80100f2:	60f8      	str	r0, [r7, #12]
 80100f4:	60b9      	str	r1, [r7, #8]
 80100f6:	603b      	str	r3, [r7, #0]
 80100f8:	4613      	mov	r3, r2
 80100fa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010102:	2b20      	cmp	r3, #32
 8010104:	f040 80b5 	bne.w	8010272 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d002      	beq.n	8010114 <HAL_UART_Receive+0x28>
 801010e:	88fb      	ldrh	r3, [r7, #6]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d101      	bne.n	8010118 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8010114:	2301      	movs	r3, #1
 8010116:	e0ad      	b.n	8010274 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	2200      	movs	r2, #0
 801011c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	2222      	movs	r2, #34	; 0x22
 8010124:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	2200      	movs	r2, #0
 801012c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801012e:	f7f3 fe89 	bl	8003e44 <HAL_GetTick>
 8010132:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	88fa      	ldrh	r2, [r7, #6]
 8010138:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	88fa      	ldrh	r2, [r7, #6]
 8010140:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	689b      	ldr	r3, [r3, #8]
 8010148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801014c:	d10e      	bne.n	801016c <HAL_UART_Receive+0x80>
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	691b      	ldr	r3, [r3, #16]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d105      	bne.n	8010162 <HAL_UART_Receive+0x76>
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	f240 12ff 	movw	r2, #511	; 0x1ff
 801015c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010160:	e02d      	b.n	80101be <HAL_UART_Receive+0xd2>
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	22ff      	movs	r2, #255	; 0xff
 8010166:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801016a:	e028      	b.n	80101be <HAL_UART_Receive+0xd2>
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	689b      	ldr	r3, [r3, #8]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d10d      	bne.n	8010190 <HAL_UART_Receive+0xa4>
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	691b      	ldr	r3, [r3, #16]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d104      	bne.n	8010186 <HAL_UART_Receive+0x9a>
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	22ff      	movs	r2, #255	; 0xff
 8010180:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010184:	e01b      	b.n	80101be <HAL_UART_Receive+0xd2>
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	227f      	movs	r2, #127	; 0x7f
 801018a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801018e:	e016      	b.n	80101be <HAL_UART_Receive+0xd2>
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	689b      	ldr	r3, [r3, #8]
 8010194:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010198:	d10d      	bne.n	80101b6 <HAL_UART_Receive+0xca>
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	691b      	ldr	r3, [r3, #16]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d104      	bne.n	80101ac <HAL_UART_Receive+0xc0>
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	227f      	movs	r2, #127	; 0x7f
 80101a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80101aa:	e008      	b.n	80101be <HAL_UART_Receive+0xd2>
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	223f      	movs	r2, #63	; 0x3f
 80101b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80101b4:	e003      	b.n	80101be <HAL_UART_Receive+0xd2>
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	2200      	movs	r2, #0
 80101ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80101c4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	689b      	ldr	r3, [r3, #8]
 80101ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101ce:	d108      	bne.n	80101e2 <HAL_UART_Receive+0xf6>
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	691b      	ldr	r3, [r3, #16]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d104      	bne.n	80101e2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80101d8:	2300      	movs	r3, #0
 80101da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80101dc:	68bb      	ldr	r3, [r7, #8]
 80101de:	61bb      	str	r3, [r7, #24]
 80101e0:	e003      	b.n	80101ea <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80101e2:	68bb      	ldr	r3, [r7, #8]
 80101e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80101e6:	2300      	movs	r3, #0
 80101e8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80101ea:	e036      	b.n	801025a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	9300      	str	r3, [sp, #0]
 80101f0:	697b      	ldr	r3, [r7, #20]
 80101f2:	2200      	movs	r2, #0
 80101f4:	2120      	movs	r1, #32
 80101f6:	68f8      	ldr	r0, [r7, #12]
 80101f8:	f001 fbd0 	bl	801199c <UART_WaitOnFlagUntilTimeout>
 80101fc:	4603      	mov	r3, r0
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d005      	beq.n	801020e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	2220      	movs	r2, #32
 8010206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 801020a:	2303      	movs	r3, #3
 801020c:	e032      	b.n	8010274 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 801020e:	69fb      	ldr	r3, [r7, #28]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d10c      	bne.n	801022e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801021a:	b29a      	uxth	r2, r3
 801021c:	8a7b      	ldrh	r3, [r7, #18]
 801021e:	4013      	ands	r3, r2
 8010220:	b29a      	uxth	r2, r3
 8010222:	69bb      	ldr	r3, [r7, #24]
 8010224:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8010226:	69bb      	ldr	r3, [r7, #24]
 8010228:	3302      	adds	r3, #2
 801022a:	61bb      	str	r3, [r7, #24]
 801022c:	e00c      	b.n	8010248 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010234:	b2da      	uxtb	r2, r3
 8010236:	8a7b      	ldrh	r3, [r7, #18]
 8010238:	b2db      	uxtb	r3, r3
 801023a:	4013      	ands	r3, r2
 801023c:	b2da      	uxtb	r2, r3
 801023e:	69fb      	ldr	r3, [r7, #28]
 8010240:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8010242:	69fb      	ldr	r3, [r7, #28]
 8010244:	3301      	adds	r3, #1
 8010246:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801024e:	b29b      	uxth	r3, r3
 8010250:	3b01      	subs	r3, #1
 8010252:	b29a      	uxth	r2, r3
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010260:	b29b      	uxth	r3, r3
 8010262:	2b00      	cmp	r3, #0
 8010264:	d1c2      	bne.n	80101ec <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	2220      	movs	r2, #32
 801026a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 801026e:	2300      	movs	r3, #0
 8010270:	e000      	b.n	8010274 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8010272:	2302      	movs	r3, #2
  }
}
 8010274:	4618      	mov	r0, r3
 8010276:	3720      	adds	r7, #32
 8010278:	46bd      	mov	sp, r7
 801027a:	bd80      	pop	{r7, pc}

0801027c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801027c:	b580      	push	{r7, lr}
 801027e:	b08a      	sub	sp, #40	; 0x28
 8010280:	af00      	add	r7, sp, #0
 8010282:	60f8      	str	r0, [r7, #12]
 8010284:	60b9      	str	r1, [r7, #8]
 8010286:	4613      	mov	r3, r2
 8010288:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010290:	2b20      	cmp	r3, #32
 8010292:	d137      	bne.n	8010304 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d002      	beq.n	80102a0 <HAL_UART_Receive_IT+0x24>
 801029a:	88fb      	ldrh	r3, [r7, #6]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d101      	bne.n	80102a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80102a0:	2301      	movs	r3, #1
 80102a2:	e030      	b.n	8010306 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	2200      	movs	r2, #0
 80102a8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	4a18      	ldr	r2, [pc, #96]	; (8010310 <HAL_UART_Receive_IT+0x94>)
 80102b0:	4293      	cmp	r3, r2
 80102b2:	d01f      	beq.n	80102f4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	685b      	ldr	r3, [r3, #4]
 80102ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d018      	beq.n	80102f4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102c8:	697b      	ldr	r3, [r7, #20]
 80102ca:	e853 3f00 	ldrex	r3, [r3]
 80102ce:	613b      	str	r3, [r7, #16]
   return(result);
 80102d0:	693b      	ldr	r3, [r7, #16]
 80102d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80102d6:	627b      	str	r3, [r7, #36]	; 0x24
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	461a      	mov	r2, r3
 80102de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e0:	623b      	str	r3, [r7, #32]
 80102e2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102e4:	69f9      	ldr	r1, [r7, #28]
 80102e6:	6a3a      	ldr	r2, [r7, #32]
 80102e8:	e841 2300 	strex	r3, r2, [r1]
 80102ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80102ee:	69bb      	ldr	r3, [r7, #24]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d1e6      	bne.n	80102c2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80102f4:	88fb      	ldrh	r3, [r7, #6]
 80102f6:	461a      	mov	r2, r3
 80102f8:	68b9      	ldr	r1, [r7, #8]
 80102fa:	68f8      	ldr	r0, [r7, #12]
 80102fc:	f001 fbbc 	bl	8011a78 <UART_Start_Receive_IT>
 8010300:	4603      	mov	r3, r0
 8010302:	e000      	b.n	8010306 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010304:	2302      	movs	r3, #2
  }
}
 8010306:	4618      	mov	r0, r3
 8010308:	3728      	adds	r7, #40	; 0x28
 801030a:	46bd      	mov	sp, r7
 801030c:	bd80      	pop	{r7, pc}
 801030e:	bf00      	nop
 8010310:	58000c00 	.word	0x58000c00

08010314 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b09a      	sub	sp, #104	; 0x68
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010324:	e853 3f00 	ldrex	r3, [r3]
 8010328:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801032a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801032c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010330:	667b      	str	r3, [r7, #100]	; 0x64
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	461a      	mov	r2, r3
 8010338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801033a:	657b      	str	r3, [r7, #84]	; 0x54
 801033c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801033e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010340:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010342:	e841 2300 	strex	r3, r2, [r1]
 8010346:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801034a:	2b00      	cmp	r3, #0
 801034c:	d1e6      	bne.n	801031c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	3308      	adds	r3, #8
 8010354:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010358:	e853 3f00 	ldrex	r3, [r3]
 801035c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801035e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010360:	4b46      	ldr	r3, [pc, #280]	; (801047c <HAL_UART_AbortReceive+0x168>)
 8010362:	4013      	ands	r3, r2
 8010364:	663b      	str	r3, [r7, #96]	; 0x60
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	3308      	adds	r3, #8
 801036c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801036e:	643a      	str	r2, [r7, #64]	; 0x40
 8010370:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010372:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010374:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010376:	e841 2300 	strex	r3, r2, [r1]
 801037a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801037c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801037e:	2b00      	cmp	r3, #0
 8010380:	d1e5      	bne.n	801034e <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010386:	2b01      	cmp	r3, #1
 8010388:	d118      	bne.n	80103bc <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010390:	6a3b      	ldr	r3, [r7, #32]
 8010392:	e853 3f00 	ldrex	r3, [r3]
 8010396:	61fb      	str	r3, [r7, #28]
   return(result);
 8010398:	69fb      	ldr	r3, [r7, #28]
 801039a:	f023 0310 	bic.w	r3, r3, #16
 801039e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	461a      	mov	r2, r3
 80103a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80103aa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80103ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103b0:	e841 2300 	strex	r3, r2, [r1]
 80103b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80103b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d1e6      	bne.n	801038a <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	689b      	ldr	r3, [r3, #8]
 80103c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103c6:	2b40      	cmp	r3, #64	; 0x40
 80103c8:	d13b      	bne.n	8010442 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	3308      	adds	r3, #8
 80103d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	e853 3f00 	ldrex	r3, [r3]
 80103d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80103da:	68bb      	ldr	r3, [r7, #8]
 80103dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80103e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	3308      	adds	r3, #8
 80103e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80103ea:	61ba      	str	r2, [r7, #24]
 80103ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ee:	6979      	ldr	r1, [r7, #20]
 80103f0:	69ba      	ldr	r2, [r7, #24]
 80103f2:	e841 2300 	strex	r3, r2, [r1]
 80103f6:	613b      	str	r3, [r7, #16]
   return(result);
 80103f8:	693b      	ldr	r3, [r7, #16]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d1e5      	bne.n	80103ca <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010404:	2b00      	cmp	r3, #0
 8010406:	d01c      	beq.n	8010442 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801040e:	2200      	movs	r2, #0
 8010410:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010418:	4618      	mov	r0, r3
 801041a:	f7f6 fc01 	bl	8006c20 <HAL_DMA_Abort>
 801041e:	4603      	mov	r3, r0
 8010420:	2b00      	cmp	r3, #0
 8010422:	d00e      	beq.n	8010442 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801042a:	4618      	mov	r0, r3
 801042c:	f7f8 f886 	bl	800853c <HAL_DMA_GetError>
 8010430:	4603      	mov	r3, r0
 8010432:	2b20      	cmp	r3, #32
 8010434:	d105      	bne.n	8010442 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	2210      	movs	r2, #16
 801043a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 801043e:	2303      	movs	r3, #3
 8010440:	e017      	b.n	8010472 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	2200      	movs	r2, #0
 8010446:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	220f      	movs	r2, #15
 8010450:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	699a      	ldr	r2, [r3, #24]
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	f042 0208 	orr.w	r2, r2, #8
 8010460:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2220      	movs	r2, #32
 8010466:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	2200      	movs	r2, #0
 801046e:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8010470:	2300      	movs	r3, #0
}
 8010472:	4618      	mov	r0, r3
 8010474:	3768      	adds	r7, #104	; 0x68
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}
 801047a:	bf00      	nop
 801047c:	effffffe 	.word	0xeffffffe

08010480 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b0ba      	sub	sp, #232	; 0xe8
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	69db      	ldr	r3, [r3, #28]
 801048e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	689b      	ldr	r3, [r3, #8]
 80104a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80104a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80104aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80104ae:	4013      	ands	r3, r2
 80104b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80104b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d11b      	bne.n	80104f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80104bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80104c0:	f003 0320 	and.w	r3, r3, #32
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d015      	beq.n	80104f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80104c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80104cc:	f003 0320 	and.w	r3, r3, #32
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d105      	bne.n	80104e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80104d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80104d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d009      	beq.n	80104f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	f000 8377 	beq.w	8010bd8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	4798      	blx	r3
      }
      return;
 80104f2:	e371      	b.n	8010bd8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80104f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	f000 8123 	beq.w	8010744 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80104fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010502:	4b8d      	ldr	r3, [pc, #564]	; (8010738 <HAL_UART_IRQHandler+0x2b8>)
 8010504:	4013      	ands	r3, r2
 8010506:	2b00      	cmp	r3, #0
 8010508:	d106      	bne.n	8010518 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801050a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801050e:	4b8b      	ldr	r3, [pc, #556]	; (801073c <HAL_UART_IRQHandler+0x2bc>)
 8010510:	4013      	ands	r3, r2
 8010512:	2b00      	cmp	r3, #0
 8010514:	f000 8116 	beq.w	8010744 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801051c:	f003 0301 	and.w	r3, r3, #1
 8010520:	2b00      	cmp	r3, #0
 8010522:	d011      	beq.n	8010548 <HAL_UART_IRQHandler+0xc8>
 8010524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801052c:	2b00      	cmp	r3, #0
 801052e:	d00b      	beq.n	8010548 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	2201      	movs	r2, #1
 8010536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801053e:	f043 0201 	orr.w	r2, r3, #1
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801054c:	f003 0302 	and.w	r3, r3, #2
 8010550:	2b00      	cmp	r3, #0
 8010552:	d011      	beq.n	8010578 <HAL_UART_IRQHandler+0xf8>
 8010554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010558:	f003 0301 	and.w	r3, r3, #1
 801055c:	2b00      	cmp	r3, #0
 801055e:	d00b      	beq.n	8010578 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	2202      	movs	r2, #2
 8010566:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801056e:	f043 0204 	orr.w	r2, r3, #4
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801057c:	f003 0304 	and.w	r3, r3, #4
 8010580:	2b00      	cmp	r3, #0
 8010582:	d011      	beq.n	80105a8 <HAL_UART_IRQHandler+0x128>
 8010584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010588:	f003 0301 	and.w	r3, r3, #1
 801058c:	2b00      	cmp	r3, #0
 801058e:	d00b      	beq.n	80105a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	2204      	movs	r2, #4
 8010596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801059e:	f043 0202 	orr.w	r2, r3, #2
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80105a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80105ac:	f003 0308 	and.w	r3, r3, #8
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d017      	beq.n	80105e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80105b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80105b8:	f003 0320 	and.w	r3, r3, #32
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d105      	bne.n	80105cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80105c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80105c4:	4b5c      	ldr	r3, [pc, #368]	; (8010738 <HAL_UART_IRQHandler+0x2b8>)
 80105c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d00b      	beq.n	80105e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	2208      	movs	r2, #8
 80105d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105da:	f043 0208 	orr.w	r2, r3, #8
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80105e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80105e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d012      	beq.n	8010616 <HAL_UART_IRQHandler+0x196>
 80105f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80105f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d00c      	beq.n	8010616 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010604:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801060c:	f043 0220 	orr.w	r2, r3, #32
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801061c:	2b00      	cmp	r3, #0
 801061e:	f000 82dd 	beq.w	8010bdc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010626:	f003 0320 	and.w	r3, r3, #32
 801062a:	2b00      	cmp	r3, #0
 801062c:	d013      	beq.n	8010656 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801062e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010632:	f003 0320 	and.w	r3, r3, #32
 8010636:	2b00      	cmp	r3, #0
 8010638:	d105      	bne.n	8010646 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801063a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801063e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010642:	2b00      	cmp	r3, #0
 8010644:	d007      	beq.n	8010656 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801064a:	2b00      	cmp	r3, #0
 801064c:	d003      	beq.n	8010656 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801065c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	689b      	ldr	r3, [r3, #8]
 8010666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801066a:	2b40      	cmp	r3, #64	; 0x40
 801066c:	d005      	beq.n	801067a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801066e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010672:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010676:	2b00      	cmp	r3, #0
 8010678:	d054      	beq.n	8010724 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f001 fb1e 	bl	8011cbc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	689b      	ldr	r3, [r3, #8]
 8010686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801068a:	2b40      	cmp	r3, #64	; 0x40
 801068c:	d146      	bne.n	801071c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	3308      	adds	r3, #8
 8010694:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010698:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801069c:	e853 3f00 	ldrex	r3, [r3]
 80106a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80106a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80106a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80106ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	3308      	adds	r3, #8
 80106b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80106ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80106be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80106c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80106ca:	e841 2300 	strex	r3, r2, [r1]
 80106ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80106d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d1d9      	bne.n	801068e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d017      	beq.n	8010714 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106ea:	4a15      	ldr	r2, [pc, #84]	; (8010740 <HAL_UART_IRQHandler+0x2c0>)
 80106ec:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106f4:	4618      	mov	r0, r3
 80106f6:	f7f6 fdb1 	bl	800725c <HAL_DMA_Abort_IT>
 80106fa:	4603      	mov	r3, r0
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d019      	beq.n	8010734 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010708:	687a      	ldr	r2, [r7, #4]
 801070a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801070e:	4610      	mov	r0, r2
 8010710:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010712:	e00f      	b.n	8010734 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f000 fa77 	bl	8010c08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801071a:	e00b      	b.n	8010734 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801071c:	6878      	ldr	r0, [r7, #4]
 801071e:	f000 fa73 	bl	8010c08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010722:	e007      	b.n	8010734 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010724:	6878      	ldr	r0, [r7, #4]
 8010726:	f000 fa6f 	bl	8010c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	2200      	movs	r2, #0
 801072e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010732:	e253      	b.n	8010bdc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010734:	bf00      	nop
    return;
 8010736:	e251      	b.n	8010bdc <HAL_UART_IRQHandler+0x75c>
 8010738:	10000001 	.word	0x10000001
 801073c:	04000120 	.word	0x04000120
 8010740:	08011d89 	.word	0x08011d89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010748:	2b01      	cmp	r3, #1
 801074a:	f040 81e7 	bne.w	8010b1c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801074e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010752:	f003 0310 	and.w	r3, r3, #16
 8010756:	2b00      	cmp	r3, #0
 8010758:	f000 81e0 	beq.w	8010b1c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801075c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010760:	f003 0310 	and.w	r3, r3, #16
 8010764:	2b00      	cmp	r3, #0
 8010766:	f000 81d9 	beq.w	8010b1c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	2210      	movs	r2, #16
 8010770:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	689b      	ldr	r3, [r3, #8]
 8010778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801077c:	2b40      	cmp	r3, #64	; 0x40
 801077e:	f040 8151 	bne.w	8010a24 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	4a96      	ldr	r2, [pc, #600]	; (80109e4 <HAL_UART_IRQHandler+0x564>)
 801078c:	4293      	cmp	r3, r2
 801078e:	d068      	beq.n	8010862 <HAL_UART_IRQHandler+0x3e2>
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	4a93      	ldr	r2, [pc, #588]	; (80109e8 <HAL_UART_IRQHandler+0x568>)
 801079a:	4293      	cmp	r3, r2
 801079c:	d061      	beq.n	8010862 <HAL_UART_IRQHandler+0x3e2>
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	4a91      	ldr	r2, [pc, #580]	; (80109ec <HAL_UART_IRQHandler+0x56c>)
 80107a8:	4293      	cmp	r3, r2
 80107aa:	d05a      	beq.n	8010862 <HAL_UART_IRQHandler+0x3e2>
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	4a8e      	ldr	r2, [pc, #568]	; (80109f0 <HAL_UART_IRQHandler+0x570>)
 80107b6:	4293      	cmp	r3, r2
 80107b8:	d053      	beq.n	8010862 <HAL_UART_IRQHandler+0x3e2>
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	4a8c      	ldr	r2, [pc, #560]	; (80109f4 <HAL_UART_IRQHandler+0x574>)
 80107c4:	4293      	cmp	r3, r2
 80107c6:	d04c      	beq.n	8010862 <HAL_UART_IRQHandler+0x3e2>
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	4a89      	ldr	r2, [pc, #548]	; (80109f8 <HAL_UART_IRQHandler+0x578>)
 80107d2:	4293      	cmp	r3, r2
 80107d4:	d045      	beq.n	8010862 <HAL_UART_IRQHandler+0x3e2>
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	4a87      	ldr	r2, [pc, #540]	; (80109fc <HAL_UART_IRQHandler+0x57c>)
 80107e0:	4293      	cmp	r3, r2
 80107e2:	d03e      	beq.n	8010862 <HAL_UART_IRQHandler+0x3e2>
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	4a84      	ldr	r2, [pc, #528]	; (8010a00 <HAL_UART_IRQHandler+0x580>)
 80107ee:	4293      	cmp	r3, r2
 80107f0:	d037      	beq.n	8010862 <HAL_UART_IRQHandler+0x3e2>
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	4a82      	ldr	r2, [pc, #520]	; (8010a04 <HAL_UART_IRQHandler+0x584>)
 80107fc:	4293      	cmp	r3, r2
 80107fe:	d030      	beq.n	8010862 <HAL_UART_IRQHandler+0x3e2>
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	4a7f      	ldr	r2, [pc, #508]	; (8010a08 <HAL_UART_IRQHandler+0x588>)
 801080a:	4293      	cmp	r3, r2
 801080c:	d029      	beq.n	8010862 <HAL_UART_IRQHandler+0x3e2>
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	4a7d      	ldr	r2, [pc, #500]	; (8010a0c <HAL_UART_IRQHandler+0x58c>)
 8010818:	4293      	cmp	r3, r2
 801081a:	d022      	beq.n	8010862 <HAL_UART_IRQHandler+0x3e2>
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	4a7a      	ldr	r2, [pc, #488]	; (8010a10 <HAL_UART_IRQHandler+0x590>)
 8010826:	4293      	cmp	r3, r2
 8010828:	d01b      	beq.n	8010862 <HAL_UART_IRQHandler+0x3e2>
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	4a78      	ldr	r2, [pc, #480]	; (8010a14 <HAL_UART_IRQHandler+0x594>)
 8010834:	4293      	cmp	r3, r2
 8010836:	d014      	beq.n	8010862 <HAL_UART_IRQHandler+0x3e2>
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	4a75      	ldr	r2, [pc, #468]	; (8010a18 <HAL_UART_IRQHandler+0x598>)
 8010842:	4293      	cmp	r3, r2
 8010844:	d00d      	beq.n	8010862 <HAL_UART_IRQHandler+0x3e2>
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	4a73      	ldr	r2, [pc, #460]	; (8010a1c <HAL_UART_IRQHandler+0x59c>)
 8010850:	4293      	cmp	r3, r2
 8010852:	d006      	beq.n	8010862 <HAL_UART_IRQHandler+0x3e2>
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	4a70      	ldr	r2, [pc, #448]	; (8010a20 <HAL_UART_IRQHandler+0x5a0>)
 801085e:	4293      	cmp	r3, r2
 8010860:	d106      	bne.n	8010870 <HAL_UART_IRQHandler+0x3f0>
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	685b      	ldr	r3, [r3, #4]
 801086c:	b29b      	uxth	r3, r3
 801086e:	e005      	b.n	801087c <HAL_UART_IRQHandler+0x3fc>
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	685b      	ldr	r3, [r3, #4]
 801087a:	b29b      	uxth	r3, r3
 801087c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010880:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010884:	2b00      	cmp	r3, #0
 8010886:	f000 81ab 	beq.w	8010be0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010890:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010894:	429a      	cmp	r2, r3
 8010896:	f080 81a3 	bcs.w	8010be0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80108a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108aa:	69db      	ldr	r3, [r3, #28]
 80108ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108b0:	f000 8087 	beq.w	80109c2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80108c0:	e853 3f00 	ldrex	r3, [r3]
 80108c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80108c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80108cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80108d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	461a      	mov	r2, r3
 80108da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80108de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80108e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80108ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80108ee:	e841 2300 	strex	r3, r2, [r1]
 80108f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80108f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d1da      	bne.n	80108b4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	3308      	adds	r3, #8
 8010904:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010908:	e853 3f00 	ldrex	r3, [r3]
 801090c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801090e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010910:	f023 0301 	bic.w	r3, r3, #1
 8010914:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	3308      	adds	r3, #8
 801091e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010922:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010926:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010928:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801092a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801092e:	e841 2300 	strex	r3, r2, [r1]
 8010932:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010936:	2b00      	cmp	r3, #0
 8010938:	d1e1      	bne.n	80108fe <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	3308      	adds	r3, #8
 8010940:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010942:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010944:	e853 3f00 	ldrex	r3, [r3]
 8010948:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801094a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801094c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010950:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	3308      	adds	r3, #8
 801095a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801095e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010960:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010962:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010964:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010966:	e841 2300 	strex	r3, r2, [r1]
 801096a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801096c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801096e:	2b00      	cmp	r3, #0
 8010970:	d1e3      	bne.n	801093a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2220      	movs	r2, #32
 8010976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	2200      	movs	r2, #0
 801097e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010988:	e853 3f00 	ldrex	r3, [r3]
 801098c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801098e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010990:	f023 0310 	bic.w	r3, r3, #16
 8010994:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	461a      	mov	r2, r3
 801099e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80109a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80109a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80109a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80109aa:	e841 2300 	strex	r3, r2, [r1]
 80109ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80109b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d1e4      	bne.n	8010980 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109bc:	4618      	mov	r0, r3
 80109be:	f7f6 f92f 	bl	8006c20 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2202      	movs	r2, #2
 80109c6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80109d4:	b29b      	uxth	r3, r3
 80109d6:	1ad3      	subs	r3, r2, r3
 80109d8:	b29b      	uxth	r3, r3
 80109da:	4619      	mov	r1, r3
 80109dc:	6878      	ldr	r0, [r7, #4]
 80109de:	f000 f91d 	bl	8010c1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80109e2:	e0fd      	b.n	8010be0 <HAL_UART_IRQHandler+0x760>
 80109e4:	40020010 	.word	0x40020010
 80109e8:	40020028 	.word	0x40020028
 80109ec:	40020040 	.word	0x40020040
 80109f0:	40020058 	.word	0x40020058
 80109f4:	40020070 	.word	0x40020070
 80109f8:	40020088 	.word	0x40020088
 80109fc:	400200a0 	.word	0x400200a0
 8010a00:	400200b8 	.word	0x400200b8
 8010a04:	40020410 	.word	0x40020410
 8010a08:	40020428 	.word	0x40020428
 8010a0c:	40020440 	.word	0x40020440
 8010a10:	40020458 	.word	0x40020458
 8010a14:	40020470 	.word	0x40020470
 8010a18:	40020488 	.word	0x40020488
 8010a1c:	400204a0 	.word	0x400204a0
 8010a20:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010a30:	b29b      	uxth	r3, r3
 8010a32:	1ad3      	subs	r3, r2, r3
 8010a34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010a3e:	b29b      	uxth	r3, r3
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	f000 80cf 	beq.w	8010be4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010a46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	f000 80ca 	beq.w	8010be4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a58:	e853 3f00 	ldrex	r3, [r3]
 8010a5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010a64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	461a      	mov	r2, r3
 8010a6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010a72:	647b      	str	r3, [r7, #68]	; 0x44
 8010a74:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010a78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a7a:	e841 2300 	strex	r3, r2, [r1]
 8010a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d1e4      	bne.n	8010a50 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	3308      	adds	r3, #8
 8010a8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a90:	e853 3f00 	ldrex	r3, [r3]
 8010a94:	623b      	str	r3, [r7, #32]
   return(result);
 8010a96:	6a3a      	ldr	r2, [r7, #32]
 8010a98:	4b55      	ldr	r3, [pc, #340]	; (8010bf0 <HAL_UART_IRQHandler+0x770>)
 8010a9a:	4013      	ands	r3, r2
 8010a9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	3308      	adds	r3, #8
 8010aa6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010aaa:	633a      	str	r2, [r7, #48]	; 0x30
 8010aac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ab2:	e841 2300 	strex	r3, r2, [r1]
 8010ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d1e3      	bne.n	8010a86 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	2220      	movs	r2, #32
 8010ac2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2200      	movs	r2, #0
 8010aca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2200      	movs	r2, #0
 8010ad0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ad8:	693b      	ldr	r3, [r7, #16]
 8010ada:	e853 3f00 	ldrex	r3, [r3]
 8010ade:	60fb      	str	r3, [r7, #12]
   return(result);
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	f023 0310 	bic.w	r3, r3, #16
 8010ae6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	461a      	mov	r2, r3
 8010af0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010af4:	61fb      	str	r3, [r7, #28]
 8010af6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010af8:	69b9      	ldr	r1, [r7, #24]
 8010afa:	69fa      	ldr	r2, [r7, #28]
 8010afc:	e841 2300 	strex	r3, r2, [r1]
 8010b00:	617b      	str	r3, [r7, #20]
   return(result);
 8010b02:	697b      	ldr	r3, [r7, #20]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d1e4      	bne.n	8010ad2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2202      	movs	r2, #2
 8010b0c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010b0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010b12:	4619      	mov	r1, r3
 8010b14:	6878      	ldr	r0, [r7, #4]
 8010b16:	f000 f881 	bl	8010c1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010b1a:	e063      	b.n	8010be4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d00e      	beq.n	8010b46 <HAL_UART_IRQHandler+0x6c6>
 8010b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010b2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d008      	beq.n	8010b46 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010b3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010b3e:	6878      	ldr	r0, [r7, #4]
 8010b40:	f001 fe80 	bl	8012844 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010b44:	e051      	b.n	8010bea <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d014      	beq.n	8010b7c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d105      	bne.n	8010b6a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010b62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d008      	beq.n	8010b7c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d03a      	beq.n	8010be8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	4798      	blx	r3
    }
    return;
 8010b7a:	e035      	b.n	8010be8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d009      	beq.n	8010b9c <HAL_UART_IRQHandler+0x71c>
 8010b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d003      	beq.n	8010b9c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f001 f90d 	bl	8011db4 <UART_EndTransmit_IT>
    return;
 8010b9a:	e026      	b.n	8010bea <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ba0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d009      	beq.n	8010bbc <HAL_UART_IRQHandler+0x73c>
 8010ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010bac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d003      	beq.n	8010bbc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f001 fe59 	bl	801286c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010bba:	e016      	b.n	8010bea <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d010      	beq.n	8010bea <HAL_UART_IRQHandler+0x76a>
 8010bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	da0c      	bge.n	8010bea <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010bd0:	6878      	ldr	r0, [r7, #4]
 8010bd2:	f001 fe41 	bl	8012858 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010bd6:	e008      	b.n	8010bea <HAL_UART_IRQHandler+0x76a>
      return;
 8010bd8:	bf00      	nop
 8010bda:	e006      	b.n	8010bea <HAL_UART_IRQHandler+0x76a>
    return;
 8010bdc:	bf00      	nop
 8010bde:	e004      	b.n	8010bea <HAL_UART_IRQHandler+0x76a>
      return;
 8010be0:	bf00      	nop
 8010be2:	e002      	b.n	8010bea <HAL_UART_IRQHandler+0x76a>
      return;
 8010be4:	bf00      	nop
 8010be6:	e000      	b.n	8010bea <HAL_UART_IRQHandler+0x76a>
    return;
 8010be8:	bf00      	nop
  }
}
 8010bea:	37e8      	adds	r7, #232	; 0xe8
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}
 8010bf0:	effffffe 	.word	0xeffffffe

08010bf4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010bf4:	b480      	push	{r7}
 8010bf6:	b083      	sub	sp, #12
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010bfc:	bf00      	nop
 8010bfe:	370c      	adds	r7, #12
 8010c00:	46bd      	mov	sp, r7
 8010c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c06:	4770      	bx	lr

08010c08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010c08:	b480      	push	{r7}
 8010c0a:	b083      	sub	sp, #12
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010c10:	bf00      	nop
 8010c12:	370c      	adds	r7, #12
 8010c14:	46bd      	mov	sp, r7
 8010c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1a:	4770      	bx	lr

08010c1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010c1c:	b480      	push	{r7}
 8010c1e:	b083      	sub	sp, #12
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
 8010c24:	460b      	mov	r3, r1
 8010c26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010c28:	bf00      	nop
 8010c2a:	370c      	adds	r7, #12
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c32:	4770      	bx	lr

08010c34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010c38:	b092      	sub	sp, #72	; 0x48
 8010c3a:	af00      	add	r7, sp, #0
 8010c3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	689a      	ldr	r2, [r3, #8]
 8010c48:	697b      	ldr	r3, [r7, #20]
 8010c4a:	691b      	ldr	r3, [r3, #16]
 8010c4c:	431a      	orrs	r2, r3
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	695b      	ldr	r3, [r3, #20]
 8010c52:	431a      	orrs	r2, r3
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	69db      	ldr	r3, [r3, #28]
 8010c58:	4313      	orrs	r3, r2
 8010c5a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010c5c:	697b      	ldr	r3, [r7, #20]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	681a      	ldr	r2, [r3, #0]
 8010c62:	4bbe      	ldr	r3, [pc, #760]	; (8010f5c <UART_SetConfig+0x328>)
 8010c64:	4013      	ands	r3, r2
 8010c66:	697a      	ldr	r2, [r7, #20]
 8010c68:	6812      	ldr	r2, [r2, #0]
 8010c6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010c6c:	430b      	orrs	r3, r1
 8010c6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010c70:	697b      	ldr	r3, [r7, #20]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	685b      	ldr	r3, [r3, #4]
 8010c76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010c7a:	697b      	ldr	r3, [r7, #20]
 8010c7c:	68da      	ldr	r2, [r3, #12]
 8010c7e:	697b      	ldr	r3, [r7, #20]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	430a      	orrs	r2, r1
 8010c84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	699b      	ldr	r3, [r3, #24]
 8010c8a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	4ab3      	ldr	r2, [pc, #716]	; (8010f60 <UART_SetConfig+0x32c>)
 8010c92:	4293      	cmp	r3, r2
 8010c94:	d004      	beq.n	8010ca0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	6a1b      	ldr	r3, [r3, #32]
 8010c9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c9c:	4313      	orrs	r3, r2
 8010c9e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010ca0:	697b      	ldr	r3, [r7, #20]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	689a      	ldr	r2, [r3, #8]
 8010ca6:	4baf      	ldr	r3, [pc, #700]	; (8010f64 <UART_SetConfig+0x330>)
 8010ca8:	4013      	ands	r3, r2
 8010caa:	697a      	ldr	r2, [r7, #20]
 8010cac:	6812      	ldr	r2, [r2, #0]
 8010cae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010cb0:	430b      	orrs	r3, r1
 8010cb2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cba:	f023 010f 	bic.w	r1, r3, #15
 8010cbe:	697b      	ldr	r3, [r7, #20]
 8010cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010cc2:	697b      	ldr	r3, [r7, #20]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	430a      	orrs	r2, r1
 8010cc8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	4aa6      	ldr	r2, [pc, #664]	; (8010f68 <UART_SetConfig+0x334>)
 8010cd0:	4293      	cmp	r3, r2
 8010cd2:	d177      	bne.n	8010dc4 <UART_SetConfig+0x190>
 8010cd4:	4ba5      	ldr	r3, [pc, #660]	; (8010f6c <UART_SetConfig+0x338>)
 8010cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010cdc:	2b28      	cmp	r3, #40	; 0x28
 8010cde:	d86d      	bhi.n	8010dbc <UART_SetConfig+0x188>
 8010ce0:	a201      	add	r2, pc, #4	; (adr r2, 8010ce8 <UART_SetConfig+0xb4>)
 8010ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ce6:	bf00      	nop
 8010ce8:	08010d8d 	.word	0x08010d8d
 8010cec:	08010dbd 	.word	0x08010dbd
 8010cf0:	08010dbd 	.word	0x08010dbd
 8010cf4:	08010dbd 	.word	0x08010dbd
 8010cf8:	08010dbd 	.word	0x08010dbd
 8010cfc:	08010dbd 	.word	0x08010dbd
 8010d00:	08010dbd 	.word	0x08010dbd
 8010d04:	08010dbd 	.word	0x08010dbd
 8010d08:	08010d95 	.word	0x08010d95
 8010d0c:	08010dbd 	.word	0x08010dbd
 8010d10:	08010dbd 	.word	0x08010dbd
 8010d14:	08010dbd 	.word	0x08010dbd
 8010d18:	08010dbd 	.word	0x08010dbd
 8010d1c:	08010dbd 	.word	0x08010dbd
 8010d20:	08010dbd 	.word	0x08010dbd
 8010d24:	08010dbd 	.word	0x08010dbd
 8010d28:	08010d9d 	.word	0x08010d9d
 8010d2c:	08010dbd 	.word	0x08010dbd
 8010d30:	08010dbd 	.word	0x08010dbd
 8010d34:	08010dbd 	.word	0x08010dbd
 8010d38:	08010dbd 	.word	0x08010dbd
 8010d3c:	08010dbd 	.word	0x08010dbd
 8010d40:	08010dbd 	.word	0x08010dbd
 8010d44:	08010dbd 	.word	0x08010dbd
 8010d48:	08010da5 	.word	0x08010da5
 8010d4c:	08010dbd 	.word	0x08010dbd
 8010d50:	08010dbd 	.word	0x08010dbd
 8010d54:	08010dbd 	.word	0x08010dbd
 8010d58:	08010dbd 	.word	0x08010dbd
 8010d5c:	08010dbd 	.word	0x08010dbd
 8010d60:	08010dbd 	.word	0x08010dbd
 8010d64:	08010dbd 	.word	0x08010dbd
 8010d68:	08010dad 	.word	0x08010dad
 8010d6c:	08010dbd 	.word	0x08010dbd
 8010d70:	08010dbd 	.word	0x08010dbd
 8010d74:	08010dbd 	.word	0x08010dbd
 8010d78:	08010dbd 	.word	0x08010dbd
 8010d7c:	08010dbd 	.word	0x08010dbd
 8010d80:	08010dbd 	.word	0x08010dbd
 8010d84:	08010dbd 	.word	0x08010dbd
 8010d88:	08010db5 	.word	0x08010db5
 8010d8c:	2301      	movs	r3, #1
 8010d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d92:	e222      	b.n	80111da <UART_SetConfig+0x5a6>
 8010d94:	2304      	movs	r3, #4
 8010d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d9a:	e21e      	b.n	80111da <UART_SetConfig+0x5a6>
 8010d9c:	2308      	movs	r3, #8
 8010d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010da2:	e21a      	b.n	80111da <UART_SetConfig+0x5a6>
 8010da4:	2310      	movs	r3, #16
 8010da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010daa:	e216      	b.n	80111da <UART_SetConfig+0x5a6>
 8010dac:	2320      	movs	r3, #32
 8010dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010db2:	e212      	b.n	80111da <UART_SetConfig+0x5a6>
 8010db4:	2340      	movs	r3, #64	; 0x40
 8010db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dba:	e20e      	b.n	80111da <UART_SetConfig+0x5a6>
 8010dbc:	2380      	movs	r3, #128	; 0x80
 8010dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dc2:	e20a      	b.n	80111da <UART_SetConfig+0x5a6>
 8010dc4:	697b      	ldr	r3, [r7, #20]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	4a69      	ldr	r2, [pc, #420]	; (8010f70 <UART_SetConfig+0x33c>)
 8010dca:	4293      	cmp	r3, r2
 8010dcc:	d130      	bne.n	8010e30 <UART_SetConfig+0x1fc>
 8010dce:	4b67      	ldr	r3, [pc, #412]	; (8010f6c <UART_SetConfig+0x338>)
 8010dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010dd2:	f003 0307 	and.w	r3, r3, #7
 8010dd6:	2b05      	cmp	r3, #5
 8010dd8:	d826      	bhi.n	8010e28 <UART_SetConfig+0x1f4>
 8010dda:	a201      	add	r2, pc, #4	; (adr r2, 8010de0 <UART_SetConfig+0x1ac>)
 8010ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010de0:	08010df9 	.word	0x08010df9
 8010de4:	08010e01 	.word	0x08010e01
 8010de8:	08010e09 	.word	0x08010e09
 8010dec:	08010e11 	.word	0x08010e11
 8010df0:	08010e19 	.word	0x08010e19
 8010df4:	08010e21 	.word	0x08010e21
 8010df8:	2300      	movs	r3, #0
 8010dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dfe:	e1ec      	b.n	80111da <UART_SetConfig+0x5a6>
 8010e00:	2304      	movs	r3, #4
 8010e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e06:	e1e8      	b.n	80111da <UART_SetConfig+0x5a6>
 8010e08:	2308      	movs	r3, #8
 8010e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e0e:	e1e4      	b.n	80111da <UART_SetConfig+0x5a6>
 8010e10:	2310      	movs	r3, #16
 8010e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e16:	e1e0      	b.n	80111da <UART_SetConfig+0x5a6>
 8010e18:	2320      	movs	r3, #32
 8010e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e1e:	e1dc      	b.n	80111da <UART_SetConfig+0x5a6>
 8010e20:	2340      	movs	r3, #64	; 0x40
 8010e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e26:	e1d8      	b.n	80111da <UART_SetConfig+0x5a6>
 8010e28:	2380      	movs	r3, #128	; 0x80
 8010e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e2e:	e1d4      	b.n	80111da <UART_SetConfig+0x5a6>
 8010e30:	697b      	ldr	r3, [r7, #20]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	4a4f      	ldr	r2, [pc, #316]	; (8010f74 <UART_SetConfig+0x340>)
 8010e36:	4293      	cmp	r3, r2
 8010e38:	d130      	bne.n	8010e9c <UART_SetConfig+0x268>
 8010e3a:	4b4c      	ldr	r3, [pc, #304]	; (8010f6c <UART_SetConfig+0x338>)
 8010e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e3e:	f003 0307 	and.w	r3, r3, #7
 8010e42:	2b05      	cmp	r3, #5
 8010e44:	d826      	bhi.n	8010e94 <UART_SetConfig+0x260>
 8010e46:	a201      	add	r2, pc, #4	; (adr r2, 8010e4c <UART_SetConfig+0x218>)
 8010e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e4c:	08010e65 	.word	0x08010e65
 8010e50:	08010e6d 	.word	0x08010e6d
 8010e54:	08010e75 	.word	0x08010e75
 8010e58:	08010e7d 	.word	0x08010e7d
 8010e5c:	08010e85 	.word	0x08010e85
 8010e60:	08010e8d 	.word	0x08010e8d
 8010e64:	2300      	movs	r3, #0
 8010e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e6a:	e1b6      	b.n	80111da <UART_SetConfig+0x5a6>
 8010e6c:	2304      	movs	r3, #4
 8010e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e72:	e1b2      	b.n	80111da <UART_SetConfig+0x5a6>
 8010e74:	2308      	movs	r3, #8
 8010e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e7a:	e1ae      	b.n	80111da <UART_SetConfig+0x5a6>
 8010e7c:	2310      	movs	r3, #16
 8010e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e82:	e1aa      	b.n	80111da <UART_SetConfig+0x5a6>
 8010e84:	2320      	movs	r3, #32
 8010e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e8a:	e1a6      	b.n	80111da <UART_SetConfig+0x5a6>
 8010e8c:	2340      	movs	r3, #64	; 0x40
 8010e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e92:	e1a2      	b.n	80111da <UART_SetConfig+0x5a6>
 8010e94:	2380      	movs	r3, #128	; 0x80
 8010e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e9a:	e19e      	b.n	80111da <UART_SetConfig+0x5a6>
 8010e9c:	697b      	ldr	r3, [r7, #20]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	4a35      	ldr	r2, [pc, #212]	; (8010f78 <UART_SetConfig+0x344>)
 8010ea2:	4293      	cmp	r3, r2
 8010ea4:	d130      	bne.n	8010f08 <UART_SetConfig+0x2d4>
 8010ea6:	4b31      	ldr	r3, [pc, #196]	; (8010f6c <UART_SetConfig+0x338>)
 8010ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010eaa:	f003 0307 	and.w	r3, r3, #7
 8010eae:	2b05      	cmp	r3, #5
 8010eb0:	d826      	bhi.n	8010f00 <UART_SetConfig+0x2cc>
 8010eb2:	a201      	add	r2, pc, #4	; (adr r2, 8010eb8 <UART_SetConfig+0x284>)
 8010eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eb8:	08010ed1 	.word	0x08010ed1
 8010ebc:	08010ed9 	.word	0x08010ed9
 8010ec0:	08010ee1 	.word	0x08010ee1
 8010ec4:	08010ee9 	.word	0x08010ee9
 8010ec8:	08010ef1 	.word	0x08010ef1
 8010ecc:	08010ef9 	.word	0x08010ef9
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ed6:	e180      	b.n	80111da <UART_SetConfig+0x5a6>
 8010ed8:	2304      	movs	r3, #4
 8010eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ede:	e17c      	b.n	80111da <UART_SetConfig+0x5a6>
 8010ee0:	2308      	movs	r3, #8
 8010ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ee6:	e178      	b.n	80111da <UART_SetConfig+0x5a6>
 8010ee8:	2310      	movs	r3, #16
 8010eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eee:	e174      	b.n	80111da <UART_SetConfig+0x5a6>
 8010ef0:	2320      	movs	r3, #32
 8010ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ef6:	e170      	b.n	80111da <UART_SetConfig+0x5a6>
 8010ef8:	2340      	movs	r3, #64	; 0x40
 8010efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010efe:	e16c      	b.n	80111da <UART_SetConfig+0x5a6>
 8010f00:	2380      	movs	r3, #128	; 0x80
 8010f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f06:	e168      	b.n	80111da <UART_SetConfig+0x5a6>
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	4a1b      	ldr	r2, [pc, #108]	; (8010f7c <UART_SetConfig+0x348>)
 8010f0e:	4293      	cmp	r3, r2
 8010f10:	d142      	bne.n	8010f98 <UART_SetConfig+0x364>
 8010f12:	4b16      	ldr	r3, [pc, #88]	; (8010f6c <UART_SetConfig+0x338>)
 8010f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f16:	f003 0307 	and.w	r3, r3, #7
 8010f1a:	2b05      	cmp	r3, #5
 8010f1c:	d838      	bhi.n	8010f90 <UART_SetConfig+0x35c>
 8010f1e:	a201      	add	r2, pc, #4	; (adr r2, 8010f24 <UART_SetConfig+0x2f0>)
 8010f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f24:	08010f3d 	.word	0x08010f3d
 8010f28:	08010f45 	.word	0x08010f45
 8010f2c:	08010f4d 	.word	0x08010f4d
 8010f30:	08010f55 	.word	0x08010f55
 8010f34:	08010f81 	.word	0x08010f81
 8010f38:	08010f89 	.word	0x08010f89
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f42:	e14a      	b.n	80111da <UART_SetConfig+0x5a6>
 8010f44:	2304      	movs	r3, #4
 8010f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f4a:	e146      	b.n	80111da <UART_SetConfig+0x5a6>
 8010f4c:	2308      	movs	r3, #8
 8010f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f52:	e142      	b.n	80111da <UART_SetConfig+0x5a6>
 8010f54:	2310      	movs	r3, #16
 8010f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f5a:	e13e      	b.n	80111da <UART_SetConfig+0x5a6>
 8010f5c:	cfff69f3 	.word	0xcfff69f3
 8010f60:	58000c00 	.word	0x58000c00
 8010f64:	11fff4ff 	.word	0x11fff4ff
 8010f68:	40011000 	.word	0x40011000
 8010f6c:	58024400 	.word	0x58024400
 8010f70:	40004400 	.word	0x40004400
 8010f74:	40004800 	.word	0x40004800
 8010f78:	40004c00 	.word	0x40004c00
 8010f7c:	40005000 	.word	0x40005000
 8010f80:	2320      	movs	r3, #32
 8010f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f86:	e128      	b.n	80111da <UART_SetConfig+0x5a6>
 8010f88:	2340      	movs	r3, #64	; 0x40
 8010f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f8e:	e124      	b.n	80111da <UART_SetConfig+0x5a6>
 8010f90:	2380      	movs	r3, #128	; 0x80
 8010f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f96:	e120      	b.n	80111da <UART_SetConfig+0x5a6>
 8010f98:	697b      	ldr	r3, [r7, #20]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	4acb      	ldr	r2, [pc, #812]	; (80112cc <UART_SetConfig+0x698>)
 8010f9e:	4293      	cmp	r3, r2
 8010fa0:	d176      	bne.n	8011090 <UART_SetConfig+0x45c>
 8010fa2:	4bcb      	ldr	r3, [pc, #812]	; (80112d0 <UART_SetConfig+0x69c>)
 8010fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010fa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010faa:	2b28      	cmp	r3, #40	; 0x28
 8010fac:	d86c      	bhi.n	8011088 <UART_SetConfig+0x454>
 8010fae:	a201      	add	r2, pc, #4	; (adr r2, 8010fb4 <UART_SetConfig+0x380>)
 8010fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fb4:	08011059 	.word	0x08011059
 8010fb8:	08011089 	.word	0x08011089
 8010fbc:	08011089 	.word	0x08011089
 8010fc0:	08011089 	.word	0x08011089
 8010fc4:	08011089 	.word	0x08011089
 8010fc8:	08011089 	.word	0x08011089
 8010fcc:	08011089 	.word	0x08011089
 8010fd0:	08011089 	.word	0x08011089
 8010fd4:	08011061 	.word	0x08011061
 8010fd8:	08011089 	.word	0x08011089
 8010fdc:	08011089 	.word	0x08011089
 8010fe0:	08011089 	.word	0x08011089
 8010fe4:	08011089 	.word	0x08011089
 8010fe8:	08011089 	.word	0x08011089
 8010fec:	08011089 	.word	0x08011089
 8010ff0:	08011089 	.word	0x08011089
 8010ff4:	08011069 	.word	0x08011069
 8010ff8:	08011089 	.word	0x08011089
 8010ffc:	08011089 	.word	0x08011089
 8011000:	08011089 	.word	0x08011089
 8011004:	08011089 	.word	0x08011089
 8011008:	08011089 	.word	0x08011089
 801100c:	08011089 	.word	0x08011089
 8011010:	08011089 	.word	0x08011089
 8011014:	08011071 	.word	0x08011071
 8011018:	08011089 	.word	0x08011089
 801101c:	08011089 	.word	0x08011089
 8011020:	08011089 	.word	0x08011089
 8011024:	08011089 	.word	0x08011089
 8011028:	08011089 	.word	0x08011089
 801102c:	08011089 	.word	0x08011089
 8011030:	08011089 	.word	0x08011089
 8011034:	08011079 	.word	0x08011079
 8011038:	08011089 	.word	0x08011089
 801103c:	08011089 	.word	0x08011089
 8011040:	08011089 	.word	0x08011089
 8011044:	08011089 	.word	0x08011089
 8011048:	08011089 	.word	0x08011089
 801104c:	08011089 	.word	0x08011089
 8011050:	08011089 	.word	0x08011089
 8011054:	08011081 	.word	0x08011081
 8011058:	2301      	movs	r3, #1
 801105a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801105e:	e0bc      	b.n	80111da <UART_SetConfig+0x5a6>
 8011060:	2304      	movs	r3, #4
 8011062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011066:	e0b8      	b.n	80111da <UART_SetConfig+0x5a6>
 8011068:	2308      	movs	r3, #8
 801106a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801106e:	e0b4      	b.n	80111da <UART_SetConfig+0x5a6>
 8011070:	2310      	movs	r3, #16
 8011072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011076:	e0b0      	b.n	80111da <UART_SetConfig+0x5a6>
 8011078:	2320      	movs	r3, #32
 801107a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801107e:	e0ac      	b.n	80111da <UART_SetConfig+0x5a6>
 8011080:	2340      	movs	r3, #64	; 0x40
 8011082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011086:	e0a8      	b.n	80111da <UART_SetConfig+0x5a6>
 8011088:	2380      	movs	r3, #128	; 0x80
 801108a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801108e:	e0a4      	b.n	80111da <UART_SetConfig+0x5a6>
 8011090:	697b      	ldr	r3, [r7, #20]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	4a8f      	ldr	r2, [pc, #572]	; (80112d4 <UART_SetConfig+0x6a0>)
 8011096:	4293      	cmp	r3, r2
 8011098:	d130      	bne.n	80110fc <UART_SetConfig+0x4c8>
 801109a:	4b8d      	ldr	r3, [pc, #564]	; (80112d0 <UART_SetConfig+0x69c>)
 801109c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801109e:	f003 0307 	and.w	r3, r3, #7
 80110a2:	2b05      	cmp	r3, #5
 80110a4:	d826      	bhi.n	80110f4 <UART_SetConfig+0x4c0>
 80110a6:	a201      	add	r2, pc, #4	; (adr r2, 80110ac <UART_SetConfig+0x478>)
 80110a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110ac:	080110c5 	.word	0x080110c5
 80110b0:	080110cd 	.word	0x080110cd
 80110b4:	080110d5 	.word	0x080110d5
 80110b8:	080110dd 	.word	0x080110dd
 80110bc:	080110e5 	.word	0x080110e5
 80110c0:	080110ed 	.word	0x080110ed
 80110c4:	2300      	movs	r3, #0
 80110c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ca:	e086      	b.n	80111da <UART_SetConfig+0x5a6>
 80110cc:	2304      	movs	r3, #4
 80110ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110d2:	e082      	b.n	80111da <UART_SetConfig+0x5a6>
 80110d4:	2308      	movs	r3, #8
 80110d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110da:	e07e      	b.n	80111da <UART_SetConfig+0x5a6>
 80110dc:	2310      	movs	r3, #16
 80110de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110e2:	e07a      	b.n	80111da <UART_SetConfig+0x5a6>
 80110e4:	2320      	movs	r3, #32
 80110e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ea:	e076      	b.n	80111da <UART_SetConfig+0x5a6>
 80110ec:	2340      	movs	r3, #64	; 0x40
 80110ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110f2:	e072      	b.n	80111da <UART_SetConfig+0x5a6>
 80110f4:	2380      	movs	r3, #128	; 0x80
 80110f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110fa:	e06e      	b.n	80111da <UART_SetConfig+0x5a6>
 80110fc:	697b      	ldr	r3, [r7, #20]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	4a75      	ldr	r2, [pc, #468]	; (80112d8 <UART_SetConfig+0x6a4>)
 8011102:	4293      	cmp	r3, r2
 8011104:	d130      	bne.n	8011168 <UART_SetConfig+0x534>
 8011106:	4b72      	ldr	r3, [pc, #456]	; (80112d0 <UART_SetConfig+0x69c>)
 8011108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801110a:	f003 0307 	and.w	r3, r3, #7
 801110e:	2b05      	cmp	r3, #5
 8011110:	d826      	bhi.n	8011160 <UART_SetConfig+0x52c>
 8011112:	a201      	add	r2, pc, #4	; (adr r2, 8011118 <UART_SetConfig+0x4e4>)
 8011114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011118:	08011131 	.word	0x08011131
 801111c:	08011139 	.word	0x08011139
 8011120:	08011141 	.word	0x08011141
 8011124:	08011149 	.word	0x08011149
 8011128:	08011151 	.word	0x08011151
 801112c:	08011159 	.word	0x08011159
 8011130:	2300      	movs	r3, #0
 8011132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011136:	e050      	b.n	80111da <UART_SetConfig+0x5a6>
 8011138:	2304      	movs	r3, #4
 801113a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801113e:	e04c      	b.n	80111da <UART_SetConfig+0x5a6>
 8011140:	2308      	movs	r3, #8
 8011142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011146:	e048      	b.n	80111da <UART_SetConfig+0x5a6>
 8011148:	2310      	movs	r3, #16
 801114a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801114e:	e044      	b.n	80111da <UART_SetConfig+0x5a6>
 8011150:	2320      	movs	r3, #32
 8011152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011156:	e040      	b.n	80111da <UART_SetConfig+0x5a6>
 8011158:	2340      	movs	r3, #64	; 0x40
 801115a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801115e:	e03c      	b.n	80111da <UART_SetConfig+0x5a6>
 8011160:	2380      	movs	r3, #128	; 0x80
 8011162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011166:	e038      	b.n	80111da <UART_SetConfig+0x5a6>
 8011168:	697b      	ldr	r3, [r7, #20]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	4a5b      	ldr	r2, [pc, #364]	; (80112dc <UART_SetConfig+0x6a8>)
 801116e:	4293      	cmp	r3, r2
 8011170:	d130      	bne.n	80111d4 <UART_SetConfig+0x5a0>
 8011172:	4b57      	ldr	r3, [pc, #348]	; (80112d0 <UART_SetConfig+0x69c>)
 8011174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011176:	f003 0307 	and.w	r3, r3, #7
 801117a:	2b05      	cmp	r3, #5
 801117c:	d826      	bhi.n	80111cc <UART_SetConfig+0x598>
 801117e:	a201      	add	r2, pc, #4	; (adr r2, 8011184 <UART_SetConfig+0x550>)
 8011180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011184:	0801119d 	.word	0x0801119d
 8011188:	080111a5 	.word	0x080111a5
 801118c:	080111ad 	.word	0x080111ad
 8011190:	080111b5 	.word	0x080111b5
 8011194:	080111bd 	.word	0x080111bd
 8011198:	080111c5 	.word	0x080111c5
 801119c:	2302      	movs	r3, #2
 801119e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111a2:	e01a      	b.n	80111da <UART_SetConfig+0x5a6>
 80111a4:	2304      	movs	r3, #4
 80111a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111aa:	e016      	b.n	80111da <UART_SetConfig+0x5a6>
 80111ac:	2308      	movs	r3, #8
 80111ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111b2:	e012      	b.n	80111da <UART_SetConfig+0x5a6>
 80111b4:	2310      	movs	r3, #16
 80111b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ba:	e00e      	b.n	80111da <UART_SetConfig+0x5a6>
 80111bc:	2320      	movs	r3, #32
 80111be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111c2:	e00a      	b.n	80111da <UART_SetConfig+0x5a6>
 80111c4:	2340      	movs	r3, #64	; 0x40
 80111c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ca:	e006      	b.n	80111da <UART_SetConfig+0x5a6>
 80111cc:	2380      	movs	r3, #128	; 0x80
 80111ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111d2:	e002      	b.n	80111da <UART_SetConfig+0x5a6>
 80111d4:	2380      	movs	r3, #128	; 0x80
 80111d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	4a3f      	ldr	r2, [pc, #252]	; (80112dc <UART_SetConfig+0x6a8>)
 80111e0:	4293      	cmp	r3, r2
 80111e2:	f040 80f8 	bne.w	80113d6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80111e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80111ea:	2b20      	cmp	r3, #32
 80111ec:	dc46      	bgt.n	801127c <UART_SetConfig+0x648>
 80111ee:	2b02      	cmp	r3, #2
 80111f0:	f2c0 8082 	blt.w	80112f8 <UART_SetConfig+0x6c4>
 80111f4:	3b02      	subs	r3, #2
 80111f6:	2b1e      	cmp	r3, #30
 80111f8:	d87e      	bhi.n	80112f8 <UART_SetConfig+0x6c4>
 80111fa:	a201      	add	r2, pc, #4	; (adr r2, 8011200 <UART_SetConfig+0x5cc>)
 80111fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011200:	08011283 	.word	0x08011283
 8011204:	080112f9 	.word	0x080112f9
 8011208:	0801128b 	.word	0x0801128b
 801120c:	080112f9 	.word	0x080112f9
 8011210:	080112f9 	.word	0x080112f9
 8011214:	080112f9 	.word	0x080112f9
 8011218:	0801129b 	.word	0x0801129b
 801121c:	080112f9 	.word	0x080112f9
 8011220:	080112f9 	.word	0x080112f9
 8011224:	080112f9 	.word	0x080112f9
 8011228:	080112f9 	.word	0x080112f9
 801122c:	080112f9 	.word	0x080112f9
 8011230:	080112f9 	.word	0x080112f9
 8011234:	080112f9 	.word	0x080112f9
 8011238:	080112ab 	.word	0x080112ab
 801123c:	080112f9 	.word	0x080112f9
 8011240:	080112f9 	.word	0x080112f9
 8011244:	080112f9 	.word	0x080112f9
 8011248:	080112f9 	.word	0x080112f9
 801124c:	080112f9 	.word	0x080112f9
 8011250:	080112f9 	.word	0x080112f9
 8011254:	080112f9 	.word	0x080112f9
 8011258:	080112f9 	.word	0x080112f9
 801125c:	080112f9 	.word	0x080112f9
 8011260:	080112f9 	.word	0x080112f9
 8011264:	080112f9 	.word	0x080112f9
 8011268:	080112f9 	.word	0x080112f9
 801126c:	080112f9 	.word	0x080112f9
 8011270:	080112f9 	.word	0x080112f9
 8011274:	080112f9 	.word	0x080112f9
 8011278:	080112eb 	.word	0x080112eb
 801127c:	2b40      	cmp	r3, #64	; 0x40
 801127e:	d037      	beq.n	80112f0 <UART_SetConfig+0x6bc>
 8011280:	e03a      	b.n	80112f8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011282:	f7fb fd65 	bl	800cd50 <HAL_RCCEx_GetD3PCLK1Freq>
 8011286:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011288:	e03c      	b.n	8011304 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801128a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801128e:	4618      	mov	r0, r3
 8011290:	f7fb fd74 	bl	800cd7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011298:	e034      	b.n	8011304 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801129a:	f107 0318 	add.w	r3, r7, #24
 801129e:	4618      	mov	r0, r3
 80112a0:	f7fb fec0 	bl	800d024 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80112a4:	69fb      	ldr	r3, [r7, #28]
 80112a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112a8:	e02c      	b.n	8011304 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80112aa:	4b09      	ldr	r3, [pc, #36]	; (80112d0 <UART_SetConfig+0x69c>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	f003 0320 	and.w	r3, r3, #32
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d016      	beq.n	80112e4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80112b6:	4b06      	ldr	r3, [pc, #24]	; (80112d0 <UART_SetConfig+0x69c>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	08db      	lsrs	r3, r3, #3
 80112bc:	f003 0303 	and.w	r3, r3, #3
 80112c0:	4a07      	ldr	r2, [pc, #28]	; (80112e0 <UART_SetConfig+0x6ac>)
 80112c2:	fa22 f303 	lsr.w	r3, r2, r3
 80112c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80112c8:	e01c      	b.n	8011304 <UART_SetConfig+0x6d0>
 80112ca:	bf00      	nop
 80112cc:	40011400 	.word	0x40011400
 80112d0:	58024400 	.word	0x58024400
 80112d4:	40007800 	.word	0x40007800
 80112d8:	40007c00 	.word	0x40007c00
 80112dc:	58000c00 	.word	0x58000c00
 80112e0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80112e4:	4b9d      	ldr	r3, [pc, #628]	; (801155c <UART_SetConfig+0x928>)
 80112e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112e8:	e00c      	b.n	8011304 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80112ea:	4b9d      	ldr	r3, [pc, #628]	; (8011560 <UART_SetConfig+0x92c>)
 80112ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112ee:	e009      	b.n	8011304 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80112f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80112f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112f6:	e005      	b.n	8011304 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80112f8:	2300      	movs	r3, #0
 80112fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80112fc:	2301      	movs	r3, #1
 80112fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011302:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011306:	2b00      	cmp	r3, #0
 8011308:	f000 81de 	beq.w	80116c8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801130c:	697b      	ldr	r3, [r7, #20]
 801130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011310:	4a94      	ldr	r2, [pc, #592]	; (8011564 <UART_SetConfig+0x930>)
 8011312:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011316:	461a      	mov	r2, r3
 8011318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801131a:	fbb3 f3f2 	udiv	r3, r3, r2
 801131e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011320:	697b      	ldr	r3, [r7, #20]
 8011322:	685a      	ldr	r2, [r3, #4]
 8011324:	4613      	mov	r3, r2
 8011326:	005b      	lsls	r3, r3, #1
 8011328:	4413      	add	r3, r2
 801132a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801132c:	429a      	cmp	r2, r3
 801132e:	d305      	bcc.n	801133c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011330:	697b      	ldr	r3, [r7, #20]
 8011332:	685b      	ldr	r3, [r3, #4]
 8011334:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011338:	429a      	cmp	r2, r3
 801133a:	d903      	bls.n	8011344 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 801133c:	2301      	movs	r3, #1
 801133e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011342:	e1c1      	b.n	80116c8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011346:	2200      	movs	r2, #0
 8011348:	60bb      	str	r3, [r7, #8]
 801134a:	60fa      	str	r2, [r7, #12]
 801134c:	697b      	ldr	r3, [r7, #20]
 801134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011350:	4a84      	ldr	r2, [pc, #528]	; (8011564 <UART_SetConfig+0x930>)
 8011352:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011356:	b29b      	uxth	r3, r3
 8011358:	2200      	movs	r2, #0
 801135a:	603b      	str	r3, [r7, #0]
 801135c:	607a      	str	r2, [r7, #4]
 801135e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011362:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011366:	f7ee ffbb 	bl	80002e0 <__aeabi_uldivmod>
 801136a:	4602      	mov	r2, r0
 801136c:	460b      	mov	r3, r1
 801136e:	4610      	mov	r0, r2
 8011370:	4619      	mov	r1, r3
 8011372:	f04f 0200 	mov.w	r2, #0
 8011376:	f04f 0300 	mov.w	r3, #0
 801137a:	020b      	lsls	r3, r1, #8
 801137c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011380:	0202      	lsls	r2, r0, #8
 8011382:	6979      	ldr	r1, [r7, #20]
 8011384:	6849      	ldr	r1, [r1, #4]
 8011386:	0849      	lsrs	r1, r1, #1
 8011388:	2000      	movs	r0, #0
 801138a:	460c      	mov	r4, r1
 801138c:	4605      	mov	r5, r0
 801138e:	eb12 0804 	adds.w	r8, r2, r4
 8011392:	eb43 0905 	adc.w	r9, r3, r5
 8011396:	697b      	ldr	r3, [r7, #20]
 8011398:	685b      	ldr	r3, [r3, #4]
 801139a:	2200      	movs	r2, #0
 801139c:	469a      	mov	sl, r3
 801139e:	4693      	mov	fp, r2
 80113a0:	4652      	mov	r2, sl
 80113a2:	465b      	mov	r3, fp
 80113a4:	4640      	mov	r0, r8
 80113a6:	4649      	mov	r1, r9
 80113a8:	f7ee ff9a 	bl	80002e0 <__aeabi_uldivmod>
 80113ac:	4602      	mov	r2, r0
 80113ae:	460b      	mov	r3, r1
 80113b0:	4613      	mov	r3, r2
 80113b2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80113b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80113ba:	d308      	bcc.n	80113ce <UART_SetConfig+0x79a>
 80113bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80113c2:	d204      	bcs.n	80113ce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80113ca:	60da      	str	r2, [r3, #12]
 80113cc:	e17c      	b.n	80116c8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80113ce:	2301      	movs	r3, #1
 80113d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80113d4:	e178      	b.n	80116c8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80113d6:	697b      	ldr	r3, [r7, #20]
 80113d8:	69db      	ldr	r3, [r3, #28]
 80113da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80113de:	f040 80c5 	bne.w	801156c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80113e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80113e6:	2b20      	cmp	r3, #32
 80113e8:	dc48      	bgt.n	801147c <UART_SetConfig+0x848>
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	db7b      	blt.n	80114e6 <UART_SetConfig+0x8b2>
 80113ee:	2b20      	cmp	r3, #32
 80113f0:	d879      	bhi.n	80114e6 <UART_SetConfig+0x8b2>
 80113f2:	a201      	add	r2, pc, #4	; (adr r2, 80113f8 <UART_SetConfig+0x7c4>)
 80113f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113f8:	08011483 	.word	0x08011483
 80113fc:	0801148b 	.word	0x0801148b
 8011400:	080114e7 	.word	0x080114e7
 8011404:	080114e7 	.word	0x080114e7
 8011408:	08011493 	.word	0x08011493
 801140c:	080114e7 	.word	0x080114e7
 8011410:	080114e7 	.word	0x080114e7
 8011414:	080114e7 	.word	0x080114e7
 8011418:	080114a3 	.word	0x080114a3
 801141c:	080114e7 	.word	0x080114e7
 8011420:	080114e7 	.word	0x080114e7
 8011424:	080114e7 	.word	0x080114e7
 8011428:	080114e7 	.word	0x080114e7
 801142c:	080114e7 	.word	0x080114e7
 8011430:	080114e7 	.word	0x080114e7
 8011434:	080114e7 	.word	0x080114e7
 8011438:	080114b3 	.word	0x080114b3
 801143c:	080114e7 	.word	0x080114e7
 8011440:	080114e7 	.word	0x080114e7
 8011444:	080114e7 	.word	0x080114e7
 8011448:	080114e7 	.word	0x080114e7
 801144c:	080114e7 	.word	0x080114e7
 8011450:	080114e7 	.word	0x080114e7
 8011454:	080114e7 	.word	0x080114e7
 8011458:	080114e7 	.word	0x080114e7
 801145c:	080114e7 	.word	0x080114e7
 8011460:	080114e7 	.word	0x080114e7
 8011464:	080114e7 	.word	0x080114e7
 8011468:	080114e7 	.word	0x080114e7
 801146c:	080114e7 	.word	0x080114e7
 8011470:	080114e7 	.word	0x080114e7
 8011474:	080114e7 	.word	0x080114e7
 8011478:	080114d9 	.word	0x080114d9
 801147c:	2b40      	cmp	r3, #64	; 0x40
 801147e:	d02e      	beq.n	80114de <UART_SetConfig+0x8aa>
 8011480:	e031      	b.n	80114e6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011482:	f7f9 fc6d 	bl	800ad60 <HAL_RCC_GetPCLK1Freq>
 8011486:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011488:	e033      	b.n	80114f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801148a:	f7f9 fc7f 	bl	800ad8c <HAL_RCC_GetPCLK2Freq>
 801148e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011490:	e02f      	b.n	80114f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011496:	4618      	mov	r0, r3
 8011498:	f7fb fc70 	bl	800cd7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801149c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801149e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114a0:	e027      	b.n	80114f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80114a2:	f107 0318 	add.w	r3, r7, #24
 80114a6:	4618      	mov	r0, r3
 80114a8:	f7fb fdbc 	bl	800d024 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80114ac:	69fb      	ldr	r3, [r7, #28]
 80114ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114b0:	e01f      	b.n	80114f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80114b2:	4b2d      	ldr	r3, [pc, #180]	; (8011568 <UART_SetConfig+0x934>)
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	f003 0320 	and.w	r3, r3, #32
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d009      	beq.n	80114d2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80114be:	4b2a      	ldr	r3, [pc, #168]	; (8011568 <UART_SetConfig+0x934>)
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	08db      	lsrs	r3, r3, #3
 80114c4:	f003 0303 	and.w	r3, r3, #3
 80114c8:	4a24      	ldr	r2, [pc, #144]	; (801155c <UART_SetConfig+0x928>)
 80114ca:	fa22 f303 	lsr.w	r3, r2, r3
 80114ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80114d0:	e00f      	b.n	80114f2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80114d2:	4b22      	ldr	r3, [pc, #136]	; (801155c <UART_SetConfig+0x928>)
 80114d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114d6:	e00c      	b.n	80114f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80114d8:	4b21      	ldr	r3, [pc, #132]	; (8011560 <UART_SetConfig+0x92c>)
 80114da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114dc:	e009      	b.n	80114f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80114de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80114e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114e4:	e005      	b.n	80114f2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80114e6:	2300      	movs	r3, #0
 80114e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80114ea:	2301      	movs	r3, #1
 80114ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80114f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80114f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	f000 80e7 	beq.w	80116c8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80114fa:	697b      	ldr	r3, [r7, #20]
 80114fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114fe:	4a19      	ldr	r2, [pc, #100]	; (8011564 <UART_SetConfig+0x930>)
 8011500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011504:	461a      	mov	r2, r3
 8011506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011508:	fbb3 f3f2 	udiv	r3, r3, r2
 801150c:	005a      	lsls	r2, r3, #1
 801150e:	697b      	ldr	r3, [r7, #20]
 8011510:	685b      	ldr	r3, [r3, #4]
 8011512:	085b      	lsrs	r3, r3, #1
 8011514:	441a      	add	r2, r3
 8011516:	697b      	ldr	r3, [r7, #20]
 8011518:	685b      	ldr	r3, [r3, #4]
 801151a:	fbb2 f3f3 	udiv	r3, r2, r3
 801151e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011522:	2b0f      	cmp	r3, #15
 8011524:	d916      	bls.n	8011554 <UART_SetConfig+0x920>
 8011526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801152c:	d212      	bcs.n	8011554 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801152e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011530:	b29b      	uxth	r3, r3
 8011532:	f023 030f 	bic.w	r3, r3, #15
 8011536:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801153a:	085b      	lsrs	r3, r3, #1
 801153c:	b29b      	uxth	r3, r3
 801153e:	f003 0307 	and.w	r3, r3, #7
 8011542:	b29a      	uxth	r2, r3
 8011544:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011546:	4313      	orrs	r3, r2
 8011548:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801154a:	697b      	ldr	r3, [r7, #20]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011550:	60da      	str	r2, [r3, #12]
 8011552:	e0b9      	b.n	80116c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011554:	2301      	movs	r3, #1
 8011556:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801155a:	e0b5      	b.n	80116c8 <UART_SetConfig+0xa94>
 801155c:	03d09000 	.word	0x03d09000
 8011560:	003d0900 	.word	0x003d0900
 8011564:	08016e4c 	.word	0x08016e4c
 8011568:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 801156c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011570:	2b20      	cmp	r3, #32
 8011572:	dc49      	bgt.n	8011608 <UART_SetConfig+0x9d4>
 8011574:	2b00      	cmp	r3, #0
 8011576:	db7c      	blt.n	8011672 <UART_SetConfig+0xa3e>
 8011578:	2b20      	cmp	r3, #32
 801157a:	d87a      	bhi.n	8011672 <UART_SetConfig+0xa3e>
 801157c:	a201      	add	r2, pc, #4	; (adr r2, 8011584 <UART_SetConfig+0x950>)
 801157e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011582:	bf00      	nop
 8011584:	0801160f 	.word	0x0801160f
 8011588:	08011617 	.word	0x08011617
 801158c:	08011673 	.word	0x08011673
 8011590:	08011673 	.word	0x08011673
 8011594:	0801161f 	.word	0x0801161f
 8011598:	08011673 	.word	0x08011673
 801159c:	08011673 	.word	0x08011673
 80115a0:	08011673 	.word	0x08011673
 80115a4:	0801162f 	.word	0x0801162f
 80115a8:	08011673 	.word	0x08011673
 80115ac:	08011673 	.word	0x08011673
 80115b0:	08011673 	.word	0x08011673
 80115b4:	08011673 	.word	0x08011673
 80115b8:	08011673 	.word	0x08011673
 80115bc:	08011673 	.word	0x08011673
 80115c0:	08011673 	.word	0x08011673
 80115c4:	0801163f 	.word	0x0801163f
 80115c8:	08011673 	.word	0x08011673
 80115cc:	08011673 	.word	0x08011673
 80115d0:	08011673 	.word	0x08011673
 80115d4:	08011673 	.word	0x08011673
 80115d8:	08011673 	.word	0x08011673
 80115dc:	08011673 	.word	0x08011673
 80115e0:	08011673 	.word	0x08011673
 80115e4:	08011673 	.word	0x08011673
 80115e8:	08011673 	.word	0x08011673
 80115ec:	08011673 	.word	0x08011673
 80115f0:	08011673 	.word	0x08011673
 80115f4:	08011673 	.word	0x08011673
 80115f8:	08011673 	.word	0x08011673
 80115fc:	08011673 	.word	0x08011673
 8011600:	08011673 	.word	0x08011673
 8011604:	08011665 	.word	0x08011665
 8011608:	2b40      	cmp	r3, #64	; 0x40
 801160a:	d02e      	beq.n	801166a <UART_SetConfig+0xa36>
 801160c:	e031      	b.n	8011672 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801160e:	f7f9 fba7 	bl	800ad60 <HAL_RCC_GetPCLK1Freq>
 8011612:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011614:	e033      	b.n	801167e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011616:	f7f9 fbb9 	bl	800ad8c <HAL_RCC_GetPCLK2Freq>
 801161a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801161c:	e02f      	b.n	801167e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801161e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011622:	4618      	mov	r0, r3
 8011624:	f7fb fbaa 	bl	800cd7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801162a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801162c:	e027      	b.n	801167e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801162e:	f107 0318 	add.w	r3, r7, #24
 8011632:	4618      	mov	r0, r3
 8011634:	f7fb fcf6 	bl	800d024 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011638:	69fb      	ldr	r3, [r7, #28]
 801163a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801163c:	e01f      	b.n	801167e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801163e:	4b2d      	ldr	r3, [pc, #180]	; (80116f4 <UART_SetConfig+0xac0>)
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	f003 0320 	and.w	r3, r3, #32
 8011646:	2b00      	cmp	r3, #0
 8011648:	d009      	beq.n	801165e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801164a:	4b2a      	ldr	r3, [pc, #168]	; (80116f4 <UART_SetConfig+0xac0>)
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	08db      	lsrs	r3, r3, #3
 8011650:	f003 0303 	and.w	r3, r3, #3
 8011654:	4a28      	ldr	r2, [pc, #160]	; (80116f8 <UART_SetConfig+0xac4>)
 8011656:	fa22 f303 	lsr.w	r3, r2, r3
 801165a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801165c:	e00f      	b.n	801167e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801165e:	4b26      	ldr	r3, [pc, #152]	; (80116f8 <UART_SetConfig+0xac4>)
 8011660:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011662:	e00c      	b.n	801167e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011664:	4b25      	ldr	r3, [pc, #148]	; (80116fc <UART_SetConfig+0xac8>)
 8011666:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011668:	e009      	b.n	801167e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801166a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801166e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011670:	e005      	b.n	801167e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8011672:	2300      	movs	r3, #0
 8011674:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011676:	2301      	movs	r3, #1
 8011678:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801167c:	bf00      	nop
    }

    if (pclk != 0U)
 801167e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011680:	2b00      	cmp	r3, #0
 8011682:	d021      	beq.n	80116c8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011688:	4a1d      	ldr	r2, [pc, #116]	; (8011700 <UART_SetConfig+0xacc>)
 801168a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801168e:	461a      	mov	r2, r3
 8011690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011692:	fbb3 f2f2 	udiv	r2, r3, r2
 8011696:	697b      	ldr	r3, [r7, #20]
 8011698:	685b      	ldr	r3, [r3, #4]
 801169a:	085b      	lsrs	r3, r3, #1
 801169c:	441a      	add	r2, r3
 801169e:	697b      	ldr	r3, [r7, #20]
 80116a0:	685b      	ldr	r3, [r3, #4]
 80116a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80116a6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80116a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116aa:	2b0f      	cmp	r3, #15
 80116ac:	d909      	bls.n	80116c2 <UART_SetConfig+0xa8e>
 80116ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80116b4:	d205      	bcs.n	80116c2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80116b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116b8:	b29a      	uxth	r2, r3
 80116ba:	697b      	ldr	r3, [r7, #20]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	60da      	str	r2, [r3, #12]
 80116c0:	e002      	b.n	80116c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80116c2:	2301      	movs	r3, #1
 80116c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80116c8:	697b      	ldr	r3, [r7, #20]
 80116ca:	2201      	movs	r2, #1
 80116cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80116d0:	697b      	ldr	r3, [r7, #20]
 80116d2:	2201      	movs	r2, #1
 80116d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80116d8:	697b      	ldr	r3, [r7, #20]
 80116da:	2200      	movs	r2, #0
 80116dc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80116de:	697b      	ldr	r3, [r7, #20]
 80116e0:	2200      	movs	r2, #0
 80116e2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80116e4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80116e8:	4618      	mov	r0, r3
 80116ea:	3748      	adds	r7, #72	; 0x48
 80116ec:	46bd      	mov	sp, r7
 80116ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80116f2:	bf00      	nop
 80116f4:	58024400 	.word	0x58024400
 80116f8:	03d09000 	.word	0x03d09000
 80116fc:	003d0900 	.word	0x003d0900
 8011700:	08016e4c 	.word	0x08016e4c

08011704 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011704:	b480      	push	{r7}
 8011706:	b083      	sub	sp, #12
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011710:	f003 0308 	and.w	r3, r3, #8
 8011714:	2b00      	cmp	r3, #0
 8011716:	d00a      	beq.n	801172e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	685b      	ldr	r3, [r3, #4]
 801171e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	430a      	orrs	r2, r1
 801172c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011732:	f003 0301 	and.w	r3, r3, #1
 8011736:	2b00      	cmp	r3, #0
 8011738:	d00a      	beq.n	8011750 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	685b      	ldr	r3, [r3, #4]
 8011740:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	430a      	orrs	r2, r1
 801174e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011754:	f003 0302 	and.w	r3, r3, #2
 8011758:	2b00      	cmp	r3, #0
 801175a:	d00a      	beq.n	8011772 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	685b      	ldr	r3, [r3, #4]
 8011762:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	430a      	orrs	r2, r1
 8011770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011776:	f003 0304 	and.w	r3, r3, #4
 801177a:	2b00      	cmp	r3, #0
 801177c:	d00a      	beq.n	8011794 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	685b      	ldr	r3, [r3, #4]
 8011784:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	430a      	orrs	r2, r1
 8011792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011798:	f003 0310 	and.w	r3, r3, #16
 801179c:	2b00      	cmp	r3, #0
 801179e:	d00a      	beq.n	80117b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	689b      	ldr	r3, [r3, #8]
 80117a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	430a      	orrs	r2, r1
 80117b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117ba:	f003 0320 	and.w	r3, r3, #32
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d00a      	beq.n	80117d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	689b      	ldr	r3, [r3, #8]
 80117c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	430a      	orrs	r2, r1
 80117d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d01a      	beq.n	801181a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	685b      	ldr	r3, [r3, #4]
 80117ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	430a      	orrs	r2, r1
 80117f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011802:	d10a      	bne.n	801181a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	685b      	ldr	r3, [r3, #4]
 801180a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	430a      	orrs	r2, r1
 8011818:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801181e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011822:	2b00      	cmp	r3, #0
 8011824:	d00a      	beq.n	801183c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	685b      	ldr	r3, [r3, #4]
 801182c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	430a      	orrs	r2, r1
 801183a:	605a      	str	r2, [r3, #4]
  }
}
 801183c:	bf00      	nop
 801183e:	370c      	adds	r7, #12
 8011840:	46bd      	mov	sp, r7
 8011842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011846:	4770      	bx	lr

08011848 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b098      	sub	sp, #96	; 0x60
 801184c:	af02      	add	r7, sp, #8
 801184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	2200      	movs	r2, #0
 8011854:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011858:	f7f2 faf4 	bl	8003e44 <HAL_GetTick>
 801185c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	f003 0308 	and.w	r3, r3, #8
 8011868:	2b08      	cmp	r3, #8
 801186a:	d12f      	bne.n	80118cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801186c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011870:	9300      	str	r3, [sp, #0]
 8011872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011874:	2200      	movs	r2, #0
 8011876:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	f000 f88e 	bl	801199c <UART_WaitOnFlagUntilTimeout>
 8011880:	4603      	mov	r3, r0
 8011882:	2b00      	cmp	r3, #0
 8011884:	d022      	beq.n	80118cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801188c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801188e:	e853 3f00 	ldrex	r3, [r3]
 8011892:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801189a:	653b      	str	r3, [r7, #80]	; 0x50
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	461a      	mov	r2, r3
 80118a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118a4:	647b      	str	r3, [r7, #68]	; 0x44
 80118a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80118aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80118ac:	e841 2300 	strex	r3, r2, [r1]
 80118b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80118b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d1e6      	bne.n	8011886 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	2220      	movs	r2, #32
 80118bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	2200      	movs	r2, #0
 80118c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80118c8:	2303      	movs	r3, #3
 80118ca:	e063      	b.n	8011994 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	f003 0304 	and.w	r3, r3, #4
 80118d6:	2b04      	cmp	r3, #4
 80118d8:	d149      	bne.n	801196e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80118da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80118de:	9300      	str	r3, [sp, #0]
 80118e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118e2:	2200      	movs	r2, #0
 80118e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80118e8:	6878      	ldr	r0, [r7, #4]
 80118ea:	f000 f857 	bl	801199c <UART_WaitOnFlagUntilTimeout>
 80118ee:	4603      	mov	r3, r0
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d03c      	beq.n	801196e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118fc:	e853 3f00 	ldrex	r3, [r3]
 8011900:	623b      	str	r3, [r7, #32]
   return(result);
 8011902:	6a3b      	ldr	r3, [r7, #32]
 8011904:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011908:	64fb      	str	r3, [r7, #76]	; 0x4c
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	461a      	mov	r2, r3
 8011910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011912:	633b      	str	r3, [r7, #48]	; 0x30
 8011914:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011916:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801191a:	e841 2300 	strex	r3, r2, [r1]
 801191e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011922:	2b00      	cmp	r3, #0
 8011924:	d1e6      	bne.n	80118f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	3308      	adds	r3, #8
 801192c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801192e:	693b      	ldr	r3, [r7, #16]
 8011930:	e853 3f00 	ldrex	r3, [r3]
 8011934:	60fb      	str	r3, [r7, #12]
   return(result);
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	f023 0301 	bic.w	r3, r3, #1
 801193c:	64bb      	str	r3, [r7, #72]	; 0x48
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	3308      	adds	r3, #8
 8011944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011946:	61fa      	str	r2, [r7, #28]
 8011948:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801194a:	69b9      	ldr	r1, [r7, #24]
 801194c:	69fa      	ldr	r2, [r7, #28]
 801194e:	e841 2300 	strex	r3, r2, [r1]
 8011952:	617b      	str	r3, [r7, #20]
   return(result);
 8011954:	697b      	ldr	r3, [r7, #20]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d1e5      	bne.n	8011926 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	2220      	movs	r2, #32
 801195e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	2200      	movs	r2, #0
 8011966:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801196a:	2303      	movs	r3, #3
 801196c:	e012      	b.n	8011994 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2220      	movs	r2, #32
 8011972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	2220      	movs	r2, #32
 801197a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	2200      	movs	r2, #0
 8011982:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2200      	movs	r2, #0
 8011988:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	2200      	movs	r2, #0
 801198e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011992:	2300      	movs	r3, #0
}
 8011994:	4618      	mov	r0, r3
 8011996:	3758      	adds	r7, #88	; 0x58
 8011998:	46bd      	mov	sp, r7
 801199a:	bd80      	pop	{r7, pc}

0801199c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b084      	sub	sp, #16
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	60f8      	str	r0, [r7, #12]
 80119a4:	60b9      	str	r1, [r7, #8]
 80119a6:	603b      	str	r3, [r7, #0]
 80119a8:	4613      	mov	r3, r2
 80119aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80119ac:	e04f      	b.n	8011a4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80119ae:	69bb      	ldr	r3, [r7, #24]
 80119b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80119b4:	d04b      	beq.n	8011a4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80119b6:	f7f2 fa45 	bl	8003e44 <HAL_GetTick>
 80119ba:	4602      	mov	r2, r0
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	1ad3      	subs	r3, r2, r3
 80119c0:	69ba      	ldr	r2, [r7, #24]
 80119c2:	429a      	cmp	r2, r3
 80119c4:	d302      	bcc.n	80119cc <UART_WaitOnFlagUntilTimeout+0x30>
 80119c6:	69bb      	ldr	r3, [r7, #24]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d101      	bne.n	80119d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80119cc:	2303      	movs	r3, #3
 80119ce:	e04e      	b.n	8011a6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	f003 0304 	and.w	r3, r3, #4
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d037      	beq.n	8011a4e <UART_WaitOnFlagUntilTimeout+0xb2>
 80119de:	68bb      	ldr	r3, [r7, #8]
 80119e0:	2b80      	cmp	r3, #128	; 0x80
 80119e2:	d034      	beq.n	8011a4e <UART_WaitOnFlagUntilTimeout+0xb2>
 80119e4:	68bb      	ldr	r3, [r7, #8]
 80119e6:	2b40      	cmp	r3, #64	; 0x40
 80119e8:	d031      	beq.n	8011a4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	69db      	ldr	r3, [r3, #28]
 80119f0:	f003 0308 	and.w	r3, r3, #8
 80119f4:	2b08      	cmp	r3, #8
 80119f6:	d110      	bne.n	8011a1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	2208      	movs	r2, #8
 80119fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011a00:	68f8      	ldr	r0, [r7, #12]
 8011a02:	f000 f95b 	bl	8011cbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	2208      	movs	r2, #8
 8011a0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	2200      	movs	r2, #0
 8011a12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011a16:	2301      	movs	r3, #1
 8011a18:	e029      	b.n	8011a6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	69db      	ldr	r3, [r3, #28]
 8011a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011a28:	d111      	bne.n	8011a4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011a32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011a34:	68f8      	ldr	r0, [r7, #12]
 8011a36:	f000 f941 	bl	8011cbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	2220      	movs	r2, #32
 8011a3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	2200      	movs	r2, #0
 8011a46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011a4a:	2303      	movs	r3, #3
 8011a4c:	e00f      	b.n	8011a6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	69da      	ldr	r2, [r3, #28]
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	4013      	ands	r3, r2
 8011a58:	68ba      	ldr	r2, [r7, #8]
 8011a5a:	429a      	cmp	r2, r3
 8011a5c:	bf0c      	ite	eq
 8011a5e:	2301      	moveq	r3, #1
 8011a60:	2300      	movne	r3, #0
 8011a62:	b2db      	uxtb	r3, r3
 8011a64:	461a      	mov	r2, r3
 8011a66:	79fb      	ldrb	r3, [r7, #7]
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d0a0      	beq.n	80119ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011a6c:	2300      	movs	r3, #0
}
 8011a6e:	4618      	mov	r0, r3
 8011a70:	3710      	adds	r7, #16
 8011a72:	46bd      	mov	sp, r7
 8011a74:	bd80      	pop	{r7, pc}
	...

08011a78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011a78:	b480      	push	{r7}
 8011a7a:	b0a3      	sub	sp, #140	; 0x8c
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	60f8      	str	r0, [r7, #12]
 8011a80:	60b9      	str	r1, [r7, #8]
 8011a82:	4613      	mov	r3, r2
 8011a84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	68ba      	ldr	r2, [r7, #8]
 8011a8a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	88fa      	ldrh	r2, [r7, #6]
 8011a90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	88fa      	ldrh	r2, [r7, #6]
 8011a98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	689b      	ldr	r3, [r3, #8]
 8011aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011aaa:	d10e      	bne.n	8011aca <UART_Start_Receive_IT+0x52>
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	691b      	ldr	r3, [r3, #16]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d105      	bne.n	8011ac0 <UART_Start_Receive_IT+0x48>
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011aba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011abe:	e02d      	b.n	8011b1c <UART_Start_Receive_IT+0xa4>
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	22ff      	movs	r2, #255	; 0xff
 8011ac4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011ac8:	e028      	b.n	8011b1c <UART_Start_Receive_IT+0xa4>
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	689b      	ldr	r3, [r3, #8]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d10d      	bne.n	8011aee <UART_Start_Receive_IT+0x76>
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	691b      	ldr	r3, [r3, #16]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d104      	bne.n	8011ae4 <UART_Start_Receive_IT+0x6c>
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	22ff      	movs	r2, #255	; 0xff
 8011ade:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011ae2:	e01b      	b.n	8011b1c <UART_Start_Receive_IT+0xa4>
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	227f      	movs	r2, #127	; 0x7f
 8011ae8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011aec:	e016      	b.n	8011b1c <UART_Start_Receive_IT+0xa4>
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	689b      	ldr	r3, [r3, #8]
 8011af2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011af6:	d10d      	bne.n	8011b14 <UART_Start_Receive_IT+0x9c>
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	691b      	ldr	r3, [r3, #16]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d104      	bne.n	8011b0a <UART_Start_Receive_IT+0x92>
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	227f      	movs	r2, #127	; 0x7f
 8011b04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011b08:	e008      	b.n	8011b1c <UART_Start_Receive_IT+0xa4>
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	223f      	movs	r2, #63	; 0x3f
 8011b0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011b12:	e003      	b.n	8011b1c <UART_Start_Receive_IT+0xa4>
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	2200      	movs	r2, #0
 8011b18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	2200      	movs	r2, #0
 8011b20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	2222      	movs	r2, #34	; 0x22
 8011b28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	3308      	adds	r3, #8
 8011b32:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011b36:	e853 3f00 	ldrex	r3, [r3]
 8011b3a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011b3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011b3e:	f043 0301 	orr.w	r3, r3, #1
 8011b42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	3308      	adds	r3, #8
 8011b4c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011b50:	673a      	str	r2, [r7, #112]	; 0x70
 8011b52:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b54:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011b56:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011b58:	e841 2300 	strex	r3, r2, [r1]
 8011b5c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8011b5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d1e3      	bne.n	8011b2c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011b68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011b6c:	d14f      	bne.n	8011c0e <UART_Start_Receive_IT+0x196>
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011b74:	88fa      	ldrh	r2, [r7, #6]
 8011b76:	429a      	cmp	r2, r3
 8011b78:	d349      	bcc.n	8011c0e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	689b      	ldr	r3, [r3, #8]
 8011b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011b82:	d107      	bne.n	8011b94 <UART_Start_Receive_IT+0x11c>
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	691b      	ldr	r3, [r3, #16]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d103      	bne.n	8011b94 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	4a47      	ldr	r2, [pc, #284]	; (8011cac <UART_Start_Receive_IT+0x234>)
 8011b90:	675a      	str	r2, [r3, #116]	; 0x74
 8011b92:	e002      	b.n	8011b9a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	4a46      	ldr	r2, [pc, #280]	; (8011cb0 <UART_Start_Receive_IT+0x238>)
 8011b98:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	691b      	ldr	r3, [r3, #16]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d01a      	beq.n	8011bd8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011baa:	e853 3f00 	ldrex	r3, [r3]
 8011bae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011bb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	461a      	mov	r2, r3
 8011bc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011bc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011bc6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bc8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011bca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011bcc:	e841 2300 	strex	r3, r2, [r1]
 8011bd0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d1e4      	bne.n	8011ba2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	3308      	adds	r3, #8
 8011bde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011be2:	e853 3f00 	ldrex	r3, [r3]
 8011be6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011bee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	3308      	adds	r3, #8
 8011bf6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011bf8:	64ba      	str	r2, [r7, #72]	; 0x48
 8011bfa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bfc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011bfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c00:	e841 2300 	strex	r3, r2, [r1]
 8011c04:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d1e5      	bne.n	8011bd8 <UART_Start_Receive_IT+0x160>
 8011c0c:	e046      	b.n	8011c9c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	689b      	ldr	r3, [r3, #8]
 8011c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011c16:	d107      	bne.n	8011c28 <UART_Start_Receive_IT+0x1b0>
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	691b      	ldr	r3, [r3, #16]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d103      	bne.n	8011c28 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	4a24      	ldr	r2, [pc, #144]	; (8011cb4 <UART_Start_Receive_IT+0x23c>)
 8011c24:	675a      	str	r2, [r3, #116]	; 0x74
 8011c26:	e002      	b.n	8011c2e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	4a23      	ldr	r2, [pc, #140]	; (8011cb8 <UART_Start_Receive_IT+0x240>)
 8011c2c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	691b      	ldr	r3, [r3, #16]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d019      	beq.n	8011c6a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c3e:	e853 3f00 	ldrex	r3, [r3]
 8011c42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c46:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011c4a:	677b      	str	r3, [r7, #116]	; 0x74
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	461a      	mov	r2, r3
 8011c52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011c54:	637b      	str	r3, [r7, #52]	; 0x34
 8011c56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011c5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c5c:	e841 2300 	strex	r3, r2, [r1]
 8011c60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d1e6      	bne.n	8011c36 <UART_Start_Receive_IT+0x1be>
 8011c68:	e018      	b.n	8011c9c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c70:	697b      	ldr	r3, [r7, #20]
 8011c72:	e853 3f00 	ldrex	r3, [r3]
 8011c76:	613b      	str	r3, [r7, #16]
   return(result);
 8011c78:	693b      	ldr	r3, [r7, #16]
 8011c7a:	f043 0320 	orr.w	r3, r3, #32
 8011c7e:	67bb      	str	r3, [r7, #120]	; 0x78
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	461a      	mov	r2, r3
 8011c86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011c88:	623b      	str	r3, [r7, #32]
 8011c8a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c8c:	69f9      	ldr	r1, [r7, #28]
 8011c8e:	6a3a      	ldr	r2, [r7, #32]
 8011c90:	e841 2300 	strex	r3, r2, [r1]
 8011c94:	61bb      	str	r3, [r7, #24]
   return(result);
 8011c96:	69bb      	ldr	r3, [r7, #24]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d1e6      	bne.n	8011c6a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011c9c:	2300      	movs	r3, #0
}
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	378c      	adds	r7, #140	; 0x8c
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca8:	4770      	bx	lr
 8011caa:	bf00      	nop
 8011cac:	080124dd 	.word	0x080124dd
 8011cb0:	0801217d 	.word	0x0801217d
 8011cb4:	08011fc5 	.word	0x08011fc5
 8011cb8:	08011e0d 	.word	0x08011e0d

08011cbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011cbc:	b480      	push	{r7}
 8011cbe:	b095      	sub	sp, #84	; 0x54
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ccc:	e853 3f00 	ldrex	r3, [r3]
 8011cd0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	461a      	mov	r2, r3
 8011ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ce2:	643b      	str	r3, [r7, #64]	; 0x40
 8011ce4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ce6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011ce8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011cea:	e841 2300 	strex	r3, r2, [r1]
 8011cee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d1e6      	bne.n	8011cc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	3308      	adds	r3, #8
 8011cfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cfe:	6a3b      	ldr	r3, [r7, #32]
 8011d00:	e853 3f00 	ldrex	r3, [r3]
 8011d04:	61fb      	str	r3, [r7, #28]
   return(result);
 8011d06:	69fa      	ldr	r2, [r7, #28]
 8011d08:	4b1e      	ldr	r3, [pc, #120]	; (8011d84 <UART_EndRxTransfer+0xc8>)
 8011d0a:	4013      	ands	r3, r2
 8011d0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	3308      	adds	r3, #8
 8011d14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011d16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011d18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d1e:	e841 2300 	strex	r3, r2, [r1]
 8011d22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d1e5      	bne.n	8011cf6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d2e:	2b01      	cmp	r3, #1
 8011d30:	d118      	bne.n	8011d64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	e853 3f00 	ldrex	r3, [r3]
 8011d3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	f023 0310 	bic.w	r3, r3, #16
 8011d46:	647b      	str	r3, [r7, #68]	; 0x44
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	461a      	mov	r2, r3
 8011d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d50:	61bb      	str	r3, [r7, #24]
 8011d52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d54:	6979      	ldr	r1, [r7, #20]
 8011d56:	69ba      	ldr	r2, [r7, #24]
 8011d58:	e841 2300 	strex	r3, r2, [r1]
 8011d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8011d5e:	693b      	ldr	r3, [r7, #16]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d1e6      	bne.n	8011d32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2220      	movs	r2, #32
 8011d68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	2200      	movs	r2, #0
 8011d70:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	2200      	movs	r2, #0
 8011d76:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011d78:	bf00      	nop
 8011d7a:	3754      	adds	r7, #84	; 0x54
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d82:	4770      	bx	lr
 8011d84:	effffffe 	.word	0xeffffffe

08011d88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b084      	sub	sp, #16
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	2200      	movs	r2, #0
 8011d9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	2200      	movs	r2, #0
 8011da2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011da6:	68f8      	ldr	r0, [r7, #12]
 8011da8:	f7fe ff2e 	bl	8010c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011dac:	bf00      	nop
 8011dae:	3710      	adds	r7, #16
 8011db0:	46bd      	mov	sp, r7
 8011db2:	bd80      	pop	{r7, pc}

08011db4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b088      	sub	sp, #32
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	e853 3f00 	ldrex	r3, [r3]
 8011dc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8011dca:	68bb      	ldr	r3, [r7, #8]
 8011dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011dd0:	61fb      	str	r3, [r7, #28]
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	461a      	mov	r2, r3
 8011dd8:	69fb      	ldr	r3, [r7, #28]
 8011dda:	61bb      	str	r3, [r7, #24]
 8011ddc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dde:	6979      	ldr	r1, [r7, #20]
 8011de0:	69ba      	ldr	r2, [r7, #24]
 8011de2:	e841 2300 	strex	r3, r2, [r1]
 8011de6:	613b      	str	r3, [r7, #16]
   return(result);
 8011de8:	693b      	ldr	r3, [r7, #16]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d1e6      	bne.n	8011dbc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	2220      	movs	r2, #32
 8011df2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2200      	movs	r2, #0
 8011dfa:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011dfc:	6878      	ldr	r0, [r7, #4]
 8011dfe:	f7fe fef9 	bl	8010bf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011e02:	bf00      	nop
 8011e04:	3720      	adds	r7, #32
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bd80      	pop	{r7, pc}
	...

08011e0c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b09c      	sub	sp, #112	; 0x70
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e1a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e24:	2b22      	cmp	r3, #34	; 0x22
 8011e26:	f040 80be 	bne.w	8011fa6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e30:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011e34:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011e38:	b2d9      	uxtb	r1, r3
 8011e3a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011e3e:	b2da      	uxtb	r2, r3
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e44:	400a      	ands	r2, r1
 8011e46:	b2d2      	uxtb	r2, r2
 8011e48:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e4e:	1c5a      	adds	r2, r3, #1
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011e5a:	b29b      	uxth	r3, r3
 8011e5c:	3b01      	subs	r3, #1
 8011e5e:	b29a      	uxth	r2, r3
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011e6c:	b29b      	uxth	r3, r3
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	f040 80a1 	bne.w	8011fb6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e7c:	e853 3f00 	ldrex	r3, [r3]
 8011e80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011e88:	66bb      	str	r3, [r7, #104]	; 0x68
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	461a      	mov	r2, r3
 8011e90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011e92:	65bb      	str	r3, [r7, #88]	; 0x58
 8011e94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011e98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011e9a:	e841 2300 	strex	r3, r2, [r1]
 8011e9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d1e6      	bne.n	8011e74 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	3308      	adds	r3, #8
 8011eac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eb0:	e853 3f00 	ldrex	r3, [r3]
 8011eb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011eb8:	f023 0301 	bic.w	r3, r3, #1
 8011ebc:	667b      	str	r3, [r7, #100]	; 0x64
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	3308      	adds	r3, #8
 8011ec4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011ec6:	647a      	str	r2, [r7, #68]	; 0x44
 8011ec8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011eca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011ecc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011ece:	e841 2300 	strex	r3, r2, [r1]
 8011ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d1e5      	bne.n	8011ea6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	2220      	movs	r2, #32
 8011ede:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	2200      	movs	r2, #0
 8011eec:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	4a33      	ldr	r2, [pc, #204]	; (8011fc0 <UART_RxISR_8BIT+0x1b4>)
 8011ef4:	4293      	cmp	r3, r2
 8011ef6:	d01f      	beq.n	8011f38 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	685b      	ldr	r3, [r3, #4]
 8011efe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d018      	beq.n	8011f38 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f0e:	e853 3f00 	ldrex	r3, [r3]
 8011f12:	623b      	str	r3, [r7, #32]
   return(result);
 8011f14:	6a3b      	ldr	r3, [r7, #32]
 8011f16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011f1a:	663b      	str	r3, [r7, #96]	; 0x60
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	461a      	mov	r2, r3
 8011f22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011f24:	633b      	str	r3, [r7, #48]	; 0x30
 8011f26:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f2c:	e841 2300 	strex	r3, r2, [r1]
 8011f30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d1e6      	bne.n	8011f06 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f3c:	2b01      	cmp	r3, #1
 8011f3e:	d12e      	bne.n	8011f9e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	2200      	movs	r2, #0
 8011f44:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f4c:	693b      	ldr	r3, [r7, #16]
 8011f4e:	e853 3f00 	ldrex	r3, [r3]
 8011f52:	60fb      	str	r3, [r7, #12]
   return(result);
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	f023 0310 	bic.w	r3, r3, #16
 8011f5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	461a      	mov	r2, r3
 8011f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011f64:	61fb      	str	r3, [r7, #28]
 8011f66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f68:	69b9      	ldr	r1, [r7, #24]
 8011f6a:	69fa      	ldr	r2, [r7, #28]
 8011f6c:	e841 2300 	strex	r3, r2, [r1]
 8011f70:	617b      	str	r3, [r7, #20]
   return(result);
 8011f72:	697b      	ldr	r3, [r7, #20]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d1e6      	bne.n	8011f46 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	69db      	ldr	r3, [r3, #28]
 8011f7e:	f003 0310 	and.w	r3, r3, #16
 8011f82:	2b10      	cmp	r3, #16
 8011f84:	d103      	bne.n	8011f8e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	2210      	movs	r2, #16
 8011f8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011f94:	4619      	mov	r1, r3
 8011f96:	6878      	ldr	r0, [r7, #4]
 8011f98:	f7fe fe40 	bl	8010c1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011f9c:	e00b      	b.n	8011fb6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011f9e:	6878      	ldr	r0, [r7, #4]
 8011fa0:	f7ef fad8 	bl	8001554 <HAL_UART_RxCpltCallback>
}
 8011fa4:	e007      	b.n	8011fb6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	699a      	ldr	r2, [r3, #24]
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	f042 0208 	orr.w	r2, r2, #8
 8011fb4:	619a      	str	r2, [r3, #24]
}
 8011fb6:	bf00      	nop
 8011fb8:	3770      	adds	r7, #112	; 0x70
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bd80      	pop	{r7, pc}
 8011fbe:	bf00      	nop
 8011fc0:	58000c00 	.word	0x58000c00

08011fc4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b09c      	sub	sp, #112	; 0x70
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011fd2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011fdc:	2b22      	cmp	r3, #34	; 0x22
 8011fde:	f040 80be 	bne.w	801215e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fe8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ff0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8011ff2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8011ff6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011ffa:	4013      	ands	r3, r2
 8011ffc:	b29a      	uxth	r2, r3
 8011ffe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012000:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012006:	1c9a      	adds	r2, r3, #2
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012012:	b29b      	uxth	r3, r3
 8012014:	3b01      	subs	r3, #1
 8012016:	b29a      	uxth	r2, r3
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012024:	b29b      	uxth	r3, r3
 8012026:	2b00      	cmp	r3, #0
 8012028:	f040 80a1 	bne.w	801216e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012034:	e853 3f00 	ldrex	r3, [r3]
 8012038:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801203a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801203c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012040:	667b      	str	r3, [r7, #100]	; 0x64
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	461a      	mov	r2, r3
 8012048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801204a:	657b      	str	r3, [r7, #84]	; 0x54
 801204c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801204e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012050:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012052:	e841 2300 	strex	r3, r2, [r1]
 8012056:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801205a:	2b00      	cmp	r3, #0
 801205c:	d1e6      	bne.n	801202c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	3308      	adds	r3, #8
 8012064:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012068:	e853 3f00 	ldrex	r3, [r3]
 801206c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801206e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012070:	f023 0301 	bic.w	r3, r3, #1
 8012074:	663b      	str	r3, [r7, #96]	; 0x60
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	3308      	adds	r3, #8
 801207c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801207e:	643a      	str	r2, [r7, #64]	; 0x40
 8012080:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012082:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012084:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012086:	e841 2300 	strex	r3, r2, [r1]
 801208a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801208c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801208e:	2b00      	cmp	r3, #0
 8012090:	d1e5      	bne.n	801205e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	2220      	movs	r2, #32
 8012096:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	2200      	movs	r2, #0
 801209e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	2200      	movs	r2, #0
 80120a4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	4a33      	ldr	r2, [pc, #204]	; (8012178 <UART_RxISR_16BIT+0x1b4>)
 80120ac:	4293      	cmp	r3, r2
 80120ae:	d01f      	beq.n	80120f0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	685b      	ldr	r3, [r3, #4]
 80120b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d018      	beq.n	80120f0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120c4:	6a3b      	ldr	r3, [r7, #32]
 80120c6:	e853 3f00 	ldrex	r3, [r3]
 80120ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80120cc:	69fb      	ldr	r3, [r7, #28]
 80120ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80120d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	461a      	mov	r2, r3
 80120da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80120dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80120de:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80120e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80120e4:	e841 2300 	strex	r3, r2, [r1]
 80120e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80120ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d1e6      	bne.n	80120be <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120f4:	2b01      	cmp	r3, #1
 80120f6:	d12e      	bne.n	8012156 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	2200      	movs	r2, #0
 80120fc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	e853 3f00 	ldrex	r3, [r3]
 801210a:	60bb      	str	r3, [r7, #8]
   return(result);
 801210c:	68bb      	ldr	r3, [r7, #8]
 801210e:	f023 0310 	bic.w	r3, r3, #16
 8012112:	65bb      	str	r3, [r7, #88]	; 0x58
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	461a      	mov	r2, r3
 801211a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801211c:	61bb      	str	r3, [r7, #24]
 801211e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012120:	6979      	ldr	r1, [r7, #20]
 8012122:	69ba      	ldr	r2, [r7, #24]
 8012124:	e841 2300 	strex	r3, r2, [r1]
 8012128:	613b      	str	r3, [r7, #16]
   return(result);
 801212a:	693b      	ldr	r3, [r7, #16]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d1e6      	bne.n	80120fe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	69db      	ldr	r3, [r3, #28]
 8012136:	f003 0310 	and.w	r3, r3, #16
 801213a:	2b10      	cmp	r3, #16
 801213c:	d103      	bne.n	8012146 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	2210      	movs	r2, #16
 8012144:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801214c:	4619      	mov	r1, r3
 801214e:	6878      	ldr	r0, [r7, #4]
 8012150:	f7fe fd64 	bl	8010c1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012154:	e00b      	b.n	801216e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012156:	6878      	ldr	r0, [r7, #4]
 8012158:	f7ef f9fc 	bl	8001554 <HAL_UART_RxCpltCallback>
}
 801215c:	e007      	b.n	801216e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	699a      	ldr	r2, [r3, #24]
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	f042 0208 	orr.w	r2, r2, #8
 801216c:	619a      	str	r2, [r3, #24]
}
 801216e:	bf00      	nop
 8012170:	3770      	adds	r7, #112	; 0x70
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}
 8012176:	bf00      	nop
 8012178:	58000c00 	.word	0x58000c00

0801217c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b0ac      	sub	sp, #176	; 0xb0
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801218a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	69db      	ldr	r3, [r3, #28]
 8012194:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	689b      	ldr	r3, [r3, #8]
 80121a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80121b2:	2b22      	cmp	r3, #34	; 0x22
 80121b4:	f040 8180 	bne.w	80124b8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80121be:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80121c2:	e123      	b.n	801240c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121ca:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80121ce:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80121d2:	b2d9      	uxtb	r1, r3
 80121d4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80121d8:	b2da      	uxtb	r2, r3
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80121de:	400a      	ands	r2, r1
 80121e0:	b2d2      	uxtb	r2, r2
 80121e2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80121e8:	1c5a      	adds	r2, r3, #1
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80121f4:	b29b      	uxth	r3, r3
 80121f6:	3b01      	subs	r3, #1
 80121f8:	b29a      	uxth	r2, r3
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	69db      	ldr	r3, [r3, #28]
 8012206:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801220a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801220e:	f003 0307 	and.w	r3, r3, #7
 8012212:	2b00      	cmp	r3, #0
 8012214:	d053      	beq.n	80122be <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801221a:	f003 0301 	and.w	r3, r3, #1
 801221e:	2b00      	cmp	r3, #0
 8012220:	d011      	beq.n	8012246 <UART_RxISR_8BIT_FIFOEN+0xca>
 8012222:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801222a:	2b00      	cmp	r3, #0
 801222c:	d00b      	beq.n	8012246 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	2201      	movs	r2, #1
 8012234:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801223c:	f043 0201 	orr.w	r2, r3, #1
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801224a:	f003 0302 	and.w	r3, r3, #2
 801224e:	2b00      	cmp	r3, #0
 8012250:	d011      	beq.n	8012276 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8012252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012256:	f003 0301 	and.w	r3, r3, #1
 801225a:	2b00      	cmp	r3, #0
 801225c:	d00b      	beq.n	8012276 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	2202      	movs	r2, #2
 8012264:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801226c:	f043 0204 	orr.w	r2, r3, #4
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801227a:	f003 0304 	and.w	r3, r3, #4
 801227e:	2b00      	cmp	r3, #0
 8012280:	d011      	beq.n	80122a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8012282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012286:	f003 0301 	and.w	r3, r3, #1
 801228a:	2b00      	cmp	r3, #0
 801228c:	d00b      	beq.n	80122a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	2204      	movs	r2, #4
 8012294:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801229c:	f043 0202 	orr.w	r2, r3, #2
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d006      	beq.n	80122be <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80122b0:	6878      	ldr	r0, [r7, #4]
 80122b2:	f7fe fca9 	bl	8010c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	2200      	movs	r2, #0
 80122ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80122c4:	b29b      	uxth	r3, r3
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	f040 80a0 	bne.w	801240c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80122d4:	e853 3f00 	ldrex	r3, [r3]
 80122d8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80122da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80122dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80122e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	461a      	mov	r2, r3
 80122ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80122ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80122f0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122f2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80122f4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80122f6:	e841 2300 	strex	r3, r2, [r1]
 80122fa:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80122fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d1e4      	bne.n	80122cc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	3308      	adds	r3, #8
 8012308:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801230a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801230c:	e853 3f00 	ldrex	r3, [r3]
 8012310:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8012312:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012314:	4b6e      	ldr	r3, [pc, #440]	; (80124d0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8012316:	4013      	ands	r3, r2
 8012318:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	3308      	adds	r3, #8
 8012322:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012326:	66ba      	str	r2, [r7, #104]	; 0x68
 8012328:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801232a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801232c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801232e:	e841 2300 	strex	r3, r2, [r1]
 8012332:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012334:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012336:	2b00      	cmp	r3, #0
 8012338:	d1e3      	bne.n	8012302 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	2220      	movs	r2, #32
 801233e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	2200      	movs	r2, #0
 8012346:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	2200      	movs	r2, #0
 801234c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	4a60      	ldr	r2, [pc, #384]	; (80124d4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012354:	4293      	cmp	r3, r2
 8012356:	d021      	beq.n	801239c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	685b      	ldr	r3, [r3, #4]
 801235e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012362:	2b00      	cmp	r3, #0
 8012364:	d01a      	beq.n	801239c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801236c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801236e:	e853 3f00 	ldrex	r3, [r3]
 8012372:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012376:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801237a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	461a      	mov	r2, r3
 8012384:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012388:	657b      	str	r3, [r7, #84]	; 0x54
 801238a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801238c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801238e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012390:	e841 2300 	strex	r3, r2, [r1]
 8012394:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012398:	2b00      	cmp	r3, #0
 801239a:	d1e4      	bne.n	8012366 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123a0:	2b01      	cmp	r3, #1
 80123a2:	d130      	bne.n	8012406 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	2200      	movs	r2, #0
 80123a8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123b2:	e853 3f00 	ldrex	r3, [r3]
 80123b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80123b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ba:	f023 0310 	bic.w	r3, r3, #16
 80123be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	461a      	mov	r2, r3
 80123c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80123cc:	643b      	str	r3, [r7, #64]	; 0x40
 80123ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80123d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80123d4:	e841 2300 	strex	r3, r2, [r1]
 80123d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80123da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d1e4      	bne.n	80123aa <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	69db      	ldr	r3, [r3, #28]
 80123e6:	f003 0310 	and.w	r3, r3, #16
 80123ea:	2b10      	cmp	r3, #16
 80123ec:	d103      	bne.n	80123f6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	2210      	movs	r2, #16
 80123f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80123fc:	4619      	mov	r1, r3
 80123fe:	6878      	ldr	r0, [r7, #4]
 8012400:	f7fe fc0c 	bl	8010c1c <HAL_UARTEx_RxEventCallback>
 8012404:	e002      	b.n	801240c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012406:	6878      	ldr	r0, [r7, #4]
 8012408:	f7ef f8a4 	bl	8001554 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801240c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8012410:	2b00      	cmp	r3, #0
 8012412:	d006      	beq.n	8012422 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8012414:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012418:	f003 0320 	and.w	r3, r3, #32
 801241c:	2b00      	cmp	r3, #0
 801241e:	f47f aed1 	bne.w	80121c4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012428:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801242c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012430:	2b00      	cmp	r3, #0
 8012432:	d049      	beq.n	80124c8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801243a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801243e:	429a      	cmp	r2, r3
 8012440:	d242      	bcs.n	80124c8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	3308      	adds	r3, #8
 8012448:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801244a:	6a3b      	ldr	r3, [r7, #32]
 801244c:	e853 3f00 	ldrex	r3, [r3]
 8012450:	61fb      	str	r3, [r7, #28]
   return(result);
 8012452:	69fb      	ldr	r3, [r7, #28]
 8012454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	3308      	adds	r3, #8
 8012462:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012466:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012468:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801246a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801246c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801246e:	e841 2300 	strex	r3, r2, [r1]
 8012472:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012476:	2b00      	cmp	r3, #0
 8012478:	d1e3      	bne.n	8012442 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	4a16      	ldr	r2, [pc, #88]	; (80124d8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801247e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	e853 3f00 	ldrex	r3, [r3]
 801248c:	60bb      	str	r3, [r7, #8]
   return(result);
 801248e:	68bb      	ldr	r3, [r7, #8]
 8012490:	f043 0320 	orr.w	r3, r3, #32
 8012494:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	461a      	mov	r2, r3
 801249e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80124a2:	61bb      	str	r3, [r7, #24]
 80124a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124a6:	6979      	ldr	r1, [r7, #20]
 80124a8:	69ba      	ldr	r2, [r7, #24]
 80124aa:	e841 2300 	strex	r3, r2, [r1]
 80124ae:	613b      	str	r3, [r7, #16]
   return(result);
 80124b0:	693b      	ldr	r3, [r7, #16]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d1e4      	bne.n	8012480 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80124b6:	e007      	b.n	80124c8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	699a      	ldr	r2, [r3, #24]
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	f042 0208 	orr.w	r2, r2, #8
 80124c6:	619a      	str	r2, [r3, #24]
}
 80124c8:	bf00      	nop
 80124ca:	37b0      	adds	r7, #176	; 0xb0
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}
 80124d0:	effffffe 	.word	0xeffffffe
 80124d4:	58000c00 	.word	0x58000c00
 80124d8:	08011e0d 	.word	0x08011e0d

080124dc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b0ae      	sub	sp, #184	; 0xb8
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80124ea:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	69db      	ldr	r3, [r3, #28]
 80124f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	689b      	ldr	r3, [r3, #8]
 8012508:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012512:	2b22      	cmp	r3, #34	; 0x22
 8012514:	f040 8184 	bne.w	8012820 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801251e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012522:	e127      	b.n	8012774 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801252a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012532:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8012536:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801253a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801253e:	4013      	ands	r3, r2
 8012540:	b29a      	uxth	r2, r3
 8012542:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012546:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801254c:	1c9a      	adds	r2, r3, #2
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012558:	b29b      	uxth	r3, r3
 801255a:	3b01      	subs	r3, #1
 801255c:	b29a      	uxth	r2, r3
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	69db      	ldr	r3, [r3, #28]
 801256a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801256e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012572:	f003 0307 	and.w	r3, r3, #7
 8012576:	2b00      	cmp	r3, #0
 8012578:	d053      	beq.n	8012622 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801257a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801257e:	f003 0301 	and.w	r3, r3, #1
 8012582:	2b00      	cmp	r3, #0
 8012584:	d011      	beq.n	80125aa <UART_RxISR_16BIT_FIFOEN+0xce>
 8012586:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801258a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801258e:	2b00      	cmp	r3, #0
 8012590:	d00b      	beq.n	80125aa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	2201      	movs	r2, #1
 8012598:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125a0:	f043 0201 	orr.w	r2, r3, #1
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80125aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80125ae:	f003 0302 	and.w	r3, r3, #2
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d011      	beq.n	80125da <UART_RxISR_16BIT_FIFOEN+0xfe>
 80125b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80125ba:	f003 0301 	and.w	r3, r3, #1
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d00b      	beq.n	80125da <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	2202      	movs	r2, #2
 80125c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125d0:	f043 0204 	orr.w	r2, r3, #4
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80125da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80125de:	f003 0304 	and.w	r3, r3, #4
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d011      	beq.n	801260a <UART_RxISR_16BIT_FIFOEN+0x12e>
 80125e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80125ea:	f003 0301 	and.w	r3, r3, #1
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d00b      	beq.n	801260a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	2204      	movs	r2, #4
 80125f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012600:	f043 0202 	orr.w	r2, r3, #2
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012610:	2b00      	cmp	r3, #0
 8012612:	d006      	beq.n	8012622 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012614:	6878      	ldr	r0, [r7, #4]
 8012616:	f7fe faf7 	bl	8010c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	2200      	movs	r2, #0
 801261e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012628:	b29b      	uxth	r3, r3
 801262a:	2b00      	cmp	r3, #0
 801262c:	f040 80a2 	bne.w	8012774 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012638:	e853 3f00 	ldrex	r3, [r3]
 801263c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801263e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012644:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	461a      	mov	r2, r3
 801264e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012652:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012656:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012658:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801265a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801265e:	e841 2300 	strex	r3, r2, [r1]
 8012662:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012666:	2b00      	cmp	r3, #0
 8012668:	d1e2      	bne.n	8012630 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	3308      	adds	r3, #8
 8012670:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012674:	e853 3f00 	ldrex	r3, [r3]
 8012678:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801267a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801267c:	4b6e      	ldr	r3, [pc, #440]	; (8012838 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801267e:	4013      	ands	r3, r2
 8012680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	3308      	adds	r3, #8
 801268a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801268e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012690:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012692:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012694:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012696:	e841 2300 	strex	r3, r2, [r1]
 801269a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801269c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d1e3      	bne.n	801266a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	2220      	movs	r2, #32
 80126a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	2200      	movs	r2, #0
 80126ae:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	2200      	movs	r2, #0
 80126b4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	4a60      	ldr	r2, [pc, #384]	; (801283c <UART_RxISR_16BIT_FIFOEN+0x360>)
 80126bc:	4293      	cmp	r3, r2
 80126be:	d021      	beq.n	8012704 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	685b      	ldr	r3, [r3, #4]
 80126c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d01a      	beq.n	8012704 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126d6:	e853 3f00 	ldrex	r3, [r3]
 80126da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80126dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80126e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	461a      	mov	r2, r3
 80126ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80126f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80126f2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80126f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80126f8:	e841 2300 	strex	r3, r2, [r1]
 80126fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80126fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012700:	2b00      	cmp	r3, #0
 8012702:	d1e4      	bne.n	80126ce <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012708:	2b01      	cmp	r3, #1
 801270a:	d130      	bne.n	801276e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	2200      	movs	r2, #0
 8012710:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801271a:	e853 3f00 	ldrex	r3, [r3]
 801271e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012722:	f023 0310 	bic.w	r3, r3, #16
 8012726:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	461a      	mov	r2, r3
 8012730:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012734:	647b      	str	r3, [r7, #68]	; 0x44
 8012736:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012738:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801273a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801273c:	e841 2300 	strex	r3, r2, [r1]
 8012740:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012744:	2b00      	cmp	r3, #0
 8012746:	d1e4      	bne.n	8012712 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	69db      	ldr	r3, [r3, #28]
 801274e:	f003 0310 	and.w	r3, r3, #16
 8012752:	2b10      	cmp	r3, #16
 8012754:	d103      	bne.n	801275e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	2210      	movs	r2, #16
 801275c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012764:	4619      	mov	r1, r3
 8012766:	6878      	ldr	r0, [r7, #4]
 8012768:	f7fe fa58 	bl	8010c1c <HAL_UARTEx_RxEventCallback>
 801276c:	e002      	b.n	8012774 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801276e:	6878      	ldr	r0, [r7, #4]
 8012770:	f7ee fef0 	bl	8001554 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012774:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012778:	2b00      	cmp	r3, #0
 801277a:	d006      	beq.n	801278a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 801277c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012780:	f003 0320 	and.w	r3, r3, #32
 8012784:	2b00      	cmp	r3, #0
 8012786:	f47f aecd 	bne.w	8012524 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012790:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012794:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012798:	2b00      	cmp	r3, #0
 801279a:	d049      	beq.n	8012830 <UART_RxISR_16BIT_FIFOEN+0x354>
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80127a2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80127a6:	429a      	cmp	r2, r3
 80127a8:	d242      	bcs.n	8012830 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	3308      	adds	r3, #8
 80127b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127b4:	e853 3f00 	ldrex	r3, [r3]
 80127b8:	623b      	str	r3, [r7, #32]
   return(result);
 80127ba:	6a3b      	ldr	r3, [r7, #32]
 80127bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80127c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	3308      	adds	r3, #8
 80127ca:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80127ce:	633a      	str	r2, [r7, #48]	; 0x30
 80127d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80127d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127d6:	e841 2300 	strex	r3, r2, [r1]
 80127da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80127dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d1e3      	bne.n	80127aa <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	4a16      	ldr	r2, [pc, #88]	; (8012840 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80127e6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127ee:	693b      	ldr	r3, [r7, #16]
 80127f0:	e853 3f00 	ldrex	r3, [r3]
 80127f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	f043 0320 	orr.w	r3, r3, #32
 80127fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	461a      	mov	r2, r3
 8012806:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801280a:	61fb      	str	r3, [r7, #28]
 801280c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801280e:	69b9      	ldr	r1, [r7, #24]
 8012810:	69fa      	ldr	r2, [r7, #28]
 8012812:	e841 2300 	strex	r3, r2, [r1]
 8012816:	617b      	str	r3, [r7, #20]
   return(result);
 8012818:	697b      	ldr	r3, [r7, #20]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d1e4      	bne.n	80127e8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801281e:	e007      	b.n	8012830 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	699a      	ldr	r2, [r3, #24]
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	f042 0208 	orr.w	r2, r2, #8
 801282e:	619a      	str	r2, [r3, #24]
}
 8012830:	bf00      	nop
 8012832:	37b8      	adds	r7, #184	; 0xb8
 8012834:	46bd      	mov	sp, r7
 8012836:	bd80      	pop	{r7, pc}
 8012838:	effffffe 	.word	0xeffffffe
 801283c:	58000c00 	.word	0x58000c00
 8012840:	08011fc5 	.word	0x08011fc5

08012844 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012844:	b480      	push	{r7}
 8012846:	b083      	sub	sp, #12
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801284c:	bf00      	nop
 801284e:	370c      	adds	r7, #12
 8012850:	46bd      	mov	sp, r7
 8012852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012856:	4770      	bx	lr

08012858 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012858:	b480      	push	{r7}
 801285a:	b083      	sub	sp, #12
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012860:	bf00      	nop
 8012862:	370c      	adds	r7, #12
 8012864:	46bd      	mov	sp, r7
 8012866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286a:	4770      	bx	lr

0801286c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801286c:	b480      	push	{r7}
 801286e:	b083      	sub	sp, #12
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012874:	bf00      	nop
 8012876:	370c      	adds	r7, #12
 8012878:	46bd      	mov	sp, r7
 801287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287e:	4770      	bx	lr

08012880 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8012880:	b480      	push	{r7}
 8012882:	b089      	sub	sp, #36	; 0x24
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801288e:	2b01      	cmp	r3, #1
 8012890:	d101      	bne.n	8012896 <HAL_UARTEx_EnableStopMode+0x16>
 8012892:	2302      	movs	r3, #2
 8012894:	e021      	b.n	80128da <HAL_UARTEx_EnableStopMode+0x5a>
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	2201      	movs	r2, #1
 801289a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	e853 3f00 	ldrex	r3, [r3]
 80128aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80128ac:	68bb      	ldr	r3, [r7, #8]
 80128ae:	f043 0302 	orr.w	r3, r3, #2
 80128b2:	61fb      	str	r3, [r7, #28]
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	461a      	mov	r2, r3
 80128ba:	69fb      	ldr	r3, [r7, #28]
 80128bc:	61bb      	str	r3, [r7, #24]
 80128be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128c0:	6979      	ldr	r1, [r7, #20]
 80128c2:	69ba      	ldr	r2, [r7, #24]
 80128c4:	e841 2300 	strex	r3, r2, [r1]
 80128c8:	613b      	str	r3, [r7, #16]
   return(result);
 80128ca:	693b      	ldr	r3, [r7, #16]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d1e6      	bne.n	801289e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	2200      	movs	r2, #0
 80128d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80128d8:	2300      	movs	r3, #0
}
 80128da:	4618      	mov	r0, r3
 80128dc:	3724      	adds	r7, #36	; 0x24
 80128de:	46bd      	mov	sp, r7
 80128e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e4:	4770      	bx	lr

080128e6 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80128e6:	b580      	push	{r7, lr}
 80128e8:	b084      	sub	sp, #16
 80128ea:	af00      	add	r7, sp, #0
 80128ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80128f4:	2b01      	cmp	r3, #1
 80128f6:	d101      	bne.n	80128fc <HAL_UARTEx_EnableFifoMode+0x16>
 80128f8:	2302      	movs	r3, #2
 80128fa:	e02b      	b.n	8012954 <HAL_UARTEx_EnableFifoMode+0x6e>
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	2201      	movs	r2, #1
 8012900:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	2224      	movs	r2, #36	; 0x24
 8012908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	681a      	ldr	r2, [r3, #0]
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	f022 0201 	bic.w	r2, r2, #1
 8012922:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801292a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8012932:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	68fa      	ldr	r2, [r7, #12]
 801293a:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801293c:	6878      	ldr	r0, [r7, #4]
 801293e:	f000 f8c3 	bl	8012ac8 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	2220      	movs	r2, #32
 8012946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	2200      	movs	r2, #0
 801294e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012952:	2300      	movs	r3, #0
}
 8012954:	4618      	mov	r0, r3
 8012956:	3710      	adds	r7, #16
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}

0801295c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801295c:	b480      	push	{r7}
 801295e:	b085      	sub	sp, #20
 8012960:	af00      	add	r7, sp, #0
 8012962:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801296a:	2b01      	cmp	r3, #1
 801296c:	d101      	bne.n	8012972 <HAL_UARTEx_DisableFifoMode+0x16>
 801296e:	2302      	movs	r3, #2
 8012970:	e027      	b.n	80129c2 <HAL_UARTEx_DisableFifoMode+0x66>
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	2201      	movs	r2, #1
 8012976:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	2224      	movs	r2, #36	; 0x24
 801297e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	681a      	ldr	r2, [r3, #0]
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	f022 0201 	bic.w	r2, r2, #1
 8012998:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80129a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	2200      	movs	r2, #0
 80129a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	68fa      	ldr	r2, [r7, #12]
 80129ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2220      	movs	r2, #32
 80129b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	2200      	movs	r2, #0
 80129bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80129c0:	2300      	movs	r3, #0
}
 80129c2:	4618      	mov	r0, r3
 80129c4:	3714      	adds	r7, #20
 80129c6:	46bd      	mov	sp, r7
 80129c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129cc:	4770      	bx	lr

080129ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80129ce:	b580      	push	{r7, lr}
 80129d0:	b084      	sub	sp, #16
 80129d2:	af00      	add	r7, sp, #0
 80129d4:	6078      	str	r0, [r7, #4]
 80129d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80129de:	2b01      	cmp	r3, #1
 80129e0:	d101      	bne.n	80129e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80129e2:	2302      	movs	r3, #2
 80129e4:	e02d      	b.n	8012a42 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	2201      	movs	r2, #1
 80129ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	2224      	movs	r2, #36	; 0x24
 80129f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	681a      	ldr	r2, [r3, #0]
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	f022 0201 	bic.w	r2, r2, #1
 8012a0c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	689b      	ldr	r3, [r3, #8]
 8012a14:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	683a      	ldr	r2, [r7, #0]
 8012a1e:	430a      	orrs	r2, r1
 8012a20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012a22:	6878      	ldr	r0, [r7, #4]
 8012a24:	f000 f850 	bl	8012ac8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	68fa      	ldr	r2, [r7, #12]
 8012a2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	2220      	movs	r2, #32
 8012a34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	2200      	movs	r2, #0
 8012a3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012a40:	2300      	movs	r3, #0
}
 8012a42:	4618      	mov	r0, r3
 8012a44:	3710      	adds	r7, #16
 8012a46:	46bd      	mov	sp, r7
 8012a48:	bd80      	pop	{r7, pc}

08012a4a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012a4a:	b580      	push	{r7, lr}
 8012a4c:	b084      	sub	sp, #16
 8012a4e:	af00      	add	r7, sp, #0
 8012a50:	6078      	str	r0, [r7, #4]
 8012a52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012a5a:	2b01      	cmp	r3, #1
 8012a5c:	d101      	bne.n	8012a62 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012a5e:	2302      	movs	r3, #2
 8012a60:	e02d      	b.n	8012abe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	2201      	movs	r2, #1
 8012a66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	2224      	movs	r2, #36	; 0x24
 8012a6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	681a      	ldr	r2, [r3, #0]
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	f022 0201 	bic.w	r2, r2, #1
 8012a88:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	689b      	ldr	r3, [r3, #8]
 8012a90:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	683a      	ldr	r2, [r7, #0]
 8012a9a:	430a      	orrs	r2, r1
 8012a9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012a9e:	6878      	ldr	r0, [r7, #4]
 8012aa0:	f000 f812 	bl	8012ac8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	68fa      	ldr	r2, [r7, #12]
 8012aaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	2220      	movs	r2, #32
 8012ab0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012abc:	2300      	movs	r3, #0
}
 8012abe:	4618      	mov	r0, r3
 8012ac0:	3710      	adds	r7, #16
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd80      	pop	{r7, pc}
	...

08012ac8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012ac8:	b480      	push	{r7}
 8012aca:	b085      	sub	sp, #20
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d108      	bne.n	8012aea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	2201      	movs	r2, #1
 8012adc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	2201      	movs	r2, #1
 8012ae4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012ae8:	e031      	b.n	8012b4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012aea:	2310      	movs	r3, #16
 8012aec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012aee:	2310      	movs	r3, #16
 8012af0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	689b      	ldr	r3, [r3, #8]
 8012af8:	0e5b      	lsrs	r3, r3, #25
 8012afa:	b2db      	uxtb	r3, r3
 8012afc:	f003 0307 	and.w	r3, r3, #7
 8012b00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	689b      	ldr	r3, [r3, #8]
 8012b08:	0f5b      	lsrs	r3, r3, #29
 8012b0a:	b2db      	uxtb	r3, r3
 8012b0c:	f003 0307 	and.w	r3, r3, #7
 8012b10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012b12:	7bbb      	ldrb	r3, [r7, #14]
 8012b14:	7b3a      	ldrb	r2, [r7, #12]
 8012b16:	4911      	ldr	r1, [pc, #68]	; (8012b5c <UARTEx_SetNbDataToProcess+0x94>)
 8012b18:	5c8a      	ldrb	r2, [r1, r2]
 8012b1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012b1e:	7b3a      	ldrb	r2, [r7, #12]
 8012b20:	490f      	ldr	r1, [pc, #60]	; (8012b60 <UARTEx_SetNbDataToProcess+0x98>)
 8012b22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012b24:	fb93 f3f2 	sdiv	r3, r3, r2
 8012b28:	b29a      	uxth	r2, r3
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012b30:	7bfb      	ldrb	r3, [r7, #15]
 8012b32:	7b7a      	ldrb	r2, [r7, #13]
 8012b34:	4909      	ldr	r1, [pc, #36]	; (8012b5c <UARTEx_SetNbDataToProcess+0x94>)
 8012b36:	5c8a      	ldrb	r2, [r1, r2]
 8012b38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012b3c:	7b7a      	ldrb	r2, [r7, #13]
 8012b3e:	4908      	ldr	r1, [pc, #32]	; (8012b60 <UARTEx_SetNbDataToProcess+0x98>)
 8012b40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012b42:	fb93 f3f2 	sdiv	r3, r3, r2
 8012b46:	b29a      	uxth	r2, r3
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012b4e:	bf00      	nop
 8012b50:	3714      	adds	r7, #20
 8012b52:	46bd      	mov	sp, r7
 8012b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b58:	4770      	bx	lr
 8012b5a:	bf00      	nop
 8012b5c:	08016e64 	.word	0x08016e64
 8012b60:	08016e6c 	.word	0x08016e6c

08012b64 <__NVIC_SetPriority>:
{
 8012b64:	b480      	push	{r7}
 8012b66:	b083      	sub	sp, #12
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	4603      	mov	r3, r0
 8012b6c:	6039      	str	r1, [r7, #0]
 8012b6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012b70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	db0a      	blt.n	8012b8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012b78:	683b      	ldr	r3, [r7, #0]
 8012b7a:	b2da      	uxtb	r2, r3
 8012b7c:	490c      	ldr	r1, [pc, #48]	; (8012bb0 <__NVIC_SetPriority+0x4c>)
 8012b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012b82:	0112      	lsls	r2, r2, #4
 8012b84:	b2d2      	uxtb	r2, r2
 8012b86:	440b      	add	r3, r1
 8012b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012b8c:	e00a      	b.n	8012ba4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012b8e:	683b      	ldr	r3, [r7, #0]
 8012b90:	b2da      	uxtb	r2, r3
 8012b92:	4908      	ldr	r1, [pc, #32]	; (8012bb4 <__NVIC_SetPriority+0x50>)
 8012b94:	88fb      	ldrh	r3, [r7, #6]
 8012b96:	f003 030f 	and.w	r3, r3, #15
 8012b9a:	3b04      	subs	r3, #4
 8012b9c:	0112      	lsls	r2, r2, #4
 8012b9e:	b2d2      	uxtb	r2, r2
 8012ba0:	440b      	add	r3, r1
 8012ba2:	761a      	strb	r2, [r3, #24]
}
 8012ba4:	bf00      	nop
 8012ba6:	370c      	adds	r7, #12
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bae:	4770      	bx	lr
 8012bb0:	e000e100 	.word	0xe000e100
 8012bb4:	e000ed00 	.word	0xe000ed00

08012bb8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012bbc:	4b05      	ldr	r3, [pc, #20]	; (8012bd4 <SysTick_Handler+0x1c>)
 8012bbe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012bc0:	f002 f958 	bl	8014e74 <xTaskGetSchedulerState>
 8012bc4:	4603      	mov	r3, r0
 8012bc6:	2b01      	cmp	r3, #1
 8012bc8:	d001      	beq.n	8012bce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012bca:	f002 ff75 	bl	8015ab8 <xPortSysTickHandler>
  }
}
 8012bce:	bf00      	nop
 8012bd0:	bd80      	pop	{r7, pc}
 8012bd2:	bf00      	nop
 8012bd4:	e000e010 	.word	0xe000e010

08012bd8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012bdc:	2100      	movs	r1, #0
 8012bde:	f06f 0004 	mvn.w	r0, #4
 8012be2:	f7ff ffbf 	bl	8012b64 <__NVIC_SetPriority>
#endif
}
 8012be6:	bf00      	nop
 8012be8:	bd80      	pop	{r7, pc}
	...

08012bec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012bec:	b480      	push	{r7}
 8012bee:	b083      	sub	sp, #12
 8012bf0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012bf2:	f3ef 8305 	mrs	r3, IPSR
 8012bf6:	603b      	str	r3, [r7, #0]
  return(result);
 8012bf8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d003      	beq.n	8012c06 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8012bfe:	f06f 0305 	mvn.w	r3, #5
 8012c02:	607b      	str	r3, [r7, #4]
 8012c04:	e00c      	b.n	8012c20 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012c06:	4b0a      	ldr	r3, [pc, #40]	; (8012c30 <osKernelInitialize+0x44>)
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d105      	bne.n	8012c1a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012c0e:	4b08      	ldr	r3, [pc, #32]	; (8012c30 <osKernelInitialize+0x44>)
 8012c10:	2201      	movs	r2, #1
 8012c12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012c14:	2300      	movs	r3, #0
 8012c16:	607b      	str	r3, [r7, #4]
 8012c18:	e002      	b.n	8012c20 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012c1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012c20:	687b      	ldr	r3, [r7, #4]
}
 8012c22:	4618      	mov	r0, r3
 8012c24:	370c      	adds	r7, #12
 8012c26:	46bd      	mov	sp, r7
 8012c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2c:	4770      	bx	lr
 8012c2e:	bf00      	nop
 8012c30:	24001d84 	.word	0x24001d84

08012c34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012c34:	b580      	push	{r7, lr}
 8012c36:	b082      	sub	sp, #8
 8012c38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012c3a:	f3ef 8305 	mrs	r3, IPSR
 8012c3e:	603b      	str	r3, [r7, #0]
  return(result);
 8012c40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d003      	beq.n	8012c4e <osKernelStart+0x1a>
    stat = osErrorISR;
 8012c46:	f06f 0305 	mvn.w	r3, #5
 8012c4a:	607b      	str	r3, [r7, #4]
 8012c4c:	e010      	b.n	8012c70 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012c4e:	4b0b      	ldr	r3, [pc, #44]	; (8012c7c <osKernelStart+0x48>)
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	2b01      	cmp	r3, #1
 8012c54:	d109      	bne.n	8012c6a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012c56:	f7ff ffbf 	bl	8012bd8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012c5a:	4b08      	ldr	r3, [pc, #32]	; (8012c7c <osKernelStart+0x48>)
 8012c5c:	2202      	movs	r2, #2
 8012c5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012c60:	f001 fc0c 	bl	801447c <vTaskStartScheduler>
      stat = osOK;
 8012c64:	2300      	movs	r3, #0
 8012c66:	607b      	str	r3, [r7, #4]
 8012c68:	e002      	b.n	8012c70 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8012c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012c70:	687b      	ldr	r3, [r7, #4]
}
 8012c72:	4618      	mov	r0, r3
 8012c74:	3708      	adds	r7, #8
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd80      	pop	{r7, pc}
 8012c7a:	bf00      	nop
 8012c7c:	24001d84 	.word	0x24001d84

08012c80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b08e      	sub	sp, #56	; 0x38
 8012c84:	af04      	add	r7, sp, #16
 8012c86:	60f8      	str	r0, [r7, #12]
 8012c88:	60b9      	str	r1, [r7, #8]
 8012c8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012c90:	f3ef 8305 	mrs	r3, IPSR
 8012c94:	617b      	str	r3, [r7, #20]
  return(result);
 8012c96:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d17e      	bne.n	8012d9a <osThreadNew+0x11a>
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d07b      	beq.n	8012d9a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012ca2:	2380      	movs	r3, #128	; 0x80
 8012ca4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012ca6:	2318      	movs	r3, #24
 8012ca8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012caa:	2300      	movs	r3, #0
 8012cac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8012cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012cb2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d045      	beq.n	8012d46 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d002      	beq.n	8012cc8 <osThreadNew+0x48>
        name = attr->name;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	699b      	ldr	r3, [r3, #24]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d002      	beq.n	8012cd6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	699b      	ldr	r3, [r3, #24]
 8012cd4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012cd6:	69fb      	ldr	r3, [r7, #28]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d008      	beq.n	8012cee <osThreadNew+0x6e>
 8012cdc:	69fb      	ldr	r3, [r7, #28]
 8012cde:	2b38      	cmp	r3, #56	; 0x38
 8012ce0:	d805      	bhi.n	8012cee <osThreadNew+0x6e>
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	685b      	ldr	r3, [r3, #4]
 8012ce6:	f003 0301 	and.w	r3, r3, #1
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d001      	beq.n	8012cf2 <osThreadNew+0x72>
        return (NULL);
 8012cee:	2300      	movs	r3, #0
 8012cf0:	e054      	b.n	8012d9c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	695b      	ldr	r3, [r3, #20]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d003      	beq.n	8012d02 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	695b      	ldr	r3, [r3, #20]
 8012cfe:	089b      	lsrs	r3, r3, #2
 8012d00:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	689b      	ldr	r3, [r3, #8]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d00e      	beq.n	8012d28 <osThreadNew+0xa8>
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	68db      	ldr	r3, [r3, #12]
 8012d0e:	2b5b      	cmp	r3, #91	; 0x5b
 8012d10:	d90a      	bls.n	8012d28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d006      	beq.n	8012d28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	695b      	ldr	r3, [r3, #20]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d002      	beq.n	8012d28 <osThreadNew+0xa8>
        mem = 1;
 8012d22:	2301      	movs	r3, #1
 8012d24:	61bb      	str	r3, [r7, #24]
 8012d26:	e010      	b.n	8012d4a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	689b      	ldr	r3, [r3, #8]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d10c      	bne.n	8012d4a <osThreadNew+0xca>
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	68db      	ldr	r3, [r3, #12]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d108      	bne.n	8012d4a <osThreadNew+0xca>
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	691b      	ldr	r3, [r3, #16]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d104      	bne.n	8012d4a <osThreadNew+0xca>
          mem = 0;
 8012d40:	2300      	movs	r3, #0
 8012d42:	61bb      	str	r3, [r7, #24]
 8012d44:	e001      	b.n	8012d4a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8012d46:	2300      	movs	r3, #0
 8012d48:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012d4a:	69bb      	ldr	r3, [r7, #24]
 8012d4c:	2b01      	cmp	r3, #1
 8012d4e:	d110      	bne.n	8012d72 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012d54:	687a      	ldr	r2, [r7, #4]
 8012d56:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012d58:	9202      	str	r2, [sp, #8]
 8012d5a:	9301      	str	r3, [sp, #4]
 8012d5c:	69fb      	ldr	r3, [r7, #28]
 8012d5e:	9300      	str	r3, [sp, #0]
 8012d60:	68bb      	ldr	r3, [r7, #8]
 8012d62:	6a3a      	ldr	r2, [r7, #32]
 8012d64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012d66:	68f8      	ldr	r0, [r7, #12]
 8012d68:	f001 f9b2 	bl	80140d0 <xTaskCreateStatic>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	613b      	str	r3, [r7, #16]
 8012d70:	e013      	b.n	8012d9a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8012d72:	69bb      	ldr	r3, [r7, #24]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d110      	bne.n	8012d9a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012d78:	6a3b      	ldr	r3, [r7, #32]
 8012d7a:	b29a      	uxth	r2, r3
 8012d7c:	f107 0310 	add.w	r3, r7, #16
 8012d80:	9301      	str	r3, [sp, #4]
 8012d82:	69fb      	ldr	r3, [r7, #28]
 8012d84:	9300      	str	r3, [sp, #0]
 8012d86:	68bb      	ldr	r3, [r7, #8]
 8012d88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012d8a:	68f8      	ldr	r0, [r7, #12]
 8012d8c:	f001 f9fd 	bl	801418a <xTaskCreate>
 8012d90:	4603      	mov	r3, r0
 8012d92:	2b01      	cmp	r3, #1
 8012d94:	d001      	beq.n	8012d9a <osThreadNew+0x11a>
            hTask = NULL;
 8012d96:	2300      	movs	r3, #0
 8012d98:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012d9a:	693b      	ldr	r3, [r7, #16]
}
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	3728      	adds	r7, #40	; 0x28
 8012da0:	46bd      	mov	sp, r7
 8012da2:	bd80      	pop	{r7, pc}

08012da4 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8012da4:	b480      	push	{r7}
 8012da6:	b083      	sub	sp, #12
 8012da8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012daa:	f3ef 8305 	mrs	r3, IPSR
 8012dae:	603b      	str	r3, [r7, #0]
  return(result);
 8012db0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d003      	beq.n	8012dbe <osThreadYield+0x1a>
    stat = osErrorISR;
 8012db6:	f06f 0305 	mvn.w	r3, #5
 8012dba:	607b      	str	r3, [r7, #4]
 8012dbc:	e009      	b.n	8012dd2 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8012dc2:	4b07      	ldr	r3, [pc, #28]	; (8012de0 <osThreadYield+0x3c>)
 8012dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012dc8:	601a      	str	r2, [r3, #0]
 8012dca:	f3bf 8f4f 	dsb	sy
 8012dce:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8012dd2:	687b      	ldr	r3, [r7, #4]
}
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	370c      	adds	r7, #12
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dde:	4770      	bx	lr
 8012de0:	e000ed04 	.word	0xe000ed04

08012de4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b084      	sub	sp, #16
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012dec:	f3ef 8305 	mrs	r3, IPSR
 8012df0:	60bb      	str	r3, [r7, #8]
  return(result);
 8012df2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d003      	beq.n	8012e00 <osDelay+0x1c>
    stat = osErrorISR;
 8012df8:	f06f 0305 	mvn.w	r3, #5
 8012dfc:	60fb      	str	r3, [r7, #12]
 8012dfe:	e007      	b.n	8012e10 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8012e00:	2300      	movs	r3, #0
 8012e02:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d002      	beq.n	8012e10 <osDelay+0x2c>
      vTaskDelay(ticks);
 8012e0a:	6878      	ldr	r0, [r7, #4]
 8012e0c:	f001 fb02 	bl	8014414 <vTaskDelay>
    }
  }

  return (stat);
 8012e10:	68fb      	ldr	r3, [r7, #12]
}
 8012e12:	4618      	mov	r0, r3
 8012e14:	3710      	adds	r7, #16
 8012e16:	46bd      	mov	sp, r7
 8012e18:	bd80      	pop	{r7, pc}

08012e1a <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8012e1a:	b580      	push	{r7, lr}
 8012e1c:	b086      	sub	sp, #24
 8012e1e:	af00      	add	r7, sp, #0
 8012e20:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8012e22:	2300      	movs	r3, #0
 8012e24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012e26:	f3ef 8305 	mrs	r3, IPSR
 8012e2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8012e2c:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d12d      	bne.n	8012e8e <osEventFlagsNew+0x74>
    mem = -1;
 8012e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e36:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d015      	beq.n	8012e6a <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	689b      	ldr	r3, [r3, #8]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d006      	beq.n	8012e54 <osEventFlagsNew+0x3a>
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	68db      	ldr	r3, [r3, #12]
 8012e4a:	2b1f      	cmp	r3, #31
 8012e4c:	d902      	bls.n	8012e54 <osEventFlagsNew+0x3a>
        mem = 1;
 8012e4e:	2301      	movs	r3, #1
 8012e50:	613b      	str	r3, [r7, #16]
 8012e52:	e00c      	b.n	8012e6e <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	689b      	ldr	r3, [r3, #8]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d108      	bne.n	8012e6e <osEventFlagsNew+0x54>
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	68db      	ldr	r3, [r3, #12]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d104      	bne.n	8012e6e <osEventFlagsNew+0x54>
          mem = 0;
 8012e64:	2300      	movs	r3, #0
 8012e66:	613b      	str	r3, [r7, #16]
 8012e68:	e001      	b.n	8012e6e <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8012e6e:	693b      	ldr	r3, [r7, #16]
 8012e70:	2b01      	cmp	r3, #1
 8012e72:	d106      	bne.n	8012e82 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	689b      	ldr	r3, [r3, #8]
 8012e78:	4618      	mov	r0, r3
 8012e7a:	f000 f91d 	bl	80130b8 <xEventGroupCreateStatic>
 8012e7e:	6178      	str	r0, [r7, #20]
 8012e80:	e005      	b.n	8012e8e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8012e82:	693b      	ldr	r3, [r7, #16]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d102      	bne.n	8012e8e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8012e88:	f000 f94d 	bl	8013126 <xEventGroupCreate>
 8012e8c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8012e8e:	697b      	ldr	r3, [r7, #20]
}
 8012e90:	4618      	mov	r0, r3
 8012e92:	3718      	adds	r7, #24
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bd80      	pop	{r7, pc}

08012e98 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b086      	sub	sp, #24
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
 8012ea0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012ea6:	693b      	ldr	r3, [r7, #16]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d004      	beq.n	8012eb6 <osEventFlagsSet+0x1e>
 8012eac:	683b      	ldr	r3, [r7, #0]
 8012eae:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d003      	beq.n	8012ebe <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8012eb6:	f06f 0303 	mvn.w	r3, #3
 8012eba:	617b      	str	r3, [r7, #20]
 8012ebc:	e028      	b.n	8012f10 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ebe:	f3ef 8305 	mrs	r3, IPSR
 8012ec2:	60fb      	str	r3, [r7, #12]
  return(result);
 8012ec4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d01d      	beq.n	8012f06 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8012eca:	2300      	movs	r3, #0
 8012ecc:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8012ece:	f107 0308 	add.w	r3, r7, #8
 8012ed2:	461a      	mov	r2, r3
 8012ed4:	6839      	ldr	r1, [r7, #0]
 8012ed6:	6938      	ldr	r0, [r7, #16]
 8012ed8:	f000 fb46 	bl	8013568 <xEventGroupSetBitsFromISR>
 8012edc:	4603      	mov	r3, r0
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d103      	bne.n	8012eea <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8012ee2:	f06f 0302 	mvn.w	r3, #2
 8012ee6:	617b      	str	r3, [r7, #20]
 8012ee8:	e012      	b.n	8012f10 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8012eea:	683b      	ldr	r3, [r7, #0]
 8012eec:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8012eee:	68bb      	ldr	r3, [r7, #8]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d00d      	beq.n	8012f10 <osEventFlagsSet+0x78>
 8012ef4:	4b09      	ldr	r3, [pc, #36]	; (8012f1c <osEventFlagsSet+0x84>)
 8012ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012efa:	601a      	str	r2, [r3, #0]
 8012efc:	f3bf 8f4f 	dsb	sy
 8012f00:	f3bf 8f6f 	isb	sy
 8012f04:	e004      	b.n	8012f10 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8012f06:	6839      	ldr	r1, [r7, #0]
 8012f08:	6938      	ldr	r0, [r7, #16]
 8012f0a:	f000 fa65 	bl	80133d8 <xEventGroupSetBits>
 8012f0e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8012f10:	697b      	ldr	r3, [r7, #20]
}
 8012f12:	4618      	mov	r0, r3
 8012f14:	3718      	adds	r7, #24
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}
 8012f1a:	bf00      	nop
 8012f1c:	e000ed04 	.word	0xe000ed04

08012f20 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b086      	sub	sp, #24
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
 8012f28:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012f2e:	693b      	ldr	r3, [r7, #16]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d004      	beq.n	8012f3e <osEventFlagsClear+0x1e>
 8012f34:	683b      	ldr	r3, [r7, #0]
 8012f36:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d003      	beq.n	8012f46 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8012f3e:	f06f 0303 	mvn.w	r3, #3
 8012f42:	617b      	str	r3, [r7, #20]
 8012f44:	e019      	b.n	8012f7a <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012f46:	f3ef 8305 	mrs	r3, IPSR
 8012f4a:	60fb      	str	r3, [r7, #12]
  return(result);
 8012f4c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d00e      	beq.n	8012f70 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8012f52:	6938      	ldr	r0, [r7, #16]
 8012f54:	f000 fa1c 	bl	8013390 <xEventGroupGetBitsFromISR>
 8012f58:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8012f5a:	6839      	ldr	r1, [r7, #0]
 8012f5c:	6938      	ldr	r0, [r7, #16]
 8012f5e:	f000 fa03 	bl	8013368 <xEventGroupClearBitsFromISR>
 8012f62:	4603      	mov	r3, r0
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d108      	bne.n	8012f7a <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8012f68:	f06f 0302 	mvn.w	r3, #2
 8012f6c:	617b      	str	r3, [r7, #20]
 8012f6e:	e004      	b.n	8012f7a <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8012f70:	6839      	ldr	r1, [r7, #0]
 8012f72:	6938      	ldr	r0, [r7, #16]
 8012f74:	f000 f9c0 	bl	80132f8 <xEventGroupClearBits>
 8012f78:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8012f7a:	697b      	ldr	r3, [r7, #20]
}
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	3718      	adds	r7, #24
 8012f80:	46bd      	mov	sp, r7
 8012f82:	bd80      	pop	{r7, pc}

08012f84 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b08c      	sub	sp, #48	; 0x30
 8012f88:	af02      	add	r7, sp, #8
 8012f8a:	60f8      	str	r0, [r7, #12]
 8012f8c:	60b9      	str	r1, [r7, #8]
 8012f8e:	607a      	str	r2, [r7, #4]
 8012f90:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012f96:	69bb      	ldr	r3, [r7, #24]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d004      	beq.n	8012fa6 <osEventFlagsWait+0x22>
 8012f9c:	68bb      	ldr	r3, [r7, #8]
 8012f9e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d003      	beq.n	8012fae <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8012fa6:	f06f 0303 	mvn.w	r3, #3
 8012faa:	61fb      	str	r3, [r7, #28]
 8012fac:	e04b      	b.n	8013046 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012fae:	f3ef 8305 	mrs	r3, IPSR
 8012fb2:	617b      	str	r3, [r7, #20]
  return(result);
 8012fb4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d003      	beq.n	8012fc2 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8012fba:	f06f 0305 	mvn.w	r3, #5
 8012fbe:	61fb      	str	r3, [r7, #28]
 8012fc0:	e041      	b.n	8013046 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	f003 0301 	and.w	r3, r3, #1
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d002      	beq.n	8012fd2 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8012fcc:	2301      	movs	r3, #1
 8012fce:	627b      	str	r3, [r7, #36]	; 0x24
 8012fd0:	e001      	b.n	8012fd6 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	f003 0302 	and.w	r3, r3, #2
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d002      	beq.n	8012fe6 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	623b      	str	r3, [r7, #32]
 8012fe4:	e001      	b.n	8012fea <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8012fe6:	2301      	movs	r3, #1
 8012fe8:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8012fea:	683b      	ldr	r3, [r7, #0]
 8012fec:	9300      	str	r3, [sp, #0]
 8012fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ff0:	6a3a      	ldr	r2, [r7, #32]
 8012ff2:	68b9      	ldr	r1, [r7, #8]
 8012ff4:	69b8      	ldr	r0, [r7, #24]
 8012ff6:	f000 f8b1 	bl	801315c <xEventGroupWaitBits>
 8012ffa:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	f003 0301 	and.w	r3, r3, #1
 8013002:	2b00      	cmp	r3, #0
 8013004:	d010      	beq.n	8013028 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8013006:	68ba      	ldr	r2, [r7, #8]
 8013008:	69fb      	ldr	r3, [r7, #28]
 801300a:	4013      	ands	r3, r2
 801300c:	68ba      	ldr	r2, [r7, #8]
 801300e:	429a      	cmp	r2, r3
 8013010:	d019      	beq.n	8013046 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8013012:	683b      	ldr	r3, [r7, #0]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d003      	beq.n	8013020 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8013018:	f06f 0301 	mvn.w	r3, #1
 801301c:	61fb      	str	r3, [r7, #28]
 801301e:	e012      	b.n	8013046 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8013020:	f06f 0302 	mvn.w	r3, #2
 8013024:	61fb      	str	r3, [r7, #28]
 8013026:	e00e      	b.n	8013046 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8013028:	68ba      	ldr	r2, [r7, #8]
 801302a:	69fb      	ldr	r3, [r7, #28]
 801302c:	4013      	ands	r3, r2
 801302e:	2b00      	cmp	r3, #0
 8013030:	d109      	bne.n	8013046 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	2b00      	cmp	r3, #0
 8013036:	d003      	beq.n	8013040 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8013038:	f06f 0301 	mvn.w	r3, #1
 801303c:	61fb      	str	r3, [r7, #28]
 801303e:	e002      	b.n	8013046 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8013040:	f06f 0302 	mvn.w	r3, #2
 8013044:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8013046:	69fb      	ldr	r3, [r7, #28]
}
 8013048:	4618      	mov	r0, r3
 801304a:	3728      	adds	r7, #40	; 0x28
 801304c:	46bd      	mov	sp, r7
 801304e:	bd80      	pop	{r7, pc}

08013050 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013050:	b480      	push	{r7}
 8013052:	b085      	sub	sp, #20
 8013054:	af00      	add	r7, sp, #0
 8013056:	60f8      	str	r0, [r7, #12]
 8013058:	60b9      	str	r1, [r7, #8]
 801305a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	4a07      	ldr	r2, [pc, #28]	; (801307c <vApplicationGetIdleTaskMemory+0x2c>)
 8013060:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8013062:	68bb      	ldr	r3, [r7, #8]
 8013064:	4a06      	ldr	r2, [pc, #24]	; (8013080 <vApplicationGetIdleTaskMemory+0x30>)
 8013066:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	2280      	movs	r2, #128	; 0x80
 801306c:	601a      	str	r2, [r3, #0]
}
 801306e:	bf00      	nop
 8013070:	3714      	adds	r7, #20
 8013072:	46bd      	mov	sp, r7
 8013074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013078:	4770      	bx	lr
 801307a:	bf00      	nop
 801307c:	24001d88 	.word	0x24001d88
 8013080:	24001de4 	.word	0x24001de4

08013084 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013084:	b480      	push	{r7}
 8013086:	b085      	sub	sp, #20
 8013088:	af00      	add	r7, sp, #0
 801308a:	60f8      	str	r0, [r7, #12]
 801308c:	60b9      	str	r1, [r7, #8]
 801308e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	4a07      	ldr	r2, [pc, #28]	; (80130b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8013094:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013096:	68bb      	ldr	r3, [r7, #8]
 8013098:	4a06      	ldr	r2, [pc, #24]	; (80130b4 <vApplicationGetTimerTaskMemory+0x30>)
 801309a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80130a2:	601a      	str	r2, [r3, #0]
}
 80130a4:	bf00      	nop
 80130a6:	3714      	adds	r7, #20
 80130a8:	46bd      	mov	sp, r7
 80130aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ae:	4770      	bx	lr
 80130b0:	24001fe4 	.word	0x24001fe4
 80130b4:	24002040 	.word	0x24002040

080130b8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b086      	sub	sp, #24
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d10a      	bne.n	80130dc <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80130c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ca:	f383 8811 	msr	BASEPRI, r3
 80130ce:	f3bf 8f6f 	isb	sy
 80130d2:	f3bf 8f4f 	dsb	sy
 80130d6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80130d8:	bf00      	nop
 80130da:	e7fe      	b.n	80130da <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80130dc:	2320      	movs	r3, #32
 80130de:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80130e0:	68bb      	ldr	r3, [r7, #8]
 80130e2:	2b20      	cmp	r3, #32
 80130e4:	d00a      	beq.n	80130fc <xEventGroupCreateStatic+0x44>
	__asm volatile
 80130e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ea:	f383 8811 	msr	BASEPRI, r3
 80130ee:	f3bf 8f6f 	isb	sy
 80130f2:	f3bf 8f4f 	dsb	sy
 80130f6:	60fb      	str	r3, [r7, #12]
}
 80130f8:	bf00      	nop
 80130fa:	e7fe      	b.n	80130fa <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8013100:	697b      	ldr	r3, [r7, #20]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d00a      	beq.n	801311c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8013106:	697b      	ldr	r3, [r7, #20]
 8013108:	2200      	movs	r2, #0
 801310a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801310c:	697b      	ldr	r3, [r7, #20]
 801310e:	3304      	adds	r3, #4
 8013110:	4618      	mov	r0, r3
 8013112:	f000 fa3d 	bl	8013590 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8013116:	697b      	ldr	r3, [r7, #20]
 8013118:	2201      	movs	r2, #1
 801311a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 801311c:	697b      	ldr	r3, [r7, #20]
	}
 801311e:	4618      	mov	r0, r3
 8013120:	3718      	adds	r7, #24
 8013122:	46bd      	mov	sp, r7
 8013124:	bd80      	pop	{r7, pc}

08013126 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8013126:	b580      	push	{r7, lr}
 8013128:	b082      	sub	sp, #8
 801312a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 801312c:	2020      	movs	r0, #32
 801312e:	f002 fd53 	bl	8015bd8 <pvPortMalloc>
 8013132:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d00a      	beq.n	8013150 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	2200      	movs	r2, #0
 801313e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	3304      	adds	r3, #4
 8013144:	4618      	mov	r0, r3
 8013146:	f000 fa23 	bl	8013590 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	2200      	movs	r2, #0
 801314e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8013150:	687b      	ldr	r3, [r7, #4]
	}
 8013152:	4618      	mov	r0, r3
 8013154:	3708      	adds	r7, #8
 8013156:	46bd      	mov	sp, r7
 8013158:	bd80      	pop	{r7, pc}
	...

0801315c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b090      	sub	sp, #64	; 0x40
 8013160:	af00      	add	r7, sp, #0
 8013162:	60f8      	str	r0, [r7, #12]
 8013164:	60b9      	str	r1, [r7, #8]
 8013166:	607a      	str	r2, [r7, #4]
 8013168:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801316e:	2300      	movs	r3, #0
 8013170:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8013172:	2300      	movs	r3, #0
 8013174:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d10a      	bne.n	8013192 <xEventGroupWaitBits+0x36>
	__asm volatile
 801317c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013180:	f383 8811 	msr	BASEPRI, r3
 8013184:	f3bf 8f6f 	isb	sy
 8013188:	f3bf 8f4f 	dsb	sy
 801318c:	623b      	str	r3, [r7, #32]
}
 801318e:	bf00      	nop
 8013190:	e7fe      	b.n	8013190 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013192:	68bb      	ldr	r3, [r7, #8]
 8013194:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013198:	2b00      	cmp	r3, #0
 801319a:	d00a      	beq.n	80131b2 <xEventGroupWaitBits+0x56>
	__asm volatile
 801319c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131a0:	f383 8811 	msr	BASEPRI, r3
 80131a4:	f3bf 8f6f 	isb	sy
 80131a8:	f3bf 8f4f 	dsb	sy
 80131ac:	61fb      	str	r3, [r7, #28]
}
 80131ae:	bf00      	nop
 80131b0:	e7fe      	b.n	80131b0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80131b2:	68bb      	ldr	r3, [r7, #8]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d10a      	bne.n	80131ce <xEventGroupWaitBits+0x72>
	__asm volatile
 80131b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131bc:	f383 8811 	msr	BASEPRI, r3
 80131c0:	f3bf 8f6f 	isb	sy
 80131c4:	f3bf 8f4f 	dsb	sy
 80131c8:	61bb      	str	r3, [r7, #24]
}
 80131ca:	bf00      	nop
 80131cc:	e7fe      	b.n	80131cc <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80131ce:	f001 fe51 	bl	8014e74 <xTaskGetSchedulerState>
 80131d2:	4603      	mov	r3, r0
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d102      	bne.n	80131de <xEventGroupWaitBits+0x82>
 80131d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d101      	bne.n	80131e2 <xEventGroupWaitBits+0x86>
 80131de:	2301      	movs	r3, #1
 80131e0:	e000      	b.n	80131e4 <xEventGroupWaitBits+0x88>
 80131e2:	2300      	movs	r3, #0
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d10a      	bne.n	80131fe <xEventGroupWaitBits+0xa2>
	__asm volatile
 80131e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131ec:	f383 8811 	msr	BASEPRI, r3
 80131f0:	f3bf 8f6f 	isb	sy
 80131f4:	f3bf 8f4f 	dsb	sy
 80131f8:	617b      	str	r3, [r7, #20]
}
 80131fa:	bf00      	nop
 80131fc:	e7fe      	b.n	80131fc <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80131fe:	f001 f9a3 	bl	8014548 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8013202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8013208:	683a      	ldr	r2, [r7, #0]
 801320a:	68b9      	ldr	r1, [r7, #8]
 801320c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801320e:	f000 f988 	bl	8013522 <prvTestWaitCondition>
 8013212:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8013214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013216:	2b00      	cmp	r3, #0
 8013218:	d00e      	beq.n	8013238 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 801321a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801321c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 801321e:	2300      	movs	r3, #0
 8013220:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d028      	beq.n	801327a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801322a:	681a      	ldr	r2, [r3, #0]
 801322c:	68bb      	ldr	r3, [r7, #8]
 801322e:	43db      	mvns	r3, r3
 8013230:	401a      	ands	r2, r3
 8013232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013234:	601a      	str	r2, [r3, #0]
 8013236:	e020      	b.n	801327a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8013238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801323a:	2b00      	cmp	r3, #0
 801323c:	d104      	bne.n	8013248 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 801323e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013240:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8013242:	2301      	movs	r3, #1
 8013244:	633b      	str	r3, [r7, #48]	; 0x30
 8013246:	e018      	b.n	801327a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d003      	beq.n	8013256 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 801324e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013250:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013254:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8013256:	683b      	ldr	r3, [r7, #0]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d003      	beq.n	8013264 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 801325c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801325e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013262:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8013264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013266:	1d18      	adds	r0, r3, #4
 8013268:	68ba      	ldr	r2, [r7, #8]
 801326a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801326c:	4313      	orrs	r3, r2
 801326e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013270:	4619      	mov	r1, r3
 8013272:	f001 fb77 	bl	8014964 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8013276:	2300      	movs	r3, #0
 8013278:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 801327a:	f001 f973 	bl	8014564 <xTaskResumeAll>
 801327e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8013280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013282:	2b00      	cmp	r3, #0
 8013284:	d031      	beq.n	80132ea <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8013286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013288:	2b00      	cmp	r3, #0
 801328a:	d107      	bne.n	801329c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 801328c:	4b19      	ldr	r3, [pc, #100]	; (80132f4 <xEventGroupWaitBits+0x198>)
 801328e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013292:	601a      	str	r2, [r3, #0]
 8013294:	f3bf 8f4f 	dsb	sy
 8013298:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 801329c:	f001 fe76 	bl	8014f8c <uxTaskResetEventItemValue>
 80132a0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80132a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d11a      	bne.n	80132e2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80132ac:	f002 fb72 	bl	8015994 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80132b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80132b6:	683a      	ldr	r2, [r7, #0]
 80132b8:	68b9      	ldr	r1, [r7, #8]
 80132ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80132bc:	f000 f931 	bl	8013522 <prvTestWaitCondition>
 80132c0:	4603      	mov	r3, r0
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d009      	beq.n	80132da <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d006      	beq.n	80132da <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80132cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132ce:	681a      	ldr	r2, [r3, #0]
 80132d0:	68bb      	ldr	r3, [r7, #8]
 80132d2:	43db      	mvns	r3, r3
 80132d4:	401a      	ands	r2, r3
 80132d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132d8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80132da:	2301      	movs	r3, #1
 80132dc:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80132de:	f002 fb89 	bl	80159f4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80132e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80132e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80132ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80132ec:	4618      	mov	r0, r3
 80132ee:	3740      	adds	r7, #64	; 0x40
 80132f0:	46bd      	mov	sp, r7
 80132f2:	bd80      	pop	{r7, pc}
 80132f4:	e000ed04 	.word	0xe000ed04

080132f8 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b086      	sub	sp, #24
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
 8013300:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d10a      	bne.n	8013322 <xEventGroupClearBits+0x2a>
	__asm volatile
 801330c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013310:	f383 8811 	msr	BASEPRI, r3
 8013314:	f3bf 8f6f 	isb	sy
 8013318:	f3bf 8f4f 	dsb	sy
 801331c:	60fb      	str	r3, [r7, #12]
}
 801331e:	bf00      	nop
 8013320:	e7fe      	b.n	8013320 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013322:	683b      	ldr	r3, [r7, #0]
 8013324:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013328:	2b00      	cmp	r3, #0
 801332a:	d00a      	beq.n	8013342 <xEventGroupClearBits+0x4a>
	__asm volatile
 801332c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013330:	f383 8811 	msr	BASEPRI, r3
 8013334:	f3bf 8f6f 	isb	sy
 8013338:	f3bf 8f4f 	dsb	sy
 801333c:	60bb      	str	r3, [r7, #8]
}
 801333e:	bf00      	nop
 8013340:	e7fe      	b.n	8013340 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8013342:	f002 fb27 	bl	8015994 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8013346:	697b      	ldr	r3, [r7, #20]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 801334c:	697b      	ldr	r3, [r7, #20]
 801334e:	681a      	ldr	r2, [r3, #0]
 8013350:	683b      	ldr	r3, [r7, #0]
 8013352:	43db      	mvns	r3, r3
 8013354:	401a      	ands	r2, r3
 8013356:	697b      	ldr	r3, [r7, #20]
 8013358:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 801335a:	f002 fb4b 	bl	80159f4 <vPortExitCritical>

	return uxReturn;
 801335e:	693b      	ldr	r3, [r7, #16]
}
 8013360:	4618      	mov	r0, r3
 8013362:	3718      	adds	r7, #24
 8013364:	46bd      	mov	sp, r7
 8013366:	bd80      	pop	{r7, pc}

08013368 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8013368:	b580      	push	{r7, lr}
 801336a:	b084      	sub	sp, #16
 801336c:	af00      	add	r7, sp, #0
 801336e:	6078      	str	r0, [r7, #4]
 8013370:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013372:	2300      	movs	r3, #0
 8013374:	683a      	ldr	r2, [r7, #0]
 8013376:	6879      	ldr	r1, [r7, #4]
 8013378:	4804      	ldr	r0, [pc, #16]	; (801338c <xEventGroupClearBitsFromISR+0x24>)
 801337a:	f002 f9c1 	bl	8015700 <xTimerPendFunctionCallFromISR>
 801337e:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8013380:	68fb      	ldr	r3, [r7, #12]
	}
 8013382:	4618      	mov	r0, r3
 8013384:	3710      	adds	r7, #16
 8013386:	46bd      	mov	sp, r7
 8013388:	bd80      	pop	{r7, pc}
 801338a:	bf00      	nop
 801338c:	08013509 	.word	0x08013509

08013390 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8013390:	b480      	push	{r7}
 8013392:	b089      	sub	sp, #36	; 0x24
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801339c:	f3ef 8211 	mrs	r2, BASEPRI
 80133a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133a4:	f383 8811 	msr	BASEPRI, r3
 80133a8:	f3bf 8f6f 	isb	sy
 80133ac:	f3bf 8f4f 	dsb	sy
 80133b0:	60fa      	str	r2, [r7, #12]
 80133b2:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80133b4:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80133b6:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80133b8:	69fb      	ldr	r3, [r7, #28]
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	617b      	str	r3, [r7, #20]
 80133be:	69bb      	ldr	r3, [r7, #24]
 80133c0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80133c2:	693b      	ldr	r3, [r7, #16]
 80133c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80133c8:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80133ca:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80133cc:	4618      	mov	r0, r3
 80133ce:	3724      	adds	r7, #36	; 0x24
 80133d0:	46bd      	mov	sp, r7
 80133d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d6:	4770      	bx	lr

080133d8 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80133d8:	b580      	push	{r7, lr}
 80133da:	b08e      	sub	sp, #56	; 0x38
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
 80133e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80133e2:	2300      	movs	r3, #0
 80133e4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80133ea:	2300      	movs	r3, #0
 80133ec:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d10a      	bne.n	801340a <xEventGroupSetBits+0x32>
	__asm volatile
 80133f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133f8:	f383 8811 	msr	BASEPRI, r3
 80133fc:	f3bf 8f6f 	isb	sy
 8013400:	f3bf 8f4f 	dsb	sy
 8013404:	613b      	str	r3, [r7, #16]
}
 8013406:	bf00      	nop
 8013408:	e7fe      	b.n	8013408 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801340a:	683b      	ldr	r3, [r7, #0]
 801340c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013410:	2b00      	cmp	r3, #0
 8013412:	d00a      	beq.n	801342a <xEventGroupSetBits+0x52>
	__asm volatile
 8013414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013418:	f383 8811 	msr	BASEPRI, r3
 801341c:	f3bf 8f6f 	isb	sy
 8013420:	f3bf 8f4f 	dsb	sy
 8013424:	60fb      	str	r3, [r7, #12]
}
 8013426:	bf00      	nop
 8013428:	e7fe      	b.n	8013428 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 801342a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801342c:	3304      	adds	r3, #4
 801342e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013432:	3308      	adds	r3, #8
 8013434:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8013436:	f001 f887 	bl	8014548 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 801343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801343c:	68db      	ldr	r3, [r3, #12]
 801343e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013442:	681a      	ldr	r2, [r3, #0]
 8013444:	683b      	ldr	r3, [r7, #0]
 8013446:	431a      	orrs	r2, r3
 8013448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801344a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 801344c:	e03c      	b.n	80134c8 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 801344e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013450:	685b      	ldr	r3, [r3, #4]
 8013452:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8013454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 801345a:	2300      	movs	r3, #0
 801345c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 801345e:	69bb      	ldr	r3, [r7, #24]
 8013460:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013464:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013466:	69bb      	ldr	r3, [r7, #24]
 8013468:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801346c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 801346e:	697b      	ldr	r3, [r7, #20]
 8013470:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013474:	2b00      	cmp	r3, #0
 8013476:	d108      	bne.n	801348a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8013478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801347a:	681a      	ldr	r2, [r3, #0]
 801347c:	69bb      	ldr	r3, [r7, #24]
 801347e:	4013      	ands	r3, r2
 8013480:	2b00      	cmp	r3, #0
 8013482:	d00b      	beq.n	801349c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8013484:	2301      	movs	r3, #1
 8013486:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013488:	e008      	b.n	801349c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801348a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801348c:	681a      	ldr	r2, [r3, #0]
 801348e:	69bb      	ldr	r3, [r7, #24]
 8013490:	4013      	ands	r3, r2
 8013492:	69ba      	ldr	r2, [r7, #24]
 8013494:	429a      	cmp	r2, r3
 8013496:	d101      	bne.n	801349c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8013498:	2301      	movs	r3, #1
 801349a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 801349c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d010      	beq.n	80134c4 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80134a2:	697b      	ldr	r3, [r7, #20]
 80134a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d003      	beq.n	80134b4 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80134ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80134ae:	69bb      	ldr	r3, [r7, #24]
 80134b0:	4313      	orrs	r3, r2
 80134b2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80134b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80134bc:	4619      	mov	r1, r3
 80134be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80134c0:	f001 fb1c 	bl	8014afc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80134c4:	69fb      	ldr	r3, [r7, #28]
 80134c6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80134c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134ca:	6a3b      	ldr	r3, [r7, #32]
 80134cc:	429a      	cmp	r2, r3
 80134ce:	d1be      	bne.n	801344e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80134d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134d2:	681a      	ldr	r2, [r3, #0]
 80134d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134d6:	43db      	mvns	r3, r3
 80134d8:	401a      	ands	r2, r3
 80134da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134dc:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80134de:	f001 f841 	bl	8014564 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80134e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134e4:	681b      	ldr	r3, [r3, #0]
}
 80134e6:	4618      	mov	r0, r3
 80134e8:	3738      	adds	r7, #56	; 0x38
 80134ea:	46bd      	mov	sp, r7
 80134ec:	bd80      	pop	{r7, pc}

080134ee <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80134ee:	b580      	push	{r7, lr}
 80134f0:	b082      	sub	sp, #8
 80134f2:	af00      	add	r7, sp, #0
 80134f4:	6078      	str	r0, [r7, #4]
 80134f6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80134f8:	6839      	ldr	r1, [r7, #0]
 80134fa:	6878      	ldr	r0, [r7, #4]
 80134fc:	f7ff ff6c 	bl	80133d8 <xEventGroupSetBits>
}
 8013500:	bf00      	nop
 8013502:	3708      	adds	r7, #8
 8013504:	46bd      	mov	sp, r7
 8013506:	bd80      	pop	{r7, pc}

08013508 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8013508:	b580      	push	{r7, lr}
 801350a:	b082      	sub	sp, #8
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
 8013510:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013512:	6839      	ldr	r1, [r7, #0]
 8013514:	6878      	ldr	r0, [r7, #4]
 8013516:	f7ff feef 	bl	80132f8 <xEventGroupClearBits>
}
 801351a:	bf00      	nop
 801351c:	3708      	adds	r7, #8
 801351e:	46bd      	mov	sp, r7
 8013520:	bd80      	pop	{r7, pc}

08013522 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8013522:	b480      	push	{r7}
 8013524:	b087      	sub	sp, #28
 8013526:	af00      	add	r7, sp, #0
 8013528:	60f8      	str	r0, [r7, #12]
 801352a:	60b9      	str	r1, [r7, #8]
 801352c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 801352e:	2300      	movs	r3, #0
 8013530:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d107      	bne.n	8013548 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8013538:	68fa      	ldr	r2, [r7, #12]
 801353a:	68bb      	ldr	r3, [r7, #8]
 801353c:	4013      	ands	r3, r2
 801353e:	2b00      	cmp	r3, #0
 8013540:	d00a      	beq.n	8013558 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013542:	2301      	movs	r3, #1
 8013544:	617b      	str	r3, [r7, #20]
 8013546:	e007      	b.n	8013558 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8013548:	68fa      	ldr	r2, [r7, #12]
 801354a:	68bb      	ldr	r3, [r7, #8]
 801354c:	4013      	ands	r3, r2
 801354e:	68ba      	ldr	r2, [r7, #8]
 8013550:	429a      	cmp	r2, r3
 8013552:	d101      	bne.n	8013558 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013554:	2301      	movs	r3, #1
 8013556:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8013558:	697b      	ldr	r3, [r7, #20]
}
 801355a:	4618      	mov	r0, r3
 801355c:	371c      	adds	r7, #28
 801355e:	46bd      	mov	sp, r7
 8013560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013564:	4770      	bx	lr
	...

08013568 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013568:	b580      	push	{r7, lr}
 801356a:	b086      	sub	sp, #24
 801356c:	af00      	add	r7, sp, #0
 801356e:	60f8      	str	r0, [r7, #12]
 8013570:	60b9      	str	r1, [r7, #8]
 8013572:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	68ba      	ldr	r2, [r7, #8]
 8013578:	68f9      	ldr	r1, [r7, #12]
 801357a:	4804      	ldr	r0, [pc, #16]	; (801358c <xEventGroupSetBitsFromISR+0x24>)
 801357c:	f002 f8c0 	bl	8015700 <xTimerPendFunctionCallFromISR>
 8013580:	6178      	str	r0, [r7, #20]

		return xReturn;
 8013582:	697b      	ldr	r3, [r7, #20]
	}
 8013584:	4618      	mov	r0, r3
 8013586:	3718      	adds	r7, #24
 8013588:	46bd      	mov	sp, r7
 801358a:	bd80      	pop	{r7, pc}
 801358c:	080134ef 	.word	0x080134ef

08013590 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013590:	b480      	push	{r7}
 8013592:	b083      	sub	sp, #12
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	f103 0208 	add.w	r2, r3, #8
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80135a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	f103 0208 	add.w	r2, r3, #8
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	f103 0208 	add.w	r2, r3, #8
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	2200      	movs	r2, #0
 80135c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80135c4:	bf00      	nop
 80135c6:	370c      	adds	r7, #12
 80135c8:	46bd      	mov	sp, r7
 80135ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ce:	4770      	bx	lr

080135d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80135d0:	b480      	push	{r7}
 80135d2:	b083      	sub	sp, #12
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	2200      	movs	r2, #0
 80135dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80135de:	bf00      	nop
 80135e0:	370c      	adds	r7, #12
 80135e2:	46bd      	mov	sp, r7
 80135e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e8:	4770      	bx	lr

080135ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80135ea:	b480      	push	{r7}
 80135ec:	b085      	sub	sp, #20
 80135ee:	af00      	add	r7, sp, #0
 80135f0:	6078      	str	r0, [r7, #4]
 80135f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	685b      	ldr	r3, [r3, #4]
 80135f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80135fa:	683b      	ldr	r3, [r7, #0]
 80135fc:	68fa      	ldr	r2, [r7, #12]
 80135fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	689a      	ldr	r2, [r3, #8]
 8013604:	683b      	ldr	r3, [r7, #0]
 8013606:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	689b      	ldr	r3, [r3, #8]
 801360c:	683a      	ldr	r2, [r7, #0]
 801360e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	683a      	ldr	r2, [r7, #0]
 8013614:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013616:	683b      	ldr	r3, [r7, #0]
 8013618:	687a      	ldr	r2, [r7, #4]
 801361a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	1c5a      	adds	r2, r3, #1
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	601a      	str	r2, [r3, #0]
}
 8013626:	bf00      	nop
 8013628:	3714      	adds	r7, #20
 801362a:	46bd      	mov	sp, r7
 801362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013630:	4770      	bx	lr

08013632 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013632:	b480      	push	{r7}
 8013634:	b085      	sub	sp, #20
 8013636:	af00      	add	r7, sp, #0
 8013638:	6078      	str	r0, [r7, #4]
 801363a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801363c:	683b      	ldr	r3, [r7, #0]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013642:	68bb      	ldr	r3, [r7, #8]
 8013644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013648:	d103      	bne.n	8013652 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	691b      	ldr	r3, [r3, #16]
 801364e:	60fb      	str	r3, [r7, #12]
 8013650:	e00c      	b.n	801366c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	3308      	adds	r3, #8
 8013656:	60fb      	str	r3, [r7, #12]
 8013658:	e002      	b.n	8013660 <vListInsert+0x2e>
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	685b      	ldr	r3, [r3, #4]
 801365e:	60fb      	str	r3, [r7, #12]
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	685b      	ldr	r3, [r3, #4]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	68ba      	ldr	r2, [r7, #8]
 8013668:	429a      	cmp	r2, r3
 801366a:	d2f6      	bcs.n	801365a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	685a      	ldr	r2, [r3, #4]
 8013670:	683b      	ldr	r3, [r7, #0]
 8013672:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013674:	683b      	ldr	r3, [r7, #0]
 8013676:	685b      	ldr	r3, [r3, #4]
 8013678:	683a      	ldr	r2, [r7, #0]
 801367a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801367c:	683b      	ldr	r3, [r7, #0]
 801367e:	68fa      	ldr	r2, [r7, #12]
 8013680:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	683a      	ldr	r2, [r7, #0]
 8013686:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013688:	683b      	ldr	r3, [r7, #0]
 801368a:	687a      	ldr	r2, [r7, #4]
 801368c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	1c5a      	adds	r2, r3, #1
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	601a      	str	r2, [r3, #0]
}
 8013698:	bf00      	nop
 801369a:	3714      	adds	r7, #20
 801369c:	46bd      	mov	sp, r7
 801369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a2:	4770      	bx	lr

080136a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80136a4:	b480      	push	{r7}
 80136a6:	b085      	sub	sp, #20
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	691b      	ldr	r3, [r3, #16]
 80136b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	685b      	ldr	r3, [r3, #4]
 80136b6:	687a      	ldr	r2, [r7, #4]
 80136b8:	6892      	ldr	r2, [r2, #8]
 80136ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	689b      	ldr	r3, [r3, #8]
 80136c0:	687a      	ldr	r2, [r7, #4]
 80136c2:	6852      	ldr	r2, [r2, #4]
 80136c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	685b      	ldr	r3, [r3, #4]
 80136ca:	687a      	ldr	r2, [r7, #4]
 80136cc:	429a      	cmp	r2, r3
 80136ce:	d103      	bne.n	80136d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	689a      	ldr	r2, [r3, #8]
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	2200      	movs	r2, #0
 80136dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	1e5a      	subs	r2, r3, #1
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	681b      	ldr	r3, [r3, #0]
}
 80136ec:	4618      	mov	r0, r3
 80136ee:	3714      	adds	r7, #20
 80136f0:	46bd      	mov	sp, r7
 80136f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f6:	4770      	bx	lr

080136f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b084      	sub	sp, #16
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	6078      	str	r0, [r7, #4]
 8013700:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d10a      	bne.n	8013722 <xQueueGenericReset+0x2a>
	__asm volatile
 801370c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013710:	f383 8811 	msr	BASEPRI, r3
 8013714:	f3bf 8f6f 	isb	sy
 8013718:	f3bf 8f4f 	dsb	sy
 801371c:	60bb      	str	r3, [r7, #8]
}
 801371e:	bf00      	nop
 8013720:	e7fe      	b.n	8013720 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013722:	f002 f937 	bl	8015994 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	681a      	ldr	r2, [r3, #0]
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801372e:	68f9      	ldr	r1, [r7, #12]
 8013730:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013732:	fb01 f303 	mul.w	r3, r1, r3
 8013736:	441a      	add	r2, r3
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	2200      	movs	r2, #0
 8013740:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	681a      	ldr	r2, [r3, #0]
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	681a      	ldr	r2, [r3, #0]
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013752:	3b01      	subs	r3, #1
 8013754:	68f9      	ldr	r1, [r7, #12]
 8013756:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013758:	fb01 f303 	mul.w	r3, r1, r3
 801375c:	441a      	add	r2, r3
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	22ff      	movs	r2, #255	; 0xff
 8013766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	22ff      	movs	r2, #255	; 0xff
 801376e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013772:	683b      	ldr	r3, [r7, #0]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d114      	bne.n	80137a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	691b      	ldr	r3, [r3, #16]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d01a      	beq.n	80137b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	3310      	adds	r3, #16
 8013784:	4618      	mov	r0, r3
 8013786:	f001 f955 	bl	8014a34 <xTaskRemoveFromEventList>
 801378a:	4603      	mov	r3, r0
 801378c:	2b00      	cmp	r3, #0
 801378e:	d012      	beq.n	80137b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013790:	4b0c      	ldr	r3, [pc, #48]	; (80137c4 <xQueueGenericReset+0xcc>)
 8013792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013796:	601a      	str	r2, [r3, #0]
 8013798:	f3bf 8f4f 	dsb	sy
 801379c:	f3bf 8f6f 	isb	sy
 80137a0:	e009      	b.n	80137b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	3310      	adds	r3, #16
 80137a6:	4618      	mov	r0, r3
 80137a8:	f7ff fef2 	bl	8013590 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	3324      	adds	r3, #36	; 0x24
 80137b0:	4618      	mov	r0, r3
 80137b2:	f7ff feed 	bl	8013590 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80137b6:	f002 f91d 	bl	80159f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80137ba:	2301      	movs	r3, #1
}
 80137bc:	4618      	mov	r0, r3
 80137be:	3710      	adds	r7, #16
 80137c0:	46bd      	mov	sp, r7
 80137c2:	bd80      	pop	{r7, pc}
 80137c4:	e000ed04 	.word	0xe000ed04

080137c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80137c8:	b580      	push	{r7, lr}
 80137ca:	b08e      	sub	sp, #56	; 0x38
 80137cc:	af02      	add	r7, sp, #8
 80137ce:	60f8      	str	r0, [r7, #12]
 80137d0:	60b9      	str	r1, [r7, #8]
 80137d2:	607a      	str	r2, [r7, #4]
 80137d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d10a      	bne.n	80137f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80137dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137e0:	f383 8811 	msr	BASEPRI, r3
 80137e4:	f3bf 8f6f 	isb	sy
 80137e8:	f3bf 8f4f 	dsb	sy
 80137ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80137ee:	bf00      	nop
 80137f0:	e7fe      	b.n	80137f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80137f2:	683b      	ldr	r3, [r7, #0]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d10a      	bne.n	801380e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80137f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137fc:	f383 8811 	msr	BASEPRI, r3
 8013800:	f3bf 8f6f 	isb	sy
 8013804:	f3bf 8f4f 	dsb	sy
 8013808:	627b      	str	r3, [r7, #36]	; 0x24
}
 801380a:	bf00      	nop
 801380c:	e7fe      	b.n	801380c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d002      	beq.n	801381a <xQueueGenericCreateStatic+0x52>
 8013814:	68bb      	ldr	r3, [r7, #8]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d001      	beq.n	801381e <xQueueGenericCreateStatic+0x56>
 801381a:	2301      	movs	r3, #1
 801381c:	e000      	b.n	8013820 <xQueueGenericCreateStatic+0x58>
 801381e:	2300      	movs	r3, #0
 8013820:	2b00      	cmp	r3, #0
 8013822:	d10a      	bne.n	801383a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013828:	f383 8811 	msr	BASEPRI, r3
 801382c:	f3bf 8f6f 	isb	sy
 8013830:	f3bf 8f4f 	dsb	sy
 8013834:	623b      	str	r3, [r7, #32]
}
 8013836:	bf00      	nop
 8013838:	e7fe      	b.n	8013838 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d102      	bne.n	8013846 <xQueueGenericCreateStatic+0x7e>
 8013840:	68bb      	ldr	r3, [r7, #8]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d101      	bne.n	801384a <xQueueGenericCreateStatic+0x82>
 8013846:	2301      	movs	r3, #1
 8013848:	e000      	b.n	801384c <xQueueGenericCreateStatic+0x84>
 801384a:	2300      	movs	r3, #0
 801384c:	2b00      	cmp	r3, #0
 801384e:	d10a      	bne.n	8013866 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8013850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013854:	f383 8811 	msr	BASEPRI, r3
 8013858:	f3bf 8f6f 	isb	sy
 801385c:	f3bf 8f4f 	dsb	sy
 8013860:	61fb      	str	r3, [r7, #28]
}
 8013862:	bf00      	nop
 8013864:	e7fe      	b.n	8013864 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013866:	2350      	movs	r3, #80	; 0x50
 8013868:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801386a:	697b      	ldr	r3, [r7, #20]
 801386c:	2b50      	cmp	r3, #80	; 0x50
 801386e:	d00a      	beq.n	8013886 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8013870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013874:	f383 8811 	msr	BASEPRI, r3
 8013878:	f3bf 8f6f 	isb	sy
 801387c:	f3bf 8f4f 	dsb	sy
 8013880:	61bb      	str	r3, [r7, #24]
}
 8013882:	bf00      	nop
 8013884:	e7fe      	b.n	8013884 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013886:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013888:	683b      	ldr	r3, [r7, #0]
 801388a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801388c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801388e:	2b00      	cmp	r3, #0
 8013890:	d00d      	beq.n	80138ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013894:	2201      	movs	r2, #1
 8013896:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801389a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801389e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138a0:	9300      	str	r3, [sp, #0]
 80138a2:	4613      	mov	r3, r2
 80138a4:	687a      	ldr	r2, [r7, #4]
 80138a6:	68b9      	ldr	r1, [r7, #8]
 80138a8:	68f8      	ldr	r0, [r7, #12]
 80138aa:	f000 f805 	bl	80138b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80138ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80138b0:	4618      	mov	r0, r3
 80138b2:	3730      	adds	r7, #48	; 0x30
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd80      	pop	{r7, pc}

080138b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b084      	sub	sp, #16
 80138bc:	af00      	add	r7, sp, #0
 80138be:	60f8      	str	r0, [r7, #12]
 80138c0:	60b9      	str	r1, [r7, #8]
 80138c2:	607a      	str	r2, [r7, #4]
 80138c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80138c6:	68bb      	ldr	r3, [r7, #8]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d103      	bne.n	80138d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80138cc:	69bb      	ldr	r3, [r7, #24]
 80138ce:	69ba      	ldr	r2, [r7, #24]
 80138d0:	601a      	str	r2, [r3, #0]
 80138d2:	e002      	b.n	80138da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80138d4:	69bb      	ldr	r3, [r7, #24]
 80138d6:	687a      	ldr	r2, [r7, #4]
 80138d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80138da:	69bb      	ldr	r3, [r7, #24]
 80138dc:	68fa      	ldr	r2, [r7, #12]
 80138de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80138e0:	69bb      	ldr	r3, [r7, #24]
 80138e2:	68ba      	ldr	r2, [r7, #8]
 80138e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80138e6:	2101      	movs	r1, #1
 80138e8:	69b8      	ldr	r0, [r7, #24]
 80138ea:	f7ff ff05 	bl	80136f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80138ee:	69bb      	ldr	r3, [r7, #24]
 80138f0:	78fa      	ldrb	r2, [r7, #3]
 80138f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80138f6:	bf00      	nop
 80138f8:	3710      	adds	r7, #16
 80138fa:	46bd      	mov	sp, r7
 80138fc:	bd80      	pop	{r7, pc}
	...

08013900 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b08e      	sub	sp, #56	; 0x38
 8013904:	af00      	add	r7, sp, #0
 8013906:	60f8      	str	r0, [r7, #12]
 8013908:	60b9      	str	r1, [r7, #8]
 801390a:	607a      	str	r2, [r7, #4]
 801390c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801390e:	2300      	movs	r3, #0
 8013910:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013918:	2b00      	cmp	r3, #0
 801391a:	d10a      	bne.n	8013932 <xQueueGenericSend+0x32>
	__asm volatile
 801391c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013920:	f383 8811 	msr	BASEPRI, r3
 8013924:	f3bf 8f6f 	isb	sy
 8013928:	f3bf 8f4f 	dsb	sy
 801392c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801392e:	bf00      	nop
 8013930:	e7fe      	b.n	8013930 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013932:	68bb      	ldr	r3, [r7, #8]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d103      	bne.n	8013940 <xQueueGenericSend+0x40>
 8013938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801393c:	2b00      	cmp	r3, #0
 801393e:	d101      	bne.n	8013944 <xQueueGenericSend+0x44>
 8013940:	2301      	movs	r3, #1
 8013942:	e000      	b.n	8013946 <xQueueGenericSend+0x46>
 8013944:	2300      	movs	r3, #0
 8013946:	2b00      	cmp	r3, #0
 8013948:	d10a      	bne.n	8013960 <xQueueGenericSend+0x60>
	__asm volatile
 801394a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801394e:	f383 8811 	msr	BASEPRI, r3
 8013952:	f3bf 8f6f 	isb	sy
 8013956:	f3bf 8f4f 	dsb	sy
 801395a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801395c:	bf00      	nop
 801395e:	e7fe      	b.n	801395e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013960:	683b      	ldr	r3, [r7, #0]
 8013962:	2b02      	cmp	r3, #2
 8013964:	d103      	bne.n	801396e <xQueueGenericSend+0x6e>
 8013966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801396a:	2b01      	cmp	r3, #1
 801396c:	d101      	bne.n	8013972 <xQueueGenericSend+0x72>
 801396e:	2301      	movs	r3, #1
 8013970:	e000      	b.n	8013974 <xQueueGenericSend+0x74>
 8013972:	2300      	movs	r3, #0
 8013974:	2b00      	cmp	r3, #0
 8013976:	d10a      	bne.n	801398e <xQueueGenericSend+0x8e>
	__asm volatile
 8013978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801397c:	f383 8811 	msr	BASEPRI, r3
 8013980:	f3bf 8f6f 	isb	sy
 8013984:	f3bf 8f4f 	dsb	sy
 8013988:	623b      	str	r3, [r7, #32]
}
 801398a:	bf00      	nop
 801398c:	e7fe      	b.n	801398c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801398e:	f001 fa71 	bl	8014e74 <xTaskGetSchedulerState>
 8013992:	4603      	mov	r3, r0
 8013994:	2b00      	cmp	r3, #0
 8013996:	d102      	bne.n	801399e <xQueueGenericSend+0x9e>
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d101      	bne.n	80139a2 <xQueueGenericSend+0xa2>
 801399e:	2301      	movs	r3, #1
 80139a0:	e000      	b.n	80139a4 <xQueueGenericSend+0xa4>
 80139a2:	2300      	movs	r3, #0
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d10a      	bne.n	80139be <xQueueGenericSend+0xbe>
	__asm volatile
 80139a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139ac:	f383 8811 	msr	BASEPRI, r3
 80139b0:	f3bf 8f6f 	isb	sy
 80139b4:	f3bf 8f4f 	dsb	sy
 80139b8:	61fb      	str	r3, [r7, #28]
}
 80139ba:	bf00      	nop
 80139bc:	e7fe      	b.n	80139bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80139be:	f001 ffe9 	bl	8015994 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80139c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80139c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80139ca:	429a      	cmp	r2, r3
 80139cc:	d302      	bcc.n	80139d4 <xQueueGenericSend+0xd4>
 80139ce:	683b      	ldr	r3, [r7, #0]
 80139d0:	2b02      	cmp	r3, #2
 80139d2:	d129      	bne.n	8013a28 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80139d4:	683a      	ldr	r2, [r7, #0]
 80139d6:	68b9      	ldr	r1, [r7, #8]
 80139d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139da:	f000 fa0b 	bl	8013df4 <prvCopyDataToQueue>
 80139de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80139e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d010      	beq.n	8013a0a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80139e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139ea:	3324      	adds	r3, #36	; 0x24
 80139ec:	4618      	mov	r0, r3
 80139ee:	f001 f821 	bl	8014a34 <xTaskRemoveFromEventList>
 80139f2:	4603      	mov	r3, r0
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d013      	beq.n	8013a20 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80139f8:	4b3f      	ldr	r3, [pc, #252]	; (8013af8 <xQueueGenericSend+0x1f8>)
 80139fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139fe:	601a      	str	r2, [r3, #0]
 8013a00:	f3bf 8f4f 	dsb	sy
 8013a04:	f3bf 8f6f 	isb	sy
 8013a08:	e00a      	b.n	8013a20 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d007      	beq.n	8013a20 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013a10:	4b39      	ldr	r3, [pc, #228]	; (8013af8 <xQueueGenericSend+0x1f8>)
 8013a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a16:	601a      	str	r2, [r3, #0]
 8013a18:	f3bf 8f4f 	dsb	sy
 8013a1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013a20:	f001 ffe8 	bl	80159f4 <vPortExitCritical>
				return pdPASS;
 8013a24:	2301      	movs	r3, #1
 8013a26:	e063      	b.n	8013af0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d103      	bne.n	8013a36 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013a2e:	f001 ffe1 	bl	80159f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013a32:	2300      	movs	r3, #0
 8013a34:	e05c      	b.n	8013af0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d106      	bne.n	8013a4a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013a3c:	f107 0314 	add.w	r3, r7, #20
 8013a40:	4618      	mov	r0, r3
 8013a42:	f001 f8bd 	bl	8014bc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013a46:	2301      	movs	r3, #1
 8013a48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013a4a:	f001 ffd3 	bl	80159f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013a4e:	f000 fd7b 	bl	8014548 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013a52:	f001 ff9f 	bl	8015994 <vPortEnterCritical>
 8013a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013a5c:	b25b      	sxtb	r3, r3
 8013a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013a62:	d103      	bne.n	8013a6c <xQueueGenericSend+0x16c>
 8013a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a66:	2200      	movs	r2, #0
 8013a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013a72:	b25b      	sxtb	r3, r3
 8013a74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013a78:	d103      	bne.n	8013a82 <xQueueGenericSend+0x182>
 8013a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013a82:	f001 ffb7 	bl	80159f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013a86:	1d3a      	adds	r2, r7, #4
 8013a88:	f107 0314 	add.w	r3, r7, #20
 8013a8c:	4611      	mov	r1, r2
 8013a8e:	4618      	mov	r0, r3
 8013a90:	f001 f8ac 	bl	8014bec <xTaskCheckForTimeOut>
 8013a94:	4603      	mov	r3, r0
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d124      	bne.n	8013ae4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013a9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a9c:	f000 faa2 	bl	8013fe4 <prvIsQueueFull>
 8013aa0:	4603      	mov	r3, r0
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d018      	beq.n	8013ad8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aa8:	3310      	adds	r3, #16
 8013aaa:	687a      	ldr	r2, [r7, #4]
 8013aac:	4611      	mov	r1, r2
 8013aae:	4618      	mov	r0, r3
 8013ab0:	f000 ff34 	bl	801491c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ab6:	f000 fa2d 	bl	8013f14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013aba:	f000 fd53 	bl	8014564 <xTaskResumeAll>
 8013abe:	4603      	mov	r3, r0
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	f47f af7c 	bne.w	80139be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8013ac6:	4b0c      	ldr	r3, [pc, #48]	; (8013af8 <xQueueGenericSend+0x1f8>)
 8013ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013acc:	601a      	str	r2, [r3, #0]
 8013ace:	f3bf 8f4f 	dsb	sy
 8013ad2:	f3bf 8f6f 	isb	sy
 8013ad6:	e772      	b.n	80139be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ada:	f000 fa1b 	bl	8013f14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013ade:	f000 fd41 	bl	8014564 <xTaskResumeAll>
 8013ae2:	e76c      	b.n	80139be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ae6:	f000 fa15 	bl	8013f14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013aea:	f000 fd3b 	bl	8014564 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013aee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013af0:	4618      	mov	r0, r3
 8013af2:	3738      	adds	r7, #56	; 0x38
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bd80      	pop	{r7, pc}
 8013af8:	e000ed04 	.word	0xe000ed04

08013afc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b090      	sub	sp, #64	; 0x40
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	60f8      	str	r0, [r7, #12]
 8013b04:	60b9      	str	r1, [r7, #8]
 8013b06:	607a      	str	r2, [r7, #4]
 8013b08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8013b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d10a      	bne.n	8013b2a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8013b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b18:	f383 8811 	msr	BASEPRI, r3
 8013b1c:	f3bf 8f6f 	isb	sy
 8013b20:	f3bf 8f4f 	dsb	sy
 8013b24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013b26:	bf00      	nop
 8013b28:	e7fe      	b.n	8013b28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013b2a:	68bb      	ldr	r3, [r7, #8]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d103      	bne.n	8013b38 <xQueueGenericSendFromISR+0x3c>
 8013b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d101      	bne.n	8013b3c <xQueueGenericSendFromISR+0x40>
 8013b38:	2301      	movs	r3, #1
 8013b3a:	e000      	b.n	8013b3e <xQueueGenericSendFromISR+0x42>
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d10a      	bne.n	8013b58 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b46:	f383 8811 	msr	BASEPRI, r3
 8013b4a:	f3bf 8f6f 	isb	sy
 8013b4e:	f3bf 8f4f 	dsb	sy
 8013b52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013b54:	bf00      	nop
 8013b56:	e7fe      	b.n	8013b56 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013b58:	683b      	ldr	r3, [r7, #0]
 8013b5a:	2b02      	cmp	r3, #2
 8013b5c:	d103      	bne.n	8013b66 <xQueueGenericSendFromISR+0x6a>
 8013b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013b62:	2b01      	cmp	r3, #1
 8013b64:	d101      	bne.n	8013b6a <xQueueGenericSendFromISR+0x6e>
 8013b66:	2301      	movs	r3, #1
 8013b68:	e000      	b.n	8013b6c <xQueueGenericSendFromISR+0x70>
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d10a      	bne.n	8013b86 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b74:	f383 8811 	msr	BASEPRI, r3
 8013b78:	f3bf 8f6f 	isb	sy
 8013b7c:	f3bf 8f4f 	dsb	sy
 8013b80:	623b      	str	r3, [r7, #32]
}
 8013b82:	bf00      	nop
 8013b84:	e7fe      	b.n	8013b84 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013b86:	f001 ffe7 	bl	8015b58 <vPortValidateInterruptPriority>
	__asm volatile
 8013b8a:	f3ef 8211 	mrs	r2, BASEPRI
 8013b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b92:	f383 8811 	msr	BASEPRI, r3
 8013b96:	f3bf 8f6f 	isb	sy
 8013b9a:	f3bf 8f4f 	dsb	sy
 8013b9e:	61fa      	str	r2, [r7, #28]
 8013ba0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8013ba2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013ba4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013bae:	429a      	cmp	r2, r3
 8013bb0:	d302      	bcc.n	8013bb8 <xQueueGenericSendFromISR+0xbc>
 8013bb2:	683b      	ldr	r3, [r7, #0]
 8013bb4:	2b02      	cmp	r3, #2
 8013bb6:	d12f      	bne.n	8013c18 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013bc8:	683a      	ldr	r2, [r7, #0]
 8013bca:	68b9      	ldr	r1, [r7, #8]
 8013bcc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013bce:	f000 f911 	bl	8013df4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013bd2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8013bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013bda:	d112      	bne.n	8013c02 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d016      	beq.n	8013c12 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013be6:	3324      	adds	r3, #36	; 0x24
 8013be8:	4618      	mov	r0, r3
 8013bea:	f000 ff23 	bl	8014a34 <xTaskRemoveFromEventList>
 8013bee:	4603      	mov	r3, r0
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d00e      	beq.n	8013c12 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d00b      	beq.n	8013c12 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	2201      	movs	r2, #1
 8013bfe:	601a      	str	r2, [r3, #0]
 8013c00:	e007      	b.n	8013c12 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013c02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013c06:	3301      	adds	r3, #1
 8013c08:	b2db      	uxtb	r3, r3
 8013c0a:	b25a      	sxtb	r2, r3
 8013c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013c12:	2301      	movs	r3, #1
 8013c14:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8013c16:	e001      	b.n	8013c1c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013c18:	2300      	movs	r3, #0
 8013c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c1e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8013c20:	697b      	ldr	r3, [r7, #20]
 8013c22:	f383 8811 	msr	BASEPRI, r3
}
 8013c26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	3740      	adds	r7, #64	; 0x40
 8013c2e:	46bd      	mov	sp, r7
 8013c30:	bd80      	pop	{r7, pc}
	...

08013c34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013c34:	b580      	push	{r7, lr}
 8013c36:	b08c      	sub	sp, #48	; 0x30
 8013c38:	af00      	add	r7, sp, #0
 8013c3a:	60f8      	str	r0, [r7, #12]
 8013c3c:	60b9      	str	r1, [r7, #8]
 8013c3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013c40:	2300      	movs	r3, #0
 8013c42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d10a      	bne.n	8013c64 <xQueueReceive+0x30>
	__asm volatile
 8013c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c52:	f383 8811 	msr	BASEPRI, r3
 8013c56:	f3bf 8f6f 	isb	sy
 8013c5a:	f3bf 8f4f 	dsb	sy
 8013c5e:	623b      	str	r3, [r7, #32]
}
 8013c60:	bf00      	nop
 8013c62:	e7fe      	b.n	8013c62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013c64:	68bb      	ldr	r3, [r7, #8]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d103      	bne.n	8013c72 <xQueueReceive+0x3e>
 8013c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d101      	bne.n	8013c76 <xQueueReceive+0x42>
 8013c72:	2301      	movs	r3, #1
 8013c74:	e000      	b.n	8013c78 <xQueueReceive+0x44>
 8013c76:	2300      	movs	r3, #0
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d10a      	bne.n	8013c92 <xQueueReceive+0x5e>
	__asm volatile
 8013c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c80:	f383 8811 	msr	BASEPRI, r3
 8013c84:	f3bf 8f6f 	isb	sy
 8013c88:	f3bf 8f4f 	dsb	sy
 8013c8c:	61fb      	str	r3, [r7, #28]
}
 8013c8e:	bf00      	nop
 8013c90:	e7fe      	b.n	8013c90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013c92:	f001 f8ef 	bl	8014e74 <xTaskGetSchedulerState>
 8013c96:	4603      	mov	r3, r0
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d102      	bne.n	8013ca2 <xQueueReceive+0x6e>
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d101      	bne.n	8013ca6 <xQueueReceive+0x72>
 8013ca2:	2301      	movs	r3, #1
 8013ca4:	e000      	b.n	8013ca8 <xQueueReceive+0x74>
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d10a      	bne.n	8013cc2 <xQueueReceive+0x8e>
	__asm volatile
 8013cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cb0:	f383 8811 	msr	BASEPRI, r3
 8013cb4:	f3bf 8f6f 	isb	sy
 8013cb8:	f3bf 8f4f 	dsb	sy
 8013cbc:	61bb      	str	r3, [r7, #24]
}
 8013cbe:	bf00      	nop
 8013cc0:	e7fe      	b.n	8013cc0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013cc2:	f001 fe67 	bl	8015994 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d01f      	beq.n	8013d12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013cd2:	68b9      	ldr	r1, [r7, #8]
 8013cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013cd6:	f000 f8f7 	bl	8013ec8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cdc:	1e5a      	subs	r2, r3, #1
 8013cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ce0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ce4:	691b      	ldr	r3, [r3, #16]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d00f      	beq.n	8013d0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cec:	3310      	adds	r3, #16
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f000 fea0 	bl	8014a34 <xTaskRemoveFromEventList>
 8013cf4:	4603      	mov	r3, r0
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d007      	beq.n	8013d0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013cfa:	4b3d      	ldr	r3, [pc, #244]	; (8013df0 <xQueueReceive+0x1bc>)
 8013cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d00:	601a      	str	r2, [r3, #0]
 8013d02:	f3bf 8f4f 	dsb	sy
 8013d06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013d0a:	f001 fe73 	bl	80159f4 <vPortExitCritical>
				return pdPASS;
 8013d0e:	2301      	movs	r3, #1
 8013d10:	e069      	b.n	8013de6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d103      	bne.n	8013d20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013d18:	f001 fe6c 	bl	80159f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	e062      	b.n	8013de6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d106      	bne.n	8013d34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013d26:	f107 0310 	add.w	r3, r7, #16
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	f000 ff48 	bl	8014bc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013d30:	2301      	movs	r3, #1
 8013d32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013d34:	f001 fe5e 	bl	80159f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013d38:	f000 fc06 	bl	8014548 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013d3c:	f001 fe2a 	bl	8015994 <vPortEnterCritical>
 8013d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013d46:	b25b      	sxtb	r3, r3
 8013d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013d4c:	d103      	bne.n	8013d56 <xQueueReceive+0x122>
 8013d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d50:	2200      	movs	r2, #0
 8013d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013d5c:	b25b      	sxtb	r3, r3
 8013d5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013d62:	d103      	bne.n	8013d6c <xQueueReceive+0x138>
 8013d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d66:	2200      	movs	r2, #0
 8013d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013d6c:	f001 fe42 	bl	80159f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013d70:	1d3a      	adds	r2, r7, #4
 8013d72:	f107 0310 	add.w	r3, r7, #16
 8013d76:	4611      	mov	r1, r2
 8013d78:	4618      	mov	r0, r3
 8013d7a:	f000 ff37 	bl	8014bec <xTaskCheckForTimeOut>
 8013d7e:	4603      	mov	r3, r0
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d123      	bne.n	8013dcc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d86:	f000 f917 	bl	8013fb8 <prvIsQueueEmpty>
 8013d8a:	4603      	mov	r3, r0
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d017      	beq.n	8013dc0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d92:	3324      	adds	r3, #36	; 0x24
 8013d94:	687a      	ldr	r2, [r7, #4]
 8013d96:	4611      	mov	r1, r2
 8013d98:	4618      	mov	r0, r3
 8013d9a:	f000 fdbf 	bl	801491c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013da0:	f000 f8b8 	bl	8013f14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013da4:	f000 fbde 	bl	8014564 <xTaskResumeAll>
 8013da8:	4603      	mov	r3, r0
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d189      	bne.n	8013cc2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013dae:	4b10      	ldr	r3, [pc, #64]	; (8013df0 <xQueueReceive+0x1bc>)
 8013db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013db4:	601a      	str	r2, [r3, #0]
 8013db6:	f3bf 8f4f 	dsb	sy
 8013dba:	f3bf 8f6f 	isb	sy
 8013dbe:	e780      	b.n	8013cc2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013dc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013dc2:	f000 f8a7 	bl	8013f14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013dc6:	f000 fbcd 	bl	8014564 <xTaskResumeAll>
 8013dca:	e77a      	b.n	8013cc2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013dce:	f000 f8a1 	bl	8013f14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013dd2:	f000 fbc7 	bl	8014564 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013dd8:	f000 f8ee 	bl	8013fb8 <prvIsQueueEmpty>
 8013ddc:	4603      	mov	r3, r0
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	f43f af6f 	beq.w	8013cc2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013de4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013de6:	4618      	mov	r0, r3
 8013de8:	3730      	adds	r7, #48	; 0x30
 8013dea:	46bd      	mov	sp, r7
 8013dec:	bd80      	pop	{r7, pc}
 8013dee:	bf00      	nop
 8013df0:	e000ed04 	.word	0xe000ed04

08013df4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b086      	sub	sp, #24
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	60f8      	str	r0, [r7, #12]
 8013dfc:	60b9      	str	r1, [r7, #8]
 8013dfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013e00:	2300      	movs	r3, #0
 8013e02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d10d      	bne.n	8013e2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d14d      	bne.n	8013eb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	689b      	ldr	r3, [r3, #8]
 8013e1e:	4618      	mov	r0, r3
 8013e20:	f001 f846 	bl	8014eb0 <xTaskPriorityDisinherit>
 8013e24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	2200      	movs	r2, #0
 8013e2a:	609a      	str	r2, [r3, #8]
 8013e2c:	e043      	b.n	8013eb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d119      	bne.n	8013e68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	6858      	ldr	r0, [r3, #4]
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e3c:	461a      	mov	r2, r3
 8013e3e:	68b9      	ldr	r1, [r7, #8]
 8013e40:	f002 f8de 	bl	8016000 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	685a      	ldr	r2, [r3, #4]
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e4c:	441a      	add	r2, r3
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	685a      	ldr	r2, [r3, #4]
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	689b      	ldr	r3, [r3, #8]
 8013e5a:	429a      	cmp	r2, r3
 8013e5c:	d32b      	bcc.n	8013eb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	681a      	ldr	r2, [r3, #0]
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	605a      	str	r2, [r3, #4]
 8013e66:	e026      	b.n	8013eb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	68d8      	ldr	r0, [r3, #12]
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e70:	461a      	mov	r2, r3
 8013e72:	68b9      	ldr	r1, [r7, #8]
 8013e74:	f002 f8c4 	bl	8016000 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	68da      	ldr	r2, [r3, #12]
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e80:	425b      	negs	r3, r3
 8013e82:	441a      	add	r2, r3
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	68da      	ldr	r2, [r3, #12]
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	429a      	cmp	r2, r3
 8013e92:	d207      	bcs.n	8013ea4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	689a      	ldr	r2, [r3, #8]
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e9c:	425b      	negs	r3, r3
 8013e9e:	441a      	add	r2, r3
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	2b02      	cmp	r3, #2
 8013ea8:	d105      	bne.n	8013eb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013eaa:	693b      	ldr	r3, [r7, #16]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d002      	beq.n	8013eb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013eb0:	693b      	ldr	r3, [r7, #16]
 8013eb2:	3b01      	subs	r3, #1
 8013eb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013eb6:	693b      	ldr	r3, [r7, #16]
 8013eb8:	1c5a      	adds	r2, r3, #1
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013ebe:	697b      	ldr	r3, [r7, #20]
}
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	3718      	adds	r7, #24
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	bd80      	pop	{r7, pc}

08013ec8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b082      	sub	sp, #8
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
 8013ed0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d018      	beq.n	8013f0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	68da      	ldr	r2, [r3, #12]
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ee2:	441a      	add	r2, r3
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	68da      	ldr	r2, [r3, #12]
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	689b      	ldr	r3, [r3, #8]
 8013ef0:	429a      	cmp	r2, r3
 8013ef2:	d303      	bcc.n	8013efc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	681a      	ldr	r2, [r3, #0]
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	68d9      	ldr	r1, [r3, #12]
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f04:	461a      	mov	r2, r3
 8013f06:	6838      	ldr	r0, [r7, #0]
 8013f08:	f002 f87a 	bl	8016000 <memcpy>
	}
}
 8013f0c:	bf00      	nop
 8013f0e:	3708      	adds	r7, #8
 8013f10:	46bd      	mov	sp, r7
 8013f12:	bd80      	pop	{r7, pc}

08013f14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b084      	sub	sp, #16
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013f1c:	f001 fd3a 	bl	8015994 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013f26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013f28:	e011      	b.n	8013f4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d012      	beq.n	8013f58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	3324      	adds	r3, #36	; 0x24
 8013f36:	4618      	mov	r0, r3
 8013f38:	f000 fd7c 	bl	8014a34 <xTaskRemoveFromEventList>
 8013f3c:	4603      	mov	r3, r0
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d001      	beq.n	8013f46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013f42:	f000 feb5 	bl	8014cb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013f46:	7bfb      	ldrb	r3, [r7, #15]
 8013f48:	3b01      	subs	r3, #1
 8013f4a:	b2db      	uxtb	r3, r3
 8013f4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	dce9      	bgt.n	8013f2a <prvUnlockQueue+0x16>
 8013f56:	e000      	b.n	8013f5a <prvUnlockQueue+0x46>
					break;
 8013f58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	22ff      	movs	r2, #255	; 0xff
 8013f5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013f62:	f001 fd47 	bl	80159f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013f66:	f001 fd15 	bl	8015994 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013f70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013f72:	e011      	b.n	8013f98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	691b      	ldr	r3, [r3, #16]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d012      	beq.n	8013fa2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	3310      	adds	r3, #16
 8013f80:	4618      	mov	r0, r3
 8013f82:	f000 fd57 	bl	8014a34 <xTaskRemoveFromEventList>
 8013f86:	4603      	mov	r3, r0
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d001      	beq.n	8013f90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013f8c:	f000 fe90 	bl	8014cb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013f90:	7bbb      	ldrb	r3, [r7, #14]
 8013f92:	3b01      	subs	r3, #1
 8013f94:	b2db      	uxtb	r3, r3
 8013f96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013f98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	dce9      	bgt.n	8013f74 <prvUnlockQueue+0x60>
 8013fa0:	e000      	b.n	8013fa4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013fa2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	22ff      	movs	r2, #255	; 0xff
 8013fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013fac:	f001 fd22 	bl	80159f4 <vPortExitCritical>
}
 8013fb0:	bf00      	nop
 8013fb2:	3710      	adds	r7, #16
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	bd80      	pop	{r7, pc}

08013fb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b084      	sub	sp, #16
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013fc0:	f001 fce8 	bl	8015994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d102      	bne.n	8013fd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013fcc:	2301      	movs	r3, #1
 8013fce:	60fb      	str	r3, [r7, #12]
 8013fd0:	e001      	b.n	8013fd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013fd6:	f001 fd0d 	bl	80159f4 <vPortExitCritical>

	return xReturn;
 8013fda:	68fb      	ldr	r3, [r7, #12]
}
 8013fdc:	4618      	mov	r0, r3
 8013fde:	3710      	adds	r7, #16
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd80      	pop	{r7, pc}

08013fe4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013fe4:	b580      	push	{r7, lr}
 8013fe6:	b084      	sub	sp, #16
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013fec:	f001 fcd2 	bl	8015994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ff8:	429a      	cmp	r2, r3
 8013ffa:	d102      	bne.n	8014002 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013ffc:	2301      	movs	r3, #1
 8013ffe:	60fb      	str	r3, [r7, #12]
 8014000:	e001      	b.n	8014006 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014002:	2300      	movs	r3, #0
 8014004:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014006:	f001 fcf5 	bl	80159f4 <vPortExitCritical>

	return xReturn;
 801400a:	68fb      	ldr	r3, [r7, #12]
}
 801400c:	4618      	mov	r0, r3
 801400e:	3710      	adds	r7, #16
 8014010:	46bd      	mov	sp, r7
 8014012:	bd80      	pop	{r7, pc}

08014014 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014014:	b480      	push	{r7}
 8014016:	b085      	sub	sp, #20
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
 801401c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801401e:	2300      	movs	r3, #0
 8014020:	60fb      	str	r3, [r7, #12]
 8014022:	e014      	b.n	801404e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014024:	4a0f      	ldr	r2, [pc, #60]	; (8014064 <vQueueAddToRegistry+0x50>)
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d10b      	bne.n	8014048 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014030:	490c      	ldr	r1, [pc, #48]	; (8014064 <vQueueAddToRegistry+0x50>)
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	683a      	ldr	r2, [r7, #0]
 8014036:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801403a:	4a0a      	ldr	r2, [pc, #40]	; (8014064 <vQueueAddToRegistry+0x50>)
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	00db      	lsls	r3, r3, #3
 8014040:	4413      	add	r3, r2
 8014042:	687a      	ldr	r2, [r7, #4]
 8014044:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014046:	e006      	b.n	8014056 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	3301      	adds	r3, #1
 801404c:	60fb      	str	r3, [r7, #12]
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	2b07      	cmp	r3, #7
 8014052:	d9e7      	bls.n	8014024 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014054:	bf00      	nop
 8014056:	bf00      	nop
 8014058:	3714      	adds	r7, #20
 801405a:	46bd      	mov	sp, r7
 801405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014060:	4770      	bx	lr
 8014062:	bf00      	nop
 8014064:	24002440 	.word	0x24002440

08014068 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014068:	b580      	push	{r7, lr}
 801406a:	b086      	sub	sp, #24
 801406c:	af00      	add	r7, sp, #0
 801406e:	60f8      	str	r0, [r7, #12]
 8014070:	60b9      	str	r1, [r7, #8]
 8014072:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014078:	f001 fc8c 	bl	8015994 <vPortEnterCritical>
 801407c:	697b      	ldr	r3, [r7, #20]
 801407e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014082:	b25b      	sxtb	r3, r3
 8014084:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014088:	d103      	bne.n	8014092 <vQueueWaitForMessageRestricted+0x2a>
 801408a:	697b      	ldr	r3, [r7, #20]
 801408c:	2200      	movs	r2, #0
 801408e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014092:	697b      	ldr	r3, [r7, #20]
 8014094:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014098:	b25b      	sxtb	r3, r3
 801409a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801409e:	d103      	bne.n	80140a8 <vQueueWaitForMessageRestricted+0x40>
 80140a0:	697b      	ldr	r3, [r7, #20]
 80140a2:	2200      	movs	r2, #0
 80140a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80140a8:	f001 fca4 	bl	80159f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80140ac:	697b      	ldr	r3, [r7, #20]
 80140ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d106      	bne.n	80140c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80140b4:	697b      	ldr	r3, [r7, #20]
 80140b6:	3324      	adds	r3, #36	; 0x24
 80140b8:	687a      	ldr	r2, [r7, #4]
 80140ba:	68b9      	ldr	r1, [r7, #8]
 80140bc:	4618      	mov	r0, r3
 80140be:	f000 fc8d 	bl	80149dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80140c2:	6978      	ldr	r0, [r7, #20]
 80140c4:	f7ff ff26 	bl	8013f14 <prvUnlockQueue>
	}
 80140c8:	bf00      	nop
 80140ca:	3718      	adds	r7, #24
 80140cc:	46bd      	mov	sp, r7
 80140ce:	bd80      	pop	{r7, pc}

080140d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b08e      	sub	sp, #56	; 0x38
 80140d4:	af04      	add	r7, sp, #16
 80140d6:	60f8      	str	r0, [r7, #12]
 80140d8:	60b9      	str	r1, [r7, #8]
 80140da:	607a      	str	r2, [r7, #4]
 80140dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80140de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d10a      	bne.n	80140fa <xTaskCreateStatic+0x2a>
	__asm volatile
 80140e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140e8:	f383 8811 	msr	BASEPRI, r3
 80140ec:	f3bf 8f6f 	isb	sy
 80140f0:	f3bf 8f4f 	dsb	sy
 80140f4:	623b      	str	r3, [r7, #32]
}
 80140f6:	bf00      	nop
 80140f8:	e7fe      	b.n	80140f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80140fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d10a      	bne.n	8014116 <xTaskCreateStatic+0x46>
	__asm volatile
 8014100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014104:	f383 8811 	msr	BASEPRI, r3
 8014108:	f3bf 8f6f 	isb	sy
 801410c:	f3bf 8f4f 	dsb	sy
 8014110:	61fb      	str	r3, [r7, #28]
}
 8014112:	bf00      	nop
 8014114:	e7fe      	b.n	8014114 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014116:	235c      	movs	r3, #92	; 0x5c
 8014118:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801411a:	693b      	ldr	r3, [r7, #16]
 801411c:	2b5c      	cmp	r3, #92	; 0x5c
 801411e:	d00a      	beq.n	8014136 <xTaskCreateStatic+0x66>
	__asm volatile
 8014120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014124:	f383 8811 	msr	BASEPRI, r3
 8014128:	f3bf 8f6f 	isb	sy
 801412c:	f3bf 8f4f 	dsb	sy
 8014130:	61bb      	str	r3, [r7, #24]
}
 8014132:	bf00      	nop
 8014134:	e7fe      	b.n	8014134 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014136:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801413a:	2b00      	cmp	r3, #0
 801413c:	d01e      	beq.n	801417c <xTaskCreateStatic+0xac>
 801413e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014140:	2b00      	cmp	r3, #0
 8014142:	d01b      	beq.n	801417c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014146:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801414a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801414c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014150:	2202      	movs	r2, #2
 8014152:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014156:	2300      	movs	r3, #0
 8014158:	9303      	str	r3, [sp, #12]
 801415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801415c:	9302      	str	r3, [sp, #8]
 801415e:	f107 0314 	add.w	r3, r7, #20
 8014162:	9301      	str	r3, [sp, #4]
 8014164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014166:	9300      	str	r3, [sp, #0]
 8014168:	683b      	ldr	r3, [r7, #0]
 801416a:	687a      	ldr	r2, [r7, #4]
 801416c:	68b9      	ldr	r1, [r7, #8]
 801416e:	68f8      	ldr	r0, [r7, #12]
 8014170:	f000 f850 	bl	8014214 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014174:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014176:	f000 f8dd 	bl	8014334 <prvAddNewTaskToReadyList>
 801417a:	e001      	b.n	8014180 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801417c:	2300      	movs	r3, #0
 801417e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014180:	697b      	ldr	r3, [r7, #20]
	}
 8014182:	4618      	mov	r0, r3
 8014184:	3728      	adds	r7, #40	; 0x28
 8014186:	46bd      	mov	sp, r7
 8014188:	bd80      	pop	{r7, pc}

0801418a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801418a:	b580      	push	{r7, lr}
 801418c:	b08c      	sub	sp, #48	; 0x30
 801418e:	af04      	add	r7, sp, #16
 8014190:	60f8      	str	r0, [r7, #12]
 8014192:	60b9      	str	r1, [r7, #8]
 8014194:	603b      	str	r3, [r7, #0]
 8014196:	4613      	mov	r3, r2
 8014198:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801419a:	88fb      	ldrh	r3, [r7, #6]
 801419c:	009b      	lsls	r3, r3, #2
 801419e:	4618      	mov	r0, r3
 80141a0:	f001 fd1a 	bl	8015bd8 <pvPortMalloc>
 80141a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80141a6:	697b      	ldr	r3, [r7, #20]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d00e      	beq.n	80141ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80141ac:	205c      	movs	r0, #92	; 0x5c
 80141ae:	f001 fd13 	bl	8015bd8 <pvPortMalloc>
 80141b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80141b4:	69fb      	ldr	r3, [r7, #28]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d003      	beq.n	80141c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80141ba:	69fb      	ldr	r3, [r7, #28]
 80141bc:	697a      	ldr	r2, [r7, #20]
 80141be:	631a      	str	r2, [r3, #48]	; 0x30
 80141c0:	e005      	b.n	80141ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80141c2:	6978      	ldr	r0, [r7, #20]
 80141c4:	f001 fdd4 	bl	8015d70 <vPortFree>
 80141c8:	e001      	b.n	80141ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80141ca:	2300      	movs	r3, #0
 80141cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80141ce:	69fb      	ldr	r3, [r7, #28]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d017      	beq.n	8014204 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80141d4:	69fb      	ldr	r3, [r7, #28]
 80141d6:	2200      	movs	r2, #0
 80141d8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80141dc:	88fa      	ldrh	r2, [r7, #6]
 80141de:	2300      	movs	r3, #0
 80141e0:	9303      	str	r3, [sp, #12]
 80141e2:	69fb      	ldr	r3, [r7, #28]
 80141e4:	9302      	str	r3, [sp, #8]
 80141e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141e8:	9301      	str	r3, [sp, #4]
 80141ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141ec:	9300      	str	r3, [sp, #0]
 80141ee:	683b      	ldr	r3, [r7, #0]
 80141f0:	68b9      	ldr	r1, [r7, #8]
 80141f2:	68f8      	ldr	r0, [r7, #12]
 80141f4:	f000 f80e 	bl	8014214 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80141f8:	69f8      	ldr	r0, [r7, #28]
 80141fa:	f000 f89b 	bl	8014334 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80141fe:	2301      	movs	r3, #1
 8014200:	61bb      	str	r3, [r7, #24]
 8014202:	e002      	b.n	801420a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014208:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801420a:	69bb      	ldr	r3, [r7, #24]
	}
 801420c:	4618      	mov	r0, r3
 801420e:	3720      	adds	r7, #32
 8014210:	46bd      	mov	sp, r7
 8014212:	bd80      	pop	{r7, pc}

08014214 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014214:	b580      	push	{r7, lr}
 8014216:	b088      	sub	sp, #32
 8014218:	af00      	add	r7, sp, #0
 801421a:	60f8      	str	r0, [r7, #12]
 801421c:	60b9      	str	r1, [r7, #8]
 801421e:	607a      	str	r2, [r7, #4]
 8014220:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014224:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	009b      	lsls	r3, r3, #2
 801422a:	461a      	mov	r2, r3
 801422c:	21a5      	movs	r1, #165	; 0xa5
 801422e:	f001 fef5 	bl	801601c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014236:	6879      	ldr	r1, [r7, #4]
 8014238:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801423c:	440b      	add	r3, r1
 801423e:	009b      	lsls	r3, r3, #2
 8014240:	4413      	add	r3, r2
 8014242:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014244:	69bb      	ldr	r3, [r7, #24]
 8014246:	f023 0307 	bic.w	r3, r3, #7
 801424a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801424c:	69bb      	ldr	r3, [r7, #24]
 801424e:	f003 0307 	and.w	r3, r3, #7
 8014252:	2b00      	cmp	r3, #0
 8014254:	d00a      	beq.n	801426c <prvInitialiseNewTask+0x58>
	__asm volatile
 8014256:	f04f 0350 	mov.w	r3, #80	; 0x50
 801425a:	f383 8811 	msr	BASEPRI, r3
 801425e:	f3bf 8f6f 	isb	sy
 8014262:	f3bf 8f4f 	dsb	sy
 8014266:	617b      	str	r3, [r7, #20]
}
 8014268:	bf00      	nop
 801426a:	e7fe      	b.n	801426a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801426c:	68bb      	ldr	r3, [r7, #8]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d01f      	beq.n	80142b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014272:	2300      	movs	r3, #0
 8014274:	61fb      	str	r3, [r7, #28]
 8014276:	e012      	b.n	801429e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014278:	68ba      	ldr	r2, [r7, #8]
 801427a:	69fb      	ldr	r3, [r7, #28]
 801427c:	4413      	add	r3, r2
 801427e:	7819      	ldrb	r1, [r3, #0]
 8014280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014282:	69fb      	ldr	r3, [r7, #28]
 8014284:	4413      	add	r3, r2
 8014286:	3334      	adds	r3, #52	; 0x34
 8014288:	460a      	mov	r2, r1
 801428a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801428c:	68ba      	ldr	r2, [r7, #8]
 801428e:	69fb      	ldr	r3, [r7, #28]
 8014290:	4413      	add	r3, r2
 8014292:	781b      	ldrb	r3, [r3, #0]
 8014294:	2b00      	cmp	r3, #0
 8014296:	d006      	beq.n	80142a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014298:	69fb      	ldr	r3, [r7, #28]
 801429a:	3301      	adds	r3, #1
 801429c:	61fb      	str	r3, [r7, #28]
 801429e:	69fb      	ldr	r3, [r7, #28]
 80142a0:	2b0f      	cmp	r3, #15
 80142a2:	d9e9      	bls.n	8014278 <prvInitialiseNewTask+0x64>
 80142a4:	e000      	b.n	80142a8 <prvInitialiseNewTask+0x94>
			{
				break;
 80142a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80142a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142aa:	2200      	movs	r2, #0
 80142ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80142b0:	e003      	b.n	80142ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80142b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142b4:	2200      	movs	r2, #0
 80142b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80142ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142bc:	2b37      	cmp	r3, #55	; 0x37
 80142be:	d901      	bls.n	80142c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80142c0:	2337      	movs	r3, #55	; 0x37
 80142c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80142c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80142c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80142ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80142ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80142d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142d2:	2200      	movs	r2, #0
 80142d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80142d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142d8:	3304      	adds	r3, #4
 80142da:	4618      	mov	r0, r3
 80142dc:	f7ff f978 	bl	80135d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80142e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142e2:	3318      	adds	r3, #24
 80142e4:	4618      	mov	r0, r3
 80142e6:	f7ff f973 	bl	80135d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80142ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80142f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80142f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80142fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014302:	2200      	movs	r2, #0
 8014304:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014308:	2200      	movs	r2, #0
 801430a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801430e:	683a      	ldr	r2, [r7, #0]
 8014310:	68f9      	ldr	r1, [r7, #12]
 8014312:	69b8      	ldr	r0, [r7, #24]
 8014314:	f001 fa14 	bl	8015740 <pxPortInitialiseStack>
 8014318:	4602      	mov	r2, r0
 801431a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801431c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801431e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014320:	2b00      	cmp	r3, #0
 8014322:	d002      	beq.n	801432a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014328:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801432a:	bf00      	nop
 801432c:	3720      	adds	r7, #32
 801432e:	46bd      	mov	sp, r7
 8014330:	bd80      	pop	{r7, pc}
	...

08014334 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014334:	b580      	push	{r7, lr}
 8014336:	b082      	sub	sp, #8
 8014338:	af00      	add	r7, sp, #0
 801433a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801433c:	f001 fb2a 	bl	8015994 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014340:	4b2d      	ldr	r3, [pc, #180]	; (80143f8 <prvAddNewTaskToReadyList+0xc4>)
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	3301      	adds	r3, #1
 8014346:	4a2c      	ldr	r2, [pc, #176]	; (80143f8 <prvAddNewTaskToReadyList+0xc4>)
 8014348:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801434a:	4b2c      	ldr	r3, [pc, #176]	; (80143fc <prvAddNewTaskToReadyList+0xc8>)
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d109      	bne.n	8014366 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014352:	4a2a      	ldr	r2, [pc, #168]	; (80143fc <prvAddNewTaskToReadyList+0xc8>)
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014358:	4b27      	ldr	r3, [pc, #156]	; (80143f8 <prvAddNewTaskToReadyList+0xc4>)
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	2b01      	cmp	r3, #1
 801435e:	d110      	bne.n	8014382 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014360:	f000 fcca 	bl	8014cf8 <prvInitialiseTaskLists>
 8014364:	e00d      	b.n	8014382 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014366:	4b26      	ldr	r3, [pc, #152]	; (8014400 <prvAddNewTaskToReadyList+0xcc>)
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d109      	bne.n	8014382 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801436e:	4b23      	ldr	r3, [pc, #140]	; (80143fc <prvAddNewTaskToReadyList+0xc8>)
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014378:	429a      	cmp	r2, r3
 801437a:	d802      	bhi.n	8014382 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801437c:	4a1f      	ldr	r2, [pc, #124]	; (80143fc <prvAddNewTaskToReadyList+0xc8>)
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014382:	4b20      	ldr	r3, [pc, #128]	; (8014404 <prvAddNewTaskToReadyList+0xd0>)
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	3301      	adds	r3, #1
 8014388:	4a1e      	ldr	r2, [pc, #120]	; (8014404 <prvAddNewTaskToReadyList+0xd0>)
 801438a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801438c:	4b1d      	ldr	r3, [pc, #116]	; (8014404 <prvAddNewTaskToReadyList+0xd0>)
 801438e:	681a      	ldr	r2, [r3, #0]
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014398:	4b1b      	ldr	r3, [pc, #108]	; (8014408 <prvAddNewTaskToReadyList+0xd4>)
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	429a      	cmp	r2, r3
 801439e:	d903      	bls.n	80143a8 <prvAddNewTaskToReadyList+0x74>
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143a4:	4a18      	ldr	r2, [pc, #96]	; (8014408 <prvAddNewTaskToReadyList+0xd4>)
 80143a6:	6013      	str	r3, [r2, #0]
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143ac:	4613      	mov	r3, r2
 80143ae:	009b      	lsls	r3, r3, #2
 80143b0:	4413      	add	r3, r2
 80143b2:	009b      	lsls	r3, r3, #2
 80143b4:	4a15      	ldr	r2, [pc, #84]	; (801440c <prvAddNewTaskToReadyList+0xd8>)
 80143b6:	441a      	add	r2, r3
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	3304      	adds	r3, #4
 80143bc:	4619      	mov	r1, r3
 80143be:	4610      	mov	r0, r2
 80143c0:	f7ff f913 	bl	80135ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80143c4:	f001 fb16 	bl	80159f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80143c8:	4b0d      	ldr	r3, [pc, #52]	; (8014400 <prvAddNewTaskToReadyList+0xcc>)
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d00e      	beq.n	80143ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80143d0:	4b0a      	ldr	r3, [pc, #40]	; (80143fc <prvAddNewTaskToReadyList+0xc8>)
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143da:	429a      	cmp	r2, r3
 80143dc:	d207      	bcs.n	80143ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80143de:	4b0c      	ldr	r3, [pc, #48]	; (8014410 <prvAddNewTaskToReadyList+0xdc>)
 80143e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143e4:	601a      	str	r2, [r3, #0]
 80143e6:	f3bf 8f4f 	dsb	sy
 80143ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80143ee:	bf00      	nop
 80143f0:	3708      	adds	r7, #8
 80143f2:	46bd      	mov	sp, r7
 80143f4:	bd80      	pop	{r7, pc}
 80143f6:	bf00      	nop
 80143f8:	24002954 	.word	0x24002954
 80143fc:	24002480 	.word	0x24002480
 8014400:	24002960 	.word	0x24002960
 8014404:	24002970 	.word	0x24002970
 8014408:	2400295c 	.word	0x2400295c
 801440c:	24002484 	.word	0x24002484
 8014410:	e000ed04 	.word	0xe000ed04

08014414 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014414:	b580      	push	{r7, lr}
 8014416:	b084      	sub	sp, #16
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801441c:	2300      	movs	r3, #0
 801441e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d017      	beq.n	8014456 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014426:	4b13      	ldr	r3, [pc, #76]	; (8014474 <vTaskDelay+0x60>)
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d00a      	beq.n	8014444 <vTaskDelay+0x30>
	__asm volatile
 801442e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014432:	f383 8811 	msr	BASEPRI, r3
 8014436:	f3bf 8f6f 	isb	sy
 801443a:	f3bf 8f4f 	dsb	sy
 801443e:	60bb      	str	r3, [r7, #8]
}
 8014440:	bf00      	nop
 8014442:	e7fe      	b.n	8014442 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014444:	f000 f880 	bl	8014548 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014448:	2100      	movs	r1, #0
 801444a:	6878      	ldr	r0, [r7, #4]
 801444c:	f000 fdb6 	bl	8014fbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014450:	f000 f888 	bl	8014564 <xTaskResumeAll>
 8014454:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d107      	bne.n	801446c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801445c:	4b06      	ldr	r3, [pc, #24]	; (8014478 <vTaskDelay+0x64>)
 801445e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014462:	601a      	str	r2, [r3, #0]
 8014464:	f3bf 8f4f 	dsb	sy
 8014468:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801446c:	bf00      	nop
 801446e:	3710      	adds	r7, #16
 8014470:	46bd      	mov	sp, r7
 8014472:	bd80      	pop	{r7, pc}
 8014474:	2400297c 	.word	0x2400297c
 8014478:	e000ed04 	.word	0xe000ed04

0801447c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b08a      	sub	sp, #40	; 0x28
 8014480:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014482:	2300      	movs	r3, #0
 8014484:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014486:	2300      	movs	r3, #0
 8014488:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801448a:	463a      	mov	r2, r7
 801448c:	1d39      	adds	r1, r7, #4
 801448e:	f107 0308 	add.w	r3, r7, #8
 8014492:	4618      	mov	r0, r3
 8014494:	f7fe fddc 	bl	8013050 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014498:	6839      	ldr	r1, [r7, #0]
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	68ba      	ldr	r2, [r7, #8]
 801449e:	9202      	str	r2, [sp, #8]
 80144a0:	9301      	str	r3, [sp, #4]
 80144a2:	2300      	movs	r3, #0
 80144a4:	9300      	str	r3, [sp, #0]
 80144a6:	2300      	movs	r3, #0
 80144a8:	460a      	mov	r2, r1
 80144aa:	4921      	ldr	r1, [pc, #132]	; (8014530 <vTaskStartScheduler+0xb4>)
 80144ac:	4821      	ldr	r0, [pc, #132]	; (8014534 <vTaskStartScheduler+0xb8>)
 80144ae:	f7ff fe0f 	bl	80140d0 <xTaskCreateStatic>
 80144b2:	4603      	mov	r3, r0
 80144b4:	4a20      	ldr	r2, [pc, #128]	; (8014538 <vTaskStartScheduler+0xbc>)
 80144b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80144b8:	4b1f      	ldr	r3, [pc, #124]	; (8014538 <vTaskStartScheduler+0xbc>)
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d002      	beq.n	80144c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80144c0:	2301      	movs	r3, #1
 80144c2:	617b      	str	r3, [r7, #20]
 80144c4:	e001      	b.n	80144ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80144c6:	2300      	movs	r3, #0
 80144c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80144ca:	697b      	ldr	r3, [r7, #20]
 80144cc:	2b01      	cmp	r3, #1
 80144ce:	d102      	bne.n	80144d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80144d0:	f000 fdc8 	bl	8015064 <xTimerCreateTimerTask>
 80144d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80144d6:	697b      	ldr	r3, [r7, #20]
 80144d8:	2b01      	cmp	r3, #1
 80144da:	d116      	bne.n	801450a <vTaskStartScheduler+0x8e>
	__asm volatile
 80144dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144e0:	f383 8811 	msr	BASEPRI, r3
 80144e4:	f3bf 8f6f 	isb	sy
 80144e8:	f3bf 8f4f 	dsb	sy
 80144ec:	613b      	str	r3, [r7, #16]
}
 80144ee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80144f0:	4b12      	ldr	r3, [pc, #72]	; (801453c <vTaskStartScheduler+0xc0>)
 80144f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80144f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80144f8:	4b11      	ldr	r3, [pc, #68]	; (8014540 <vTaskStartScheduler+0xc4>)
 80144fa:	2201      	movs	r2, #1
 80144fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80144fe:	4b11      	ldr	r3, [pc, #68]	; (8014544 <vTaskStartScheduler+0xc8>)
 8014500:	2200      	movs	r2, #0
 8014502:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014504:	f001 f9a4 	bl	8015850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014508:	e00e      	b.n	8014528 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801450a:	697b      	ldr	r3, [r7, #20]
 801450c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014510:	d10a      	bne.n	8014528 <vTaskStartScheduler+0xac>
	__asm volatile
 8014512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014516:	f383 8811 	msr	BASEPRI, r3
 801451a:	f3bf 8f6f 	isb	sy
 801451e:	f3bf 8f4f 	dsb	sy
 8014522:	60fb      	str	r3, [r7, #12]
}
 8014524:	bf00      	nop
 8014526:	e7fe      	b.n	8014526 <vTaskStartScheduler+0xaa>
}
 8014528:	bf00      	nop
 801452a:	3718      	adds	r7, #24
 801452c:	46bd      	mov	sp, r7
 801452e:	bd80      	pop	{r7, pc}
 8014530:	08016c90 	.word	0x08016c90
 8014534:	08014cc9 	.word	0x08014cc9
 8014538:	24002978 	.word	0x24002978
 801453c:	24002974 	.word	0x24002974
 8014540:	24002960 	.word	0x24002960
 8014544:	24002958 	.word	0x24002958

08014548 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014548:	b480      	push	{r7}
 801454a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801454c:	4b04      	ldr	r3, [pc, #16]	; (8014560 <vTaskSuspendAll+0x18>)
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	3301      	adds	r3, #1
 8014552:	4a03      	ldr	r2, [pc, #12]	; (8014560 <vTaskSuspendAll+0x18>)
 8014554:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8014556:	bf00      	nop
 8014558:	46bd      	mov	sp, r7
 801455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801455e:	4770      	bx	lr
 8014560:	2400297c 	.word	0x2400297c

08014564 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014564:	b580      	push	{r7, lr}
 8014566:	b084      	sub	sp, #16
 8014568:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801456a:	2300      	movs	r3, #0
 801456c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801456e:	2300      	movs	r3, #0
 8014570:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014572:	4b42      	ldr	r3, [pc, #264]	; (801467c <xTaskResumeAll+0x118>)
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d10a      	bne.n	8014590 <xTaskResumeAll+0x2c>
	__asm volatile
 801457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801457e:	f383 8811 	msr	BASEPRI, r3
 8014582:	f3bf 8f6f 	isb	sy
 8014586:	f3bf 8f4f 	dsb	sy
 801458a:	603b      	str	r3, [r7, #0]
}
 801458c:	bf00      	nop
 801458e:	e7fe      	b.n	801458e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014590:	f001 fa00 	bl	8015994 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014594:	4b39      	ldr	r3, [pc, #228]	; (801467c <xTaskResumeAll+0x118>)
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	3b01      	subs	r3, #1
 801459a:	4a38      	ldr	r2, [pc, #224]	; (801467c <xTaskResumeAll+0x118>)
 801459c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801459e:	4b37      	ldr	r3, [pc, #220]	; (801467c <xTaskResumeAll+0x118>)
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d162      	bne.n	801466c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80145a6:	4b36      	ldr	r3, [pc, #216]	; (8014680 <xTaskResumeAll+0x11c>)
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d05e      	beq.n	801466c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80145ae:	e02f      	b.n	8014610 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80145b0:	4b34      	ldr	r3, [pc, #208]	; (8014684 <xTaskResumeAll+0x120>)
 80145b2:	68db      	ldr	r3, [r3, #12]
 80145b4:	68db      	ldr	r3, [r3, #12]
 80145b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	3318      	adds	r3, #24
 80145bc:	4618      	mov	r0, r3
 80145be:	f7ff f871 	bl	80136a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	3304      	adds	r3, #4
 80145c6:	4618      	mov	r0, r3
 80145c8:	f7ff f86c 	bl	80136a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145d0:	4b2d      	ldr	r3, [pc, #180]	; (8014688 <xTaskResumeAll+0x124>)
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	429a      	cmp	r2, r3
 80145d6:	d903      	bls.n	80145e0 <xTaskResumeAll+0x7c>
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145dc:	4a2a      	ldr	r2, [pc, #168]	; (8014688 <xTaskResumeAll+0x124>)
 80145de:	6013      	str	r3, [r2, #0]
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145e4:	4613      	mov	r3, r2
 80145e6:	009b      	lsls	r3, r3, #2
 80145e8:	4413      	add	r3, r2
 80145ea:	009b      	lsls	r3, r3, #2
 80145ec:	4a27      	ldr	r2, [pc, #156]	; (801468c <xTaskResumeAll+0x128>)
 80145ee:	441a      	add	r2, r3
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	3304      	adds	r3, #4
 80145f4:	4619      	mov	r1, r3
 80145f6:	4610      	mov	r0, r2
 80145f8:	f7fe fff7 	bl	80135ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014600:	4b23      	ldr	r3, [pc, #140]	; (8014690 <xTaskResumeAll+0x12c>)
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014606:	429a      	cmp	r2, r3
 8014608:	d302      	bcc.n	8014610 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801460a:	4b22      	ldr	r3, [pc, #136]	; (8014694 <xTaskResumeAll+0x130>)
 801460c:	2201      	movs	r2, #1
 801460e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014610:	4b1c      	ldr	r3, [pc, #112]	; (8014684 <xTaskResumeAll+0x120>)
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	2b00      	cmp	r3, #0
 8014616:	d1cb      	bne.n	80145b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d001      	beq.n	8014622 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801461e:	f000 fc09 	bl	8014e34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014622:	4b1d      	ldr	r3, [pc, #116]	; (8014698 <xTaskResumeAll+0x134>)
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d010      	beq.n	8014650 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801462e:	f000 f847 	bl	80146c0 <xTaskIncrementTick>
 8014632:	4603      	mov	r3, r0
 8014634:	2b00      	cmp	r3, #0
 8014636:	d002      	beq.n	801463e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8014638:	4b16      	ldr	r3, [pc, #88]	; (8014694 <xTaskResumeAll+0x130>)
 801463a:	2201      	movs	r2, #1
 801463c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	3b01      	subs	r3, #1
 8014642:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d1f1      	bne.n	801462e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801464a:	4b13      	ldr	r3, [pc, #76]	; (8014698 <xTaskResumeAll+0x134>)
 801464c:	2200      	movs	r2, #0
 801464e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014650:	4b10      	ldr	r3, [pc, #64]	; (8014694 <xTaskResumeAll+0x130>)
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	2b00      	cmp	r3, #0
 8014656:	d009      	beq.n	801466c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014658:	2301      	movs	r3, #1
 801465a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801465c:	4b0f      	ldr	r3, [pc, #60]	; (801469c <xTaskResumeAll+0x138>)
 801465e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014662:	601a      	str	r2, [r3, #0]
 8014664:	f3bf 8f4f 	dsb	sy
 8014668:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801466c:	f001 f9c2 	bl	80159f4 <vPortExitCritical>

	return xAlreadyYielded;
 8014670:	68bb      	ldr	r3, [r7, #8]
}
 8014672:	4618      	mov	r0, r3
 8014674:	3710      	adds	r7, #16
 8014676:	46bd      	mov	sp, r7
 8014678:	bd80      	pop	{r7, pc}
 801467a:	bf00      	nop
 801467c:	2400297c 	.word	0x2400297c
 8014680:	24002954 	.word	0x24002954
 8014684:	24002914 	.word	0x24002914
 8014688:	2400295c 	.word	0x2400295c
 801468c:	24002484 	.word	0x24002484
 8014690:	24002480 	.word	0x24002480
 8014694:	24002968 	.word	0x24002968
 8014698:	24002964 	.word	0x24002964
 801469c:	e000ed04 	.word	0xe000ed04

080146a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80146a0:	b480      	push	{r7}
 80146a2:	b083      	sub	sp, #12
 80146a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80146a6:	4b05      	ldr	r3, [pc, #20]	; (80146bc <xTaskGetTickCount+0x1c>)
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80146ac:	687b      	ldr	r3, [r7, #4]
}
 80146ae:	4618      	mov	r0, r3
 80146b0:	370c      	adds	r7, #12
 80146b2:	46bd      	mov	sp, r7
 80146b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b8:	4770      	bx	lr
 80146ba:	bf00      	nop
 80146bc:	24002958 	.word	0x24002958

080146c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b086      	sub	sp, #24
 80146c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80146c6:	2300      	movs	r3, #0
 80146c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80146ca:	4b53      	ldr	r3, [pc, #332]	; (8014818 <xTaskIncrementTick+0x158>)
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	f040 8095 	bne.w	80147fe <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80146d4:	4b51      	ldr	r3, [pc, #324]	; (801481c <xTaskIncrementTick+0x15c>)
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	3301      	adds	r3, #1
 80146da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80146dc:	4a4f      	ldr	r2, [pc, #316]	; (801481c <xTaskIncrementTick+0x15c>)
 80146de:	693b      	ldr	r3, [r7, #16]
 80146e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80146e2:	693b      	ldr	r3, [r7, #16]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d120      	bne.n	801472a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80146e8:	4b4d      	ldr	r3, [pc, #308]	; (8014820 <xTaskIncrementTick+0x160>)
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d00a      	beq.n	8014708 <xTaskIncrementTick+0x48>
	__asm volatile
 80146f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146f6:	f383 8811 	msr	BASEPRI, r3
 80146fa:	f3bf 8f6f 	isb	sy
 80146fe:	f3bf 8f4f 	dsb	sy
 8014702:	603b      	str	r3, [r7, #0]
}
 8014704:	bf00      	nop
 8014706:	e7fe      	b.n	8014706 <xTaskIncrementTick+0x46>
 8014708:	4b45      	ldr	r3, [pc, #276]	; (8014820 <xTaskIncrementTick+0x160>)
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	60fb      	str	r3, [r7, #12]
 801470e:	4b45      	ldr	r3, [pc, #276]	; (8014824 <xTaskIncrementTick+0x164>)
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	4a43      	ldr	r2, [pc, #268]	; (8014820 <xTaskIncrementTick+0x160>)
 8014714:	6013      	str	r3, [r2, #0]
 8014716:	4a43      	ldr	r2, [pc, #268]	; (8014824 <xTaskIncrementTick+0x164>)
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	6013      	str	r3, [r2, #0]
 801471c:	4b42      	ldr	r3, [pc, #264]	; (8014828 <xTaskIncrementTick+0x168>)
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	3301      	adds	r3, #1
 8014722:	4a41      	ldr	r2, [pc, #260]	; (8014828 <xTaskIncrementTick+0x168>)
 8014724:	6013      	str	r3, [r2, #0]
 8014726:	f000 fb85 	bl	8014e34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801472a:	4b40      	ldr	r3, [pc, #256]	; (801482c <xTaskIncrementTick+0x16c>)
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	693a      	ldr	r2, [r7, #16]
 8014730:	429a      	cmp	r2, r3
 8014732:	d349      	bcc.n	80147c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014734:	4b3a      	ldr	r3, [pc, #232]	; (8014820 <xTaskIncrementTick+0x160>)
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d104      	bne.n	8014748 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801473e:	4b3b      	ldr	r3, [pc, #236]	; (801482c <xTaskIncrementTick+0x16c>)
 8014740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014744:	601a      	str	r2, [r3, #0]
					break;
 8014746:	e03f      	b.n	80147c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014748:	4b35      	ldr	r3, [pc, #212]	; (8014820 <xTaskIncrementTick+0x160>)
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	68db      	ldr	r3, [r3, #12]
 801474e:	68db      	ldr	r3, [r3, #12]
 8014750:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014752:	68bb      	ldr	r3, [r7, #8]
 8014754:	685b      	ldr	r3, [r3, #4]
 8014756:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014758:	693a      	ldr	r2, [r7, #16]
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	429a      	cmp	r2, r3
 801475e:	d203      	bcs.n	8014768 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014760:	4a32      	ldr	r2, [pc, #200]	; (801482c <xTaskIncrementTick+0x16c>)
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014766:	e02f      	b.n	80147c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014768:	68bb      	ldr	r3, [r7, #8]
 801476a:	3304      	adds	r3, #4
 801476c:	4618      	mov	r0, r3
 801476e:	f7fe ff99 	bl	80136a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014772:	68bb      	ldr	r3, [r7, #8]
 8014774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014776:	2b00      	cmp	r3, #0
 8014778:	d004      	beq.n	8014784 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801477a:	68bb      	ldr	r3, [r7, #8]
 801477c:	3318      	adds	r3, #24
 801477e:	4618      	mov	r0, r3
 8014780:	f7fe ff90 	bl	80136a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014784:	68bb      	ldr	r3, [r7, #8]
 8014786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014788:	4b29      	ldr	r3, [pc, #164]	; (8014830 <xTaskIncrementTick+0x170>)
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	429a      	cmp	r2, r3
 801478e:	d903      	bls.n	8014798 <xTaskIncrementTick+0xd8>
 8014790:	68bb      	ldr	r3, [r7, #8]
 8014792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014794:	4a26      	ldr	r2, [pc, #152]	; (8014830 <xTaskIncrementTick+0x170>)
 8014796:	6013      	str	r3, [r2, #0]
 8014798:	68bb      	ldr	r3, [r7, #8]
 801479a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801479c:	4613      	mov	r3, r2
 801479e:	009b      	lsls	r3, r3, #2
 80147a0:	4413      	add	r3, r2
 80147a2:	009b      	lsls	r3, r3, #2
 80147a4:	4a23      	ldr	r2, [pc, #140]	; (8014834 <xTaskIncrementTick+0x174>)
 80147a6:	441a      	add	r2, r3
 80147a8:	68bb      	ldr	r3, [r7, #8]
 80147aa:	3304      	adds	r3, #4
 80147ac:	4619      	mov	r1, r3
 80147ae:	4610      	mov	r0, r2
 80147b0:	f7fe ff1b 	bl	80135ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80147b4:	68bb      	ldr	r3, [r7, #8]
 80147b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147b8:	4b1f      	ldr	r3, [pc, #124]	; (8014838 <xTaskIncrementTick+0x178>)
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147be:	429a      	cmp	r2, r3
 80147c0:	d3b8      	bcc.n	8014734 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80147c2:	2301      	movs	r3, #1
 80147c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80147c6:	e7b5      	b.n	8014734 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80147c8:	4b1b      	ldr	r3, [pc, #108]	; (8014838 <xTaskIncrementTick+0x178>)
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147ce:	4919      	ldr	r1, [pc, #100]	; (8014834 <xTaskIncrementTick+0x174>)
 80147d0:	4613      	mov	r3, r2
 80147d2:	009b      	lsls	r3, r3, #2
 80147d4:	4413      	add	r3, r2
 80147d6:	009b      	lsls	r3, r3, #2
 80147d8:	440b      	add	r3, r1
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	2b01      	cmp	r3, #1
 80147de:	d901      	bls.n	80147e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80147e0:	2301      	movs	r3, #1
 80147e2:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 80147e4:	4b15      	ldr	r3, [pc, #84]	; (801483c <xTaskIncrementTick+0x17c>)
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d101      	bne.n	80147f0 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 80147ec:	f7ec fab4 	bl	8000d58 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80147f0:	4b13      	ldr	r3, [pc, #76]	; (8014840 <xTaskIncrementTick+0x180>)
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d009      	beq.n	801480c <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 80147f8:	2301      	movs	r3, #1
 80147fa:	617b      	str	r3, [r7, #20]
 80147fc:	e006      	b.n	801480c <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80147fe:	4b0f      	ldr	r3, [pc, #60]	; (801483c <xTaskIncrementTick+0x17c>)
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	3301      	adds	r3, #1
 8014804:	4a0d      	ldr	r2, [pc, #52]	; (801483c <xTaskIncrementTick+0x17c>)
 8014806:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8014808:	f7ec faa6 	bl	8000d58 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 801480c:	697b      	ldr	r3, [r7, #20]
}
 801480e:	4618      	mov	r0, r3
 8014810:	3718      	adds	r7, #24
 8014812:	46bd      	mov	sp, r7
 8014814:	bd80      	pop	{r7, pc}
 8014816:	bf00      	nop
 8014818:	2400297c 	.word	0x2400297c
 801481c:	24002958 	.word	0x24002958
 8014820:	2400290c 	.word	0x2400290c
 8014824:	24002910 	.word	0x24002910
 8014828:	2400296c 	.word	0x2400296c
 801482c:	24002974 	.word	0x24002974
 8014830:	2400295c 	.word	0x2400295c
 8014834:	24002484 	.word	0x24002484
 8014838:	24002480 	.word	0x24002480
 801483c:	24002964 	.word	0x24002964
 8014840:	24002968 	.word	0x24002968

08014844 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014844:	b580      	push	{r7, lr}
 8014846:	b084      	sub	sp, #16
 8014848:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801484a:	4b2f      	ldr	r3, [pc, #188]	; (8014908 <vTaskSwitchContext+0xc4>)
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d003      	beq.n	801485a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014852:	4b2e      	ldr	r3, [pc, #184]	; (801490c <vTaskSwitchContext+0xc8>)
 8014854:	2201      	movs	r2, #1
 8014856:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014858:	e052      	b.n	8014900 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 801485a:	4b2c      	ldr	r3, [pc, #176]	; (801490c <vTaskSwitchContext+0xc8>)
 801485c:	2200      	movs	r2, #0
 801485e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8014860:	4b2b      	ldr	r3, [pc, #172]	; (8014910 <vTaskSwitchContext+0xcc>)
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	681a      	ldr	r2, [r3, #0]
 8014866:	4b2a      	ldr	r3, [pc, #168]	; (8014910 <vTaskSwitchContext+0xcc>)
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801486c:	429a      	cmp	r2, r3
 801486e:	d808      	bhi.n	8014882 <vTaskSwitchContext+0x3e>
 8014870:	4b27      	ldr	r3, [pc, #156]	; (8014910 <vTaskSwitchContext+0xcc>)
 8014872:	681a      	ldr	r2, [r3, #0]
 8014874:	4b26      	ldr	r3, [pc, #152]	; (8014910 <vTaskSwitchContext+0xcc>)
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	3334      	adds	r3, #52	; 0x34
 801487a:	4619      	mov	r1, r3
 801487c:	4610      	mov	r0, r2
 801487e:	f7ec fa79 	bl	8000d74 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014882:	4b24      	ldr	r3, [pc, #144]	; (8014914 <vTaskSwitchContext+0xd0>)
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	60fb      	str	r3, [r7, #12]
 8014888:	e010      	b.n	80148ac <vTaskSwitchContext+0x68>
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d10a      	bne.n	80148a6 <vTaskSwitchContext+0x62>
	__asm volatile
 8014890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014894:	f383 8811 	msr	BASEPRI, r3
 8014898:	f3bf 8f6f 	isb	sy
 801489c:	f3bf 8f4f 	dsb	sy
 80148a0:	607b      	str	r3, [r7, #4]
}
 80148a2:	bf00      	nop
 80148a4:	e7fe      	b.n	80148a4 <vTaskSwitchContext+0x60>
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	3b01      	subs	r3, #1
 80148aa:	60fb      	str	r3, [r7, #12]
 80148ac:	491a      	ldr	r1, [pc, #104]	; (8014918 <vTaskSwitchContext+0xd4>)
 80148ae:	68fa      	ldr	r2, [r7, #12]
 80148b0:	4613      	mov	r3, r2
 80148b2:	009b      	lsls	r3, r3, #2
 80148b4:	4413      	add	r3, r2
 80148b6:	009b      	lsls	r3, r3, #2
 80148b8:	440b      	add	r3, r1
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d0e4      	beq.n	801488a <vTaskSwitchContext+0x46>
 80148c0:	68fa      	ldr	r2, [r7, #12]
 80148c2:	4613      	mov	r3, r2
 80148c4:	009b      	lsls	r3, r3, #2
 80148c6:	4413      	add	r3, r2
 80148c8:	009b      	lsls	r3, r3, #2
 80148ca:	4a13      	ldr	r2, [pc, #76]	; (8014918 <vTaskSwitchContext+0xd4>)
 80148cc:	4413      	add	r3, r2
 80148ce:	60bb      	str	r3, [r7, #8]
 80148d0:	68bb      	ldr	r3, [r7, #8]
 80148d2:	685b      	ldr	r3, [r3, #4]
 80148d4:	685a      	ldr	r2, [r3, #4]
 80148d6:	68bb      	ldr	r3, [r7, #8]
 80148d8:	605a      	str	r2, [r3, #4]
 80148da:	68bb      	ldr	r3, [r7, #8]
 80148dc:	685a      	ldr	r2, [r3, #4]
 80148de:	68bb      	ldr	r3, [r7, #8]
 80148e0:	3308      	adds	r3, #8
 80148e2:	429a      	cmp	r2, r3
 80148e4:	d104      	bne.n	80148f0 <vTaskSwitchContext+0xac>
 80148e6:	68bb      	ldr	r3, [r7, #8]
 80148e8:	685b      	ldr	r3, [r3, #4]
 80148ea:	685a      	ldr	r2, [r3, #4]
 80148ec:	68bb      	ldr	r3, [r7, #8]
 80148ee:	605a      	str	r2, [r3, #4]
 80148f0:	68bb      	ldr	r3, [r7, #8]
 80148f2:	685b      	ldr	r3, [r3, #4]
 80148f4:	68db      	ldr	r3, [r3, #12]
 80148f6:	4a06      	ldr	r2, [pc, #24]	; (8014910 <vTaskSwitchContext+0xcc>)
 80148f8:	6013      	str	r3, [r2, #0]
 80148fa:	4a06      	ldr	r2, [pc, #24]	; (8014914 <vTaskSwitchContext+0xd0>)
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	6013      	str	r3, [r2, #0]
}
 8014900:	bf00      	nop
 8014902:	3710      	adds	r7, #16
 8014904:	46bd      	mov	sp, r7
 8014906:	bd80      	pop	{r7, pc}
 8014908:	2400297c 	.word	0x2400297c
 801490c:	24002968 	.word	0x24002968
 8014910:	24002480 	.word	0x24002480
 8014914:	2400295c 	.word	0x2400295c
 8014918:	24002484 	.word	0x24002484

0801491c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801491c:	b580      	push	{r7, lr}
 801491e:	b084      	sub	sp, #16
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
 8014924:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d10a      	bne.n	8014942 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801492c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014930:	f383 8811 	msr	BASEPRI, r3
 8014934:	f3bf 8f6f 	isb	sy
 8014938:	f3bf 8f4f 	dsb	sy
 801493c:	60fb      	str	r3, [r7, #12]
}
 801493e:	bf00      	nop
 8014940:	e7fe      	b.n	8014940 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014942:	4b07      	ldr	r3, [pc, #28]	; (8014960 <vTaskPlaceOnEventList+0x44>)
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	3318      	adds	r3, #24
 8014948:	4619      	mov	r1, r3
 801494a:	6878      	ldr	r0, [r7, #4]
 801494c:	f7fe fe71 	bl	8013632 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014950:	2101      	movs	r1, #1
 8014952:	6838      	ldr	r0, [r7, #0]
 8014954:	f000 fb32 	bl	8014fbc <prvAddCurrentTaskToDelayedList>
}
 8014958:	bf00      	nop
 801495a:	3710      	adds	r7, #16
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}
 8014960:	24002480 	.word	0x24002480

08014964 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8014964:	b580      	push	{r7, lr}
 8014966:	b086      	sub	sp, #24
 8014968:	af00      	add	r7, sp, #0
 801496a:	60f8      	str	r0, [r7, #12]
 801496c:	60b9      	str	r1, [r7, #8]
 801496e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d10a      	bne.n	801498c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8014976:	f04f 0350 	mov.w	r3, #80	; 0x50
 801497a:	f383 8811 	msr	BASEPRI, r3
 801497e:	f3bf 8f6f 	isb	sy
 8014982:	f3bf 8f4f 	dsb	sy
 8014986:	617b      	str	r3, [r7, #20]
}
 8014988:	bf00      	nop
 801498a:	e7fe      	b.n	801498a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801498c:	4b11      	ldr	r3, [pc, #68]	; (80149d4 <vTaskPlaceOnUnorderedEventList+0x70>)
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d10a      	bne.n	80149aa <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8014994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014998:	f383 8811 	msr	BASEPRI, r3
 801499c:	f3bf 8f6f 	isb	sy
 80149a0:	f3bf 8f4f 	dsb	sy
 80149a4:	613b      	str	r3, [r7, #16]
}
 80149a6:	bf00      	nop
 80149a8:	e7fe      	b.n	80149a8 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80149aa:	4b0b      	ldr	r3, [pc, #44]	; (80149d8 <vTaskPlaceOnUnorderedEventList+0x74>)
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	68ba      	ldr	r2, [r7, #8]
 80149b0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80149b4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80149b6:	4b08      	ldr	r3, [pc, #32]	; (80149d8 <vTaskPlaceOnUnorderedEventList+0x74>)
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	3318      	adds	r3, #24
 80149bc:	4619      	mov	r1, r3
 80149be:	68f8      	ldr	r0, [r7, #12]
 80149c0:	f7fe fe13 	bl	80135ea <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80149c4:	2101      	movs	r1, #1
 80149c6:	6878      	ldr	r0, [r7, #4]
 80149c8:	f000 faf8 	bl	8014fbc <prvAddCurrentTaskToDelayedList>
}
 80149cc:	bf00      	nop
 80149ce:	3718      	adds	r7, #24
 80149d0:	46bd      	mov	sp, r7
 80149d2:	bd80      	pop	{r7, pc}
 80149d4:	2400297c 	.word	0x2400297c
 80149d8:	24002480 	.word	0x24002480

080149dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80149dc:	b580      	push	{r7, lr}
 80149de:	b086      	sub	sp, #24
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	60f8      	str	r0, [r7, #12]
 80149e4:	60b9      	str	r1, [r7, #8]
 80149e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d10a      	bne.n	8014a04 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80149ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149f2:	f383 8811 	msr	BASEPRI, r3
 80149f6:	f3bf 8f6f 	isb	sy
 80149fa:	f3bf 8f4f 	dsb	sy
 80149fe:	617b      	str	r3, [r7, #20]
}
 8014a00:	bf00      	nop
 8014a02:	e7fe      	b.n	8014a02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014a04:	4b0a      	ldr	r3, [pc, #40]	; (8014a30 <vTaskPlaceOnEventListRestricted+0x54>)
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	3318      	adds	r3, #24
 8014a0a:	4619      	mov	r1, r3
 8014a0c:	68f8      	ldr	r0, [r7, #12]
 8014a0e:	f7fe fdec 	bl	80135ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d002      	beq.n	8014a1e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8014a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014a1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014a1e:	6879      	ldr	r1, [r7, #4]
 8014a20:	68b8      	ldr	r0, [r7, #8]
 8014a22:	f000 facb 	bl	8014fbc <prvAddCurrentTaskToDelayedList>
	}
 8014a26:	bf00      	nop
 8014a28:	3718      	adds	r7, #24
 8014a2a:	46bd      	mov	sp, r7
 8014a2c:	bd80      	pop	{r7, pc}
 8014a2e:	bf00      	nop
 8014a30:	24002480 	.word	0x24002480

08014a34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b086      	sub	sp, #24
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	68db      	ldr	r3, [r3, #12]
 8014a40:	68db      	ldr	r3, [r3, #12]
 8014a42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014a44:	693b      	ldr	r3, [r7, #16]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d10a      	bne.n	8014a60 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a4e:	f383 8811 	msr	BASEPRI, r3
 8014a52:	f3bf 8f6f 	isb	sy
 8014a56:	f3bf 8f4f 	dsb	sy
 8014a5a:	60fb      	str	r3, [r7, #12]
}
 8014a5c:	bf00      	nop
 8014a5e:	e7fe      	b.n	8014a5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014a60:	693b      	ldr	r3, [r7, #16]
 8014a62:	3318      	adds	r3, #24
 8014a64:	4618      	mov	r0, r3
 8014a66:	f7fe fe1d 	bl	80136a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014a6a:	4b1e      	ldr	r3, [pc, #120]	; (8014ae4 <xTaskRemoveFromEventList+0xb0>)
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d11d      	bne.n	8014aae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014a72:	693b      	ldr	r3, [r7, #16]
 8014a74:	3304      	adds	r3, #4
 8014a76:	4618      	mov	r0, r3
 8014a78:	f7fe fe14 	bl	80136a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014a7c:	693b      	ldr	r3, [r7, #16]
 8014a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a80:	4b19      	ldr	r3, [pc, #100]	; (8014ae8 <xTaskRemoveFromEventList+0xb4>)
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	429a      	cmp	r2, r3
 8014a86:	d903      	bls.n	8014a90 <xTaskRemoveFromEventList+0x5c>
 8014a88:	693b      	ldr	r3, [r7, #16]
 8014a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a8c:	4a16      	ldr	r2, [pc, #88]	; (8014ae8 <xTaskRemoveFromEventList+0xb4>)
 8014a8e:	6013      	str	r3, [r2, #0]
 8014a90:	693b      	ldr	r3, [r7, #16]
 8014a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a94:	4613      	mov	r3, r2
 8014a96:	009b      	lsls	r3, r3, #2
 8014a98:	4413      	add	r3, r2
 8014a9a:	009b      	lsls	r3, r3, #2
 8014a9c:	4a13      	ldr	r2, [pc, #76]	; (8014aec <xTaskRemoveFromEventList+0xb8>)
 8014a9e:	441a      	add	r2, r3
 8014aa0:	693b      	ldr	r3, [r7, #16]
 8014aa2:	3304      	adds	r3, #4
 8014aa4:	4619      	mov	r1, r3
 8014aa6:	4610      	mov	r0, r2
 8014aa8:	f7fe fd9f 	bl	80135ea <vListInsertEnd>
 8014aac:	e005      	b.n	8014aba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014aae:	693b      	ldr	r3, [r7, #16]
 8014ab0:	3318      	adds	r3, #24
 8014ab2:	4619      	mov	r1, r3
 8014ab4:	480e      	ldr	r0, [pc, #56]	; (8014af0 <xTaskRemoveFromEventList+0xbc>)
 8014ab6:	f7fe fd98 	bl	80135ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014aba:	693b      	ldr	r3, [r7, #16]
 8014abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014abe:	4b0d      	ldr	r3, [pc, #52]	; (8014af4 <xTaskRemoveFromEventList+0xc0>)
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ac4:	429a      	cmp	r2, r3
 8014ac6:	d905      	bls.n	8014ad4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014ac8:	2301      	movs	r3, #1
 8014aca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014acc:	4b0a      	ldr	r3, [pc, #40]	; (8014af8 <xTaskRemoveFromEventList+0xc4>)
 8014ace:	2201      	movs	r2, #1
 8014ad0:	601a      	str	r2, [r3, #0]
 8014ad2:	e001      	b.n	8014ad8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014ad8:	697b      	ldr	r3, [r7, #20]
}
 8014ada:	4618      	mov	r0, r3
 8014adc:	3718      	adds	r7, #24
 8014ade:	46bd      	mov	sp, r7
 8014ae0:	bd80      	pop	{r7, pc}
 8014ae2:	bf00      	nop
 8014ae4:	2400297c 	.word	0x2400297c
 8014ae8:	2400295c 	.word	0x2400295c
 8014aec:	24002484 	.word	0x24002484
 8014af0:	24002914 	.word	0x24002914
 8014af4:	24002480 	.word	0x24002480
 8014af8:	24002968 	.word	0x24002968

08014afc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b086      	sub	sp, #24
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	6078      	str	r0, [r7, #4]
 8014b04:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8014b06:	4b29      	ldr	r3, [pc, #164]	; (8014bac <vTaskRemoveFromUnorderedEventList+0xb0>)
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d10a      	bne.n	8014b24 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8014b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b12:	f383 8811 	msr	BASEPRI, r3
 8014b16:	f3bf 8f6f 	isb	sy
 8014b1a:	f3bf 8f4f 	dsb	sy
 8014b1e:	613b      	str	r3, [r7, #16]
}
 8014b20:	bf00      	nop
 8014b22:	e7fe      	b.n	8014b22 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014b24:	683b      	ldr	r3, [r7, #0]
 8014b26:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	68db      	ldr	r3, [r3, #12]
 8014b32:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8014b34:	697b      	ldr	r3, [r7, #20]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d10a      	bne.n	8014b50 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8014b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b3e:	f383 8811 	msr	BASEPRI, r3
 8014b42:	f3bf 8f6f 	isb	sy
 8014b46:	f3bf 8f4f 	dsb	sy
 8014b4a:	60fb      	str	r3, [r7, #12]
}
 8014b4c:	bf00      	nop
 8014b4e:	e7fe      	b.n	8014b4e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8014b50:	6878      	ldr	r0, [r7, #4]
 8014b52:	f7fe fda7 	bl	80136a4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014b56:	697b      	ldr	r3, [r7, #20]
 8014b58:	3304      	adds	r3, #4
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	f7fe fda2 	bl	80136a4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8014b60:	697b      	ldr	r3, [r7, #20]
 8014b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b64:	4b12      	ldr	r3, [pc, #72]	; (8014bb0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	429a      	cmp	r2, r3
 8014b6a:	d903      	bls.n	8014b74 <vTaskRemoveFromUnorderedEventList+0x78>
 8014b6c:	697b      	ldr	r3, [r7, #20]
 8014b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b70:	4a0f      	ldr	r2, [pc, #60]	; (8014bb0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014b72:	6013      	str	r3, [r2, #0]
 8014b74:	697b      	ldr	r3, [r7, #20]
 8014b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b78:	4613      	mov	r3, r2
 8014b7a:	009b      	lsls	r3, r3, #2
 8014b7c:	4413      	add	r3, r2
 8014b7e:	009b      	lsls	r3, r3, #2
 8014b80:	4a0c      	ldr	r2, [pc, #48]	; (8014bb4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8014b82:	441a      	add	r2, r3
 8014b84:	697b      	ldr	r3, [r7, #20]
 8014b86:	3304      	adds	r3, #4
 8014b88:	4619      	mov	r1, r3
 8014b8a:	4610      	mov	r0, r2
 8014b8c:	f7fe fd2d 	bl	80135ea <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014b90:	697b      	ldr	r3, [r7, #20]
 8014b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b94:	4b08      	ldr	r3, [pc, #32]	; (8014bb8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b9a:	429a      	cmp	r2, r3
 8014b9c:	d902      	bls.n	8014ba4 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8014b9e:	4b07      	ldr	r3, [pc, #28]	; (8014bbc <vTaskRemoveFromUnorderedEventList+0xc0>)
 8014ba0:	2201      	movs	r2, #1
 8014ba2:	601a      	str	r2, [r3, #0]
	}
}
 8014ba4:	bf00      	nop
 8014ba6:	3718      	adds	r7, #24
 8014ba8:	46bd      	mov	sp, r7
 8014baa:	bd80      	pop	{r7, pc}
 8014bac:	2400297c 	.word	0x2400297c
 8014bb0:	2400295c 	.word	0x2400295c
 8014bb4:	24002484 	.word	0x24002484
 8014bb8:	24002480 	.word	0x24002480
 8014bbc:	24002968 	.word	0x24002968

08014bc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014bc0:	b480      	push	{r7}
 8014bc2:	b083      	sub	sp, #12
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014bc8:	4b06      	ldr	r3, [pc, #24]	; (8014be4 <vTaskInternalSetTimeOutState+0x24>)
 8014bca:	681a      	ldr	r2, [r3, #0]
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014bd0:	4b05      	ldr	r3, [pc, #20]	; (8014be8 <vTaskInternalSetTimeOutState+0x28>)
 8014bd2:	681a      	ldr	r2, [r3, #0]
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	605a      	str	r2, [r3, #4]
}
 8014bd8:	bf00      	nop
 8014bda:	370c      	adds	r7, #12
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be2:	4770      	bx	lr
 8014be4:	2400296c 	.word	0x2400296c
 8014be8:	24002958 	.word	0x24002958

08014bec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014bec:	b580      	push	{r7, lr}
 8014bee:	b088      	sub	sp, #32
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	6078      	str	r0, [r7, #4]
 8014bf4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d10a      	bne.n	8014c12 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c00:	f383 8811 	msr	BASEPRI, r3
 8014c04:	f3bf 8f6f 	isb	sy
 8014c08:	f3bf 8f4f 	dsb	sy
 8014c0c:	613b      	str	r3, [r7, #16]
}
 8014c0e:	bf00      	nop
 8014c10:	e7fe      	b.n	8014c10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014c12:	683b      	ldr	r3, [r7, #0]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d10a      	bne.n	8014c2e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c1c:	f383 8811 	msr	BASEPRI, r3
 8014c20:	f3bf 8f6f 	isb	sy
 8014c24:	f3bf 8f4f 	dsb	sy
 8014c28:	60fb      	str	r3, [r7, #12]
}
 8014c2a:	bf00      	nop
 8014c2c:	e7fe      	b.n	8014c2c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014c2e:	f000 feb1 	bl	8015994 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014c32:	4b1d      	ldr	r3, [pc, #116]	; (8014ca8 <xTaskCheckForTimeOut+0xbc>)
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	685b      	ldr	r3, [r3, #4]
 8014c3c:	69ba      	ldr	r2, [r7, #24]
 8014c3e:	1ad3      	subs	r3, r2, r3
 8014c40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014c42:	683b      	ldr	r3, [r7, #0]
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014c4a:	d102      	bne.n	8014c52 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014c4c:	2300      	movs	r3, #0
 8014c4e:	61fb      	str	r3, [r7, #28]
 8014c50:	e023      	b.n	8014c9a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	681a      	ldr	r2, [r3, #0]
 8014c56:	4b15      	ldr	r3, [pc, #84]	; (8014cac <xTaskCheckForTimeOut+0xc0>)
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	429a      	cmp	r2, r3
 8014c5c:	d007      	beq.n	8014c6e <xTaskCheckForTimeOut+0x82>
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	685b      	ldr	r3, [r3, #4]
 8014c62:	69ba      	ldr	r2, [r7, #24]
 8014c64:	429a      	cmp	r2, r3
 8014c66:	d302      	bcc.n	8014c6e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014c68:	2301      	movs	r3, #1
 8014c6a:	61fb      	str	r3, [r7, #28]
 8014c6c:	e015      	b.n	8014c9a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014c6e:	683b      	ldr	r3, [r7, #0]
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	697a      	ldr	r2, [r7, #20]
 8014c74:	429a      	cmp	r2, r3
 8014c76:	d20b      	bcs.n	8014c90 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014c78:	683b      	ldr	r3, [r7, #0]
 8014c7a:	681a      	ldr	r2, [r3, #0]
 8014c7c:	697b      	ldr	r3, [r7, #20]
 8014c7e:	1ad2      	subs	r2, r2, r3
 8014c80:	683b      	ldr	r3, [r7, #0]
 8014c82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014c84:	6878      	ldr	r0, [r7, #4]
 8014c86:	f7ff ff9b 	bl	8014bc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	61fb      	str	r3, [r7, #28]
 8014c8e:	e004      	b.n	8014c9a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014c90:	683b      	ldr	r3, [r7, #0]
 8014c92:	2200      	movs	r2, #0
 8014c94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014c96:	2301      	movs	r3, #1
 8014c98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014c9a:	f000 feab 	bl	80159f4 <vPortExitCritical>

	return xReturn;
 8014c9e:	69fb      	ldr	r3, [r7, #28]
}
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	3720      	adds	r7, #32
 8014ca4:	46bd      	mov	sp, r7
 8014ca6:	bd80      	pop	{r7, pc}
 8014ca8:	24002958 	.word	0x24002958
 8014cac:	2400296c 	.word	0x2400296c

08014cb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014cb0:	b480      	push	{r7}
 8014cb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014cb4:	4b03      	ldr	r3, [pc, #12]	; (8014cc4 <vTaskMissedYield+0x14>)
 8014cb6:	2201      	movs	r2, #1
 8014cb8:	601a      	str	r2, [r3, #0]
}
 8014cba:	bf00      	nop
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc2:	4770      	bx	lr
 8014cc4:	24002968 	.word	0x24002968

08014cc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b082      	sub	sp, #8
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014cd0:	f000 f852 	bl	8014d78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014cd4:	4b06      	ldr	r3, [pc, #24]	; (8014cf0 <prvIdleTask+0x28>)
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	2b01      	cmp	r3, #1
 8014cda:	d9f9      	bls.n	8014cd0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014cdc:	4b05      	ldr	r3, [pc, #20]	; (8014cf4 <prvIdleTask+0x2c>)
 8014cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ce2:	601a      	str	r2, [r3, #0]
 8014ce4:	f3bf 8f4f 	dsb	sy
 8014ce8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014cec:	e7f0      	b.n	8014cd0 <prvIdleTask+0x8>
 8014cee:	bf00      	nop
 8014cf0:	24002484 	.word	0x24002484
 8014cf4:	e000ed04 	.word	0xe000ed04

08014cf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	b082      	sub	sp, #8
 8014cfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014cfe:	2300      	movs	r3, #0
 8014d00:	607b      	str	r3, [r7, #4]
 8014d02:	e00c      	b.n	8014d1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014d04:	687a      	ldr	r2, [r7, #4]
 8014d06:	4613      	mov	r3, r2
 8014d08:	009b      	lsls	r3, r3, #2
 8014d0a:	4413      	add	r3, r2
 8014d0c:	009b      	lsls	r3, r3, #2
 8014d0e:	4a12      	ldr	r2, [pc, #72]	; (8014d58 <prvInitialiseTaskLists+0x60>)
 8014d10:	4413      	add	r3, r2
 8014d12:	4618      	mov	r0, r3
 8014d14:	f7fe fc3c 	bl	8013590 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	3301      	adds	r3, #1
 8014d1c:	607b      	str	r3, [r7, #4]
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	2b37      	cmp	r3, #55	; 0x37
 8014d22:	d9ef      	bls.n	8014d04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014d24:	480d      	ldr	r0, [pc, #52]	; (8014d5c <prvInitialiseTaskLists+0x64>)
 8014d26:	f7fe fc33 	bl	8013590 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014d2a:	480d      	ldr	r0, [pc, #52]	; (8014d60 <prvInitialiseTaskLists+0x68>)
 8014d2c:	f7fe fc30 	bl	8013590 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014d30:	480c      	ldr	r0, [pc, #48]	; (8014d64 <prvInitialiseTaskLists+0x6c>)
 8014d32:	f7fe fc2d 	bl	8013590 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014d36:	480c      	ldr	r0, [pc, #48]	; (8014d68 <prvInitialiseTaskLists+0x70>)
 8014d38:	f7fe fc2a 	bl	8013590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014d3c:	480b      	ldr	r0, [pc, #44]	; (8014d6c <prvInitialiseTaskLists+0x74>)
 8014d3e:	f7fe fc27 	bl	8013590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014d42:	4b0b      	ldr	r3, [pc, #44]	; (8014d70 <prvInitialiseTaskLists+0x78>)
 8014d44:	4a05      	ldr	r2, [pc, #20]	; (8014d5c <prvInitialiseTaskLists+0x64>)
 8014d46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014d48:	4b0a      	ldr	r3, [pc, #40]	; (8014d74 <prvInitialiseTaskLists+0x7c>)
 8014d4a:	4a05      	ldr	r2, [pc, #20]	; (8014d60 <prvInitialiseTaskLists+0x68>)
 8014d4c:	601a      	str	r2, [r3, #0]
}
 8014d4e:	bf00      	nop
 8014d50:	3708      	adds	r7, #8
 8014d52:	46bd      	mov	sp, r7
 8014d54:	bd80      	pop	{r7, pc}
 8014d56:	bf00      	nop
 8014d58:	24002484 	.word	0x24002484
 8014d5c:	240028e4 	.word	0x240028e4
 8014d60:	240028f8 	.word	0x240028f8
 8014d64:	24002914 	.word	0x24002914
 8014d68:	24002928 	.word	0x24002928
 8014d6c:	24002940 	.word	0x24002940
 8014d70:	2400290c 	.word	0x2400290c
 8014d74:	24002910 	.word	0x24002910

08014d78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b082      	sub	sp, #8
 8014d7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014d7e:	e019      	b.n	8014db4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014d80:	f000 fe08 	bl	8015994 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014d84:	4b10      	ldr	r3, [pc, #64]	; (8014dc8 <prvCheckTasksWaitingTermination+0x50>)
 8014d86:	68db      	ldr	r3, [r3, #12]
 8014d88:	68db      	ldr	r3, [r3, #12]
 8014d8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	3304      	adds	r3, #4
 8014d90:	4618      	mov	r0, r3
 8014d92:	f7fe fc87 	bl	80136a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014d96:	4b0d      	ldr	r3, [pc, #52]	; (8014dcc <prvCheckTasksWaitingTermination+0x54>)
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	3b01      	subs	r3, #1
 8014d9c:	4a0b      	ldr	r2, [pc, #44]	; (8014dcc <prvCheckTasksWaitingTermination+0x54>)
 8014d9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014da0:	4b0b      	ldr	r3, [pc, #44]	; (8014dd0 <prvCheckTasksWaitingTermination+0x58>)
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	3b01      	subs	r3, #1
 8014da6:	4a0a      	ldr	r2, [pc, #40]	; (8014dd0 <prvCheckTasksWaitingTermination+0x58>)
 8014da8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014daa:	f000 fe23 	bl	80159f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014dae:	6878      	ldr	r0, [r7, #4]
 8014db0:	f000 f810 	bl	8014dd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014db4:	4b06      	ldr	r3, [pc, #24]	; (8014dd0 <prvCheckTasksWaitingTermination+0x58>)
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d1e1      	bne.n	8014d80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014dbc:	bf00      	nop
 8014dbe:	bf00      	nop
 8014dc0:	3708      	adds	r7, #8
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	bd80      	pop	{r7, pc}
 8014dc6:	bf00      	nop
 8014dc8:	24002928 	.word	0x24002928
 8014dcc:	24002954 	.word	0x24002954
 8014dd0:	2400293c 	.word	0x2400293c

08014dd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b084      	sub	sp, #16
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d108      	bne.n	8014df8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014dea:	4618      	mov	r0, r3
 8014dec:	f000 ffc0 	bl	8015d70 <vPortFree>
				vPortFree( pxTCB );
 8014df0:	6878      	ldr	r0, [r7, #4]
 8014df2:	f000 ffbd 	bl	8015d70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014df6:	e018      	b.n	8014e2a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014dfe:	2b01      	cmp	r3, #1
 8014e00:	d103      	bne.n	8014e0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014e02:	6878      	ldr	r0, [r7, #4]
 8014e04:	f000 ffb4 	bl	8015d70 <vPortFree>
	}
 8014e08:	e00f      	b.n	8014e2a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014e10:	2b02      	cmp	r3, #2
 8014e12:	d00a      	beq.n	8014e2a <prvDeleteTCB+0x56>
	__asm volatile
 8014e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e18:	f383 8811 	msr	BASEPRI, r3
 8014e1c:	f3bf 8f6f 	isb	sy
 8014e20:	f3bf 8f4f 	dsb	sy
 8014e24:	60fb      	str	r3, [r7, #12]
}
 8014e26:	bf00      	nop
 8014e28:	e7fe      	b.n	8014e28 <prvDeleteTCB+0x54>
	}
 8014e2a:	bf00      	nop
 8014e2c:	3710      	adds	r7, #16
 8014e2e:	46bd      	mov	sp, r7
 8014e30:	bd80      	pop	{r7, pc}
	...

08014e34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014e34:	b480      	push	{r7}
 8014e36:	b083      	sub	sp, #12
 8014e38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014e3a:	4b0c      	ldr	r3, [pc, #48]	; (8014e6c <prvResetNextTaskUnblockTime+0x38>)
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d104      	bne.n	8014e4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014e44:	4b0a      	ldr	r3, [pc, #40]	; (8014e70 <prvResetNextTaskUnblockTime+0x3c>)
 8014e46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014e4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014e4c:	e008      	b.n	8014e60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014e4e:	4b07      	ldr	r3, [pc, #28]	; (8014e6c <prvResetNextTaskUnblockTime+0x38>)
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	68db      	ldr	r3, [r3, #12]
 8014e54:	68db      	ldr	r3, [r3, #12]
 8014e56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	685b      	ldr	r3, [r3, #4]
 8014e5c:	4a04      	ldr	r2, [pc, #16]	; (8014e70 <prvResetNextTaskUnblockTime+0x3c>)
 8014e5e:	6013      	str	r3, [r2, #0]
}
 8014e60:	bf00      	nop
 8014e62:	370c      	adds	r7, #12
 8014e64:	46bd      	mov	sp, r7
 8014e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6a:	4770      	bx	lr
 8014e6c:	2400290c 	.word	0x2400290c
 8014e70:	24002974 	.word	0x24002974

08014e74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014e74:	b480      	push	{r7}
 8014e76:	b083      	sub	sp, #12
 8014e78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014e7a:	4b0b      	ldr	r3, [pc, #44]	; (8014ea8 <xTaskGetSchedulerState+0x34>)
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d102      	bne.n	8014e88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014e82:	2301      	movs	r3, #1
 8014e84:	607b      	str	r3, [r7, #4]
 8014e86:	e008      	b.n	8014e9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014e88:	4b08      	ldr	r3, [pc, #32]	; (8014eac <xTaskGetSchedulerState+0x38>)
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d102      	bne.n	8014e96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014e90:	2302      	movs	r3, #2
 8014e92:	607b      	str	r3, [r7, #4]
 8014e94:	e001      	b.n	8014e9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014e96:	2300      	movs	r3, #0
 8014e98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014e9a:	687b      	ldr	r3, [r7, #4]
	}
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	370c      	adds	r7, #12
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea6:	4770      	bx	lr
 8014ea8:	24002960 	.word	0x24002960
 8014eac:	2400297c 	.word	0x2400297c

08014eb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b086      	sub	sp, #24
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d056      	beq.n	8014f74 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014ec6:	4b2e      	ldr	r3, [pc, #184]	; (8014f80 <xTaskPriorityDisinherit+0xd0>)
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	693a      	ldr	r2, [r7, #16]
 8014ecc:	429a      	cmp	r2, r3
 8014ece:	d00a      	beq.n	8014ee6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8014ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ed4:	f383 8811 	msr	BASEPRI, r3
 8014ed8:	f3bf 8f6f 	isb	sy
 8014edc:	f3bf 8f4f 	dsb	sy
 8014ee0:	60fb      	str	r3, [r7, #12]
}
 8014ee2:	bf00      	nop
 8014ee4:	e7fe      	b.n	8014ee4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014ee6:	693b      	ldr	r3, [r7, #16]
 8014ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d10a      	bne.n	8014f04 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8014eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ef2:	f383 8811 	msr	BASEPRI, r3
 8014ef6:	f3bf 8f6f 	isb	sy
 8014efa:	f3bf 8f4f 	dsb	sy
 8014efe:	60bb      	str	r3, [r7, #8]
}
 8014f00:	bf00      	nop
 8014f02:	e7fe      	b.n	8014f02 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8014f04:	693b      	ldr	r3, [r7, #16]
 8014f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f08:	1e5a      	subs	r2, r3, #1
 8014f0a:	693b      	ldr	r3, [r7, #16]
 8014f0c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014f0e:	693b      	ldr	r3, [r7, #16]
 8014f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f12:	693b      	ldr	r3, [r7, #16]
 8014f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014f16:	429a      	cmp	r2, r3
 8014f18:	d02c      	beq.n	8014f74 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014f1a:	693b      	ldr	r3, [r7, #16]
 8014f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d128      	bne.n	8014f74 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014f22:	693b      	ldr	r3, [r7, #16]
 8014f24:	3304      	adds	r3, #4
 8014f26:	4618      	mov	r0, r3
 8014f28:	f7fe fbbc 	bl	80136a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014f2c:	693b      	ldr	r3, [r7, #16]
 8014f2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014f30:	693b      	ldr	r3, [r7, #16]
 8014f32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014f34:	693b      	ldr	r3, [r7, #16]
 8014f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f38:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014f3c:	693b      	ldr	r3, [r7, #16]
 8014f3e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014f40:	693b      	ldr	r3, [r7, #16]
 8014f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f44:	4b0f      	ldr	r3, [pc, #60]	; (8014f84 <xTaskPriorityDisinherit+0xd4>)
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	429a      	cmp	r2, r3
 8014f4a:	d903      	bls.n	8014f54 <xTaskPriorityDisinherit+0xa4>
 8014f4c:	693b      	ldr	r3, [r7, #16]
 8014f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f50:	4a0c      	ldr	r2, [pc, #48]	; (8014f84 <xTaskPriorityDisinherit+0xd4>)
 8014f52:	6013      	str	r3, [r2, #0]
 8014f54:	693b      	ldr	r3, [r7, #16]
 8014f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f58:	4613      	mov	r3, r2
 8014f5a:	009b      	lsls	r3, r3, #2
 8014f5c:	4413      	add	r3, r2
 8014f5e:	009b      	lsls	r3, r3, #2
 8014f60:	4a09      	ldr	r2, [pc, #36]	; (8014f88 <xTaskPriorityDisinherit+0xd8>)
 8014f62:	441a      	add	r2, r3
 8014f64:	693b      	ldr	r3, [r7, #16]
 8014f66:	3304      	adds	r3, #4
 8014f68:	4619      	mov	r1, r3
 8014f6a:	4610      	mov	r0, r2
 8014f6c:	f7fe fb3d 	bl	80135ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014f70:	2301      	movs	r3, #1
 8014f72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014f74:	697b      	ldr	r3, [r7, #20]
	}
 8014f76:	4618      	mov	r0, r3
 8014f78:	3718      	adds	r7, #24
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	bd80      	pop	{r7, pc}
 8014f7e:	bf00      	nop
 8014f80:	24002480 	.word	0x24002480
 8014f84:	2400295c 	.word	0x2400295c
 8014f88:	24002484 	.word	0x24002484

08014f8c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8014f8c:	b480      	push	{r7}
 8014f8e:	b083      	sub	sp, #12
 8014f90:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8014f92:	4b09      	ldr	r3, [pc, #36]	; (8014fb8 <uxTaskResetEventItemValue+0x2c>)
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	699b      	ldr	r3, [r3, #24]
 8014f98:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014f9a:	4b07      	ldr	r3, [pc, #28]	; (8014fb8 <uxTaskResetEventItemValue+0x2c>)
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fa0:	4b05      	ldr	r3, [pc, #20]	; (8014fb8 <uxTaskResetEventItemValue+0x2c>)
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8014fa8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8014faa:	687b      	ldr	r3, [r7, #4]
}
 8014fac:	4618      	mov	r0, r3
 8014fae:	370c      	adds	r7, #12
 8014fb0:	46bd      	mov	sp, r7
 8014fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb6:	4770      	bx	lr
 8014fb8:	24002480 	.word	0x24002480

08014fbc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014fbc:	b580      	push	{r7, lr}
 8014fbe:	b084      	sub	sp, #16
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	6078      	str	r0, [r7, #4]
 8014fc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014fc6:	4b21      	ldr	r3, [pc, #132]	; (801504c <prvAddCurrentTaskToDelayedList+0x90>)
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014fcc:	4b20      	ldr	r3, [pc, #128]	; (8015050 <prvAddCurrentTaskToDelayedList+0x94>)
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	3304      	adds	r3, #4
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	f7fe fb66 	bl	80136a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014fde:	d10a      	bne.n	8014ff6 <prvAddCurrentTaskToDelayedList+0x3a>
 8014fe0:	683b      	ldr	r3, [r7, #0]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d007      	beq.n	8014ff6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014fe6:	4b1a      	ldr	r3, [pc, #104]	; (8015050 <prvAddCurrentTaskToDelayedList+0x94>)
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	3304      	adds	r3, #4
 8014fec:	4619      	mov	r1, r3
 8014fee:	4819      	ldr	r0, [pc, #100]	; (8015054 <prvAddCurrentTaskToDelayedList+0x98>)
 8014ff0:	f7fe fafb 	bl	80135ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014ff4:	e026      	b.n	8015044 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014ff6:	68fa      	ldr	r2, [r7, #12]
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	4413      	add	r3, r2
 8014ffc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014ffe:	4b14      	ldr	r3, [pc, #80]	; (8015050 <prvAddCurrentTaskToDelayedList+0x94>)
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	68ba      	ldr	r2, [r7, #8]
 8015004:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015006:	68ba      	ldr	r2, [r7, #8]
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	429a      	cmp	r2, r3
 801500c:	d209      	bcs.n	8015022 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801500e:	4b12      	ldr	r3, [pc, #72]	; (8015058 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015010:	681a      	ldr	r2, [r3, #0]
 8015012:	4b0f      	ldr	r3, [pc, #60]	; (8015050 <prvAddCurrentTaskToDelayedList+0x94>)
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	3304      	adds	r3, #4
 8015018:	4619      	mov	r1, r3
 801501a:	4610      	mov	r0, r2
 801501c:	f7fe fb09 	bl	8013632 <vListInsert>
}
 8015020:	e010      	b.n	8015044 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015022:	4b0e      	ldr	r3, [pc, #56]	; (801505c <prvAddCurrentTaskToDelayedList+0xa0>)
 8015024:	681a      	ldr	r2, [r3, #0]
 8015026:	4b0a      	ldr	r3, [pc, #40]	; (8015050 <prvAddCurrentTaskToDelayedList+0x94>)
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	3304      	adds	r3, #4
 801502c:	4619      	mov	r1, r3
 801502e:	4610      	mov	r0, r2
 8015030:	f7fe faff 	bl	8013632 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015034:	4b0a      	ldr	r3, [pc, #40]	; (8015060 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	68ba      	ldr	r2, [r7, #8]
 801503a:	429a      	cmp	r2, r3
 801503c:	d202      	bcs.n	8015044 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801503e:	4a08      	ldr	r2, [pc, #32]	; (8015060 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015040:	68bb      	ldr	r3, [r7, #8]
 8015042:	6013      	str	r3, [r2, #0]
}
 8015044:	bf00      	nop
 8015046:	3710      	adds	r7, #16
 8015048:	46bd      	mov	sp, r7
 801504a:	bd80      	pop	{r7, pc}
 801504c:	24002958 	.word	0x24002958
 8015050:	24002480 	.word	0x24002480
 8015054:	24002940 	.word	0x24002940
 8015058:	24002910 	.word	0x24002910
 801505c:	2400290c 	.word	0x2400290c
 8015060:	24002974 	.word	0x24002974

08015064 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015064:	b580      	push	{r7, lr}
 8015066:	b08a      	sub	sp, #40	; 0x28
 8015068:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801506a:	2300      	movs	r3, #0
 801506c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801506e:	f000 fb07 	bl	8015680 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015072:	4b1c      	ldr	r3, [pc, #112]	; (80150e4 <xTimerCreateTimerTask+0x80>)
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d021      	beq.n	80150be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801507a:	2300      	movs	r3, #0
 801507c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801507e:	2300      	movs	r3, #0
 8015080:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015082:	1d3a      	adds	r2, r7, #4
 8015084:	f107 0108 	add.w	r1, r7, #8
 8015088:	f107 030c 	add.w	r3, r7, #12
 801508c:	4618      	mov	r0, r3
 801508e:	f7fd fff9 	bl	8013084 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015092:	6879      	ldr	r1, [r7, #4]
 8015094:	68bb      	ldr	r3, [r7, #8]
 8015096:	68fa      	ldr	r2, [r7, #12]
 8015098:	9202      	str	r2, [sp, #8]
 801509a:	9301      	str	r3, [sp, #4]
 801509c:	2302      	movs	r3, #2
 801509e:	9300      	str	r3, [sp, #0]
 80150a0:	2300      	movs	r3, #0
 80150a2:	460a      	mov	r2, r1
 80150a4:	4910      	ldr	r1, [pc, #64]	; (80150e8 <xTimerCreateTimerTask+0x84>)
 80150a6:	4811      	ldr	r0, [pc, #68]	; (80150ec <xTimerCreateTimerTask+0x88>)
 80150a8:	f7ff f812 	bl	80140d0 <xTaskCreateStatic>
 80150ac:	4603      	mov	r3, r0
 80150ae:	4a10      	ldr	r2, [pc, #64]	; (80150f0 <xTimerCreateTimerTask+0x8c>)
 80150b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80150b2:	4b0f      	ldr	r3, [pc, #60]	; (80150f0 <xTimerCreateTimerTask+0x8c>)
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d001      	beq.n	80150be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80150ba:	2301      	movs	r3, #1
 80150bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80150be:	697b      	ldr	r3, [r7, #20]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d10a      	bne.n	80150da <xTimerCreateTimerTask+0x76>
	__asm volatile
 80150c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150c8:	f383 8811 	msr	BASEPRI, r3
 80150cc:	f3bf 8f6f 	isb	sy
 80150d0:	f3bf 8f4f 	dsb	sy
 80150d4:	613b      	str	r3, [r7, #16]
}
 80150d6:	bf00      	nop
 80150d8:	e7fe      	b.n	80150d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80150da:	697b      	ldr	r3, [r7, #20]
}
 80150dc:	4618      	mov	r0, r3
 80150de:	3718      	adds	r7, #24
 80150e0:	46bd      	mov	sp, r7
 80150e2:	bd80      	pop	{r7, pc}
 80150e4:	240029b0 	.word	0x240029b0
 80150e8:	08016c98 	.word	0x08016c98
 80150ec:	08015229 	.word	0x08015229
 80150f0:	240029b4 	.word	0x240029b4

080150f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80150f4:	b580      	push	{r7, lr}
 80150f6:	b08a      	sub	sp, #40	; 0x28
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	60f8      	str	r0, [r7, #12]
 80150fc:	60b9      	str	r1, [r7, #8]
 80150fe:	607a      	str	r2, [r7, #4]
 8015100:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015102:	2300      	movs	r3, #0
 8015104:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	2b00      	cmp	r3, #0
 801510a:	d10a      	bne.n	8015122 <xTimerGenericCommand+0x2e>
	__asm volatile
 801510c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015110:	f383 8811 	msr	BASEPRI, r3
 8015114:	f3bf 8f6f 	isb	sy
 8015118:	f3bf 8f4f 	dsb	sy
 801511c:	623b      	str	r3, [r7, #32]
}
 801511e:	bf00      	nop
 8015120:	e7fe      	b.n	8015120 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015122:	4b1a      	ldr	r3, [pc, #104]	; (801518c <xTimerGenericCommand+0x98>)
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d02a      	beq.n	8015180 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801512a:	68bb      	ldr	r3, [r7, #8]
 801512c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015136:	68bb      	ldr	r3, [r7, #8]
 8015138:	2b05      	cmp	r3, #5
 801513a:	dc18      	bgt.n	801516e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801513c:	f7ff fe9a 	bl	8014e74 <xTaskGetSchedulerState>
 8015140:	4603      	mov	r3, r0
 8015142:	2b02      	cmp	r3, #2
 8015144:	d109      	bne.n	801515a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015146:	4b11      	ldr	r3, [pc, #68]	; (801518c <xTimerGenericCommand+0x98>)
 8015148:	6818      	ldr	r0, [r3, #0]
 801514a:	f107 0110 	add.w	r1, r7, #16
 801514e:	2300      	movs	r3, #0
 8015150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015152:	f7fe fbd5 	bl	8013900 <xQueueGenericSend>
 8015156:	6278      	str	r0, [r7, #36]	; 0x24
 8015158:	e012      	b.n	8015180 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801515a:	4b0c      	ldr	r3, [pc, #48]	; (801518c <xTimerGenericCommand+0x98>)
 801515c:	6818      	ldr	r0, [r3, #0]
 801515e:	f107 0110 	add.w	r1, r7, #16
 8015162:	2300      	movs	r3, #0
 8015164:	2200      	movs	r2, #0
 8015166:	f7fe fbcb 	bl	8013900 <xQueueGenericSend>
 801516a:	6278      	str	r0, [r7, #36]	; 0x24
 801516c:	e008      	b.n	8015180 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801516e:	4b07      	ldr	r3, [pc, #28]	; (801518c <xTimerGenericCommand+0x98>)
 8015170:	6818      	ldr	r0, [r3, #0]
 8015172:	f107 0110 	add.w	r1, r7, #16
 8015176:	2300      	movs	r3, #0
 8015178:	683a      	ldr	r2, [r7, #0]
 801517a:	f7fe fcbf 	bl	8013afc <xQueueGenericSendFromISR>
 801517e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015182:	4618      	mov	r0, r3
 8015184:	3728      	adds	r7, #40	; 0x28
 8015186:	46bd      	mov	sp, r7
 8015188:	bd80      	pop	{r7, pc}
 801518a:	bf00      	nop
 801518c:	240029b0 	.word	0x240029b0

08015190 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015190:	b580      	push	{r7, lr}
 8015192:	b088      	sub	sp, #32
 8015194:	af02      	add	r7, sp, #8
 8015196:	6078      	str	r0, [r7, #4]
 8015198:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801519a:	4b22      	ldr	r3, [pc, #136]	; (8015224 <prvProcessExpiredTimer+0x94>)
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	68db      	ldr	r3, [r3, #12]
 80151a0:	68db      	ldr	r3, [r3, #12]
 80151a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80151a4:	697b      	ldr	r3, [r7, #20]
 80151a6:	3304      	adds	r3, #4
 80151a8:	4618      	mov	r0, r3
 80151aa:	f7fe fa7b 	bl	80136a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80151ae:	697b      	ldr	r3, [r7, #20]
 80151b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80151b4:	f003 0304 	and.w	r3, r3, #4
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d022      	beq.n	8015202 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80151bc:	697b      	ldr	r3, [r7, #20]
 80151be:	699a      	ldr	r2, [r3, #24]
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	18d1      	adds	r1, r2, r3
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	683a      	ldr	r2, [r7, #0]
 80151c8:	6978      	ldr	r0, [r7, #20]
 80151ca:	f000 f8d1 	bl	8015370 <prvInsertTimerInActiveList>
 80151ce:	4603      	mov	r3, r0
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d01f      	beq.n	8015214 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80151d4:	2300      	movs	r3, #0
 80151d6:	9300      	str	r3, [sp, #0]
 80151d8:	2300      	movs	r3, #0
 80151da:	687a      	ldr	r2, [r7, #4]
 80151dc:	2100      	movs	r1, #0
 80151de:	6978      	ldr	r0, [r7, #20]
 80151e0:	f7ff ff88 	bl	80150f4 <xTimerGenericCommand>
 80151e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80151e6:	693b      	ldr	r3, [r7, #16]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d113      	bne.n	8015214 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80151ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151f0:	f383 8811 	msr	BASEPRI, r3
 80151f4:	f3bf 8f6f 	isb	sy
 80151f8:	f3bf 8f4f 	dsb	sy
 80151fc:	60fb      	str	r3, [r7, #12]
}
 80151fe:	bf00      	nop
 8015200:	e7fe      	b.n	8015200 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015202:	697b      	ldr	r3, [r7, #20]
 8015204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015208:	f023 0301 	bic.w	r3, r3, #1
 801520c:	b2da      	uxtb	r2, r3
 801520e:	697b      	ldr	r3, [r7, #20]
 8015210:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015214:	697b      	ldr	r3, [r7, #20]
 8015216:	6a1b      	ldr	r3, [r3, #32]
 8015218:	6978      	ldr	r0, [r7, #20]
 801521a:	4798      	blx	r3
}
 801521c:	bf00      	nop
 801521e:	3718      	adds	r7, #24
 8015220:	46bd      	mov	sp, r7
 8015222:	bd80      	pop	{r7, pc}
 8015224:	240029a8 	.word	0x240029a8

08015228 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015228:	b580      	push	{r7, lr}
 801522a:	b084      	sub	sp, #16
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015230:	f107 0308 	add.w	r3, r7, #8
 8015234:	4618      	mov	r0, r3
 8015236:	f000 f857 	bl	80152e8 <prvGetNextExpireTime>
 801523a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801523c:	68bb      	ldr	r3, [r7, #8]
 801523e:	4619      	mov	r1, r3
 8015240:	68f8      	ldr	r0, [r7, #12]
 8015242:	f000 f803 	bl	801524c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015246:	f000 f8d5 	bl	80153f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801524a:	e7f1      	b.n	8015230 <prvTimerTask+0x8>

0801524c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801524c:	b580      	push	{r7, lr}
 801524e:	b084      	sub	sp, #16
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
 8015254:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015256:	f7ff f977 	bl	8014548 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801525a:	f107 0308 	add.w	r3, r7, #8
 801525e:	4618      	mov	r0, r3
 8015260:	f000 f866 	bl	8015330 <prvSampleTimeNow>
 8015264:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015266:	68bb      	ldr	r3, [r7, #8]
 8015268:	2b00      	cmp	r3, #0
 801526a:	d130      	bne.n	80152ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801526c:	683b      	ldr	r3, [r7, #0]
 801526e:	2b00      	cmp	r3, #0
 8015270:	d10a      	bne.n	8015288 <prvProcessTimerOrBlockTask+0x3c>
 8015272:	687a      	ldr	r2, [r7, #4]
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	429a      	cmp	r2, r3
 8015278:	d806      	bhi.n	8015288 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801527a:	f7ff f973 	bl	8014564 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801527e:	68f9      	ldr	r1, [r7, #12]
 8015280:	6878      	ldr	r0, [r7, #4]
 8015282:	f7ff ff85 	bl	8015190 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015286:	e024      	b.n	80152d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015288:	683b      	ldr	r3, [r7, #0]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d008      	beq.n	80152a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801528e:	4b13      	ldr	r3, [pc, #76]	; (80152dc <prvProcessTimerOrBlockTask+0x90>)
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d101      	bne.n	801529c <prvProcessTimerOrBlockTask+0x50>
 8015298:	2301      	movs	r3, #1
 801529a:	e000      	b.n	801529e <prvProcessTimerOrBlockTask+0x52>
 801529c:	2300      	movs	r3, #0
 801529e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80152a0:	4b0f      	ldr	r3, [pc, #60]	; (80152e0 <prvProcessTimerOrBlockTask+0x94>)
 80152a2:	6818      	ldr	r0, [r3, #0]
 80152a4:	687a      	ldr	r2, [r7, #4]
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	1ad3      	subs	r3, r2, r3
 80152aa:	683a      	ldr	r2, [r7, #0]
 80152ac:	4619      	mov	r1, r3
 80152ae:	f7fe fedb 	bl	8014068 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80152b2:	f7ff f957 	bl	8014564 <xTaskResumeAll>
 80152b6:	4603      	mov	r3, r0
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d10a      	bne.n	80152d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80152bc:	4b09      	ldr	r3, [pc, #36]	; (80152e4 <prvProcessTimerOrBlockTask+0x98>)
 80152be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80152c2:	601a      	str	r2, [r3, #0]
 80152c4:	f3bf 8f4f 	dsb	sy
 80152c8:	f3bf 8f6f 	isb	sy
}
 80152cc:	e001      	b.n	80152d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80152ce:	f7ff f949 	bl	8014564 <xTaskResumeAll>
}
 80152d2:	bf00      	nop
 80152d4:	3710      	adds	r7, #16
 80152d6:	46bd      	mov	sp, r7
 80152d8:	bd80      	pop	{r7, pc}
 80152da:	bf00      	nop
 80152dc:	240029ac 	.word	0x240029ac
 80152e0:	240029b0 	.word	0x240029b0
 80152e4:	e000ed04 	.word	0xe000ed04

080152e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80152e8:	b480      	push	{r7}
 80152ea:	b085      	sub	sp, #20
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80152f0:	4b0e      	ldr	r3, [pc, #56]	; (801532c <prvGetNextExpireTime+0x44>)
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d101      	bne.n	80152fe <prvGetNextExpireTime+0x16>
 80152fa:	2201      	movs	r2, #1
 80152fc:	e000      	b.n	8015300 <prvGetNextExpireTime+0x18>
 80152fe:	2200      	movs	r2, #0
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d105      	bne.n	8015318 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801530c:	4b07      	ldr	r3, [pc, #28]	; (801532c <prvGetNextExpireTime+0x44>)
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	68db      	ldr	r3, [r3, #12]
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	60fb      	str	r3, [r7, #12]
 8015316:	e001      	b.n	801531c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015318:	2300      	movs	r3, #0
 801531a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801531c:	68fb      	ldr	r3, [r7, #12]
}
 801531e:	4618      	mov	r0, r3
 8015320:	3714      	adds	r7, #20
 8015322:	46bd      	mov	sp, r7
 8015324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015328:	4770      	bx	lr
 801532a:	bf00      	nop
 801532c:	240029a8 	.word	0x240029a8

08015330 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015330:	b580      	push	{r7, lr}
 8015332:	b084      	sub	sp, #16
 8015334:	af00      	add	r7, sp, #0
 8015336:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015338:	f7ff f9b2 	bl	80146a0 <xTaskGetTickCount>
 801533c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801533e:	4b0b      	ldr	r3, [pc, #44]	; (801536c <prvSampleTimeNow+0x3c>)
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	68fa      	ldr	r2, [r7, #12]
 8015344:	429a      	cmp	r2, r3
 8015346:	d205      	bcs.n	8015354 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015348:	f000 f936 	bl	80155b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	2201      	movs	r2, #1
 8015350:	601a      	str	r2, [r3, #0]
 8015352:	e002      	b.n	801535a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	2200      	movs	r2, #0
 8015358:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801535a:	4a04      	ldr	r2, [pc, #16]	; (801536c <prvSampleTimeNow+0x3c>)
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015360:	68fb      	ldr	r3, [r7, #12]
}
 8015362:	4618      	mov	r0, r3
 8015364:	3710      	adds	r7, #16
 8015366:	46bd      	mov	sp, r7
 8015368:	bd80      	pop	{r7, pc}
 801536a:	bf00      	nop
 801536c:	240029b8 	.word	0x240029b8

08015370 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015370:	b580      	push	{r7, lr}
 8015372:	b086      	sub	sp, #24
 8015374:	af00      	add	r7, sp, #0
 8015376:	60f8      	str	r0, [r7, #12]
 8015378:	60b9      	str	r1, [r7, #8]
 801537a:	607a      	str	r2, [r7, #4]
 801537c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801537e:	2300      	movs	r3, #0
 8015380:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	68ba      	ldr	r2, [r7, #8]
 8015386:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	68fa      	ldr	r2, [r7, #12]
 801538c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801538e:	68ba      	ldr	r2, [r7, #8]
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	429a      	cmp	r2, r3
 8015394:	d812      	bhi.n	80153bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015396:	687a      	ldr	r2, [r7, #4]
 8015398:	683b      	ldr	r3, [r7, #0]
 801539a:	1ad2      	subs	r2, r2, r3
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	699b      	ldr	r3, [r3, #24]
 80153a0:	429a      	cmp	r2, r3
 80153a2:	d302      	bcc.n	80153aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80153a4:	2301      	movs	r3, #1
 80153a6:	617b      	str	r3, [r7, #20]
 80153a8:	e01b      	b.n	80153e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80153aa:	4b10      	ldr	r3, [pc, #64]	; (80153ec <prvInsertTimerInActiveList+0x7c>)
 80153ac:	681a      	ldr	r2, [r3, #0]
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	3304      	adds	r3, #4
 80153b2:	4619      	mov	r1, r3
 80153b4:	4610      	mov	r0, r2
 80153b6:	f7fe f93c 	bl	8013632 <vListInsert>
 80153ba:	e012      	b.n	80153e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80153bc:	687a      	ldr	r2, [r7, #4]
 80153be:	683b      	ldr	r3, [r7, #0]
 80153c0:	429a      	cmp	r2, r3
 80153c2:	d206      	bcs.n	80153d2 <prvInsertTimerInActiveList+0x62>
 80153c4:	68ba      	ldr	r2, [r7, #8]
 80153c6:	683b      	ldr	r3, [r7, #0]
 80153c8:	429a      	cmp	r2, r3
 80153ca:	d302      	bcc.n	80153d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80153cc:	2301      	movs	r3, #1
 80153ce:	617b      	str	r3, [r7, #20]
 80153d0:	e007      	b.n	80153e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80153d2:	4b07      	ldr	r3, [pc, #28]	; (80153f0 <prvInsertTimerInActiveList+0x80>)
 80153d4:	681a      	ldr	r2, [r3, #0]
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	3304      	adds	r3, #4
 80153da:	4619      	mov	r1, r3
 80153dc:	4610      	mov	r0, r2
 80153de:	f7fe f928 	bl	8013632 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80153e2:	697b      	ldr	r3, [r7, #20]
}
 80153e4:	4618      	mov	r0, r3
 80153e6:	3718      	adds	r7, #24
 80153e8:	46bd      	mov	sp, r7
 80153ea:	bd80      	pop	{r7, pc}
 80153ec:	240029ac 	.word	0x240029ac
 80153f0:	240029a8 	.word	0x240029a8

080153f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b08e      	sub	sp, #56	; 0x38
 80153f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80153fa:	e0ca      	b.n	8015592 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	da18      	bge.n	8015434 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015402:	1d3b      	adds	r3, r7, #4
 8015404:	3304      	adds	r3, #4
 8015406:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801540a:	2b00      	cmp	r3, #0
 801540c:	d10a      	bne.n	8015424 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015412:	f383 8811 	msr	BASEPRI, r3
 8015416:	f3bf 8f6f 	isb	sy
 801541a:	f3bf 8f4f 	dsb	sy
 801541e:	61fb      	str	r3, [r7, #28]
}
 8015420:	bf00      	nop
 8015422:	e7fe      	b.n	8015422 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801542a:	6850      	ldr	r0, [r2, #4]
 801542c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801542e:	6892      	ldr	r2, [r2, #8]
 8015430:	4611      	mov	r1, r2
 8015432:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	2b00      	cmp	r3, #0
 8015438:	f2c0 80aa 	blt.w	8015590 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015442:	695b      	ldr	r3, [r3, #20]
 8015444:	2b00      	cmp	r3, #0
 8015446:	d004      	beq.n	8015452 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801544a:	3304      	adds	r3, #4
 801544c:	4618      	mov	r0, r3
 801544e:	f7fe f929 	bl	80136a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015452:	463b      	mov	r3, r7
 8015454:	4618      	mov	r0, r3
 8015456:	f7ff ff6b 	bl	8015330 <prvSampleTimeNow>
 801545a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	2b09      	cmp	r3, #9
 8015460:	f200 8097 	bhi.w	8015592 <prvProcessReceivedCommands+0x19e>
 8015464:	a201      	add	r2, pc, #4	; (adr r2, 801546c <prvProcessReceivedCommands+0x78>)
 8015466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801546a:	bf00      	nop
 801546c:	08015495 	.word	0x08015495
 8015470:	08015495 	.word	0x08015495
 8015474:	08015495 	.word	0x08015495
 8015478:	08015509 	.word	0x08015509
 801547c:	0801551d 	.word	0x0801551d
 8015480:	08015567 	.word	0x08015567
 8015484:	08015495 	.word	0x08015495
 8015488:	08015495 	.word	0x08015495
 801548c:	08015509 	.word	0x08015509
 8015490:	0801551d 	.word	0x0801551d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015496:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801549a:	f043 0301 	orr.w	r3, r3, #1
 801549e:	b2da      	uxtb	r2, r3
 80154a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80154a6:	68ba      	ldr	r2, [r7, #8]
 80154a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154aa:	699b      	ldr	r3, [r3, #24]
 80154ac:	18d1      	adds	r1, r2, r3
 80154ae:	68bb      	ldr	r3, [r7, #8]
 80154b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80154b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80154b4:	f7ff ff5c 	bl	8015370 <prvInsertTimerInActiveList>
 80154b8:	4603      	mov	r3, r0
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d069      	beq.n	8015592 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80154be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154c0:	6a1b      	ldr	r3, [r3, #32]
 80154c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80154c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80154c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80154cc:	f003 0304 	and.w	r3, r3, #4
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d05e      	beq.n	8015592 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80154d4:	68ba      	ldr	r2, [r7, #8]
 80154d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154d8:	699b      	ldr	r3, [r3, #24]
 80154da:	441a      	add	r2, r3
 80154dc:	2300      	movs	r3, #0
 80154de:	9300      	str	r3, [sp, #0]
 80154e0:	2300      	movs	r3, #0
 80154e2:	2100      	movs	r1, #0
 80154e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80154e6:	f7ff fe05 	bl	80150f4 <xTimerGenericCommand>
 80154ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80154ec:	6a3b      	ldr	r3, [r7, #32]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d14f      	bne.n	8015592 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80154f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154f6:	f383 8811 	msr	BASEPRI, r3
 80154fa:	f3bf 8f6f 	isb	sy
 80154fe:	f3bf 8f4f 	dsb	sy
 8015502:	61bb      	str	r3, [r7, #24]
}
 8015504:	bf00      	nop
 8015506:	e7fe      	b.n	8015506 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801550a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801550e:	f023 0301 	bic.w	r3, r3, #1
 8015512:	b2da      	uxtb	r2, r3
 8015514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015516:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801551a:	e03a      	b.n	8015592 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801551c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801551e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015522:	f043 0301 	orr.w	r3, r3, #1
 8015526:	b2da      	uxtb	r2, r3
 8015528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801552a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801552e:	68ba      	ldr	r2, [r7, #8]
 8015530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015532:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015536:	699b      	ldr	r3, [r3, #24]
 8015538:	2b00      	cmp	r3, #0
 801553a:	d10a      	bne.n	8015552 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015540:	f383 8811 	msr	BASEPRI, r3
 8015544:	f3bf 8f6f 	isb	sy
 8015548:	f3bf 8f4f 	dsb	sy
 801554c:	617b      	str	r3, [r7, #20]
}
 801554e:	bf00      	nop
 8015550:	e7fe      	b.n	8015550 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015554:	699a      	ldr	r2, [r3, #24]
 8015556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015558:	18d1      	adds	r1, r2, r3
 801555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801555c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801555e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015560:	f7ff ff06 	bl	8015370 <prvInsertTimerInActiveList>
					break;
 8015564:	e015      	b.n	8015592 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015568:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801556c:	f003 0302 	and.w	r3, r3, #2
 8015570:	2b00      	cmp	r3, #0
 8015572:	d103      	bne.n	801557c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8015574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015576:	f000 fbfb 	bl	8015d70 <vPortFree>
 801557a:	e00a      	b.n	8015592 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801557c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801557e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015582:	f023 0301 	bic.w	r3, r3, #1
 8015586:	b2da      	uxtb	r2, r3
 8015588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801558a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801558e:	e000      	b.n	8015592 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015590:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015592:	4b08      	ldr	r3, [pc, #32]	; (80155b4 <prvProcessReceivedCommands+0x1c0>)
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	1d39      	adds	r1, r7, #4
 8015598:	2200      	movs	r2, #0
 801559a:	4618      	mov	r0, r3
 801559c:	f7fe fb4a 	bl	8013c34 <xQueueReceive>
 80155a0:	4603      	mov	r3, r0
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	f47f af2a 	bne.w	80153fc <prvProcessReceivedCommands+0x8>
	}
}
 80155a8:	bf00      	nop
 80155aa:	bf00      	nop
 80155ac:	3730      	adds	r7, #48	; 0x30
 80155ae:	46bd      	mov	sp, r7
 80155b0:	bd80      	pop	{r7, pc}
 80155b2:	bf00      	nop
 80155b4:	240029b0 	.word	0x240029b0

080155b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80155b8:	b580      	push	{r7, lr}
 80155ba:	b088      	sub	sp, #32
 80155bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80155be:	e048      	b.n	8015652 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80155c0:	4b2d      	ldr	r3, [pc, #180]	; (8015678 <prvSwitchTimerLists+0xc0>)
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	68db      	ldr	r3, [r3, #12]
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80155ca:	4b2b      	ldr	r3, [pc, #172]	; (8015678 <prvSwitchTimerLists+0xc0>)
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	68db      	ldr	r3, [r3, #12]
 80155d0:	68db      	ldr	r3, [r3, #12]
 80155d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	3304      	adds	r3, #4
 80155d8:	4618      	mov	r0, r3
 80155da:	f7fe f863 	bl	80136a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	6a1b      	ldr	r3, [r3, #32]
 80155e2:	68f8      	ldr	r0, [r7, #12]
 80155e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80155ec:	f003 0304 	and.w	r3, r3, #4
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d02e      	beq.n	8015652 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	699b      	ldr	r3, [r3, #24]
 80155f8:	693a      	ldr	r2, [r7, #16]
 80155fa:	4413      	add	r3, r2
 80155fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80155fe:	68ba      	ldr	r2, [r7, #8]
 8015600:	693b      	ldr	r3, [r7, #16]
 8015602:	429a      	cmp	r2, r3
 8015604:	d90e      	bls.n	8015624 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	68ba      	ldr	r2, [r7, #8]
 801560a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	68fa      	ldr	r2, [r7, #12]
 8015610:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015612:	4b19      	ldr	r3, [pc, #100]	; (8015678 <prvSwitchTimerLists+0xc0>)
 8015614:	681a      	ldr	r2, [r3, #0]
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	3304      	adds	r3, #4
 801561a:	4619      	mov	r1, r3
 801561c:	4610      	mov	r0, r2
 801561e:	f7fe f808 	bl	8013632 <vListInsert>
 8015622:	e016      	b.n	8015652 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015624:	2300      	movs	r3, #0
 8015626:	9300      	str	r3, [sp, #0]
 8015628:	2300      	movs	r3, #0
 801562a:	693a      	ldr	r2, [r7, #16]
 801562c:	2100      	movs	r1, #0
 801562e:	68f8      	ldr	r0, [r7, #12]
 8015630:	f7ff fd60 	bl	80150f4 <xTimerGenericCommand>
 8015634:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	2b00      	cmp	r3, #0
 801563a:	d10a      	bne.n	8015652 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801563c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015640:	f383 8811 	msr	BASEPRI, r3
 8015644:	f3bf 8f6f 	isb	sy
 8015648:	f3bf 8f4f 	dsb	sy
 801564c:	603b      	str	r3, [r7, #0]
}
 801564e:	bf00      	nop
 8015650:	e7fe      	b.n	8015650 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015652:	4b09      	ldr	r3, [pc, #36]	; (8015678 <prvSwitchTimerLists+0xc0>)
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d1b1      	bne.n	80155c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801565c:	4b06      	ldr	r3, [pc, #24]	; (8015678 <prvSwitchTimerLists+0xc0>)
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015662:	4b06      	ldr	r3, [pc, #24]	; (801567c <prvSwitchTimerLists+0xc4>)
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	4a04      	ldr	r2, [pc, #16]	; (8015678 <prvSwitchTimerLists+0xc0>)
 8015668:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801566a:	4a04      	ldr	r2, [pc, #16]	; (801567c <prvSwitchTimerLists+0xc4>)
 801566c:	697b      	ldr	r3, [r7, #20]
 801566e:	6013      	str	r3, [r2, #0]
}
 8015670:	bf00      	nop
 8015672:	3718      	adds	r7, #24
 8015674:	46bd      	mov	sp, r7
 8015676:	bd80      	pop	{r7, pc}
 8015678:	240029a8 	.word	0x240029a8
 801567c:	240029ac 	.word	0x240029ac

08015680 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015680:	b580      	push	{r7, lr}
 8015682:	b082      	sub	sp, #8
 8015684:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015686:	f000 f985 	bl	8015994 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801568a:	4b15      	ldr	r3, [pc, #84]	; (80156e0 <prvCheckForValidListAndQueue+0x60>)
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d120      	bne.n	80156d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015692:	4814      	ldr	r0, [pc, #80]	; (80156e4 <prvCheckForValidListAndQueue+0x64>)
 8015694:	f7fd ff7c 	bl	8013590 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015698:	4813      	ldr	r0, [pc, #76]	; (80156e8 <prvCheckForValidListAndQueue+0x68>)
 801569a:	f7fd ff79 	bl	8013590 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801569e:	4b13      	ldr	r3, [pc, #76]	; (80156ec <prvCheckForValidListAndQueue+0x6c>)
 80156a0:	4a10      	ldr	r2, [pc, #64]	; (80156e4 <prvCheckForValidListAndQueue+0x64>)
 80156a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80156a4:	4b12      	ldr	r3, [pc, #72]	; (80156f0 <prvCheckForValidListAndQueue+0x70>)
 80156a6:	4a10      	ldr	r2, [pc, #64]	; (80156e8 <prvCheckForValidListAndQueue+0x68>)
 80156a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80156aa:	2300      	movs	r3, #0
 80156ac:	9300      	str	r3, [sp, #0]
 80156ae:	4b11      	ldr	r3, [pc, #68]	; (80156f4 <prvCheckForValidListAndQueue+0x74>)
 80156b0:	4a11      	ldr	r2, [pc, #68]	; (80156f8 <prvCheckForValidListAndQueue+0x78>)
 80156b2:	2110      	movs	r1, #16
 80156b4:	200a      	movs	r0, #10
 80156b6:	f7fe f887 	bl	80137c8 <xQueueGenericCreateStatic>
 80156ba:	4603      	mov	r3, r0
 80156bc:	4a08      	ldr	r2, [pc, #32]	; (80156e0 <prvCheckForValidListAndQueue+0x60>)
 80156be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80156c0:	4b07      	ldr	r3, [pc, #28]	; (80156e0 <prvCheckForValidListAndQueue+0x60>)
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d005      	beq.n	80156d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80156c8:	4b05      	ldr	r3, [pc, #20]	; (80156e0 <prvCheckForValidListAndQueue+0x60>)
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	490b      	ldr	r1, [pc, #44]	; (80156fc <prvCheckForValidListAndQueue+0x7c>)
 80156ce:	4618      	mov	r0, r3
 80156d0:	f7fe fca0 	bl	8014014 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80156d4:	f000 f98e 	bl	80159f4 <vPortExitCritical>
}
 80156d8:	bf00      	nop
 80156da:	46bd      	mov	sp, r7
 80156dc:	bd80      	pop	{r7, pc}
 80156de:	bf00      	nop
 80156e0:	240029b0 	.word	0x240029b0
 80156e4:	24002980 	.word	0x24002980
 80156e8:	24002994 	.word	0x24002994
 80156ec:	240029a8 	.word	0x240029a8
 80156f0:	240029ac 	.word	0x240029ac
 80156f4:	24002a5c 	.word	0x24002a5c
 80156f8:	240029bc 	.word	0x240029bc
 80156fc:	08016ca0 	.word	0x08016ca0

08015700 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015700:	b580      	push	{r7, lr}
 8015702:	b08a      	sub	sp, #40	; 0x28
 8015704:	af00      	add	r7, sp, #0
 8015706:	60f8      	str	r0, [r7, #12]
 8015708:	60b9      	str	r1, [r7, #8]
 801570a:	607a      	str	r2, [r7, #4]
 801570c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801570e:	f06f 0301 	mvn.w	r3, #1
 8015712:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8015718:	68bb      	ldr	r3, [r7, #8]
 801571a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015720:	4b06      	ldr	r3, [pc, #24]	; (801573c <xTimerPendFunctionCallFromISR+0x3c>)
 8015722:	6818      	ldr	r0, [r3, #0]
 8015724:	f107 0114 	add.w	r1, r7, #20
 8015728:	2300      	movs	r3, #0
 801572a:	683a      	ldr	r2, [r7, #0]
 801572c:	f7fe f9e6 	bl	8013afc <xQueueGenericSendFromISR>
 8015730:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8015732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8015734:	4618      	mov	r0, r3
 8015736:	3728      	adds	r7, #40	; 0x28
 8015738:	46bd      	mov	sp, r7
 801573a:	bd80      	pop	{r7, pc}
 801573c:	240029b0 	.word	0x240029b0

08015740 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015740:	b480      	push	{r7}
 8015742:	b085      	sub	sp, #20
 8015744:	af00      	add	r7, sp, #0
 8015746:	60f8      	str	r0, [r7, #12]
 8015748:	60b9      	str	r1, [r7, #8]
 801574a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	3b04      	subs	r3, #4
 8015750:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	3b04      	subs	r3, #4
 801575e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015760:	68bb      	ldr	r3, [r7, #8]
 8015762:	f023 0201 	bic.w	r2, r3, #1
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	3b04      	subs	r3, #4
 801576e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015770:	4a0c      	ldr	r2, [pc, #48]	; (80157a4 <pxPortInitialiseStack+0x64>)
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	3b14      	subs	r3, #20
 801577a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801577c:	687a      	ldr	r2, [r7, #4]
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	3b04      	subs	r3, #4
 8015786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	f06f 0202 	mvn.w	r2, #2
 801578e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	3b20      	subs	r3, #32
 8015794:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015796:	68fb      	ldr	r3, [r7, #12]
}
 8015798:	4618      	mov	r0, r3
 801579a:	3714      	adds	r7, #20
 801579c:	46bd      	mov	sp, r7
 801579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a2:	4770      	bx	lr
 80157a4:	080157a9 	.word	0x080157a9

080157a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80157a8:	b480      	push	{r7}
 80157aa:	b085      	sub	sp, #20
 80157ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80157ae:	2300      	movs	r3, #0
 80157b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80157b2:	4b12      	ldr	r3, [pc, #72]	; (80157fc <prvTaskExitError+0x54>)
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80157ba:	d00a      	beq.n	80157d2 <prvTaskExitError+0x2a>
	__asm volatile
 80157bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157c0:	f383 8811 	msr	BASEPRI, r3
 80157c4:	f3bf 8f6f 	isb	sy
 80157c8:	f3bf 8f4f 	dsb	sy
 80157cc:	60fb      	str	r3, [r7, #12]
}
 80157ce:	bf00      	nop
 80157d0:	e7fe      	b.n	80157d0 <prvTaskExitError+0x28>
	__asm volatile
 80157d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157d6:	f383 8811 	msr	BASEPRI, r3
 80157da:	f3bf 8f6f 	isb	sy
 80157de:	f3bf 8f4f 	dsb	sy
 80157e2:	60bb      	str	r3, [r7, #8]
}
 80157e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80157e6:	bf00      	nop
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d0fc      	beq.n	80157e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80157ee:	bf00      	nop
 80157f0:	bf00      	nop
 80157f2:	3714      	adds	r7, #20
 80157f4:	46bd      	mov	sp, r7
 80157f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157fa:	4770      	bx	lr
 80157fc:	24000094 	.word	0x24000094

08015800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015800:	4b07      	ldr	r3, [pc, #28]	; (8015820 <pxCurrentTCBConst2>)
 8015802:	6819      	ldr	r1, [r3, #0]
 8015804:	6808      	ldr	r0, [r1, #0]
 8015806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801580a:	f380 8809 	msr	PSP, r0
 801580e:	f3bf 8f6f 	isb	sy
 8015812:	f04f 0000 	mov.w	r0, #0
 8015816:	f380 8811 	msr	BASEPRI, r0
 801581a:	4770      	bx	lr
 801581c:	f3af 8000 	nop.w

08015820 <pxCurrentTCBConst2>:
 8015820:	24002480 	.word	0x24002480
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015824:	bf00      	nop
 8015826:	bf00      	nop

08015828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015828:	4808      	ldr	r0, [pc, #32]	; (801584c <prvPortStartFirstTask+0x24>)
 801582a:	6800      	ldr	r0, [r0, #0]
 801582c:	6800      	ldr	r0, [r0, #0]
 801582e:	f380 8808 	msr	MSP, r0
 8015832:	f04f 0000 	mov.w	r0, #0
 8015836:	f380 8814 	msr	CONTROL, r0
 801583a:	b662      	cpsie	i
 801583c:	b661      	cpsie	f
 801583e:	f3bf 8f4f 	dsb	sy
 8015842:	f3bf 8f6f 	isb	sy
 8015846:	df00      	svc	0
 8015848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801584a:	bf00      	nop
 801584c:	e000ed08 	.word	0xe000ed08

08015850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015850:	b580      	push	{r7, lr}
 8015852:	b086      	sub	sp, #24
 8015854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015856:	4b46      	ldr	r3, [pc, #280]	; (8015970 <xPortStartScheduler+0x120>)
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	4a46      	ldr	r2, [pc, #280]	; (8015974 <xPortStartScheduler+0x124>)
 801585c:	4293      	cmp	r3, r2
 801585e:	d10a      	bne.n	8015876 <xPortStartScheduler+0x26>
	__asm volatile
 8015860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015864:	f383 8811 	msr	BASEPRI, r3
 8015868:	f3bf 8f6f 	isb	sy
 801586c:	f3bf 8f4f 	dsb	sy
 8015870:	613b      	str	r3, [r7, #16]
}
 8015872:	bf00      	nop
 8015874:	e7fe      	b.n	8015874 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015876:	4b3e      	ldr	r3, [pc, #248]	; (8015970 <xPortStartScheduler+0x120>)
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	4a3f      	ldr	r2, [pc, #252]	; (8015978 <xPortStartScheduler+0x128>)
 801587c:	4293      	cmp	r3, r2
 801587e:	d10a      	bne.n	8015896 <xPortStartScheduler+0x46>
	__asm volatile
 8015880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015884:	f383 8811 	msr	BASEPRI, r3
 8015888:	f3bf 8f6f 	isb	sy
 801588c:	f3bf 8f4f 	dsb	sy
 8015890:	60fb      	str	r3, [r7, #12]
}
 8015892:	bf00      	nop
 8015894:	e7fe      	b.n	8015894 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015896:	4b39      	ldr	r3, [pc, #228]	; (801597c <xPortStartScheduler+0x12c>)
 8015898:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801589a:	697b      	ldr	r3, [r7, #20]
 801589c:	781b      	ldrb	r3, [r3, #0]
 801589e:	b2db      	uxtb	r3, r3
 80158a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80158a2:	697b      	ldr	r3, [r7, #20]
 80158a4:	22ff      	movs	r2, #255	; 0xff
 80158a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80158a8:	697b      	ldr	r3, [r7, #20]
 80158aa:	781b      	ldrb	r3, [r3, #0]
 80158ac:	b2db      	uxtb	r3, r3
 80158ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80158b0:	78fb      	ldrb	r3, [r7, #3]
 80158b2:	b2db      	uxtb	r3, r3
 80158b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80158b8:	b2da      	uxtb	r2, r3
 80158ba:	4b31      	ldr	r3, [pc, #196]	; (8015980 <xPortStartScheduler+0x130>)
 80158bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80158be:	4b31      	ldr	r3, [pc, #196]	; (8015984 <xPortStartScheduler+0x134>)
 80158c0:	2207      	movs	r2, #7
 80158c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80158c4:	e009      	b.n	80158da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80158c6:	4b2f      	ldr	r3, [pc, #188]	; (8015984 <xPortStartScheduler+0x134>)
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	3b01      	subs	r3, #1
 80158cc:	4a2d      	ldr	r2, [pc, #180]	; (8015984 <xPortStartScheduler+0x134>)
 80158ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80158d0:	78fb      	ldrb	r3, [r7, #3]
 80158d2:	b2db      	uxtb	r3, r3
 80158d4:	005b      	lsls	r3, r3, #1
 80158d6:	b2db      	uxtb	r3, r3
 80158d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80158da:	78fb      	ldrb	r3, [r7, #3]
 80158dc:	b2db      	uxtb	r3, r3
 80158de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80158e2:	2b80      	cmp	r3, #128	; 0x80
 80158e4:	d0ef      	beq.n	80158c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80158e6:	4b27      	ldr	r3, [pc, #156]	; (8015984 <xPortStartScheduler+0x134>)
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	f1c3 0307 	rsb	r3, r3, #7
 80158ee:	2b04      	cmp	r3, #4
 80158f0:	d00a      	beq.n	8015908 <xPortStartScheduler+0xb8>
	__asm volatile
 80158f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158f6:	f383 8811 	msr	BASEPRI, r3
 80158fa:	f3bf 8f6f 	isb	sy
 80158fe:	f3bf 8f4f 	dsb	sy
 8015902:	60bb      	str	r3, [r7, #8]
}
 8015904:	bf00      	nop
 8015906:	e7fe      	b.n	8015906 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015908:	4b1e      	ldr	r3, [pc, #120]	; (8015984 <xPortStartScheduler+0x134>)
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	021b      	lsls	r3, r3, #8
 801590e:	4a1d      	ldr	r2, [pc, #116]	; (8015984 <xPortStartScheduler+0x134>)
 8015910:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015912:	4b1c      	ldr	r3, [pc, #112]	; (8015984 <xPortStartScheduler+0x134>)
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801591a:	4a1a      	ldr	r2, [pc, #104]	; (8015984 <xPortStartScheduler+0x134>)
 801591c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	b2da      	uxtb	r2, r3
 8015922:	697b      	ldr	r3, [r7, #20]
 8015924:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015926:	4b18      	ldr	r3, [pc, #96]	; (8015988 <xPortStartScheduler+0x138>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	4a17      	ldr	r2, [pc, #92]	; (8015988 <xPortStartScheduler+0x138>)
 801592c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015930:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015932:	4b15      	ldr	r3, [pc, #84]	; (8015988 <xPortStartScheduler+0x138>)
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	4a14      	ldr	r2, [pc, #80]	; (8015988 <xPortStartScheduler+0x138>)
 8015938:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801593c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801593e:	f000 f8dd 	bl	8015afc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015942:	4b12      	ldr	r3, [pc, #72]	; (801598c <xPortStartScheduler+0x13c>)
 8015944:	2200      	movs	r2, #0
 8015946:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015948:	f000 f8fc 	bl	8015b44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801594c:	4b10      	ldr	r3, [pc, #64]	; (8015990 <xPortStartScheduler+0x140>)
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	4a0f      	ldr	r2, [pc, #60]	; (8015990 <xPortStartScheduler+0x140>)
 8015952:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015956:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015958:	f7ff ff66 	bl	8015828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801595c:	f7fe ff72 	bl	8014844 <vTaskSwitchContext>
	prvTaskExitError();
 8015960:	f7ff ff22 	bl	80157a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015964:	2300      	movs	r3, #0
}
 8015966:	4618      	mov	r0, r3
 8015968:	3718      	adds	r7, #24
 801596a:	46bd      	mov	sp, r7
 801596c:	bd80      	pop	{r7, pc}
 801596e:	bf00      	nop
 8015970:	e000ed00 	.word	0xe000ed00
 8015974:	410fc271 	.word	0x410fc271
 8015978:	410fc270 	.word	0x410fc270
 801597c:	e000e400 	.word	0xe000e400
 8015980:	24002aac 	.word	0x24002aac
 8015984:	24002ab0 	.word	0x24002ab0
 8015988:	e000ed20 	.word	0xe000ed20
 801598c:	24000094 	.word	0x24000094
 8015990:	e000ef34 	.word	0xe000ef34

08015994 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015994:	b480      	push	{r7}
 8015996:	b083      	sub	sp, #12
 8015998:	af00      	add	r7, sp, #0
	__asm volatile
 801599a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801599e:	f383 8811 	msr	BASEPRI, r3
 80159a2:	f3bf 8f6f 	isb	sy
 80159a6:	f3bf 8f4f 	dsb	sy
 80159aa:	607b      	str	r3, [r7, #4]
}
 80159ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80159ae:	4b0f      	ldr	r3, [pc, #60]	; (80159ec <vPortEnterCritical+0x58>)
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	3301      	adds	r3, #1
 80159b4:	4a0d      	ldr	r2, [pc, #52]	; (80159ec <vPortEnterCritical+0x58>)
 80159b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80159b8:	4b0c      	ldr	r3, [pc, #48]	; (80159ec <vPortEnterCritical+0x58>)
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	2b01      	cmp	r3, #1
 80159be:	d10f      	bne.n	80159e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80159c0:	4b0b      	ldr	r3, [pc, #44]	; (80159f0 <vPortEnterCritical+0x5c>)
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	b2db      	uxtb	r3, r3
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d00a      	beq.n	80159e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80159ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159ce:	f383 8811 	msr	BASEPRI, r3
 80159d2:	f3bf 8f6f 	isb	sy
 80159d6:	f3bf 8f4f 	dsb	sy
 80159da:	603b      	str	r3, [r7, #0]
}
 80159dc:	bf00      	nop
 80159de:	e7fe      	b.n	80159de <vPortEnterCritical+0x4a>
	}
}
 80159e0:	bf00      	nop
 80159e2:	370c      	adds	r7, #12
 80159e4:	46bd      	mov	sp, r7
 80159e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ea:	4770      	bx	lr
 80159ec:	24000094 	.word	0x24000094
 80159f0:	e000ed04 	.word	0xe000ed04

080159f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80159f4:	b480      	push	{r7}
 80159f6:	b083      	sub	sp, #12
 80159f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80159fa:	4b12      	ldr	r3, [pc, #72]	; (8015a44 <vPortExitCritical+0x50>)
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d10a      	bne.n	8015a18 <vPortExitCritical+0x24>
	__asm volatile
 8015a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a06:	f383 8811 	msr	BASEPRI, r3
 8015a0a:	f3bf 8f6f 	isb	sy
 8015a0e:	f3bf 8f4f 	dsb	sy
 8015a12:	607b      	str	r3, [r7, #4]
}
 8015a14:	bf00      	nop
 8015a16:	e7fe      	b.n	8015a16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015a18:	4b0a      	ldr	r3, [pc, #40]	; (8015a44 <vPortExitCritical+0x50>)
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	3b01      	subs	r3, #1
 8015a1e:	4a09      	ldr	r2, [pc, #36]	; (8015a44 <vPortExitCritical+0x50>)
 8015a20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015a22:	4b08      	ldr	r3, [pc, #32]	; (8015a44 <vPortExitCritical+0x50>)
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d105      	bne.n	8015a36 <vPortExitCritical+0x42>
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015a2e:	683b      	ldr	r3, [r7, #0]
 8015a30:	f383 8811 	msr	BASEPRI, r3
}
 8015a34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015a36:	bf00      	nop
 8015a38:	370c      	adds	r7, #12
 8015a3a:	46bd      	mov	sp, r7
 8015a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a40:	4770      	bx	lr
 8015a42:	bf00      	nop
 8015a44:	24000094 	.word	0x24000094
	...

08015a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015a50:	f3ef 8009 	mrs	r0, PSP
 8015a54:	f3bf 8f6f 	isb	sy
 8015a58:	4b15      	ldr	r3, [pc, #84]	; (8015ab0 <pxCurrentTCBConst>)
 8015a5a:	681a      	ldr	r2, [r3, #0]
 8015a5c:	f01e 0f10 	tst.w	lr, #16
 8015a60:	bf08      	it	eq
 8015a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a6a:	6010      	str	r0, [r2, #0]
 8015a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015a70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015a74:	f380 8811 	msr	BASEPRI, r0
 8015a78:	f3bf 8f4f 	dsb	sy
 8015a7c:	f3bf 8f6f 	isb	sy
 8015a80:	f7fe fee0 	bl	8014844 <vTaskSwitchContext>
 8015a84:	f04f 0000 	mov.w	r0, #0
 8015a88:	f380 8811 	msr	BASEPRI, r0
 8015a8c:	bc09      	pop	{r0, r3}
 8015a8e:	6819      	ldr	r1, [r3, #0]
 8015a90:	6808      	ldr	r0, [r1, #0]
 8015a92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a96:	f01e 0f10 	tst.w	lr, #16
 8015a9a:	bf08      	it	eq
 8015a9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015aa0:	f380 8809 	msr	PSP, r0
 8015aa4:	f3bf 8f6f 	isb	sy
 8015aa8:	4770      	bx	lr
 8015aaa:	bf00      	nop
 8015aac:	f3af 8000 	nop.w

08015ab0 <pxCurrentTCBConst>:
 8015ab0:	24002480 	.word	0x24002480
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015ab4:	bf00      	nop
 8015ab6:	bf00      	nop

08015ab8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015ab8:	b580      	push	{r7, lr}
 8015aba:	b082      	sub	sp, #8
 8015abc:	af00      	add	r7, sp, #0
	__asm volatile
 8015abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ac2:	f383 8811 	msr	BASEPRI, r3
 8015ac6:	f3bf 8f6f 	isb	sy
 8015aca:	f3bf 8f4f 	dsb	sy
 8015ace:	607b      	str	r3, [r7, #4]
}
 8015ad0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015ad2:	f7fe fdf5 	bl	80146c0 <xTaskIncrementTick>
 8015ad6:	4603      	mov	r3, r0
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d003      	beq.n	8015ae4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015adc:	4b06      	ldr	r3, [pc, #24]	; (8015af8 <xPortSysTickHandler+0x40>)
 8015ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ae2:	601a      	str	r2, [r3, #0]
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015ae8:	683b      	ldr	r3, [r7, #0]
 8015aea:	f383 8811 	msr	BASEPRI, r3
}
 8015aee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015af0:	bf00      	nop
 8015af2:	3708      	adds	r7, #8
 8015af4:	46bd      	mov	sp, r7
 8015af6:	bd80      	pop	{r7, pc}
 8015af8:	e000ed04 	.word	0xe000ed04

08015afc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015afc:	b480      	push	{r7}
 8015afe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015b00:	4b0b      	ldr	r3, [pc, #44]	; (8015b30 <vPortSetupTimerInterrupt+0x34>)
 8015b02:	2200      	movs	r2, #0
 8015b04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015b06:	4b0b      	ldr	r3, [pc, #44]	; (8015b34 <vPortSetupTimerInterrupt+0x38>)
 8015b08:	2200      	movs	r2, #0
 8015b0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015b0c:	4b0a      	ldr	r3, [pc, #40]	; (8015b38 <vPortSetupTimerInterrupt+0x3c>)
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	4a0a      	ldr	r2, [pc, #40]	; (8015b3c <vPortSetupTimerInterrupt+0x40>)
 8015b12:	fba2 2303 	umull	r2, r3, r2, r3
 8015b16:	099b      	lsrs	r3, r3, #6
 8015b18:	4a09      	ldr	r2, [pc, #36]	; (8015b40 <vPortSetupTimerInterrupt+0x44>)
 8015b1a:	3b01      	subs	r3, #1
 8015b1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015b1e:	4b04      	ldr	r3, [pc, #16]	; (8015b30 <vPortSetupTimerInterrupt+0x34>)
 8015b20:	2207      	movs	r2, #7
 8015b22:	601a      	str	r2, [r3, #0]
}
 8015b24:	bf00      	nop
 8015b26:	46bd      	mov	sp, r7
 8015b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b2c:	4770      	bx	lr
 8015b2e:	bf00      	nop
 8015b30:	e000e010 	.word	0xe000e010
 8015b34:	e000e018 	.word	0xe000e018
 8015b38:	24000084 	.word	0x24000084
 8015b3c:	10624dd3 	.word	0x10624dd3
 8015b40:	e000e014 	.word	0xe000e014

08015b44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015b44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015b54 <vPortEnableVFP+0x10>
 8015b48:	6801      	ldr	r1, [r0, #0]
 8015b4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015b4e:	6001      	str	r1, [r0, #0]
 8015b50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015b52:	bf00      	nop
 8015b54:	e000ed88 	.word	0xe000ed88

08015b58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015b58:	b480      	push	{r7}
 8015b5a:	b085      	sub	sp, #20
 8015b5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015b5e:	f3ef 8305 	mrs	r3, IPSR
 8015b62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	2b0f      	cmp	r3, #15
 8015b68:	d914      	bls.n	8015b94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015b6a:	4a17      	ldr	r2, [pc, #92]	; (8015bc8 <vPortValidateInterruptPriority+0x70>)
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	4413      	add	r3, r2
 8015b70:	781b      	ldrb	r3, [r3, #0]
 8015b72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015b74:	4b15      	ldr	r3, [pc, #84]	; (8015bcc <vPortValidateInterruptPriority+0x74>)
 8015b76:	781b      	ldrb	r3, [r3, #0]
 8015b78:	7afa      	ldrb	r2, [r7, #11]
 8015b7a:	429a      	cmp	r2, r3
 8015b7c:	d20a      	bcs.n	8015b94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8015b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b82:	f383 8811 	msr	BASEPRI, r3
 8015b86:	f3bf 8f6f 	isb	sy
 8015b8a:	f3bf 8f4f 	dsb	sy
 8015b8e:	607b      	str	r3, [r7, #4]
}
 8015b90:	bf00      	nop
 8015b92:	e7fe      	b.n	8015b92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015b94:	4b0e      	ldr	r3, [pc, #56]	; (8015bd0 <vPortValidateInterruptPriority+0x78>)
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015b9c:	4b0d      	ldr	r3, [pc, #52]	; (8015bd4 <vPortValidateInterruptPriority+0x7c>)
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	429a      	cmp	r2, r3
 8015ba2:	d90a      	bls.n	8015bba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ba8:	f383 8811 	msr	BASEPRI, r3
 8015bac:	f3bf 8f6f 	isb	sy
 8015bb0:	f3bf 8f4f 	dsb	sy
 8015bb4:	603b      	str	r3, [r7, #0]
}
 8015bb6:	bf00      	nop
 8015bb8:	e7fe      	b.n	8015bb8 <vPortValidateInterruptPriority+0x60>
	}
 8015bba:	bf00      	nop
 8015bbc:	3714      	adds	r7, #20
 8015bbe:	46bd      	mov	sp, r7
 8015bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc4:	4770      	bx	lr
 8015bc6:	bf00      	nop
 8015bc8:	e000e3f0 	.word	0xe000e3f0
 8015bcc:	24002aac 	.word	0x24002aac
 8015bd0:	e000ed0c 	.word	0xe000ed0c
 8015bd4:	24002ab0 	.word	0x24002ab0

08015bd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	b08a      	sub	sp, #40	; 0x28
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015be0:	2300      	movs	r3, #0
 8015be2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015be4:	f7fe fcb0 	bl	8014548 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015be8:	4b5b      	ldr	r3, [pc, #364]	; (8015d58 <pvPortMalloc+0x180>)
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d101      	bne.n	8015bf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015bf0:	f000 f920 	bl	8015e34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015bf4:	4b59      	ldr	r3, [pc, #356]	; (8015d5c <pvPortMalloc+0x184>)
 8015bf6:	681a      	ldr	r2, [r3, #0]
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	4013      	ands	r3, r2
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	f040 8093 	bne.w	8015d28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d01d      	beq.n	8015c44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015c08:	2208      	movs	r2, #8
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	4413      	add	r3, r2
 8015c0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	f003 0307 	and.w	r3, r3, #7
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d014      	beq.n	8015c44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	f023 0307 	bic.w	r3, r3, #7
 8015c20:	3308      	adds	r3, #8
 8015c22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	f003 0307 	and.w	r3, r3, #7
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d00a      	beq.n	8015c44 <pvPortMalloc+0x6c>
	__asm volatile
 8015c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c32:	f383 8811 	msr	BASEPRI, r3
 8015c36:	f3bf 8f6f 	isb	sy
 8015c3a:	f3bf 8f4f 	dsb	sy
 8015c3e:	617b      	str	r3, [r7, #20]
}
 8015c40:	bf00      	nop
 8015c42:	e7fe      	b.n	8015c42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d06e      	beq.n	8015d28 <pvPortMalloc+0x150>
 8015c4a:	4b45      	ldr	r3, [pc, #276]	; (8015d60 <pvPortMalloc+0x188>)
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	687a      	ldr	r2, [r7, #4]
 8015c50:	429a      	cmp	r2, r3
 8015c52:	d869      	bhi.n	8015d28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015c54:	4b43      	ldr	r3, [pc, #268]	; (8015d64 <pvPortMalloc+0x18c>)
 8015c56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015c58:	4b42      	ldr	r3, [pc, #264]	; (8015d64 <pvPortMalloc+0x18c>)
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015c5e:	e004      	b.n	8015c6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c6c:	685b      	ldr	r3, [r3, #4]
 8015c6e:	687a      	ldr	r2, [r7, #4]
 8015c70:	429a      	cmp	r2, r3
 8015c72:	d903      	bls.n	8015c7c <pvPortMalloc+0xa4>
 8015c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d1f1      	bne.n	8015c60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015c7c:	4b36      	ldr	r3, [pc, #216]	; (8015d58 <pvPortMalloc+0x180>)
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c82:	429a      	cmp	r2, r3
 8015c84:	d050      	beq.n	8015d28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015c86:	6a3b      	ldr	r3, [r7, #32]
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	2208      	movs	r2, #8
 8015c8c:	4413      	add	r3, r2
 8015c8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c92:	681a      	ldr	r2, [r3, #0]
 8015c94:	6a3b      	ldr	r3, [r7, #32]
 8015c96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c9a:	685a      	ldr	r2, [r3, #4]
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	1ad2      	subs	r2, r2, r3
 8015ca0:	2308      	movs	r3, #8
 8015ca2:	005b      	lsls	r3, r3, #1
 8015ca4:	429a      	cmp	r2, r3
 8015ca6:	d91f      	bls.n	8015ce8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	4413      	add	r3, r2
 8015cae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015cb0:	69bb      	ldr	r3, [r7, #24]
 8015cb2:	f003 0307 	and.w	r3, r3, #7
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d00a      	beq.n	8015cd0 <pvPortMalloc+0xf8>
	__asm volatile
 8015cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cbe:	f383 8811 	msr	BASEPRI, r3
 8015cc2:	f3bf 8f6f 	isb	sy
 8015cc6:	f3bf 8f4f 	dsb	sy
 8015cca:	613b      	str	r3, [r7, #16]
}
 8015ccc:	bf00      	nop
 8015cce:	e7fe      	b.n	8015cce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cd2:	685a      	ldr	r2, [r3, #4]
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	1ad2      	subs	r2, r2, r3
 8015cd8:	69bb      	ldr	r3, [r7, #24]
 8015cda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cde:	687a      	ldr	r2, [r7, #4]
 8015ce0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015ce2:	69b8      	ldr	r0, [r7, #24]
 8015ce4:	f000 f908 	bl	8015ef8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015ce8:	4b1d      	ldr	r3, [pc, #116]	; (8015d60 <pvPortMalloc+0x188>)
 8015cea:	681a      	ldr	r2, [r3, #0]
 8015cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cee:	685b      	ldr	r3, [r3, #4]
 8015cf0:	1ad3      	subs	r3, r2, r3
 8015cf2:	4a1b      	ldr	r2, [pc, #108]	; (8015d60 <pvPortMalloc+0x188>)
 8015cf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015cf6:	4b1a      	ldr	r3, [pc, #104]	; (8015d60 <pvPortMalloc+0x188>)
 8015cf8:	681a      	ldr	r2, [r3, #0]
 8015cfa:	4b1b      	ldr	r3, [pc, #108]	; (8015d68 <pvPortMalloc+0x190>)
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	429a      	cmp	r2, r3
 8015d00:	d203      	bcs.n	8015d0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015d02:	4b17      	ldr	r3, [pc, #92]	; (8015d60 <pvPortMalloc+0x188>)
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	4a18      	ldr	r2, [pc, #96]	; (8015d68 <pvPortMalloc+0x190>)
 8015d08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d0c:	685a      	ldr	r2, [r3, #4]
 8015d0e:	4b13      	ldr	r3, [pc, #76]	; (8015d5c <pvPortMalloc+0x184>)
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	431a      	orrs	r2, r3
 8015d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d1a:	2200      	movs	r2, #0
 8015d1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015d1e:	4b13      	ldr	r3, [pc, #76]	; (8015d6c <pvPortMalloc+0x194>)
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	3301      	adds	r3, #1
 8015d24:	4a11      	ldr	r2, [pc, #68]	; (8015d6c <pvPortMalloc+0x194>)
 8015d26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015d28:	f7fe fc1c 	bl	8014564 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015d2c:	69fb      	ldr	r3, [r7, #28]
 8015d2e:	f003 0307 	and.w	r3, r3, #7
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d00a      	beq.n	8015d4c <pvPortMalloc+0x174>
	__asm volatile
 8015d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d3a:	f383 8811 	msr	BASEPRI, r3
 8015d3e:	f3bf 8f6f 	isb	sy
 8015d42:	f3bf 8f4f 	dsb	sy
 8015d46:	60fb      	str	r3, [r7, #12]
}
 8015d48:	bf00      	nop
 8015d4a:	e7fe      	b.n	8015d4a <pvPortMalloc+0x172>
	return pvReturn;
 8015d4c:	69fb      	ldr	r3, [r7, #28]
}
 8015d4e:	4618      	mov	r0, r3
 8015d50:	3728      	adds	r7, #40	; 0x28
 8015d52:	46bd      	mov	sp, r7
 8015d54:	bd80      	pop	{r7, pc}
 8015d56:	bf00      	nop
 8015d58:	240066bc 	.word	0x240066bc
 8015d5c:	240066d0 	.word	0x240066d0
 8015d60:	240066c0 	.word	0x240066c0
 8015d64:	240066b4 	.word	0x240066b4
 8015d68:	240066c4 	.word	0x240066c4
 8015d6c:	240066c8 	.word	0x240066c8

08015d70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015d70:	b580      	push	{r7, lr}
 8015d72:	b086      	sub	sp, #24
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d04d      	beq.n	8015e1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015d82:	2308      	movs	r3, #8
 8015d84:	425b      	negs	r3, r3
 8015d86:	697a      	ldr	r2, [r7, #20]
 8015d88:	4413      	add	r3, r2
 8015d8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015d8c:	697b      	ldr	r3, [r7, #20]
 8015d8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015d90:	693b      	ldr	r3, [r7, #16]
 8015d92:	685a      	ldr	r2, [r3, #4]
 8015d94:	4b24      	ldr	r3, [pc, #144]	; (8015e28 <vPortFree+0xb8>)
 8015d96:	681b      	ldr	r3, [r3, #0]
 8015d98:	4013      	ands	r3, r2
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d10a      	bne.n	8015db4 <vPortFree+0x44>
	__asm volatile
 8015d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015da2:	f383 8811 	msr	BASEPRI, r3
 8015da6:	f3bf 8f6f 	isb	sy
 8015daa:	f3bf 8f4f 	dsb	sy
 8015dae:	60fb      	str	r3, [r7, #12]
}
 8015db0:	bf00      	nop
 8015db2:	e7fe      	b.n	8015db2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015db4:	693b      	ldr	r3, [r7, #16]
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d00a      	beq.n	8015dd2 <vPortFree+0x62>
	__asm volatile
 8015dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dc0:	f383 8811 	msr	BASEPRI, r3
 8015dc4:	f3bf 8f6f 	isb	sy
 8015dc8:	f3bf 8f4f 	dsb	sy
 8015dcc:	60bb      	str	r3, [r7, #8]
}
 8015dce:	bf00      	nop
 8015dd0:	e7fe      	b.n	8015dd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015dd2:	693b      	ldr	r3, [r7, #16]
 8015dd4:	685a      	ldr	r2, [r3, #4]
 8015dd6:	4b14      	ldr	r3, [pc, #80]	; (8015e28 <vPortFree+0xb8>)
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	4013      	ands	r3, r2
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d01e      	beq.n	8015e1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015de0:	693b      	ldr	r3, [r7, #16]
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d11a      	bne.n	8015e1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015de8:	693b      	ldr	r3, [r7, #16]
 8015dea:	685a      	ldr	r2, [r3, #4]
 8015dec:	4b0e      	ldr	r3, [pc, #56]	; (8015e28 <vPortFree+0xb8>)
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	43db      	mvns	r3, r3
 8015df2:	401a      	ands	r2, r3
 8015df4:	693b      	ldr	r3, [r7, #16]
 8015df6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015df8:	f7fe fba6 	bl	8014548 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015dfc:	693b      	ldr	r3, [r7, #16]
 8015dfe:	685a      	ldr	r2, [r3, #4]
 8015e00:	4b0a      	ldr	r3, [pc, #40]	; (8015e2c <vPortFree+0xbc>)
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	4413      	add	r3, r2
 8015e06:	4a09      	ldr	r2, [pc, #36]	; (8015e2c <vPortFree+0xbc>)
 8015e08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015e0a:	6938      	ldr	r0, [r7, #16]
 8015e0c:	f000 f874 	bl	8015ef8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015e10:	4b07      	ldr	r3, [pc, #28]	; (8015e30 <vPortFree+0xc0>)
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	3301      	adds	r3, #1
 8015e16:	4a06      	ldr	r2, [pc, #24]	; (8015e30 <vPortFree+0xc0>)
 8015e18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015e1a:	f7fe fba3 	bl	8014564 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015e1e:	bf00      	nop
 8015e20:	3718      	adds	r7, #24
 8015e22:	46bd      	mov	sp, r7
 8015e24:	bd80      	pop	{r7, pc}
 8015e26:	bf00      	nop
 8015e28:	240066d0 	.word	0x240066d0
 8015e2c:	240066c0 	.word	0x240066c0
 8015e30:	240066cc 	.word	0x240066cc

08015e34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015e34:	b480      	push	{r7}
 8015e36:	b085      	sub	sp, #20
 8015e38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015e3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8015e3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015e40:	4b27      	ldr	r3, [pc, #156]	; (8015ee0 <prvHeapInit+0xac>)
 8015e42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	f003 0307 	and.w	r3, r3, #7
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d00c      	beq.n	8015e68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	3307      	adds	r3, #7
 8015e52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	f023 0307 	bic.w	r3, r3, #7
 8015e5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015e5c:	68ba      	ldr	r2, [r7, #8]
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	1ad3      	subs	r3, r2, r3
 8015e62:	4a1f      	ldr	r2, [pc, #124]	; (8015ee0 <prvHeapInit+0xac>)
 8015e64:	4413      	add	r3, r2
 8015e66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015e6c:	4a1d      	ldr	r2, [pc, #116]	; (8015ee4 <prvHeapInit+0xb0>)
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015e72:	4b1c      	ldr	r3, [pc, #112]	; (8015ee4 <prvHeapInit+0xb0>)
 8015e74:	2200      	movs	r2, #0
 8015e76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	68ba      	ldr	r2, [r7, #8]
 8015e7c:	4413      	add	r3, r2
 8015e7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015e80:	2208      	movs	r2, #8
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	1a9b      	subs	r3, r3, r2
 8015e86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	f023 0307 	bic.w	r3, r3, #7
 8015e8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	4a15      	ldr	r2, [pc, #84]	; (8015ee8 <prvHeapInit+0xb4>)
 8015e94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015e96:	4b14      	ldr	r3, [pc, #80]	; (8015ee8 <prvHeapInit+0xb4>)
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	2200      	movs	r2, #0
 8015e9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015e9e:	4b12      	ldr	r3, [pc, #72]	; (8015ee8 <prvHeapInit+0xb4>)
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015eaa:	683b      	ldr	r3, [r7, #0]
 8015eac:	68fa      	ldr	r2, [r7, #12]
 8015eae:	1ad2      	subs	r2, r2, r3
 8015eb0:	683b      	ldr	r3, [r7, #0]
 8015eb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015eb4:	4b0c      	ldr	r3, [pc, #48]	; (8015ee8 <prvHeapInit+0xb4>)
 8015eb6:	681a      	ldr	r2, [r3, #0]
 8015eb8:	683b      	ldr	r3, [r7, #0]
 8015eba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015ebc:	683b      	ldr	r3, [r7, #0]
 8015ebe:	685b      	ldr	r3, [r3, #4]
 8015ec0:	4a0a      	ldr	r2, [pc, #40]	; (8015eec <prvHeapInit+0xb8>)
 8015ec2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015ec4:	683b      	ldr	r3, [r7, #0]
 8015ec6:	685b      	ldr	r3, [r3, #4]
 8015ec8:	4a09      	ldr	r2, [pc, #36]	; (8015ef0 <prvHeapInit+0xbc>)
 8015eca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015ecc:	4b09      	ldr	r3, [pc, #36]	; (8015ef4 <prvHeapInit+0xc0>)
 8015ece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015ed2:	601a      	str	r2, [r3, #0]
}
 8015ed4:	bf00      	nop
 8015ed6:	3714      	adds	r7, #20
 8015ed8:	46bd      	mov	sp, r7
 8015eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ede:	4770      	bx	lr
 8015ee0:	24002ab4 	.word	0x24002ab4
 8015ee4:	240066b4 	.word	0x240066b4
 8015ee8:	240066bc 	.word	0x240066bc
 8015eec:	240066c4 	.word	0x240066c4
 8015ef0:	240066c0 	.word	0x240066c0
 8015ef4:	240066d0 	.word	0x240066d0

08015ef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015ef8:	b480      	push	{r7}
 8015efa:	b085      	sub	sp, #20
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015f00:	4b28      	ldr	r3, [pc, #160]	; (8015fa4 <prvInsertBlockIntoFreeList+0xac>)
 8015f02:	60fb      	str	r3, [r7, #12]
 8015f04:	e002      	b.n	8015f0c <prvInsertBlockIntoFreeList+0x14>
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	60fb      	str	r3, [r7, #12]
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	687a      	ldr	r2, [r7, #4]
 8015f12:	429a      	cmp	r2, r3
 8015f14:	d8f7      	bhi.n	8015f06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	685b      	ldr	r3, [r3, #4]
 8015f1e:	68ba      	ldr	r2, [r7, #8]
 8015f20:	4413      	add	r3, r2
 8015f22:	687a      	ldr	r2, [r7, #4]
 8015f24:	429a      	cmp	r2, r3
 8015f26:	d108      	bne.n	8015f3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	685a      	ldr	r2, [r3, #4]
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	685b      	ldr	r3, [r3, #4]
 8015f30:	441a      	add	r2, r3
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	685b      	ldr	r3, [r3, #4]
 8015f42:	68ba      	ldr	r2, [r7, #8]
 8015f44:	441a      	add	r2, r3
 8015f46:	68fb      	ldr	r3, [r7, #12]
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	429a      	cmp	r2, r3
 8015f4c:	d118      	bne.n	8015f80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	681a      	ldr	r2, [r3, #0]
 8015f52:	4b15      	ldr	r3, [pc, #84]	; (8015fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	429a      	cmp	r2, r3
 8015f58:	d00d      	beq.n	8015f76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	685a      	ldr	r2, [r3, #4]
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	685b      	ldr	r3, [r3, #4]
 8015f64:	441a      	add	r2, r3
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	681a      	ldr	r2, [r3, #0]
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	601a      	str	r2, [r3, #0]
 8015f74:	e008      	b.n	8015f88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015f76:	4b0c      	ldr	r3, [pc, #48]	; (8015fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8015f78:	681a      	ldr	r2, [r3, #0]
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	601a      	str	r2, [r3, #0]
 8015f7e:	e003      	b.n	8015f88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	681a      	ldr	r2, [r3, #0]
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015f88:	68fa      	ldr	r2, [r7, #12]
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	429a      	cmp	r2, r3
 8015f8e:	d002      	beq.n	8015f96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	687a      	ldr	r2, [r7, #4]
 8015f94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015f96:	bf00      	nop
 8015f98:	3714      	adds	r7, #20
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa0:	4770      	bx	lr
 8015fa2:	bf00      	nop
 8015fa4:	240066b4 	.word	0x240066b4
 8015fa8:	240066bc 	.word	0x240066bc

08015fac <__errno>:
 8015fac:	4b01      	ldr	r3, [pc, #4]	; (8015fb4 <__errno+0x8>)
 8015fae:	6818      	ldr	r0, [r3, #0]
 8015fb0:	4770      	bx	lr
 8015fb2:	bf00      	nop
 8015fb4:	24000098 	.word	0x24000098

08015fb8 <__libc_init_array>:
 8015fb8:	b570      	push	{r4, r5, r6, lr}
 8015fba:	4d0d      	ldr	r5, [pc, #52]	; (8015ff0 <__libc_init_array+0x38>)
 8015fbc:	4c0d      	ldr	r4, [pc, #52]	; (8015ff4 <__libc_init_array+0x3c>)
 8015fbe:	1b64      	subs	r4, r4, r5
 8015fc0:	10a4      	asrs	r4, r4, #2
 8015fc2:	2600      	movs	r6, #0
 8015fc4:	42a6      	cmp	r6, r4
 8015fc6:	d109      	bne.n	8015fdc <__libc_init_array+0x24>
 8015fc8:	4d0b      	ldr	r5, [pc, #44]	; (8015ff8 <__libc_init_array+0x40>)
 8015fca:	4c0c      	ldr	r4, [pc, #48]	; (8015ffc <__libc_init_array+0x44>)
 8015fcc:	f000 fd2c 	bl	8016a28 <_init>
 8015fd0:	1b64      	subs	r4, r4, r5
 8015fd2:	10a4      	asrs	r4, r4, #2
 8015fd4:	2600      	movs	r6, #0
 8015fd6:	42a6      	cmp	r6, r4
 8015fd8:	d105      	bne.n	8015fe6 <__libc_init_array+0x2e>
 8015fda:	bd70      	pop	{r4, r5, r6, pc}
 8015fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8015fe0:	4798      	blx	r3
 8015fe2:	3601      	adds	r6, #1
 8015fe4:	e7ee      	b.n	8015fc4 <__libc_init_array+0xc>
 8015fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8015fea:	4798      	blx	r3
 8015fec:	3601      	adds	r6, #1
 8015fee:	e7f2      	b.n	8015fd6 <__libc_init_array+0x1e>
 8015ff0:	08016ee0 	.word	0x08016ee0
 8015ff4:	08016ee0 	.word	0x08016ee0
 8015ff8:	08016ee0 	.word	0x08016ee0
 8015ffc:	08016ee4 	.word	0x08016ee4

08016000 <memcpy>:
 8016000:	440a      	add	r2, r1
 8016002:	4291      	cmp	r1, r2
 8016004:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016008:	d100      	bne.n	801600c <memcpy+0xc>
 801600a:	4770      	bx	lr
 801600c:	b510      	push	{r4, lr}
 801600e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016012:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016016:	4291      	cmp	r1, r2
 8016018:	d1f9      	bne.n	801600e <memcpy+0xe>
 801601a:	bd10      	pop	{r4, pc}

0801601c <memset>:
 801601c:	4402      	add	r2, r0
 801601e:	4603      	mov	r3, r0
 8016020:	4293      	cmp	r3, r2
 8016022:	d100      	bne.n	8016026 <memset+0xa>
 8016024:	4770      	bx	lr
 8016026:	f803 1b01 	strb.w	r1, [r3], #1
 801602a:	e7f9      	b.n	8016020 <memset+0x4>

0801602c <_puts_r>:
 801602c:	b570      	push	{r4, r5, r6, lr}
 801602e:	460e      	mov	r6, r1
 8016030:	4605      	mov	r5, r0
 8016032:	b118      	cbz	r0, 801603c <_puts_r+0x10>
 8016034:	6983      	ldr	r3, [r0, #24]
 8016036:	b90b      	cbnz	r3, 801603c <_puts_r+0x10>
 8016038:	f000 fa48 	bl	80164cc <__sinit>
 801603c:	69ab      	ldr	r3, [r5, #24]
 801603e:	68ac      	ldr	r4, [r5, #8]
 8016040:	b913      	cbnz	r3, 8016048 <_puts_r+0x1c>
 8016042:	4628      	mov	r0, r5
 8016044:	f000 fa42 	bl	80164cc <__sinit>
 8016048:	4b2c      	ldr	r3, [pc, #176]	; (80160fc <_puts_r+0xd0>)
 801604a:	429c      	cmp	r4, r3
 801604c:	d120      	bne.n	8016090 <_puts_r+0x64>
 801604e:	686c      	ldr	r4, [r5, #4]
 8016050:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016052:	07db      	lsls	r3, r3, #31
 8016054:	d405      	bmi.n	8016062 <_puts_r+0x36>
 8016056:	89a3      	ldrh	r3, [r4, #12]
 8016058:	0598      	lsls	r0, r3, #22
 801605a:	d402      	bmi.n	8016062 <_puts_r+0x36>
 801605c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801605e:	f000 fad3 	bl	8016608 <__retarget_lock_acquire_recursive>
 8016062:	89a3      	ldrh	r3, [r4, #12]
 8016064:	0719      	lsls	r1, r3, #28
 8016066:	d51d      	bpl.n	80160a4 <_puts_r+0x78>
 8016068:	6923      	ldr	r3, [r4, #16]
 801606a:	b1db      	cbz	r3, 80160a4 <_puts_r+0x78>
 801606c:	3e01      	subs	r6, #1
 801606e:	68a3      	ldr	r3, [r4, #8]
 8016070:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016074:	3b01      	subs	r3, #1
 8016076:	60a3      	str	r3, [r4, #8]
 8016078:	bb39      	cbnz	r1, 80160ca <_puts_r+0x9e>
 801607a:	2b00      	cmp	r3, #0
 801607c:	da38      	bge.n	80160f0 <_puts_r+0xc4>
 801607e:	4622      	mov	r2, r4
 8016080:	210a      	movs	r1, #10
 8016082:	4628      	mov	r0, r5
 8016084:	f000 f848 	bl	8016118 <__swbuf_r>
 8016088:	3001      	adds	r0, #1
 801608a:	d011      	beq.n	80160b0 <_puts_r+0x84>
 801608c:	250a      	movs	r5, #10
 801608e:	e011      	b.n	80160b4 <_puts_r+0x88>
 8016090:	4b1b      	ldr	r3, [pc, #108]	; (8016100 <_puts_r+0xd4>)
 8016092:	429c      	cmp	r4, r3
 8016094:	d101      	bne.n	801609a <_puts_r+0x6e>
 8016096:	68ac      	ldr	r4, [r5, #8]
 8016098:	e7da      	b.n	8016050 <_puts_r+0x24>
 801609a:	4b1a      	ldr	r3, [pc, #104]	; (8016104 <_puts_r+0xd8>)
 801609c:	429c      	cmp	r4, r3
 801609e:	bf08      	it	eq
 80160a0:	68ec      	ldreq	r4, [r5, #12]
 80160a2:	e7d5      	b.n	8016050 <_puts_r+0x24>
 80160a4:	4621      	mov	r1, r4
 80160a6:	4628      	mov	r0, r5
 80160a8:	f000 f888 	bl	80161bc <__swsetup_r>
 80160ac:	2800      	cmp	r0, #0
 80160ae:	d0dd      	beq.n	801606c <_puts_r+0x40>
 80160b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80160b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80160b6:	07da      	lsls	r2, r3, #31
 80160b8:	d405      	bmi.n	80160c6 <_puts_r+0x9a>
 80160ba:	89a3      	ldrh	r3, [r4, #12]
 80160bc:	059b      	lsls	r3, r3, #22
 80160be:	d402      	bmi.n	80160c6 <_puts_r+0x9a>
 80160c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80160c2:	f000 faa2 	bl	801660a <__retarget_lock_release_recursive>
 80160c6:	4628      	mov	r0, r5
 80160c8:	bd70      	pop	{r4, r5, r6, pc}
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	da04      	bge.n	80160d8 <_puts_r+0xac>
 80160ce:	69a2      	ldr	r2, [r4, #24]
 80160d0:	429a      	cmp	r2, r3
 80160d2:	dc06      	bgt.n	80160e2 <_puts_r+0xb6>
 80160d4:	290a      	cmp	r1, #10
 80160d6:	d004      	beq.n	80160e2 <_puts_r+0xb6>
 80160d8:	6823      	ldr	r3, [r4, #0]
 80160da:	1c5a      	adds	r2, r3, #1
 80160dc:	6022      	str	r2, [r4, #0]
 80160de:	7019      	strb	r1, [r3, #0]
 80160e0:	e7c5      	b.n	801606e <_puts_r+0x42>
 80160e2:	4622      	mov	r2, r4
 80160e4:	4628      	mov	r0, r5
 80160e6:	f000 f817 	bl	8016118 <__swbuf_r>
 80160ea:	3001      	adds	r0, #1
 80160ec:	d1bf      	bne.n	801606e <_puts_r+0x42>
 80160ee:	e7df      	b.n	80160b0 <_puts_r+0x84>
 80160f0:	6823      	ldr	r3, [r4, #0]
 80160f2:	250a      	movs	r5, #10
 80160f4:	1c5a      	adds	r2, r3, #1
 80160f6:	6022      	str	r2, [r4, #0]
 80160f8:	701d      	strb	r5, [r3, #0]
 80160fa:	e7db      	b.n	80160b4 <_puts_r+0x88>
 80160fc:	08016e98 	.word	0x08016e98
 8016100:	08016eb8 	.word	0x08016eb8
 8016104:	08016e78 	.word	0x08016e78

08016108 <puts>:
 8016108:	4b02      	ldr	r3, [pc, #8]	; (8016114 <puts+0xc>)
 801610a:	4601      	mov	r1, r0
 801610c:	6818      	ldr	r0, [r3, #0]
 801610e:	f7ff bf8d 	b.w	801602c <_puts_r>
 8016112:	bf00      	nop
 8016114:	24000098 	.word	0x24000098

08016118 <__swbuf_r>:
 8016118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801611a:	460e      	mov	r6, r1
 801611c:	4614      	mov	r4, r2
 801611e:	4605      	mov	r5, r0
 8016120:	b118      	cbz	r0, 801612a <__swbuf_r+0x12>
 8016122:	6983      	ldr	r3, [r0, #24]
 8016124:	b90b      	cbnz	r3, 801612a <__swbuf_r+0x12>
 8016126:	f000 f9d1 	bl	80164cc <__sinit>
 801612a:	4b21      	ldr	r3, [pc, #132]	; (80161b0 <__swbuf_r+0x98>)
 801612c:	429c      	cmp	r4, r3
 801612e:	d12b      	bne.n	8016188 <__swbuf_r+0x70>
 8016130:	686c      	ldr	r4, [r5, #4]
 8016132:	69a3      	ldr	r3, [r4, #24]
 8016134:	60a3      	str	r3, [r4, #8]
 8016136:	89a3      	ldrh	r3, [r4, #12]
 8016138:	071a      	lsls	r2, r3, #28
 801613a:	d52f      	bpl.n	801619c <__swbuf_r+0x84>
 801613c:	6923      	ldr	r3, [r4, #16]
 801613e:	b36b      	cbz	r3, 801619c <__swbuf_r+0x84>
 8016140:	6923      	ldr	r3, [r4, #16]
 8016142:	6820      	ldr	r0, [r4, #0]
 8016144:	1ac0      	subs	r0, r0, r3
 8016146:	6963      	ldr	r3, [r4, #20]
 8016148:	b2f6      	uxtb	r6, r6
 801614a:	4283      	cmp	r3, r0
 801614c:	4637      	mov	r7, r6
 801614e:	dc04      	bgt.n	801615a <__swbuf_r+0x42>
 8016150:	4621      	mov	r1, r4
 8016152:	4628      	mov	r0, r5
 8016154:	f000 f926 	bl	80163a4 <_fflush_r>
 8016158:	bb30      	cbnz	r0, 80161a8 <__swbuf_r+0x90>
 801615a:	68a3      	ldr	r3, [r4, #8]
 801615c:	3b01      	subs	r3, #1
 801615e:	60a3      	str	r3, [r4, #8]
 8016160:	6823      	ldr	r3, [r4, #0]
 8016162:	1c5a      	adds	r2, r3, #1
 8016164:	6022      	str	r2, [r4, #0]
 8016166:	701e      	strb	r6, [r3, #0]
 8016168:	6963      	ldr	r3, [r4, #20]
 801616a:	3001      	adds	r0, #1
 801616c:	4283      	cmp	r3, r0
 801616e:	d004      	beq.n	801617a <__swbuf_r+0x62>
 8016170:	89a3      	ldrh	r3, [r4, #12]
 8016172:	07db      	lsls	r3, r3, #31
 8016174:	d506      	bpl.n	8016184 <__swbuf_r+0x6c>
 8016176:	2e0a      	cmp	r6, #10
 8016178:	d104      	bne.n	8016184 <__swbuf_r+0x6c>
 801617a:	4621      	mov	r1, r4
 801617c:	4628      	mov	r0, r5
 801617e:	f000 f911 	bl	80163a4 <_fflush_r>
 8016182:	b988      	cbnz	r0, 80161a8 <__swbuf_r+0x90>
 8016184:	4638      	mov	r0, r7
 8016186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016188:	4b0a      	ldr	r3, [pc, #40]	; (80161b4 <__swbuf_r+0x9c>)
 801618a:	429c      	cmp	r4, r3
 801618c:	d101      	bne.n	8016192 <__swbuf_r+0x7a>
 801618e:	68ac      	ldr	r4, [r5, #8]
 8016190:	e7cf      	b.n	8016132 <__swbuf_r+0x1a>
 8016192:	4b09      	ldr	r3, [pc, #36]	; (80161b8 <__swbuf_r+0xa0>)
 8016194:	429c      	cmp	r4, r3
 8016196:	bf08      	it	eq
 8016198:	68ec      	ldreq	r4, [r5, #12]
 801619a:	e7ca      	b.n	8016132 <__swbuf_r+0x1a>
 801619c:	4621      	mov	r1, r4
 801619e:	4628      	mov	r0, r5
 80161a0:	f000 f80c 	bl	80161bc <__swsetup_r>
 80161a4:	2800      	cmp	r0, #0
 80161a6:	d0cb      	beq.n	8016140 <__swbuf_r+0x28>
 80161a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80161ac:	e7ea      	b.n	8016184 <__swbuf_r+0x6c>
 80161ae:	bf00      	nop
 80161b0:	08016e98 	.word	0x08016e98
 80161b4:	08016eb8 	.word	0x08016eb8
 80161b8:	08016e78 	.word	0x08016e78

080161bc <__swsetup_r>:
 80161bc:	4b32      	ldr	r3, [pc, #200]	; (8016288 <__swsetup_r+0xcc>)
 80161be:	b570      	push	{r4, r5, r6, lr}
 80161c0:	681d      	ldr	r5, [r3, #0]
 80161c2:	4606      	mov	r6, r0
 80161c4:	460c      	mov	r4, r1
 80161c6:	b125      	cbz	r5, 80161d2 <__swsetup_r+0x16>
 80161c8:	69ab      	ldr	r3, [r5, #24]
 80161ca:	b913      	cbnz	r3, 80161d2 <__swsetup_r+0x16>
 80161cc:	4628      	mov	r0, r5
 80161ce:	f000 f97d 	bl	80164cc <__sinit>
 80161d2:	4b2e      	ldr	r3, [pc, #184]	; (801628c <__swsetup_r+0xd0>)
 80161d4:	429c      	cmp	r4, r3
 80161d6:	d10f      	bne.n	80161f8 <__swsetup_r+0x3c>
 80161d8:	686c      	ldr	r4, [r5, #4]
 80161da:	89a3      	ldrh	r3, [r4, #12]
 80161dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80161e0:	0719      	lsls	r1, r3, #28
 80161e2:	d42c      	bmi.n	801623e <__swsetup_r+0x82>
 80161e4:	06dd      	lsls	r5, r3, #27
 80161e6:	d411      	bmi.n	801620c <__swsetup_r+0x50>
 80161e8:	2309      	movs	r3, #9
 80161ea:	6033      	str	r3, [r6, #0]
 80161ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80161f0:	81a3      	strh	r3, [r4, #12]
 80161f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80161f6:	e03e      	b.n	8016276 <__swsetup_r+0xba>
 80161f8:	4b25      	ldr	r3, [pc, #148]	; (8016290 <__swsetup_r+0xd4>)
 80161fa:	429c      	cmp	r4, r3
 80161fc:	d101      	bne.n	8016202 <__swsetup_r+0x46>
 80161fe:	68ac      	ldr	r4, [r5, #8]
 8016200:	e7eb      	b.n	80161da <__swsetup_r+0x1e>
 8016202:	4b24      	ldr	r3, [pc, #144]	; (8016294 <__swsetup_r+0xd8>)
 8016204:	429c      	cmp	r4, r3
 8016206:	bf08      	it	eq
 8016208:	68ec      	ldreq	r4, [r5, #12]
 801620a:	e7e6      	b.n	80161da <__swsetup_r+0x1e>
 801620c:	0758      	lsls	r0, r3, #29
 801620e:	d512      	bpl.n	8016236 <__swsetup_r+0x7a>
 8016210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016212:	b141      	cbz	r1, 8016226 <__swsetup_r+0x6a>
 8016214:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016218:	4299      	cmp	r1, r3
 801621a:	d002      	beq.n	8016222 <__swsetup_r+0x66>
 801621c:	4630      	mov	r0, r6
 801621e:	f000 fa5b 	bl	80166d8 <_free_r>
 8016222:	2300      	movs	r3, #0
 8016224:	6363      	str	r3, [r4, #52]	; 0x34
 8016226:	89a3      	ldrh	r3, [r4, #12]
 8016228:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801622c:	81a3      	strh	r3, [r4, #12]
 801622e:	2300      	movs	r3, #0
 8016230:	6063      	str	r3, [r4, #4]
 8016232:	6923      	ldr	r3, [r4, #16]
 8016234:	6023      	str	r3, [r4, #0]
 8016236:	89a3      	ldrh	r3, [r4, #12]
 8016238:	f043 0308 	orr.w	r3, r3, #8
 801623c:	81a3      	strh	r3, [r4, #12]
 801623e:	6923      	ldr	r3, [r4, #16]
 8016240:	b94b      	cbnz	r3, 8016256 <__swsetup_r+0x9a>
 8016242:	89a3      	ldrh	r3, [r4, #12]
 8016244:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801624c:	d003      	beq.n	8016256 <__swsetup_r+0x9a>
 801624e:	4621      	mov	r1, r4
 8016250:	4630      	mov	r0, r6
 8016252:	f000 fa01 	bl	8016658 <__smakebuf_r>
 8016256:	89a0      	ldrh	r0, [r4, #12]
 8016258:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801625c:	f010 0301 	ands.w	r3, r0, #1
 8016260:	d00a      	beq.n	8016278 <__swsetup_r+0xbc>
 8016262:	2300      	movs	r3, #0
 8016264:	60a3      	str	r3, [r4, #8]
 8016266:	6963      	ldr	r3, [r4, #20]
 8016268:	425b      	negs	r3, r3
 801626a:	61a3      	str	r3, [r4, #24]
 801626c:	6923      	ldr	r3, [r4, #16]
 801626e:	b943      	cbnz	r3, 8016282 <__swsetup_r+0xc6>
 8016270:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016274:	d1ba      	bne.n	80161ec <__swsetup_r+0x30>
 8016276:	bd70      	pop	{r4, r5, r6, pc}
 8016278:	0781      	lsls	r1, r0, #30
 801627a:	bf58      	it	pl
 801627c:	6963      	ldrpl	r3, [r4, #20]
 801627e:	60a3      	str	r3, [r4, #8]
 8016280:	e7f4      	b.n	801626c <__swsetup_r+0xb0>
 8016282:	2000      	movs	r0, #0
 8016284:	e7f7      	b.n	8016276 <__swsetup_r+0xba>
 8016286:	bf00      	nop
 8016288:	24000098 	.word	0x24000098
 801628c:	08016e98 	.word	0x08016e98
 8016290:	08016eb8 	.word	0x08016eb8
 8016294:	08016e78 	.word	0x08016e78

08016298 <__sflush_r>:
 8016298:	898a      	ldrh	r2, [r1, #12]
 801629a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801629e:	4605      	mov	r5, r0
 80162a0:	0710      	lsls	r0, r2, #28
 80162a2:	460c      	mov	r4, r1
 80162a4:	d458      	bmi.n	8016358 <__sflush_r+0xc0>
 80162a6:	684b      	ldr	r3, [r1, #4]
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	dc05      	bgt.n	80162b8 <__sflush_r+0x20>
 80162ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	dc02      	bgt.n	80162b8 <__sflush_r+0x20>
 80162b2:	2000      	movs	r0, #0
 80162b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80162ba:	2e00      	cmp	r6, #0
 80162bc:	d0f9      	beq.n	80162b2 <__sflush_r+0x1a>
 80162be:	2300      	movs	r3, #0
 80162c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80162c4:	682f      	ldr	r7, [r5, #0]
 80162c6:	602b      	str	r3, [r5, #0]
 80162c8:	d032      	beq.n	8016330 <__sflush_r+0x98>
 80162ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80162cc:	89a3      	ldrh	r3, [r4, #12]
 80162ce:	075a      	lsls	r2, r3, #29
 80162d0:	d505      	bpl.n	80162de <__sflush_r+0x46>
 80162d2:	6863      	ldr	r3, [r4, #4]
 80162d4:	1ac0      	subs	r0, r0, r3
 80162d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80162d8:	b10b      	cbz	r3, 80162de <__sflush_r+0x46>
 80162da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80162dc:	1ac0      	subs	r0, r0, r3
 80162de:	2300      	movs	r3, #0
 80162e0:	4602      	mov	r2, r0
 80162e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80162e4:	6a21      	ldr	r1, [r4, #32]
 80162e6:	4628      	mov	r0, r5
 80162e8:	47b0      	blx	r6
 80162ea:	1c43      	adds	r3, r0, #1
 80162ec:	89a3      	ldrh	r3, [r4, #12]
 80162ee:	d106      	bne.n	80162fe <__sflush_r+0x66>
 80162f0:	6829      	ldr	r1, [r5, #0]
 80162f2:	291d      	cmp	r1, #29
 80162f4:	d82c      	bhi.n	8016350 <__sflush_r+0xb8>
 80162f6:	4a2a      	ldr	r2, [pc, #168]	; (80163a0 <__sflush_r+0x108>)
 80162f8:	40ca      	lsrs	r2, r1
 80162fa:	07d6      	lsls	r6, r2, #31
 80162fc:	d528      	bpl.n	8016350 <__sflush_r+0xb8>
 80162fe:	2200      	movs	r2, #0
 8016300:	6062      	str	r2, [r4, #4]
 8016302:	04d9      	lsls	r1, r3, #19
 8016304:	6922      	ldr	r2, [r4, #16]
 8016306:	6022      	str	r2, [r4, #0]
 8016308:	d504      	bpl.n	8016314 <__sflush_r+0x7c>
 801630a:	1c42      	adds	r2, r0, #1
 801630c:	d101      	bne.n	8016312 <__sflush_r+0x7a>
 801630e:	682b      	ldr	r3, [r5, #0]
 8016310:	b903      	cbnz	r3, 8016314 <__sflush_r+0x7c>
 8016312:	6560      	str	r0, [r4, #84]	; 0x54
 8016314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016316:	602f      	str	r7, [r5, #0]
 8016318:	2900      	cmp	r1, #0
 801631a:	d0ca      	beq.n	80162b2 <__sflush_r+0x1a>
 801631c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016320:	4299      	cmp	r1, r3
 8016322:	d002      	beq.n	801632a <__sflush_r+0x92>
 8016324:	4628      	mov	r0, r5
 8016326:	f000 f9d7 	bl	80166d8 <_free_r>
 801632a:	2000      	movs	r0, #0
 801632c:	6360      	str	r0, [r4, #52]	; 0x34
 801632e:	e7c1      	b.n	80162b4 <__sflush_r+0x1c>
 8016330:	6a21      	ldr	r1, [r4, #32]
 8016332:	2301      	movs	r3, #1
 8016334:	4628      	mov	r0, r5
 8016336:	47b0      	blx	r6
 8016338:	1c41      	adds	r1, r0, #1
 801633a:	d1c7      	bne.n	80162cc <__sflush_r+0x34>
 801633c:	682b      	ldr	r3, [r5, #0]
 801633e:	2b00      	cmp	r3, #0
 8016340:	d0c4      	beq.n	80162cc <__sflush_r+0x34>
 8016342:	2b1d      	cmp	r3, #29
 8016344:	d001      	beq.n	801634a <__sflush_r+0xb2>
 8016346:	2b16      	cmp	r3, #22
 8016348:	d101      	bne.n	801634e <__sflush_r+0xb6>
 801634a:	602f      	str	r7, [r5, #0]
 801634c:	e7b1      	b.n	80162b2 <__sflush_r+0x1a>
 801634e:	89a3      	ldrh	r3, [r4, #12]
 8016350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016354:	81a3      	strh	r3, [r4, #12]
 8016356:	e7ad      	b.n	80162b4 <__sflush_r+0x1c>
 8016358:	690f      	ldr	r7, [r1, #16]
 801635a:	2f00      	cmp	r7, #0
 801635c:	d0a9      	beq.n	80162b2 <__sflush_r+0x1a>
 801635e:	0793      	lsls	r3, r2, #30
 8016360:	680e      	ldr	r6, [r1, #0]
 8016362:	bf08      	it	eq
 8016364:	694b      	ldreq	r3, [r1, #20]
 8016366:	600f      	str	r7, [r1, #0]
 8016368:	bf18      	it	ne
 801636a:	2300      	movne	r3, #0
 801636c:	eba6 0807 	sub.w	r8, r6, r7
 8016370:	608b      	str	r3, [r1, #8]
 8016372:	f1b8 0f00 	cmp.w	r8, #0
 8016376:	dd9c      	ble.n	80162b2 <__sflush_r+0x1a>
 8016378:	6a21      	ldr	r1, [r4, #32]
 801637a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801637c:	4643      	mov	r3, r8
 801637e:	463a      	mov	r2, r7
 8016380:	4628      	mov	r0, r5
 8016382:	47b0      	blx	r6
 8016384:	2800      	cmp	r0, #0
 8016386:	dc06      	bgt.n	8016396 <__sflush_r+0xfe>
 8016388:	89a3      	ldrh	r3, [r4, #12]
 801638a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801638e:	81a3      	strh	r3, [r4, #12]
 8016390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016394:	e78e      	b.n	80162b4 <__sflush_r+0x1c>
 8016396:	4407      	add	r7, r0
 8016398:	eba8 0800 	sub.w	r8, r8, r0
 801639c:	e7e9      	b.n	8016372 <__sflush_r+0xda>
 801639e:	bf00      	nop
 80163a0:	20400001 	.word	0x20400001

080163a4 <_fflush_r>:
 80163a4:	b538      	push	{r3, r4, r5, lr}
 80163a6:	690b      	ldr	r3, [r1, #16]
 80163a8:	4605      	mov	r5, r0
 80163aa:	460c      	mov	r4, r1
 80163ac:	b913      	cbnz	r3, 80163b4 <_fflush_r+0x10>
 80163ae:	2500      	movs	r5, #0
 80163b0:	4628      	mov	r0, r5
 80163b2:	bd38      	pop	{r3, r4, r5, pc}
 80163b4:	b118      	cbz	r0, 80163be <_fflush_r+0x1a>
 80163b6:	6983      	ldr	r3, [r0, #24]
 80163b8:	b90b      	cbnz	r3, 80163be <_fflush_r+0x1a>
 80163ba:	f000 f887 	bl	80164cc <__sinit>
 80163be:	4b14      	ldr	r3, [pc, #80]	; (8016410 <_fflush_r+0x6c>)
 80163c0:	429c      	cmp	r4, r3
 80163c2:	d11b      	bne.n	80163fc <_fflush_r+0x58>
 80163c4:	686c      	ldr	r4, [r5, #4]
 80163c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d0ef      	beq.n	80163ae <_fflush_r+0xa>
 80163ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80163d0:	07d0      	lsls	r0, r2, #31
 80163d2:	d404      	bmi.n	80163de <_fflush_r+0x3a>
 80163d4:	0599      	lsls	r1, r3, #22
 80163d6:	d402      	bmi.n	80163de <_fflush_r+0x3a>
 80163d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80163da:	f000 f915 	bl	8016608 <__retarget_lock_acquire_recursive>
 80163de:	4628      	mov	r0, r5
 80163e0:	4621      	mov	r1, r4
 80163e2:	f7ff ff59 	bl	8016298 <__sflush_r>
 80163e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80163e8:	07da      	lsls	r2, r3, #31
 80163ea:	4605      	mov	r5, r0
 80163ec:	d4e0      	bmi.n	80163b0 <_fflush_r+0xc>
 80163ee:	89a3      	ldrh	r3, [r4, #12]
 80163f0:	059b      	lsls	r3, r3, #22
 80163f2:	d4dd      	bmi.n	80163b0 <_fflush_r+0xc>
 80163f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80163f6:	f000 f908 	bl	801660a <__retarget_lock_release_recursive>
 80163fa:	e7d9      	b.n	80163b0 <_fflush_r+0xc>
 80163fc:	4b05      	ldr	r3, [pc, #20]	; (8016414 <_fflush_r+0x70>)
 80163fe:	429c      	cmp	r4, r3
 8016400:	d101      	bne.n	8016406 <_fflush_r+0x62>
 8016402:	68ac      	ldr	r4, [r5, #8]
 8016404:	e7df      	b.n	80163c6 <_fflush_r+0x22>
 8016406:	4b04      	ldr	r3, [pc, #16]	; (8016418 <_fflush_r+0x74>)
 8016408:	429c      	cmp	r4, r3
 801640a:	bf08      	it	eq
 801640c:	68ec      	ldreq	r4, [r5, #12]
 801640e:	e7da      	b.n	80163c6 <_fflush_r+0x22>
 8016410:	08016e98 	.word	0x08016e98
 8016414:	08016eb8 	.word	0x08016eb8
 8016418:	08016e78 	.word	0x08016e78

0801641c <std>:
 801641c:	2300      	movs	r3, #0
 801641e:	b510      	push	{r4, lr}
 8016420:	4604      	mov	r4, r0
 8016422:	e9c0 3300 	strd	r3, r3, [r0]
 8016426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801642a:	6083      	str	r3, [r0, #8]
 801642c:	8181      	strh	r1, [r0, #12]
 801642e:	6643      	str	r3, [r0, #100]	; 0x64
 8016430:	81c2      	strh	r2, [r0, #14]
 8016432:	6183      	str	r3, [r0, #24]
 8016434:	4619      	mov	r1, r3
 8016436:	2208      	movs	r2, #8
 8016438:	305c      	adds	r0, #92	; 0x5c
 801643a:	f7ff fdef 	bl	801601c <memset>
 801643e:	4b05      	ldr	r3, [pc, #20]	; (8016454 <std+0x38>)
 8016440:	6263      	str	r3, [r4, #36]	; 0x24
 8016442:	4b05      	ldr	r3, [pc, #20]	; (8016458 <std+0x3c>)
 8016444:	62a3      	str	r3, [r4, #40]	; 0x28
 8016446:	4b05      	ldr	r3, [pc, #20]	; (801645c <std+0x40>)
 8016448:	62e3      	str	r3, [r4, #44]	; 0x2c
 801644a:	4b05      	ldr	r3, [pc, #20]	; (8016460 <std+0x44>)
 801644c:	6224      	str	r4, [r4, #32]
 801644e:	6323      	str	r3, [r4, #48]	; 0x30
 8016450:	bd10      	pop	{r4, pc}
 8016452:	bf00      	nop
 8016454:	080168b9 	.word	0x080168b9
 8016458:	080168db 	.word	0x080168db
 801645c:	08016913 	.word	0x08016913
 8016460:	08016937 	.word	0x08016937

08016464 <_cleanup_r>:
 8016464:	4901      	ldr	r1, [pc, #4]	; (801646c <_cleanup_r+0x8>)
 8016466:	f000 b8af 	b.w	80165c8 <_fwalk_reent>
 801646a:	bf00      	nop
 801646c:	080163a5 	.word	0x080163a5

08016470 <__sfmoreglue>:
 8016470:	b570      	push	{r4, r5, r6, lr}
 8016472:	2268      	movs	r2, #104	; 0x68
 8016474:	1e4d      	subs	r5, r1, #1
 8016476:	4355      	muls	r5, r2
 8016478:	460e      	mov	r6, r1
 801647a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801647e:	f000 f997 	bl	80167b0 <_malloc_r>
 8016482:	4604      	mov	r4, r0
 8016484:	b140      	cbz	r0, 8016498 <__sfmoreglue+0x28>
 8016486:	2100      	movs	r1, #0
 8016488:	e9c0 1600 	strd	r1, r6, [r0]
 801648c:	300c      	adds	r0, #12
 801648e:	60a0      	str	r0, [r4, #8]
 8016490:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016494:	f7ff fdc2 	bl	801601c <memset>
 8016498:	4620      	mov	r0, r4
 801649a:	bd70      	pop	{r4, r5, r6, pc}

0801649c <__sfp_lock_acquire>:
 801649c:	4801      	ldr	r0, [pc, #4]	; (80164a4 <__sfp_lock_acquire+0x8>)
 801649e:	f000 b8b3 	b.w	8016608 <__retarget_lock_acquire_recursive>
 80164a2:	bf00      	nop
 80164a4:	240066d5 	.word	0x240066d5

080164a8 <__sfp_lock_release>:
 80164a8:	4801      	ldr	r0, [pc, #4]	; (80164b0 <__sfp_lock_release+0x8>)
 80164aa:	f000 b8ae 	b.w	801660a <__retarget_lock_release_recursive>
 80164ae:	bf00      	nop
 80164b0:	240066d5 	.word	0x240066d5

080164b4 <__sinit_lock_acquire>:
 80164b4:	4801      	ldr	r0, [pc, #4]	; (80164bc <__sinit_lock_acquire+0x8>)
 80164b6:	f000 b8a7 	b.w	8016608 <__retarget_lock_acquire_recursive>
 80164ba:	bf00      	nop
 80164bc:	240066d6 	.word	0x240066d6

080164c0 <__sinit_lock_release>:
 80164c0:	4801      	ldr	r0, [pc, #4]	; (80164c8 <__sinit_lock_release+0x8>)
 80164c2:	f000 b8a2 	b.w	801660a <__retarget_lock_release_recursive>
 80164c6:	bf00      	nop
 80164c8:	240066d6 	.word	0x240066d6

080164cc <__sinit>:
 80164cc:	b510      	push	{r4, lr}
 80164ce:	4604      	mov	r4, r0
 80164d0:	f7ff fff0 	bl	80164b4 <__sinit_lock_acquire>
 80164d4:	69a3      	ldr	r3, [r4, #24]
 80164d6:	b11b      	cbz	r3, 80164e0 <__sinit+0x14>
 80164d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80164dc:	f7ff bff0 	b.w	80164c0 <__sinit_lock_release>
 80164e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80164e4:	6523      	str	r3, [r4, #80]	; 0x50
 80164e6:	4b13      	ldr	r3, [pc, #76]	; (8016534 <__sinit+0x68>)
 80164e8:	4a13      	ldr	r2, [pc, #76]	; (8016538 <__sinit+0x6c>)
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80164ee:	42a3      	cmp	r3, r4
 80164f0:	bf04      	itt	eq
 80164f2:	2301      	moveq	r3, #1
 80164f4:	61a3      	streq	r3, [r4, #24]
 80164f6:	4620      	mov	r0, r4
 80164f8:	f000 f820 	bl	801653c <__sfp>
 80164fc:	6060      	str	r0, [r4, #4]
 80164fe:	4620      	mov	r0, r4
 8016500:	f000 f81c 	bl	801653c <__sfp>
 8016504:	60a0      	str	r0, [r4, #8]
 8016506:	4620      	mov	r0, r4
 8016508:	f000 f818 	bl	801653c <__sfp>
 801650c:	2200      	movs	r2, #0
 801650e:	60e0      	str	r0, [r4, #12]
 8016510:	2104      	movs	r1, #4
 8016512:	6860      	ldr	r0, [r4, #4]
 8016514:	f7ff ff82 	bl	801641c <std>
 8016518:	68a0      	ldr	r0, [r4, #8]
 801651a:	2201      	movs	r2, #1
 801651c:	2109      	movs	r1, #9
 801651e:	f7ff ff7d 	bl	801641c <std>
 8016522:	68e0      	ldr	r0, [r4, #12]
 8016524:	2202      	movs	r2, #2
 8016526:	2112      	movs	r1, #18
 8016528:	f7ff ff78 	bl	801641c <std>
 801652c:	2301      	movs	r3, #1
 801652e:	61a3      	str	r3, [r4, #24]
 8016530:	e7d2      	b.n	80164d8 <__sinit+0xc>
 8016532:	bf00      	nop
 8016534:	08016e74 	.word	0x08016e74
 8016538:	08016465 	.word	0x08016465

0801653c <__sfp>:
 801653c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801653e:	4607      	mov	r7, r0
 8016540:	f7ff ffac 	bl	801649c <__sfp_lock_acquire>
 8016544:	4b1e      	ldr	r3, [pc, #120]	; (80165c0 <__sfp+0x84>)
 8016546:	681e      	ldr	r6, [r3, #0]
 8016548:	69b3      	ldr	r3, [r6, #24]
 801654a:	b913      	cbnz	r3, 8016552 <__sfp+0x16>
 801654c:	4630      	mov	r0, r6
 801654e:	f7ff ffbd 	bl	80164cc <__sinit>
 8016552:	3648      	adds	r6, #72	; 0x48
 8016554:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016558:	3b01      	subs	r3, #1
 801655a:	d503      	bpl.n	8016564 <__sfp+0x28>
 801655c:	6833      	ldr	r3, [r6, #0]
 801655e:	b30b      	cbz	r3, 80165a4 <__sfp+0x68>
 8016560:	6836      	ldr	r6, [r6, #0]
 8016562:	e7f7      	b.n	8016554 <__sfp+0x18>
 8016564:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016568:	b9d5      	cbnz	r5, 80165a0 <__sfp+0x64>
 801656a:	4b16      	ldr	r3, [pc, #88]	; (80165c4 <__sfp+0x88>)
 801656c:	60e3      	str	r3, [r4, #12]
 801656e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016572:	6665      	str	r5, [r4, #100]	; 0x64
 8016574:	f000 f847 	bl	8016606 <__retarget_lock_init_recursive>
 8016578:	f7ff ff96 	bl	80164a8 <__sfp_lock_release>
 801657c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016580:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016584:	6025      	str	r5, [r4, #0]
 8016586:	61a5      	str	r5, [r4, #24]
 8016588:	2208      	movs	r2, #8
 801658a:	4629      	mov	r1, r5
 801658c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016590:	f7ff fd44 	bl	801601c <memset>
 8016594:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016598:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801659c:	4620      	mov	r0, r4
 801659e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80165a0:	3468      	adds	r4, #104	; 0x68
 80165a2:	e7d9      	b.n	8016558 <__sfp+0x1c>
 80165a4:	2104      	movs	r1, #4
 80165a6:	4638      	mov	r0, r7
 80165a8:	f7ff ff62 	bl	8016470 <__sfmoreglue>
 80165ac:	4604      	mov	r4, r0
 80165ae:	6030      	str	r0, [r6, #0]
 80165b0:	2800      	cmp	r0, #0
 80165b2:	d1d5      	bne.n	8016560 <__sfp+0x24>
 80165b4:	f7ff ff78 	bl	80164a8 <__sfp_lock_release>
 80165b8:	230c      	movs	r3, #12
 80165ba:	603b      	str	r3, [r7, #0]
 80165bc:	e7ee      	b.n	801659c <__sfp+0x60>
 80165be:	bf00      	nop
 80165c0:	08016e74 	.word	0x08016e74
 80165c4:	ffff0001 	.word	0xffff0001

080165c8 <_fwalk_reent>:
 80165c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80165cc:	4606      	mov	r6, r0
 80165ce:	4688      	mov	r8, r1
 80165d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80165d4:	2700      	movs	r7, #0
 80165d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80165da:	f1b9 0901 	subs.w	r9, r9, #1
 80165de:	d505      	bpl.n	80165ec <_fwalk_reent+0x24>
 80165e0:	6824      	ldr	r4, [r4, #0]
 80165e2:	2c00      	cmp	r4, #0
 80165e4:	d1f7      	bne.n	80165d6 <_fwalk_reent+0xe>
 80165e6:	4638      	mov	r0, r7
 80165e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165ec:	89ab      	ldrh	r3, [r5, #12]
 80165ee:	2b01      	cmp	r3, #1
 80165f0:	d907      	bls.n	8016602 <_fwalk_reent+0x3a>
 80165f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80165f6:	3301      	adds	r3, #1
 80165f8:	d003      	beq.n	8016602 <_fwalk_reent+0x3a>
 80165fa:	4629      	mov	r1, r5
 80165fc:	4630      	mov	r0, r6
 80165fe:	47c0      	blx	r8
 8016600:	4307      	orrs	r7, r0
 8016602:	3568      	adds	r5, #104	; 0x68
 8016604:	e7e9      	b.n	80165da <_fwalk_reent+0x12>

08016606 <__retarget_lock_init_recursive>:
 8016606:	4770      	bx	lr

08016608 <__retarget_lock_acquire_recursive>:
 8016608:	4770      	bx	lr

0801660a <__retarget_lock_release_recursive>:
 801660a:	4770      	bx	lr

0801660c <__swhatbuf_r>:
 801660c:	b570      	push	{r4, r5, r6, lr}
 801660e:	460e      	mov	r6, r1
 8016610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016614:	2900      	cmp	r1, #0
 8016616:	b096      	sub	sp, #88	; 0x58
 8016618:	4614      	mov	r4, r2
 801661a:	461d      	mov	r5, r3
 801661c:	da08      	bge.n	8016630 <__swhatbuf_r+0x24>
 801661e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016622:	2200      	movs	r2, #0
 8016624:	602a      	str	r2, [r5, #0]
 8016626:	061a      	lsls	r2, r3, #24
 8016628:	d410      	bmi.n	801664c <__swhatbuf_r+0x40>
 801662a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801662e:	e00e      	b.n	801664e <__swhatbuf_r+0x42>
 8016630:	466a      	mov	r2, sp
 8016632:	f000 f9a7 	bl	8016984 <_fstat_r>
 8016636:	2800      	cmp	r0, #0
 8016638:	dbf1      	blt.n	801661e <__swhatbuf_r+0x12>
 801663a:	9a01      	ldr	r2, [sp, #4]
 801663c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016640:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016644:	425a      	negs	r2, r3
 8016646:	415a      	adcs	r2, r3
 8016648:	602a      	str	r2, [r5, #0]
 801664a:	e7ee      	b.n	801662a <__swhatbuf_r+0x1e>
 801664c:	2340      	movs	r3, #64	; 0x40
 801664e:	2000      	movs	r0, #0
 8016650:	6023      	str	r3, [r4, #0]
 8016652:	b016      	add	sp, #88	; 0x58
 8016654:	bd70      	pop	{r4, r5, r6, pc}
	...

08016658 <__smakebuf_r>:
 8016658:	898b      	ldrh	r3, [r1, #12]
 801665a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801665c:	079d      	lsls	r5, r3, #30
 801665e:	4606      	mov	r6, r0
 8016660:	460c      	mov	r4, r1
 8016662:	d507      	bpl.n	8016674 <__smakebuf_r+0x1c>
 8016664:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016668:	6023      	str	r3, [r4, #0]
 801666a:	6123      	str	r3, [r4, #16]
 801666c:	2301      	movs	r3, #1
 801666e:	6163      	str	r3, [r4, #20]
 8016670:	b002      	add	sp, #8
 8016672:	bd70      	pop	{r4, r5, r6, pc}
 8016674:	ab01      	add	r3, sp, #4
 8016676:	466a      	mov	r2, sp
 8016678:	f7ff ffc8 	bl	801660c <__swhatbuf_r>
 801667c:	9900      	ldr	r1, [sp, #0]
 801667e:	4605      	mov	r5, r0
 8016680:	4630      	mov	r0, r6
 8016682:	f000 f895 	bl	80167b0 <_malloc_r>
 8016686:	b948      	cbnz	r0, 801669c <__smakebuf_r+0x44>
 8016688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801668c:	059a      	lsls	r2, r3, #22
 801668e:	d4ef      	bmi.n	8016670 <__smakebuf_r+0x18>
 8016690:	f023 0303 	bic.w	r3, r3, #3
 8016694:	f043 0302 	orr.w	r3, r3, #2
 8016698:	81a3      	strh	r3, [r4, #12]
 801669a:	e7e3      	b.n	8016664 <__smakebuf_r+0xc>
 801669c:	4b0d      	ldr	r3, [pc, #52]	; (80166d4 <__smakebuf_r+0x7c>)
 801669e:	62b3      	str	r3, [r6, #40]	; 0x28
 80166a0:	89a3      	ldrh	r3, [r4, #12]
 80166a2:	6020      	str	r0, [r4, #0]
 80166a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80166a8:	81a3      	strh	r3, [r4, #12]
 80166aa:	9b00      	ldr	r3, [sp, #0]
 80166ac:	6163      	str	r3, [r4, #20]
 80166ae:	9b01      	ldr	r3, [sp, #4]
 80166b0:	6120      	str	r0, [r4, #16]
 80166b2:	b15b      	cbz	r3, 80166cc <__smakebuf_r+0x74>
 80166b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80166b8:	4630      	mov	r0, r6
 80166ba:	f000 f975 	bl	80169a8 <_isatty_r>
 80166be:	b128      	cbz	r0, 80166cc <__smakebuf_r+0x74>
 80166c0:	89a3      	ldrh	r3, [r4, #12]
 80166c2:	f023 0303 	bic.w	r3, r3, #3
 80166c6:	f043 0301 	orr.w	r3, r3, #1
 80166ca:	81a3      	strh	r3, [r4, #12]
 80166cc:	89a0      	ldrh	r0, [r4, #12]
 80166ce:	4305      	orrs	r5, r0
 80166d0:	81a5      	strh	r5, [r4, #12]
 80166d2:	e7cd      	b.n	8016670 <__smakebuf_r+0x18>
 80166d4:	08016465 	.word	0x08016465

080166d8 <_free_r>:
 80166d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80166da:	2900      	cmp	r1, #0
 80166dc:	d044      	beq.n	8016768 <_free_r+0x90>
 80166de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80166e2:	9001      	str	r0, [sp, #4]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	f1a1 0404 	sub.w	r4, r1, #4
 80166ea:	bfb8      	it	lt
 80166ec:	18e4      	addlt	r4, r4, r3
 80166ee:	f000 f97d 	bl	80169ec <__malloc_lock>
 80166f2:	4a1e      	ldr	r2, [pc, #120]	; (801676c <_free_r+0x94>)
 80166f4:	9801      	ldr	r0, [sp, #4]
 80166f6:	6813      	ldr	r3, [r2, #0]
 80166f8:	b933      	cbnz	r3, 8016708 <_free_r+0x30>
 80166fa:	6063      	str	r3, [r4, #4]
 80166fc:	6014      	str	r4, [r2, #0]
 80166fe:	b003      	add	sp, #12
 8016700:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016704:	f000 b978 	b.w	80169f8 <__malloc_unlock>
 8016708:	42a3      	cmp	r3, r4
 801670a:	d908      	bls.n	801671e <_free_r+0x46>
 801670c:	6825      	ldr	r5, [r4, #0]
 801670e:	1961      	adds	r1, r4, r5
 8016710:	428b      	cmp	r3, r1
 8016712:	bf01      	itttt	eq
 8016714:	6819      	ldreq	r1, [r3, #0]
 8016716:	685b      	ldreq	r3, [r3, #4]
 8016718:	1949      	addeq	r1, r1, r5
 801671a:	6021      	streq	r1, [r4, #0]
 801671c:	e7ed      	b.n	80166fa <_free_r+0x22>
 801671e:	461a      	mov	r2, r3
 8016720:	685b      	ldr	r3, [r3, #4]
 8016722:	b10b      	cbz	r3, 8016728 <_free_r+0x50>
 8016724:	42a3      	cmp	r3, r4
 8016726:	d9fa      	bls.n	801671e <_free_r+0x46>
 8016728:	6811      	ldr	r1, [r2, #0]
 801672a:	1855      	adds	r5, r2, r1
 801672c:	42a5      	cmp	r5, r4
 801672e:	d10b      	bne.n	8016748 <_free_r+0x70>
 8016730:	6824      	ldr	r4, [r4, #0]
 8016732:	4421      	add	r1, r4
 8016734:	1854      	adds	r4, r2, r1
 8016736:	42a3      	cmp	r3, r4
 8016738:	6011      	str	r1, [r2, #0]
 801673a:	d1e0      	bne.n	80166fe <_free_r+0x26>
 801673c:	681c      	ldr	r4, [r3, #0]
 801673e:	685b      	ldr	r3, [r3, #4]
 8016740:	6053      	str	r3, [r2, #4]
 8016742:	4421      	add	r1, r4
 8016744:	6011      	str	r1, [r2, #0]
 8016746:	e7da      	b.n	80166fe <_free_r+0x26>
 8016748:	d902      	bls.n	8016750 <_free_r+0x78>
 801674a:	230c      	movs	r3, #12
 801674c:	6003      	str	r3, [r0, #0]
 801674e:	e7d6      	b.n	80166fe <_free_r+0x26>
 8016750:	6825      	ldr	r5, [r4, #0]
 8016752:	1961      	adds	r1, r4, r5
 8016754:	428b      	cmp	r3, r1
 8016756:	bf04      	itt	eq
 8016758:	6819      	ldreq	r1, [r3, #0]
 801675a:	685b      	ldreq	r3, [r3, #4]
 801675c:	6063      	str	r3, [r4, #4]
 801675e:	bf04      	itt	eq
 8016760:	1949      	addeq	r1, r1, r5
 8016762:	6021      	streq	r1, [r4, #0]
 8016764:	6054      	str	r4, [r2, #4]
 8016766:	e7ca      	b.n	80166fe <_free_r+0x26>
 8016768:	b003      	add	sp, #12
 801676a:	bd30      	pop	{r4, r5, pc}
 801676c:	240066d8 	.word	0x240066d8

08016770 <sbrk_aligned>:
 8016770:	b570      	push	{r4, r5, r6, lr}
 8016772:	4e0e      	ldr	r6, [pc, #56]	; (80167ac <sbrk_aligned+0x3c>)
 8016774:	460c      	mov	r4, r1
 8016776:	6831      	ldr	r1, [r6, #0]
 8016778:	4605      	mov	r5, r0
 801677a:	b911      	cbnz	r1, 8016782 <sbrk_aligned+0x12>
 801677c:	f000 f88c 	bl	8016898 <_sbrk_r>
 8016780:	6030      	str	r0, [r6, #0]
 8016782:	4621      	mov	r1, r4
 8016784:	4628      	mov	r0, r5
 8016786:	f000 f887 	bl	8016898 <_sbrk_r>
 801678a:	1c43      	adds	r3, r0, #1
 801678c:	d00a      	beq.n	80167a4 <sbrk_aligned+0x34>
 801678e:	1cc4      	adds	r4, r0, #3
 8016790:	f024 0403 	bic.w	r4, r4, #3
 8016794:	42a0      	cmp	r0, r4
 8016796:	d007      	beq.n	80167a8 <sbrk_aligned+0x38>
 8016798:	1a21      	subs	r1, r4, r0
 801679a:	4628      	mov	r0, r5
 801679c:	f000 f87c 	bl	8016898 <_sbrk_r>
 80167a0:	3001      	adds	r0, #1
 80167a2:	d101      	bne.n	80167a8 <sbrk_aligned+0x38>
 80167a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80167a8:	4620      	mov	r0, r4
 80167aa:	bd70      	pop	{r4, r5, r6, pc}
 80167ac:	240066dc 	.word	0x240066dc

080167b0 <_malloc_r>:
 80167b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167b4:	1ccd      	adds	r5, r1, #3
 80167b6:	f025 0503 	bic.w	r5, r5, #3
 80167ba:	3508      	adds	r5, #8
 80167bc:	2d0c      	cmp	r5, #12
 80167be:	bf38      	it	cc
 80167c0:	250c      	movcc	r5, #12
 80167c2:	2d00      	cmp	r5, #0
 80167c4:	4607      	mov	r7, r0
 80167c6:	db01      	blt.n	80167cc <_malloc_r+0x1c>
 80167c8:	42a9      	cmp	r1, r5
 80167ca:	d905      	bls.n	80167d8 <_malloc_r+0x28>
 80167cc:	230c      	movs	r3, #12
 80167ce:	603b      	str	r3, [r7, #0]
 80167d0:	2600      	movs	r6, #0
 80167d2:	4630      	mov	r0, r6
 80167d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167d8:	4e2e      	ldr	r6, [pc, #184]	; (8016894 <_malloc_r+0xe4>)
 80167da:	f000 f907 	bl	80169ec <__malloc_lock>
 80167de:	6833      	ldr	r3, [r6, #0]
 80167e0:	461c      	mov	r4, r3
 80167e2:	bb34      	cbnz	r4, 8016832 <_malloc_r+0x82>
 80167e4:	4629      	mov	r1, r5
 80167e6:	4638      	mov	r0, r7
 80167e8:	f7ff ffc2 	bl	8016770 <sbrk_aligned>
 80167ec:	1c43      	adds	r3, r0, #1
 80167ee:	4604      	mov	r4, r0
 80167f0:	d14d      	bne.n	801688e <_malloc_r+0xde>
 80167f2:	6834      	ldr	r4, [r6, #0]
 80167f4:	4626      	mov	r6, r4
 80167f6:	2e00      	cmp	r6, #0
 80167f8:	d140      	bne.n	801687c <_malloc_r+0xcc>
 80167fa:	6823      	ldr	r3, [r4, #0]
 80167fc:	4631      	mov	r1, r6
 80167fe:	4638      	mov	r0, r7
 8016800:	eb04 0803 	add.w	r8, r4, r3
 8016804:	f000 f848 	bl	8016898 <_sbrk_r>
 8016808:	4580      	cmp	r8, r0
 801680a:	d13a      	bne.n	8016882 <_malloc_r+0xd2>
 801680c:	6821      	ldr	r1, [r4, #0]
 801680e:	3503      	adds	r5, #3
 8016810:	1a6d      	subs	r5, r5, r1
 8016812:	f025 0503 	bic.w	r5, r5, #3
 8016816:	3508      	adds	r5, #8
 8016818:	2d0c      	cmp	r5, #12
 801681a:	bf38      	it	cc
 801681c:	250c      	movcc	r5, #12
 801681e:	4629      	mov	r1, r5
 8016820:	4638      	mov	r0, r7
 8016822:	f7ff ffa5 	bl	8016770 <sbrk_aligned>
 8016826:	3001      	adds	r0, #1
 8016828:	d02b      	beq.n	8016882 <_malloc_r+0xd2>
 801682a:	6823      	ldr	r3, [r4, #0]
 801682c:	442b      	add	r3, r5
 801682e:	6023      	str	r3, [r4, #0]
 8016830:	e00e      	b.n	8016850 <_malloc_r+0xa0>
 8016832:	6822      	ldr	r2, [r4, #0]
 8016834:	1b52      	subs	r2, r2, r5
 8016836:	d41e      	bmi.n	8016876 <_malloc_r+0xc6>
 8016838:	2a0b      	cmp	r2, #11
 801683a:	d916      	bls.n	801686a <_malloc_r+0xba>
 801683c:	1961      	adds	r1, r4, r5
 801683e:	42a3      	cmp	r3, r4
 8016840:	6025      	str	r5, [r4, #0]
 8016842:	bf18      	it	ne
 8016844:	6059      	strne	r1, [r3, #4]
 8016846:	6863      	ldr	r3, [r4, #4]
 8016848:	bf08      	it	eq
 801684a:	6031      	streq	r1, [r6, #0]
 801684c:	5162      	str	r2, [r4, r5]
 801684e:	604b      	str	r3, [r1, #4]
 8016850:	4638      	mov	r0, r7
 8016852:	f104 060b 	add.w	r6, r4, #11
 8016856:	f000 f8cf 	bl	80169f8 <__malloc_unlock>
 801685a:	f026 0607 	bic.w	r6, r6, #7
 801685e:	1d23      	adds	r3, r4, #4
 8016860:	1af2      	subs	r2, r6, r3
 8016862:	d0b6      	beq.n	80167d2 <_malloc_r+0x22>
 8016864:	1b9b      	subs	r3, r3, r6
 8016866:	50a3      	str	r3, [r4, r2]
 8016868:	e7b3      	b.n	80167d2 <_malloc_r+0x22>
 801686a:	6862      	ldr	r2, [r4, #4]
 801686c:	42a3      	cmp	r3, r4
 801686e:	bf0c      	ite	eq
 8016870:	6032      	streq	r2, [r6, #0]
 8016872:	605a      	strne	r2, [r3, #4]
 8016874:	e7ec      	b.n	8016850 <_malloc_r+0xa0>
 8016876:	4623      	mov	r3, r4
 8016878:	6864      	ldr	r4, [r4, #4]
 801687a:	e7b2      	b.n	80167e2 <_malloc_r+0x32>
 801687c:	4634      	mov	r4, r6
 801687e:	6876      	ldr	r6, [r6, #4]
 8016880:	e7b9      	b.n	80167f6 <_malloc_r+0x46>
 8016882:	230c      	movs	r3, #12
 8016884:	603b      	str	r3, [r7, #0]
 8016886:	4638      	mov	r0, r7
 8016888:	f000 f8b6 	bl	80169f8 <__malloc_unlock>
 801688c:	e7a1      	b.n	80167d2 <_malloc_r+0x22>
 801688e:	6025      	str	r5, [r4, #0]
 8016890:	e7de      	b.n	8016850 <_malloc_r+0xa0>
 8016892:	bf00      	nop
 8016894:	240066d8 	.word	0x240066d8

08016898 <_sbrk_r>:
 8016898:	b538      	push	{r3, r4, r5, lr}
 801689a:	4d06      	ldr	r5, [pc, #24]	; (80168b4 <_sbrk_r+0x1c>)
 801689c:	2300      	movs	r3, #0
 801689e:	4604      	mov	r4, r0
 80168a0:	4608      	mov	r0, r1
 80168a2:	602b      	str	r3, [r5, #0]
 80168a4:	f7ec fba4 	bl	8002ff0 <_sbrk>
 80168a8:	1c43      	adds	r3, r0, #1
 80168aa:	d102      	bne.n	80168b2 <_sbrk_r+0x1a>
 80168ac:	682b      	ldr	r3, [r5, #0]
 80168ae:	b103      	cbz	r3, 80168b2 <_sbrk_r+0x1a>
 80168b0:	6023      	str	r3, [r4, #0]
 80168b2:	bd38      	pop	{r3, r4, r5, pc}
 80168b4:	240066e0 	.word	0x240066e0

080168b8 <__sread>:
 80168b8:	b510      	push	{r4, lr}
 80168ba:	460c      	mov	r4, r1
 80168bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80168c0:	f000 f8a0 	bl	8016a04 <_read_r>
 80168c4:	2800      	cmp	r0, #0
 80168c6:	bfab      	itete	ge
 80168c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80168ca:	89a3      	ldrhlt	r3, [r4, #12]
 80168cc:	181b      	addge	r3, r3, r0
 80168ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80168d2:	bfac      	ite	ge
 80168d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80168d6:	81a3      	strhlt	r3, [r4, #12]
 80168d8:	bd10      	pop	{r4, pc}

080168da <__swrite>:
 80168da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168de:	461f      	mov	r7, r3
 80168e0:	898b      	ldrh	r3, [r1, #12]
 80168e2:	05db      	lsls	r3, r3, #23
 80168e4:	4605      	mov	r5, r0
 80168e6:	460c      	mov	r4, r1
 80168e8:	4616      	mov	r6, r2
 80168ea:	d505      	bpl.n	80168f8 <__swrite+0x1e>
 80168ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80168f0:	2302      	movs	r3, #2
 80168f2:	2200      	movs	r2, #0
 80168f4:	f000 f868 	bl	80169c8 <_lseek_r>
 80168f8:	89a3      	ldrh	r3, [r4, #12]
 80168fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80168fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016902:	81a3      	strh	r3, [r4, #12]
 8016904:	4632      	mov	r2, r6
 8016906:	463b      	mov	r3, r7
 8016908:	4628      	mov	r0, r5
 801690a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801690e:	f000 b817 	b.w	8016940 <_write_r>

08016912 <__sseek>:
 8016912:	b510      	push	{r4, lr}
 8016914:	460c      	mov	r4, r1
 8016916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801691a:	f000 f855 	bl	80169c8 <_lseek_r>
 801691e:	1c43      	adds	r3, r0, #1
 8016920:	89a3      	ldrh	r3, [r4, #12]
 8016922:	bf15      	itete	ne
 8016924:	6560      	strne	r0, [r4, #84]	; 0x54
 8016926:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801692a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801692e:	81a3      	strheq	r3, [r4, #12]
 8016930:	bf18      	it	ne
 8016932:	81a3      	strhne	r3, [r4, #12]
 8016934:	bd10      	pop	{r4, pc}

08016936 <__sclose>:
 8016936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801693a:	f000 b813 	b.w	8016964 <_close_r>
	...

08016940 <_write_r>:
 8016940:	b538      	push	{r3, r4, r5, lr}
 8016942:	4d07      	ldr	r5, [pc, #28]	; (8016960 <_write_r+0x20>)
 8016944:	4604      	mov	r4, r0
 8016946:	4608      	mov	r0, r1
 8016948:	4611      	mov	r1, r2
 801694a:	2200      	movs	r2, #0
 801694c:	602a      	str	r2, [r5, #0]
 801694e:	461a      	mov	r2, r3
 8016950:	f7ec fafd 	bl	8002f4e <_write>
 8016954:	1c43      	adds	r3, r0, #1
 8016956:	d102      	bne.n	801695e <_write_r+0x1e>
 8016958:	682b      	ldr	r3, [r5, #0]
 801695a:	b103      	cbz	r3, 801695e <_write_r+0x1e>
 801695c:	6023      	str	r3, [r4, #0]
 801695e:	bd38      	pop	{r3, r4, r5, pc}
 8016960:	240066e0 	.word	0x240066e0

08016964 <_close_r>:
 8016964:	b538      	push	{r3, r4, r5, lr}
 8016966:	4d06      	ldr	r5, [pc, #24]	; (8016980 <_close_r+0x1c>)
 8016968:	2300      	movs	r3, #0
 801696a:	4604      	mov	r4, r0
 801696c:	4608      	mov	r0, r1
 801696e:	602b      	str	r3, [r5, #0]
 8016970:	f7ec fb09 	bl	8002f86 <_close>
 8016974:	1c43      	adds	r3, r0, #1
 8016976:	d102      	bne.n	801697e <_close_r+0x1a>
 8016978:	682b      	ldr	r3, [r5, #0]
 801697a:	b103      	cbz	r3, 801697e <_close_r+0x1a>
 801697c:	6023      	str	r3, [r4, #0]
 801697e:	bd38      	pop	{r3, r4, r5, pc}
 8016980:	240066e0 	.word	0x240066e0

08016984 <_fstat_r>:
 8016984:	b538      	push	{r3, r4, r5, lr}
 8016986:	4d07      	ldr	r5, [pc, #28]	; (80169a4 <_fstat_r+0x20>)
 8016988:	2300      	movs	r3, #0
 801698a:	4604      	mov	r4, r0
 801698c:	4608      	mov	r0, r1
 801698e:	4611      	mov	r1, r2
 8016990:	602b      	str	r3, [r5, #0]
 8016992:	f7ec fb04 	bl	8002f9e <_fstat>
 8016996:	1c43      	adds	r3, r0, #1
 8016998:	d102      	bne.n	80169a0 <_fstat_r+0x1c>
 801699a:	682b      	ldr	r3, [r5, #0]
 801699c:	b103      	cbz	r3, 80169a0 <_fstat_r+0x1c>
 801699e:	6023      	str	r3, [r4, #0]
 80169a0:	bd38      	pop	{r3, r4, r5, pc}
 80169a2:	bf00      	nop
 80169a4:	240066e0 	.word	0x240066e0

080169a8 <_isatty_r>:
 80169a8:	b538      	push	{r3, r4, r5, lr}
 80169aa:	4d06      	ldr	r5, [pc, #24]	; (80169c4 <_isatty_r+0x1c>)
 80169ac:	2300      	movs	r3, #0
 80169ae:	4604      	mov	r4, r0
 80169b0:	4608      	mov	r0, r1
 80169b2:	602b      	str	r3, [r5, #0]
 80169b4:	f7ec fb03 	bl	8002fbe <_isatty>
 80169b8:	1c43      	adds	r3, r0, #1
 80169ba:	d102      	bne.n	80169c2 <_isatty_r+0x1a>
 80169bc:	682b      	ldr	r3, [r5, #0]
 80169be:	b103      	cbz	r3, 80169c2 <_isatty_r+0x1a>
 80169c0:	6023      	str	r3, [r4, #0]
 80169c2:	bd38      	pop	{r3, r4, r5, pc}
 80169c4:	240066e0 	.word	0x240066e0

080169c8 <_lseek_r>:
 80169c8:	b538      	push	{r3, r4, r5, lr}
 80169ca:	4d07      	ldr	r5, [pc, #28]	; (80169e8 <_lseek_r+0x20>)
 80169cc:	4604      	mov	r4, r0
 80169ce:	4608      	mov	r0, r1
 80169d0:	4611      	mov	r1, r2
 80169d2:	2200      	movs	r2, #0
 80169d4:	602a      	str	r2, [r5, #0]
 80169d6:	461a      	mov	r2, r3
 80169d8:	f7ec fafc 	bl	8002fd4 <_lseek>
 80169dc:	1c43      	adds	r3, r0, #1
 80169de:	d102      	bne.n	80169e6 <_lseek_r+0x1e>
 80169e0:	682b      	ldr	r3, [r5, #0]
 80169e2:	b103      	cbz	r3, 80169e6 <_lseek_r+0x1e>
 80169e4:	6023      	str	r3, [r4, #0]
 80169e6:	bd38      	pop	{r3, r4, r5, pc}
 80169e8:	240066e0 	.word	0x240066e0

080169ec <__malloc_lock>:
 80169ec:	4801      	ldr	r0, [pc, #4]	; (80169f4 <__malloc_lock+0x8>)
 80169ee:	f7ff be0b 	b.w	8016608 <__retarget_lock_acquire_recursive>
 80169f2:	bf00      	nop
 80169f4:	240066d4 	.word	0x240066d4

080169f8 <__malloc_unlock>:
 80169f8:	4801      	ldr	r0, [pc, #4]	; (8016a00 <__malloc_unlock+0x8>)
 80169fa:	f7ff be06 	b.w	801660a <__retarget_lock_release_recursive>
 80169fe:	bf00      	nop
 8016a00:	240066d4 	.word	0x240066d4

08016a04 <_read_r>:
 8016a04:	b538      	push	{r3, r4, r5, lr}
 8016a06:	4d07      	ldr	r5, [pc, #28]	; (8016a24 <_read_r+0x20>)
 8016a08:	4604      	mov	r4, r0
 8016a0a:	4608      	mov	r0, r1
 8016a0c:	4611      	mov	r1, r2
 8016a0e:	2200      	movs	r2, #0
 8016a10:	602a      	str	r2, [r5, #0]
 8016a12:	461a      	mov	r2, r3
 8016a14:	f7ec fa7e 	bl	8002f14 <_read>
 8016a18:	1c43      	adds	r3, r0, #1
 8016a1a:	d102      	bne.n	8016a22 <_read_r+0x1e>
 8016a1c:	682b      	ldr	r3, [r5, #0]
 8016a1e:	b103      	cbz	r3, 8016a22 <_read_r+0x1e>
 8016a20:	6023      	str	r3, [r4, #0]
 8016a22:	bd38      	pop	{r3, r4, r5, pc}
 8016a24:	240066e0 	.word	0x240066e0

08016a28 <_init>:
 8016a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a2a:	bf00      	nop
 8016a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016a2e:	bc08      	pop	{r3}
 8016a30:	469e      	mov	lr, r3
 8016a32:	4770      	bx	lr

08016a34 <_fini>:
 8016a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a36:	bf00      	nop
 8016a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016a3a:	bc08      	pop	{r3}
 8016a3c:	469e      	mov	lr, r3
 8016a3e:	4770      	bx	lr
