
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ae90  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0801b130  0801b130  0002b130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b5c8  0801b5c8  0002b5c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b5d0  0801b5d0  0002b5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801b5d4  0801b5d4  0002b5d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000138  24000000  0801b5d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000683c  24000140  0801b710  00030140  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400697c  0801b710  0003697c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY
 10 .debug_info   00041135  00000000  00000000  00030166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007d76  00000000  00000000  0007129b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002bc0  00000000  00000000  00079018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002878  00000000  00000000  0007bbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00046855  00000000  00000000  0007e450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00043349  00000000  00000000  000c4ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00196b6e  00000000  00000000  00107fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0029eb5c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bd08  00000000  00000000  0029ebac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000140 	.word	0x24000140
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801b118 	.word	0x0801b118

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000144 	.word	0x24000144
 80002dc:	0801b118 	.word	0x0801b118

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f005 feb9 	bl	80063e0 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f003 fa04 	bl	8003a80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f006 ffd4 	bl	8007630 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f003 f9f7 	bl	8003a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f006 f917 	bl	80068e8 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f003 f9de 	bl	8003a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f006 f909 	bl	80068e8 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f003 f9d0 	bl	8003a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f006 f8fb 	bl	80068e8 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f003 f9c2 	bl	8003a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f006 f8ed 	bl	80068e8 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f003 f9b4 	bl	8003a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f006 f8de 	bl	80068e8 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f003 f9a5 	bl	8003a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f006 f8cf 	bl	80068e8 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f003 f996 	bl	8003a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f006 f8c0 	bl	80068e8 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f003 f987 	bl	8003a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f006 f8b1 	bl	80068e8 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f003 f978 	bl	8003a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f006 f8a2 	bl	80068e8 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f003 f969 	bl	8003a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f006 f893 	bl	80068e8 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f003 f95a 	bl	8003a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f006 f884 	bl	80068e8 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f003 f94b 	bl	8003a80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400015c 	.word	0x2400015c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f005 fda1 	bl	80063e0 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f003 f8ec 	bl	8003a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f006 f80c 	bl	80068e8 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f003 f8d3 	bl	8003a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f005 fffe 	bl	80068e8 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f003 f8c5 	bl	8003a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f005 fff0 	bl	80068e8 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f003 f8b7 	bl	8003a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f005 ffe2 	bl	80068e8 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f003 f8a9 	bl	8003a80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001c0 	.word	0x240001c0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f00a fd0c 	bl	800b418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f00a fd00 	bl	800b418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f00a fcf4 	bl	800b418 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f007 fb9f 	bl	80081b8 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f002 fffe 	bl	8003a80 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f005 fa5a 	bl	8005f98 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f005 fa54 	bl	8005f98 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f007 fb3f 	bl	80081b8 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f002 ff9e 	bl	8003a80 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000224 	.word	0x24000224
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400029c 	.word	0x2400029c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f019 fdbd 	bl	801a70c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f006 ff07 	bl	80079ac <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f002 ff6c 	bl	8003a80 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f007 f922 	bl	8007e0c <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f002 ff57 	bl	8003a80 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000314 	.word	0x24000314
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f00a fbdf 	bl	800b418 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f007 fa8a 	bl	80081b8 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f002 fee9 	bl	8003a80 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f006 fe4c 	bl	800795c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f006 fe63 	bl	8007990 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000328 	.word	0x24000328
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f006 fe23 	bl	800795c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f006 fe3a 	bl	8007990 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f006 fe1b 	bl	800795c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f006 fe32 	bl	8007990 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f006 fe13 	bl	800795c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f006 fe2a 	bl	8007990 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f006 fe0b 	bl	800795c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f006 fe22 	bl	8007990 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f006 fe03 	bl	800795c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f006 fe1a 	bl	8007990 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f006 fdfb 	bl	800795c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f006 fe12 	bl	8007990 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2011      	movs	r0, #17
 8000d72:	f006 fdf3 	bl	800795c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d76:	2011      	movs	r0, #17
 8000d78:	f006 fe0a 	bl	8007990 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	202f      	movs	r0, #47	; 0x2f
 8000d82:	f006 fdeb 	bl	800795c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d86:	202f      	movs	r0, #47	; 0x2f
 8000d88:	f006 fe02 	bl	8007990 <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <EE_Init>:
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */

uint16_t EE_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b092      	sub	sp, #72	; 0x48
 8000d9c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000da4:	2306      	movs	r3, #6
 8000da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t VarIdx = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000db4:	2300      	movs	r3, #0
 8000db6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  int16_t x = -1;
 8000db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dbc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f019 fc9e 	bl	801a70c <memset>

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000dd0:	4bb7      	ldr	r3, [pc, #732]	; (80010b0 <EE_Init+0x318>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000dd8:	4bb6      	ldr	r3, [pc, #728]	; (80010b4 <EE_Init+0x31c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  pEraseInit.Banks = FLASH_BANK_2 ;
 8000de4:	2302      	movs	r3, #2
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8000de8:	2306      	movs	r3, #6
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.NbSectors = 1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000df0:	2320      	movs	r3, #32
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000df4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d00d      	beq.n	8000e1c <EE_Init+0x84>
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	f280 8430 	bge.w	8001668 <EE_Init+0x8d0>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 82ca 	beq.w	80013a2 <EE_Init+0x60a>
 8000e0e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000e12:	4293      	cmp	r3, r2
 8000e14:	f000 810f 	beq.w	8001036 <EE_Init+0x29e>
 8000e18:	f000 bc26 	b.w	8001668 <EE_Init+0x8d0>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000e1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d154      	bne.n	8000ece <EE_Init+0x136>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000e24:	48a2      	ldr	r0, [pc, #648]	; (80010b0 <EE_Init+0x318>)
 8000e26:	f000 fc45 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f040 8428 	bne.w	8001682 <EE_Init+0x8ea>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e32:	f3bf 8f4f 	dsb	sy
}
 8000e36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e38:	f3bf 8f6f 	isb	sy
}
 8000e3c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000e3e:	4b9e      	ldr	r3, [pc, #632]	; (80010b8 <EE_Init+0x320>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a9d      	ldr	r2, [pc, #628]	; (80010b8 <EE_Init+0x320>)
 8000e44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e48:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e4a:	4b9b      	ldr	r3, [pc, #620]	; (80010b8 <EE_Init+0x320>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e52:	f3bf 8f4f 	dsb	sy
}
 8000e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e58:	f3bf 8f6f 	isb	sy
}
 8000e5c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e5e:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000e60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f00a f962 	bl	800b134 <HAL_FLASHEx_Erase>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e76:	4b90      	ldr	r3, [pc, #576]	; (80010b8 <EE_Init+0x320>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d11b      	bne.n	8000eba <EE_Init+0x122>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e82:	f3bf 8f4f 	dsb	sy
}
 8000e86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e88:	f3bf 8f6f 	isb	sy
}
 8000e8c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e8e:	4b8a      	ldr	r3, [pc, #552]	; (80010b8 <EE_Init+0x320>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e96:	f3bf 8f4f 	dsb	sy
}
 8000e9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e9c:	f3bf 8f6f 	isb	sy
}
 8000ea0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ea2:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <EE_Init+0x320>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a84      	ldr	r2, [pc, #528]	; (80010b8 <EE_Init+0x320>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eae:	f3bf 8f4f 	dsb	sy
}
 8000eb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eb4:	f3bf 8f6f 	isb	sy
}
 8000eb8:	e000      	b.n	8000ebc <EE_Init+0x124>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000eba:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000ebc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 83de 	beq.w	8001682 <EE_Init+0x8ea>
          {
            return FlashStatus;
 8000ec6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	e3e1      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000ece:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ed2:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	f040 809f 	bne.w	800101a <EE_Init+0x282>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000edc:	4874      	ldr	r0, [pc, #464]	; (80010b0 <EE_Init+0x318>)
 8000ede:	f000 fbe9 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d14c      	bne.n	8000f82 <EE_Init+0x1ea>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
}
 8000eec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eee:	f3bf 8f6f 	isb	sy
}
 8000ef2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000ef4:	4b70      	ldr	r3, [pc, #448]	; (80010b8 <EE_Init+0x320>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	4a6f      	ldr	r2, [pc, #444]	; (80010b8 <EE_Init+0x320>)
 8000efa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000efe:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f00:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <EE_Init+0x320>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f08:	f3bf 8f4f 	dsb	sy
}
 8000f0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0e:	f3bf 8f6f 	isb	sy
}
 8000f12:	bf00      	nop
}
 8000f14:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000f16:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f00a f907 	bl	800b134 <HAL_FLASHEx_Erase>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f2c:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <EE_Init+0x320>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11b      	bne.n	8000f70 <EE_Init+0x1d8>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f38:	f3bf 8f4f 	dsb	sy
}
 8000f3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f3e:	f3bf 8f6f 	isb	sy
}
 8000f42:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f44:	4b5c      	ldr	r3, [pc, #368]	; (80010b8 <EE_Init+0x320>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4c:	f3bf 8f4f 	dsb	sy
}
 8000f50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
}
 8000f56:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f58:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <EE_Init+0x320>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a56      	ldr	r2, [pc, #344]	; (80010b8 <EE_Init+0x320>)
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f64:	f3bf 8f4f 	dsb	sy
}
 8000f68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f6a:	f3bf 8f6f 	isb	sy
}
 8000f6e:	e000      	b.n	8000f72 <EE_Init+0x1da>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f70:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000f72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <EE_Init+0x1ea>
          {
            return FlashStatus;
 8000f7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	e387      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f82:	f3bf 8f4f 	dsb	sy
}
 8000f86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f88:	f3bf 8f6f 	isb	sy
}
 8000f8c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <EE_Init+0x320>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <EE_Init+0x320>)
 8000f94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f98:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f9a:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <EE_Init+0x320>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa2:	f3bf 8f4f 	dsb	sy
}
 8000fa6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fa8:	f3bf 8f6f 	isb	sy
}
 8000fac:	bf00      	nop
}
 8000fae:	bf00      	nop
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	493f      	ldr	r1, [pc, #252]	; (80010b4 <EE_Init+0x31c>)
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f009 ff54 	bl	800ae64 <HAL_FLASH_Program>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <EE_Init+0x320>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d11b      	bne.n	8001006 <EE_Init+0x26e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fce:	f3bf 8f4f 	dsb	sy
}
 8000fd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fd4:	f3bf 8f6f 	isb	sy
}
 8000fd8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <EE_Init+0x320>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe2:	f3bf 8f4f 	dsb	sy
}
 8000fe6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fe8:	f3bf 8f6f 	isb	sy
}
 8000fec:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <EE_Init+0x320>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <EE_Init+0x320>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ffa:	f3bf 8f4f 	dsb	sy
}
 8000ffe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001000:	f3bf 8f6f 	isb	sy
}
 8001004:	e000      	b.n	8001008 <EE_Init+0x270>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001006:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001008:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 8338 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 8001012:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001016:	b29b      	uxth	r3, r3
 8001018:	e33b      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800101a:	f000 fbdf 	bl	80017dc <EE_Format>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001024:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 832a 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 800102e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001032:	b29b      	uxth	r3, r3
 8001034:	e32d      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001036:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 80f5 	bne.w	800122a <EE_Init+0x492>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001040:	2300      	movs	r3, #0
 8001042:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001046:	e044      	b.n	80010d2 <EE_Init+0x33a>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <EE_Init+0x324>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001052:	491b      	ldr	r1, [pc, #108]	; (80010c0 <EE_Init+0x328>)
 8001054:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001058:	429a      	cmp	r2, r3
 800105a:	d103      	bne.n	8001064 <EE_Init+0x2cc>
          {
            x = VarIdx;
 800105c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001060:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 8001064:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001068:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800106c:	429a      	cmp	r2, r3
 800106e:	d02b      	beq.n	80010c8 <EE_Init+0x330>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <EE_Init+0x328>)
 8001076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107a:	4912      	ldr	r1, [pc, #72]	; (80010c4 <EE_Init+0x32c>)
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fb43 	bl	8001708 <EE_ReadVariable>
 8001082:	4603      	mov	r3, r0
 8001084:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001086:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001088:	2b01      	cmp	r3, #1
 800108a:	d01d      	beq.n	80010c8 <EE_Init+0x330>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800108c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <EE_Init+0x328>)
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <EE_Init+0x32c>)
 8001098:	8812      	ldrh	r2, [r2, #0]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fcf7 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80010a2:	4603      	mov	r3, r0
 80010a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80010a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00d      	beq.n	80010c8 <EE_Init+0x330>
              {
                return EepromStatus;
 80010ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010ae:	e2f0      	b.n	8001692 <EE_Init+0x8fa>
 80010b0:	081c0000 	.word	0x081c0000
 80010b4:	081e0000 	.word	0x081e0000
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	081c0006 	.word	0x081c0006
 80010c0:	24000000 	.word	0x24000000
 80010c4:	240003a0 	.word	0x240003a0
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80010c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010cc:	3301      	adds	r3, #1
 80010ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80010d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010d6:	2b1c      	cmp	r3, #28
 80010d8:	d9b6      	bls.n	8001048 <EE_Init+0x2b0>
  __ASM volatile ("dsb 0xF":::"memory");
 80010da:	f3bf 8f4f 	dsb	sy
}
 80010de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010e0:	f3bf 8f6f 	isb	sy
}
 80010e4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80010e6:	4bb8      	ldr	r3, [pc, #736]	; (80013c8 <EE_Init+0x630>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4ab7      	ldr	r2, [pc, #732]	; (80013c8 <EE_Init+0x630>)
 80010ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010f0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010f2:	4bb5      	ldr	r3, [pc, #724]	; (80013c8 <EE_Init+0x630>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010fa:	f3bf 8f4f 	dsb	sy
}
 80010fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001100:	f3bf 8f6f 	isb	sy
}
 8001104:	bf00      	nop
}
 8001106:	bf00      	nop
            }
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8001108:	463b      	mov	r3, r7
 800110a:	461a      	mov	r2, r3
 800110c:	49af      	ldr	r1, [pc, #700]	; (80013cc <EE_Init+0x634>)
 800110e:	2001      	movs	r0, #1
 8001110:	f009 fea8 	bl	800ae64 <HAL_FLASH_Program>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800111a:	4bab      	ldr	r3, [pc, #684]	; (80013c8 <EE_Init+0x630>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d11b      	bne.n	800115e <EE_Init+0x3c6>
  __ASM volatile ("dsb 0xF":::"memory");
 8001126:	f3bf 8f4f 	dsb	sy
}
 800112a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800112c:	f3bf 8f6f 	isb	sy
}
 8001130:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001132:	4ba5      	ldr	r3, [pc, #660]	; (80013c8 <EE_Init+0x630>)
 8001134:	2200      	movs	r2, #0
 8001136:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800113a:	f3bf 8f4f 	dsb	sy
}
 800113e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001140:	f3bf 8f6f 	isb	sy
}
 8001144:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001146:	4ba0      	ldr	r3, [pc, #640]	; (80013c8 <EE_Init+0x630>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a9f      	ldr	r2, [pc, #636]	; (80013c8 <EE_Init+0x630>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001152:	f3bf 8f4f 	dsb	sy
}
 8001156:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001158:	f3bf 8f6f 	isb	sy
}
 800115c:	e000      	b.n	8001160 <EE_Init+0x3c8>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800115e:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001160:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <EE_Init+0x3d8>
        {
          return FlashStatus;
 8001168:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800116c:	b29b      	uxth	r3, r3
 800116e:	e290      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001170:	2307      	movs	r3, #7
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 8001174:	2302      	movs	r3, #2
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800117c:	2320      	movs	r3, #32
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001180:	4893      	ldr	r0, [pc, #588]	; (80013d0 <EE_Init+0x638>)
 8001182:	f000 fa97 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	f040 827c 	bne.w	8001686 <EE_Init+0x8ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800118e:	f3bf 8f4f 	dsb	sy
}
 8001192:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001194:	f3bf 8f6f 	isb	sy
}
 8001198:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800119a:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <EE_Init+0x630>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a8a      	ldr	r2, [pc, #552]	; (80013c8 <EE_Init+0x630>)
 80011a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011a4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011a6:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <EE_Init+0x630>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011ae:	f3bf 8f4f 	dsb	sy
}
 80011b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011b4:	f3bf 8f6f 	isb	sy
}
 80011b8:	bf00      	nop
}
 80011ba:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80011bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f009 ffb4 	bl	800b134 <HAL_FLASHEx_Erase>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <EE_Init+0x630>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d11b      	bne.n	8001216 <EE_Init+0x47e>
  __ASM volatile ("dsb 0xF":::"memory");
 80011de:	f3bf 8f4f 	dsb	sy
}
 80011e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011e4:	f3bf 8f6f 	isb	sy
}
 80011e8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011ea:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <EE_Init+0x630>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011f2:	f3bf 8f4f 	dsb	sy
}
 80011f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011f8:	f3bf 8f6f 	isb	sy
}
 80011fc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <EE_Init+0x630>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a71      	ldr	r2, [pc, #452]	; (80013c8 <EE_Init+0x630>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800120a:	f3bf 8f4f 	dsb	sy
}
 800120e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001210:	f3bf 8f6f 	isb	sy
}
 8001214:	e000      	b.n	8001218 <EE_Init+0x480>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001216:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001218:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 8232 	beq.w	8001686 <EE_Init+0x8ee>
          {
            return FlashStatus;
 8001222:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001226:	b29b      	uxth	r3, r3
 8001228:	e233      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800122a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800122e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001232:	4293      	cmp	r3, r2
 8001234:	f040 80a7 	bne.w	8001386 <EE_Init+0x5ee>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001238:	2307      	movs	r3, #7
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 800123c:	2302      	movs	r3, #2
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001244:	2320      	movs	r3, #32
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001248:	4861      	ldr	r0, [pc, #388]	; (80013d0 <EE_Init+0x638>)
 800124a:	f000 fa33 	bl	80016b4 <EE_VerifyPageFullyErased>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d14c      	bne.n	80012ee <EE_Init+0x556>
  __ASM volatile ("dsb 0xF":::"memory");
 8001254:	f3bf 8f4f 	dsb	sy
}
 8001258:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800125a:	f3bf 8f6f 	isb	sy
}
 800125e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001260:	4b59      	ldr	r3, [pc, #356]	; (80013c8 <EE_Init+0x630>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <EE_Init+0x630>)
 8001266:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800126a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <EE_Init+0x630>)
 800126e:	2200      	movs	r2, #0
 8001270:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001274:	f3bf 8f4f 	dsb	sy
}
 8001278:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800127a:	f3bf 8f6f 	isb	sy
}
 800127e:	bf00      	nop
}
 8001280:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001282:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f009 ff51 	bl	800b134 <HAL_FLASHEx_Erase>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <EE_Init+0x630>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11b      	bne.n	80012dc <EE_Init+0x544>
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
}
 80012a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012aa:	f3bf 8f6f 	isb	sy
}
 80012ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012b0:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <EE_Init+0x630>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012b8:	f3bf 8f4f 	dsb	sy
}
 80012bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012be:	f3bf 8f6f 	isb	sy
}
 80012c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <EE_Init+0x630>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	4a3f      	ldr	r2, [pc, #252]	; (80013c8 <EE_Init+0x630>)
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012d0:	f3bf 8f4f 	dsb	sy
}
 80012d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012d6:	f3bf 8f6f 	isb	sy
}
 80012da:	e000      	b.n	80012de <EE_Init+0x546>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012dc:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80012de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <EE_Init+0x556>
          {
            return FlashStatus;
 80012e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	e1d1      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 80012ee:	f3bf 8f4f 	dsb	sy
}
 80012f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f4:	f3bf 8f6f 	isb	sy
}
 80012f8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <EE_Init+0x630>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <EE_Init+0x630>)
 8001300:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001304:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <EE_Init+0x630>)
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800130e:	f3bf 8f4f 	dsb	sy
}
 8001312:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001314:	f3bf 8f6f 	isb	sy
}
 8001318:	bf00      	nop
}
 800131a:	bf00      	nop
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 800131c:	463b      	mov	r3, r7
 800131e:	461a      	mov	r2, r3
 8001320:	492a      	ldr	r1, [pc, #168]	; (80013cc <EE_Init+0x634>)
 8001322:	2001      	movs	r0, #1
 8001324:	f009 fd9e 	bl	800ae64 <HAL_FLASH_Program>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <EE_Init+0x630>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d11b      	bne.n	8001372 <EE_Init+0x5da>
  __ASM volatile ("dsb 0xF":::"memory");
 800133a:	f3bf 8f4f 	dsb	sy
}
 800133e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001340:	f3bf 8f6f 	isb	sy
}
 8001344:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <EE_Init+0x630>)
 8001348:	2200      	movs	r2, #0
 800134a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800134e:	f3bf 8f4f 	dsb	sy
}
 8001352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001354:	f3bf 8f6f 	isb	sy
}
 8001358:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <EE_Init+0x630>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <EE_Init+0x630>)
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001366:	f3bf 8f4f 	dsb	sy
}
 800136a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800136c:	f3bf 8f6f 	isb	sy
}
 8001370:	e000      	b.n	8001374 <EE_Init+0x5dc>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001372:	bf00      	nop
		SCB_EnableICache();
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001374:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8184 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800137e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001382:	b29b      	uxth	r3, r3
 8001384:	e185      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001386:	f000 fa29 	bl	80017dc <EE_Format>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001390:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8176 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800139a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800139e:	b29b      	uxth	r3, r3
 80013a0:	e177      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80013a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d114      	bne.n	80013d4 <EE_Init+0x63c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80013aa:	f000 fa17 	bl	80017dc <EE_Format>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8166 	beq.w	800168a <EE_Init+0x8f2>
        {
          return FlashStatus;
 80013be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	e165      	b.n	8001692 <EE_Init+0x8fa>
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	081c0000 	.word	0x081c0000
 80013d0:	081e0000 	.word	0x081e0000
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80013d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013dc:	4293      	cmp	r3, r2
 80013de:	d15c      	bne.n	800149a <EE_Init+0x702>
      {
        pEraseInit.Sector = PAGE1_ID;
 80013e0:	2307      	movs	r3, #7
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80013e4:	2302      	movs	r3, #2
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80013ec:	2320      	movs	r3, #32
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80013f0:	48aa      	ldr	r0, [pc, #680]	; (800169c <EE_Init+0x904>)
 80013f2:	f000 f95f 	bl	80016b4 <EE_VerifyPageFullyErased>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f040 8146 	bne.w	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80013fe:	f3bf 8f4f 	dsb	sy
}
 8001402:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001404:	f3bf 8f6f 	isb	sy
}
 8001408:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800140a:	4ba5      	ldr	r3, [pc, #660]	; (80016a0 <EE_Init+0x908>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4aa4      	ldr	r2, [pc, #656]	; (80016a0 <EE_Init+0x908>)
 8001410:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001414:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001416:	4ba2      	ldr	r3, [pc, #648]	; (80016a0 <EE_Init+0x908>)
 8001418:	2200      	movs	r2, #0
 800141a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800141e:	f3bf 8f4f 	dsb	sy
}
 8001422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001424:	f3bf 8f6f 	isb	sy
}
 8001428:	bf00      	nop
}
 800142a:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800142c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f009 fe7c 	bl	800b134 <HAL_FLASHEx_Erase>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001442:	4b97      	ldr	r3, [pc, #604]	; (80016a0 <EE_Init+0x908>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d11b      	bne.n	8001486 <EE_Init+0x6ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800144e:	f3bf 8f4f 	dsb	sy
}
 8001452:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001454:	f3bf 8f6f 	isb	sy
}
 8001458:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800145a:	4b91      	ldr	r3, [pc, #580]	; (80016a0 <EE_Init+0x908>)
 800145c:	2200      	movs	r2, #0
 800145e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001462:	f3bf 8f4f 	dsb	sy
}
 8001466:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001468:	f3bf 8f6f 	isb	sy
}
 800146c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800146e:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <EE_Init+0x908>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a8b      	ldr	r2, [pc, #556]	; (80016a0 <EE_Init+0x908>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800147a:	f3bf 8f4f 	dsb	sy
}
 800147e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001480:	f3bf 8f6f 	isb	sy
}
 8001484:	e000      	b.n	8001488 <EE_Init+0x6f0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001486:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001488:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80fc 	beq.w	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001492:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001496:	b29b      	uxth	r3, r3
 8001498:	e0fb      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800149a:	2300      	movs	r3, #0
 800149c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80014a0:	e038      	b.n	8001514 <EE_Init+0x77c>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80014a2:	4b80      	ldr	r3, [pc, #512]	; (80016a4 <EE_Init+0x90c>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ac:	497e      	ldr	r1, [pc, #504]	; (80016a8 <EE_Init+0x910>)
 80014ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d103      	bne.n	80014be <EE_Init+0x726>
          {
            x = VarIdx;
 80014b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 80014be:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80014c2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d01f      	beq.n	800150a <EE_Init+0x772>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80014ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ce:	4a76      	ldr	r2, [pc, #472]	; (80016a8 <EE_Init+0x910>)
 80014d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d4:	4975      	ldr	r1, [pc, #468]	; (80016ac <EE_Init+0x914>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f916 	bl	8001708 <EE_ReadVariable>
 80014dc:	4603      	mov	r3, r0
 80014de:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80014e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d011      	beq.n	800150a <EE_Init+0x772>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80014e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ea:	4a6f      	ldr	r2, [pc, #444]	; (80016a8 <EE_Init+0x910>)
 80014ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f0:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <EE_Init+0x914>)
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 faca 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80014fc:	4603      	mov	r3, r0
 80014fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001500:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <EE_Init+0x772>
              {
                return EepromStatus;
 8001506:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001508:	e0c3      	b.n	8001692 <EE_Init+0x8fa>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800150a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800150e:	3301      	adds	r3, #1
 8001510:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001514:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001518:	2b1c      	cmp	r3, #28
 800151a:	d9c2      	bls.n	80014a2 <EE_Init+0x70a>
  __ASM volatile ("dsb 0xF":::"memory");
 800151c:	f3bf 8f4f 	dsb	sy
}
 8001520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001522:	f3bf 8f6f 	isb	sy
}
 8001526:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001528:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <EE_Init+0x908>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4a5c      	ldr	r2, [pc, #368]	; (80016a0 <EE_Init+0x908>)
 800152e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001532:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001534:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <EE_Init+0x908>)
 8001536:	2200      	movs	r2, #0
 8001538:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800153c:	f3bf 8f4f 	dsb	sy
}
 8001540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001542:	f3bf 8f6f 	isb	sy
}
 8001546:	bf00      	nop
}
 8001548:	bf00      	nop
            }
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 800154a:	463b      	mov	r3, r7
 800154c:	461a      	mov	r2, r3
 800154e:	4953      	ldr	r1, [pc, #332]	; (800169c <EE_Init+0x904>)
 8001550:	2001      	movs	r0, #1
 8001552:	f009 fc87 	bl	800ae64 <HAL_FLASH_Program>
 8001556:	4603      	mov	r3, r0
 8001558:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <EE_Init+0x908>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11b      	bne.n	80015a0 <EE_Init+0x808>
  __ASM volatile ("dsb 0xF":::"memory");
 8001568:	f3bf 8f4f 	dsb	sy
}
 800156c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156e:	f3bf 8f6f 	isb	sy
}
 8001572:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <EE_Init+0x908>)
 8001576:	2200      	movs	r2, #0
 8001578:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800157c:	f3bf 8f4f 	dsb	sy
}
 8001580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001582:	f3bf 8f6f 	isb	sy
}
 8001586:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <EE_Init+0x908>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4a44      	ldr	r2, [pc, #272]	; (80016a0 <EE_Init+0x908>)
 800158e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001592:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001594:	f3bf 8f4f 	dsb	sy
}
 8001598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800159a:	f3bf 8f6f 	isb	sy
}
 800159e:	e000      	b.n	80015a2 <EE_Init+0x80a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015a0:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80015a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <EE_Init+0x81a>
        {
          return FlashStatus;
 80015aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	e06f      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE0_ID;
 80015b2:	2306      	movs	r3, #6
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80015b6:	2302      	movs	r3, #2
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80015be:	2320      	movs	r3, #32
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80015c2:	483b      	ldr	r0, [pc, #236]	; (80016b0 <EE_Init+0x918>)
 80015c4:	f000 f876 	bl	80016b4 <EE_VerifyPageFullyErased>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d15d      	bne.n	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ce:	f3bf 8f4f 	dsb	sy
}
 80015d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015d4:	f3bf 8f6f 	isb	sy
}
 80015d8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <EE_Init+0x908>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <EE_Init+0x908>)
 80015e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80015e4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <EE_Init+0x908>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015ee:	f3bf 8f4f 	dsb	sy
}
 80015f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f4:	f3bf 8f6f 	isb	sy
}
 80015f8:	bf00      	nop
}
 80015fa:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80015fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f009 fd94 	bl	800b134 <HAL_FLASHEx_Erase>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <EE_Init+0x908>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d11b      	bne.n	8001656 <EE_Init+0x8be>
  __ASM volatile ("dsb 0xF":::"memory");
 800161e:	f3bf 8f4f 	dsb	sy
}
 8001622:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001624:	f3bf 8f6f 	isb	sy
}
 8001628:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <EE_Init+0x908>)
 800162c:	2200      	movs	r2, #0
 800162e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001632:	f3bf 8f4f 	dsb	sy
}
 8001636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001638:	f3bf 8f6f 	isb	sy
}
 800163c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <EE_Init+0x908>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <EE_Init+0x908>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800164a:	f3bf 8f4f 	dsb	sy
}
 800164e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001650:	f3bf 8f6f 	isb	sy
}
 8001654:	e000      	b.n	8001658 <EE_Init+0x8c0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001656:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001658:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800165c:	2b00      	cmp	r3, #0
 800165e:	d014      	beq.n	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001660:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001664:	b29b      	uxth	r3, r3
 8001666:	e014      	b.n	8001692 <EE_Init+0x8fa>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001668:	f000 f8b8 	bl	80017dc <EE_Format>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001672:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <EE_Init+0x8f6>
      {
        return FlashStatus;
 800167a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800167e:	b29b      	uxth	r3, r3
 8001680:	e007      	b.n	8001692 <EE_Init+0x8fa>
      break;
 8001682:	bf00      	nop
 8001684:	e004      	b.n	8001690 <EE_Init+0x8f8>
      break;
 8001686:	bf00      	nop
 8001688:	e002      	b.n	8001690 <EE_Init+0x8f8>
      break;
 800168a:	bf00      	nop
 800168c:	e000      	b.n	8001690 <EE_Init+0x8f8>
      }
      break;
 800168e:	bf00      	nop
  }

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3748      	adds	r7, #72	; 0x48
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	081e0000 	.word	0x081e0000
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	081e0006 	.word	0x081e0006
 80016a8:	24000000 	.word	0x24000000
 80016ac:	240003a0 	.word	0x240003a0
 80016b0:	081c0000 	.word	0x081c0000

080016b4 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t EndAddress;
  uint32_t ReadStatus = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
  uint16_t AddressValue = 0x5555;
 80016c0:	f245 5355 	movw	r3, #21845	; 0x5555
 80016c4:	827b      	strh	r3, [r7, #18]

  /* Compute page end-address */
  EndAddress = (uint32_t)(Address + (PAGE_SIZE - 4U));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <EE_VerifyPageFullyErased+0x50>)
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from end */
  while (Address <= EndAddress)
 80016ce:	e00d      	b.n	80016ec <EE_VerifyPageFullyErased+0x38>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	827b      	strh	r3, [r7, #18]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80016d6:	8a7b      	ldrh	r3, [r7, #18]
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	4293      	cmp	r3, r2
 80016de:	d002      	beq.n	80016e6 <EE_VerifyPageFullyErased+0x32>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

      break;
 80016e4:	e006      	b.n	80016f4 <EE_VerifyPageFullyErased+0x40>
    }
    /* Next address location */
    Address = Address + 4;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	607b      	str	r3, [r7, #4]
  while (Address <= EndAddress)
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d9ed      	bls.n	80016d0 <EE_VerifyPageFullyErased+0x1c>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	b29b      	uxth	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	0001fffc 	.word	0x0001fffc

08001708 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001714:	2300      	movs	r3, #0
 8001716:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001718:	f245 5355 	movw	r3, #21845	; 0x5555
 800171c:	81bb      	strh	r3, [r7, #12]
 800171e:	2301      	movs	r3, #1
 8001720:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <EE_ReadVariable+0x88>)
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <EE_ReadVariable+0x88>)
 8001728:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f96a 	bl	8001a04 <EE_FindValidPage>
 8001730:	4603      	mov	r3, r0
 8001732:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	2bab      	cmp	r3, #171	; 0xab
 8001738:	d101      	bne.n	800173e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800173a:	23ab      	movs	r3, #171	; 0xab
 800173c:	e024      	b.n	8001788 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001744:	045b      	lsls	r3, r3, #17
 8001746:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001748:	89fb      	ldrh	r3, [r7, #14]
 800174a:	3301      	adds	r3, #1
 800174c:	045a      	lsls	r2, r3, #17
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <EE_ReadVariable+0x8c>)
 8001750:	4413      	add	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 8001754:	e012      	b.n	800177c <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800175c:	89ba      	ldrh	r2, [r7, #12]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	429a      	cmp	r2, r3
 8001762:	d108      	bne.n	8001776 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	3b20      	subs	r3, #32
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	b29a      	uxth	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

      break;
 8001774:	e007      	b.n	8001786 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	3b40      	subs	r3, #64	; 0x40
 800177a:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3320      	adds	r3, #32
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	429a      	cmp	r2, r3
 8001784:	d8e7      	bhi.n	8001756 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001786:	8afb      	ldrh	r3, [r7, #22]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	081c0000 	.word	0x081c0000
 8001794:	081bffe0 	.word	0x081bffe0

08001798 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	80fb      	strh	r3, [r7, #6]
 80017a4:	4613      	mov	r3, r2
 80017a6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80017ac:	88ba      	ldrh	r2, [r7, #4]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f96c 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80017b8:	4603      	mov	r3, r0
 80017ba:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	2b80      	cmp	r3, #128	; 0x80
 80017c0:	d107      	bne.n	80017d2 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80017c2:	88ba      	ldrh	r2, [r7, #4]
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fa13 	bl	8001bf4 <EE_PageTransfer>
 80017ce:	4603      	mov	r3, r0
 80017d0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80017d2:	89fb      	ldrh	r3, [r7, #14]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t SectorError = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2220      	movs	r2, #32
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f018 ff8a 	bl	801a70c <memset>

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Banks = FLASH_BANK_2 ;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.Sector = PAGE0_ID;
 8001800:	2306      	movs	r3, #6
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.NbSectors = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001808:	2320      	movs	r3, #32
 800180a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800180c:	487a      	ldr	r0, [pc, #488]	; (80019f8 <EE_Format+0x21c>)
 800180e:	f7ff ff51 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d14b      	bne.n	80018b0 <EE_Format+0xd4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001818:	f3bf 8f4f 	dsb	sy
}
 800181c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800181e:	f3bf 8f6f 	isb	sy
}
 8001822:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <EE_Format+0x220>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	4a74      	ldr	r2, [pc, #464]	; (80019fc <EE_Format+0x220>)
 800182a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800182e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001830:	4b72      	ldr	r3, [pc, #456]	; (80019fc <EE_Format+0x220>)
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001838:	f3bf 8f4f 	dsb	sy
}
 800183c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800183e:	f3bf 8f6f 	isb	sy
}
 8001842:	bf00      	nop
}
 8001844:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001846:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800184a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f009 fc6f 	bl	800b134 <HAL_FLASHEx_Erase>
 8001856:	4603      	mov	r3, r0
 8001858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800185c:	4b67      	ldr	r3, [pc, #412]	; (80019fc <EE_Format+0x220>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d11b      	bne.n	80018a0 <EE_Format+0xc4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001868:	f3bf 8f4f 	dsb	sy
}
 800186c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800186e:	f3bf 8f6f 	isb	sy
}
 8001872:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <EE_Format+0x220>)
 8001876:	2200      	movs	r2, #0
 8001878:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800187c:	f3bf 8f4f 	dsb	sy
}
 8001880:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001882:	f3bf 8f6f 	isb	sy
}
 8001886:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001888:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <EE_Format+0x220>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	4a5b      	ldr	r2, [pc, #364]	; (80019fc <EE_Format+0x220>)
 800188e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001892:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001894:	f3bf 8f4f 	dsb	sy
}
 8001898:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800189a:	f3bf 8f6f 	isb	sy
}
 800189e:	e000      	b.n	80018a2 <EE_Format+0xc6>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018a0:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80018a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <EE_Format+0xd4>
    {
      return FlashStatus;
 80018aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018ae:	e09e      	b.n	80019ee <EE_Format+0x212>
  __ASM volatile ("dsb 0xF":::"memory");
 80018b0:	f3bf 8f4f 	dsb	sy
}
 80018b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018b6:	f3bf 8f6f 	isb	sy
}
 80018ba:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <EE_Format+0x220>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <EE_Format+0x220>)
 80018c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018c6:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80018c8:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <EE_Format+0x220>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80018d0:	f3bf 8f4f 	dsb	sy
}
 80018d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018d6:	f3bf 8f6f 	isb	sy
}
 80018da:	bf00      	nop
}
 80018dc:	bf00      	nop
    }
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	461a      	mov	r2, r3
 80018e2:	4945      	ldr	r1, [pc, #276]	; (80019f8 <EE_Format+0x21c>)
 80018e4:	2001      	movs	r0, #1
 80018e6:	f009 fabd 	bl	800ae64 <HAL_FLASH_Program>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <EE_Format+0x220>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11b      	bne.n	8001934 <EE_Format+0x158>
  __ASM volatile ("dsb 0xF":::"memory");
 80018fc:	f3bf 8f4f 	dsb	sy
}
 8001900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001902:	f3bf 8f6f 	isb	sy
}
 8001906:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001908:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <EE_Format+0x220>)
 800190a:	2200      	movs	r2, #0
 800190c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001910:	f3bf 8f4f 	dsb	sy
}
 8001914:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001916:	f3bf 8f6f 	isb	sy
}
 800191a:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800191c:	4b37      	ldr	r3, [pc, #220]	; (80019fc <EE_Format+0x220>)
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	4a36      	ldr	r2, [pc, #216]	; (80019fc <EE_Format+0x220>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001926:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001928:	f3bf 8f4f 	dsb	sy
}
 800192c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800192e:	f3bf 8f6f 	isb	sy
}
 8001932:	e000      	b.n	8001936 <EE_Format+0x15a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001934:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001936:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <EE_Format+0x168>
  {
    return FlashStatus;
 800193e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001942:	e054      	b.n	80019ee <EE_Format+0x212>
  }

  pEraseInit.Sector = PAGE1_ID;
 8001944:	2307      	movs	r3, #7
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001948:	482d      	ldr	r0, [pc, #180]	; (8001a00 <EE_Format+0x224>)
 800194a:	f7ff feb3 	bl	80016b4 <EE_VerifyPageFullyErased>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d14b      	bne.n	80019ec <EE_Format+0x210>
  __ASM volatile ("dsb 0xF":::"memory");
 8001954:	f3bf 8f4f 	dsb	sy
}
 8001958:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800195a:	f3bf 8f6f 	isb	sy
}
 800195e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <EE_Format+0x220>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <EE_Format+0x220>)
 8001966:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800196a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <EE_Format+0x220>)
 800196e:	2200      	movs	r2, #0
 8001970:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001974:	f3bf 8f4f 	dsb	sy
}
 8001978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800197a:	f3bf 8f6f 	isb	sy
}
 800197e:	bf00      	nop
}
 8001980:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001982:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f009 fbd1 	bl	800b134 <HAL_FLASHEx_Erase>
 8001992:	4603      	mov	r3, r0
 8001994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <EE_Format+0x220>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11b      	bne.n	80019dc <EE_Format+0x200>
  __ASM volatile ("dsb 0xF":::"memory");
 80019a4:	f3bf 8f4f 	dsb	sy
}
 80019a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019aa:	f3bf 8f6f 	isb	sy
}
 80019ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <EE_Format+0x220>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80019b8:	f3bf 8f4f 	dsb	sy
}
 80019bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019be:	f3bf 8f6f 	isb	sy
}
 80019c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <EE_Format+0x220>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <EE_Format+0x220>)
 80019ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80019d0:	f3bf 8f4f 	dsb	sy
}
 80019d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019d6:	f3bf 8f6f 	isb	sy
}
 80019da:	e000      	b.n	80019de <EE_Format+0x202>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80019dc:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80019de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <EE_Format+0x210>
    {
      return FlashStatus;
 80019e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019ea:	e000      	b.n	80019ee <EE_Format+0x212>
    }
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3740      	adds	r7, #64	; 0x40
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	081c0000 	.word	0x081c0000
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	081e0000 	.word	0x081e0000

08001a04 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	81fb      	strh	r3, [r7, #14]
 8001a12:	2306      	movs	r3, #6
 8001a14:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <EE_FindValidPage+0x84>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <EE_FindValidPage+0x88>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <EE_FindValidPage+0x5c>
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d125      	bne.n	8001a78 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001a2c:	89bb      	ldrh	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d108      	bne.n	8001a44 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e01c      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001a40:	2301      	movs	r3, #1
 8001a42:	e01a      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d108      	bne.n	8001a5c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8001a4a:	89bb      	ldrh	r3, [r7, #12]
 8001a4c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001a54:	2301      	movs	r3, #1
 8001a56:	e010      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e00e      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001a5c:	23ab      	movs	r3, #171	; 0xab
 8001a5e:	e00c      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8001a60:	89fb      	ldrh	r3, [r7, #14]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8001a66:	2300      	movs	r3, #0
 8001a68:	e007      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8001a6a:	89bb      	ldrh	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001a70:	2301      	movs	r3, #1
 8001a72:	e002      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001a74:	23ab      	movs	r3, #171	; 0xab
 8001a76:	e000      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8001a78:	2300      	movs	r3, #0
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	081c0000 	.word	0x081c0000
 8001a8c:	081e0000 	.word	0x081e0000

08001a90 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b096      	sub	sp, #88	; 0x58
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	80fb      	strh	r3, [r7, #6]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8001aac:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <EE_VerifyPageFullWriteVariable+0x154>)
 8001aae:	657b      	str	r3, [r7, #84]	; 0x54
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <EE_VerifyPageFullWriteVariable+0x158>)
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t data32[8] = {Data};
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	2220      	movs	r2, #32
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f018 fe25 	bl	801a70c <memset>
 8001ac2:	88bb      	ldrh	r3, [r7, #4]
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2220      	movs	r2, #32
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f018 fe1c 	bl	801a70c <memset>
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff ff93 	bl	8001a04 <EE_FindValidPage>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001ae4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae8:	2bab      	cmp	r3, #171	; 0xab
 8001aea:	d101      	bne.n	8001af0 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 8001aec:	23ab      	movs	r3, #171	; 0xab
 8001aee:	e075      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001af0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001af4:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001af8:	045b      	lsls	r3, r3, #17
 8001afa:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8001afc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b00:	3301      	adds	r3, #1
 8001b02:	045a      	lsls	r2, r3, #17
 8001b04:	4b39      	ldr	r3, [pc, #228]	; (8001bec <EE_VerifyPageFullWriteVariable+0x15c>)
 8001b06:	4413      	add	r3, r2
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("dsb 0xF":::"memory");
 8001b0a:	f3bf 8f4f 	dsb	sy
}
 8001b0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b10:	f3bf 8f6f 	isb	sy
}
 8001b14:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4a35      	ldr	r2, [pc, #212]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b20:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2a:	f3bf 8f4f 	dsb	sy
}
 8001b2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b30:	f3bf 8f6f 	isb	sy
}
 8001b34:	bf00      	nop
}
 8001b36:	bf00      	nop

  SCB_DisableICache();

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8001b38:	e028      	b.n	8001b8c <EE_VerifyPageFullWriteVariable+0xfc>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b42:	d120      	bne.n	8001b86 <EE_VerifyPageFullWriteVariable+0xf6>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f009 f989 	bl	800ae64 <HAL_FLASH_Program>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001b58:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <EE_VerifyPageFullWriteVariable+0xd8>
      {
        return FlashStatus;
 8001b60:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	e039      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8001b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6a:	3320      	adds	r3, #32
 8001b6c:	f107 020c 	add.w	r2, r7, #12
 8001b70:	4619      	mov	r1, r3
 8001b72:	2001      	movs	r0, #1
 8001b74:	f009 f976 	bl	800ae64 <HAL_FLASH_Program>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 8001b7e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	e02a      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	3340      	adds	r3, #64	; 0x40
 8001b8a:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 8001b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d3d2      	bcc.n	8001b3a <EE_VerifyPageFullWriteVariable+0xaa>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11b      	bne.n	8001bd8 <EE_VerifyPageFullWriteVariable+0x148>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba0:	f3bf 8f4f 	dsb	sy
}
 8001ba4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ba6:	f3bf 8f6f 	isb	sy
}
 8001baa:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb4:	f3bf 8f4f 	dsb	sy
}
 8001bb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bba:	f3bf 8f6f 	isb	sy
}
 8001bbe:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bcc:	f3bf 8f4f 	dsb	sy
}
 8001bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bd2:	f3bf 8f6f 	isb	sy
}
 8001bd6:	e000      	b.n	8001bda <EE_VerifyPageFullWriteVariable+0x14a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001bd8:	bf00      	nop
    }
  }
  SCB_EnableICache();

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001bda:	2380      	movs	r3, #128	; 0x80
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3758      	adds	r7, #88	; 0x58
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	081c0000 	.word	0x081c0000
 8001be8:	081e0000 	.word	0x081e0000
 8001bec:	081bffff 	.word	0x081bffff
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09c      	sub	sp, #112	; 0x70
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	80fb      	strh	r3, [r7, #6]
 8001c00:	4613      	mov	r3, r2
 8001c02:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001c0a:	4bc3      	ldr	r3, [pc, #780]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint16_t OldPageId=0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  uint32_t SectorError = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8001c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c34:	2220      	movs	r2, #32
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f018 fd67 	bl	801a70c <memset>
  uint32_t receive[8] = {0xEEEE};
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2220      	movs	r2, #32
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f018 fd60 	bl	801a70c <memset>
 8001c4c:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 8001c50:	60bb      	str	r3, [r7, #8]
  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fed6 	bl	8001a04 <EE_FindValidPage>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  if (ValidPage == PAGE1)       /* Page1 valid */
 8001c5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <EE_PageTransfer+0x7e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8001c66:	4bac      	ldr	r3, [pc, #688]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c68:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c70:	e00b      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8001c72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <EE_PageTransfer+0x92>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8001c7a:	4ba8      	ldr	r3, [pc, #672]	; (8001f1c <EE_PageTransfer+0x328>)
 8001c7c:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8001c7e:	2306      	movs	r3, #6
 8001c80:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c84:	e001      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001c86:	23ab      	movs	r3, #171	; 0xab
 8001c88:	e142      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c8a:	f3bf 8f4f 	dsb	sy
}
 8001c8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c90:	f3bf 8f6f 	isb	sy
}
 8001c94:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001c96:	4ba2      	ldr	r3, [pc, #648]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4aa1      	ldr	r2, [pc, #644]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ca0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ca2:	4b9f      	ldr	r3, [pc, #636]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001caa:	f3bf 8f4f 	dsb	sy
}
 8001cae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb0:	f3bf 8f6f 	isb	sy
}
 8001cb4:	bf00      	nop
}
 8001cb6:	bf00      	nop
  }

  /* Set the new Page status to RECEIVE_DATA status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f009 f8cf 	bl	800ae64 <HAL_FLASH_Program>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ccc:	4b94      	ldr	r3, [pc, #592]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11b      	bne.n	8001d10 <EE_PageTransfer+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd8:	f3bf 8f4f 	dsb	sy
}
 8001cdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cde:	f3bf 8f6f 	isb	sy
}
 8001ce2:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ce4:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001cec:	f3bf 8f4f 	dsb	sy
}
 8001cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cf2:	f3bf 8f6f 	isb	sy
}
 8001cf6:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001cf8:	4b89      	ldr	r3, [pc, #548]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	4a88      	ldr	r2, [pc, #544]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d02:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d04:	f3bf 8f4f 	dsb	sy
}
 8001d08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d0a:	f3bf 8f6f 	isb	sy
}
 8001d0e:	e000      	b.n	8001d12 <EE_PageTransfer+0x11e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d10:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001d12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <EE_PageTransfer+0x12e>
  {
    return FlashStatus;
 8001d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	e0f6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001d22:	88ba      	ldrh	r2, [r7, #4]
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff feb1 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8001d34:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <EE_PageTransfer+0x14e>
  {
    return EepromStatus;
 8001d3c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d40:	e0e6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001d48:	e031      	b.n	8001dae <EE_PageTransfer+0x1ba>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8001d4a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d4e:	4a75      	ldr	r2, [pc, #468]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d024      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001d5a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d5e:	4a71      	ldr	r2, [pc, #452]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d64:	4970      	ldr	r1, [pc, #448]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fcce 	bl	8001708 <EE_ReadVariable>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8001d72:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d014      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001d7a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d7e:	4a69      	ldr	r2, [pc, #420]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d84:	4a68      	ldr	r2, [pc, #416]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d86:	8812      	ldrh	r2, [r2, #0]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fe80 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8001d96:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
        {
          return EepromStatus;
 8001d9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001da2:	e0b5      	b.n	8001f10 <EE_PageTransfer+0x31c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001da4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001da8:	3301      	adds	r3, #1
 8001daa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001dae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001db2:	2b1c      	cmp	r3, #28
 8001db4:	d9c9      	bls.n	8001d4a <EE_PageTransfer+0x156>
        }
      }
    }
  }

  HAL_FLASH_Unlock();
 8001db6:	f009 f8e7 	bl	800af88 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <EE_PageTransfer+0x338>)
 8001dbc:	f44f 028e 	mov.w	r2, #4653056	; 0x470000
 8001dc0:	615a      	str	r2, [r3, #20]
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  pEraseInit.Banks = FLASH_BANK_2 ;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pEraseInit.Sector = OldPageId;
 8001dca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001dce:	653b      	str	r3, [r7, #80]	; 0x50
  pEraseInit.NbSectors = 1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	657b      	str	r3, [r7, #84]	; 0x54
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8001dd8:	f3bf 8f4f 	dsb	sy
}
 8001ddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dde:	f3bf 8f6f 	isb	sy
}
 8001de2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001de4:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	4a4d      	ldr	r2, [pc, #308]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001dea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001dee:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001df8:	f3bf 8f4f 	dsb	sy
}
 8001dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dfe:	f3bf 8f6f 	isb	sy
}
 8001e02:	bf00      	nop
}
 8001e04:	bf00      	nop

  /* Erase the old Page: Set old Page status to ERASED status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e06:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f009 f98f 	bl	800b134 <HAL_FLASHEx_Erase>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11b      	bne.n	8001e60 <EE_PageTransfer+0x26c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e28:	f3bf 8f4f 	dsb	sy
}
 8001e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e2e:	f3bf 8f6f 	isb	sy
}
 8001e32:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3c:	f3bf 8f4f 	dsb	sy
}
 8001e40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e42:	f3bf 8f6f 	isb	sy
}
 8001e46:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e54:	f3bf 8f4f 	dsb	sy
}
 8001e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e5a:	f3bf 8f6f 	isb	sy
}
 8001e5e:	e000      	b.n	8001e62 <EE_PageTransfer+0x26e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e60:	bf00      	nop
  SCB_EnableICache();
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <EE_PageTransfer+0x27e>
  {
    return FlashStatus;
 8001e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	e04e      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e72:	f3bf 8f4f 	dsb	sy
}
 8001e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e78:	f3bf 8f6f 	isb	sy
}
 8001e7c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e88:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e92:	f3bf 8f4f 	dsb	sy
}
 8001e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e98:	f3bf 8f6f 	isb	sy
}
 8001e9c:	bf00      	nop
}
 8001e9e:	bf00      	nop
  }

  /* Set new Page status to VALID_PAGE status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8001ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f008 ffdb 	bl	800ae64 <HAL_FLASH_Program>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11b      	bne.n	8001ef8 <EE_PageTransfer+0x304>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec6:	f3bf 8f6f 	isb	sy
}
 8001eca:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed4:	f3bf 8f4f 	dsb	sy
}
 8001ed8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001eda:	f3bf 8f6f 	isb	sy
}
 8001ede:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eec:	f3bf 8f4f 	dsb	sy
}
 8001ef0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ef2:	f3bf 8f6f 	isb	sy
}
 8001ef6:	e000      	b.n	8001efa <EE_PageTransfer+0x306>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ef8:	bf00      	nop
  SCB_EnableICache();
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001efa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <EE_PageTransfer+0x316>
  {
    return FlashStatus;
 8001f02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	e002      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001f0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f0e:	b29b      	uxth	r3, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3770      	adds	r7, #112	; 0x70
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	081c0000 	.word	0x081c0000
 8001f1c:	081e0000 	.word	0x081e0000
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	24000000 	.word	0x24000000
 8001f28:	240003a0 	.word	0x240003a0
 8001f2c:	52002000 	.word	0x52002000

08001f30 <__NVIC_SystemReset>:
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001f34:	f3bf 8f4f 	dsb	sy
}
 8001f38:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <__NVIC_SystemReset+0x24>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001f42:	4904      	ldr	r1, [pc, #16]	; (8001f54 <__NVIC_SystemReset+0x24>)
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__NVIC_SystemReset+0x28>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f4a:	f3bf 8f4f 	dsb	sy
}
 8001f4e:	bf00      	nop
    __NOP();
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <__NVIC_SystemReset+0x20>
 8001f54:	e000ed00 	.word	0xe000ed00
 8001f58:	05fa0004 	.word	0x05fa0004

08001f5c <handle_error>:
 * set the previous error to whatever error we are currently handling, send an error packet,
 * and enter IDLE mode. Additional actions are taken depending on the error category.
 *
 * @param error Error given by the caller.
 */
void handle_error(ERROR_STRUCT error) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	80b8      	strh	r0, [r7, #4]
#ifdef ERROR_HANDLING_ENABLED
	osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <handle_error+0x54>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2102      	movs	r1, #2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f015 fa06 	bl	801737c <osEventFlagsSet>
	increment_error_counter(error);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f84f 	bl	8002014 <increment_error_counter>
	set_previous_error(error);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f8b0 	bl	80020dc <set_previous_error>
	send_current_error_packet(error);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 fa59 	bl	8002434 <send_current_error_packet>
	send_junk_packet();
 8001f82:	f000 fa71 	bl	8002468 <send_junk_packet>
	switch (error.category) {
 8001f86:	793b      	ldrb	r3, [r7, #4]
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d008      	beq.n	8001f9e <handle_error+0x42>
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	dc08      	bgt.n	8001fa2 <handle_error+0x46>
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <handle_error+0x3e>
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d006      	beq.n	8001fa6 <handle_error+0x4a>
	case EC_peripheral:
		NVIC_SystemReset();
		break;
	default:
		// Should not be possible to get here
		break;
 8001f98:	e003      	b.n	8001fa2 <handle_error+0x46>
		NVIC_SystemReset();
 8001f9a:	f7ff ffc9 	bl	8001f30 <__NVIC_SystemReset>
		NVIC_SystemReset();
 8001f9e:	f7ff ffc7 	bl	8001f30 <__NVIC_SystemReset>
		break;
 8001fa2:	bf00      	nop
 8001fa4:	e000      	b.n	8001fa8 <handle_error+0x4c>
		break;
 8001fa6:	bf00      	nop
	}
#endif
}
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	24001a98 	.word	0x24001a98

08001fb4 <error_counter_init>:

/**
 * @breif Initializes the EE, reads the error counters from the EE, and stores them in local_cpy.
 */
void error_counter_init() {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8001fba:	f008 ffe5 	bl	800af88 <HAL_FLASH_Unlock>
	if (EE_Init() != EE_OK) {
 8001fbe:	f7fe feeb 	bl	8000d98 <EE_Init>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <error_counter_init+0x18>
		Error_Handler();
 8001fc8:	f001 fd5a 	bl	8003a80 <Error_Handler>
	}

	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8001fcc:	2300      	movs	r3, #0
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	e013      	b.n	8001ffa <error_counter_init+0x46>
		if ((EE_ReadVariable(VirtAddVarTab[i], &local_cpy[i])) != HAL_OK) {
 8001fd2:	4a0e      	ldr	r2, [pc, #56]	; (800200c <error_counter_init+0x58>)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	490c      	ldr	r1, [pc, #48]	; (8002010 <error_counter_init+0x5c>)
 8001fe0:	440b      	add	r3, r1
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	f7ff fb8f 	bl	8001708 <EE_ReadVariable>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <error_counter_init+0x40>
			Error_Handler();
 8001ff0:	f001 fd46 	bl	8003a80 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b1a      	cmp	r3, #26
 8001ffe:	dde8      	ble.n	8001fd2 <error_counter_init+0x1e>
		}
	}
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	24000000 	.word	0x24000000
 8002010:	240003a4 	.word	0x240003a4

08002014 <increment_error_counter>:
 * local_cpy array. To see what index a particular error is stored in, just check the value
 * each category or detail is assigned in the header file.
 *
 * @param error Error given by the caller.
 */
void increment_error_counter(ERROR_STRUCT error) {
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	80b8      	strh	r0, [r7, #4]
	local_cpy[error.category]++;
 800201c:	793b      	ldrb	r3, [r7, #4]
 800201e:	4a0b      	ldr	r2, [pc, #44]	; (800204c <increment_error_counter+0x38>)
 8002020:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002024:	3201      	adds	r2, #1
 8002026:	b291      	uxth	r1, r2
 8002028:	4a08      	ldr	r2, [pc, #32]	; (800204c <increment_error_counter+0x38>)
 800202a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	local_cpy[error.detail]++;
 800202e:	797b      	ldrb	r3, [r7, #5]
 8002030:	4a06      	ldr	r2, [pc, #24]	; (800204c <increment_error_counter+0x38>)
 8002032:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002036:	3201      	adds	r2, #1
 8002038:	b291      	uxth	r1, r2
 800203a:	4a04      	ldr	r2, [pc, #16]	; (800204c <increment_error_counter+0x38>)
 800203c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	update_error_counter();
 8002040:	f000 f806 	bl	8002050 <update_error_counter>
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	240003a4 	.word	0x240003a4

08002050 <update_error_counter>:

/**
 * @brief Writes the contents of local_cpy to the EE, excluding the previous error codes.
 */
void update_error_counter(){
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	e013      	b.n	8002084 <update_error_counter+0x34>
		if ((EE_WriteVariable(VirtAddVarTab[i], local_cpy[i])) != HAL_OK) {
 800205c:	4a0d      	ldr	r2, [pc, #52]	; (8002094 <update_error_counter+0x44>)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002064:	490c      	ldr	r1, [pc, #48]	; (8002098 <update_error_counter+0x48>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800206c:	4619      	mov	r1, r3
 800206e:	4610      	mov	r0, r2
 8002070:	f7ff fb92 	bl	8001798 <EE_WriteVariable>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <update_error_counter+0x2e>
			Error_Handler();
 800207a:	f001 fd01 	bl	8003a80 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3301      	adds	r3, #1
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b1a      	cmp	r3, #26
 8002088:	dde8      	ble.n	800205c <update_error_counter+0xc>
		}
	}
}
 800208a:	bf00      	nop
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	24000000 	.word	0x24000000
 8002098:	240003a4 	.word	0x240003a4

0800209c <reset_error_counters>:

/**
 * @brief Resets all error counters in the EE to 0.
 */
void reset_error_counters() {
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 80020a2:	2300      	movs	r3, #0
 80020a4:	607b      	str	r3, [r7, #4]
 80020a6:	e00f      	b.n	80020c8 <reset_error_counters+0x2c>
		if ((EE_WriteVariable(VirtAddVarTab[i], 0)) != HAL_OK) {
 80020a8:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <reset_error_counters+0x3c>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020b0:	2100      	movs	r1, #0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fb70 	bl	8001798 <EE_WriteVariable>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <reset_error_counters+0x26>
			Error_Handler();
 80020be:	f001 fcdf 	bl	8003a80 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3301      	adds	r3, #1
 80020c6:	607b      	str	r3, [r7, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b1a      	cmp	r3, #26
 80020cc:	ddec      	ble.n	80020a8 <reset_error_counters+0xc>
		}
	}
}
 80020ce:	bf00      	nop
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	24000000 	.word	0x24000000

080020dc <set_previous_error>:
/**
 * @brief Sets previous error code in the EE.
 *
 * @param error Previous error code in EE is set to this.
 */
void set_previous_error(ERROR_STRUCT error) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	80b8      	strh	r0, [r7, #4]
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], error.category)) != HAL_OK) {
 80020e4:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <set_previous_error+0x44>)
 80020e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020e8:	793a      	ldrb	r2, [r7, #4]
 80020ea:	b292      	uxth	r2, r2
 80020ec:	4611      	mov	r1, r2
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fb52 	bl	8001798 <EE_WriteVariable>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <set_previous_error+0x22>
		Error_Handler();
 80020fa:	f001 fcc1 	bl	8003a80 <Error_Handler>
	}
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], error.detail)) != HAL_OK) {
 80020fe:	4b08      	ldr	r3, [pc, #32]	; (8002120 <set_previous_error+0x44>)
 8002100:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002102:	797a      	ldrb	r2, [r7, #5]
 8002104:	b292      	uxth	r2, r2
 8002106:	4611      	mov	r1, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fb45 	bl	8001798 <EE_WriteVariable>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <set_previous_error+0x3c>
		Error_Handler();
 8002114:	f001 fcb4 	bl	8003a80 <Error_Handler>
	}
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	24000000 	.word	0x24000000

08002124 <get_previous_error>:
/**
 * @brief Reads the previous error codes from EE
 *
 * @return Error populated with retrieved category and detail.
 */
ERROR_STRUCT get_previous_error() {
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
	ERROR_STRUCT prev_error;
	uint16_t category;
	uint16_t detail;

	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], &category)) != HAL_OK) {
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <get_previous_error+0x5c>)
 800212c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800212e:	1dba      	adds	r2, r7, #6
 8002130:	4611      	mov	r1, r2
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fae8 	bl	8001708 <EE_ReadVariable>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <get_previous_error+0x1e>
		Error_Handler();
 800213e:	f001 fc9f 	bl	8003a80 <Error_Handler>
	}
	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], &detail)) != HAL_OK) {
 8002142:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <get_previous_error+0x5c>)
 8002144:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002146:	1d3a      	adds	r2, r7, #4
 8002148:	4611      	mov	r1, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fadc 	bl	8001708 <EE_ReadVariable>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <get_previous_error+0x36>
		Error_Handler();
 8002156:	f001 fc93 	bl	8003a80 <Error_Handler>
	}

	prev_error.category = category;
 800215a:	88fb      	ldrh	r3, [r7, #6]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	723b      	strb	r3, [r7, #8]
	prev_error.detail = detail;
 8002160:	88bb      	ldrh	r3, [r7, #4]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	727b      	strb	r3, [r7, #9]

	return prev_error;
 8002166:	893b      	ldrh	r3, [r7, #8]
 8002168:	81bb      	strh	r3, [r7, #12]
 800216a:	2300      	movs	r3, #0
 800216c:	7b3a      	ldrb	r2, [r7, #12]
 800216e:	f362 0307 	bfi	r3, r2, #0, #8
 8002172:	7b7a      	ldrb	r2, [r7, #13]
 8002174:	f362 230f 	bfi	r3, r2, #8, #8
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	24000000 	.word	0x24000000

08002184 <send_error_counter_packet>:
 * @brief Creates and sends a packet containing all 27 error counters.
 *
 * There is an error counter for every single category and detail.
 * This type of packet is only sent during sync.
 */
void send_error_counter_packet() {
 8002184:	b580      	push	{r7, lr}
 8002186:	b08e      	sub	sp, #56	; 0x38
 8002188:	af00      	add	r7, sp, #0
	uint8_t buffer[ERROR_COUNTER_PACKET_SIZE];

	buffer[0] = ERROR_COUNTER_PACKET_SYNC;
 800218a:	23cc      	movs	r3, #204	; 0xcc
 800218c:	703b      	strb	r3, [r7, #0]
	buffer[1] = ERROR_COUNTER_PACKET_SYNC;
 800218e:	23cc      	movs	r3, #204	; 0xcc
 8002190:	707b      	strb	r3, [r7, #1]
	buffer[2] = ((local_cpy[0] & 0xFF00) >> 8);
 8002192:	4b98      	ldr	r3, [pc, #608]	; (80023f4 <send_error_counter_packet+0x270>)
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	0a1b      	lsrs	r3, r3, #8
 8002198:	b29b      	uxth	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	70bb      	strb	r3, [r7, #2]
	buffer[3] = (local_cpy[0] & 0xFF);
 800219e:	4b95      	ldr	r3, [pc, #596]	; (80023f4 <send_error_counter_packet+0x270>)
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	70fb      	strb	r3, [r7, #3]
	buffer[4] = ((local_cpy[1] & 0xFF00) >> 8);
 80021a6:	4b93      	ldr	r3, [pc, #588]	; (80023f4 <send_error_counter_packet+0x270>)
 80021a8:	885b      	ldrh	r3, [r3, #2]
 80021aa:	0a1b      	lsrs	r3, r3, #8
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	713b      	strb	r3, [r7, #4]
	buffer[5] = (local_cpy[1] & 0xFF);
 80021b2:	4b90      	ldr	r3, [pc, #576]	; (80023f4 <send_error_counter_packet+0x270>)
 80021b4:	885b      	ldrh	r3, [r3, #2]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	717b      	strb	r3, [r7, #5]
	buffer[6] = ((local_cpy[2] & 0xFF00) >> 8);
 80021ba:	4b8e      	ldr	r3, [pc, #568]	; (80023f4 <send_error_counter_packet+0x270>)
 80021bc:	889b      	ldrh	r3, [r3, #4]
 80021be:	0a1b      	lsrs	r3, r3, #8
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	71bb      	strb	r3, [r7, #6]
	buffer[7] = (local_cpy[2] & 0xFF);
 80021c6:	4b8b      	ldr	r3, [pc, #556]	; (80023f4 <send_error_counter_packet+0x270>)
 80021c8:	889b      	ldrh	r3, [r3, #4]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	71fb      	strb	r3, [r7, #7]
	buffer[8] = ((local_cpy[3] & 0xFF00) >> 8);
 80021ce:	4b89      	ldr	r3, [pc, #548]	; (80023f4 <send_error_counter_packet+0x270>)
 80021d0:	88db      	ldrh	r3, [r3, #6]
 80021d2:	0a1b      	lsrs	r3, r3, #8
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	723b      	strb	r3, [r7, #8]
	buffer[9] = (local_cpy[3] & 0xFF);
 80021da:	4b86      	ldr	r3, [pc, #536]	; (80023f4 <send_error_counter_packet+0x270>)
 80021dc:	88db      	ldrh	r3, [r3, #6]
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	727b      	strb	r3, [r7, #9]
	buffer[10] = ((local_cpy[4] & 0xFF00) >> 8);
 80021e2:	4b84      	ldr	r3, [pc, #528]	; (80023f4 <send_error_counter_packet+0x270>)
 80021e4:	891b      	ldrh	r3, [r3, #8]
 80021e6:	0a1b      	lsrs	r3, r3, #8
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	72bb      	strb	r3, [r7, #10]
	buffer[11] = (local_cpy[4] & 0xFF);
 80021ee:	4b81      	ldr	r3, [pc, #516]	; (80023f4 <send_error_counter_packet+0x270>)
 80021f0:	891b      	ldrh	r3, [r3, #8]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	72fb      	strb	r3, [r7, #11]
	buffer[12] = ((local_cpy[5] & 0xFF00) >> 8);
 80021f6:	4b7f      	ldr	r3, [pc, #508]	; (80023f4 <send_error_counter_packet+0x270>)
 80021f8:	895b      	ldrh	r3, [r3, #10]
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	733b      	strb	r3, [r7, #12]
	buffer[13] = (local_cpy[5] & 0xFF);
 8002202:	4b7c      	ldr	r3, [pc, #496]	; (80023f4 <send_error_counter_packet+0x270>)
 8002204:	895b      	ldrh	r3, [r3, #10]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	737b      	strb	r3, [r7, #13]
	buffer[14] = ((local_cpy[6] & 0xFF00) >> 8);
 800220a:	4b7a      	ldr	r3, [pc, #488]	; (80023f4 <send_error_counter_packet+0x270>)
 800220c:	899b      	ldrh	r3, [r3, #12]
 800220e:	0a1b      	lsrs	r3, r3, #8
 8002210:	b29b      	uxth	r3, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	73bb      	strb	r3, [r7, #14]
	buffer[15] = (local_cpy[6] & 0xFF);
 8002216:	4b77      	ldr	r3, [pc, #476]	; (80023f4 <send_error_counter_packet+0x270>)
 8002218:	899b      	ldrh	r3, [r3, #12]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	73fb      	strb	r3, [r7, #15]
	buffer[16] = ((local_cpy[7] & 0xFF00) >> 8);
 800221e:	4b75      	ldr	r3, [pc, #468]	; (80023f4 <send_error_counter_packet+0x270>)
 8002220:	89db      	ldrh	r3, [r3, #14]
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	b29b      	uxth	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	743b      	strb	r3, [r7, #16]
	buffer[17] = (local_cpy[7] & 0xFF);
 800222a:	4b72      	ldr	r3, [pc, #456]	; (80023f4 <send_error_counter_packet+0x270>)
 800222c:	89db      	ldrh	r3, [r3, #14]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	747b      	strb	r3, [r7, #17]
	buffer[18] = ((local_cpy[8] & 0xFF00) >> 8);
 8002232:	4b70      	ldr	r3, [pc, #448]	; (80023f4 <send_error_counter_packet+0x270>)
 8002234:	8a1b      	ldrh	r3, [r3, #16]
 8002236:	0a1b      	lsrs	r3, r3, #8
 8002238:	b29b      	uxth	r3, r3
 800223a:	b2db      	uxtb	r3, r3
 800223c:	74bb      	strb	r3, [r7, #18]
	buffer[19] = (local_cpy[8] & 0xFF);
 800223e:	4b6d      	ldr	r3, [pc, #436]	; (80023f4 <send_error_counter_packet+0x270>)
 8002240:	8a1b      	ldrh	r3, [r3, #16]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	74fb      	strb	r3, [r7, #19]
	buffer[20] = ((local_cpy[9] & 0xFF00) >> 8);
 8002246:	4b6b      	ldr	r3, [pc, #428]	; (80023f4 <send_error_counter_packet+0x270>)
 8002248:	8a5b      	ldrh	r3, [r3, #18]
 800224a:	0a1b      	lsrs	r3, r3, #8
 800224c:	b29b      	uxth	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	753b      	strb	r3, [r7, #20]
	buffer[21] = (local_cpy[9] & 0xFF);
 8002252:	4b68      	ldr	r3, [pc, #416]	; (80023f4 <send_error_counter_packet+0x270>)
 8002254:	8a5b      	ldrh	r3, [r3, #18]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	757b      	strb	r3, [r7, #21]
	buffer[22] = ((local_cpy[10] & 0xFF00) >> 8);
 800225a:	4b66      	ldr	r3, [pc, #408]	; (80023f4 <send_error_counter_packet+0x270>)
 800225c:	8a9b      	ldrh	r3, [r3, #20]
 800225e:	0a1b      	lsrs	r3, r3, #8
 8002260:	b29b      	uxth	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	75bb      	strb	r3, [r7, #22]
	buffer[23] = (local_cpy[10] & 0xFF);
 8002266:	4b63      	ldr	r3, [pc, #396]	; (80023f4 <send_error_counter_packet+0x270>)
 8002268:	8a9b      	ldrh	r3, [r3, #20]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	75fb      	strb	r3, [r7, #23]
	buffer[24] = ((local_cpy[11] & 0xFF00) >> 8);
 800226e:	4b61      	ldr	r3, [pc, #388]	; (80023f4 <send_error_counter_packet+0x270>)
 8002270:	8adb      	ldrh	r3, [r3, #22]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	b29b      	uxth	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	763b      	strb	r3, [r7, #24]
	buffer[25] = (local_cpy[11] & 0xFF);
 800227a:	4b5e      	ldr	r3, [pc, #376]	; (80023f4 <send_error_counter_packet+0x270>)
 800227c:	8adb      	ldrh	r3, [r3, #22]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	767b      	strb	r3, [r7, #25]
	buffer[26] = ((local_cpy[12] & 0xFF00) >> 8);
 8002282:	4b5c      	ldr	r3, [pc, #368]	; (80023f4 <send_error_counter_packet+0x270>)
 8002284:	8b1b      	ldrh	r3, [r3, #24]
 8002286:	0a1b      	lsrs	r3, r3, #8
 8002288:	b29b      	uxth	r3, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	76bb      	strb	r3, [r7, #26]
	buffer[27] = (local_cpy[12] & 0xFF);
 800228e:	4b59      	ldr	r3, [pc, #356]	; (80023f4 <send_error_counter_packet+0x270>)
 8002290:	8b1b      	ldrh	r3, [r3, #24]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	76fb      	strb	r3, [r7, #27]
	buffer[28] = ((local_cpy[13] & 0xFF00) >> 8);
 8002296:	4b57      	ldr	r3, [pc, #348]	; (80023f4 <send_error_counter_packet+0x270>)
 8002298:	8b5b      	ldrh	r3, [r3, #26]
 800229a:	0a1b      	lsrs	r3, r3, #8
 800229c:	b29b      	uxth	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	773b      	strb	r3, [r7, #28]
	buffer[29] = (local_cpy[13] & 0xFF);
 80022a2:	4b54      	ldr	r3, [pc, #336]	; (80023f4 <send_error_counter_packet+0x270>)
 80022a4:	8b5b      	ldrh	r3, [r3, #26]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	777b      	strb	r3, [r7, #29]
	buffer[30] = ((local_cpy[14] & 0xFF00) >> 8);
 80022aa:	4b52      	ldr	r3, [pc, #328]	; (80023f4 <send_error_counter_packet+0x270>)
 80022ac:	8b9b      	ldrh	r3, [r3, #28]
 80022ae:	0a1b      	lsrs	r3, r3, #8
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	77bb      	strb	r3, [r7, #30]
	buffer[31] = (local_cpy[14] & 0xFF);
 80022b6:	4b4f      	ldr	r3, [pc, #316]	; (80023f4 <send_error_counter_packet+0x270>)
 80022b8:	8b9b      	ldrh	r3, [r3, #28]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	77fb      	strb	r3, [r7, #31]
	buffer[32] = ((local_cpy[15] & 0xFF00) >> 8);
 80022be:	4b4d      	ldr	r3, [pc, #308]	; (80023f4 <send_error_counter_packet+0x270>)
 80022c0:	8bdb      	ldrh	r3, [r3, #30]
 80022c2:	0a1b      	lsrs	r3, r3, #8
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[33] = (local_cpy[15] & 0xFF);
 80022cc:	4b49      	ldr	r3, [pc, #292]	; (80023f4 <send_error_counter_packet+0x270>)
 80022ce:	8bdb      	ldrh	r3, [r3, #30]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[34] = ((local_cpy[16] & 0xFF00) >> 8);
 80022d6:	4b47      	ldr	r3, [pc, #284]	; (80023f4 <send_error_counter_packet+0x270>)
 80022d8:	8c1b      	ldrh	r3, [r3, #32]
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	b29b      	uxth	r3, r3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[35] = (local_cpy[16] & 0xFF);
 80022e4:	4b43      	ldr	r3, [pc, #268]	; (80023f4 <send_error_counter_packet+0x270>)
 80022e6:	8c1b      	ldrh	r3, [r3, #32]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[36] = ((local_cpy[17] & 0xFF00) >> 8);
 80022ee:	4b41      	ldr	r3, [pc, #260]	; (80023f4 <send_error_counter_packet+0x270>)
 80022f0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80022f2:	0a1b      	lsrs	r3, r3, #8
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[37] = (local_cpy[17] & 0xFF);
 80022fc:	4b3d      	ldr	r3, [pc, #244]	; (80023f4 <send_error_counter_packet+0x270>)
 80022fe:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002300:	b2db      	uxtb	r3, r3
 8002302:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[38] = ((local_cpy[18] & 0xFF00) >> 8);
 8002306:	4b3b      	ldr	r3, [pc, #236]	; (80023f4 <send_error_counter_packet+0x270>)
 8002308:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800230a:	0a1b      	lsrs	r3, r3, #8
 800230c:	b29b      	uxth	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[39] = (local_cpy[18] & 0xFF);
 8002314:	4b37      	ldr	r3, [pc, #220]	; (80023f4 <send_error_counter_packet+0x270>)
 8002316:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[40] = ((local_cpy[19] & 0xFF00) >> 8);
 800231e:	4b35      	ldr	r3, [pc, #212]	; (80023f4 <send_error_counter_packet+0x270>)
 8002320:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002322:	0a1b      	lsrs	r3, r3, #8
 8002324:	b29b      	uxth	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[41] = (local_cpy[19] & 0xFF);
 800232c:	4b31      	ldr	r3, [pc, #196]	; (80023f4 <send_error_counter_packet+0x270>)
 800232e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002330:	b2db      	uxtb	r3, r3
 8002332:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[42] = ((local_cpy[20] & 0xFF00) >> 8);
 8002336:	4b2f      	ldr	r3, [pc, #188]	; (80023f4 <send_error_counter_packet+0x270>)
 8002338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233a:	0a1b      	lsrs	r3, r3, #8
 800233c:	b29b      	uxth	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[43] = (local_cpy[20] & 0xFF);
 8002344:	4b2b      	ldr	r3, [pc, #172]	; (80023f4 <send_error_counter_packet+0x270>)
 8002346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002348:	b2db      	uxtb	r3, r3
 800234a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[44] = ((local_cpy[21] & 0xFF00) >> 8);
 800234e:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <send_error_counter_packet+0x270>)
 8002350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	b29b      	uxth	r3, r3
 8002356:	b2db      	uxtb	r3, r3
 8002358:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[45] = (local_cpy[21] & 0xFF);
 800235c:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <send_error_counter_packet+0x270>)
 800235e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002360:	b2db      	uxtb	r3, r3
 8002362:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[46] = ((local_cpy[22] & 0xFF00) >> 8);
 8002366:	4b23      	ldr	r3, [pc, #140]	; (80023f4 <send_error_counter_packet+0x270>)
 8002368:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800236a:	0a1b      	lsrs	r3, r3, #8
 800236c:	b29b      	uxth	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[47] = (local_cpy[22] & 0xFF);
 8002374:	4b1f      	ldr	r3, [pc, #124]	; (80023f4 <send_error_counter_packet+0x270>)
 8002376:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002378:	b2db      	uxtb	r3, r3
 800237a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[48] = ((local_cpy[23] & 0xFF00) >> 8);
 800237e:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <send_error_counter_packet+0x270>)
 8002380:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002382:	0a1b      	lsrs	r3, r3, #8
 8002384:	b29b      	uxth	r3, r3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[49] = (local_cpy[23] & 0xFF);
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <send_error_counter_packet+0x270>)
 800238e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002390:	b2db      	uxtb	r3, r3
 8002392:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[50] = ((local_cpy[24] & 0xFF00) >> 8);
 8002396:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <send_error_counter_packet+0x270>)
 8002398:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800239a:	0a1b      	lsrs	r3, r3, #8
 800239c:	b29b      	uxth	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[51] = (local_cpy[24] & 0xFF);
 80023a4:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <send_error_counter_packet+0x270>)
 80023a6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[52] = ((local_cpy[25] & 0xFF00) >> 8);
 80023ae:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <send_error_counter_packet+0x270>)
 80023b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023b2:	0a1b      	lsrs	r3, r3, #8
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[53] = (local_cpy[25] & 0xFF);
 80023bc:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <send_error_counter_packet+0x270>)
 80023be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[54] = ((local_cpy[26] & 0xFF00) >> 8);
 80023c6:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <send_error_counter_packet+0x270>)
 80023c8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80023ca:	0a1b      	lsrs	r3, r3, #8
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[55] = (local_cpy[26] & 0xFF);
 80023d4:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <send_error_counter_packet+0x270>)
 80023d6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	HAL_UART_Transmit(&huart1, buffer, ERROR_COUNTER_PACKET_SIZE, 100);
 80023de:	4639      	mov	r1, r7
 80023e0:	2364      	movs	r3, #100	; 0x64
 80023e2:	2238      	movs	r2, #56	; 0x38
 80023e4:	4804      	ldr	r0, [pc, #16]	; (80023f8 <send_error_counter_packet+0x274>)
 80023e6:	f012 f823 	bl	8014430 <HAL_UART_Transmit>
}
 80023ea:	bf00      	nop
 80023ec:	3738      	adds	r7, #56	; 0x38
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	240003a4 	.word	0x240003a4
 80023f8:	24001e3c 	.word	0x24001e3c

080023fc <send_previous_error_packet>:
/**
 * @brief Creates and sends a packet containing the error codes for the previous error.
 *
 * This type of packet is only sent on request.
 */
void send_previous_error_packet() {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
	ERROR_STRUCT prev_error;
	uint8_t buffer[PREV_ERROR_PACKET_SIZE];

	prev_error = get_previous_error();
 8002402:	f7ff fe8f 	bl	8002124 <get_previous_error>
 8002406:	4603      	mov	r3, r0
 8002408:	80bb      	strh	r3, [r7, #4]

	buffer[0] = PREV_ERROR_PACKET_SYNC;
 800240a:	23aa      	movs	r3, #170	; 0xaa
 800240c:	703b      	strb	r3, [r7, #0]
	buffer[1] = PREV_ERROR_PACKET_SYNC;
 800240e:	23aa      	movs	r3, #170	; 0xaa
 8002410:	707b      	strb	r3, [r7, #1]
	buffer[2] = prev_error.category;
 8002412:	793b      	ldrb	r3, [r7, #4]
 8002414:	70bb      	strb	r3, [r7, #2]
	buffer[3] = prev_error.detail;
 8002416:	797b      	ldrb	r3, [r7, #5]
 8002418:	70fb      	strb	r3, [r7, #3]

	HAL_UART_Transmit(&huart1, buffer, PREV_ERROR_PACKET_SIZE, 100);
 800241a:	4639      	mov	r1, r7
 800241c:	2364      	movs	r3, #100	; 0x64
 800241e:	2204      	movs	r2, #4
 8002420:	4803      	ldr	r0, [pc, #12]	; (8002430 <send_previous_error_packet+0x34>)
 8002422:	f012 f805 	bl	8014430 <HAL_UART_Transmit>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	24001e3c 	.word	0x24001e3c

08002434 <send_current_error_packet>:
/**
 * @brief Creates and sends a packet containing the error codes for the current error.
 *
 * This type of packet is only sent when handle_error() is called.
 */
void send_current_error_packet(ERROR_STRUCT error) {
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	80b8      	strh	r0, [r7, #4]
	uint8_t buffer[CURRENT_ERROR_PACKET_SIZE];

	buffer[0] = CURRENT_ERROR_PACKET_SYNC;
 800243c:	23bb      	movs	r3, #187	; 0xbb
 800243e:	733b      	strb	r3, [r7, #12]
	buffer[1] = CURRENT_ERROR_PACKET_SYNC;
 8002440:	23bb      	movs	r3, #187	; 0xbb
 8002442:	737b      	strb	r3, [r7, #13]
	buffer[2] = error.category;
 8002444:	793b      	ldrb	r3, [r7, #4]
 8002446:	73bb      	strb	r3, [r7, #14]
	buffer[3] = error.detail;
 8002448:	797b      	ldrb	r3, [r7, #5]
 800244a:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Transmit(&huart1, buffer, PREV_ERROR_PACKET_SIZE, 100);
 800244c:	f107 010c 	add.w	r1, r7, #12
 8002450:	2364      	movs	r3, #100	; 0x64
 8002452:	2204      	movs	r2, #4
 8002454:	4803      	ldr	r0, [pc, #12]	; (8002464 <send_current_error_packet+0x30>)
 8002456:	f011 ffeb 	bl	8014430 <HAL_UART_Transmit>
}
 800245a:	bf00      	nop
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	24001e3c 	.word	0x24001e3c

08002468 <send_junk_packet>:
/**
 * @brief Creates and sends a junk packet containing all 0xCE.
 *
 * Used to clear out the buffer on the OBC.
 */
void send_junk_packet() {	// TODO: Figure out if we still need this.
 8002468:	b580      	push	{r7, lr}
 800246a:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800246e:	af00      	add	r7, sp, #0
	uint8_t buffer[JUNK_PACKET_SIZE];

	for (int i = 0; i < JUNK_PACKET_SIZE; i++) {
 8002470:	2300      	movs	r3, #0
 8002472:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8002476:	e00d      	b.n	8002494 <send_junk_packet+0x2c>
		buffer[i] = 0xCE;
 8002478:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800247c:	f2a3 4204 	subw	r2, r3, #1028	; 0x404
 8002480:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8002484:	4413      	add	r3, r2
 8002486:	22ce      	movs	r2, #206	; 0xce
 8002488:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < JUNK_PACKET_SIZE; i++) {
 800248a:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800248e:	3301      	adds	r3, #1
 8002490:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8002494:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8002498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800249c:	dbec      	blt.n	8002478 <send_junk_packet+0x10>
	}

	HAL_UART_Transmit(&huart1, buffer, JUNK_PACKET_SIZE, 100);
 800249e:	1d39      	adds	r1, r7, #4
 80024a0:	2364      	movs	r3, #100	; 0x64
 80024a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024a6:	4804      	ldr	r0, [pc, #16]	; (80024b8 <send_junk_packet+0x50>)
 80024a8:	f011 ffc2 	bl	8014430 <HAL_UART_Transmit>
}
 80024ac:	bf00      	nop
 80024ae:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	24001e3c 	.word	0x24001e3c

080024bc <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <vApplicationTickHook+0x18>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	3301      	adds	r3, #1
 80024c6:	4a03      	ldr	r2, [pc, #12]	; (80024d4 <vApplicationTickHook+0x18>)
 80024c8:	6013      	str	r3, [r2, #0]
}
 80024ca:	bf00      	nop
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	24001ae0 	.word	0x24001ae0

080024d8 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
	...

080024f0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 80024f4:	4a24      	ldr	r2, [pc, #144]	; (8002588 <MX_FREERTOS_Init+0x98>)
 80024f6:	2100      	movs	r1, #0
 80024f8:	4824      	ldr	r0, [pc, #144]	; (800258c <MX_FREERTOS_Init+0x9c>)
 80024fa:	f014 fdf1 	bl	80170e0 <osThreadNew>
 80024fe:	4603      	mov	r3, r0
 8002500:	4a23      	ldr	r2, [pc, #140]	; (8002590 <MX_FREERTOS_Init+0xa0>)
 8002502:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8002504:	4a23      	ldr	r2, [pc, #140]	; (8002594 <MX_FREERTOS_Init+0xa4>)
 8002506:	2100      	movs	r1, #0
 8002508:	4823      	ldr	r0, [pc, #140]	; (8002598 <MX_FREERTOS_Init+0xa8>)
 800250a:	f014 fde9 	bl	80170e0 <osThreadNew>
 800250e:	4603      	mov	r3, r0
 8002510:	4a22      	ldr	r2, [pc, #136]	; (800259c <MX_FREERTOS_Init+0xac>)
 8002512:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8002514:	4a22      	ldr	r2, [pc, #136]	; (80025a0 <MX_FREERTOS_Init+0xb0>)
 8002516:	2100      	movs	r1, #0
 8002518:	4822      	ldr	r0, [pc, #136]	; (80025a4 <MX_FREERTOS_Init+0xb4>)
 800251a:	f014 fde1 	bl	80170e0 <osThreadNew>
 800251e:	4603      	mov	r3, r0
 8002520:	4a21      	ldr	r2, [pc, #132]	; (80025a8 <MX_FREERTOS_Init+0xb8>)
 8002522:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8002524:	4a21      	ldr	r2, [pc, #132]	; (80025ac <MX_FREERTOS_Init+0xbc>)
 8002526:	2100      	movs	r1, #0
 8002528:	4821      	ldr	r0, [pc, #132]	; (80025b0 <MX_FREERTOS_Init+0xc0>)
 800252a:	f014 fdd9 	bl	80170e0 <osThreadNew>
 800252e:	4603      	mov	r3, r0
 8002530:	4a20      	ldr	r2, [pc, #128]	; (80025b4 <MX_FREERTOS_Init+0xc4>)
 8002532:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8002534:	4a20      	ldr	r2, [pc, #128]	; (80025b8 <MX_FREERTOS_Init+0xc8>)
 8002536:	2100      	movs	r1, #0
 8002538:	4820      	ldr	r0, [pc, #128]	; (80025bc <MX_FREERTOS_Init+0xcc>)
 800253a:	f014 fdd1 	bl	80170e0 <osThreadNew>
 800253e:	4603      	mov	r3, r0
 8002540:	4a1f      	ldr	r2, [pc, #124]	; (80025c0 <MX_FREERTOS_Init+0xd0>)
 8002542:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8002544:	4a1f      	ldr	r2, [pc, #124]	; (80025c4 <MX_FREERTOS_Init+0xd4>)
 8002546:	2100      	movs	r1, #0
 8002548:	481f      	ldr	r0, [pc, #124]	; (80025c8 <MX_FREERTOS_Init+0xd8>)
 800254a:	f014 fdc9 	bl	80170e0 <osThreadNew>
 800254e:	4603      	mov	r3, r0
 8002550:	4a1e      	ldr	r2, [pc, #120]	; (80025cc <MX_FREERTOS_Init+0xdc>)
 8002552:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8002554:	4a1e      	ldr	r2, [pc, #120]	; (80025d0 <MX_FREERTOS_Init+0xe0>)
 8002556:	2100      	movs	r1, #0
 8002558:	481e      	ldr	r0, [pc, #120]	; (80025d4 <MX_FREERTOS_Init+0xe4>)
 800255a:	f014 fdc1 	bl	80170e0 <osThreadNew>
 800255e:	4603      	mov	r3, r0
 8002560:	4a1d      	ldr	r2, [pc, #116]	; (80025d8 <MX_FREERTOS_Init+0xe8>)
 8002562:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8002564:	4a1d      	ldr	r2, [pc, #116]	; (80025dc <MX_FREERTOS_Init+0xec>)
 8002566:	2100      	movs	r1, #0
 8002568:	481d      	ldr	r0, [pc, #116]	; (80025e0 <MX_FREERTOS_Init+0xf0>)
 800256a:	f014 fdb9 	bl	80170e0 <osThreadNew>
 800256e:	4603      	mov	r3, r0
 8002570:	4a1c      	ldr	r2, [pc, #112]	; (80025e4 <MX_FREERTOS_Init+0xf4>)
 8002572:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8002574:	4a1c      	ldr	r2, [pc, #112]	; (80025e8 <MX_FREERTOS_Init+0xf8>)
 8002576:	2100      	movs	r1, #0
 8002578:	481c      	ldr	r0, [pc, #112]	; (80025ec <MX_FREERTOS_Init+0xfc>)
 800257a:	f014 fdb1 	bl	80170e0 <osThreadNew>
 800257e:	4603      	mov	r3, r0
 8002580:	4a1b      	ldr	r2, [pc, #108]	; (80025f0 <MX_FREERTOS_Init+0x100>)
 8002582:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002584:	bf00      	nop
 8002586:	bd80      	pop	{r7, pc}
 8002588:	0801b398 	.word	0x0801b398
 800258c:	080025f5 	.word	0x080025f5
 8002590:	240003dc 	.word	0x240003dc
 8002594:	0801b3bc 	.word	0x0801b3bc
 8002598:	0800261d 	.word	0x0800261d
 800259c:	2400063c 	.word	0x2400063c
 80025a0:	0801b3e0 	.word	0x0801b3e0
 80025a4:	08002645 	.word	0x08002645
 80025a8:	2400089c 	.word	0x2400089c
 80025ac:	0801b404 	.word	0x0801b404
 80025b0:	0800266d 	.word	0x0800266d
 80025b4:	24000afc 	.word	0x24000afc
 80025b8:	0801b428 	.word	0x0801b428
 80025bc:	080026e5 	.word	0x080026e5
 80025c0:	24000d5c 	.word	0x24000d5c
 80025c4:	0801b44c 	.word	0x0801b44c
 80025c8:	0800275d 	.word	0x0800275d
 80025cc:	24000fbc 	.word	0x24000fbc
 80025d0:	0801b470 	.word	0x0801b470
 80025d4:	0800278d 	.word	0x0800278d
 80025d8:	2400121c 	.word	0x2400121c
 80025dc:	0801b494 	.word	0x0801b494
 80025e0:	080027bd 	.word	0x080027bd
 80025e4:	2400147c 	.word	0x2400147c
 80025e8:	0801b4b8 	.word	0x0801b4b8
 80025ec:	080028b5 	.word	0x080028b5
 80025f0:	240016dc 	.word	0x240016dc

080025f4 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <PMT_init+0x24>)
 80025fe:	6818      	ldr	r0, [r3, #0]
 8002600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002604:	2200      	movs	r2, #0
 8002606:	2101      	movs	r1, #1
 8002608:	f014 ff2e 	bl	8017468 <osEventFlagsWait>

		create_pmt_packet();
 800260c:	f001 fa46 	bl	8003a9c <create_pmt_packet>

		osThreadYield();
 8002610:	f014 fdf8 	bl	8017204 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002614:	e7f2      	b.n	80025fc <PMT_init+0x8>
 8002616:	bf00      	nop
 8002618:	24001a90 	.word	0x24001a90

0800261c <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <ERPA_init+0x24>)
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800262c:	2200      	movs	r2, #0
 800262e:	2102      	movs	r1, #2
 8002630:	f014 ff1a 	bl	8017468 <osEventFlagsWait>

		create_erpa_packet();
 8002634:	f001 fa78 	bl	8003b28 <create_erpa_packet>

		osThreadYield();
 8002638:	f014 fde4 	bl	8017204 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800263c:	e7f2      	b.n	8002624 <ERPA_init+0x8>
 800263e:	bf00      	nop
 8002640:	24001a90 	.word	0x24001a90

08002644 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HK_init+0x24>)
 800264e:	6818      	ldr	r0, [r3, #0]
 8002650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002654:	2200      	movs	r2, #0
 8002656:	2104      	movs	r1, #4
 8002658:	f014 ff06 	bl	8017468 <osEventFlagsWait>

		create_hk_packet();
 800265c:	f001 fac2 	bl	8003be4 <create_hk_packet>

		osThreadYield();
 8002660:	f014 fdd0 	bl	8017204 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002664:	e7f2      	b.n	800264c <HK_init+0x8>
 8002666:	bf00      	nop
 8002668:	24001a90 	.word	0x24001a90

0800266c <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002674:	4b19      	ldr	r3, [pc, #100]	; (80026dc <AUTOINIT_init+0x70>)
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800267c:	2200      	movs	r2, #0
 800267e:	2104      	movs	r1, #4
 8002680:	f014 fef2 	bl	8017468 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	e012      	b.n	80026b0 <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 800268a:	4a15      	ldr	r2, [pc, #84]	; (80026e0 <AUTOINIT_init+0x74>)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002692:	4a13      	ldr	r2, [pc, #76]	; (80026e0 <AUTOINIT_init+0x74>)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4413      	add	r3, r2
 800269a:	889b      	ldrh	r3, [r3, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	4619      	mov	r1, r3
 80026a0:	f009 f882 	bl	800b7a8 <HAL_GPIO_WritePin>
			osDelay(100);
 80026a4:	2064      	movs	r0, #100	; 0x64
 80026a6:	f014 fe0f 	bl	80172c8 <osDelay>
		for (int i = 0; i < 7; i++) {
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	3301      	adds	r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2b06      	cmp	r3, #6
 80026b4:	dde9      	ble.n	800268a <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 80026b6:	2308      	movs	r3, #8
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	e008      	b.n	80026ce <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2101      	movs	r1, #1
 80026c2:	4618      	mov	r0, r3
 80026c4:	f003 fa00 	bl	8005ac8 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	3301      	adds	r3, #1
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b0d      	cmp	r3, #13
 80026d2:	ddf3      	ble.n	80026bc <AUTOINIT_init+0x50>
		}
		osThreadYield();
 80026d4:	f014 fd96 	bl	8017204 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80026d8:	e7cc      	b.n	8002674 <AUTOINIT_init+0x8>
 80026da:	bf00      	nop
 80026dc:	24001a94 	.word	0x24001a94
 80026e0:	0801b4dc 	.word	0x0801b4dc

080026e4 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80026ec:	4b19      	ldr	r3, [pc, #100]	; (8002754 <AUTODEINIT_init+0x70>)
 80026ee:	6818      	ldr	r0, [r3, #0]
 80026f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026f4:	2200      	movs	r2, #0
 80026f6:	2108      	movs	r1, #8
 80026f8:	f014 feb6 	bl	8017468 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 80026fc:	230d      	movs	r3, #13
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	e008      	b.n	8002714 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2100      	movs	r1, #0
 8002708:	4618      	mov	r0, r3
 800270a:	f003 f9dd 	bl	8005ac8 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	3b01      	subs	r3, #1
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2b07      	cmp	r3, #7
 8002718:	dcf3      	bgt.n	8002702 <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 800271a:	2306      	movs	r3, #6
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	e012      	b.n	8002746 <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002720:	4a0d      	ldr	r2, [pc, #52]	; (8002758 <AUTODEINIT_init+0x74>)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002728:	4a0b      	ldr	r2, [pc, #44]	; (8002758 <AUTODEINIT_init+0x74>)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4413      	add	r3, r2
 8002730:	889b      	ldrh	r3, [r3, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	4619      	mov	r1, r3
 8002736:	f009 f837 	bl	800b7a8 <HAL_GPIO_WritePin>
			osDelay(100);
 800273a:	2064      	movs	r0, #100	; 0x64
 800273c:	f014 fdc4 	bl	80172c8 <osDelay>
		for (int i = 6; i >= 0; i--) {
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	3b01      	subs	r3, #1
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	dae9      	bge.n	8002720 <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 800274c:	f014 fd5a 	bl	8017204 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002750:	e7cc      	b.n	80026ec <AUTODEINIT_init+0x8>
 8002752:	bf00      	nop
 8002754:	24001a94 	.word	0x24001a94
 8002758:	0801b4dc 	.word	0x0801b4dc

0800275c <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002764:	4b07      	ldr	r3, [pc, #28]	; (8002784 <Voltage_Monitor_init+0x28>)
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800276c:	2200      	movs	r2, #0
 800276e:	2101      	movs	r1, #1
 8002770:	f014 fe7a 	bl	8017468 <osEventFlagsWait>
	  		osWaitForever);
	  HAL_IWDG_Refresh(&hiwdg1);
 8002774:	4804      	ldr	r0, [pc, #16]	; (8002788 <Voltage_Monitor_init+0x2c>)
 8002776:	f00b fb95 	bl	800dea4 <HAL_IWDG_Refresh>
	  set_rail_monitor();
 800277a:	f003 f9c5 	bl	8005b08 <set_rail_monitor>
	  monitor_rails();
 800277e:	f003 fa47 	bl	8005c10 <monitor_rails>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002782:	e7ef      	b.n	8002764 <Voltage_Monitor_init+0x8>
 8002784:	24001a94 	.word	0x24001a94
 8002788:	24001a80 	.word	0x24001a80

0800278c <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 8002794:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <STOP_init+0x2c>)
 8002796:	6818      	ldr	r0, [r3, #0]
 8002798:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800279c:	2200      	movs	r2, #0
 800279e:	2102      	movs	r1, #2
 80027a0:	f014 fe62 	bl	8017468 <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 80027a4:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <STOP_init+0x2c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2102      	movs	r1, #2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f014 fe2a 	bl	8017404 <osEventFlagsClear>

	  enter_stop();
 80027b0:	f001 f948 	bl	8003a44 <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80027b4:	e7ee      	b.n	8002794 <STOP_init+0x8>
 80027b6:	bf00      	nop
 80027b8:	24001a94 	.word	0x24001a94

080027bc <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af02      	add	r7, sp, #8
 80027c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 80027c4:	4b31      	ldr	r3, [pc, #196]	; (800288c <Science_init+0xd0>)
 80027c6:	6818      	ldr	r0, [r3, #0]
 80027c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027cc:	2200      	movs	r2, #0
 80027ce:	2101      	movs	r1, #1
 80027d0:	f014 fe4a 	bl	8017468 <osEventFlagsWait>
		osThreadSuspend(Voltage_MonitorHandle);
 80027d4:	4b2e      	ldr	r3, [pc, #184]	; (8002890 <Science_init+0xd4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f014 fd33 	bl	8017244 <osThreadSuspend>
		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	e012      	b.n	800280a <Science_init+0x4e>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 80027e4:	4a2b      	ldr	r2, [pc, #172]	; (8002894 <Science_init+0xd8>)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80027ec:	4a29      	ldr	r2, [pc, #164]	; (8002894 <Science_init+0xd8>)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4413      	add	r3, r2
 80027f4:	889b      	ldrh	r3, [r3, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	4619      	mov	r1, r3
 80027fa:	f008 ffd5 	bl	800b7a8 <HAL_GPIO_WritePin>
			osDelay(200);
 80027fe:	20c8      	movs	r0, #200	; 0xc8
 8002800:	f014 fd62 	bl	80172c8 <osDelay>
		for (int i = 0; i < 9; i++) {
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	3301      	adds	r3, #1
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2b08      	cmp	r3, #8
 800280e:	dde9      	ble.n	80027e4 <Science_init+0x28>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_busvmon; i <= RAIL_n800v; i++) {
 8002810:	2306      	movs	r3, #6
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	e008      	b.n	8002828 <Science_init+0x6c>
			set_rail_monitor_enable(i, 1);
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2101      	movs	r1, #1
 800281c:	4618      	mov	r0, r3
 800281e:	f003 f953 	bl	8005ac8 <set_rail_monitor_enable>
		for (int i = RAIL_busvmon; i <= RAIL_n800v; i++) {
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	3301      	adds	r3, #1
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b10      	cmp	r3, #16
 800282c:	ddf3      	ble.n	8002816 <Science_init+0x5a>
		}
		osThreadResume(Voltage_MonitorHandle);
 800282e:	4b18      	ldr	r3, [pc, #96]	; (8002890 <Science_init+0xd4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f014 fd27 	bl	8017286 <osThreadResume>
  __ASM volatile ("cpsid i" : : : "memory");
 8002838:	b672      	cpsid	i
}
 800283a:	bf00      	nop

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 800283c:	2300      	movs	r3, #0
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	2320      	movs	r3, #32
 8002842:	4a15      	ldr	r2, [pc, #84]	; (8002898 <Science_init+0xdc>)
 8002844:	2100      	movs	r1, #0
 8002846:	4815      	ldr	r0, [pc, #84]	; (800289c <Science_init+0xe0>)
 8002848:	f005 f92a 	bl	8007aa0 <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 800284c:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <Science_init+0xe4>)
 800284e:	2201      	movs	r2, #1
 8002850:	701a      	strb	r2, [r3, #0]
		ERPA_ENABLED = 1;
 8002852:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <Science_init+0xe8>)
 8002854:	2201      	movs	r2, #1
 8002856:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 8002858:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <Science_init+0xec>)
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 800285e:	f001 faff 	bl	8003e60 <reset_packet_sequence_numbers>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8002862:	4b12      	ldr	r3, [pc, #72]	; (80028ac <Science_init+0xf0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2104      	movs	r1, #4
 8002868:	4618      	mov	r0, r3
 800286a:	f014 fd87 	bl	801737c <osEventFlagsSet>
		TIM2->CCR4 = 312;
 800286e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002872:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002876:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 8002878:	2100      	movs	r1, #0
 800287a:	480d      	ldr	r0, [pc, #52]	; (80028b0 <Science_init+0xf4>)
 800287c:	f010 fa4e 	bl	8012d1c <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 8002880:	b662      	cpsie	i
}
 8002882:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 8002884:	f014 fcbe 	bl	8017204 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8002888:	e79c      	b.n	80027c4 <Science_init+0x8>
 800288a:	bf00      	nop
 800288c:	24001a98 	.word	0x24001a98
 8002890:	24000fbc 	.word	0x24000fbc
 8002894:	0801b4dc 	.word	0x0801b4dc
 8002898:	2400003c 	.word	0x2400003c
 800289c:	24000314 	.word	0x24000314
 80028a0:	24001adc 	.word	0x24001adc
 80028a4:	24001add 	.word	0x24001add
 80028a8:	24001ae0 	.word	0x24001ae0
 80028ac:	24001a90 	.word	0x24001a90
 80028b0:	24001da4 	.word	0x24001da4

080028b4 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80028bc:	4b22      	ldr	r3, [pc, #136]	; (8002948 <Idle_init+0x94>)
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028c4:	2200      	movs	r2, #0
 80028c6:	2102      	movs	r1, #2
 80028c8:	f014 fdce 	bl	8017468 <osEventFlagsWait>

		ERPA_ENABLED = 0;
 80028cc:	4b1f      	ldr	r3, [pc, #124]	; (800294c <Idle_init+0x98>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 80028d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028d6:	2200      	movs	r2, #0
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 80028da:	2100      	movs	r1, #0
 80028dc:	481c      	ldr	r0, [pc, #112]	; (8002950 <Idle_init+0x9c>)
 80028de:	f010 fb77 	bl	8012fd0 <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 80028e2:	4b1c      	ldr	r3, [pc, #112]	; (8002954 <Idle_init+0xa0>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 80028e8:	2100      	movs	r1, #0
 80028ea:	481b      	ldr	r0, [pc, #108]	; (8002958 <Idle_init+0xa4>)
 80028ec:	f005 f998 	bl	8007c20 <HAL_DAC_Stop_DMA>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_busvmon; i--) {
 80028f0:	2310      	movs	r3, #16
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	e008      	b.n	8002908 <Idle_init+0x54>
			set_rail_monitor_enable(i, 0);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2100      	movs	r1, #0
 80028fc:	4618      	mov	r0, r3
 80028fe:	f003 f8e3 	bl	8005ac8 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_busvmon; i--) {
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	3b01      	subs	r3, #1
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b05      	cmp	r3, #5
 800290c:	dcf3      	bgt.n	80028f6 <Idle_init+0x42>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 800290e:	2308      	movs	r3, #8
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	e012      	b.n	800293a <Idle_init+0x86>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002914:	4a11      	ldr	r2, [pc, #68]	; (800295c <Idle_init+0xa8>)
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800291c:	4a0f      	ldr	r2, [pc, #60]	; (800295c <Idle_init+0xa8>)
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4413      	add	r3, r2
 8002924:	889b      	ldrh	r3, [r3, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	4619      	mov	r1, r3
 800292a:	f008 ff3d 	bl	800b7a8 <HAL_GPIO_WritePin>
			osDelay(200);
 800292e:	20c8      	movs	r0, #200	; 0xc8
 8002930:	f014 fcca 	bl	80172c8 <osDelay>
		for (int i = 8; i >= 0; i--) {
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	3b01      	subs	r3, #1
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	dae9      	bge.n	8002914 <Idle_init+0x60>
		}

		// Yield thread control
		osThreadYield();
 8002940:	f014 fc60 	bl	8017204 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8002944:	e7ba      	b.n	80028bc <Idle_init+0x8>
 8002946:	bf00      	nop
 8002948:	24001a98 	.word	0x24001a98
 800294c:	24001add 	.word	0x24001add
 8002950:	24001da4 	.word	0x24001da4
 8002954:	24001adc 	.word	0x24001adc
 8002958:	24000314 	.word	0x24000314
 800295c:	0801b4dc 	.word	0x0801b4dc

08002960 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08a      	sub	sp, #40	; 0x28
 8002964:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002966:	f107 0314 	add.w	r3, r7, #20
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	609a      	str	r2, [r3, #8]
 8002972:	60da      	str	r2, [r3, #12]
 8002974:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002976:	4b34      	ldr	r3, [pc, #208]	; (8002a48 <MX_GPIO_Init+0xe8>)
 8002978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800297c:	4a32      	ldr	r2, [pc, #200]	; (8002a48 <MX_GPIO_Init+0xe8>)
 800297e:	f043 0304 	orr.w	r3, r3, #4
 8002982:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002986:	4b30      	ldr	r3, [pc, #192]	; (8002a48 <MX_GPIO_Init+0xe8>)
 8002988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002994:	4b2c      	ldr	r3, [pc, #176]	; (8002a48 <MX_GPIO_Init+0xe8>)
 8002996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800299a:	4a2b      	ldr	r2, [pc, #172]	; (8002a48 <MX_GPIO_Init+0xe8>)
 800299c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029a4:	4b28      	ldr	r3, [pc, #160]	; (8002a48 <MX_GPIO_Init+0xe8>)
 80029a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b2:	4b25      	ldr	r3, [pc, #148]	; (8002a48 <MX_GPIO_Init+0xe8>)
 80029b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029b8:	4a23      	ldr	r2, [pc, #140]	; (8002a48 <MX_GPIO_Init+0xe8>)
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029c2:	4b21      	ldr	r3, [pc, #132]	; (8002a48 <MX_GPIO_Init+0xe8>)
 80029c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d0:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <MX_GPIO_Init+0xe8>)
 80029d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029d6:	4a1c      	ldr	r2, [pc, #112]	; (8002a48 <MX_GPIO_Init+0xe8>)
 80029d8:	f043 0302 	orr.w	r3, r3, #2
 80029dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029e0:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <MX_GPIO_Init+0xe8>)
 80029e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	607b      	str	r3, [r7, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80029ee:	2200      	movs	r2, #0
 80029f0:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 80029f4:	4815      	ldr	r0, [pc, #84]	; (8002a4c <MX_GPIO_Init+0xec>)
 80029f6:	f008 fed7 	bl	800b7a8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80029fa:	2200      	movs	r2, #0
 80029fc:	2164      	movs	r1, #100	; 0x64
 80029fe:	4814      	ldr	r0, [pc, #80]	; (8002a50 <MX_GPIO_Init+0xf0>)
 8002a00:	f008 fed2 	bl	800b7a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002a04:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8002a08:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a12:	2300      	movs	r3, #0
 8002a14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a16:	f107 0314 	add.w	r3, r7, #20
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	480b      	ldr	r0, [pc, #44]	; (8002a4c <MX_GPIO_Init+0xec>)
 8002a1e:	f008 fcfb 	bl	800b418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002a22:	2364      	movs	r3, #100	; 0x64
 8002a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a26:	2301      	movs	r3, #1
 8002a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a32:	f107 0314 	add.w	r3, r7, #20
 8002a36:	4619      	mov	r1, r3
 8002a38:	4805      	ldr	r0, [pc, #20]	; (8002a50 <MX_GPIO_Init+0xf0>)
 8002a3a:	f008 fced 	bl	800b418 <HAL_GPIO_Init>

}
 8002a3e:	bf00      	nop
 8002a40:	3728      	adds	r7, #40	; 0x28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	58024400 	.word	0x58024400
 8002a4c:	58020800 	.word	0x58020800
 8002a50:	58020400 	.word	0x58020400

08002a54 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a58:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <MX_I2C1_Init+0x78>)
 8002a5a:	4a1d      	ldr	r2, [pc, #116]	; (8002ad0 <MX_I2C1_Init+0x7c>)
 8002a5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 8002a5e:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <MX_I2C1_Init+0x78>)
 8002a60:	4a1c      	ldr	r2, [pc, #112]	; (8002ad4 <MX_I2C1_Init+0x80>)
 8002a62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <MX_I2C1_Init+0x78>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a6a:	4b18      	ldr	r3, [pc, #96]	; (8002acc <MX_I2C1_Init+0x78>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a70:	4b16      	ldr	r3, [pc, #88]	; (8002acc <MX_I2C1_Init+0x78>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002a76:	4b15      	ldr	r3, [pc, #84]	; (8002acc <MX_I2C1_Init+0x78>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a7c:	4b13      	ldr	r3, [pc, #76]	; (8002acc <MX_I2C1_Init+0x78>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a82:	4b12      	ldr	r3, [pc, #72]	; (8002acc <MX_I2C1_Init+0x78>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a88:	4b10      	ldr	r3, [pc, #64]	; (8002acc <MX_I2C1_Init+0x78>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a8e:	480f      	ldr	r0, [pc, #60]	; (8002acc <MX_I2C1_Init+0x78>)
 8002a90:	f008 fea4 	bl	800b7dc <HAL_I2C_Init>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002a9a:	f000 fff1 	bl	8003a80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	480a      	ldr	r0, [pc, #40]	; (8002acc <MX_I2C1_Init+0x78>)
 8002aa2:	f00b f943 	bl	800dd2c <HAL_I2CEx_ConfigAnalogFilter>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002aac:	f000 ffe8 	bl	8003a80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4806      	ldr	r0, [pc, #24]	; (8002acc <MX_I2C1_Init+0x78>)
 8002ab4:	f00b f985 	bl	800ddc2 <HAL_I2CEx_ConfigDigitalFilter>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002abe:	f000 ffdf 	bl	8003a80 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	f00b f9ca 	bl	800de5c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ac8:	bf00      	nop
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	2400193c 	.word	0x2400193c
 8002ad0:	40005400 	.word	0x40005400
 8002ad4:	00100517 	.word	0x00100517

08002ad8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b0ba      	sub	sp, #232	; 0xe8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	60da      	str	r2, [r3, #12]
 8002aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002af0:	f107 0310 	add.w	r3, r7, #16
 8002af4:	22c0      	movs	r2, #192	; 0xc0
 8002af6:	2100      	movs	r1, #0
 8002af8:	4618      	mov	r0, r3
 8002afa:	f017 fe07 	bl	801a70c <memset>
  if(i2cHandle->Instance==I2C1)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a5d      	ldr	r2, [pc, #372]	; (8002c78 <HAL_I2C_MspInit+0x1a0>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	f040 80b3 	bne.w	8002c70 <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b0a:	f04f 0208 	mov.w	r2, #8
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002b16:	2300      	movs	r3, #0
 8002b18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b1c:	f107 0310 	add.w	r3, r7, #16
 8002b20:	4618      	mov	r0, r3
 8002b22:	f00c fa6d 	bl	800f000 <HAL_RCCEx_PeriphCLKConfig>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8002b2c:	f000 ffa8 	bl	8003a80 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b30:	4b52      	ldr	r3, [pc, #328]	; (8002c7c <HAL_I2C_MspInit+0x1a4>)
 8002b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b36:	4a51      	ldr	r2, [pc, #324]	; (8002c7c <HAL_I2C_MspInit+0x1a4>)
 8002b38:	f043 0302 	orr.w	r3, r3, #2
 8002b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b40:	4b4e      	ldr	r3, [pc, #312]	; (8002c7c <HAL_I2C_MspInit+0x1a4>)
 8002b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b56:	2312      	movs	r3, #18
 8002b58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b62:	2300      	movs	r3, #0
 8002b64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b68:	2304      	movs	r3, #4
 8002b6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b6e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b72:	4619      	mov	r1, r3
 8002b74:	4842      	ldr	r0, [pc, #264]	; (8002c80 <HAL_I2C_MspInit+0x1a8>)
 8002b76:	f008 fc4f 	bl	800b418 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b7a:	4b40      	ldr	r3, [pc, #256]	; (8002c7c <HAL_I2C_MspInit+0x1a4>)
 8002b7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b80:	4a3e      	ldr	r2, [pc, #248]	; (8002c7c <HAL_I2C_MspInit+0x1a4>)
 8002b82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b8a:	4b3c      	ldr	r3, [pc, #240]	; (8002c7c <HAL_I2C_MspInit+0x1a4>)
 8002b8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002b98:	4b3a      	ldr	r3, [pc, #232]	; (8002c84 <HAL_I2C_MspInit+0x1ac>)
 8002b9a:	4a3b      	ldr	r2, [pc, #236]	; (8002c88 <HAL_I2C_MspInit+0x1b0>)
 8002b9c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002b9e:	4b39      	ldr	r3, [pc, #228]	; (8002c84 <HAL_I2C_MspInit+0x1ac>)
 8002ba0:	2222      	movs	r2, #34	; 0x22
 8002ba2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ba4:	4b37      	ldr	r3, [pc, #220]	; (8002c84 <HAL_I2C_MspInit+0x1ac>)
 8002ba6:	2240      	movs	r2, #64	; 0x40
 8002ba8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002baa:	4b36      	ldr	r3, [pc, #216]	; (8002c84 <HAL_I2C_MspInit+0x1ac>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bb0:	4b34      	ldr	r3, [pc, #208]	; (8002c84 <HAL_I2C_MspInit+0x1ac>)
 8002bb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bb6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bb8:	4b32      	ldr	r3, [pc, #200]	; (8002c84 <HAL_I2C_MspInit+0x1ac>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bbe:	4b31      	ldr	r3, [pc, #196]	; (8002c84 <HAL_I2C_MspInit+0x1ac>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002bc4:	4b2f      	ldr	r3, [pc, #188]	; (8002c84 <HAL_I2C_MspInit+0x1ac>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002bca:	4b2e      	ldr	r3, [pc, #184]	; (8002c84 <HAL_I2C_MspInit+0x1ac>)
 8002bcc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002bd0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bd2:	4b2c      	ldr	r3, [pc, #176]	; (8002c84 <HAL_I2C_MspInit+0x1ac>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002bd8:	482a      	ldr	r0, [pc, #168]	; (8002c84 <HAL_I2C_MspInit+0x1ac>)
 8002bda:	f005 faed 	bl	80081b8 <HAL_DMA_Init>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 8002be4:	f000 ff4c 	bl	8003a80 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a26      	ldr	r2, [pc, #152]	; (8002c84 <HAL_I2C_MspInit+0x1ac>)
 8002bec:	639a      	str	r2, [r3, #56]	; 0x38
 8002bee:	4a25      	ldr	r2, [pc, #148]	; (8002c84 <HAL_I2C_MspInit+0x1ac>)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 8002bf4:	4b25      	ldr	r3, [pc, #148]	; (8002c8c <HAL_I2C_MspInit+0x1b4>)
 8002bf6:	4a26      	ldr	r2, [pc, #152]	; (8002c90 <HAL_I2C_MspInit+0x1b8>)
 8002bf8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002bfa:	4b24      	ldr	r3, [pc, #144]	; (8002c8c <HAL_I2C_MspInit+0x1b4>)
 8002bfc:	2221      	movs	r2, #33	; 0x21
 8002bfe:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c00:	4b22      	ldr	r3, [pc, #136]	; (8002c8c <HAL_I2C_MspInit+0x1b4>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c06:	4b21      	ldr	r3, [pc, #132]	; (8002c8c <HAL_I2C_MspInit+0x1b4>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c0c:	4b1f      	ldr	r3, [pc, #124]	; (8002c8c <HAL_I2C_MspInit+0x1b4>)
 8002c0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c12:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c14:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <HAL_I2C_MspInit+0x1b4>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c1a:	4b1c      	ldr	r3, [pc, #112]	; (8002c8c <HAL_I2C_MspInit+0x1b4>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002c20:	4b1a      	ldr	r3, [pc, #104]	; (8002c8c <HAL_I2C_MspInit+0x1b4>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c26:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <HAL_I2C_MspInit+0x1b4>)
 8002c28:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002c2c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c2e:	4b17      	ldr	r3, [pc, #92]	; (8002c8c <HAL_I2C_MspInit+0x1b4>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002c34:	4815      	ldr	r0, [pc, #84]	; (8002c8c <HAL_I2C_MspInit+0x1b4>)
 8002c36:	f005 fabf 	bl	80081b8 <HAL_DMA_Init>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 8002c40:	f000 ff1e 	bl	8003a80 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a11      	ldr	r2, [pc, #68]	; (8002c8c <HAL_I2C_MspInit+0x1b4>)
 8002c48:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c4a:	4a10      	ldr	r2, [pc, #64]	; (8002c8c <HAL_I2C_MspInit+0x1b4>)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002c50:	2200      	movs	r2, #0
 8002c52:	2105      	movs	r1, #5
 8002c54:	201f      	movs	r0, #31
 8002c56:	f004 fe81 	bl	800795c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002c5a:	201f      	movs	r0, #31
 8002c5c:	f004 fe98 	bl	8007990 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002c60:	2200      	movs	r2, #0
 8002c62:	2105      	movs	r1, #5
 8002c64:	2020      	movs	r0, #32
 8002c66:	f004 fe79 	bl	800795c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002c6a:	2020      	movs	r0, #32
 8002c6c:	f004 fe90 	bl	8007990 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002c70:	bf00      	nop
 8002c72:	37e8      	adds	r7, #232	; 0xe8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40005400 	.word	0x40005400
 8002c7c:	58024400 	.word	0x58024400
 8002c80:	58020400 	.word	0x58020400
 8002c84:	24001990 	.word	0x24001990
 8002c88:	400200a0 	.word	0x400200a0
 8002c8c:	24001a08 	.word	0x24001a08
 8002c90:	400200b8 	.word	0x400200b8

08002c94 <__NVIC_SystemReset>:
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002c98:	f3bf 8f4f 	dsb	sy
}
 8002c9c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002c9e:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <__NVIC_SystemReset+0x24>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002ca6:	4904      	ldr	r1, [pc, #16]	; (8002cb8 <__NVIC_SystemReset+0x24>)
 8002ca8:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <__NVIC_SystemReset+0x28>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002cae:	f3bf 8f4f 	dsb	sy
}
 8002cb2:	bf00      	nop
    __NOP();
 8002cb4:	bf00      	nop
 8002cb6:	e7fd      	b.n	8002cb4 <__NVIC_SystemReset+0x20>
 8002cb8:	e000ed00 	.word	0xe000ed00
 8002cbc:	05fa0004 	.word	0x05fa0004

08002cc0 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a20      	ldr	r2, [pc, #128]	; (8002d4c <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d106      	bne.n	8002cde <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8002cd0:	4b1f      	ldr	r3, [pc, #124]	; (8002d50 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f014 fb50 	bl	801737c <osEventFlagsSet>
		HK_100_ms_counter++;

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 8002cdc:	e032      	b.n	8002d44 <HAL_TIM_OC_DelayElapsedCallback+0x84>
	else if (htim == &htim2) {
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a1c      	ldr	r2, [pc, #112]	; (8002d54 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d12b      	bne.n	8002d3e <HAL_TIM_OC_DelayElapsedCallback+0x7e>
		if (ERPA_ENABLED) {
 8002ce6:	4b1c      	ldr	r3, [pc, #112]	; (8002d58 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8002cf0:	4b17      	ldr	r3, [pc, #92]	; (8002d50 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2102      	movs	r1, #2
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f014 fb40 	bl	801737c <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 8002cfc:	4b17      	ldr	r3, [pc, #92]	; (8002d5c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b20      	cmp	r3, #32
 8002d04:	d113      	bne.n	8002d2e <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8002d06:	4b16      	ldr	r3, [pc, #88]	; (8002d60 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f014 fb35 	bl	801737c <osEventFlagsSet>
			if (HK_ENABLED){
 8002d12:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_TIM_OC_DelayElapsedCallback+0x68>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2104      	movs	r1, #4
 8002d22:	4618      	mov	r0, r3
 8002d24:	f014 fb2a 	bl	801737c <osEventFlagsSet>
			HK_100_ms_counter = 0;
 8002d28:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 8002d2e:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	3301      	adds	r3, #1
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002d3a:	701a      	strb	r2, [r3, #0]
}
 8002d3c:	e002      	b.n	8002d44 <HAL_TIM_OC_DelayElapsedCallback+0x84>
		printf("Unknown Timer Interrupt\n");
 8002d3e:	480a      	ldr	r0, [pc, #40]	; (8002d68 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8002d40:	f017 fd5a 	bl	801a7f8 <puts>
}
 8002d44:	bf00      	nop
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	24001da4 	.word	0x24001da4
 8002d50:	24001a90 	.word	0x24001a90
 8002d54:	24001df0 	.word	0x24001df0
 8002d58:	24001add 	.word	0x24001add
 8002d5c:	24001ae4 	.word	0x24001ae4
 8002d60:	24001a94 	.word	0x24001a94
 8002d64:	24001adc 	.word	0x24001adc
 8002d68:	0801b1a8 	.word	0x0801b1a8

08002d6c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b088      	sub	sp, #32
 8002d70:	af02      	add	r7, sp, #8
 8002d72:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002d74:	2201      	movs	r2, #1
 8002d76:	49f7      	ldr	r1, [pc, #988]	; (8003154 <HAL_UART_RxCpltCallback+0x3e8>)
 8002d78:	48f7      	ldr	r0, [pc, #988]	; (8003158 <HAL_UART_RxCpltCallback+0x3ec>)
 8002d7a:	f011 fcaf 	bl	80146dc <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8002d7e:	4bf5      	ldr	r3, [pc, #980]	; (8003154 <HAL_UART_RxCpltCallback+0x3e8>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	2bef      	cmp	r3, #239	; 0xef
 8002d88:	f200 843e 	bhi.w	8003608 <HAL_UART_RxCpltCallback+0x89c>
 8002d8c:	a201      	add	r2, pc, #4	; (adr r2, 8002d94 <HAL_UART_RxCpltCallback+0x28>)
 8002d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d92:	bf00      	nop
 8002d94:	08003171 	.word	0x08003171
 8002d98:	080031a1 	.word	0x080031a1
 8002d9c:	08003211 	.word	0x08003211
 8002da0:	0800324b 	.word	0x0800324b
 8002da4:	08003283 	.word	0x08003283
 8002da8:	080032bd 	.word	0x080032bd
 8002dac:	080032f9 	.word	0x080032f9
 8002db0:	08003335 	.word	0x08003335
 8002db4:	0800336f 	.word	0x0800336f
 8002db8:	080033a3 	.word	0x080033a3
 8002dbc:	080033d7 	.word	0x080033d7
 8002dc0:	08003409 	.word	0x08003409
 8002dc4:	08003433 	.word	0x08003433
 8002dc8:	0800350f 	.word	0x0800350f
 8002dcc:	08003577 	.word	0x08003577
 8002dd0:	0800359f 	.word	0x0800359f
 8002dd4:	0800315d 	.word	0x0800315d
 8002dd8:	08003185 	.word	0x08003185
 8002ddc:	080031f3 	.word	0x080031f3
 8002de0:	0800322f 	.word	0x0800322f
 8002de4:	08003267 	.word	0x08003267
 8002de8:	0800329f 	.word	0x0800329f
 8002dec:	080032db 	.word	0x080032db
 8002df0:	08003317 	.word	0x08003317
 8002df4:	08003353 	.word	0x08003353
 8002df8:	0800338b 	.word	0x0800338b
 8002dfc:	080033b3 	.word	0x080033b3
 8002e00:	080033ed 	.word	0x080033ed
 8002e04:	08003419 	.word	0x08003419
 8002e08:	080034cd 	.word	0x080034cd
 8002e0c:	0800354f 	.word	0x0800354f
 8002e10:	08003609 	.word	0x08003609
 8002e14:	08003609 	.word	0x08003609
 8002e18:	08003609 	.word	0x08003609
 8002e1c:	08003609 	.word	0x08003609
 8002e20:	08003609 	.word	0x08003609
 8002e24:	08003609 	.word	0x08003609
 8002e28:	08003609 	.word	0x08003609
 8002e2c:	08003609 	.word	0x08003609
 8002e30:	08003609 	.word	0x08003609
 8002e34:	08003609 	.word	0x08003609
 8002e38:	08003609 	.word	0x08003609
 8002e3c:	08003609 	.word	0x08003609
 8002e40:	08003609 	.word	0x08003609
 8002e44:	08003609 	.word	0x08003609
 8002e48:	08003609 	.word	0x08003609
 8002e4c:	08003609 	.word	0x08003609
 8002e50:	08003609 	.word	0x08003609
 8002e54:	08003609 	.word	0x08003609
 8002e58:	08003609 	.word	0x08003609
 8002e5c:	08003609 	.word	0x08003609
 8002e60:	08003609 	.word	0x08003609
 8002e64:	08003609 	.word	0x08003609
 8002e68:	08003609 	.word	0x08003609
 8002e6c:	08003609 	.word	0x08003609
 8002e70:	08003609 	.word	0x08003609
 8002e74:	08003609 	.word	0x08003609
 8002e78:	08003609 	.word	0x08003609
 8002e7c:	08003609 	.word	0x08003609
 8002e80:	08003609 	.word	0x08003609
 8002e84:	08003609 	.word	0x08003609
 8002e88:	08003609 	.word	0x08003609
 8002e8c:	08003609 	.word	0x08003609
 8002e90:	08003609 	.word	0x08003609
 8002e94:	08003609 	.word	0x08003609
 8002e98:	08003609 	.word	0x08003609
 8002e9c:	08003609 	.word	0x08003609
 8002ea0:	08003609 	.word	0x08003609
 8002ea4:	08003609 	.word	0x08003609
 8002ea8:	08003609 	.word	0x08003609
 8002eac:	08003609 	.word	0x08003609
 8002eb0:	08003609 	.word	0x08003609
 8002eb4:	08003609 	.word	0x08003609
 8002eb8:	08003609 	.word	0x08003609
 8002ebc:	08003609 	.word	0x08003609
 8002ec0:	08003609 	.word	0x08003609
 8002ec4:	08003609 	.word	0x08003609
 8002ec8:	08003609 	.word	0x08003609
 8002ecc:	08003609 	.word	0x08003609
 8002ed0:	08003609 	.word	0x08003609
 8002ed4:	08003609 	.word	0x08003609
 8002ed8:	08003609 	.word	0x08003609
 8002edc:	08003609 	.word	0x08003609
 8002ee0:	08003609 	.word	0x08003609
 8002ee4:	08003609 	.word	0x08003609
 8002ee8:	08003609 	.word	0x08003609
 8002eec:	08003609 	.word	0x08003609
 8002ef0:	08003609 	.word	0x08003609
 8002ef4:	08003609 	.word	0x08003609
 8002ef8:	08003609 	.word	0x08003609
 8002efc:	08003609 	.word	0x08003609
 8002f00:	08003609 	.word	0x08003609
 8002f04:	08003609 	.word	0x08003609
 8002f08:	08003609 	.word	0x08003609
 8002f0c:	08003609 	.word	0x08003609
 8002f10:	08003609 	.word	0x08003609
 8002f14:	08003609 	.word	0x08003609
 8002f18:	08003609 	.word	0x08003609
 8002f1c:	08003609 	.word	0x08003609
 8002f20:	08003609 	.word	0x08003609
 8002f24:	08003609 	.word	0x08003609
 8002f28:	08003609 	.word	0x08003609
 8002f2c:	08003609 	.word	0x08003609
 8002f30:	08003609 	.word	0x08003609
 8002f34:	08003609 	.word	0x08003609
 8002f38:	08003609 	.word	0x08003609
 8002f3c:	08003609 	.word	0x08003609
 8002f40:	08003609 	.word	0x08003609
 8002f44:	08003609 	.word	0x08003609
 8002f48:	08003609 	.word	0x08003609
 8002f4c:	08003609 	.word	0x08003609
 8002f50:	08003609 	.word	0x08003609
 8002f54:	08003609 	.word	0x08003609
 8002f58:	08003609 	.word	0x08003609
 8002f5c:	08003609 	.word	0x08003609
 8002f60:	08003609 	.word	0x08003609
 8002f64:	08003609 	.word	0x08003609
 8002f68:	08003609 	.word	0x08003609
 8002f6c:	08003609 	.word	0x08003609
 8002f70:	08003609 	.word	0x08003609
 8002f74:	08003609 	.word	0x08003609
 8002f78:	08003609 	.word	0x08003609
 8002f7c:	08003609 	.word	0x08003609
 8002f80:	08003609 	.word	0x08003609
 8002f84:	08003609 	.word	0x08003609
 8002f88:	08003609 	.word	0x08003609
 8002f8c:	08003609 	.word	0x08003609
 8002f90:	08003609 	.word	0x08003609
 8002f94:	08003609 	.word	0x08003609
 8002f98:	08003609 	.word	0x08003609
 8002f9c:	08003609 	.word	0x08003609
 8002fa0:	08003609 	.word	0x08003609
 8002fa4:	08003609 	.word	0x08003609
 8002fa8:	08003609 	.word	0x08003609
 8002fac:	08003609 	.word	0x08003609
 8002fb0:	08003609 	.word	0x08003609
 8002fb4:	08003609 	.word	0x08003609
 8002fb8:	08003609 	.word	0x08003609
 8002fbc:	08003609 	.word	0x08003609
 8002fc0:	08003609 	.word	0x08003609
 8002fc4:	08003609 	.word	0x08003609
 8002fc8:	08003609 	.word	0x08003609
 8002fcc:	08003609 	.word	0x08003609
 8002fd0:	08003609 	.word	0x08003609
 8002fd4:	08003609 	.word	0x08003609
 8002fd8:	08003609 	.word	0x08003609
 8002fdc:	08003609 	.word	0x08003609
 8002fe0:	08003609 	.word	0x08003609
 8002fe4:	08003609 	.word	0x08003609
 8002fe8:	08003609 	.word	0x08003609
 8002fec:	08003609 	.word	0x08003609
 8002ff0:	08003609 	.word	0x08003609
 8002ff4:	08003609 	.word	0x08003609
 8002ff8:	08003609 	.word	0x08003609
 8002ffc:	08003609 	.word	0x08003609
 8003000:	08003609 	.word	0x08003609
 8003004:	08003609 	.word	0x08003609
 8003008:	08003609 	.word	0x08003609
 800300c:	08003609 	.word	0x08003609
 8003010:	08003609 	.word	0x08003609
 8003014:	08003609 	.word	0x08003609
 8003018:	08003609 	.word	0x08003609
 800301c:	08003609 	.word	0x08003609
 8003020:	08003609 	.word	0x08003609
 8003024:	08003609 	.word	0x08003609
 8003028:	08003609 	.word	0x08003609
 800302c:	08003609 	.word	0x08003609
 8003030:	08003609 	.word	0x08003609
 8003034:	08003609 	.word	0x08003609
 8003038:	08003609 	.word	0x08003609
 800303c:	08003609 	.word	0x08003609
 8003040:	08003609 	.word	0x08003609
 8003044:	08003609 	.word	0x08003609
 8003048:	08003609 	.word	0x08003609
 800304c:	08003609 	.word	0x08003609
 8003050:	080035db 	.word	0x080035db
 8003054:	08003609 	.word	0x08003609
 8003058:	08003609 	.word	0x08003609
 800305c:	08003609 	.word	0x08003609
 8003060:	08003609 	.word	0x08003609
 8003064:	08003609 	.word	0x08003609
 8003068:	08003609 	.word	0x08003609
 800306c:	08003609 	.word	0x08003609
 8003070:	08003609 	.word	0x08003609
 8003074:	08003609 	.word	0x08003609
 8003078:	08003609 	.word	0x08003609
 800307c:	08003609 	.word	0x08003609
 8003080:	08003609 	.word	0x08003609
 8003084:	08003609 	.word	0x08003609
 8003088:	08003609 	.word	0x08003609
 800308c:	08003609 	.word	0x08003609
 8003090:	080035e1 	.word	0x080035e1
 8003094:	08003609 	.word	0x08003609
 8003098:	08003609 	.word	0x08003609
 800309c:	08003609 	.word	0x08003609
 80030a0:	08003609 	.word	0x08003609
 80030a4:	08003609 	.word	0x08003609
 80030a8:	08003609 	.word	0x08003609
 80030ac:	08003609 	.word	0x08003609
 80030b0:	08003609 	.word	0x08003609
 80030b4:	08003609 	.word	0x08003609
 80030b8:	08003609 	.word	0x08003609
 80030bc:	08003609 	.word	0x08003609
 80030c0:	08003609 	.word	0x08003609
 80030c4:	08003609 	.word	0x08003609
 80030c8:	08003609 	.word	0x08003609
 80030cc:	08003609 	.word	0x08003609
 80030d0:	080035ef 	.word	0x080035ef
 80030d4:	080035c7 	.word	0x080035c7
 80030d8:	08003609 	.word	0x08003609
 80030dc:	08003609 	.word	0x08003609
 80030e0:	08003609 	.word	0x08003609
 80030e4:	08003609 	.word	0x08003609
 80030e8:	08003609 	.word	0x08003609
 80030ec:	08003609 	.word	0x08003609
 80030f0:	08003609 	.word	0x08003609
 80030f4:	08003609 	.word	0x08003609
 80030f8:	08003609 	.word	0x08003609
 80030fc:	08003609 	.word	0x08003609
 8003100:	08003609 	.word	0x08003609
 8003104:	08003609 	.word	0x08003609
 8003108:	08003609 	.word	0x08003609
 800310c:	08003609 	.word	0x08003609
 8003110:	080035fd 	.word	0x080035fd
 8003114:	080035b3 	.word	0x080035b3
 8003118:	08003609 	.word	0x08003609
 800311c:	08003609 	.word	0x08003609
 8003120:	08003609 	.word	0x08003609
 8003124:	08003609 	.word	0x08003609
 8003128:	08003609 	.word	0x08003609
 800312c:	08003609 	.word	0x08003609
 8003130:	08003609 	.word	0x08003609
 8003134:	08003609 	.word	0x08003609
 8003138:	08003609 	.word	0x08003609
 800313c:	08003609 	.word	0x08003609
 8003140:	08003609 	.word	0x08003609
 8003144:	08003609 	.word	0x08003609
 8003148:	08003609 	.word	0x08003609
 800314c:	08003609 	.word	0x08003609
 8003150:	08003603 	.word	0x08003603
 8003154:	24001a9c 	.word	0x24001a9c
 8003158:	24001e3c 	.word	0x24001e3c
	case 0x10: {
		printf("SDN1 ON\n");
 800315c:	48b8      	ldr	r0, [pc, #736]	; (8003440 <HAL_UART_RxCpltCallback+0x6d4>)
 800315e:	f017 fb4b 	bl	801a7f8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8003162:	4bb8      	ldr	r3, [pc, #736]	; (8003444 <HAL_UART_RxCpltCallback+0x6d8>)
 8003164:	2104      	movs	r1, #4
 8003166:	2201      	movs	r2, #1
 8003168:	4618      	mov	r0, r3
 800316a:	f008 fb1d 	bl	800b7a8 <HAL_GPIO_WritePin>
		break;
 800316e:	e256      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8003170:	48b5      	ldr	r0, [pc, #724]	; (8003448 <HAL_UART_RxCpltCallback+0x6dc>)
 8003172:	f017 fb41 	bl	801a7f8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8003176:	4bb3      	ldr	r3, [pc, #716]	; (8003444 <HAL_UART_RxCpltCallback+0x6d8>)
 8003178:	2104      	movs	r1, #4
 800317a:	2200      	movs	r2, #0
 800317c:	4618      	mov	r0, r3
 800317e:	f008 fb13 	bl	800b7a8 <HAL_GPIO_WritePin>
		break;
 8003182:	e24c      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8003184:	48b1      	ldr	r0, [pc, #708]	; (800344c <HAL_UART_RxCpltCallback+0x6e0>)
 8003186:	f017 fb37 	bl	801a7f8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 800318a:	4bae      	ldr	r3, [pc, #696]	; (8003444 <HAL_UART_RxCpltCallback+0x6d8>)
 800318c:	2120      	movs	r1, #32
 800318e:	2201      	movs	r2, #1
 8003190:	4618      	mov	r0, r3
 8003192:	f008 fb09 	bl	800b7a8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 8003196:	2101      	movs	r1, #1
 8003198:	2008      	movs	r0, #8
 800319a:	f002 fc95 	bl	8005ac8 <set_rail_monitor_enable>
		break;
 800319e:	e23e      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 80031a0:	48ab      	ldr	r0, [pc, #684]	; (8003450 <HAL_UART_RxCpltCallback+0x6e4>)
 80031a2:	f017 fb29 	bl	801a7f8 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 80031a6:	2308      	movs	r3, #8
 80031a8:	617b      	str	r3, [r7, #20]
 80031aa:	e00f      	b.n	80031cc <HAL_UART_RxCpltCallback+0x460>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80031ac:	4aa9      	ldr	r2, [pc, #676]	; (8003454 <HAL_UART_RxCpltCallback+0x6e8>)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80031b4:	4aa7      	ldr	r2, [pc, #668]	; (8003454 <HAL_UART_RxCpltCallback+0x6e8>)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	4413      	add	r3, r2
 80031bc:	889b      	ldrh	r3, [r3, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	4619      	mov	r1, r3
 80031c2:	f008 faf1 	bl	800b7a8 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	dcec      	bgt.n	80031ac <HAL_UART_RxCpltCallback+0x440>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80031d2:	2310      	movs	r3, #16
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	e008      	b.n	80031ea <HAL_UART_RxCpltCallback+0x47e>
			set_rail_monitor_enable(i, 0);
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2100      	movs	r1, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f002 fc72 	bl	8005ac8 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	2b07      	cmp	r3, #7
 80031ee:	dcf3      	bgt.n	80031d8 <HAL_UART_RxCpltCallback+0x46c>
		}

		break;
 80031f0:	e215      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 80031f2:	4899      	ldr	r0, [pc, #612]	; (8003458 <HAL_UART_RxCpltCallback+0x6ec>)
 80031f4:	f017 fb00 	bl	801a7f8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 80031f8:	4b98      	ldr	r3, [pc, #608]	; (800345c <HAL_UART_RxCpltCallback+0x6f0>)
 80031fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031fe:	2201      	movs	r2, #1
 8003200:	4618      	mov	r0, r3
 8003202:	f008 fad1 	bl	800b7a8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 8003206:	2101      	movs	r1, #1
 8003208:	2009      	movs	r0, #9
 800320a:	f002 fc5d 	bl	8005ac8 <set_rail_monitor_enable>

		break;
 800320e:	e206      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8003210:	4893      	ldr	r0, [pc, #588]	; (8003460 <HAL_UART_RxCpltCallback+0x6f4>)
 8003212:	f017 faf1 	bl	801a7f8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8003216:	4b91      	ldr	r3, [pc, #580]	; (800345c <HAL_UART_RxCpltCallback+0x6f0>)
 8003218:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800321c:	2200      	movs	r2, #0
 800321e:	4618      	mov	r0, r3
 8003220:	f008 fac2 	bl	800b7a8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 8003224:	2100      	movs	r1, #0
 8003226:	2009      	movs	r0, #9
 8003228:	f002 fc4e 	bl	8005ac8 <set_rail_monitor_enable>
		break;
 800322c:	e1f7      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 800322e:	488d      	ldr	r0, [pc, #564]	; (8003464 <HAL_UART_RxCpltCallback+0x6f8>)
 8003230:	f017 fae2 	bl	801a7f8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8003234:	4b89      	ldr	r3, [pc, #548]	; (800345c <HAL_UART_RxCpltCallback+0x6f0>)
 8003236:	2180      	movs	r1, #128	; 0x80
 8003238:	2201      	movs	r2, #1
 800323a:	4618      	mov	r0, r3
 800323c:	f008 fab4 	bl	800b7a8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8003240:	2101      	movs	r1, #1
 8003242:	200a      	movs	r0, #10
 8003244:	f002 fc40 	bl	8005ac8 <set_rail_monitor_enable>

		break;
 8003248:	e1e9      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 800324a:	4887      	ldr	r0, [pc, #540]	; (8003468 <HAL_UART_RxCpltCallback+0x6fc>)
 800324c:	f017 fad4 	bl	801a7f8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8003250:	4b82      	ldr	r3, [pc, #520]	; (800345c <HAL_UART_RxCpltCallback+0x6f0>)
 8003252:	2180      	movs	r1, #128	; 0x80
 8003254:	2200      	movs	r2, #0
 8003256:	4618      	mov	r0, r3
 8003258:	f008 faa6 	bl	800b7a8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 800325c:	2100      	movs	r1, #0
 800325e:	200a      	movs	r0, #10
 8003260:	f002 fc32 	bl	8005ac8 <set_rail_monitor_enable>
		break;
 8003264:	e1db      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8003266:	4881      	ldr	r0, [pc, #516]	; (800346c <HAL_UART_RxCpltCallback+0x700>)
 8003268:	f017 fac6 	bl	801a7f8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 800326c:	4b7b      	ldr	r3, [pc, #492]	; (800345c <HAL_UART_RxCpltCallback+0x6f0>)
 800326e:	2140      	movs	r1, #64	; 0x40
 8003270:	2201      	movs	r2, #1
 8003272:	4618      	mov	r0, r3
 8003274:	f008 fa98 	bl	800b7a8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8003278:	2101      	movs	r1, #1
 800327a:	200b      	movs	r0, #11
 800327c:	f002 fc24 	bl	8005ac8 <set_rail_monitor_enable>

		break;
 8003280:	e1cd      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8003282:	487b      	ldr	r0, [pc, #492]	; (8003470 <HAL_UART_RxCpltCallback+0x704>)
 8003284:	f017 fab8 	bl	801a7f8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8003288:	4b74      	ldr	r3, [pc, #464]	; (800345c <HAL_UART_RxCpltCallback+0x6f0>)
 800328a:	2140      	movs	r1, #64	; 0x40
 800328c:	2200      	movs	r2, #0
 800328e:	4618      	mov	r0, r3
 8003290:	f008 fa8a 	bl	800b7a8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8003294:	2100      	movs	r1, #0
 8003296:	200b      	movs	r0, #11
 8003298:	f002 fc16 	bl	8005ac8 <set_rail_monitor_enable>
		break;
 800329c:	e1bf      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 800329e:	4875      	ldr	r0, [pc, #468]	; (8003474 <HAL_UART_RxCpltCallback+0x708>)
 80032a0:	f017 faaa 	bl	801a7f8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 80032a4:	4b6d      	ldr	r3, [pc, #436]	; (800345c <HAL_UART_RxCpltCallback+0x6f0>)
 80032a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032aa:	2201      	movs	r2, #1
 80032ac:	4618      	mov	r0, r3
 80032ae:	f008 fa7b 	bl	800b7a8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 80032b2:	2101      	movs	r1, #1
 80032b4:	200c      	movs	r0, #12
 80032b6:	f002 fc07 	bl	8005ac8 <set_rail_monitor_enable>

		break;
 80032ba:	e1b0      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 80032bc:	486e      	ldr	r0, [pc, #440]	; (8003478 <HAL_UART_RxCpltCallback+0x70c>)
 80032be:	f017 fa9b 	bl	801a7f8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 80032c2:	4b66      	ldr	r3, [pc, #408]	; (800345c <HAL_UART_RxCpltCallback+0x6f0>)
 80032c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032c8:	2200      	movs	r2, #0
 80032ca:	4618      	mov	r0, r3
 80032cc:	f008 fa6c 	bl	800b7a8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 80032d0:	2100      	movs	r1, #0
 80032d2:	200c      	movs	r0, #12
 80032d4:	f002 fbf8 	bl	8005ac8 <set_rail_monitor_enable>
		break;
 80032d8:	e1a1      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 80032da:	4868      	ldr	r0, [pc, #416]	; (800347c <HAL_UART_RxCpltCallback+0x710>)
 80032dc:	f017 fa8c 	bl	801a7f8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 80032e0:	4b5e      	ldr	r3, [pc, #376]	; (800345c <HAL_UART_RxCpltCallback+0x6f0>)
 80032e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032e6:	2201      	movs	r2, #1
 80032e8:	4618      	mov	r0, r3
 80032ea:	f008 fa5d 	bl	800b7a8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 80032ee:	2101      	movs	r1, #1
 80032f0:	200d      	movs	r0, #13
 80032f2:	f002 fbe9 	bl	8005ac8 <set_rail_monitor_enable>

		break;
 80032f6:	e192      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 80032f8:	4861      	ldr	r0, [pc, #388]	; (8003480 <HAL_UART_RxCpltCallback+0x714>)
 80032fa:	f017 fa7d 	bl	801a7f8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 80032fe:	4b57      	ldr	r3, [pc, #348]	; (800345c <HAL_UART_RxCpltCallback+0x6f0>)
 8003300:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003304:	2200      	movs	r2, #0
 8003306:	4618      	mov	r0, r3
 8003308:	f008 fa4e 	bl	800b7a8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 800330c:	2100      	movs	r1, #0
 800330e:	200d      	movs	r0, #13
 8003310:	f002 fbda 	bl	8005ac8 <set_rail_monitor_enable>
		break;
 8003314:	e183      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8003316:	485b      	ldr	r0, [pc, #364]	; (8003484 <HAL_UART_RxCpltCallback+0x718>)
 8003318:	f017 fa6e 	bl	801a7f8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 800331c:	4b4f      	ldr	r3, [pc, #316]	; (800345c <HAL_UART_RxCpltCallback+0x6f0>)
 800331e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003322:	2201      	movs	r2, #1
 8003324:	4618      	mov	r0, r3
 8003326:	f008 fa3f 	bl	800b7a8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 800332a:	2101      	movs	r1, #1
 800332c:	200f      	movs	r0, #15
 800332e:	f002 fbcb 	bl	8005ac8 <set_rail_monitor_enable>

		break;
 8003332:	e174      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8003334:	4854      	ldr	r0, [pc, #336]	; (8003488 <HAL_UART_RxCpltCallback+0x71c>)
 8003336:	f017 fa5f 	bl	801a7f8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 800333a:	4b48      	ldr	r3, [pc, #288]	; (800345c <HAL_UART_RxCpltCallback+0x6f0>)
 800333c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003340:	2200      	movs	r2, #0
 8003342:	4618      	mov	r0, r3
 8003344:	f008 fa30 	bl	800b7a8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8003348:	2100      	movs	r1, #0
 800334a:	200f      	movs	r0, #15
 800334c:	f002 fbbc 	bl	8005ac8 <set_rail_monitor_enable>
		break;
 8003350:	e165      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8003352:	484e      	ldr	r0, [pc, #312]	; (800348c <HAL_UART_RxCpltCallback+0x720>)
 8003354:	f017 fa50 	bl	801a7f8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8003358:	4b3a      	ldr	r3, [pc, #232]	; (8003444 <HAL_UART_RxCpltCallback+0x6d8>)
 800335a:	2140      	movs	r1, #64	; 0x40
 800335c:	2201      	movs	r2, #1
 800335e:	4618      	mov	r0, r3
 8003360:	f008 fa22 	bl	800b7a8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 8003364:	2101      	movs	r1, #1
 8003366:	2010      	movs	r0, #16
 8003368:	f002 fbae 	bl	8005ac8 <set_rail_monitor_enable>

		break;
 800336c:	e157      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 800336e:	4848      	ldr	r0, [pc, #288]	; (8003490 <HAL_UART_RxCpltCallback+0x724>)
 8003370:	f017 fa42 	bl	801a7f8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8003374:	4b33      	ldr	r3, [pc, #204]	; (8003444 <HAL_UART_RxCpltCallback+0x6d8>)
 8003376:	2140      	movs	r1, #64	; 0x40
 8003378:	2200      	movs	r2, #0
 800337a:	4618      	mov	r0, r3
 800337c:	f008 fa14 	bl	800b7a8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8003380:	2100      	movs	r1, #0
 8003382:	2010      	movs	r0, #16
 8003384:	f002 fba0 	bl	8005ac8 <set_rail_monitor_enable>
		break;
 8003388:	e149      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 800338a:	4842      	ldr	r0, [pc, #264]	; (8003494 <HAL_UART_RxCpltCallback+0x728>)
 800338c:	f017 fa34 	bl	801a7f8 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8003390:	2300      	movs	r3, #0
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	2320      	movs	r3, #32
 8003396:	4a40      	ldr	r2, [pc, #256]	; (8003498 <HAL_UART_RxCpltCallback+0x72c>)
 8003398:	2100      	movs	r1, #0
 800339a:	4840      	ldr	r0, [pc, #256]	; (800349c <HAL_UART_RxCpltCallback+0x730>)
 800339c:	f004 fb80 	bl	8007aa0 <HAL_DAC_Start_DMA>
		break;
 80033a0:	e13d      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 80033a2:	483f      	ldr	r0, [pc, #252]	; (80034a0 <HAL_UART_RxCpltCallback+0x734>)
 80033a4:	f017 fa28 	bl	801a7f8 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80033a8:	2100      	movs	r1, #0
 80033aa:	483c      	ldr	r0, [pc, #240]	; (800349c <HAL_UART_RxCpltCallback+0x730>)
 80033ac:	f004 fc38 	bl	8007c20 <HAL_DAC_Stop_DMA>
		break;
 80033b0:	e135      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 80033b2:	483c      	ldr	r0, [pc, #240]	; (80034a4 <HAL_UART_RxCpltCallback+0x738>)
 80033b4:	f017 fa20 	bl	801a7f8 <puts>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 80033b8:	4b3b      	ldr	r3, [pc, #236]	; (80034a8 <HAL_UART_RxCpltCallback+0x73c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2102      	movs	r1, #2
 80033be:	4618      	mov	r0, r3
 80033c0:	f013 ffdc 	bl	801737c <osEventFlagsSet>
		TIM2->CCR4 = 312;
 80033c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033c8:	f44f 729c 	mov.w	r2, #312	; 0x138
 80033cc:	641a      	str	r2, [r3, #64]	; 0x40
		ERPA_ENABLED = 1;
 80033ce:	4b37      	ldr	r3, [pc, #220]	; (80034ac <HAL_UART_RxCpltCallback+0x740>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	701a      	strb	r2, [r3, #0]

		break;
 80033d4:	e123      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 80033d6:	4836      	ldr	r0, [pc, #216]	; (80034b0 <HAL_UART_RxCpltCallback+0x744>)
 80033d8:	f017 fa0e 	bl	801a7f8 <puts>
		ERPA_ENABLED = 0;
 80033dc:	4b33      	ldr	r3, [pc, #204]	; (80034ac <HAL_UART_RxCpltCallback+0x740>)
 80033de:	2200      	movs	r2, #0
 80033e0:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 80033e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033e6:	2200      	movs	r2, #0
 80033e8:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80033ea:	e118      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1B: {
		printf("PMT ON\n");
 80033ec:	4831      	ldr	r0, [pc, #196]	; (80034b4 <HAL_UART_RxCpltCallback+0x748>)
 80033ee:	f017 fa03 	bl	801a7f8 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80033f2:	2100      	movs	r1, #0
 80033f4:	4830      	ldr	r0, [pc, #192]	; (80034b8 <HAL_UART_RxCpltCallback+0x74c>)
 80033f6:	f00f fc91 	bl	8012d1c <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 80033fa:	4b2b      	ldr	r3, [pc, #172]	; (80034a8 <HAL_UART_RxCpltCallback+0x73c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2101      	movs	r1, #1
 8003400:	4618      	mov	r0, r3
 8003402:	f013 ffbb 	bl	801737c <osEventFlagsSet>
		break;
 8003406:	e10a      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8003408:	482c      	ldr	r0, [pc, #176]	; (80034bc <HAL_UART_RxCpltCallback+0x750>)
 800340a:	f017 f9f5 	bl	801a7f8 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 800340e:	2100      	movs	r1, #0
 8003410:	4829      	ldr	r0, [pc, #164]	; (80034b8 <HAL_UART_RxCpltCallback+0x74c>)
 8003412:	f00f fddd 	bl	8012fd0 <HAL_TIM_OC_Stop_IT>
		break;
 8003416:	e102      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1C: {
		printf("HK ON \n");
 8003418:	4829      	ldr	r0, [pc, #164]	; (80034c0 <HAL_UART_RxCpltCallback+0x754>)
 800341a:	f017 f9ed 	bl	801a7f8 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 800341e:	4b22      	ldr	r3, [pc, #136]	; (80034a8 <HAL_UART_RxCpltCallback+0x73c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2104      	movs	r1, #4
 8003424:	4618      	mov	r0, r3
 8003426:	f013 ffa9 	bl	801737c <osEventFlagsSet>
		HK_ENABLED = 1;
 800342a:	4b26      	ldr	r3, [pc, #152]	; (80034c4 <HAL_UART_RxCpltCallback+0x758>)
 800342c:	2201      	movs	r2, #1
 800342e:	701a      	strb	r2, [r3, #0]
		break;
 8003430:	e0f5      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8003432:	4825      	ldr	r0, [pc, #148]	; (80034c8 <HAL_UART_RxCpltCallback+0x75c>)
 8003434:	f017 f9e0 	bl	801a7f8 <puts>
		HK_ENABLED = 0;
 8003438:	4b22      	ldr	r3, [pc, #136]	; (80034c4 <HAL_UART_RxCpltCallback+0x758>)
 800343a:	2200      	movs	r2, #0
 800343c:	701a      	strb	r2, [r3, #0]
		break;
 800343e:	e0ee      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
 8003440:	0801b1c0 	.word	0x0801b1c0
 8003444:	58020400 	.word	0x58020400
 8003448:	0801b1c8 	.word	0x0801b1c8
 800344c:	0801b1d4 	.word	0x0801b1d4
 8003450:	0801b1e0 	.word	0x0801b1e0
 8003454:	0801b4dc 	.word	0x0801b4dc
 8003458:	0801b1ec 	.word	0x0801b1ec
 800345c:	58020800 	.word	0x58020800
 8003460:	0801b1f8 	.word	0x0801b1f8
 8003464:	0801b208 	.word	0x0801b208
 8003468:	0801b214 	.word	0x0801b214
 800346c:	0801b220 	.word	0x0801b220
 8003470:	0801b22c 	.word	0x0801b22c
 8003474:	0801b23c 	.word	0x0801b23c
 8003478:	0801b248 	.word	0x0801b248
 800347c:	0801b254 	.word	0x0801b254
 8003480:	0801b260 	.word	0x0801b260
 8003484:	0801b26c 	.word	0x0801b26c
 8003488:	0801b27c 	.word	0x0801b27c
 800348c:	0801b28c 	.word	0x0801b28c
 8003490:	0801b298 	.word	0x0801b298
 8003494:	0801b2a8 	.word	0x0801b2a8
 8003498:	2400003c 	.word	0x2400003c
 800349c:	24000314 	.word	0x24000314
 80034a0:	0801b2b8 	.word	0x0801b2b8
 80034a4:	0801b2c8 	.word	0x0801b2c8
 80034a8:	24001a90 	.word	0x24001a90
 80034ac:	24001add 	.word	0x24001add
 80034b0:	0801b2d0 	.word	0x0801b2d0
 80034b4:	0801b2dc 	.word	0x0801b2dc
 80034b8:	24001da4 	.word	0x24001da4
 80034bc:	0801b2e4 	.word	0x0801b2e4
 80034c0:	0801b2ec 	.word	0x0801b2ec
 80034c4:	24001adc 	.word	0x24001adc
 80034c8:	0801b2f4 	.word	0x0801b2f4
	}
	case 0x1D: {
		printf("Step Up\n");
 80034cc:	4856      	ldr	r0, [pc, #344]	; (8003628 <HAL_UART_RxCpltCallback+0x8bc>)
 80034ce:	f017 f993 	bl	801a7f8 <puts>
		if (step < 14) {
 80034d2:	4b56      	ldr	r3, [pc, #344]	; (800362c <HAL_UART_RxCpltCallback+0x8c0>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b0d      	cmp	r3, #13
 80034da:	f200 8099 	bhi.w	8003610 <HAL_UART_RxCpltCallback+0x8a4>
			step += 2;
 80034de:	4b53      	ldr	r3, [pc, #332]	; (800362c <HAL_UART_RxCpltCallback+0x8c0>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	3302      	adds	r3, #2
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	4b50      	ldr	r3, [pc, #320]	; (800362c <HAL_UART_RxCpltCallback+0x8c0>)
 80034ea:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 80034ec:	4b4f      	ldr	r3, [pc, #316]	; (800362c <HAL_UART_RxCpltCallback+0x8c0>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	4b4e      	ldr	r3, [pc, #312]	; (8003630 <HAL_UART_RxCpltCallback+0x8c4>)
 80034f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034fa:	2200      	movs	r2, #0
 80034fc:	2100      	movs	r1, #0
 80034fe:	484d      	ldr	r0, [pc, #308]	; (8003634 <HAL_UART_RxCpltCallback+0x8c8>)
 8003500:	f004 fc31 	bl	8007d66 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003504:	2100      	movs	r1, #0
 8003506:	484b      	ldr	r0, [pc, #300]	; (8003634 <HAL_UART_RxCpltCallback+0x8c8>)
 8003508:	f004 fa72 	bl	80079f0 <HAL_DAC_Start>
		}
		break;
 800350c:	e080      	b.n	8003610 <HAL_UART_RxCpltCallback+0x8a4>
	}
	case 0x0D: {
		printf("Step Down\n");
 800350e:	484a      	ldr	r0, [pc, #296]	; (8003638 <HAL_UART_RxCpltCallback+0x8cc>)
 8003510:	f017 f972 	bl	801a7f8 <puts>
		if (step > 1) {
 8003514:	4b45      	ldr	r3, [pc, #276]	; (800362c <HAL_UART_RxCpltCallback+0x8c0>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b01      	cmp	r3, #1
 800351c:	d97a      	bls.n	8003614 <HAL_UART_RxCpltCallback+0x8a8>
			step -= 2;
 800351e:	4b43      	ldr	r3, [pc, #268]	; (800362c <HAL_UART_RxCpltCallback+0x8c0>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	b2db      	uxtb	r3, r3
 8003524:	3b02      	subs	r3, #2
 8003526:	b2da      	uxtb	r2, r3
 8003528:	4b40      	ldr	r3, [pc, #256]	; (800362c <HAL_UART_RxCpltCallback+0x8c0>)
 800352a:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 800352c:	4b3f      	ldr	r3, [pc, #252]	; (800362c <HAL_UART_RxCpltCallback+0x8c0>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	b2db      	uxtb	r3, r3
 8003532:	461a      	mov	r2, r3
 8003534:	4b3e      	ldr	r3, [pc, #248]	; (8003630 <HAL_UART_RxCpltCallback+0x8c4>)
 8003536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800353a:	2200      	movs	r2, #0
 800353c:	2100      	movs	r1, #0
 800353e:	483d      	ldr	r0, [pc, #244]	; (8003634 <HAL_UART_RxCpltCallback+0x8c8>)
 8003540:	f004 fc11 	bl	8007d66 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003544:	2100      	movs	r1, #0
 8003546:	483b      	ldr	r0, [pc, #236]	; (8003634 <HAL_UART_RxCpltCallback+0x8c8>)
 8003548:	f004 fa52 	bl	80079f0 <HAL_DAC_Start>
		}
		break;
 800354c:	e062      	b.n	8003614 <HAL_UART_RxCpltCallback+0x8a8>
	}
	case 0x1E: {
		printf("Factor Up\n");
 800354e:	483b      	ldr	r0, [pc, #236]	; (800363c <HAL_UART_RxCpltCallback+0x8d0>)
 8003550:	f017 f952 	bl	801a7f8 <puts>
		if (cadence <= 50000) {
 8003554:	4b3a      	ldr	r3, [pc, #232]	; (8003640 <HAL_UART_RxCpltCallback+0x8d4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f24c 3250 	movw	r2, #50000	; 0xc350
 800355c:	4293      	cmp	r3, r2
 800355e:	d85b      	bhi.n	8003618 <HAL_UART_RxCpltCallback+0x8ac>
			cadence *= 2;
 8003560:	4b37      	ldr	r3, [pc, #220]	; (8003640 <HAL_UART_RxCpltCallback+0x8d4>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	4a36      	ldr	r2, [pc, #216]	; (8003640 <HAL_UART_RxCpltCallback+0x8d4>)
 8003568:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 800356a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800356e:	4b34      	ldr	r3, [pc, #208]	; (8003640 <HAL_UART_RxCpltCallback+0x8d4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8003574:	e050      	b.n	8003618 <HAL_UART_RxCpltCallback+0x8ac>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8003576:	4833      	ldr	r0, [pc, #204]	; (8003644 <HAL_UART_RxCpltCallback+0x8d8>)
 8003578:	f017 f93e 	bl	801a7f8 <puts>
		if (cadence >= 6250) {
 800357c:	4b30      	ldr	r3, [pc, #192]	; (8003640 <HAL_UART_RxCpltCallback+0x8d4>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f641 0269 	movw	r2, #6249	; 0x1869
 8003584:	4293      	cmp	r3, r2
 8003586:	d949      	bls.n	800361c <HAL_UART_RxCpltCallback+0x8b0>
			cadence /= 2;
 8003588:	4b2d      	ldr	r3, [pc, #180]	; (8003640 <HAL_UART_RxCpltCallback+0x8d4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	085b      	lsrs	r3, r3, #1
 800358e:	4a2c      	ldr	r2, [pc, #176]	; (8003640 <HAL_UART_RxCpltCallback+0x8d4>)
 8003590:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8003592:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003596:	4b2a      	ldr	r3, [pc, #168]	; (8003640 <HAL_UART_RxCpltCallback+0x8d4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 800359c:	e03e      	b.n	800361c <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 800359e:	482a      	ldr	r0, [pc, #168]	; (8003648 <HAL_UART_RxCpltCallback+0x8dc>)
 80035a0:	f017 f92a 	bl	801a7f8 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 80035a4:	4b29      	ldr	r3, [pc, #164]	; (800364c <HAL_UART_RxCpltCallback+0x8e0>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2102      	movs	r1, #2
 80035aa:	4618      	mov	r0, r3
 80035ac:	f013 fee6 	bl	801737c <osEventFlagsSet>
		break;
 80035b0:	e035      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xE0: {
		printf("Auto Init\n");
 80035b2:	4827      	ldr	r0, [pc, #156]	; (8003650 <HAL_UART_RxCpltCallback+0x8e4>)
 80035b4:	f017 f920 	bl	801a7f8 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 80035b8:	4b24      	ldr	r3, [pc, #144]	; (800364c <HAL_UART_RxCpltCallback+0x8e0>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2104      	movs	r1, #4
 80035be:	4618      	mov	r0, r3
 80035c0:	f013 fedc 	bl	801737c <osEventFlagsSet>
		break;
 80035c4:	e02b      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 80035c6:	4823      	ldr	r0, [pc, #140]	; (8003654 <HAL_UART_RxCpltCallback+0x8e8>)
 80035c8:	f017 f916 	bl	801a7f8 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 80035cc:	4b1f      	ldr	r3, [pc, #124]	; (800364c <HAL_UART_RxCpltCallback+0x8e0>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2108      	movs	r1, #8
 80035d2:	4618      	mov	r0, r3
 80035d4:	f013 fed2 	bl	801737c <osEventFlagsSet>
		break;
 80035d8:	e021      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xAF: {
		sync();
 80035da:	f000 f999 	bl	8003910 <sync>
		break;
 80035de:	e01e      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 80035e0:	4b1d      	ldr	r3, [pc, #116]	; (8003658 <HAL_UART_RxCpltCallback+0x8ec>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2101      	movs	r1, #1
 80035e6:	4618      	mov	r0, r3
 80035e8:	f013 fec8 	bl	801737c <osEventFlagsSet>
		break;
 80035ec:	e017      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 80035ee:	4b1a      	ldr	r3, [pc, #104]	; (8003658 <HAL_UART_RxCpltCallback+0x8ec>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2102      	movs	r1, #2
 80035f4:	4618      	mov	r0, r3
 80035f6:	f013 fec1 	bl	801737c <osEventFlagsSet>
		break;
 80035fa:	e010      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xDF: {
		reset_error_counters();
 80035fc:	f7fe fd4e 	bl	800209c <reset_error_counters>
		break;
 8003600:	e00d      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xEF: {
#ifdef ERROR_HANDLING_ENABLED
		send_previous_error_packet();
 8003602:	f7fe fefb 	bl	80023fc <send_previous_error_packet>
#endif
		break;
 8003606:	e00a      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
	}
	default: {
		printf("Unknown Command\n");
 8003608:	4814      	ldr	r0, [pc, #80]	; (800365c <HAL_UART_RxCpltCallback+0x8f0>)
 800360a:	f017 f8f5 	bl	801a7f8 <puts>
		break;
 800360e:	e006      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
		break;
 8003610:	bf00      	nop
 8003612:	e004      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
		break;
 8003614:	bf00      	nop
 8003616:	e002      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
		break;
 8003618:	bf00      	nop
 800361a:	e000      	b.n	800361e <HAL_UART_RxCpltCallback+0x8b2>
		break;
 800361c:	bf00      	nop
	}
	}
}
 800361e:	bf00      	nop
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	0801b2fc 	.word	0x0801b2fc
 800362c:	24001ade 	.word	0x24001ade
 8003630:	2400003c 	.word	0x2400003c
 8003634:	24000314 	.word	0x24000314
 8003638:	0801b304 	.word	0x0801b304
 800363c:	0801b310 	.word	0x0801b310
 8003640:	240000bc 	.word	0x240000bc
 8003644:	0801b31c 	.word	0x0801b31c
 8003648:	0801b328 	.word	0x0801b328
 800364c:	24001a94 	.word	0x24001a94
 8003650:	0801b338 	.word	0x0801b338
 8003654:	0801b344 	.word	0x0801b344
 8003658:	24001a98 	.word	0x24001a98
 800365c:	0801b350 	.word	0x0801b350

08003660 <get_reset_cause>:

void get_reset_cause()
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
	ERROR_STRUCT error;

	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDG1RST))
 8003666:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <get_reset_cause+0x58>)
 8003668:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800366c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d007      	beq.n	8003684 <get_reset_cause+0x24>
    {
        error.category = EC_watchdog;
 8003674:	2304      	movs	r3, #4
 8003676:	713b      	strb	r3, [r7, #4]
        error.detail = ED_UNDEFINED;
 8003678:	231a      	movs	r3, #26
 800367a:	717b      	strb	r3, [r7, #5]
        handle_error(error);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7fe fc6d 	bl	8001f5c <handle_error>
 8003682:	e00d      	b.n	80036a0 <get_reset_cause+0x40>
    }
    // Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to
    // ensure first that the reset cause is NOT a POR/PDR reset. See note
    // below.
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 8003684:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <get_reset_cause+0x58>)
 8003686:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800368a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d006      	beq.n	80036a0 <get_reset_cause+0x40>
    {
        error.category = EC_brownout;
 8003692:	2303      	movs	r3, #3
 8003694:	713b      	strb	r3, [r7, #4]
        error.detail = ED_UNDEFINED;
 8003696:	231a      	movs	r3, #26
 8003698:	717b      	strb	r3, [r7, #5]
        handle_error(error);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7fe fc5e 	bl	8001f5c <handle_error>
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 80036a0:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <get_reset_cause+0x58>)
 80036a2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80036a6:	4a04      	ldr	r2, [pc, #16]	; (80036b8 <get_reset_cause+0x58>)
 80036a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ac:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
}
 80036b0:	bf00      	nop
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	58024400 	.word	0x58024400

080036bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036c0:	f002 fc02 	bl	8005ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036c4:	f000 f828 	bl	8003718 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80036c8:	f000 f8a8 	bl	800381c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036cc:	f7ff f948 	bl	8002960 <MX_GPIO_Init>
  MX_DMA_Init();
 80036d0:	f7fd fb0a 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80036d4:	f001 ff2e 	bl	8005534 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80036d8:	f7ff f9bc 	bl	8002a54 <MX_I2C1_Init>
  MX_SPI2_Init();
 80036dc:	f000 fe60 	bl	80043a0 <MX_SPI2_Init>
  MX_TIM2_Init();
 80036e0:	f001 fb4c 	bl	8004d7c <MX_TIM2_Init>
  MX_TIM1_Init();
 80036e4:	f001 fa9c 	bl	8004c20 <MX_TIM1_Init>
  MX_ADC3_Init();
 80036e8:	f7fd f89e 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 80036ec:	f7fc ff7a 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 80036f0:	f7fd fa46 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 80036f4:	f000 fdfc 	bl	80042f0 <MX_SPI1_Init>
  MX_RTC_Init();
 80036f8:	f000 fbc8 	bl	8003e8c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

#ifdef ERROR_HANDLING_ENABLED
  	error_counter_init();
 80036fc:	f7fe fc5a 	bl	8001fb4 <error_counter_init>
  	get_reset_cause();
 8003700:	f7ff ffae 	bl	8003660 <get_reset_cause>
#endif

  system_setup();
 8003704:	f000 f8ba 	bl	800387c <system_setup>
//  handle_error(error);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003708:	f013 fca0 	bl	801704c <osKernelInitialize>
  MX_FREERTOS_Init();
 800370c:	f7fe fef0 	bl	80024f0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003710:	f013 fcc0 	bl	8017094 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8003714:	e7fe      	b.n	8003714 <main+0x58>
	...

08003718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b09c      	sub	sp, #112	; 0x70
 800371c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800371e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003722:	224c      	movs	r2, #76	; 0x4c
 8003724:	2100      	movs	r1, #0
 8003726:	4618      	mov	r0, r3
 8003728:	f016 fff0 	bl	801a70c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800372c:	1d3b      	adds	r3, r7, #4
 800372e:	2220      	movs	r2, #32
 8003730:	2100      	movs	r1, #0
 8003732:	4618      	mov	r0, r3
 8003734:	f016 ffea 	bl	801a70c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003738:	2002      	movs	r0, #2
 800373a:	f00a fbff 	bl	800df3c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800373e:	2300      	movs	r3, #0
 8003740:	603b      	str	r3, [r7, #0]
 8003742:	4b34      	ldr	r3, [pc, #208]	; (8003814 <SystemClock_Config+0xfc>)
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	4a33      	ldr	r2, [pc, #204]	; (8003814 <SystemClock_Config+0xfc>)
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800374e:	4b31      	ldr	r3, [pc, #196]	; (8003814 <SystemClock_Config+0xfc>)
 8003750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	603b      	str	r3, [r7, #0]
 8003758:	4b2f      	ldr	r3, [pc, #188]	; (8003818 <SystemClock_Config+0x100>)
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003760:	4a2d      	ldr	r2, [pc, #180]	; (8003818 <SystemClock_Config+0x100>)
 8003762:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003766:	6193      	str	r3, [r2, #24]
 8003768:	4b2b      	ldr	r3, [pc, #172]	; (8003818 <SystemClock_Config+0x100>)
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003770:	603b      	str	r3, [r7, #0]
 8003772:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003774:	bf00      	nop
 8003776:	4b28      	ldr	r3, [pc, #160]	; (8003818 <SystemClock_Config+0x100>)
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800377e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003782:	d1f8      	bne.n	8003776 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8003784:	230b      	movs	r3, #11
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800378c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 800378e:	2309      	movs	r3, #9
 8003790:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003792:	2340      	movs	r3, #64	; 0x40
 8003794:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003796:	2301      	movs	r3, #1
 8003798:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800379a:	2302      	movs	r3, #2
 800379c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800379e:	2302      	movs	r3, #2
 80037a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80037a2:	2304      	movs	r3, #4
 80037a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80037a6:	2318      	movs	r3, #24
 80037a8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80037aa:	2302      	movs	r3, #2
 80037ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80037ae:	2302      	movs	r3, #2
 80037b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80037b2:	2302      	movs	r3, #2
 80037b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80037b6:	2308      	movs	r3, #8
 80037b8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80037ba:	2302      	movs	r3, #2
 80037bc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80037be:	2300      	movs	r3, #0
 80037c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037c6:	4618      	mov	r0, r3
 80037c8:	f00a fbf2 	bl	800dfb0 <HAL_RCC_OscConfig>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80037d2:	f000 f955 	bl	8003a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037d6:	233f      	movs	r3, #63	; 0x3f
 80037d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037da:	2303      	movs	r3, #3
 80037dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80037e2:	2300      	movs	r3, #0
 80037e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80037e6:	2300      	movs	r3, #0
 80037e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80037ea:	2340      	movs	r3, #64	; 0x40
 80037ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80037f2:	2300      	movs	r3, #0
 80037f4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80037f6:	1d3b      	adds	r3, r7, #4
 80037f8:	2101      	movs	r1, #1
 80037fa:	4618      	mov	r0, r3
 80037fc:	f00b f832 	bl	800e864 <HAL_RCC_ClockConfig>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8003806:	f000 f93b 	bl	8003a80 <Error_Handler>
  }
}
 800380a:	bf00      	nop
 800380c:	3770      	adds	r7, #112	; 0x70
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	58000400 	.word	0x58000400
 8003818:	58024800 	.word	0x58024800

0800381c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b0b0      	sub	sp, #192	; 0xc0
 8003820:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003822:	463b      	mov	r3, r7
 8003824:	22c0      	movs	r2, #192	; 0xc0
 8003826:	2100      	movs	r1, #0
 8003828:	4618      	mov	r0, r3
 800382a:	f016 ff6f 	bl	801a70c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800382e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003832:	f04f 0300 	mov.w	r3, #0
 8003836:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800383a:	2304      	movs	r3, #4
 800383c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 800383e:	2318      	movs	r3, #24
 8003840:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8003842:	2308      	movs	r3, #8
 8003844:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003846:	2302      	movs	r3, #2
 8003848:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800384a:	2302      	movs	r3, #2
 800384c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800384e:	2380      	movs	r3, #128	; 0x80
 8003850:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003852:	2320      	movs	r3, #32
 8003854:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003856:	2300      	movs	r3, #0
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800385a:	2300      	movs	r3, #0
 800385c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003860:	463b      	mov	r3, r7
 8003862:	4618      	mov	r0, r3
 8003864:	f00b fbcc 	bl	800f000 <HAL_RCCEx_PeriphCLKConfig>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800386e:	f000 f907 	bl	8003a80 <Error_Handler>
  }
}
 8003872:	bf00      	nop
 8003874:	37c0      	adds	r7, #192	; 0xc0
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts



	packet_event_flags = osEventFlagsNew(NULL);
 8003880:	2000      	movs	r0, #0
 8003882:	f013 fd3c 	bl	80172fe <osEventFlagsNew>
 8003886:	4603      	mov	r3, r0
 8003888:	4a1b      	ldr	r2, [pc, #108]	; (80038f8 <system_setup+0x7c>)
 800388a:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 800388c:	4b1a      	ldr	r3, [pc, #104]	; (80038f8 <system_setup+0x7c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d100      	bne.n	8003896 <system_setup+0x1a>
        while (1);
 8003894:	e7fe      	b.n	8003894 <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 8003896:	2000      	movs	r0, #0
 8003898:	f013 fd31 	bl	80172fe <osEventFlagsNew>
 800389c:	4603      	mov	r3, r0
 800389e:	4a17      	ldr	r2, [pc, #92]	; (80038fc <system_setup+0x80>)
 80038a0:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 80038a2:	4b16      	ldr	r3, [pc, #88]	; (80038fc <system_setup+0x80>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d100      	bne.n	80038ac <system_setup+0x30>
        while (1);
 80038aa:	e7fe      	b.n	80038aa <system_setup+0x2e>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 80038ac:	2000      	movs	r0, #0
 80038ae:	f013 fd26 	bl	80172fe <osEventFlagsNew>
 80038b2:	4603      	mov	r3, r0
 80038b4:	4a12      	ldr	r2, [pc, #72]	; (8003900 <system_setup+0x84>)
 80038b6:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 80038b8:	4b11      	ldr	r3, [pc, #68]	; (8003900 <system_setup+0x84>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d100      	bne.n	80038c2 <system_setup+0x46>
        while (1);
 80038c0:	e7fe      	b.n	80038c0 <system_setup+0x44>
    }

    TIM2->CCR4 = 0;
 80038c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80038c6:	2200      	movs	r2, #0
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 80038ca:	210c      	movs	r1, #12
 80038cc:	480d      	ldr	r0, [pc, #52]	; (8003904 <system_setup+0x88>)
 80038ce:	f00f fa25 	bl	8012d1c <HAL_TIM_OC_Start_IT>

	if (!voltage_monitor_init()) {
 80038d2:	f001 ff39 	bl	8005748 <voltage_monitor_init>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d100      	bne.n	80038de <system_setup+0x62>
		while (1);
 80038dc:	e7fe      	b.n	80038dc <system_setup+0x60>
	}

	if (!init_adc_dma()) {
 80038de:	f000 fb67 	bl	8003fb0 <init_adc_dma>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d100      	bne.n	80038ea <system_setup+0x6e>
		while (1);
 80038e8:	e7fe      	b.n	80038e8 <system_setup+0x6c>
	}

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80038ea:	2201      	movs	r2, #1
 80038ec:	4906      	ldr	r1, [pc, #24]	; (8003908 <system_setup+0x8c>)
 80038ee:	4807      	ldr	r0, [pc, #28]	; (800390c <system_setup+0x90>)
 80038f0:	f010 fef4 	bl	80146dc <HAL_UART_Receive_IT>

	//MX_IWDG1_Init();

}
 80038f4:	bf00      	nop
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	24001a90 	.word	0x24001a90
 80038fc:	24001a94 	.word	0x24001a94
 8003900:	24001a98 	.word	0x24001a98
 8003904:	24001df0 	.word	0x24001df0
 8003908:	24001a9c 	.word	0x24001a9c
 800390c:	24001e3c 	.word	0x24001e3c

08003910 <sync>:

void sync() {
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
	send_ACK();
 8003916:	f000 f821 	bl	800395c <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 800391a:	480e      	ldr	r0, [pc, #56]	; (8003954 <sync+0x44>)
 800391c:	f010 ff2a 	bl	8014774 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8003920:	2364      	movs	r3, #100	; 0x64
 8003922:	2209      	movs	r2, #9
 8003924:	490c      	ldr	r1, [pc, #48]	; (8003958 <sync+0x48>)
 8003926:	480b      	ldr	r0, [pc, #44]	; (8003954 <sync+0x44>)
 8003928:	f010 fe10 	bl	801454c <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 800392c:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <sync+0x48>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	2bff      	cmp	r3, #255	; 0xff
 8003936:	d1f3      	bne.n	8003920 <sync+0x10>

	calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
 8003938:	4807      	ldr	r0, [pc, #28]	; (8003958 <sync+0x48>)
 800393a:	f001 fd39 	bl	80053b0 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800393e:	2201      	movs	r2, #1
 8003940:	4905      	ldr	r1, [pc, #20]	; (8003958 <sync+0x48>)
 8003942:	4804      	ldr	r0, [pc, #16]	; (8003954 <sync+0x44>)
 8003944:	f010 feca 	bl	80146dc <HAL_UART_Receive_IT>
	send_error_counter_packet();
 8003948:	f7fe fc1c 	bl	8002184 <send_error_counter_packet>
}
 800394c:	bf00      	nop
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	24001e3c 	.word	0x24001e3c
 8003958:	24001a9c 	.word	0x24001a9c

0800395c <send_ACK>:

void send_ACK() {
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8003960:	4b05      	ldr	r3, [pc, #20]	; (8003978 <send_ACK+0x1c>)
 8003962:	22ff      	movs	r2, #255	; 0xff
 8003964:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 8003966:	2364      	movs	r3, #100	; 0x64
 8003968:	2201      	movs	r2, #1
 800396a:	4903      	ldr	r1, [pc, #12]	; (8003978 <send_ACK+0x1c>)
 800396c:	4803      	ldr	r0, [pc, #12]	; (800397c <send_ACK+0x20>)
 800396e:	f010 fd5f 	bl	8014430 <HAL_UART_Transmit>
}
 8003972:	bf00      	nop
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	24001ae8 	.word	0x24001ae8
 800397c:	24001e3c 	.word	0x24001e3c

08003980 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 8003986:	4b2e      	ldr	r3, [pc, #184]	; (8003a40 <get_current_step+0xc0>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003992:	4293      	cmp	r3, r2
 8003994:	d04a      	beq.n	8003a2c <get_current_step+0xac>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800399c:	da48      	bge.n	8003a30 <get_current_step+0xb0>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f640 628b 	movw	r2, #3723	; 0xe8b
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d03f      	beq.n	8003a28 <get_current_step+0xa8>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f640 628b 	movw	r2, #3723	; 0xe8b
 80039ae:	4293      	cmp	r3, r2
 80039b0:	dc3e      	bgt.n	8003a30 <get_current_step+0xb0>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f640 421f 	movw	r2, #3103	; 0xc1f
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d033      	beq.n	8003a24 <get_current_step+0xa4>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 80039c2:	da35      	bge.n	8003a30 <get_current_step+0xb0>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d028      	beq.n	8003a20 <get_current_step+0xa0>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80039d4:	4293      	cmp	r3, r2
 80039d6:	dc2b      	bgt.n	8003a30 <get_current_step+0xb0>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f240 7245 	movw	r2, #1861	; 0x745
 80039de:	4293      	cmp	r3, r2
 80039e0:	d01c      	beq.n	8003a1c <get_current_step+0x9c>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f240 7245 	movw	r2, #1861	; 0x745
 80039e8:	4293      	cmp	r3, r2
 80039ea:	dc21      	bgt.n	8003a30 <get_current_step+0xb0>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d010      	beq.n	8003a18 <get_current_step+0x98>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80039fc:	4293      	cmp	r3, r2
 80039fe:	dc17      	bgt.n	8003a30 <get_current_step+0xb0>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d004      	beq.n	8003a10 <get_current_step+0x90>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8003a0c:	d002      	beq.n	8003a14 <get_current_step+0x94>
 8003a0e:	e00f      	b.n	8003a30 <get_current_step+0xb0>
	case 0:
		return 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	e00e      	b.n	8003a32 <get_current_step+0xb2>
	case 620:
		return 1;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e00c      	b.n	8003a32 <get_current_step+0xb2>
	case 1241:
		return 2;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e00a      	b.n	8003a32 <get_current_step+0xb2>
	case 1861:
		return 3;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e008      	b.n	8003a32 <get_current_step+0xb2>
	case 2482:
		return 4;
 8003a20:	2304      	movs	r3, #4
 8003a22:	e006      	b.n	8003a32 <get_current_step+0xb2>
	case 3103:
		return 5;
 8003a24:	2305      	movs	r3, #5
 8003a26:	e004      	b.n	8003a32 <get_current_step+0xb2>
	case 3723:
		return 6;
 8003a28:	2306      	movs	r3, #6
 8003a2a:	e002      	b.n	8003a32 <get_current_step+0xb2>
	case 4095:
		return 7;
 8003a2c:	2307      	movs	r3, #7
 8003a2e:	e000      	b.n	8003a32 <get_current_step+0xb2>
	default:
		return -1;
 8003a30:	23ff      	movs	r3, #255	; 0xff
	}
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40007400 	.word	0x40007400

08003a44 <enter_stop>:

void enter_stop() {
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
	  send_ACK();
 8003a48:	f7ff ff88 	bl	800395c <send_ACK>

	  vTaskSuspendAll();
 8003a4c:	f015 f8f4 	bl	8018c38 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003a50:	2101      	movs	r1, #1
 8003a52:	2001      	movs	r0, #1
 8003a54:	f00a fa36 	bl	800dec4 <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 8003a58:	f7ff f91c 	bl	8002c94 <__NVIC_SystemReset>

08003a5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a04      	ldr	r2, [pc, #16]	; (8003a7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d101      	bne.n	8003a72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003a6e:	f002 fa67 	bl	8005f40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003a72:	bf00      	nop
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40001000 	.word	0x40001000

08003a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	ERROR_STRUCT error;
	error.category = EC_peripheral;
 8003a86:	2302      	movs	r3, #2
 8003a88:	713b      	strb	r3, [r7, #4]
	error.detail = ED_UNDEFINED;
 8003a8a:	231a      	movs	r3, #26
 8003a8c:	717b      	strb	r3, [r7, #5]
	handle_error(error);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fe fa64 	bl	8001f5c <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8003a94:	bf00      	nop
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8003aa2:	bf00      	nop
 8003aa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003aa8:	481c      	ldr	r0, [pc, #112]	; (8003b1c <create_pmt_packet+0x80>)
 8003aaa:	f007 fe65 	bl	800b778 <HAL_GPIO_ReadPin>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1f7      	bne.n	8003aa4 <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003ab4:	1d3b      	adds	r3, r7, #4
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f001 fa98 	bl	8004fec <get_uptime>
	sample_pmt_spi(pmt_spi);
 8003abc:	f107 0308 	add.w	r3, r7, #8
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 fac9 	bl	8004058 <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 8003ac6:	23ff      	movs	r3, #255	; 0xff
 8003ac8:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 8003aca:	23ff      	movs	r3, #255	; 0xff
 8003acc:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8003ace:	4b14      	ldr	r3, [pc, #80]	; (8003b20 <create_pmt_packet+0x84>)
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	0a1b      	lsrs	r3, r3, #8
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 8003ada:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <create_pmt_packet+0x84>)
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 8003ae2:	7a3b      	ldrb	r3, [r7, #8]
 8003ae4:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 8003ae6:	7a7b      	ldrb	r3, [r7, #9]
 8003ae8:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 8003aea:	793b      	ldrb	r3, [r7, #4]
 8003aec:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 8003aee:	797b      	ldrb	r3, [r7, #5]
 8003af0:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 8003af2:	79bb      	ldrb	r3, [r7, #6]
 8003af4:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 8003afa:	f107 010c 	add.w	r1, r7, #12
 8003afe:	2364      	movs	r3, #100	; 0x64
 8003b00:	220a      	movs	r2, #10
 8003b02:	4808      	ldr	r0, [pc, #32]	; (8003b24 <create_pmt_packet+0x88>)
 8003b04:	f010 fc94 	bl	8014430 <HAL_UART_Transmit>

	pmt_seq++;
 8003b08:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <create_pmt_packet+0x84>)
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	4b03      	ldr	r3, [pc, #12]	; (8003b20 <create_pmt_packet+0x84>)
 8003b12:	801a      	strh	r2, [r3, #0]
}
 8003b14:	bf00      	nop
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	58020000 	.word	0x58020000
 8003b20:	24001aea 	.word	0x24001aea
 8003b24:	24001e3c 	.word	0x24001e3c

08003b28 <create_erpa_packet>:


void create_erpa_packet() {
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8003b2e:	bf00      	nop
 8003b30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b34:	4828      	ldr	r0, [pc, #160]	; (8003bd8 <create_erpa_packet+0xb0>)
 8003b36:	f007 fe1f 	bl	800b778 <HAL_GPIO_ReadPin>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1f7      	bne.n	8003b30 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 8003b40:	23ff      	movs	r3, #255	; 0xff
 8003b42:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 8003b44:	1d3b      	adds	r3, r7, #4
 8003b46:	4618      	mov	r0, r3
 8003b48:	f001 fa50 	bl	8004fec <get_uptime>
	sweep_step = get_current_step();
 8003b4c:	f7ff ff18 	bl	8003980 <get_current_step>
 8003b50:	4603      	mov	r3, r0
 8003b52:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 8003b54:	f107 030c 	add.w	r3, r7, #12
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 fa9d 	bl	8004098 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8003b5e:	f107 0308 	add.w	r3, r7, #8
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fab8 	bl	80040d8 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 8003b68:	23ee      	movs	r3, #238	; 0xee
 8003b6a:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 8003b6c:	23ee      	movs	r3, #238	; 0xee
 8003b6e:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8003b70:	4b1a      	ldr	r3, [pc, #104]	; (8003bdc <create_erpa_packet+0xb4>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	0c1b      	lsrs	r3, r3, #16
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 8003b7a:	4b18      	ldr	r3, [pc, #96]	; (8003bdc <create_erpa_packet+0xb4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	0a1b      	lsrs	r3, r3, #8
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 8003b84:	4b15      	ldr	r3, [pc, #84]	; (8003bdc <create_erpa_packet+0xb4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 8003b8c:	7ffb      	ldrb	r3, [r7, #31]
 8003b8e:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8003b90:	893b      	ldrh	r3, [r7, #8]
 8003b92:	0a1b      	lsrs	r3, r3, #8
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8003b9a:	893b      	ldrh	r3, [r7, #8]
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8003ba0:	7b3b      	ldrb	r3, [r7, #12]
 8003ba2:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8003ba4:	7b7b      	ldrb	r3, [r7, #13]
 8003ba6:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 8003ba8:	793b      	ldrb	r3, [r7, #4]
 8003baa:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 8003bac:	797b      	ldrb	r3, [r7, #5]
 8003bae:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 8003bb0:	79bb      	ldrb	r3, [r7, #6]
 8003bb2:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 8003bb8:	f107 0110 	add.w	r1, r7, #16
 8003bbc:	2364      	movs	r3, #100	; 0x64
 8003bbe:	220e      	movs	r2, #14
 8003bc0:	4807      	ldr	r0, [pc, #28]	; (8003be0 <create_erpa_packet+0xb8>)
 8003bc2:	f010 fc35 	bl	8014430 <HAL_UART_Transmit>

	erpa_seq++;
 8003bc6:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <create_erpa_packet+0xb4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	4a03      	ldr	r2, [pc, #12]	; (8003bdc <create_erpa_packet+0xb4>)
 8003bce:	6013      	str	r3, [r2, #0]
}
 8003bd0:	bf00      	nop
 8003bd2:	3720      	adds	r7, #32
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	58020400 	.word	0x58020400
 8003bdc:	24001aec 	.word	0x24001aec
 8003be0:	24001e3c 	.word	0x24001e3c

08003be4 <create_hk_packet>:


void create_hk_packet() {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b092      	sub	sp, #72	; 0x48
 8003be8:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003bea:	1d3b      	adds	r3, r7, #4
 8003bec:	4618      	mov	r0, r3
 8003bee:	f001 f9fd 	bl	8004fec <get_uptime>
	get_unix_time(timestamp);
 8003bf2:	f107 0308 	add.w	r3, r7, #8
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f001 fa48 	bl	800508c <get_unix_time>
	rail_monitor_ptr = get_rail_monitor();
 8003bfc:	f001 ffe6 	bl	8005bcc <get_rail_monitor>
 8003c00:	6478      	str	r0, [r7, #68]	; 0x44


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8003c02:	23dd      	movs	r3, #221	; 0xdd
 8003c04:	743b      	strb	r3, [r7, #16]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8003c06:	23dd      	movs	r3, #221	; 0xdd
 8003c08:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8003c0a:	4b93      	ldr	r3, [pc, #588]	; (8003e58 <create_hk_packet+0x274>)
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	0a1b      	lsrs	r3, r3, #8
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	74bb      	strb	r3, [r7, #18]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8003c16:	4b90      	ldr	r3, [pc, #576]	; (8003e58 <create_hk_packet+0x274>)
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	74fb      	strb	r3, [r7, #19]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8003c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c20:	889b      	ldrh	r3, [r3, #4]
 8003c22:	0a1b      	lsrs	r3, r3, #8
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	753b      	strb	r3, [r7, #20]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 8003c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c2c:	889b      	ldrh	r3, [r3, #4]
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8003c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c34:	330a      	adds	r3, #10
 8003c36:	889b      	ldrh	r3, [r3, #4]
 8003c38:	0a1b      	lsrs	r3, r3, #8
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8003c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c42:	330a      	adds	r3, #10
 8003c44:	889b      	ldrh	r3, [r3, #4]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	75fb      	strb	r3, [r7, #23]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8003c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c4c:	3314      	adds	r3, #20
 8003c4e:	889b      	ldrh	r3, [r3, #4]
 8003c50:	0a1b      	lsrs	r3, r3, #8
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	763b      	strb	r3, [r7, #24]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8003c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c5a:	3314      	adds	r3, #20
 8003c5c:	889b      	ldrh	r3, [r3, #4]
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	767b      	strb	r3, [r7, #25]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 8003c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c64:	331e      	adds	r3, #30
 8003c66:	889b      	ldrh	r3, [r3, #4]
 8003c68:	0a1b      	lsrs	r3, r3, #8
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	76bb      	strb	r3, [r7, #26]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 8003c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c72:	331e      	adds	r3, #30
 8003c74:	889b      	ldrh	r3, [r3, #4]
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	76fb      	strb	r3, [r7, #27]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 8003c7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c7c:	3328      	adds	r3, #40	; 0x28
 8003c7e:	889b      	ldrh	r3, [r3, #4]
 8003c80:	0a1b      	lsrs	r3, r3, #8
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	773b      	strb	r3, [r7, #28]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 8003c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c8a:	3328      	adds	r3, #40	; 0x28
 8003c8c:	889b      	ldrh	r3, [r3, #4]
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	777b      	strb	r3, [r7, #29]
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 8003c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c94:	3332      	adds	r3, #50	; 0x32
 8003c96:	889b      	ldrh	r3, [r3, #4]
 8003c98:	0a1b      	lsrs	r3, r3, #8
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	77bb      	strb	r3, [r7, #30]
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 8003ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca2:	3332      	adds	r3, #50	; 0x32
 8003ca4:	889b      	ldrh	r3, [r3, #4]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	77fb      	strb	r3, [r7, #31]
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8003caa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cac:	333c      	adds	r3, #60	; 0x3c
 8003cae:	889b      	ldrh	r3, [r3, #4]
 8003cb0:	0a1b      	lsrs	r3, r3, #8
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8003cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cbc:	333c      	adds	r3, #60	; 0x3c
 8003cbe:	889b      	ldrh	r3, [r3, #4]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8003cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cc8:	3346      	adds	r3, #70	; 0x46
 8003cca:	889b      	ldrh	r3, [r3, #4]
 8003ccc:	0a1b      	lsrs	r3, r3, #8
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8003cd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cd8:	3346      	adds	r3, #70	; 0x46
 8003cda:	889b      	ldrh	r3, [r3, #4]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8003ce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ce4:	3350      	adds	r3, #80	; 0x50
 8003ce6:	889b      	ldrh	r3, [r3, #4]
 8003ce8:	0a1b      	lsrs	r3, r3, #8
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8003cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cf4:	3350      	adds	r3, #80	; 0x50
 8003cf6:	889b      	ldrh	r3, [r3, #4]
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8003cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d00:	335a      	adds	r3, #90	; 0x5a
 8003d02:	889b      	ldrh	r3, [r3, #4]
 8003d04:	0a1b      	lsrs	r3, r3, #8
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8003d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d10:	335a      	adds	r3, #90	; 0x5a
 8003d12:	889b      	ldrh	r3, [r3, #4]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8003d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d1c:	3364      	adds	r3, #100	; 0x64
 8003d1e:	889b      	ldrh	r3, [r3, #4]
 8003d20:	0a1b      	lsrs	r3, r3, #8
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8003d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d2c:	3364      	adds	r3, #100	; 0x64
 8003d2e:	889b      	ldrh	r3, [r3, #4]
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 8003d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d38:	336e      	adds	r3, #110	; 0x6e
 8003d3a:	889b      	ldrh	r3, [r3, #4]
 8003d3c:	0a1b      	lsrs	r3, r3, #8
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 8003d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d48:	336e      	adds	r3, #110	; 0x6e
 8003d4a:	889b      	ldrh	r3, [r3, #4]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 8003d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d54:	3378      	adds	r3, #120	; 0x78
 8003d56:	889b      	ldrh	r3, [r3, #4]
 8003d58:	0a1b      	lsrs	r3, r3, #8
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 8003d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d64:	3378      	adds	r3, #120	; 0x78
 8003d66:	889b      	ldrh	r3, [r3, #4]
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 8003d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d70:	3382      	adds	r3, #130	; 0x82
 8003d72:	889b      	ldrh	r3, [r3, #4]
 8003d74:	0a1b      	lsrs	r3, r3, #8
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 8003d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d80:	3382      	adds	r3, #130	; 0x82
 8003d82:	889b      	ldrh	r3, [r3, #4]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8003d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d8c:	338c      	adds	r3, #140	; 0x8c
 8003d8e:	889b      	ldrh	r3, [r3, #4]
 8003d90:	0a1b      	lsrs	r3, r3, #8
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 8003d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d9c:	338c      	adds	r3, #140	; 0x8c
 8003d9e:	889b      	ldrh	r3, [r3, #4]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8003da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003da8:	3396      	adds	r3, #150	; 0x96
 8003daa:	889b      	ldrh	r3, [r3, #4]
 8003dac:	0a1b      	lsrs	r3, r3, #8
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 8003db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003db8:	3396      	adds	r3, #150	; 0x96
 8003dba:	889b      	ldrh	r3, [r3, #4]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8003dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc4:	33a0      	adds	r3, #160	; 0xa0
 8003dc6:	889b      	ldrh	r3, [r3, #4]
 8003dc8:	0a1b      	lsrs	r3, r3, #8
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8003dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dd4:	33a0      	adds	r3, #160	; 0xa0
 8003dd6:	889b      	ldrh	r3, [r3, #4]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8003dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003de0:	33aa      	adds	r3, #170	; 0xaa
 8003de2:	889b      	ldrh	r3, [r3, #4]
 8003de4:	0a1b      	lsrs	r3, r3, #8
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8003dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df0:	33aa      	adds	r3, #170	; 0xaa
 8003df2:	889b      	ldrh	r3, [r3, #4]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[40] = timestamp[0];
 8003dfa:	7a3b      	ldrb	r3, [r7, #8]
 8003dfc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[41] = timestamp[1];
 8003e00:	7a7b      	ldrb	r3, [r7, #9]
 8003e02:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[42] = timestamp[2];
 8003e06:	7abb      	ldrb	r3, [r7, #10]
 8003e08:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[43] = timestamp[3];
 8003e0c:	7afb      	ldrb	r3, [r7, #11]
 8003e0e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[44] = timestamp[4];
 8003e12:	7b3b      	ldrb	r3, [r7, #12]
 8003e14:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[45] = timestamp[5];
 8003e18:	7b7b      	ldrb	r3, [r7, #13]
 8003e1a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[46] = uptime[0];
 8003e1e:	793b      	ldrb	r3, [r7, #4]
 8003e20:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[47] = uptime[1];
 8003e24:	797b      	ldrb	r3, [r7, #5]
 8003e26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[48] = uptime[2];
 8003e2a:	79bb      	ldrb	r3, [r7, #6]
 8003e2c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[49] = uptime[3];
 8003e30:	79fb      	ldrb	r3, [r7, #7]
 8003e32:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 8003e36:	f107 0110 	add.w	r1, r7, #16
 8003e3a:	2364      	movs	r3, #100	; 0x64
 8003e3c:	2232      	movs	r2, #50	; 0x32
 8003e3e:	4807      	ldr	r0, [pc, #28]	; (8003e5c <create_hk_packet+0x278>)
 8003e40:	f010 faf6 	bl	8014430 <HAL_UART_Transmit>

	hk_seq++;
 8003e44:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <create_hk_packet+0x274>)
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	4b02      	ldr	r3, [pc, #8]	; (8003e58 <create_hk_packet+0x274>)
 8003e4e:	801a      	strh	r2, [r3, #0]
}
 8003e50:	bf00      	nop
 8003e52:	3748      	adds	r7, #72	; 0x48
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	24001af0 	.word	0x24001af0
 8003e5c:	24001e3c 	.word	0x24001e3c

08003e60 <reset_packet_sequence_numbers>:

void reset_packet_sequence_numbers() {
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 8003e64:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <reset_packet_sequence_numbers+0x20>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 8003e6a:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <reset_packet_sequence_numbers+0x24>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <reset_packet_sequence_numbers+0x28>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	801a      	strh	r2, [r3, #0]
}
 8003e76:	bf00      	nop
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	24001aea 	.word	0x24001aea
 8003e84:	24001aec 	.word	0x24001aec
 8003e88:	24001af0 	.word	0x24001af0

08003e8c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003e92:	1d3b      	adds	r3, r7, #4
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	605a      	str	r2, [r3, #4]
 8003e9a:	609a      	str	r2, [r3, #8]
 8003e9c:	60da      	str	r2, [r3, #12]
 8003e9e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003ea4:	4b26      	ldr	r3, [pc, #152]	; (8003f40 <MX_RTC_Init+0xb4>)
 8003ea6:	4a27      	ldr	r2, [pc, #156]	; (8003f44 <MX_RTC_Init+0xb8>)
 8003ea8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003eaa:	4b25      	ldr	r3, [pc, #148]	; (8003f40 <MX_RTC_Init+0xb4>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8003eb0:	4b23      	ldr	r3, [pc, #140]	; (8003f40 <MX_RTC_Init+0xb4>)
 8003eb2:	2263      	movs	r2, #99	; 0x63
 8003eb4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8003eb6:	4b22      	ldr	r3, [pc, #136]	; (8003f40 <MX_RTC_Init+0xb4>)
 8003eb8:	f242 720f 	movw	r2, #9999	; 0x270f
 8003ebc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003ebe:	4b20      	ldr	r3, [pc, #128]	; (8003f40 <MX_RTC_Init+0xb4>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003ec4:	4b1e      	ldr	r3, [pc, #120]	; (8003f40 <MX_RTC_Init+0xb4>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003eca:	4b1d      	ldr	r3, [pc, #116]	; (8003f40 <MX_RTC_Init+0xb4>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003ed0:	4b1b      	ldr	r3, [pc, #108]	; (8003f40 <MX_RTC_Init+0xb4>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003ed6:	481a      	ldr	r0, [pc, #104]	; (8003f40 <MX_RTC_Init+0xb4>)
 8003ed8:	f00d fd90 	bl	80119fc <HAL_RTC_Init>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003ee2:	f7ff fdcd 	bl	8003a80 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003efa:	1d3b      	adds	r3, r7, #4
 8003efc:	2201      	movs	r2, #1
 8003efe:	4619      	mov	r1, r3
 8003f00:	480f      	ldr	r0, [pc, #60]	; (8003f40 <MX_RTC_Init+0xb4>)
 8003f02:	f00d fdfd 	bl	8011b00 <HAL_RTC_SetTime>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003f0c:	f7ff fdb8 	bl	8003a80 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003f10:	2301      	movs	r3, #1
 8003f12:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003f14:	2301      	movs	r3, #1
 8003f16:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003f20:	463b      	mov	r3, r7
 8003f22:	2201      	movs	r2, #1
 8003f24:	4619      	mov	r1, r3
 8003f26:	4806      	ldr	r0, [pc, #24]	; (8003f40 <MX_RTC_Init+0xb4>)
 8003f28:	f00d fee4 	bl	8011cf4 <HAL_RTC_SetDate>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8003f32:	f7ff fda5 	bl	8003a80 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003f36:	bf00      	nop
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	24001af4 	.word	0x24001af4
 8003f44:	58004000 	.word	0x58004000

08003f48 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b0b2      	sub	sp, #200	; 0xc8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f50:	f107 0308 	add.w	r3, r7, #8
 8003f54:	22c0      	movs	r2, #192	; 0xc0
 8003f56:	2100      	movs	r1, #0
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f016 fbd7 	bl	801a70c <memset>
  if(rtcHandle->Instance==RTC)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a10      	ldr	r2, [pc, #64]	; (8003fa4 <HAL_RTC_MspInit+0x5c>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d118      	bne.n	8003f9a <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003f68:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003f74:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <HAL_RTC_MspInit+0x60>)
 8003f76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f7a:	f107 0308 	add.w	r3, r7, #8
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f00b f83e 	bl	800f000 <HAL_RCCEx_PeriphCLKConfig>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003f8a:	f7ff fd79 	bl	8003a80 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003f8e:	4b07      	ldr	r3, [pc, #28]	; (8003fac <HAL_RTC_MspInit+0x64>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f92:	4a06      	ldr	r2, [pc, #24]	; (8003fac <HAL_RTC_MspInit+0x64>)
 8003f94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f98:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003f9a:	bf00      	nop
 8003f9c:	37c8      	adds	r7, #200	; 0xc8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	58004000 	.word	0x58004000
 8003fa8:	00019300 	.word	0x00019300
 8003fac:	58024400 	.word	0x58024400

08003fb0 <init_adc_dma>:
static uint16_t erpa_spi_raw_data[1];
static uint16_t pmt_spi_raw_data[1];
static uint8_t raw_i2c[2];

// Public Functions
uint8_t init_adc_dma() {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8003fba:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003fbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fc2:	481f      	ldr	r0, [pc, #124]	; (8004040 <init_adc_dma+0x90>)
 8003fc4:	f003 fad0 	bl	8007568 <HAL_ADCEx_Calibration_Start>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003fce:	f7ff fd57 	bl	8003a80 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8003fd2:	220b      	movs	r2, #11
 8003fd4:	491b      	ldr	r1, [pc, #108]	; (8004044 <init_adc_dma+0x94>)
 8003fd6:	481a      	ldr	r0, [pc, #104]	; (8004040 <init_adc_dma+0x90>)
 8003fd8:	f002 fba4 	bl	8006724 <HAL_ADC_Start_DMA>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8003fe2:	f7ff fd4d 	bl	8003a80 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8003fe6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003fea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fee:	4816      	ldr	r0, [pc, #88]	; (8004048 <init_adc_dma+0x98>)
 8003ff0:	f003 faba 	bl	8007568 <HAL_ADCEx_Calibration_Start>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003ffa:	f7ff fd41 	bl	8003a80 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8003ffe:	2204      	movs	r2, #4
 8004000:	4912      	ldr	r1, [pc, #72]	; (800404c <init_adc_dma+0x9c>)
 8004002:	4811      	ldr	r0, [pc, #68]	; (8004048 <init_adc_dma+0x98>)
 8004004:	f002 fb8e 	bl	8006724 <HAL_ADC_Start_DMA>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800400e:	f7ff fd37 	bl	8003a80 <Error_Handler>
	}
	hspi2.Instance->CR1 |= 1 << 10;
 8004012:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <init_adc_dma+0xa0>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	4b0d      	ldr	r3, [pc, #52]	; (8004050 <init_adc_dma+0xa0>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004020:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 8004022:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <init_adc_dma+0xa4>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <init_adc_dma+0xa4>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004030:	601a      	str	r2, [r3, #0]


	status = 1;
 8004032:	2301      	movs	r3, #1
 8004034:	71fb      	strb	r3, [r7, #7]

	return status;
 8004036:	79fb      	ldrb	r3, [r7, #7]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	2400015c 	.word	0x2400015c
 8004044:	24001b20 	.word	0x24001b20
 8004048:	240001c0 	.word	0x240001c0
 800404c:	24001b40 	.word	0x24001b40
 8004050:	24001bdc 	.word	0x24001bdc
 8004054:	24001b54 	.word	0x24001b54

08004058 <sample_pmt_spi>:
//{
//	HAL_SPI_Receive_IT(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
//
//}

void sample_pmt_spi(uint8_t *buffer) {
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 8004060:	2201      	movs	r2, #1
 8004062:	490b      	ldr	r1, [pc, #44]	; (8004090 <sample_pmt_spi+0x38>)
 8004064:	480b      	ldr	r0, [pc, #44]	; (8004094 <sample_pmt_spi+0x3c>)
 8004066:	f00e f90f 	bl	8012288 <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 800406a:	4b09      	ldr	r3, [pc, #36]	; (8004090 <sample_pmt_spi+0x38>)
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	0a1b      	lsrs	r3, r3, #8
 8004070:	b29b      	uxth	r3, r3
 8004072:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 8004074:	4b06      	ldr	r3, [pc, #24]	; (8004090 <sample_pmt_spi+0x38>)
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	7bfa      	ldrb	r2, [r7, #15]
 800407e:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3301      	adds	r3, #1
 8004084:	7bba      	ldrb	r2, [r7, #14]
 8004086:	701a      	strb	r2, [r3, #0]
}
 8004088:	bf00      	nop
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	24001b4c 	.word	0x24001b4c
 8004094:	24001b54 	.word	0x24001b54

08004098 <sample_erpa_spi>:


void sample_erpa_spi(uint8_t *buffer) {
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 80040a0:	2201      	movs	r2, #1
 80040a2:	490b      	ldr	r1, [pc, #44]	; (80040d0 <sample_erpa_spi+0x38>)
 80040a4:	480b      	ldr	r0, [pc, #44]	; (80040d4 <sample_erpa_spi+0x3c>)
 80040a6:	f00e f8ef 	bl	8012288 <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 80040aa:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <sample_erpa_spi+0x38>)
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	0a1b      	lsrs	r3, r3, #8
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 80040b4:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <sample_erpa_spi+0x38>)
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	7bfa      	ldrb	r2, [r7, #15]
 80040be:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3301      	adds	r3, #1
 80040c4:	7bba      	ldrb	r2, [r7, #14]
 80040c6:	701a      	strb	r2, [r3, #0]
}
 80040c8:	bf00      	nop
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	24001b48 	.word	0x24001b48
 80040d4:	24001bdc 	.word	0x24001bdc

080040d8 <sample_erpa_adc>:




void sample_erpa_adc(uint16_t *buffer) {
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 80040e0:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <sample_erpa_adc+0x20>)
 80040e2:	885b      	ldrh	r3, [r3, #2]
 80040e4:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	89fa      	ldrh	r2, [r7, #14]
 80040ea:	801a      	strh	r2, [r3, #0]
}
 80040ec:	bf00      	nop
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	24001b20 	.word	0x24001b20

080040fc <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8004104:	2390      	movs	r3, #144	; 0x90
 8004106:	4618      	mov	r0, r3
 8004108:	f000 f8a2 	bl	8004250 <poll_i2c_sensor>
 800410c:	4603      	mov	r3, r0
 800410e:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8004110:	2394      	movs	r3, #148	; 0x94
 8004112:	4618      	mov	r0, r3
 8004114:	f000 f89c 	bl	8004250 <poll_i2c_sensor>
 8004118:	4603      	mov	r3, r0
 800411a:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 800411c:	2392      	movs	r3, #146	; 0x92
 800411e:	4618      	mov	r0, r3
 8004120:	f000 f896 	bl	8004250 <poll_i2c_sensor>
 8004124:	4603      	mov	r3, r0
 8004126:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8004128:	2396      	movs	r3, #150	; 0x96
 800412a:	4618      	mov	r0, r3
 800412c:	f000 f890 	bl	8004250 <poll_i2c_sensor>
 8004130:	4603      	mov	r3, r0
 8004132:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	89fa      	ldrh	r2, [r7, #14]
 8004138:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	3302      	adds	r3, #2
 800413e:	89ba      	ldrh	r2, [r7, #12]
 8004140:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3304      	adds	r3, #4
 8004146:	897a      	ldrh	r2, [r7, #10]
 8004148:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3306      	adds	r3, #6
 800414e:	893a      	ldrh	r2, [r7, #8]
 8004150:	801a      	strh	r2, [r3, #0]
}
 8004152:	bf00      	nop
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 800415c:	b480      	push	{r7}
 800415e:	b089      	sub	sp, #36	; 0x24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8004164:	4b25      	ldr	r3, [pc, #148]	; (80041fc <sample_hk_adc1+0xa0>)
 8004166:	8a9b      	ldrh	r3, [r3, #20]
 8004168:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 800416a:	4b24      	ldr	r3, [pc, #144]	; (80041fc <sample_hk_adc1+0xa0>)
 800416c:	8a1b      	ldrh	r3, [r3, #16]
 800416e:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8004170:	4b22      	ldr	r3, [pc, #136]	; (80041fc <sample_hk_adc1+0xa0>)
 8004172:	899b      	ldrh	r3, [r3, #12]
 8004174:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8004176:	4b21      	ldr	r3, [pc, #132]	; (80041fc <sample_hk_adc1+0xa0>)
 8004178:	8a5b      	ldrh	r3, [r3, #18]
 800417a:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 800417c:	4b1f      	ldr	r3, [pc, #124]	; (80041fc <sample_hk_adc1+0xa0>)
 800417e:	889b      	ldrh	r3, [r3, #4]
 8004180:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8004182:	4b1e      	ldr	r3, [pc, #120]	; (80041fc <sample_hk_adc1+0xa0>)
 8004184:	88db      	ldrh	r3, [r3, #6]
 8004186:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8004188:	4b1c      	ldr	r3, [pc, #112]	; (80041fc <sample_hk_adc1+0xa0>)
 800418a:	89db      	ldrh	r3, [r3, #14]
 800418c:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 800418e:	4b1b      	ldr	r3, [pc, #108]	; (80041fc <sample_hk_adc1+0xa0>)
 8004190:	891b      	ldrh	r3, [r3, #8]
 8004192:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8004194:	4b19      	ldr	r3, [pc, #100]	; (80041fc <sample_hk_adc1+0xa0>)
 8004196:	881b      	ldrh	r3, [r3, #0]
 8004198:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 800419a:	4b18      	ldr	r3, [pc, #96]	; (80041fc <sample_hk_adc1+0xa0>)
 800419c:	895b      	ldrh	r3, [r3, #10]
 800419e:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	8bfa      	ldrh	r2, [r7, #30]
 80041a4:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3302      	adds	r3, #2
 80041aa:	8bba      	ldrh	r2, [r7, #28]
 80041ac:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3304      	adds	r3, #4
 80041b2:	8b7a      	ldrh	r2, [r7, #26]
 80041b4:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3306      	adds	r3, #6
 80041ba:	8b3a      	ldrh	r2, [r7, #24]
 80041bc:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3308      	adds	r3, #8
 80041c2:	8afa      	ldrh	r2, [r7, #22]
 80041c4:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	330a      	adds	r3, #10
 80041ca:	8aba      	ldrh	r2, [r7, #20]
 80041cc:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	330c      	adds	r3, #12
 80041d2:	8a7a      	ldrh	r2, [r7, #18]
 80041d4:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	330e      	adds	r3, #14
 80041da:	8a3a      	ldrh	r2, [r7, #16]
 80041dc:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	3310      	adds	r3, #16
 80041e2:	89fa      	ldrh	r2, [r7, #14]
 80041e4:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3312      	adds	r3, #18
 80041ea:	89ba      	ldrh	r2, [r7, #12]
 80041ec:	801a      	strh	r2, [r3, #0]
}
 80041ee:	bf00      	nop
 80041f0:	3724      	adds	r7, #36	; 0x24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	24001b20 	.word	0x24001b20

08004200 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8004208:	4b10      	ldr	r3, [pc, #64]	; (800424c <sample_hk_adc3+0x4c>)
 800420a:	881b      	ldrh	r3, [r3, #0]
 800420c:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 800420e:	4b0f      	ldr	r3, [pc, #60]	; (800424c <sample_hk_adc3+0x4c>)
 8004210:	885b      	ldrh	r3, [r3, #2]
 8004212:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8004214:	4b0d      	ldr	r3, [pc, #52]	; (800424c <sample_hk_adc3+0x4c>)
 8004216:	889b      	ldrh	r3, [r3, #4]
 8004218:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 800421a:	4b0c      	ldr	r3, [pc, #48]	; (800424c <sample_hk_adc3+0x4c>)
 800421c:	88db      	ldrh	r3, [r3, #6]
 800421e:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	89fa      	ldrh	r2, [r7, #14]
 8004224:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3302      	adds	r3, #2
 800422a:	89ba      	ldrh	r2, [r7, #12]
 800422c:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3304      	adds	r3, #4
 8004232:	897a      	ldrh	r2, [r7, #10]
 8004234:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	3306      	adds	r3, #6
 800423a:	893a      	ldrh	r2, [r7, #8]
 800423c:	801a      	strh	r2, [r3, #0]
}
 800423e:	bf00      	nop
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	24001b40 	.word	0x24001b40

08004250 <poll_i2c_sensor>:


int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 800425a:	2200      	movs	r2, #0
 800425c:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <poll_i2c_sensor+0x90>)
 800425e:	701a      	strb	r2, [r3, #0]


	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 8004260:	79fb      	ldrb	r3, [r7, #7]
 8004262:	b299      	uxth	r1, r3
 8004264:	2301      	movs	r3, #1
 8004266:	4a1e      	ldr	r2, [pc, #120]	; (80042e0 <poll_i2c_sensor+0x90>)
 8004268:	481e      	ldr	r0, [pc, #120]	; (80042e4 <poll_i2c_sensor+0x94>)
 800426a:	f007 fb53 	bl	800b914 <HAL_I2C_Master_Transmit_DMA>
 800426e:	4603      	mov	r3, r0
 8004270:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8004272:	7b7b      	ldrb	r3, [r7, #13]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <poll_i2c_sensor+0x30>
		printf("I2C TX Error\n");
 8004278:	481b      	ldr	r0, [pc, #108]	; (80042e8 <poll_i2c_sensor+0x98>)
 800427a:	f016 fabd 	bl	801a7f8 <puts>
 800427e:	e028      	b.n	80042d2 <poll_i2c_sensor+0x82>
	} else {
		/* Read 2 bytes from the temperature register */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8004280:	bf00      	nop
 8004282:	4818      	ldr	r0, [pc, #96]	; (80042e4 <poll_i2c_sensor+0x94>)
 8004284:	f007 fe2d 	bl	800bee2 <HAL_I2C_GetState>
 8004288:	4603      	mov	r3, r0
 800428a:	2b20      	cmp	r3, #32
 800428c:	d1f9      	bne.n	8004282 <poll_i2c_sensor+0x32>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 800428e:	79fb      	ldrb	r3, [r7, #7]
 8004290:	b299      	uxth	r1, r3
 8004292:	2302      	movs	r3, #2
 8004294:	4a12      	ldr	r2, [pc, #72]	; (80042e0 <poll_i2c_sensor+0x90>)
 8004296:	4813      	ldr	r0, [pc, #76]	; (80042e4 <poll_i2c_sensor+0x94>)
 8004298:	f007 fc50 	bl	800bb3c <HAL_I2C_Master_Receive_DMA>
 800429c:	4603      	mov	r3, r0
 800429e:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 80042a0:	7b7b      	ldrb	r3, [r7, #13]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 80042a6:	4811      	ldr	r0, [pc, #68]	; (80042ec <poll_i2c_sensor+0x9c>)
 80042a8:	f016 faa6 	bl	801a7f8 <puts>
 80042ac:	e011      	b.n	80042d2 <poll_i2c_sensor+0x82>
		} else {
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 80042ae:	bf00      	nop
 80042b0:	480c      	ldr	r0, [pc, #48]	; (80042e4 <poll_i2c_sensor+0x94>)
 80042b2:	f007 fe16 	bl	800bee2 <HAL_I2C_GetState>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d1f9      	bne.n	80042b0 <poll_i2c_sensor+0x60>
			output = (int16_t) (raw_i2c[0] << 8);
 80042bc:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <poll_i2c_sensor+0x90>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	021b      	lsls	r3, r3, #8
 80042c2:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 80042c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042c8:	4a05      	ldr	r2, [pc, #20]	; (80042e0 <poll_i2c_sensor+0x90>)
 80042ca:	7852      	ldrb	r2, [r2, #1]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	10db      	asrs	r3, r3, #3
 80042d0:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 80042d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	24001b50 	.word	0x24001b50
 80042e4:	2400193c 	.word	0x2400193c
 80042e8:	0801b360 	.word	0x0801b360
 80042ec:	0801b370 	.word	0x0801b370

080042f0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80042f4:	4b28      	ldr	r3, [pc, #160]	; (8004398 <MX_SPI1_Init+0xa8>)
 80042f6:	4a29      	ldr	r2, [pc, #164]	; (800439c <MX_SPI1_Init+0xac>)
 80042f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80042fa:	4b27      	ldr	r3, [pc, #156]	; (8004398 <MX_SPI1_Init+0xa8>)
 80042fc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004300:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004302:	4b25      	ldr	r3, [pc, #148]	; (8004398 <MX_SPI1_Init+0xa8>)
 8004304:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004308:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800430a:	4b23      	ldr	r3, [pc, #140]	; (8004398 <MX_SPI1_Init+0xa8>)
 800430c:	220f      	movs	r2, #15
 800430e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004310:	4b21      	ldr	r3, [pc, #132]	; (8004398 <MX_SPI1_Init+0xa8>)
 8004312:	2200      	movs	r2, #0
 8004314:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004316:	4b20      	ldr	r3, [pc, #128]	; (8004398 <MX_SPI1_Init+0xa8>)
 8004318:	2200      	movs	r2, #0
 800431a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800431c:	4b1e      	ldr	r3, [pc, #120]	; (8004398 <MX_SPI1_Init+0xa8>)
 800431e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004322:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004324:	4b1c      	ldr	r3, [pc, #112]	; (8004398 <MX_SPI1_Init+0xa8>)
 8004326:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800432a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800432c:	4b1a      	ldr	r3, [pc, #104]	; (8004398 <MX_SPI1_Init+0xa8>)
 800432e:	2200      	movs	r2, #0
 8004330:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004332:	4b19      	ldr	r3, [pc, #100]	; (8004398 <MX_SPI1_Init+0xa8>)
 8004334:	2200      	movs	r2, #0
 8004336:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004338:	4b17      	ldr	r3, [pc, #92]	; (8004398 <MX_SPI1_Init+0xa8>)
 800433a:	2200      	movs	r2, #0
 800433c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800433e:	4b16      	ldr	r3, [pc, #88]	; (8004398 <MX_SPI1_Init+0xa8>)
 8004340:	2200      	movs	r2, #0
 8004342:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004344:	4b14      	ldr	r3, [pc, #80]	; (8004398 <MX_SPI1_Init+0xa8>)
 8004346:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800434a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800434c:	4b12      	ldr	r3, [pc, #72]	; (8004398 <MX_SPI1_Init+0xa8>)
 800434e:	2200      	movs	r2, #0
 8004350:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004352:	4b11      	ldr	r3, [pc, #68]	; (8004398 <MX_SPI1_Init+0xa8>)
 8004354:	2200      	movs	r2, #0
 8004356:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004358:	4b0f      	ldr	r3, [pc, #60]	; (8004398 <MX_SPI1_Init+0xa8>)
 800435a:	2200      	movs	r2, #0
 800435c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800435e:	4b0e      	ldr	r3, [pc, #56]	; (8004398 <MX_SPI1_Init+0xa8>)
 8004360:	2200      	movs	r2, #0
 8004362:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004364:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <MX_SPI1_Init+0xa8>)
 8004366:	2200      	movs	r2, #0
 8004368:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800436a:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <MX_SPI1_Init+0xa8>)
 800436c:	2200      	movs	r2, #0
 800436e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004370:	4b09      	ldr	r3, [pc, #36]	; (8004398 <MX_SPI1_Init+0xa8>)
 8004372:	2200      	movs	r2, #0
 8004374:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004376:	4b08      	ldr	r3, [pc, #32]	; (8004398 <MX_SPI1_Init+0xa8>)
 8004378:	2200      	movs	r2, #0
 800437a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800437c:	4b06      	ldr	r3, [pc, #24]	; (8004398 <MX_SPI1_Init+0xa8>)
 800437e:	2200      	movs	r2, #0
 8004380:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004382:	4805      	ldr	r0, [pc, #20]	; (8004398 <MX_SPI1_Init+0xa8>)
 8004384:	f00d fe5c 	bl	8012040 <HAL_SPI_Init>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800438e:	f7ff fb77 	bl	8003a80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004392:	bf00      	nop
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	24001b54 	.word	0x24001b54
 800439c:	40013000 	.word	0x40013000

080043a0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80043a4:	4b28      	ldr	r3, [pc, #160]	; (8004448 <MX_SPI2_Init+0xa8>)
 80043a6:	4a29      	ldr	r2, [pc, #164]	; (800444c <MX_SPI2_Init+0xac>)
 80043a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80043aa:	4b27      	ldr	r3, [pc, #156]	; (8004448 <MX_SPI2_Init+0xa8>)
 80043ac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80043b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80043b2:	4b25      	ldr	r3, [pc, #148]	; (8004448 <MX_SPI2_Init+0xa8>)
 80043b4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80043b8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80043ba:	4b23      	ldr	r3, [pc, #140]	; (8004448 <MX_SPI2_Init+0xa8>)
 80043bc:	220f      	movs	r2, #15
 80043be:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80043c0:	4b21      	ldr	r3, [pc, #132]	; (8004448 <MX_SPI2_Init+0xa8>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80043c6:	4b20      	ldr	r3, [pc, #128]	; (8004448 <MX_SPI2_Init+0xa8>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80043cc:	4b1e      	ldr	r3, [pc, #120]	; (8004448 <MX_SPI2_Init+0xa8>)
 80043ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80043d2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80043d4:	4b1c      	ldr	r3, [pc, #112]	; (8004448 <MX_SPI2_Init+0xa8>)
 80043d6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80043da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043dc:	4b1a      	ldr	r3, [pc, #104]	; (8004448 <MX_SPI2_Init+0xa8>)
 80043de:	2200      	movs	r2, #0
 80043e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80043e2:	4b19      	ldr	r3, [pc, #100]	; (8004448 <MX_SPI2_Init+0xa8>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043e8:	4b17      	ldr	r3, [pc, #92]	; (8004448 <MX_SPI2_Init+0xa8>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80043ee:	4b16      	ldr	r3, [pc, #88]	; (8004448 <MX_SPI2_Init+0xa8>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80043f4:	4b14      	ldr	r3, [pc, #80]	; (8004448 <MX_SPI2_Init+0xa8>)
 80043f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80043fa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80043fc:	4b12      	ldr	r3, [pc, #72]	; (8004448 <MX_SPI2_Init+0xa8>)
 80043fe:	2200      	movs	r2, #0
 8004400:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004402:	4b11      	ldr	r3, [pc, #68]	; (8004448 <MX_SPI2_Init+0xa8>)
 8004404:	2200      	movs	r2, #0
 8004406:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004408:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <MX_SPI2_Init+0xa8>)
 800440a:	2200      	movs	r2, #0
 800440c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800440e:	4b0e      	ldr	r3, [pc, #56]	; (8004448 <MX_SPI2_Init+0xa8>)
 8004410:	2200      	movs	r2, #0
 8004412:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004414:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <MX_SPI2_Init+0xa8>)
 8004416:	2200      	movs	r2, #0
 8004418:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800441a:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <MX_SPI2_Init+0xa8>)
 800441c:	2200      	movs	r2, #0
 800441e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004420:	4b09      	ldr	r3, [pc, #36]	; (8004448 <MX_SPI2_Init+0xa8>)
 8004422:	2200      	movs	r2, #0
 8004424:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004426:	4b08      	ldr	r3, [pc, #32]	; (8004448 <MX_SPI2_Init+0xa8>)
 8004428:	2200      	movs	r2, #0
 800442a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800442c:	4b06      	ldr	r3, [pc, #24]	; (8004448 <MX_SPI2_Init+0xa8>)
 800442e:	2200      	movs	r2, #0
 8004430:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004432:	4805      	ldr	r0, [pc, #20]	; (8004448 <MX_SPI2_Init+0xa8>)
 8004434:	f00d fe04 	bl	8012040 <HAL_SPI_Init>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800443e:	f7ff fb1f 	bl	8003a80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004442:	bf00      	nop
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	24001bdc 	.word	0x24001bdc
 800444c:	40003800 	.word	0x40003800

08004450 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b0bc      	sub	sp, #240	; 0xf0
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004458:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	605a      	str	r2, [r3, #4]
 8004462:	609a      	str	r2, [r3, #8]
 8004464:	60da      	str	r2, [r3, #12]
 8004466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004468:	f107 0318 	add.w	r3, r7, #24
 800446c:	22c0      	movs	r2, #192	; 0xc0
 800446e:	2100      	movs	r1, #0
 8004470:	4618      	mov	r0, r3
 8004472:	f016 f94b 	bl	801a70c <memset>
  if(spiHandle->Instance==SPI1)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a83      	ldr	r2, [pc, #524]	; (8004688 <HAL_SPI_MspInit+0x238>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d17c      	bne.n	800457a <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004480:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800448c:	2300      	movs	r3, #0
 800448e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004490:	f107 0318 	add.w	r3, r7, #24
 8004494:	4618      	mov	r0, r3
 8004496:	f00a fdb3 	bl	800f000 <HAL_RCCEx_PeriphCLKConfig>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80044a0:	f7ff faee 	bl	8003a80 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80044a4:	4b79      	ldr	r3, [pc, #484]	; (800468c <HAL_SPI_MspInit+0x23c>)
 80044a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044aa:	4a78      	ldr	r2, [pc, #480]	; (800468c <HAL_SPI_MspInit+0x23c>)
 80044ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80044b4:	4b75      	ldr	r3, [pc, #468]	; (800468c <HAL_SPI_MspInit+0x23c>)
 80044b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044c2:	4b72      	ldr	r3, [pc, #456]	; (800468c <HAL_SPI_MspInit+0x23c>)
 80044c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044c8:	4a70      	ldr	r2, [pc, #448]	; (800468c <HAL_SPI_MspInit+0x23c>)
 80044ca:	f043 0302 	orr.w	r3, r3, #2
 80044ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044d2:	4b6e      	ldr	r3, [pc, #440]	; (800468c <HAL_SPI_MspInit+0x23c>)
 80044d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	613b      	str	r3, [r7, #16]
 80044de:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80044e0:	2318      	movs	r3, #24
 80044e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e6:	2302      	movs	r3, #2
 80044e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ec:	2300      	movs	r3, #0
 80044ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f2:	2300      	movs	r3, #0
 80044f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80044f8:	2305      	movs	r3, #5
 80044fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044fe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004502:	4619      	mov	r1, r3
 8004504:	4862      	ldr	r0, [pc, #392]	; (8004690 <HAL_SPI_MspInit+0x240>)
 8004506:	f006 ff87 	bl	800b418 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 800450a:	4b62      	ldr	r3, [pc, #392]	; (8004694 <HAL_SPI_MspInit+0x244>)
 800450c:	4a62      	ldr	r2, [pc, #392]	; (8004698 <HAL_SPI_MspInit+0x248>)
 800450e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8004510:	4b60      	ldr	r3, [pc, #384]	; (8004694 <HAL_SPI_MspInit+0x244>)
 8004512:	2225      	movs	r2, #37	; 0x25
 8004514:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004516:	4b5f      	ldr	r3, [pc, #380]	; (8004694 <HAL_SPI_MspInit+0x244>)
 8004518:	2200      	movs	r2, #0
 800451a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800451c:	4b5d      	ldr	r3, [pc, #372]	; (8004694 <HAL_SPI_MspInit+0x244>)
 800451e:	2200      	movs	r2, #0
 8004520:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004522:	4b5c      	ldr	r3, [pc, #368]	; (8004694 <HAL_SPI_MspInit+0x244>)
 8004524:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004528:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800452a:	4b5a      	ldr	r3, [pc, #360]	; (8004694 <HAL_SPI_MspInit+0x244>)
 800452c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004530:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004532:	4b58      	ldr	r3, [pc, #352]	; (8004694 <HAL_SPI_MspInit+0x244>)
 8004534:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004538:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800453a:	4b56      	ldr	r3, [pc, #344]	; (8004694 <HAL_SPI_MspInit+0x244>)
 800453c:	2200      	movs	r2, #0
 800453e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004540:	4b54      	ldr	r3, [pc, #336]	; (8004694 <HAL_SPI_MspInit+0x244>)
 8004542:	2200      	movs	r2, #0
 8004544:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004546:	4b53      	ldr	r3, [pc, #332]	; (8004694 <HAL_SPI_MspInit+0x244>)
 8004548:	2200      	movs	r2, #0
 800454a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800454c:	4851      	ldr	r0, [pc, #324]	; (8004694 <HAL_SPI_MspInit+0x244>)
 800454e:	f003 fe33 	bl	80081b8 <HAL_DMA_Init>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8004558:	f7ff fa92 	bl	8003a80 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a4d      	ldr	r2, [pc, #308]	; (8004694 <HAL_SPI_MspInit+0x244>)
 8004560:	67da      	str	r2, [r3, #124]	; 0x7c
 8004562:	4a4c      	ldr	r2, [pc, #304]	; (8004694 <HAL_SPI_MspInit+0x244>)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8004568:	2200      	movs	r2, #0
 800456a:	2105      	movs	r1, #5
 800456c:	2023      	movs	r0, #35	; 0x23
 800456e:	f003 f9f5 	bl	800795c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004572:	2023      	movs	r0, #35	; 0x23
 8004574:	f003 fa0c 	bl	8007990 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004578:	e081      	b.n	800467e <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a47      	ldr	r2, [pc, #284]	; (800469c <HAL_SPI_MspInit+0x24c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d17c      	bne.n	800467e <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8004584:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004590:	2300      	movs	r3, #0
 8004592:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004594:	f107 0318 	add.w	r3, r7, #24
 8004598:	4618      	mov	r0, r3
 800459a:	f00a fd31 	bl	800f000 <HAL_RCCEx_PeriphCLKConfig>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <HAL_SPI_MspInit+0x158>
      Error_Handler();
 80045a4:	f7ff fa6c 	bl	8003a80 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80045a8:	4b38      	ldr	r3, [pc, #224]	; (800468c <HAL_SPI_MspInit+0x23c>)
 80045aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045ae:	4a37      	ldr	r2, [pc, #220]	; (800468c <HAL_SPI_MspInit+0x23c>)
 80045b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80045b8:	4b34      	ldr	r3, [pc, #208]	; (800468c <HAL_SPI_MspInit+0x23c>)
 80045ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045c6:	4b31      	ldr	r3, [pc, #196]	; (800468c <HAL_SPI_MspInit+0x23c>)
 80045c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045cc:	4a2f      	ldr	r2, [pc, #188]	; (800468c <HAL_SPI_MspInit+0x23c>)
 80045ce:	f043 0302 	orr.w	r3, r3, #2
 80045d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045d6:	4b2d      	ldr	r3, [pc, #180]	; (800468c <HAL_SPI_MspInit+0x23c>)
 80045d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	60bb      	str	r3, [r7, #8]
 80045e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80045e4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80045e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ec:	2302      	movs	r3, #2
 80045ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f2:	2300      	movs	r3, #0
 80045f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045f8:	2300      	movs	r3, #0
 80045fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80045fe:	2305      	movs	r3, #5
 8004600:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004604:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004608:	4619      	mov	r1, r3
 800460a:	4821      	ldr	r0, [pc, #132]	; (8004690 <HAL_SPI_MspInit+0x240>)
 800460c:	f006 ff04 	bl	800b418 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8004610:	4b23      	ldr	r3, [pc, #140]	; (80046a0 <HAL_SPI_MspInit+0x250>)
 8004612:	4a24      	ldr	r2, [pc, #144]	; (80046a4 <HAL_SPI_MspInit+0x254>)
 8004614:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8004616:	4b22      	ldr	r3, [pc, #136]	; (80046a0 <HAL_SPI_MspInit+0x250>)
 8004618:	2227      	movs	r2, #39	; 0x27
 800461a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800461c:	4b20      	ldr	r3, [pc, #128]	; (80046a0 <HAL_SPI_MspInit+0x250>)
 800461e:	2200      	movs	r2, #0
 8004620:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004622:	4b1f      	ldr	r3, [pc, #124]	; (80046a0 <HAL_SPI_MspInit+0x250>)
 8004624:	2200      	movs	r2, #0
 8004626:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004628:	4b1d      	ldr	r3, [pc, #116]	; (80046a0 <HAL_SPI_MspInit+0x250>)
 800462a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800462e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004630:	4b1b      	ldr	r3, [pc, #108]	; (80046a0 <HAL_SPI_MspInit+0x250>)
 8004632:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004636:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004638:	4b19      	ldr	r3, [pc, #100]	; (80046a0 <HAL_SPI_MspInit+0x250>)
 800463a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800463e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004640:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <HAL_SPI_MspInit+0x250>)
 8004642:	2200      	movs	r2, #0
 8004644:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004646:	4b16      	ldr	r3, [pc, #88]	; (80046a0 <HAL_SPI_MspInit+0x250>)
 8004648:	2200      	movs	r2, #0
 800464a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800464c:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <HAL_SPI_MspInit+0x250>)
 800464e:	2200      	movs	r2, #0
 8004650:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004652:	4813      	ldr	r0, [pc, #76]	; (80046a0 <HAL_SPI_MspInit+0x250>)
 8004654:	f003 fdb0 	bl	80081b8 <HAL_DMA_Init>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <HAL_SPI_MspInit+0x212>
      Error_Handler();
 800465e:	f7ff fa0f 	bl	8003a80 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a0e      	ldr	r2, [pc, #56]	; (80046a0 <HAL_SPI_MspInit+0x250>)
 8004666:	67da      	str	r2, [r3, #124]	; 0x7c
 8004668:	4a0d      	ldr	r2, [pc, #52]	; (80046a0 <HAL_SPI_MspInit+0x250>)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800466e:	2200      	movs	r2, #0
 8004670:	2105      	movs	r1, #5
 8004672:	2024      	movs	r0, #36	; 0x24
 8004674:	f003 f972 	bl	800795c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004678:	2024      	movs	r0, #36	; 0x24
 800467a:	f003 f989 	bl	8007990 <HAL_NVIC_EnableIRQ>
}
 800467e:	bf00      	nop
 8004680:	37f0      	adds	r7, #240	; 0xf0
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	40013000 	.word	0x40013000
 800468c:	58024400 	.word	0x58024400
 8004690:	58020400 	.word	0x58020400
 8004694:	24001c64 	.word	0x24001c64
 8004698:	40020070 	.word	0x40020070
 800469c:	40003800 	.word	0x40003800
 80046a0:	24001cdc 	.word	0x24001cdc
 80046a4:	40020058 	.word	0x40020058

080046a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046ae:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <HAL_MspInit+0x38>)
 80046b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046b4:	4a0a      	ldr	r2, [pc, #40]	; (80046e0 <HAL_MspInit+0x38>)
 80046b6:	f043 0302 	orr.w	r3, r3, #2
 80046ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80046be:	4b08      	ldr	r3, [pc, #32]	; (80046e0 <HAL_MspInit+0x38>)
 80046c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	607b      	str	r3, [r7, #4]
 80046ca:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80046cc:	2200      	movs	r2, #0
 80046ce:	210f      	movs	r1, #15
 80046d0:	f06f 0001 	mvn.w	r0, #1
 80046d4:	f003 f942 	bl	800795c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046d8:	bf00      	nop
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	58024400 	.word	0x58024400

080046e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b090      	sub	sp, #64	; 0x40
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b0f      	cmp	r3, #15
 80046f0:	d827      	bhi.n	8004742 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80046f2:	2200      	movs	r2, #0
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	2036      	movs	r0, #54	; 0x36
 80046f8:	f003 f930 	bl	800795c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80046fc:	2036      	movs	r0, #54	; 0x36
 80046fe:	f003 f947 	bl	8007990 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8004702:	4a29      	ldr	r2, [pc, #164]	; (80047a8 <HAL_InitTick+0xc4>)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004708:	4b28      	ldr	r3, [pc, #160]	; (80047ac <HAL_InitTick+0xc8>)
 800470a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800470e:	4a27      	ldr	r2, [pc, #156]	; (80047ac <HAL_InitTick+0xc8>)
 8004710:	f043 0310 	orr.w	r3, r3, #16
 8004714:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004718:	4b24      	ldr	r3, [pc, #144]	; (80047ac <HAL_InitTick+0xc8>)
 800471a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800471e:	f003 0310 	and.w	r3, r3, #16
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004726:	f107 0210 	add.w	r2, r7, #16
 800472a:	f107 0314 	add.w	r3, r7, #20
 800472e:	4611      	mov	r1, r2
 8004730:	4618      	mov	r0, r3
 8004732:	f00a fc23 	bl	800ef7c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004738:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800473a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473c:	2b00      	cmp	r3, #0
 800473e:	d106      	bne.n	800474e <HAL_InitTick+0x6a>
 8004740:	e001      	b.n	8004746 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e02b      	b.n	800479e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004746:	f00a fbed 	bl	800ef24 <HAL_RCC_GetPCLK1Freq>
 800474a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800474c:	e004      	b.n	8004758 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800474e:	f00a fbe9 	bl	800ef24 <HAL_RCC_GetPCLK1Freq>
 8004752:	4603      	mov	r3, r0
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800475a:	4a15      	ldr	r2, [pc, #84]	; (80047b0 <HAL_InitTick+0xcc>)
 800475c:	fba2 2303 	umull	r2, r3, r2, r3
 8004760:	0c9b      	lsrs	r3, r3, #18
 8004762:	3b01      	subs	r3, #1
 8004764:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004766:	4b13      	ldr	r3, [pc, #76]	; (80047b4 <HAL_InitTick+0xd0>)
 8004768:	4a13      	ldr	r2, [pc, #76]	; (80047b8 <HAL_InitTick+0xd4>)
 800476a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800476c:	4b11      	ldr	r3, [pc, #68]	; (80047b4 <HAL_InitTick+0xd0>)
 800476e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004772:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004774:	4a0f      	ldr	r2, [pc, #60]	; (80047b4 <HAL_InitTick+0xd0>)
 8004776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004778:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800477a:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <HAL_InitTick+0xd0>)
 800477c:	2200      	movs	r2, #0
 800477e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004780:	4b0c      	ldr	r3, [pc, #48]	; (80047b4 <HAL_InitTick+0xd0>)
 8004782:	2200      	movs	r2, #0
 8004784:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004786:	480b      	ldr	r0, [pc, #44]	; (80047b4 <HAL_InitTick+0xd0>)
 8004788:	f00e f9f9 	bl	8012b7e <HAL_TIM_Base_Init>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d104      	bne.n	800479c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004792:	4808      	ldr	r0, [pc, #32]	; (80047b4 <HAL_InitTick+0xd0>)
 8004794:	f00e fa4a 	bl	8012c2c <HAL_TIM_Base_Start_IT>
 8004798:	4603      	mov	r3, r0
 800479a:	e000      	b.n	800479e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3740      	adds	r7, #64	; 0x40
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	240000c8 	.word	0x240000c8
 80047ac:	58024400 	.word	0x58024400
 80047b0:	431bde83 	.word	0x431bde83
 80047b4:	24001d54 	.word	0x24001d54
 80047b8:	40001000 	.word	0x40001000

080047bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80047c0:	e7fe      	b.n	80047c0 <NMI_Handler+0x4>

080047c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047c2:	b480      	push	{r7}
 80047c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047c6:	e7fe      	b.n	80047c6 <HardFault_Handler+0x4>

080047c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047cc:	e7fe      	b.n	80047cc <MemManage_Handler+0x4>

080047ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047ce:	b480      	push	{r7}
 80047d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047d2:	e7fe      	b.n	80047d2 <BusFault_Handler+0x4>

080047d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047d8:	e7fe      	b.n	80047d8 <UsageFault_Handler+0x4>

080047da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047da:	b480      	push	{r7}
 80047dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047de:	bf00      	nop
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80047ec:	4802      	ldr	r0, [pc, #8]	; (80047f8 <DMA1_Stream0_IRQHandler+0x10>)
 80047ee:	f005 f80d 	bl	800980c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80047f2:	bf00      	nop
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	24000224 	.word	0x24000224

080047fc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004800:	4802      	ldr	r0, [pc, #8]	; (800480c <DMA1_Stream1_IRQHandler+0x10>)
 8004802:	f005 f803 	bl	800980c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004806:	bf00      	nop
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	2400029c 	.word	0x2400029c

08004810 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004814:	4802      	ldr	r0, [pc, #8]	; (8004820 <DMA1_Stream2_IRQHandler+0x10>)
 8004816:	f004 fff9 	bl	800980c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800481a:	bf00      	nop
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	24001ed0 	.word	0x24001ed0

08004824 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004828:	4802      	ldr	r0, [pc, #8]	; (8004834 <DMA1_Stream3_IRQHandler+0x10>)
 800482a:	f004 ffef 	bl	800980c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800482e:	bf00      	nop
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	24001cdc 	.word	0x24001cdc

08004838 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800483c:	4802      	ldr	r0, [pc, #8]	; (8004848 <DMA1_Stream4_IRQHandler+0x10>)
 800483e:	f004 ffe5 	bl	800980c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004842:	bf00      	nop
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	24001c64 	.word	0x24001c64

0800484c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8004850:	4802      	ldr	r0, [pc, #8]	; (800485c <DMA1_Stream5_IRQHandler+0x10>)
 8004852:	f004 ffdb 	bl	800980c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004856:	bf00      	nop
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	24000328 	.word	0x24000328

08004860 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004864:	4802      	ldr	r0, [pc, #8]	; (8004870 <DMA1_Stream6_IRQHandler+0x10>)
 8004866:	f004 ffd1 	bl	800980c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800486a:	bf00      	nop
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	24001990 	.word	0x24001990

08004874 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004878:	4802      	ldr	r0, [pc, #8]	; (8004884 <TIM1_BRK_IRQHandler+0x10>)
 800487a:	f00e fcee 	bl	801325a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800487e:	bf00      	nop
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	24001da4 	.word	0x24001da4

08004888 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800488c:	4802      	ldr	r0, [pc, #8]	; (8004898 <TIM1_UP_IRQHandler+0x10>)
 800488e:	f00e fce4 	bl	801325a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004892:	bf00      	nop
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	24001da4 	.word	0x24001da4

0800489c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80048a0:	4802      	ldr	r0, [pc, #8]	; (80048ac <TIM1_TRG_COM_IRQHandler+0x10>)
 80048a2:	f00e fcda 	bl	801325a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80048a6:	bf00      	nop
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	24001da4 	.word	0x24001da4

080048b0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80048b4:	4802      	ldr	r0, [pc, #8]	; (80048c0 <TIM1_CC_IRQHandler+0x10>)
 80048b6:	f00e fcd0 	bl	801325a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80048ba:	bf00      	nop
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	24001da4 	.word	0x24001da4

080048c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80048c8:	4802      	ldr	r0, [pc, #8]	; (80048d4 <TIM2_IRQHandler+0x10>)
 80048ca:	f00e fcc6 	bl	801325a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80048ce:	bf00      	nop
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	24001df0 	.word	0x24001df0

080048d8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80048dc:	4802      	ldr	r0, [pc, #8]	; (80048e8 <I2C1_EV_IRQHandler+0x10>)
 80048de:	f007 fa1d 	bl	800bd1c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80048e2:	bf00      	nop
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	2400193c 	.word	0x2400193c

080048ec <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80048f0:	4802      	ldr	r0, [pc, #8]	; (80048fc <I2C1_ER_IRQHandler+0x10>)
 80048f2:	f007 fa2d 	bl	800bd50 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80048f6:	bf00      	nop
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	2400193c 	.word	0x2400193c

08004900 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004904:	4802      	ldr	r0, [pc, #8]	; (8004910 <SPI1_IRQHandler+0x10>)
 8004906:	f00d fe07 	bl	8012518 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800490a:	bf00      	nop
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	24001b54 	.word	0x24001b54

08004914 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004918:	4802      	ldr	r0, [pc, #8]	; (8004924 <SPI2_IRQHandler+0x10>)
 800491a:	f00d fdfd 	bl	8012518 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800491e:	bf00      	nop
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	24001bdc 	.word	0x24001bdc

08004928 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800492c:	4802      	ldr	r0, [pc, #8]	; (8004938 <USART1_IRQHandler+0x10>)
 800492e:	f00f ffd7 	bl	80148e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004932:	bf00      	nop
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	24001e3c 	.word	0x24001e3c

0800493c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004940:	4802      	ldr	r0, [pc, #8]	; (800494c <DMA1_Stream7_IRQHandler+0x10>)
 8004942:	f004 ff63 	bl	800980c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004946:	bf00      	nop
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	24001a08 	.word	0x24001a08

08004950 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8004954:	4b06      	ldr	r3, [pc, #24]	; (8004970 <TIM6_DAC_IRQHandler+0x20>)
 8004956:	791b      	ldrb	r3, [r3, #4]
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800495e:	4804      	ldr	r0, [pc, #16]	; (8004970 <TIM6_DAC_IRQHandler+0x20>)
 8004960:	f003 f9ab 	bl	8007cba <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8004964:	4803      	ldr	r0, [pc, #12]	; (8004974 <TIM6_DAC_IRQHandler+0x24>)
 8004966:	f00e fc78 	bl	801325a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800496a:	bf00      	nop
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	24000314 	.word	0x24000314
 8004974:	24001d54 	.word	0x24001d54

08004978 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	4603      	mov	r3, r0
 8004980:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8004982:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <ITM_SendChar+0x48>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a0e      	ldr	r2, [pc, #56]	; (80049c0 <ITM_SendChar+0x48>)
 8004988:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800498c:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 800498e:	4b0d      	ldr	r3, [pc, #52]	; (80049c4 <ITM_SendChar+0x4c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a0c      	ldr	r2, [pc, #48]	; (80049c4 <ITM_SendChar+0x4c>)
 8004994:	f043 0301 	orr.w	r3, r3, #1
 8004998:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 800499a:	bf00      	nop
 800499c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0f8      	beq.n	800499c <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 80049aa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80049ae:	79fb      	ldrb	r3, [r7, #7]
 80049b0:	6013      	str	r3, [r2, #0]
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	e000edfc 	.word	0xe000edfc
 80049c4:	e0000e00 	.word	0xe0000e00

080049c8 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80049d4:	2300      	movs	r3, #0
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	e00a      	b.n	80049f0 <_read+0x28>
		*ptr++ = __io_getchar();
 80049da:	f3af 8000 	nop.w
 80049de:	4601      	mov	r1, r0
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	1c5a      	adds	r2, r3, #1
 80049e4:	60ba      	str	r2, [r7, #8]
 80049e6:	b2ca      	uxtb	r2, r1
 80049e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	3301      	adds	r3, #1
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	dbf0      	blt.n	80049da <_read+0x12>
	}

	return len;
 80049f8:	687b      	ldr	r3, [r7, #4]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b086      	sub	sp, #24
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	60f8      	str	r0, [r7, #12]
 8004a0a:	60b9      	str	r1, [r7, #8]
 8004a0c:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004a0e:	2300      	movs	r3, #0
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	e009      	b.n	8004a28 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	60ba      	str	r2, [r7, #8]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff ffab 	bl	8004978 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	3301      	adds	r3, #1
 8004a26:	617b      	str	r3, [r7, #20]
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	dbf1      	blt.n	8004a14 <_write+0x12>
	}
	return len;
 8004a30:	687b      	ldr	r3, [r7, #4]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3718      	adds	r7, #24
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <_close>:

int _close(int file) {
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8004a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <_fstat>:

int _fstat(int file, struct stat *st) {
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
 8004a5a:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a62:	605a      	str	r2, [r3, #4]
	return 0;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <_isatty>:

int _isatty(int file) {
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8004a7a:	2301      	movs	r3, #1
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
	...

08004aa4 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8004aac:	4a14      	ldr	r2, [pc, #80]	; (8004b00 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8004aae:	4b15      	ldr	r3, [pc, #84]	; (8004b04 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8004ab8:	4b13      	ldr	r3, [pc, #76]	; (8004b08 <_sbrk+0x64>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d102      	bne.n	8004ac6 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8004ac0:	4b11      	ldr	r3, [pc, #68]	; (8004b08 <_sbrk+0x64>)
 8004ac2:	4a12      	ldr	r2, [pc, #72]	; (8004b0c <_sbrk+0x68>)
 8004ac4:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8004ac6:	4b10      	ldr	r3, [pc, #64]	; (8004b08 <_sbrk+0x64>)
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4413      	add	r3, r2
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d207      	bcs.n	8004ae4 <_sbrk+0x40>
		errno = ENOMEM;
 8004ad4:	f015 fde2 	bl	801a69c <__errno>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	220c      	movs	r2, #12
 8004adc:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8004ade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ae2:	e009      	b.n	8004af8 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8004ae4:	4b08      	ldr	r3, [pc, #32]	; (8004b08 <_sbrk+0x64>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8004aea:	4b07      	ldr	r3, [pc, #28]	; (8004b08 <_sbrk+0x64>)
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4413      	add	r3, r2
 8004af2:	4a05      	ldr	r2, [pc, #20]	; (8004b08 <_sbrk+0x64>)
 8004af4:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8004af6:	68fb      	ldr	r3, [r7, #12]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	24080000 	.word	0x24080000
 8004b04:	00000400 	.word	0x00000400
 8004b08:	24001da0 	.word	0x24001da0
 8004b0c:	24006980 	.word	0x24006980

08004b10 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8004b14:	4b37      	ldr	r3, [pc, #220]	; (8004bf4 <SystemInit+0xe4>)
 8004b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1a:	4a36      	ldr	r2, [pc, #216]	; (8004bf4 <SystemInit+0xe4>)
 8004b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004b24:	4b34      	ldr	r3, [pc, #208]	; (8004bf8 <SystemInit+0xe8>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 030f 	and.w	r3, r3, #15
 8004b2c:	2b06      	cmp	r3, #6
 8004b2e:	d807      	bhi.n	8004b40 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004b30:	4b31      	ldr	r3, [pc, #196]	; (8004bf8 <SystemInit+0xe8>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f023 030f 	bic.w	r3, r3, #15
 8004b38:	4a2f      	ldr	r2, [pc, #188]	; (8004bf8 <SystemInit+0xe8>)
 8004b3a:	f043 0307 	orr.w	r3, r3, #7
 8004b3e:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8004b40:	4b2e      	ldr	r3, [pc, #184]	; (8004bfc <SystemInit+0xec>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a2d      	ldr	r2, [pc, #180]	; (8004bfc <SystemInit+0xec>)
 8004b46:	f043 0301 	orr.w	r3, r3, #1
 8004b4a:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8004b4c:	4b2b      	ldr	r3, [pc, #172]	; (8004bfc <SystemInit+0xec>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8004b52:	4b2a      	ldr	r3, [pc, #168]	; (8004bfc <SystemInit+0xec>)
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	4929      	ldr	r1, [pc, #164]	; (8004bfc <SystemInit+0xec>)
 8004b58:	4b29      	ldr	r3, [pc, #164]	; (8004c00 <SystemInit+0xf0>)
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004b5e:	4b26      	ldr	r3, [pc, #152]	; (8004bf8 <SystemInit+0xe8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0308 	and.w	r3, r3, #8
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d007      	beq.n	8004b7a <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004b6a:	4b23      	ldr	r3, [pc, #140]	; (8004bf8 <SystemInit+0xe8>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f023 030f 	bic.w	r3, r3, #15
 8004b72:	4a21      	ldr	r2, [pc, #132]	; (8004bf8 <SystemInit+0xe8>)
 8004b74:	f043 0307 	orr.w	r3, r3, #7
 8004b78:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8004b7a:	4b20      	ldr	r3, [pc, #128]	; (8004bfc <SystemInit+0xec>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8004b80:	4b1e      	ldr	r3, [pc, #120]	; (8004bfc <SystemInit+0xec>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8004b86:	4b1d      	ldr	r3, [pc, #116]	; (8004bfc <SystemInit+0xec>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8004b8c:	4b1b      	ldr	r3, [pc, #108]	; (8004bfc <SystemInit+0xec>)
 8004b8e:	4a1d      	ldr	r2, [pc, #116]	; (8004c04 <SystemInit+0xf4>)
 8004b90:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8004b92:	4b1a      	ldr	r3, [pc, #104]	; (8004bfc <SystemInit+0xec>)
 8004b94:	4a1c      	ldr	r2, [pc, #112]	; (8004c08 <SystemInit+0xf8>)
 8004b96:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8004b98:	4b18      	ldr	r3, [pc, #96]	; (8004bfc <SystemInit+0xec>)
 8004b9a:	4a1c      	ldr	r2, [pc, #112]	; (8004c0c <SystemInit+0xfc>)
 8004b9c:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8004b9e:	4b17      	ldr	r3, [pc, #92]	; (8004bfc <SystemInit+0xec>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8004ba4:	4b15      	ldr	r3, [pc, #84]	; (8004bfc <SystemInit+0xec>)
 8004ba6:	4a19      	ldr	r2, [pc, #100]	; (8004c0c <SystemInit+0xfc>)
 8004ba8:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8004baa:	4b14      	ldr	r3, [pc, #80]	; (8004bfc <SystemInit+0xec>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8004bb0:	4b12      	ldr	r3, [pc, #72]	; (8004bfc <SystemInit+0xec>)
 8004bb2:	4a16      	ldr	r2, [pc, #88]	; (8004c0c <SystemInit+0xfc>)
 8004bb4:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8004bb6:	4b11      	ldr	r3, [pc, #68]	; (8004bfc <SystemInit+0xec>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8004bbc:	4b0f      	ldr	r3, [pc, #60]	; (8004bfc <SystemInit+0xec>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a0e      	ldr	r2, [pc, #56]	; (8004bfc <SystemInit+0xec>)
 8004bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bc6:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8004bc8:	4b0c      	ldr	r3, [pc, #48]	; (8004bfc <SystemInit+0xec>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8004bce:	4b10      	ldr	r3, [pc, #64]	; (8004c10 <SystemInit+0x100>)
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	4b10      	ldr	r3, [pc, #64]	; (8004c14 <SystemInit+0x104>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bda:	d202      	bcs.n	8004be2 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8004bdc:	4b0e      	ldr	r3, [pc, #56]	; (8004c18 <SystemInit+0x108>)
 8004bde:	2201      	movs	r2, #1
 8004be0:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004be2:	4b0e      	ldr	r3, [pc, #56]	; (8004c1c <SystemInit+0x10c>)
 8004be4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004be8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004bea:	bf00      	nop
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	e000ed00 	.word	0xe000ed00
 8004bf8:	52002000 	.word	0x52002000
 8004bfc:	58024400 	.word	0x58024400
 8004c00:	eaf6ed7f 	.word	0xeaf6ed7f
 8004c04:	02020200 	.word	0x02020200
 8004c08:	01ff0000 	.word	0x01ff0000
 8004c0c:	01010280 	.word	0x01010280
 8004c10:	5c001000 	.word	0x5c001000
 8004c14:	ffff0000 	.word	0xffff0000
 8004c18:	51008108 	.word	0x51008108
 8004c1c:	52004000 	.word	0x52004000

08004c20 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b09a      	sub	sp, #104	; 0x68
 8004c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	605a      	str	r2, [r3, #4]
 8004c30:	609a      	str	r2, [r3, #8]
 8004c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c34:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	605a      	str	r2, [r3, #4]
 8004c3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	605a      	str	r2, [r3, #4]
 8004c4a:	609a      	str	r2, [r3, #8]
 8004c4c:	60da      	str	r2, [r3, #12]
 8004c4e:	611a      	str	r2, [r3, #16]
 8004c50:	615a      	str	r2, [r3, #20]
 8004c52:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004c54:	1d3b      	adds	r3, r7, #4
 8004c56:	222c      	movs	r2, #44	; 0x2c
 8004c58:	2100      	movs	r1, #0
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f015 fd56 	bl	801a70c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004c60:	4b44      	ldr	r3, [pc, #272]	; (8004d74 <MX_TIM1_Init+0x154>)
 8004c62:	4a45      	ldr	r2, [pc, #276]	; (8004d78 <MX_TIM1_Init+0x158>)
 8004c64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 8004c66:	4b43      	ldr	r3, [pc, #268]	; (8004d74 <MX_TIM1_Init+0x154>)
 8004c68:	224a      	movs	r2, #74	; 0x4a
 8004c6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c6c:	4b41      	ldr	r3, [pc, #260]	; (8004d74 <MX_TIM1_Init+0x154>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8004c72:	4b40      	ldr	r3, [pc, #256]	; (8004d74 <MX_TIM1_Init+0x154>)
 8004c74:	f24f 4223 	movw	r2, #62499	; 0xf423
 8004c78:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c7a:	4b3e      	ldr	r3, [pc, #248]	; (8004d74 <MX_TIM1_Init+0x154>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004c80:	4b3c      	ldr	r3, [pc, #240]	; (8004d74 <MX_TIM1_Init+0x154>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c86:	4b3b      	ldr	r3, [pc, #236]	; (8004d74 <MX_TIM1_Init+0x154>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004c8c:	4839      	ldr	r0, [pc, #228]	; (8004d74 <MX_TIM1_Init+0x154>)
 8004c8e:	f00d ff76 	bl	8012b7e <HAL_TIM_Base_Init>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004c98:	f7fe fef2 	bl	8003a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ca0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004ca2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4832      	ldr	r0, [pc, #200]	; (8004d74 <MX_TIM1_Init+0x154>)
 8004caa:	f00e fcf1 	bl	8013690 <HAL_TIM_ConfigClockSource>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004cb4:	f7fe fee4 	bl	8003a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004cb8:	482e      	ldr	r0, [pc, #184]	; (8004d74 <MX_TIM1_Init+0x154>)
 8004cba:	f00e fa6d 	bl	8013198 <HAL_TIM_PWM_Init>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004cc4:	f7fe fedc 	bl	8003a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004cd4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4826      	ldr	r0, [pc, #152]	; (8004d74 <MX_TIM1_Init+0x154>)
 8004cdc:	f00f fa2e 	bl	801413c <HAL_TIMEx_MasterConfigSynchronization>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004ce6:	f7fe fecb 	bl	8003a80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004cea:	2360      	movs	r3, #96	; 0x60
 8004cec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8004cee:	f240 13df 	movw	r3, #479	; 0x1df
 8004cf2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004d00:	2300      	movs	r3, #0
 8004d02:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004d04:	2300      	movs	r3, #0
 8004d06:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4818      	ldr	r0, [pc, #96]	; (8004d74 <MX_TIM1_Init+0x154>)
 8004d12:	f00e fba9 	bl	8013468 <HAL_TIM_PWM_ConfigChannel>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8004d1c:	f7fe feb0 	bl	8003a80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004d20:	2300      	movs	r3, #0
 8004d22:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004d24:	2300      	movs	r3, #0
 8004d26:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004d34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d38:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004d42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004d50:	1d3b      	adds	r3, r7, #4
 8004d52:	4619      	mov	r1, r3
 8004d54:	4807      	ldr	r0, [pc, #28]	; (8004d74 <MX_TIM1_Init+0x154>)
 8004d56:	f00f fa7f 	bl	8014258 <HAL_TIMEx_ConfigBreakDeadTime>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8004d60:	f7fe fe8e 	bl	8003a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004d64:	4803      	ldr	r0, [pc, #12]	; (8004d74 <MX_TIM1_Init+0x154>)
 8004d66:	f000 f8dd 	bl	8004f24 <HAL_TIM_MspPostInit>

}
 8004d6a:	bf00      	nop
 8004d6c:	3768      	adds	r7, #104	; 0x68
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	24001da4 	.word	0x24001da4
 8004d78:	40010000 	.word	0x40010000

08004d7c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08e      	sub	sp, #56	; 0x38
 8004d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d86:	2200      	movs	r2, #0
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	605a      	str	r2, [r3, #4]
 8004d8c:	609a      	str	r2, [r3, #8]
 8004d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d90:	f107 031c 	add.w	r3, r7, #28
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	605a      	str	r2, [r3, #4]
 8004d9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d9c:	463b      	mov	r3, r7
 8004d9e:	2200      	movs	r2, #0
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	605a      	str	r2, [r3, #4]
 8004da4:	609a      	str	r2, [r3, #8]
 8004da6:	60da      	str	r2, [r3, #12]
 8004da8:	611a      	str	r2, [r3, #16]
 8004daa:	615a      	str	r2, [r3, #20]
 8004dac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004dae:	4b2d      	ldr	r3, [pc, #180]	; (8004e64 <MX_TIM2_Init+0xe8>)
 8004db0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004db4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 8004db6:	4b2b      	ldr	r3, [pc, #172]	; (8004e64 <MX_TIM2_Init+0xe8>)
 8004db8:	224a      	movs	r2, #74	; 0x4a
 8004dba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dbc:	4b29      	ldr	r3, [pc, #164]	; (8004e64 <MX_TIM2_Init+0xe8>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8004dc2:	4b28      	ldr	r3, [pc, #160]	; (8004e64 <MX_TIM2_Init+0xe8>)
 8004dc4:	f640 4234 	movw	r2, #3124	; 0xc34
 8004dc8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dca:	4b26      	ldr	r3, [pc, #152]	; (8004e64 <MX_TIM2_Init+0xe8>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004dd0:	4b24      	ldr	r3, [pc, #144]	; (8004e64 <MX_TIM2_Init+0xe8>)
 8004dd2:	2280      	movs	r2, #128	; 0x80
 8004dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004dd6:	4823      	ldr	r0, [pc, #140]	; (8004e64 <MX_TIM2_Init+0xe8>)
 8004dd8:	f00d fed1 	bl	8012b7e <HAL_TIM_Base_Init>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004de2:	f7fe fe4d 	bl	8003a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004dec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004df0:	4619      	mov	r1, r3
 8004df2:	481c      	ldr	r0, [pc, #112]	; (8004e64 <MX_TIM2_Init+0xe8>)
 8004df4:	f00e fc4c 	bl	8013690 <HAL_TIM_ConfigClockSource>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004dfe:	f7fe fe3f 	bl	8003a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004e02:	4818      	ldr	r0, [pc, #96]	; (8004e64 <MX_TIM2_Init+0xe8>)
 8004e04:	f00e f9c8 	bl	8013198 <HAL_TIM_PWM_Init>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004e0e:	f7fe fe37 	bl	8003a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004e12:	2320      	movs	r3, #32
 8004e14:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e16:	2300      	movs	r3, #0
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004e1a:	f107 031c 	add.w	r3, r7, #28
 8004e1e:	4619      	mov	r1, r3
 8004e20:	4810      	ldr	r0, [pc, #64]	; (8004e64 <MX_TIM2_Init+0xe8>)
 8004e22:	f00f f98b 	bl	801413c <HAL_TIMEx_MasterConfigSynchronization>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004e2c:	f7fe fe28 	bl	8003a80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e30:	2360      	movs	r3, #96	; 0x60
 8004e32:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004e34:	2300      	movs	r3, #0
 8004e36:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004e40:	463b      	mov	r3, r7
 8004e42:	220c      	movs	r2, #12
 8004e44:	4619      	mov	r1, r3
 8004e46:	4807      	ldr	r0, [pc, #28]	; (8004e64 <MX_TIM2_Init+0xe8>)
 8004e48:	f00e fb0e 	bl	8013468 <HAL_TIM_PWM_ConfigChannel>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004e52:	f7fe fe15 	bl	8003a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004e56:	4803      	ldr	r0, [pc, #12]	; (8004e64 <MX_TIM2_Init+0xe8>)
 8004e58:	f000 f864 	bl	8004f24 <HAL_TIM_MspPostInit>

}
 8004e5c:	bf00      	nop
 8004e5e:	3738      	adds	r7, #56	; 0x38
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	24001df0 	.word	0x24001df0

08004e68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a29      	ldr	r2, [pc, #164]	; (8004f1c <HAL_TIM_Base_MspInit+0xb4>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d12f      	bne.n	8004eda <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e7a:	4b29      	ldr	r3, [pc, #164]	; (8004f20 <HAL_TIM_Base_MspInit+0xb8>)
 8004e7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e80:	4a27      	ldr	r2, [pc, #156]	; (8004f20 <HAL_TIM_Base_MspInit+0xb8>)
 8004e82:	f043 0301 	orr.w	r3, r3, #1
 8004e86:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004e8a:	4b25      	ldr	r3, [pc, #148]	; (8004f20 <HAL_TIM_Base_MspInit+0xb8>)
 8004e8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8004e98:	2200      	movs	r2, #0
 8004e9a:	2105      	movs	r1, #5
 8004e9c:	2018      	movs	r0, #24
 8004e9e:	f002 fd5d 	bl	800795c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8004ea2:	2018      	movs	r0, #24
 8004ea4:	f002 fd74 	bl	8007990 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	2105      	movs	r1, #5
 8004eac:	2019      	movs	r0, #25
 8004eae:	f002 fd55 	bl	800795c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004eb2:	2019      	movs	r0, #25
 8004eb4:	f002 fd6c 	bl	8007990 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2105      	movs	r1, #5
 8004ebc:	201a      	movs	r0, #26
 8004ebe:	f002 fd4d 	bl	800795c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8004ec2:	201a      	movs	r0, #26
 8004ec4:	f002 fd64 	bl	8007990 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2105      	movs	r1, #5
 8004ecc:	201b      	movs	r0, #27
 8004ece:	f002 fd45 	bl	800795c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004ed2:	201b      	movs	r0, #27
 8004ed4:	f002 fd5c 	bl	8007990 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004ed8:	e01b      	b.n	8004f12 <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee2:	d116      	bne.n	8004f12 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ee4:	4b0e      	ldr	r3, [pc, #56]	; (8004f20 <HAL_TIM_Base_MspInit+0xb8>)
 8004ee6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004eea:	4a0d      	ldr	r2, [pc, #52]	; (8004f20 <HAL_TIM_Base_MspInit+0xb8>)
 8004eec:	f043 0301 	orr.w	r3, r3, #1
 8004ef0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004ef4:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <HAL_TIM_Base_MspInit+0xb8>)
 8004ef6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	60bb      	str	r3, [r7, #8]
 8004f00:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004f02:	2200      	movs	r2, #0
 8004f04:	2105      	movs	r1, #5
 8004f06:	201c      	movs	r0, #28
 8004f08:	f002 fd28 	bl	800795c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004f0c:	201c      	movs	r0, #28
 8004f0e:	f002 fd3f 	bl	8007990 <HAL_NVIC_EnableIRQ>
}
 8004f12:	bf00      	nop
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	40010000 	.word	0x40010000
 8004f20:	58024400 	.word	0x58024400

08004f24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08a      	sub	sp, #40	; 0x28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f2c:	f107 0314 	add.w	r3, r7, #20
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	605a      	str	r2, [r3, #4]
 8004f36:	609a      	str	r2, [r3, #8]
 8004f38:	60da      	str	r2, [r3, #12]
 8004f3a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a26      	ldr	r2, [pc, #152]	; (8004fdc <HAL_TIM_MspPostInit+0xb8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d120      	bne.n	8004f88 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f46:	4b26      	ldr	r3, [pc, #152]	; (8004fe0 <HAL_TIM_MspPostInit+0xbc>)
 8004f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f4c:	4a24      	ldr	r2, [pc, #144]	; (8004fe0 <HAL_TIM_MspPostInit+0xbc>)
 8004f4e:	f043 0301 	orr.w	r3, r3, #1
 8004f52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f56:	4b22      	ldr	r3, [pc, #136]	; (8004fe0 <HAL_TIM_MspPostInit+0xbc>)
 8004f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	613b      	str	r3, [r7, #16]
 8004f62:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f72:	2300      	movs	r3, #0
 8004f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004f76:	2301      	movs	r3, #1
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f7a:	f107 0314 	add.w	r3, r7, #20
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4818      	ldr	r0, [pc, #96]	; (8004fe4 <HAL_TIM_MspPostInit+0xc0>)
 8004f82:	f006 fa49 	bl	800b418 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004f86:	e024      	b.n	8004fd2 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f90:	d11f      	bne.n	8004fd2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f92:	4b13      	ldr	r3, [pc, #76]	; (8004fe0 <HAL_TIM_MspPostInit+0xbc>)
 8004f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f98:	4a11      	ldr	r2, [pc, #68]	; (8004fe0 <HAL_TIM_MspPostInit+0xbc>)
 8004f9a:	f043 0302 	orr.w	r3, r3, #2
 8004f9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004fa2:	4b0f      	ldr	r3, [pc, #60]	; (8004fe0 <HAL_TIM_MspPostInit+0xbc>)
 8004fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004fb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fc6:	f107 0314 	add.w	r3, r7, #20
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4806      	ldr	r0, [pc, #24]	; (8004fe8 <HAL_TIM_MspPostInit+0xc4>)
 8004fce:	f006 fa23 	bl	800b418 <HAL_GPIO_Init>
}
 8004fd2:	bf00      	nop
 8004fd4:	3728      	adds	r7, #40	; 0x28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40010000 	.word	0x40010000
 8004fe0:	58024400 	.word	0x58024400
 8004fe4:	58020000 	.word	0x58020000
 8004fe8:	58020400 	.word	0x58020400

08004fec <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 8004ff8:	4b21      	ldr	r3, [pc, #132]	; (8005080 <get_uptime+0x94>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 8004ffe:	4b21      	ldr	r3, [pc, #132]	; (8005084 <get_uptime+0x98>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8005004:	4b1e      	ldr	r3, [pc, #120]	; (8005080 <get_uptime+0x94>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	429a      	cmp	r2, r3
 800500c:	d005      	beq.n	800501a <get_uptime+0x2e>
		ms = uptime_millis;
 800500e:	4b1c      	ldr	r3, [pc, #112]	; (8005080 <get_uptime+0x94>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 8005014:	4b1b      	ldr	r3, [pc, #108]	; (8005084 <get_uptime+0x98>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005020:	fb03 f202 	mul.w	r2, r3, r2
 8005024:	4b17      	ldr	r3, [pc, #92]	; (8005084 <get_uptime+0x98>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	3301      	adds	r3, #1
 800502a:	4917      	ldr	r1, [pc, #92]	; (8005088 <get_uptime+0x9c>)
 800502c:	fba1 1303 	umull	r1, r3, r1, r3
 8005030:	099b      	lsrs	r3, r3, #6
 8005032:	68f9      	ldr	r1, [r7, #12]
 8005034:	fbb1 f3f3 	udiv	r3, r1, r3
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <get_uptime+0x5a>
		uptime = 0;
 8005042:	2300      	movs	r3, #0
 8005044:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	0e1b      	lsrs	r3, r3, #24
 800504a:	b2da      	uxtb	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	0c1a      	lsrs	r2, r3, #16
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3301      	adds	r3, #1
 8005058:	b2d2      	uxtb	r2, r2
 800505a:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	0a1a      	lsrs	r2, r3, #8
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3302      	adds	r3, #2
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3303      	adds	r3, #3
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]
}
 8005072:	bf00      	nop
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	24001ae0 	.word	0x24001ae0
 8005084:	e000e010 	.word	0xe000e010
 8005088:	10624dd3 	.word	0x10624dd3

0800508c <get_unix_time>:

void get_unix_time(uint8_t* buffer) {
 800508c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005090:	b0a5      	sub	sp, #148	; 0x94
 8005092:	af00      	add	r7, sp, #0
 8005094:	65f8      	str	r0, [r7, #92]	; 0x5c
	#define DAYS_IN_SECONDS   (24U * SECONDS_IN_1_HOUR)

	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8005096:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800509a:	2200      	movs	r2, #0
 800509c:	4619      	mov	r1, r3
 800509e:	48bf      	ldr	r0, [pc, #764]	; (800539c <get_unix_time+0x310>)
 80050a0:	f00c fdcc 	bl	8011c3c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 80050a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80050a8:	2200      	movs	r2, #0
 80050aa:	4619      	mov	r1, r3
 80050ac:	48bb      	ldr	r0, [pc, #748]	; (800539c <get_unix_time+0x310>)
 80050ae:	f00c fea9 	bl	8011e04 <HAL_RTC_GetDate>
	uint32_t milliseconds = (10000 - (current_time.SubSeconds)) / 10;
 80050b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b4:	f242 7210 	movw	r2, #10000	; 0x2710
 80050b8:	1ad2      	subs	r2, r2, r3
 80050ba:	4bb9      	ldr	r3, [pc, #740]	; (80053a0 <get_unix_time+0x314>)
 80050bc:	fba3 2302 	umull	r2, r3, r3, r2
 80050c0:	08db      	lsrs	r3, r3, #3
 80050c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	uint16_t y;
	uint8_t m;
	uint8_t d;
	uint64_t unix_tm_val = 0;
 80050c6:	f04f 0200 	mov.w	r2, #0
 80050ca:	f04f 0300 	mov.w	r3, #0
 80050ce:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80


	y = current_date.Year + 2000;
 80050d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80050dc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	m = current_date.Month;
 80050e0:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80050e4:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
	d = current_date.Date;
 80050e8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80050ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	// January and February are counted as months 13 and 14 of the previous year
	if (m <= 2)
 80050f0:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d809      	bhi.n	800510c <get_unix_time+0x80>
	{
		m += 12;
 80050f8:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80050fc:	330c      	adds	r3, #12
 80050fe:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
		y -= 1;
 8005102:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005106:	3b01      	subs	r3, #1
 8005108:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	}
	// convert years to days
	unix_tm_val = (365 * y) + (y / 4) - (y / 100) + (y / 400);
 800510c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8005110:	f240 136d 	movw	r3, #365	; 0x16d
 8005114:	fb03 f202 	mul.w	r2, r3, r2
 8005118:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800511c:	089b      	lsrs	r3, r3, #2
 800511e:	b29b      	uxth	r3, r3
 8005120:	18d1      	adds	r1, r2, r3
 8005122:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8005126:	4b9f      	ldr	r3, [pc, #636]	; (80053a4 <get_unix_time+0x318>)
 8005128:	fba3 2302 	umull	r2, r3, r3, r2
 800512c:	095b      	lsrs	r3, r3, #5
 800512e:	b29b      	uxth	r3, r3
 8005130:	1ac9      	subs	r1, r1, r3
 8005132:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8005136:	4b9b      	ldr	r3, [pc, #620]	; (80053a4 <get_unix_time+0x318>)
 8005138:	fba3 2302 	umull	r2, r3, r3, r2
 800513c:	09db      	lsrs	r3, r3, #7
 800513e:	b29b      	uxth	r3, r3
 8005140:	440b      	add	r3, r1
 8005142:	17da      	asrs	r2, r3, #31
 8005144:	63bb      	str	r3, [r7, #56]	; 0x38
 8005146:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005148:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800514c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	// convert months to days
	unix_tm_val += (30 * m) + (3 * (m + 1) / 5) + d;
 8005150:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 8005154:	4613      	mov	r3, r2
 8005156:	011b      	lsls	r3, r3, #4
 8005158:	1a9b      	subs	r3, r3, r2
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	4618      	mov	r0, r3
 800515e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	4613      	mov	r3, r2
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	1899      	adds	r1, r3, r2
 800516a:	4b8f      	ldr	r3, [pc, #572]	; (80053a8 <get_unix_time+0x31c>)
 800516c:	fb83 2301 	smull	r2, r3, r3, r1
 8005170:	105a      	asrs	r2, r3, #1
 8005172:	17cb      	asrs	r3, r1, #31
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	18c2      	adds	r2, r0, r3
 8005178:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800517c:	4413      	add	r3, r2
 800517e:	17da      	asrs	r2, r3, #31
 8005180:	653b      	str	r3, [r7, #80]	; 0x50
 8005182:	657a      	str	r2, [r7, #84]	; 0x54
 8005184:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005188:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800518a:	1851      	adds	r1, r2, r1
 800518c:	6339      	str	r1, [r7, #48]	; 0x30
 800518e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005190:	eb43 0101 	adc.w	r1, r3, r1
 8005194:	6379      	str	r1, [r7, #52]	; 0x34
 8005196:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800519a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	// Unix time starts on January 1st, 1970
	unix_tm_val -= UNIX_TIME_CONST;
 800519e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80051a2:	4982      	ldr	r1, [pc, #520]	; (80053ac <get_unix_time+0x320>)
 80051a4:	1851      	adds	r1, r2, r1
 80051a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80051a8:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 80051ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051b2:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	// convert days to seconds
	unix_tm_val *= DAYS_IN_SECONDS;
 80051b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80051ba:	4602      	mov	r2, r0
 80051bc:	460b      	mov	r3, r1
 80051be:	1896      	adds	r6, r2, r2
 80051c0:	623e      	str	r6, [r7, #32]
 80051c2:	415b      	adcs	r3, r3
 80051c4:	627b      	str	r3, [r7, #36]	; 0x24
 80051c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051ca:	1814      	adds	r4, r2, r0
 80051cc:	eb43 0501 	adc.w	r5, r3, r1
 80051d0:	f04f 0200 	mov.w	r2, #0
 80051d4:	f04f 0300 	mov.w	r3, #0
 80051d8:	012b      	lsls	r3, r5, #4
 80051da:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80051de:	0122      	lsls	r2, r4, #4
 80051e0:	ebb2 0804 	subs.w	r8, r2, r4
 80051e4:	eb63 0905 	sbc.w	r9, r3, r5
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80051f4:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80051f8:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80051fc:	ebb2 0108 	subs.w	r1, r2, r8
 8005200:	61b9      	str	r1, [r7, #24]
 8005202:	eb63 0309 	sbc.w	r3, r3, r9
 8005206:	61fb      	str	r3, [r7, #28]
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	f04f 0300 	mov.w	r3, #0
 8005210:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8005214:	4629      	mov	r1, r5
 8005216:	01cb      	lsls	r3, r1, #7
 8005218:	4621      	mov	r1, r4
 800521a:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 800521e:	4621      	mov	r1, r4
 8005220:	01ca      	lsls	r2, r1, #7
 8005222:	461c      	mov	r4, r3
 8005224:	4613      	mov	r3, r2
 8005226:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	//Add hours, minutes and seconds
	unix_tm_val += (SECONDS_IN_1_HOUR * current_time.Hours) + (SECONDS_IN_1_MIN * current_time.Minutes) + current_time.Seconds;
 800522a:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800522e:	461a      	mov	r2, r3
 8005230:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005234:	fb03 f102 	mul.w	r1, r3, r2
 8005238:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 800523c:	461a      	mov	r2, r3
 800523e:	4613      	mov	r3, r2
 8005240:	011b      	lsls	r3, r3, #4
 8005242:	1a9b      	subs	r3, r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	18ca      	adds	r2, r1, r3
 8005248:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800524c:	4413      	add	r3, r2
 800524e:	2200      	movs	r2, #0
 8005250:	64bb      	str	r3, [r7, #72]	; 0x48
 8005252:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005254:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005258:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800525c:	4621      	mov	r1, r4
 800525e:	1851      	adds	r1, r2, r1
 8005260:	6139      	str	r1, [r7, #16]
 8005262:	4629      	mov	r1, r5
 8005264:	eb43 0101 	adc.w	r1, r3, r1
 8005268:	6179      	str	r1, [r7, #20]
 800526a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800526e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	// Convert to milliseconds
	unix_tm_val *= 1000;
 8005272:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	f04f 0400 	mov.w	r4, #0
 800527e:	f04f 0500 	mov.w	r5, #0
 8005282:	015d      	lsls	r5, r3, #5
 8005284:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8005288:	0154      	lsls	r4, r2, #5
 800528a:	4622      	mov	r2, r4
 800528c:	462b      	mov	r3, r5
 800528e:	ebb2 0a00 	subs.w	sl, r2, r0
 8005292:	eb63 0b01 	sbc.w	fp, r3, r1
 8005296:	f04f 0200 	mov.w	r2, #0
 800529a:	f04f 0300 	mov.w	r3, #0
 800529e:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80052a2:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 80052a6:	ea4f 028a 	mov.w	r2, sl, lsl #2
 80052aa:	4692      	mov	sl, r2
 80052ac:	469b      	mov	fp, r3
 80052ae:	eb1a 0300 	adds.w	r3, sl, r0
 80052b2:	60bb      	str	r3, [r7, #8]
 80052b4:	eb4b 0301 	adc.w	r3, fp, r1
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	f04f 0200 	mov.w	r2, #0
 80052be:	f04f 0300 	mov.w	r3, #0
 80052c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052c6:	4629      	mov	r1, r5
 80052c8:	00cb      	lsls	r3, r1, #3
 80052ca:	4621      	mov	r1, r4
 80052cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052d0:	4621      	mov	r1, r4
 80052d2:	00ca      	lsls	r2, r1, #3
 80052d4:	461c      	mov	r4, r3
 80052d6:	4613      	mov	r3, r2
 80052d8:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	// Add milliseconds
	unix_tm_val += milliseconds;
 80052dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052e0:	2200      	movs	r2, #0
 80052e2:	643b      	str	r3, [r7, #64]	; 0x40
 80052e4:	647a      	str	r2, [r7, #68]	; 0x44
 80052e6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80052ea:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80052ee:	4621      	mov	r1, r4
 80052f0:	1851      	adds	r1, r2, r1
 80052f2:	6039      	str	r1, [r7, #0]
 80052f4:	4629      	mov	r1, r5
 80052f6:	eb43 0101 	adc.w	r1, r3, r1
 80052fa:	6079      	str	r1, [r7, #4]
 80052fc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005300:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80

	buffer[0] = ((unix_tm_val >> 40) & 0xFF);
 8005304:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005308:	f04f 0200 	mov.w	r2, #0
 800530c:	f04f 0300 	mov.w	r3, #0
 8005310:	0a0a      	lsrs	r2, r1, #8
 8005312:	2300      	movs	r3, #0
 8005314:	b2d2      	uxtb	r2, r2
 8005316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005318:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((unix_tm_val >> 32) & 0xFF);
 800531a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800531e:	f04f 0200 	mov.w	r2, #0
 8005322:	f04f 0300 	mov.w	r3, #0
 8005326:	000a      	movs	r2, r1
 8005328:	2300      	movs	r3, #0
 800532a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800532c:	3101      	adds	r1, #1
 800532e:	b2d3      	uxtb	r3, r2
 8005330:	700b      	strb	r3, [r1, #0]
	buffer[2] = ((unix_tm_val >> 24) & 0xFF);
 8005332:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	0e02      	lsrs	r2, r0, #24
 8005340:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005344:	0e0b      	lsrs	r3, r1, #24
 8005346:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005348:	3102      	adds	r1, #2
 800534a:	b2d3      	uxtb	r3, r2
 800534c:	700b      	strb	r3, [r1, #0]
	buffer[3] = ((unix_tm_val >> 16) & 0xFF);
 800534e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005352:	f04f 0200 	mov.w	r2, #0
 8005356:	f04f 0300 	mov.w	r3, #0
 800535a:	0c02      	lsrs	r2, r0, #16
 800535c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005360:	0c0b      	lsrs	r3, r1, #16
 8005362:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005364:	3103      	adds	r1, #3
 8005366:	b2d3      	uxtb	r3, r2
 8005368:	700b      	strb	r3, [r1, #0]
	buffer[4] = ((unix_tm_val >> 8) & 0xFF);
 800536a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800536e:	f04f 0200 	mov.w	r2, #0
 8005372:	f04f 0300 	mov.w	r3, #0
 8005376:	0a02      	lsrs	r2, r0, #8
 8005378:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800537c:	0a0b      	lsrs	r3, r1, #8
 800537e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005380:	3104      	adds	r1, #4
 8005382:	b2d3      	uxtb	r3, r2
 8005384:	700b      	strb	r3, [r1, #0]
	buffer[5] = unix_tm_val & 0xFF;
 8005386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005388:	3305      	adds	r3, #5
 800538a:	f897 2080 	ldrb.w	r2, [r7, #128]	; 0x80
 800538e:	701a      	strb	r2, [r3, #0]
}
 8005390:	bf00      	nop
 8005392:	3794      	adds	r7, #148	; 0x94
 8005394:	46bd      	mov	sp, r7
 8005396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800539a:	bf00      	nop
 800539c:	24001af4 	.word	0x24001af4
 80053a0:	cccccccd 	.word	0xcccccccd
 80053a4:	51eb851f 	.word	0x51eb851f
 80053a8:	66666667 	.word	0x66666667
 80053ac:	fff50537 	.word	0xfff50537

080053b0 <calibrateRTC>:

void calibrateRTC(uint8_t *buffer) {
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b08c      	sub	sp, #48	; 0x30
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	785b      	ldrb	r3, [r3, #1]
 80053bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	789b      	ldrb	r3, [r3, #2]
 80053c4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	78db      	ldrb	r3, [r3, #3]
 80053cc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	791b      	ldrb	r3, [r3, #4]
 80053d4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	795b      	ldrb	r3, [r3, #5]
 80053dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	799b      	ldrb	r3, [r3, #6]
 80053e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3307      	adds	r3, #7
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	021b      	lsls	r3, r3, #8
 80053f0:	b21a      	sxth	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	3308      	adds	r3, #8
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	b21b      	sxth	r3, r3
 80053fa:	4313      	orrs	r3, r2
 80053fc:	b21b      	sxth	r3, r3
 80053fe:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 8005400:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005404:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 8005408:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800540c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 8005410:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005414:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 8005418:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800541c:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 800541e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005422:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 8005424:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005428:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 800542a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800542c:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 800542e:	f107 0320 	add.w	r3, r7, #32
 8005432:	2200      	movs	r2, #0
 8005434:	4619      	mov	r1, r3
 8005436:	480b      	ldr	r0, [pc, #44]	; (8005464 <calibrateRTC+0xb4>)
 8005438:	f00c fc5c 	bl	8011cf4 <HAL_RTC_SetDate>
 800543c:	4603      	mov	r3, r0
 800543e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 8005442:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <calibrateRTC+0x9e>
		Error_Handler();
 800544a:	f7fe fb19 	bl	8003a80 <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 800544e:	f107 030c 	add.w	r3, r7, #12
 8005452:	2200      	movs	r2, #0
 8005454:	4619      	mov	r1, r3
 8005456:	4803      	ldr	r0, [pc, #12]	; (8005464 <calibrateRTC+0xb4>)
 8005458:	f000 f806 	bl	8005468 <RTC_SetTime>
}
 800545c:	bf00      	nop
 800545e:	3730      	adds	r7, #48	; 0x30
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	24001af4 	.word	0x24001af4

08005468 <RTC_SetTime>:


HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 8005468:	b590      	push	{r4, r7, lr}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f893 3020 	ldrb.w	r3, [r3, #32]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d101      	bne.n	8005482 <RTC_SetTime+0x1a>
 800547e:	2302      	movs	r3, #2
 8005480:	e051      	b.n	8005526 <RTC_SetTime+0xbe>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2202      	movs	r2, #2
 800548e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	22ca      	movs	r2, #202	; 0xca
 8005498:	625a      	str	r2, [r3, #36]	; 0x24
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2253      	movs	r2, #83	; 0x53
 80054a0:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f00c fd20 	bl	8011ee8 <RTC_EnterInitMode>
 80054a8:	4603      	mov	r3, r0
 80054aa:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 80054ac:	7dfb      	ldrb	r3, [r7, #23]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d129      	bne.n	8005506 <RTC_SetTime+0x9e>

		sTime->TimeFormat = 0x00U;
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2200      	movs	r2, #0
 80054b6:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	4618      	mov	r0, r3
 80054be:	f00c fd85 	bl	8011fcc <RTC_ByteToBcd2>
 80054c2:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 80054c4:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	785b      	ldrb	r3, [r3, #1]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f00c fd7e 	bl	8011fcc <RTC_ByteToBcd2>
 80054d0:	4603      	mov	r3, r0
 80054d2:	021b      	lsls	r3, r3, #8
 80054d4:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	789b      	ldrb	r3, [r3, #2]
 80054da:	4618      	mov	r0, r3
 80054dc:	f00c fd76 	bl	8011fcc <RTC_ByteToBcd2>
 80054e0:	4603      	mov	r3, r0
 80054e2:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	78db      	ldrb	r3, [r3, #3]
 80054ea:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	6939      	ldr	r1, [r7, #16]
 80054f6:	4b0e      	ldr	r3, [pc, #56]	; (8005530 <RTC_SetTime+0xc8>)
 80054f8:	400b      	ands	r3, r1
 80054fa:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f00c fd27 	bl	8011f50 <RTC_ExitInitMode>
 8005502:	4603      	mov	r3, r0
 8005504:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	22ff      	movs	r2, #255	; 0xff
 800550c:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 800550e:	7dfb      	ldrb	r3, [r7, #23]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d103      	bne.n	800551c <RTC_SetTime+0xb4>
		hrtc->State = HAL_RTC_STATE_READY;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2020 	strb.w	r2, [r3, #32]
	return status;
 8005524:	7dfb      	ldrb	r3, [r7, #23]

}
 8005526:	4618      	mov	r0, r3
 8005528:	371c      	adds	r7, #28
 800552a:	46bd      	mov	sp, r7
 800552c:	bd90      	pop	{r4, r7, pc}
 800552e:	bf00      	nop
 8005530:	007f7f7f 	.word	0x007f7f7f

08005534 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005538:	4b30      	ldr	r3, [pc, #192]	; (80055fc <MX_USART1_UART_Init+0xc8>)
 800553a:	4a31      	ldr	r2, [pc, #196]	; (8005600 <MX_USART1_UART_Init+0xcc>)
 800553c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 800553e:	4b2f      	ldr	r3, [pc, #188]	; (80055fc <MX_USART1_UART_Init+0xc8>)
 8005540:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8005544:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005546:	4b2d      	ldr	r3, [pc, #180]	; (80055fc <MX_USART1_UART_Init+0xc8>)
 8005548:	2200      	movs	r2, #0
 800554a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800554c:	4b2b      	ldr	r3, [pc, #172]	; (80055fc <MX_USART1_UART_Init+0xc8>)
 800554e:	2200      	movs	r2, #0
 8005550:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005552:	4b2a      	ldr	r3, [pc, #168]	; (80055fc <MX_USART1_UART_Init+0xc8>)
 8005554:	2200      	movs	r2, #0
 8005556:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005558:	4b28      	ldr	r3, [pc, #160]	; (80055fc <MX_USART1_UART_Init+0xc8>)
 800555a:	220c      	movs	r2, #12
 800555c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800555e:	4b27      	ldr	r3, [pc, #156]	; (80055fc <MX_USART1_UART_Init+0xc8>)
 8005560:	2200      	movs	r2, #0
 8005562:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005564:	4b25      	ldr	r3, [pc, #148]	; (80055fc <MX_USART1_UART_Init+0xc8>)
 8005566:	2200      	movs	r2, #0
 8005568:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800556a:	4b24      	ldr	r3, [pc, #144]	; (80055fc <MX_USART1_UART_Init+0xc8>)
 800556c:	2200      	movs	r2, #0
 800556e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005570:	4b22      	ldr	r3, [pc, #136]	; (80055fc <MX_USART1_UART_Init+0xc8>)
 8005572:	2200      	movs	r2, #0
 8005574:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005576:	4b21      	ldr	r3, [pc, #132]	; (80055fc <MX_USART1_UART_Init+0xc8>)
 8005578:	2200      	movs	r2, #0
 800557a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800557c:	481f      	ldr	r0, [pc, #124]	; (80055fc <MX_USART1_UART_Init+0xc8>)
 800557e:	f00e ff07 	bl	8014390 <HAL_UART_Init>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005588:	f7fe fa7a 	bl	8003a80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800558c:	2100      	movs	r1, #0
 800558e:	481b      	ldr	r0, [pc, #108]	; (80055fc <MX_USART1_UART_Init+0xc8>)
 8005590:	f011 fc4d 	bl	8016e2e <HAL_UARTEx_SetTxFifoThreshold>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800559a:	f7fe fa71 	bl	8003a80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800559e:	2100      	movs	r1, #0
 80055a0:	4816      	ldr	r0, [pc, #88]	; (80055fc <MX_USART1_UART_Init+0xc8>)
 80055a2:	f011 fc82 	bl	8016eaa <HAL_UARTEx_SetRxFifoThreshold>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80055ac:	f7fe fa68 	bl	8003a80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80055b0:	4812      	ldr	r0, [pc, #72]	; (80055fc <MX_USART1_UART_Init+0xc8>)
 80055b2:	f011 fc03 	bl	8016dbc <HAL_UARTEx_DisableFifoMode>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80055bc:	f7fe fa60 	bl	8003a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 80055c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80055c4:	480d      	ldr	r0, [pc, #52]	; (80055fc <MX_USART1_UART_Init+0xc8>)
 80055c6:	f011 fc70 	bl	8016eaa <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 80055ca:	480c      	ldr	r0, [pc, #48]	; (80055fc <MX_USART1_UART_Init+0xc8>)
 80055cc:	f011 fbbb 	bl	8016d46 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 80055d0:	480a      	ldr	r0, [pc, #40]	; (80055fc <MX_USART1_UART_Init+0xc8>)
 80055d2:	f011 fb85 	bl	8016ce0 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 80055d6:	4b09      	ldr	r3, [pc, #36]	; (80055fc <MX_USART1_UART_Init+0xc8>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	4b07      	ldr	r3, [pc, #28]	; (80055fc <MX_USART1_UART_Init+0xc8>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80055e4:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80055e6:	4b05      	ldr	r3, [pc, #20]	; (80055fc <MX_USART1_UART_Init+0xc8>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	4b03      	ldr	r3, [pc, #12]	; (80055fc <MX_USART1_UART_Init+0xc8>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80055f4:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 80055f6:	bf00      	nop
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	24001e3c 	.word	0x24001e3c
 8005600:	40011000 	.word	0x40011000

08005604 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b0ba      	sub	sp, #232	; 0xe8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800560c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	605a      	str	r2, [r3, #4]
 8005616:	609a      	str	r2, [r3, #8]
 8005618:	60da      	str	r2, [r3, #12]
 800561a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800561c:	f107 0310 	add.w	r3, r7, #16
 8005620:	22c0      	movs	r2, #192	; 0xc0
 8005622:	2100      	movs	r1, #0
 8005624:	4618      	mov	r0, r3
 8005626:	f015 f871 	bl	801a70c <memset>
  if(uartHandle->Instance==USART1)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a41      	ldr	r2, [pc, #260]	; (8005734 <HAL_UART_MspInit+0x130>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d17b      	bne.n	800572c <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005634:	f04f 0201 	mov.w	r2, #1
 8005638:	f04f 0300 	mov.w	r3, #0
 800563c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8005640:	2318      	movs	r3, #24
 8005642:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005646:	f107 0310 	add.w	r3, r7, #16
 800564a:	4618      	mov	r0, r3
 800564c:	f009 fcd8 	bl	800f000 <HAL_RCCEx_PeriphCLKConfig>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8005656:	f7fe fa13 	bl	8003a80 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800565a:	4b37      	ldr	r3, [pc, #220]	; (8005738 <HAL_UART_MspInit+0x134>)
 800565c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005660:	4a35      	ldr	r2, [pc, #212]	; (8005738 <HAL_UART_MspInit+0x134>)
 8005662:	f043 0310 	orr.w	r3, r3, #16
 8005666:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800566a:	4b33      	ldr	r3, [pc, #204]	; (8005738 <HAL_UART_MspInit+0x134>)
 800566c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005670:	f003 0310 	and.w	r3, r3, #16
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005678:	4b2f      	ldr	r3, [pc, #188]	; (8005738 <HAL_UART_MspInit+0x134>)
 800567a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800567e:	4a2e      	ldr	r2, [pc, #184]	; (8005738 <HAL_UART_MspInit+0x134>)
 8005680:	f043 0301 	orr.w	r3, r3, #1
 8005684:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005688:	4b2b      	ldr	r3, [pc, #172]	; (8005738 <HAL_UART_MspInit+0x134>)
 800568a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	60bb      	str	r3, [r7, #8]
 8005694:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005696:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800569a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800569e:	2302      	movs	r3, #2
 80056a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056a4:	2300      	movs	r3, #0
 80056a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056aa:	2300      	movs	r3, #0
 80056ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80056b0:	2307      	movs	r3, #7
 80056b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056b6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80056ba:	4619      	mov	r1, r3
 80056bc:	481f      	ldr	r0, [pc, #124]	; (800573c <HAL_UART_MspInit+0x138>)
 80056be:	f005 feab 	bl	800b418 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 80056c2:	4b1f      	ldr	r3, [pc, #124]	; (8005740 <HAL_UART_MspInit+0x13c>)
 80056c4:	4a1f      	ldr	r2, [pc, #124]	; (8005744 <HAL_UART_MspInit+0x140>)
 80056c6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80056c8:	4b1d      	ldr	r3, [pc, #116]	; (8005740 <HAL_UART_MspInit+0x13c>)
 80056ca:	222a      	movs	r2, #42	; 0x2a
 80056cc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80056ce:	4b1c      	ldr	r3, [pc, #112]	; (8005740 <HAL_UART_MspInit+0x13c>)
 80056d0:	2240      	movs	r2, #64	; 0x40
 80056d2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056d4:	4b1a      	ldr	r3, [pc, #104]	; (8005740 <HAL_UART_MspInit+0x13c>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80056da:	4b19      	ldr	r3, [pc, #100]	; (8005740 <HAL_UART_MspInit+0x13c>)
 80056dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056e0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056e2:	4b17      	ldr	r3, [pc, #92]	; (8005740 <HAL_UART_MspInit+0x13c>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056e8:	4b15      	ldr	r3, [pc, #84]	; (8005740 <HAL_UART_MspInit+0x13c>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80056ee:	4b14      	ldr	r3, [pc, #80]	; (8005740 <HAL_UART_MspInit+0x13c>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80056f4:	4b12      	ldr	r3, [pc, #72]	; (8005740 <HAL_UART_MspInit+0x13c>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80056fa:	4b11      	ldr	r3, [pc, #68]	; (8005740 <HAL_UART_MspInit+0x13c>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005700:	480f      	ldr	r0, [pc, #60]	; (8005740 <HAL_UART_MspInit+0x13c>)
 8005702:	f002 fd59 	bl	80081b8 <HAL_DMA_Init>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800570c:	f7fe f9b8 	bl	8003a80 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a0b      	ldr	r2, [pc, #44]	; (8005740 <HAL_UART_MspInit+0x13c>)
 8005714:	67da      	str	r2, [r3, #124]	; 0x7c
 8005716:	4a0a      	ldr	r2, [pc, #40]	; (8005740 <HAL_UART_MspInit+0x13c>)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800571c:	2200      	movs	r2, #0
 800571e:	2105      	movs	r1, #5
 8005720:	2025      	movs	r0, #37	; 0x25
 8005722:	f002 f91b 	bl	800795c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005726:	2025      	movs	r0, #37	; 0x25
 8005728:	f002 f932 	bl	8007990 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800572c:	bf00      	nop
 800572e:	37e8      	adds	r7, #232	; 0xe8
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	40011000 	.word	0x40011000
 8005738:	58024400 	.word	0x58024400
 800573c:	58020000 	.word	0x58020000
 8005740:	24001ed0 	.word	0x24001ed0
 8005744:	40020040 	.word	0x40020040

08005748 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800574e:	2300      	movs	r3, #0
 8005750:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8005752:	4bc3      	ldr	r3, [pc, #780]	; (8005a60 <voltage_monitor_init+0x318>)
 8005754:	2200      	movs	r2, #0
 8005756:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8005758:	4bc1      	ldr	r3, [pc, #772]	; (8005a60 <voltage_monitor_init+0x318>)
 800575a:	2200      	movs	r2, #0
 800575c:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 800575e:	4bc0      	ldr	r3, [pc, #768]	; (8005a60 <voltage_monitor_init+0x318>)
 8005760:	2201      	movs	r2, #1
 8005762:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8005764:	4bbe      	ldr	r3, [pc, #760]	; (8005a60 <voltage_monitor_init+0x318>)
 8005766:	2200      	movs	r2, #0
 8005768:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 800576a:	4bbd      	ldr	r3, [pc, #756]	; (8005a60 <voltage_monitor_init+0x318>)
 800576c:	f242 7210 	movw	r2, #10000	; 0x2710
 8005770:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 8005772:	4bbb      	ldr	r3, [pc, #748]	; (8005a60 <voltage_monitor_init+0x318>)
 8005774:	2200      	movs	r2, #0
 8005776:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 8005778:	4bb9      	ldr	r3, [pc, #740]	; (8005a60 <voltage_monitor_init+0x318>)
 800577a:	2201      	movs	r2, #1
 800577c:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 800577e:	4bb8      	ldr	r3, [pc, #736]	; (8005a60 <voltage_monitor_init+0x318>)
 8005780:	2200      	movs	r2, #0
 8005782:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8005784:	4bb6      	ldr	r3, [pc, #728]	; (8005a60 <voltage_monitor_init+0x318>)
 8005786:	2201      	movs	r2, #1
 8005788:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 800578a:	4bb5      	ldr	r3, [pc, #724]	; (8005a60 <voltage_monitor_init+0x318>)
 800578c:	2200      	movs	r2, #0
 800578e:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005790:	4bb3      	ldr	r3, [pc, #716]	; (8005a60 <voltage_monitor_init+0x318>)
 8005792:	f242 7210 	movw	r2, #10000	; 0x2710
 8005796:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 8005798:	4bb1      	ldr	r3, [pc, #708]	; (8005a60 <voltage_monitor_init+0x318>)
 800579a:	2200      	movs	r2, #0
 800579c:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 800579e:	4bb0      	ldr	r3, [pc, #704]	; (8005a60 <voltage_monitor_init+0x318>)
 80057a0:	2202      	movs	r2, #2
 80057a2:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 80057a4:	4bae      	ldr	r3, [pc, #696]	; (8005a60 <voltage_monitor_init+0x318>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 80057aa:	4bad      	ldr	r3, [pc, #692]	; (8005a60 <voltage_monitor_init+0x318>)
 80057ac:	2201      	movs	r2, #1
 80057ae:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 80057b0:	4bab      	ldr	r3, [pc, #684]	; (8005a60 <voltage_monitor_init+0x318>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 80057b6:	4baa      	ldr	r3, [pc, #680]	; (8005a60 <voltage_monitor_init+0x318>)
 80057b8:	f242 7210 	movw	r2, #10000	; 0x2710
 80057bc:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 80057be:	4ba8      	ldr	r3, [pc, #672]	; (8005a60 <voltage_monitor_init+0x318>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 80057c4:	4ba6      	ldr	r3, [pc, #664]	; (8005a60 <voltage_monitor_init+0x318>)
 80057c6:	2203      	movs	r2, #3
 80057c8:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 80057ca:	4ba5      	ldr	r3, [pc, #660]	; (8005a60 <voltage_monitor_init+0x318>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 80057d0:	4ba3      	ldr	r3, [pc, #652]	; (8005a60 <voltage_monitor_init+0x318>)
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 80057d8:	4ba1      	ldr	r3, [pc, #644]	; (8005a60 <voltage_monitor_init+0x318>)
 80057da:	2200      	movs	r2, #0
 80057dc:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 80057de:	4ba0      	ldr	r3, [pc, #640]	; (8005a60 <voltage_monitor_init+0x318>)
 80057e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80057e4:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 80057e6:	4b9e      	ldr	r3, [pc, #632]	; (8005a60 <voltage_monitor_init+0x318>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 80057ec:	4b9c      	ldr	r3, [pc, #624]	; (8005a60 <voltage_monitor_init+0x318>)
 80057ee:	2204      	movs	r2, #4
 80057f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 80057f4:	4b9a      	ldr	r3, [pc, #616]	; (8005a60 <voltage_monitor_init+0x318>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 80057fc:	4b98      	ldr	r3, [pc, #608]	; (8005a60 <voltage_monitor_init+0x318>)
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8005804:	4b96      	ldr	r3, [pc, #600]	; (8005a60 <voltage_monitor_init+0x318>)
 8005806:	2200      	movs	r2, #0
 8005808:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 800580a:	4b95      	ldr	r3, [pc, #596]	; (8005a60 <voltage_monitor_init+0x318>)
 800580c:	f242 7210 	movw	r2, #10000	; 0x2710
 8005810:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8005812:	4b93      	ldr	r3, [pc, #588]	; (8005a60 <voltage_monitor_init+0x318>)
 8005814:	2200      	movs	r2, #0
 8005816:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8005818:	4b91      	ldr	r3, [pc, #580]	; (8005a60 <voltage_monitor_init+0x318>)
 800581a:	2205      	movs	r2, #5
 800581c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8005820:	4b8f      	ldr	r3, [pc, #572]	; (8005a60 <voltage_monitor_init+0x318>)
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 8005828:	4b8d      	ldr	r3, [pc, #564]	; (8005a60 <voltage_monitor_init+0x318>)
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8005830:	4b8b      	ldr	r3, [pc, #556]	; (8005a60 <voltage_monitor_init+0x318>)
 8005832:	2200      	movs	r2, #0
 8005834:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005836:	4b8a      	ldr	r3, [pc, #552]	; (8005a60 <voltage_monitor_init+0x318>)
 8005838:	f242 7210 	movw	r2, #10000	; 0x2710
 800583c:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 800583e:	4b88      	ldr	r3, [pc, #544]	; (8005a60 <voltage_monitor_init+0x318>)
 8005840:	2200      	movs	r2, #0
 8005842:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8005844:	4b86      	ldr	r3, [pc, #536]	; (8005a60 <voltage_monitor_init+0x318>)
 8005846:	2206      	movs	r2, #6
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 800584c:	4b84      	ldr	r3, [pc, #528]	; (8005a60 <voltage_monitor_init+0x318>)
 800584e:	2200      	movs	r2, #0
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 0;
 8005854:	4b82      	ldr	r3, [pc, #520]	; (8005a60 <voltage_monitor_init+0x318>)
 8005856:	2200      	movs	r2, #0
 8005858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 800585c:	4b80      	ldr	r3, [pc, #512]	; (8005a60 <voltage_monitor_init+0x318>)
 800585e:	2200      	movs	r2, #0
 8005860:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005864:	4b7e      	ldr	r3, [pc, #504]	; (8005a60 <voltage_monitor_init+0x318>)
 8005866:	f242 7210 	movw	r2, #10000	; 0x2710
 800586a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 10000;
 800586e:	4b7c      	ldr	r3, [pc, #496]	; (8005a60 <voltage_monitor_init+0x318>)
 8005870:	f242 7210 	movw	r2, #10000	; 0x2710
 8005874:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 8005878:	4b79      	ldr	r3, [pc, #484]	; (8005a60 <voltage_monitor_init+0x318>)
 800587a:	2207      	movs	r2, #7
 800587c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 8005880:	4b77      	ldr	r3, [pc, #476]	; (8005a60 <voltage_monitor_init+0x318>)
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 0;
 8005888:	4b75      	ldr	r3, [pc, #468]	; (8005a60 <voltage_monitor_init+0x318>)
 800588a:	2200      	movs	r2, #0
 800588c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 8005890:	4b73      	ldr	r3, [pc, #460]	; (8005a60 <voltage_monitor_init+0x318>)
 8005892:	2200      	movs	r2, #0
 8005894:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005898:	4b71      	ldr	r3, [pc, #452]	; (8005a60 <voltage_monitor_init+0x318>)
 800589a:	f242 7210 	movw	r2, #10000	; 0x2710
 800589e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 80058a2:	4b6f      	ldr	r3, [pc, #444]	; (8005a60 <voltage_monitor_init+0x318>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 80058aa:	4b6d      	ldr	r3, [pc, #436]	; (8005a60 <voltage_monitor_init+0x318>)
 80058ac:	2208      	movs	r2, #8
 80058ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 80058b2:	4b6b      	ldr	r3, [pc, #428]	; (8005a60 <voltage_monitor_init+0x318>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 80058ba:	4b69      	ldr	r3, [pc, #420]	; (8005a60 <voltage_monitor_init+0x318>)
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 80058c2:	4b67      	ldr	r3, [pc, #412]	; (8005a60 <voltage_monitor_init+0x318>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 80058ca:	4b65      	ldr	r3, [pc, #404]	; (8005a60 <voltage_monitor_init+0x318>)
 80058cc:	f640 42b9 	movw	r2, #3257	; 0xcb9
 80058d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 80058d4:	4b62      	ldr	r3, [pc, #392]	; (8005a60 <voltage_monitor_init+0x318>)
 80058d6:	f640 3283 	movw	r2, #2947	; 0xb83
 80058da:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58


	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 80058de:	4b60      	ldr	r3, [pc, #384]	; (8005a60 <voltage_monitor_init+0x318>)
 80058e0:	2209      	movs	r2, #9
 80058e2:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 80058e6:	4b5e      	ldr	r3, [pc, #376]	; (8005a60 <voltage_monitor_init+0x318>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 80058ee:	4b5c      	ldr	r3, [pc, #368]	; (8005a60 <voltage_monitor_init+0x318>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 80058f6:	4b5a      	ldr	r3, [pc, #360]	; (8005a60 <voltage_monitor_init+0x318>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 80058fe:	4b58      	ldr	r3, [pc, #352]	; (8005a60 <voltage_monitor_init+0x318>)
 8005900:	f640 7245 	movw	r2, #3909	; 0xf45
 8005904:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8005908:	4b55      	ldr	r3, [pc, #340]	; (8005a60 <voltage_monitor_init+0x318>)
 800590a:	2200      	movs	r2, #0
 800590c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8005910:	4b53      	ldr	r3, [pc, #332]	; (8005a60 <voltage_monitor_init+0x318>)
 8005912:	220a      	movs	r2, #10
 8005914:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8005918:	4b51      	ldr	r3, [pc, #324]	; (8005a60 <voltage_monitor_init+0x318>)
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 8005920:	4b4f      	ldr	r3, [pc, #316]	; (8005a60 <voltage_monitor_init+0x318>)
 8005922:	2200      	movs	r2, #0
 8005924:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 8005928:	4b4d      	ldr	r3, [pc, #308]	; (8005a60 <voltage_monitor_init+0x318>)
 800592a:	2200      	movs	r2, #0
 800592c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 8005930:	4b4b      	ldr	r3, [pc, #300]	; (8005a60 <voltage_monitor_init+0x318>)
 8005932:	f640 7245 	movw	r2, #3909	; 0xf45
 8005936:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 800593a:	4b49      	ldr	r3, [pc, #292]	; (8005a60 <voltage_monitor_init+0x318>)
 800593c:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8005940:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8005944:	4b46      	ldr	r3, [pc, #280]	; (8005a60 <voltage_monitor_init+0x318>)
 8005946:	220b      	movs	r2, #11
 8005948:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 800594c:	4b44      	ldr	r3, [pc, #272]	; (8005a60 <voltage_monitor_init+0x318>)
 800594e:	2200      	movs	r2, #0
 8005950:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8005954:	4b42      	ldr	r3, [pc, #264]	; (8005a60 <voltage_monitor_init+0x318>)
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 800595c:	4b40      	ldr	r3, [pc, #256]	; (8005a60 <voltage_monitor_init+0x318>)
 800595e:	2200      	movs	r2, #0
 8005960:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 8005964:	4b3e      	ldr	r3, [pc, #248]	; (8005a60 <voltage_monitor_init+0x318>)
 8005966:	f640 72fb 	movw	r2, #4091	; 0xffb
 800596a:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 800596e:	4b3c      	ldr	r3, [pc, #240]	; (8005a60 <voltage_monitor_init+0x318>)
 8005970:	f640 6276 	movw	r2, #3702	; 0xe76
 8005974:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 8005978:	4b39      	ldr	r3, [pc, #228]	; (8005a60 <voltage_monitor_init+0x318>)
 800597a:	220c      	movs	r2, #12
 800597c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 8005980:	4b37      	ldr	r3, [pc, #220]	; (8005a60 <voltage_monitor_init+0x318>)
 8005982:	2200      	movs	r2, #0
 8005984:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 8005988:	4b35      	ldr	r3, [pc, #212]	; (8005a60 <voltage_monitor_init+0x318>)
 800598a:	2200      	movs	r2, #0
 800598c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 8005990:	4b33      	ldr	r3, [pc, #204]	; (8005a60 <voltage_monitor_init+0x318>)
 8005992:	2200      	movs	r2, #0
 8005994:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 8005998:	4b31      	ldr	r3, [pc, #196]	; (8005a60 <voltage_monitor_init+0x318>)
 800599a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800599e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 80059a2:	4b2f      	ldr	r3, [pc, #188]	; (8005a60 <voltage_monitor_init+0x318>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 80059aa:	4b2d      	ldr	r3, [pc, #180]	; (8005a60 <voltage_monitor_init+0x318>)
 80059ac:	220d      	movs	r2, #13
 80059ae:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 80059b2:	4b2b      	ldr	r3, [pc, #172]	; (8005a60 <voltage_monitor_init+0x318>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 80059ba:	4b29      	ldr	r3, [pc, #164]	; (8005a60 <voltage_monitor_init+0x318>)
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 80059c2:	4b27      	ldr	r3, [pc, #156]	; (8005a60 <voltage_monitor_init+0x318>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 80059ca:	4b25      	ldr	r3, [pc, #148]	; (8005a60 <voltage_monitor_init+0x318>)
 80059cc:	f640 7238 	movw	r2, #3896	; 0xf38
 80059d0:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 80059d4:	4b22      	ldr	r3, [pc, #136]	; (8005a60 <voltage_monitor_init+0x318>)
 80059d6:	f640 52c5 	movw	r2, #3525	; 0xdc5
 80059da:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 80059de:	4b20      	ldr	r3, [pc, #128]	; (8005a60 <voltage_monitor_init+0x318>)
 80059e0:	220e      	movs	r2, #14
 80059e2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 80059e6:	4b1e      	ldr	r3, [pc, #120]	; (8005a60 <voltage_monitor_init+0x318>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 80059ee:	4b1c      	ldr	r3, [pc, #112]	; (8005a60 <voltage_monitor_init+0x318>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 80059f6:	4b1a      	ldr	r3, [pc, #104]	; (8005a60 <voltage_monitor_init+0x318>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 80059fe:	4b18      	ldr	r3, [pc, #96]	; (8005a60 <voltage_monitor_init+0x318>)
 8005a00:	f640 7245 	movw	r2, #3909	; 0xf45
 8005a04:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 8005a08:	4b15      	ldr	r3, [pc, #84]	; (8005a60 <voltage_monitor_init+0x318>)
 8005a0a:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8005a0e:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8005a12:	4b13      	ldr	r3, [pc, #76]	; (8005a60 <voltage_monitor_init+0x318>)
 8005a14:	220f      	movs	r2, #15
 8005a16:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8005a1a:	4b11      	ldr	r3, [pc, #68]	; (8005a60 <voltage_monitor_init+0x318>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8005a22:	4b0f      	ldr	r3, [pc, #60]	; (8005a60 <voltage_monitor_init+0x318>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 8005a2a:	4b0d      	ldr	r3, [pc, #52]	; (8005a60 <voltage_monitor_init+0x318>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 8005a32:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <voltage_monitor_init+0x318>)
 8005a34:	f241 0264 	movw	r2, #4196	; 0x1064
 8005a38:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 8005a3c:	4b08      	ldr	r3, [pc, #32]	; (8005a60 <voltage_monitor_init+0x318>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8005a44:	4b06      	ldr	r3, [pc, #24]	; (8005a60 <voltage_monitor_init+0x318>)
 8005a46:	2210      	movs	r2, #16
 8005a48:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 8005a4c:	4b04      	ldr	r3, [pc, #16]	; (8005a60 <voltage_monitor_init+0x318>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 8005a54:	4b02      	ldr	r3, [pc, #8]	; (8005a60 <voltage_monitor_init+0x318>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8005a5c:	e002      	b.n	8005a64 <voltage_monitor_init+0x31c>
 8005a5e:	bf00      	nop
 8005a60:	24001f48 	.word	0x24001f48
	rail_monitor[RAIL_n800v].data = 0;
 8005a64:	4b17      	ldr	r3, [pc, #92]	; (8005ac4 <voltage_monitor_init+0x37c>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 8005a6c:	4b15      	ldr	r3, [pc, #84]	; (8005ac4 <voltage_monitor_init+0x37c>)
 8005a6e:	f640 5208 	movw	r2, #3336	; 0xd08
 8005a72:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 8005a76:	4b13      	ldr	r3, [pc, #76]	; (8005ac4 <voltage_monitor_init+0x37c>)
 8005a78:	f640 32ca 	movw	r2, #3018	; 0xbca
 8005a7c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8005a80:	4b10      	ldr	r3, [pc, #64]	; (8005ac4 <voltage_monitor_init+0x37c>)
 8005a82:	2211      	movs	r2, #17
 8005a84:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 8005a88:	4b0e      	ldr	r3, [pc, #56]	; (8005ac4 <voltage_monitor_init+0x37c>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 8005a90:	4b0c      	ldr	r3, [pc, #48]	; (8005ac4 <voltage_monitor_init+0x37c>)
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 8005a98:	4b0a      	ldr	r3, [pc, #40]	; (8005ac4 <voltage_monitor_init+0x37c>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005aa0:	4b08      	ldr	r3, [pc, #32]	; (8005ac4 <voltage_monitor_init+0x37c>)
 8005aa2:	f242 7210 	movw	r2, #10000	; 0x2710
 8005aa6:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 8005aaa:	4b06      	ldr	r3, [pc, #24]	; (8005ac4 <voltage_monitor_init+0x37c>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	71fb      	strb	r3, [r7, #7]

	return status;
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	24001f48 	.word	0x24001f48

08005ac8 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	4603      	mov	r3, r0
 8005ad0:	460a      	mov	r2, r1
 8005ad2:	71fb      	strb	r3, [r7, #7]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8005adc:	79fa      	ldrb	r2, [r7, #7]
 8005ade:	4909      	ldr	r1, [pc, #36]	; (8005b04 <set_rail_monitor_enable+0x3c>)
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	005b      	lsls	r3, r3, #1
 8005ae8:	440b      	add	r3, r1
 8005aea:	3302      	adds	r3, #2
 8005aec:	79ba      	ldrb	r2, [r7, #6]
 8005aee:	701a      	strb	r2, [r3, #0]
	status = 1;
 8005af0:	2301      	movs	r3, #1
 8005af2:	73fb      	strb	r3, [r7, #15]

	return status;
 8005af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	24001f48 	.word	0x24001f48

08005b08 <set_rail_monitor>:


uint8_t set_rail_monitor() {
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08a      	sub	sp, #40	; 0x28
 8005b0c:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 8005b14:	463b      	mov	r3, r7
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fe faf0 	bl	80040fc <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8005b1c:	f107 0310 	add.w	r3, r7, #16
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7fe fb1b 	bl	800415c <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8005b26:	f107 0308 	add.w	r3, r7, #8
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fe fb68 	bl	8004200 <sample_hk_adc3>
 8005b30:	897a      	ldrh	r2, [r7, #10]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[1], sizeof(uint16_t));
 8005b32:	4b25      	ldr	r3, [pc, #148]	; (8005bc8 <set_rail_monitor+0xc0>)
 8005b34:	809a      	strh	r2, [r3, #4]
 8005b36:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[0], sizeof(uint16_t));
 8005b38:	4b23      	ldr	r3, [pc, #140]	; (8005bc8 <set_rail_monitor+0xc0>)
 8005b3a:	81da      	strh	r2, [r3, #14]
 8005b3c:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 8005b3e:	4b22      	ldr	r3, [pc, #136]	; (8005bc8 <set_rail_monitor+0xc0>)
 8005b40:	831a      	strh	r2, [r3, #24]
 8005b42:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 8005b44:	4b20      	ldr	r3, [pc, #128]	; (8005bc8 <set_rail_monitor+0xc0>)
 8005b46:	845a      	strh	r2, [r3, #34]	; 0x22
 8005b48:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 8005b4a:	4b1f      	ldr	r3, [pc, #124]	; (8005bc8 <set_rail_monitor+0xc0>)
 8005b4c:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005b4e:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 8005b50:	4b1d      	ldr	r3, [pc, #116]	; (8005bc8 <set_rail_monitor+0xc0>)
 8005b52:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b54:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 8005b56:	4b1c      	ldr	r3, [pc, #112]	; (8005bc8 <set_rail_monitor+0xc0>)
 8005b58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8005b5c:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 8005b5e:	4b1a      	ldr	r3, [pc, #104]	; (8005bc8 <set_rail_monitor+0xc0>)
 8005b60:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8005b64:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 8005b66:	4b18      	ldr	r3, [pc, #96]	; (8005bc8 <set_rail_monitor+0xc0>)
 8005b68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005b6c:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 8005b6e:	4b16      	ldr	r3, [pc, #88]	; (8005bc8 <set_rail_monitor+0xc0>)
 8005b70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8005b74:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 8005b76:	4b14      	ldr	r3, [pc, #80]	; (8005bc8 <set_rail_monitor+0xc0>)
 8005b78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005b7c:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 8005b7e:	4b12      	ldr	r3, [pc, #72]	; (8005bc8 <set_rail_monitor+0xc0>)
 8005b80:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005b84:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 8005b86:	4b10      	ldr	r3, [pc, #64]	; (8005bc8 <set_rail_monitor+0xc0>)
 8005b88:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005b8c:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 8005b8e:	4b0e      	ldr	r3, [pc, #56]	; (8005bc8 <set_rail_monitor+0xc0>)
 8005b90:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005b94:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 8005b96:	4b0c      	ldr	r3, [pc, #48]	; (8005bc8 <set_rail_monitor+0xc0>)
 8005b98:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8005b9c:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 8005b9e:	4b0a      	ldr	r3, [pc, #40]	; (8005bc8 <set_rail_monitor+0xc0>)
 8005ba0:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8005ba4:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 8005ba6:	4b08      	ldr	r3, [pc, #32]	; (8005bc8 <set_rail_monitor+0xc0>)
 8005ba8:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005bac:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 8005bae:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <set_rail_monitor+0xc0>)
 8005bb0:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	status = 1;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 8005bba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3728      	adds	r7, #40	; 0x28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	24001f48 	.word	0x24001f48

08005bcc <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8005bcc:	b480      	push	{r7}
 8005bce:	af00      	add	r7, sp, #0
	return rail_monitor;
 8005bd0:	4b02      	ldr	r3, [pc, #8]	; (8005bdc <get_rail_monitor+0x10>)
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	24001f48 	.word	0x24001f48

08005be0 <in_range>:

uint8_t in_range(uint16_t raw, int min, int max) {
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	4603      	mov	r3, r0
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 8005bee:	89fb      	ldrh	r3, [r7, #14]
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	db05      	blt.n	8005c02 <in_range+0x22>
 8005bf6:	89fb      	ldrh	r3, [r7, #14]
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	dc01      	bgt.n	8005c02 <in_range+0x22>
		return 1;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e000      	b.n	8005c04 <in_range+0x24>
	}
	return 0;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <monitor_rails>:


void monitor_rails() {
 8005c10:	b590      	push	{r4, r7, lr}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
	// Iterate through all voltage rails
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8005c16:	2300      	movs	r3, #0
 8005c18:	60fb      	str	r3, [r7, #12]
 8005c1a:	e0bd      	b.n	8005d98 <monitor_rails+0x188>
		if (rail_monitor[i].is_enabled){
 8005c1c:	4966      	ldr	r1, [pc, #408]	; (8005db8 <monitor_rails+0x1a8>)
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	4613      	mov	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	005b      	lsls	r3, r3, #1
 8005c28:	440b      	add	r3, r1
 8005c2a:	3302      	adds	r3, #2
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d056      	beq.n	8005ce0 <monitor_rails+0xd0>
			// If current rail is not in range...
			if (!in_range(rail_monitor[i].data, rail_monitor[i].min_voltage, rail_monitor[i].max_voltage)){
 8005c32:	4961      	ldr	r1, [pc, #388]	; (8005db8 <monitor_rails+0x1a8>)
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	4613      	mov	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	440b      	add	r3, r1
 8005c40:	3304      	adds	r3, #4
 8005c42:	8818      	ldrh	r0, [r3, #0]
 8005c44:	495c      	ldr	r1, [pc, #368]	; (8005db8 <monitor_rails+0x1a8>)
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	440b      	add	r3, r1
 8005c52:	3308      	adds	r3, #8
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	461c      	mov	r4, r3
 8005c58:	4957      	ldr	r1, [pc, #348]	; (8005db8 <monitor_rails+0x1a8>)
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	440b      	add	r3, r1
 8005c66:	3306      	adds	r3, #6
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	4621      	mov	r1, r4
 8005c6e:	f7ff ffb7 	bl	8005be0 <in_range>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f040 808c 	bne.w	8005d92 <monitor_rails+0x182>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 8005c7a:	494f      	ldr	r1, [pc, #316]	; (8005db8 <monitor_rails+0x1a8>)
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	440b      	add	r3, r1
 8005c88:	3301      	adds	r3, #1
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	b2d8      	uxtb	r0, r3
 8005c90:	4949      	ldr	r1, [pc, #292]	; (8005db8 <monitor_rails+0x1a8>)
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	4613      	mov	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	440b      	add	r3, r1
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	701a      	strb	r2, [r3, #0]
				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 8005ca4:	4944      	ldr	r1, [pc, #272]	; (8005db8 <monitor_rails+0x1a8>)
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	440b      	add	r3, r1
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	2b03      	cmp	r3, #3
 8005cb8:	d16b      	bne.n	8005d92 <monitor_rails+0x182>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 8005cba:	493f      	ldr	r1, [pc, #252]	; (8005db8 <monitor_rails+0x1a8>)
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	440b      	add	r3, r1
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 f876 	bl	8005dbc <get_rail_name_error_detail>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	727b      	strb	r3, [r7, #9]
					error.category = EC_power_supply_rail;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	723b      	strb	r3, [r7, #8]
					handle_error(error);
 8005cd8:	68b8      	ldr	r0, [r7, #8]
 8005cda:	f7fc f93f 	bl	8001f5c <handle_error>
 8005cde:	e058      	b.n	8005d92 <monitor_rails+0x182>
			}
		}
		// If the rail monitor isn't enabled...
		else {
			uint16_t tolerance;
			tolerance = rail_monitor[i].max_voltage * 0.1;
 8005ce0:	4935      	ldr	r1, [pc, #212]	; (8005db8 <monitor_rails+0x1a8>)
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	440b      	add	r3, r1
 8005cee:	3306      	adds	r3, #6
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	ee07 3a90 	vmov	s15, r3
 8005cf6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005cfa:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8005db0 <monitor_rails+0x1a0>
 8005cfe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005d02:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005d06:	ee17 3a90 	vmov	r3, s15
 8005d0a:	817b      	strh	r3, [r7, #10]

			// If it isn't within +10% of its max voltage from 0...
			if (!in_range(rail_monitor[i].data, 0, tolerance)) {
 8005d0c:	492a      	ldr	r1, [pc, #168]	; (8005db8 <monitor_rails+0x1a8>)
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4613      	mov	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	005b      	lsls	r3, r3, #1
 8005d18:	440b      	add	r3, r1
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	897a      	ldrh	r2, [r7, #10]
 8005d20:	2100      	movs	r1, #0
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff ff5c 	bl	8005be0 <in_range>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d131      	bne.n	8005d92 <monitor_rails+0x182>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 8005d2e:	4922      	ldr	r1, [pc, #136]	; (8005db8 <monitor_rails+0x1a8>)
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4613      	mov	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	005b      	lsls	r3, r3, #1
 8005d3a:	440b      	add	r3, r1
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	3301      	adds	r3, #1
 8005d42:	b2d8      	uxtb	r0, r3
 8005d44:	491c      	ldr	r1, [pc, #112]	; (8005db8 <monitor_rails+0x1a8>)
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	005b      	lsls	r3, r3, #1
 8005d50:	440b      	add	r3, r1
 8005d52:	3301      	adds	r3, #1
 8005d54:	4602      	mov	r2, r0
 8005d56:	701a      	strb	r2, [r3, #0]
				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 8005d58:	4917      	ldr	r1, [pc, #92]	; (8005db8 <monitor_rails+0x1a8>)
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	440b      	add	r3, r1
 8005d66:	3301      	adds	r3, #1
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d111      	bne.n	8005d92 <monitor_rails+0x182>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 8005d6e:	4912      	ldr	r1, [pc, #72]	; (8005db8 <monitor_rails+0x1a8>)
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	4613      	mov	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	440b      	add	r3, r1
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 f81c 	bl	8005dbc <get_rail_name_error_detail>
 8005d84:	4603      	mov	r3, r0
 8005d86:	717b      	strb	r3, [r7, #5]
					error.category = EC_power_supply_rail;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	713b      	strb	r3, [r7, #4]
					handle_error(error);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f7fc f8e5 	bl	8001f5c <handle_error>
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3301      	adds	r3, #1
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b11      	cmp	r3, #17
 8005d9c:	f77f af3e 	ble.w	8005c1c <monitor_rails+0xc>
				}
			}
		}
	}
}
 8005da0:	bf00      	nop
 8005da2:	bf00      	nop
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd90      	pop	{r4, r7, pc}
 8005daa:	bf00      	nop
 8005dac:	f3af 8000 	nop.w
 8005db0:	9999999a 	.word	0x9999999a
 8005db4:	3fb99999 	.word	0x3fb99999
 8005db8:	24001f48 	.word	0x24001f48

08005dbc <get_rail_name_error_detail>:

ERROR_DETAIL get_rail_name_error_detail(VOLTAGE_RAIL_NAME rail_name) {
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	71fb      	strb	r3, [r7, #7]
	switch (rail_name) {
 8005dc6:	79fb      	ldrb	r3, [r7, #7]
 8005dc8:	2b11      	cmp	r3, #17
 8005dca:	d84b      	bhi.n	8005e64 <get_rail_name_error_detail+0xa8>
 8005dcc:	a201      	add	r2, pc, #4	; (adr r2, 8005dd4 <get_rail_name_error_detail+0x18>)
 8005dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd2:	bf00      	nop
 8005dd4:	08005e1d 	.word	0x08005e1d
 8005dd8:	08005e21 	.word	0x08005e21
 8005ddc:	08005e25 	.word	0x08005e25
 8005de0:	08005e29 	.word	0x08005e29
 8005de4:	08005e2d 	.word	0x08005e2d
 8005de8:	08005e31 	.word	0x08005e31
 8005dec:	08005e35 	.word	0x08005e35
 8005df0:	08005e39 	.word	0x08005e39
 8005df4:	08005e3d 	.word	0x08005e3d
 8005df8:	08005e41 	.word	0x08005e41
 8005dfc:	08005e45 	.word	0x08005e45
 8005e00:	08005e49 	.word	0x08005e49
 8005e04:	08005e4d 	.word	0x08005e4d
 8005e08:	08005e51 	.word	0x08005e51
 8005e0c:	08005e55 	.word	0x08005e55
 8005e10:	08005e59 	.word	0x08005e59
 8005e14:	08005e5d 	.word	0x08005e5d
 8005e18:	08005e61 	.word	0x08005e61
	case RAIL_vsense:
		return ED_vsense;
 8005e1c:	2306      	movs	r3, #6
 8005e1e:	e022      	b.n	8005e66 <get_rail_name_error_detail+0xaa>

	case RAIL_vrefint:
		return ED_vrefint;
 8005e20:	2307      	movs	r3, #7
 8005e22:	e020      	b.n	8005e66 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP1:
		return ED_TEMP1;
 8005e24:	2308      	movs	r3, #8
 8005e26:	e01e      	b.n	8005e66 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP2:
		return ED_TEMP2;
 8005e28:	2309      	movs	r3, #9
 8005e2a:	e01c      	b.n	8005e66 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP3:
		return ED_TEMP3;
 8005e2c:	230a      	movs	r3, #10
 8005e2e:	e01a      	b.n	8005e66 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP4:
		return ED_TEMP4;
 8005e30:	230b      	movs	r3, #11
 8005e32:	e018      	b.n	8005e66 <get_rail_name_error_detail+0xaa>

	case RAIL_busvmon:
		return ED_busvmon;
 8005e34:	230c      	movs	r3, #12
 8005e36:	e016      	b.n	8005e66 <get_rail_name_error_detail+0xaa>

	case RAIL_busimon:
		return ED_busimon;
 8005e38:	230d      	movs	r3, #13
 8005e3a:	e014      	b.n	8005e66 <get_rail_name_error_detail+0xaa>

	case RAIL_2v5:
		return ED_2v5;
 8005e3c:	230e      	movs	r3, #14
 8005e3e:	e012      	b.n	8005e66 <get_rail_name_error_detail+0xaa>

	case RAIL_3v3:
		return ED_3v3;
 8005e40:	230f      	movs	r3, #15
 8005e42:	e010      	b.n	8005e66 <get_rail_name_error_detail+0xaa>

	case RAIL_5v:
		return ED_5v;
 8005e44:	2310      	movs	r3, #16
 8005e46:	e00e      	b.n	8005e66 <get_rail_name_error_detail+0xaa>

	case RAIL_n3v3:
		return ED_n3v3;
 8005e48:	2311      	movs	r3, #17
 8005e4a:	e00c      	b.n	8005e66 <get_rail_name_error_detail+0xaa>

	case RAIL_n5v:
		return ED_n5v;
 8005e4c:	2312      	movs	r3, #18
 8005e4e:	e00a      	b.n	8005e66 <get_rail_name_error_detail+0xaa>

	case RAIL_15v:
		return ED_15v;
 8005e50:	2313      	movs	r3, #19
 8005e52:	e008      	b.n	8005e66 <get_rail_name_error_detail+0xaa>

	case RAIL_5vref:
		return ED_5vref;
 8005e54:	2314      	movs	r3, #20
 8005e56:	e006      	b.n	8005e66 <get_rail_name_error_detail+0xaa>

	case RAIL_n200v:
		return ED_n200v;
 8005e58:	2315      	movs	r3, #21
 8005e5a:	e004      	b.n	8005e66 <get_rail_name_error_detail+0xaa>

	case RAIL_n800v:
		return ED_n800v;
 8005e5c:	2316      	movs	r3, #22
 8005e5e:	e002      	b.n	8005e66 <get_rail_name_error_detail+0xaa>

	case RAIL_TMP1:
		return ED_TMP1;
 8005e60:	2317      	movs	r3, #23
 8005e62:	e000      	b.n	8005e66 <get_rail_name_error_detail+0xaa>

	default:
		return ED_UNDEFINED;
 8005e64:	231a      	movs	r3, #26
	}
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop

08005e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005eac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005e78:	f7fe fe4a 	bl	8004b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005e7c:	480c      	ldr	r0, [pc, #48]	; (8005eb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005e7e:	490d      	ldr	r1, [pc, #52]	; (8005eb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005e80:	4a0d      	ldr	r2, [pc, #52]	; (8005eb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e84:	e002      	b.n	8005e8c <LoopCopyDataInit>

08005e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e8a:	3304      	adds	r3, #4

08005e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e90:	d3f9      	bcc.n	8005e86 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e92:	4a0a      	ldr	r2, [pc, #40]	; (8005ebc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005e94:	4c0a      	ldr	r4, [pc, #40]	; (8005ec0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e98:	e001      	b.n	8005e9e <LoopFillZerobss>

08005e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e9c:	3204      	adds	r2, #4

08005e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ea0:	d3fb      	bcc.n	8005e9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005ea2:	f014 fc01 	bl	801a6a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005ea6:	f7fd fc09 	bl	80036bc <main>
  bx  lr
 8005eaa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005eac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005eb0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005eb4:	24000138 	.word	0x24000138
  ldr r2, =_sidata
 8005eb8:	0801b5d8 	.word	0x0801b5d8
  ldr r2, =_sbss
 8005ebc:	24000140 	.word	0x24000140
  ldr r4, =_ebss
 8005ec0:	2400697c 	.word	0x2400697c

08005ec4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ec4:	e7fe      	b.n	8005ec4 <ADC3_IRQHandler>
	...

08005ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ece:	2003      	movs	r0, #3
 8005ed0:	f001 fd39 	bl	8007946 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005ed4:	f008 fe7c 	bl	800ebd0 <HAL_RCC_GetSysClockFreq>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	4b15      	ldr	r3, [pc, #84]	; (8005f30 <HAL_Init+0x68>)
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	0a1b      	lsrs	r3, r3, #8
 8005ee0:	f003 030f 	and.w	r3, r3, #15
 8005ee4:	4913      	ldr	r1, [pc, #76]	; (8005f34 <HAL_Init+0x6c>)
 8005ee6:	5ccb      	ldrb	r3, [r1, r3]
 8005ee8:	f003 031f 	and.w	r3, r3, #31
 8005eec:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ef2:	4b0f      	ldr	r3, [pc, #60]	; (8005f30 <HAL_Init+0x68>)
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	f003 030f 	and.w	r3, r3, #15
 8005efa:	4a0e      	ldr	r2, [pc, #56]	; (8005f34 <HAL_Init+0x6c>)
 8005efc:	5cd3      	ldrb	r3, [r2, r3]
 8005efe:	f003 031f 	and.w	r3, r3, #31
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	fa22 f303 	lsr.w	r3, r2, r3
 8005f08:	4a0b      	ldr	r2, [pc, #44]	; (8005f38 <HAL_Init+0x70>)
 8005f0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f0c:	4a0b      	ldr	r2, [pc, #44]	; (8005f3c <HAL_Init+0x74>)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005f12:	2005      	movs	r0, #5
 8005f14:	f7fe fbe6 	bl	80046e4 <HAL_InitTick>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e002      	b.n	8005f28 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005f22:	f7fe fbc1 	bl	80046a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	58024400 	.word	0x58024400
 8005f34:	0801b524 	.word	0x0801b524
 8005f38:	240000c4 	.word	0x240000c4
 8005f3c:	240000c0 	.word	0x240000c0

08005f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005f44:	4b06      	ldr	r3, [pc, #24]	; (8005f60 <HAL_IncTick+0x20>)
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	4b06      	ldr	r3, [pc, #24]	; (8005f64 <HAL_IncTick+0x24>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4413      	add	r3, r2
 8005f50:	4a04      	ldr	r2, [pc, #16]	; (8005f64 <HAL_IncTick+0x24>)
 8005f52:	6013      	str	r3, [r2, #0]
}
 8005f54:	bf00      	nop
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	240000cc 	.word	0x240000cc
 8005f64:	24001ffc 	.word	0x24001ffc

08005f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8005f6c:	4b03      	ldr	r3, [pc, #12]	; (8005f7c <HAL_GetTick+0x14>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	24001ffc 	.word	0x24001ffc

08005f80 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005f80:	b480      	push	{r7}
 8005f82:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005f84:	4b03      	ldr	r3, [pc, #12]	; (8005f94 <HAL_GetREVID+0x14>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	0c1b      	lsrs	r3, r3, #16
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr
 8005f94:	5c001000 	.word	0x5c001000

08005f98 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8005fa2:	4b07      	ldr	r3, [pc, #28]	; (8005fc0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	43db      	mvns	r3, r3
 8005faa:	401a      	ands	r2, r3
 8005fac:	4904      	ldr	r1, [pc, #16]	; (8005fc0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	604b      	str	r3, [r1, #4]
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	58000400 	.word	0x58000400

08005fc4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	609a      	str	r2, [r3, #8]
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	431a      	orrs	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	609a      	str	r2, [r3, #8]
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006020:	4618      	mov	r0, r3
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
 8006038:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	3360      	adds	r3, #96	; 0x60
 800603e:	461a      	mov	r2, r3
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	430b      	orrs	r3, r1
 800605a:	431a      	orrs	r2, r3
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8006060:	bf00      	nop
 8006062:	371c      	adds	r7, #28
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f003 031f 	and.w	r3, r3, #31
 8006086:	6879      	ldr	r1, [r7, #4]
 8006088:	fa01 f303 	lsl.w	r3, r1, r3
 800608c:	431a      	orrs	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	611a      	str	r2, [r3, #16]
}
 8006092:	bf00      	nop
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800609e:	b480      	push	{r7}
 80060a0:	b087      	sub	sp, #28
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	3360      	adds	r3, #96	; 0x60
 80060ae:	461a      	mov	r2, r3
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	431a      	orrs	r2, r3
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	601a      	str	r2, [r3, #0]
  }
}
 80060c8:	bf00      	nop
 80060ca:	371c      	adds	r7, #28
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80060e8:	2301      	movs	r3, #1
 80060ea:	e000      	b.n	80060ee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b087      	sub	sp, #28
 80060fe:	af00      	add	r7, sp, #0
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	60b9      	str	r1, [r7, #8]
 8006104:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	3330      	adds	r3, #48	; 0x30
 800610a:	461a      	mov	r2, r3
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	0a1b      	lsrs	r3, r3, #8
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	f003 030c 	and.w	r3, r3, #12
 8006116:	4413      	add	r3, r2
 8006118:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f003 031f 	and.w	r3, r3, #31
 8006124:	211f      	movs	r1, #31
 8006126:	fa01 f303 	lsl.w	r3, r1, r3
 800612a:	43db      	mvns	r3, r3
 800612c:	401a      	ands	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	0e9b      	lsrs	r3, r3, #26
 8006132:	f003 011f 	and.w	r1, r3, #31
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f003 031f 	and.w	r3, r3, #31
 800613c:	fa01 f303 	lsl.w	r3, r1, r3
 8006140:	431a      	orrs	r2, r3
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006146:	bf00      	nop
 8006148:	371c      	adds	r7, #28
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8006152:	b480      	push	{r7}
 8006154:	b083      	sub	sp, #12
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
 800615a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f023 0203 	bic.w	r2, r3, #3
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	431a      	orrs	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	60da      	str	r2, [r3, #12]
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3314      	adds	r3, #20
 8006188:	461a      	mov	r2, r3
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	0e5b      	lsrs	r3, r3, #25
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	4413      	add	r3, r2
 8006196:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	0d1b      	lsrs	r3, r3, #20
 80061a0:	f003 031f 	and.w	r3, r3, #31
 80061a4:	2107      	movs	r1, #7
 80061a6:	fa01 f303 	lsl.w	r3, r1, r3
 80061aa:	43db      	mvns	r3, r3
 80061ac:	401a      	ands	r2, r3
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	0d1b      	lsrs	r3, r3, #20
 80061b2:	f003 031f 	and.w	r3, r3, #31
 80061b6:	6879      	ldr	r1, [r7, #4]
 80061b8:	fa01 f303 	lsl.w	r3, r1, r3
 80061bc:	431a      	orrs	r2, r3
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80061c2:	bf00      	nop
 80061c4:	371c      	adds	r7, #28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
	...

080061d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061e8:	43db      	mvns	r3, r3
 80061ea:	401a      	ands	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f003 0318 	and.w	r3, r3, #24
 80061f2:	4908      	ldr	r1, [pc, #32]	; (8006214 <LL_ADC_SetChannelSingleDiff+0x44>)
 80061f4:	40d9      	lsrs	r1, r3
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	400b      	ands	r3, r1
 80061fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061fe:	431a      	orrs	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8006206:	bf00      	nop
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	000fffff 	.word	0x000fffff

08006218 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f003 031f 	and.w	r3, r3, #31
}
 8006228:	4618      	mov	r0, r3
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	4b04      	ldr	r3, [pc, #16]	; (8006254 <LL_ADC_DisableDeepPowerDown+0x20>)
 8006242:	4013      	ands	r3, r2
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	6093      	str	r3, [r2, #8]
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	5fffffc0 	.word	0x5fffffc0

08006258 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006268:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800626c:	d101      	bne.n	8006272 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800626e:	2301      	movs	r3, #1
 8006270:	e000      	b.n	8006274 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	4b05      	ldr	r3, [pc, #20]	; (80062a4 <LL_ADC_EnableInternalRegulator+0x24>)
 800628e:	4013      	ands	r3, r2
 8006290:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	6fffffc0 	.word	0x6fffffc0

080062a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062bc:	d101      	bne.n	80062c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80062be:	2301      	movs	r3, #1
 80062c0:	e000      	b.n	80062c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <LL_ADC_Enable+0x24>)
 80062de:	4013      	ands	r3, r2
 80062e0:	f043 0201 	orr.w	r2, r3, #1
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	7fffffc0 	.word	0x7fffffc0

080062f8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	4b05      	ldr	r3, [pc, #20]	; (800631c <LL_ADC_Disable+0x24>)
 8006306:	4013      	ands	r3, r2
 8006308:	f043 0202 	orr.w	r2, r3, #2
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	7fffffc0 	.word	0x7fffffc0

08006320 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	2b01      	cmp	r3, #1
 8006332:	d101      	bne.n	8006338 <LL_ADC_IsEnabled+0x18>
 8006334:	2301      	movs	r3, #1
 8006336:	e000      	b.n	800633a <LL_ADC_IsEnabled+0x1a>
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006346:	b480      	push	{r7}
 8006348:	b083      	sub	sp, #12
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f003 0302 	and.w	r3, r3, #2
 8006356:	2b02      	cmp	r3, #2
 8006358:	d101      	bne.n	800635e <LL_ADC_IsDisableOngoing+0x18>
 800635a:	2301      	movs	r3, #1
 800635c:	e000      	b.n	8006360 <LL_ADC_IsDisableOngoing+0x1a>
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	4b05      	ldr	r3, [pc, #20]	; (8006390 <LL_ADC_REG_StartConversion+0x24>)
 800637a:	4013      	ands	r3, r2
 800637c:	f043 0204 	orr.w	r2, r3, #4
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	7fffffc0 	.word	0x7fffffc0

08006394 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f003 0304 	and.w	r3, r3, #4
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d101      	bne.n	80063ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80063a8:	2301      	movs	r3, #1
 80063aa:	e000      	b.n	80063ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b083      	sub	sp, #12
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f003 0308 	and.w	r3, r3, #8
 80063ca:	2b08      	cmp	r3, #8
 80063cc:	d101      	bne.n	80063d2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e000      	b.n	80063d4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80063e0:	b590      	push	{r4, r7, lr}
 80063e2:	b089      	sub	sp, #36	; 0x24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80063ec:	2300      	movs	r3, #0
 80063ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e18f      	b.n	800671a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006404:	2b00      	cmp	r3, #0
 8006406:	d109      	bne.n	800641c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7fa fa9f 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4618      	mov	r0, r3
 8006422:	f7ff ff19 	bl	8006258 <LL_ADC_IsDeepPowerDownEnabled>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d004      	beq.n	8006436 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4618      	mov	r0, r3
 8006432:	f7ff feff 	bl	8006234 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4618      	mov	r0, r3
 800643c:	f7ff ff34 	bl	80062a8 <LL_ADC_IsInternalRegulatorEnabled>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d114      	bne.n	8006470 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4618      	mov	r0, r3
 800644c:	f7ff ff18 	bl	8006280 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006450:	4b87      	ldr	r3, [pc, #540]	; (8006670 <HAL_ADC_Init+0x290>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	099b      	lsrs	r3, r3, #6
 8006456:	4a87      	ldr	r2, [pc, #540]	; (8006674 <HAL_ADC_Init+0x294>)
 8006458:	fba2 2303 	umull	r2, r3, r2, r3
 800645c:	099b      	lsrs	r3, r3, #6
 800645e:	3301      	adds	r3, #1
 8006460:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006462:	e002      	b.n	800646a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	3b01      	subs	r3, #1
 8006468:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1f9      	bne.n	8006464 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4618      	mov	r0, r3
 8006476:	f7ff ff17 	bl	80062a8 <LL_ADC_IsInternalRegulatorEnabled>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10d      	bne.n	800649c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006484:	f043 0210 	orr.w	r2, r3, #16
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006490:	f043 0201 	orr.w	r2, r3, #1
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7ff ff77 	bl	8006394 <LL_ADC_REG_IsConversionOngoing>
 80064a6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ac:	f003 0310 	and.w	r3, r3, #16
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f040 8129 	bne.w	8006708 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f040 8125 	bne.w	8006708 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80064c6:	f043 0202 	orr.w	r2, r3, #2
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7ff ff24 	bl	8006320 <LL_ADC_IsEnabled>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d136      	bne.n	800654c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a65      	ldr	r2, [pc, #404]	; (8006678 <HAL_ADC_Init+0x298>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d004      	beq.n	80064f2 <HAL_ADC_Init+0x112>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a63      	ldr	r2, [pc, #396]	; (800667c <HAL_ADC_Init+0x29c>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d10e      	bne.n	8006510 <HAL_ADC_Init+0x130>
 80064f2:	4861      	ldr	r0, [pc, #388]	; (8006678 <HAL_ADC_Init+0x298>)
 80064f4:	f7ff ff14 	bl	8006320 <LL_ADC_IsEnabled>
 80064f8:	4604      	mov	r4, r0
 80064fa:	4860      	ldr	r0, [pc, #384]	; (800667c <HAL_ADC_Init+0x29c>)
 80064fc:	f7ff ff10 	bl	8006320 <LL_ADC_IsEnabled>
 8006500:	4603      	mov	r3, r0
 8006502:	4323      	orrs	r3, r4
 8006504:	2b00      	cmp	r3, #0
 8006506:	bf0c      	ite	eq
 8006508:	2301      	moveq	r3, #1
 800650a:	2300      	movne	r3, #0
 800650c:	b2db      	uxtb	r3, r3
 800650e:	e008      	b.n	8006522 <HAL_ADC_Init+0x142>
 8006510:	485b      	ldr	r0, [pc, #364]	; (8006680 <HAL_ADC_Init+0x2a0>)
 8006512:	f7ff ff05 	bl	8006320 <LL_ADC_IsEnabled>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	bf0c      	ite	eq
 800651c:	2301      	moveq	r3, #1
 800651e:	2300      	movne	r3, #0
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d012      	beq.n	800654c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a53      	ldr	r2, [pc, #332]	; (8006678 <HAL_ADC_Init+0x298>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d004      	beq.n	800653a <HAL_ADC_Init+0x15a>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a51      	ldr	r2, [pc, #324]	; (800667c <HAL_ADC_Init+0x29c>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d101      	bne.n	800653e <HAL_ADC_Init+0x15e>
 800653a:	4a52      	ldr	r2, [pc, #328]	; (8006684 <HAL_ADC_Init+0x2a4>)
 800653c:	e000      	b.n	8006540 <HAL_ADC_Init+0x160>
 800653e:	4a52      	ldr	r2, [pc, #328]	; (8006688 <HAL_ADC_Init+0x2a8>)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	4619      	mov	r1, r3
 8006546:	4610      	mov	r0, r2
 8006548:	f7ff fd3c 	bl	8005fc4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800654c:	f7ff fd18 	bl	8005f80 <HAL_GetREVID>
 8006550:	4603      	mov	r3, r0
 8006552:	f241 0203 	movw	r2, #4099	; 0x1003
 8006556:	4293      	cmp	r3, r2
 8006558:	d914      	bls.n	8006584 <HAL_ADC_Init+0x1a4>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	2b10      	cmp	r3, #16
 8006560:	d110      	bne.n	8006584 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	7d5b      	ldrb	r3, [r3, #21]
 8006566:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800656c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8006572:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	7f1b      	ldrb	r3, [r3, #28]
 8006578:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800657a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800657c:	f043 030c 	orr.w	r3, r3, #12
 8006580:	61bb      	str	r3, [r7, #24]
 8006582:	e00d      	b.n	80065a0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	7d5b      	ldrb	r3, [r3, #21]
 8006588:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800658e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8006594:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	7f1b      	ldrb	r3, [r3, #28]
 800659a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800659c:	4313      	orrs	r3, r2
 800659e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	7f1b      	ldrb	r3, [r3, #28]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d106      	bne.n	80065b6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	3b01      	subs	r3, #1
 80065ae:	045b      	lsls	r3, r3, #17
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d009      	beq.n	80065d2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ca:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80065cc:	69ba      	ldr	r2, [r7, #24]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68da      	ldr	r2, [r3, #12]
 80065d8:	4b2c      	ldr	r3, [pc, #176]	; (800668c <HAL_ADC_Init+0x2ac>)
 80065da:	4013      	ands	r3, r2
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	6812      	ldr	r2, [r2, #0]
 80065e0:	69b9      	ldr	r1, [r7, #24]
 80065e2:	430b      	orrs	r3, r1
 80065e4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7ff fed2 	bl	8006394 <LL_ADC_REG_IsConversionOngoing>
 80065f0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7ff fedf 	bl	80063ba <LL_ADC_INJ_IsConversionOngoing>
 80065fc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d15f      	bne.n	80066c4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d15c      	bne.n	80066c4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	7d1b      	ldrb	r3, [r3, #20]
 800660e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8006614:	4313      	orrs	r3, r2
 8006616:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68da      	ldr	r2, [r3, #12]
 800661e:	4b1c      	ldr	r3, [pc, #112]	; (8006690 <HAL_ADC_Init+0x2b0>)
 8006620:	4013      	ands	r3, r2
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	6812      	ldr	r2, [r2, #0]
 8006626:	69b9      	ldr	r1, [r7, #24]
 8006628:	430b      	orrs	r3, r1
 800662a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006632:	2b01      	cmp	r3, #1
 8006634:	d130      	bne.n	8006698 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	691a      	ldr	r2, [r3, #16]
 8006642:	4b14      	ldr	r3, [pc, #80]	; (8006694 <HAL_ADC_Init+0x2b4>)
 8006644:	4013      	ands	r3, r2
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800664a:	3a01      	subs	r2, #1
 800664c:	0411      	lsls	r1, r2, #16
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006652:	4311      	orrs	r1, r2
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006658:	4311      	orrs	r1, r2
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800665e:	430a      	orrs	r2, r1
 8006660:	431a      	orrs	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f042 0201 	orr.w	r2, r2, #1
 800666a:	611a      	str	r2, [r3, #16]
 800666c:	e01c      	b.n	80066a8 <HAL_ADC_Init+0x2c8>
 800666e:	bf00      	nop
 8006670:	240000c0 	.word	0x240000c0
 8006674:	053e2d63 	.word	0x053e2d63
 8006678:	40022000 	.word	0x40022000
 800667c:	40022100 	.word	0x40022100
 8006680:	58026000 	.word	0x58026000
 8006684:	40022300 	.word	0x40022300
 8006688:	58026300 	.word	0x58026300
 800668c:	fff0c003 	.word	0xfff0c003
 8006690:	ffffbffc 	.word	0xffffbffc
 8006694:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	691a      	ldr	r2, [r3, #16]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f022 0201 	bic.w	r2, r2, #1
 80066a6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fdec 	bl	800729c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d10c      	bne.n	80066e6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d2:	f023 010f 	bic.w	r1, r3, #15
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	1e5a      	subs	r2, r3, #1
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	631a      	str	r2, [r3, #48]	; 0x30
 80066e4:	e007      	b.n	80066f6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 020f 	bic.w	r2, r2, #15
 80066f4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fa:	f023 0303 	bic.w	r3, r3, #3
 80066fe:	f043 0201 	orr.w	r2, r3, #1
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	655a      	str	r2, [r3, #84]	; 0x54
 8006706:	e007      	b.n	8006718 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800670c:	f043 0210 	orr.w	r2, r3, #16
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006718:	7ffb      	ldrb	r3, [r7, #31]
}
 800671a:	4618      	mov	r0, r3
 800671c:	3724      	adds	r7, #36	; 0x24
 800671e:	46bd      	mov	sp, r7
 8006720:	bd90      	pop	{r4, r7, pc}
 8006722:	bf00      	nop

08006724 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a55      	ldr	r2, [pc, #340]	; (800688c <HAL_ADC_Start_DMA+0x168>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d004      	beq.n	8006744 <HAL_ADC_Start_DMA+0x20>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a54      	ldr	r2, [pc, #336]	; (8006890 <HAL_ADC_Start_DMA+0x16c>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d101      	bne.n	8006748 <HAL_ADC_Start_DMA+0x24>
 8006744:	4b53      	ldr	r3, [pc, #332]	; (8006894 <HAL_ADC_Start_DMA+0x170>)
 8006746:	e000      	b.n	800674a <HAL_ADC_Start_DMA+0x26>
 8006748:	4b53      	ldr	r3, [pc, #332]	; (8006898 <HAL_ADC_Start_DMA+0x174>)
 800674a:	4618      	mov	r0, r3
 800674c:	f7ff fd64 	bl	8006218 <LL_ADC_GetMultimode>
 8006750:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4618      	mov	r0, r3
 8006758:	f7ff fe1c 	bl	8006394 <LL_ADC_REG_IsConversionOngoing>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	f040 808c 	bne.w	800687c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800676a:	2b01      	cmp	r3, #1
 800676c:	d101      	bne.n	8006772 <HAL_ADC_Start_DMA+0x4e>
 800676e:	2302      	movs	r3, #2
 8006770:	e087      	b.n	8006882 <HAL_ADC_Start_DMA+0x15e>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d005      	beq.n	800678c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	2b05      	cmp	r3, #5
 8006784:	d002      	beq.n	800678c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	2b09      	cmp	r3, #9
 800678a:	d170      	bne.n	800686e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f000 fc07 	bl	8006fa0 <ADC_Enable>
 8006792:	4603      	mov	r3, r0
 8006794:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006796:	7dfb      	ldrb	r3, [r7, #23]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d163      	bne.n	8006864 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067a0:	4b3e      	ldr	r3, [pc, #248]	; (800689c <HAL_ADC_Start_DMA+0x178>)
 80067a2:	4013      	ands	r3, r2
 80067a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a37      	ldr	r2, [pc, #220]	; (8006890 <HAL_ADC_Start_DMA+0x16c>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d002      	beq.n	80067bc <HAL_ADC_Start_DMA+0x98>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	e000      	b.n	80067be <HAL_ADC_Start_DMA+0x9a>
 80067bc:	4b33      	ldr	r3, [pc, #204]	; (800688c <HAL_ADC_Start_DMA+0x168>)
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	6812      	ldr	r2, [r2, #0]
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d002      	beq.n	80067cc <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d105      	bne.n	80067d8 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d006      	beq.n	80067f2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e8:	f023 0206 	bic.w	r2, r3, #6
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	659a      	str	r2, [r3, #88]	; 0x58
 80067f0:	e002      	b.n	80067f8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067fc:	4a28      	ldr	r2, [pc, #160]	; (80068a0 <HAL_ADC_Start_DMA+0x17c>)
 80067fe:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006804:	4a27      	ldr	r2, [pc, #156]	; (80068a4 <HAL_ADC_Start_DMA+0x180>)
 8006806:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800680c:	4a26      	ldr	r2, [pc, #152]	; (80068a8 <HAL_ADC_Start_DMA+0x184>)
 800680e:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	221c      	movs	r2, #28
 8006816:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f042 0210 	orr.w	r2, r2, #16
 800682e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006838:	4619      	mov	r1, r3
 800683a:	4610      	mov	r0, r2
 800683c:	f7ff fc89 	bl	8006152 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3340      	adds	r3, #64	; 0x40
 800684a:	4619      	mov	r1, r3
 800684c:	68ba      	ldr	r2, [r7, #8]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f002 f80e 	bl	8008870 <HAL_DMA_Start_IT>
 8006854:	4603      	mov	r3, r0
 8006856:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4618      	mov	r0, r3
 800685e:	f7ff fd85 	bl	800636c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006862:	e00d      	b.n	8006880 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800686c:	e008      	b.n	8006880 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800687a:	e001      	b.n	8006880 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800687c:	2302      	movs	r3, #2
 800687e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006880:	7dfb      	ldrb	r3, [r7, #23]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	40022000 	.word	0x40022000
 8006890:	40022100 	.word	0x40022100
 8006894:	40022300 	.word	0x40022300
 8006898:	58026300 	.word	0x58026300
 800689c:	fffff0fe 	.word	0xfffff0fe
 80068a0:	08007173 	.word	0x08007173
 80068a4:	0800724b 	.word	0x0800724b
 80068a8:	08007267 	.word	0x08007267

080068ac <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80068e8:	b590      	push	{r4, r7, lr}
 80068ea:	b0a1      	sub	sp, #132	; 0x84
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068f2:	2300      	movs	r3, #0
 80068f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80068f8:	2300      	movs	r3, #0
 80068fa:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	4a65      	ldr	r2, [pc, #404]	; (8006a98 <HAL_ADC_ConfigChannel+0x1b0>)
 8006902:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800690a:	2b01      	cmp	r3, #1
 800690c:	d101      	bne.n	8006912 <HAL_ADC_ConfigChannel+0x2a>
 800690e:	2302      	movs	r3, #2
 8006910:	e32e      	b.n	8006f70 <HAL_ADC_ConfigChannel+0x688>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4618      	mov	r0, r3
 8006920:	f7ff fd38 	bl	8006394 <LL_ADC_REG_IsConversionOngoing>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	f040 8313 	bne.w	8006f52 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	db2c      	blt.n	800698e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800693c:	2b00      	cmp	r3, #0
 800693e:	d108      	bne.n	8006952 <HAL_ADC_ConfigChannel+0x6a>
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	0e9b      	lsrs	r3, r3, #26
 8006946:	f003 031f 	and.w	r3, r3, #31
 800694a:	2201      	movs	r2, #1
 800694c:	fa02 f303 	lsl.w	r3, r2, r3
 8006950:	e016      	b.n	8006980 <HAL_ADC_ConfigChannel+0x98>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800695a:	fa93 f3a3 	rbit	r3, r3
 800695e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006960:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006962:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006964:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800696a:	2320      	movs	r3, #32
 800696c:	e003      	b.n	8006976 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800696e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006970:	fab3 f383 	clz	r3, r3
 8006974:	b2db      	uxtb	r3, r3
 8006976:	f003 031f 	and.w	r3, r3, #31
 800697a:	2201      	movs	r2, #1
 800697c:	fa02 f303 	lsl.w	r3, r2, r3
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	6812      	ldr	r2, [r2, #0]
 8006984:	69d1      	ldr	r1, [r2, #28]
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	6812      	ldr	r2, [r2, #0]
 800698a:	430b      	orrs	r3, r1
 800698c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6818      	ldr	r0, [r3, #0]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	6859      	ldr	r1, [r3, #4]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	f7ff fbad 	bl	80060fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7ff fcf5 	bl	8006394 <LL_ADC_REG_IsConversionOngoing>
 80069aa:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7ff fd02 	bl	80063ba <LL_ADC_INJ_IsConversionOngoing>
 80069b6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80069b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f040 80b8 	bne.w	8006b30 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80069c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f040 80b4 	bne.w	8006b30 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6818      	ldr	r0, [r3, #0]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	6819      	ldr	r1, [r3, #0]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	461a      	mov	r2, r3
 80069d6:	f7ff fbcf 	bl	8006178 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80069da:	4b30      	ldr	r3, [pc, #192]	; (8006a9c <HAL_ADC_ConfigChannel+0x1b4>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80069e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069e6:	d10b      	bne.n	8006a00 <HAL_ADC_ConfigChannel+0x118>
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	695a      	ldr	r2, [r3, #20]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	089b      	lsrs	r3, r3, #2
 80069f4:	f003 0307 	and.w	r3, r3, #7
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	fa02 f303 	lsl.w	r3, r2, r3
 80069fe:	e01d      	b.n	8006a3c <HAL_ADC_ConfigChannel+0x154>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f003 0310 	and.w	r3, r3, #16
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10b      	bne.n	8006a26 <HAL_ADC_ConfigChannel+0x13e>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	695a      	ldr	r2, [r3, #20]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	089b      	lsrs	r3, r3, #2
 8006a1a:	f003 0307 	and.w	r3, r3, #7
 8006a1e:	005b      	lsls	r3, r3, #1
 8006a20:	fa02 f303 	lsl.w	r3, r2, r3
 8006a24:	e00a      	b.n	8006a3c <HAL_ADC_ConfigChannel+0x154>
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	695a      	ldr	r2, [r3, #20]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	089b      	lsrs	r3, r3, #2
 8006a32:	f003 0304 	and.w	r3, r3, #4
 8006a36:	005b      	lsls	r3, r3, #1
 8006a38:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	2b04      	cmp	r3, #4
 8006a44:	d02c      	beq.n	8006aa0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6818      	ldr	r0, [r3, #0]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	6919      	ldr	r1, [r3, #16]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a54:	f7ff faea 	bl	800602c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6818      	ldr	r0, [r3, #0]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	6919      	ldr	r1, [r3, #16]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	7e5b      	ldrb	r3, [r3, #25]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d102      	bne.n	8006a6e <HAL_ADC_ConfigChannel+0x186>
 8006a68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006a6c:	e000      	b.n	8006a70 <HAL_ADC_ConfigChannel+0x188>
 8006a6e:	2300      	movs	r3, #0
 8006a70:	461a      	mov	r2, r3
 8006a72:	f7ff fb14 	bl	800609e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6818      	ldr	r0, [r3, #0]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	6919      	ldr	r1, [r3, #16]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	7e1b      	ldrb	r3, [r3, #24]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d102      	bne.n	8006a8c <HAL_ADC_ConfigChannel+0x1a4>
 8006a86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a8a:	e000      	b.n	8006a8e <HAL_ADC_ConfigChannel+0x1a6>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	461a      	mov	r2, r3
 8006a90:	f7ff faec 	bl	800606c <LL_ADC_SetDataRightShift>
 8006a94:	e04c      	b.n	8006b30 <HAL_ADC_ConfigChannel+0x248>
 8006a96:	bf00      	nop
 8006a98:	47ff0000 	.word	0x47ff0000
 8006a9c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aa6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	069b      	lsls	r3, r3, #26
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d107      	bne.n	8006ac4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006ac2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	069b      	lsls	r3, r3, #26
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d107      	bne.n	8006ae8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006ae6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006aee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	069b      	lsls	r3, r3, #26
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d107      	bne.n	8006b0c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006b0a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	069b      	lsls	r3, r3, #26
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d107      	bne.n	8006b30 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006b2e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7ff fbf3 	bl	8006320 <LL_ADC_IsEnabled>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f040 8211 	bne.w	8006f64 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6818      	ldr	r0, [r3, #0]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	6819      	ldr	r1, [r3, #0]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	f7ff fb3e 	bl	80061d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	4aa1      	ldr	r2, [pc, #644]	; (8006de0 <HAL_ADC_ConfigChannel+0x4f8>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	f040 812e 	bne.w	8006dbc <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10b      	bne.n	8006b88 <HAL_ADC_ConfigChannel+0x2a0>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	0e9b      	lsrs	r3, r3, #26
 8006b76:	3301      	adds	r3, #1
 8006b78:	f003 031f 	and.w	r3, r3, #31
 8006b7c:	2b09      	cmp	r3, #9
 8006b7e:	bf94      	ite	ls
 8006b80:	2301      	movls	r3, #1
 8006b82:	2300      	movhi	r3, #0
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	e019      	b.n	8006bbc <HAL_ADC_ConfigChannel+0x2d4>
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b90:	fa93 f3a3 	rbit	r3, r3
 8006b94:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b98:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006b9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8006ba0:	2320      	movs	r3, #32
 8006ba2:	e003      	b.n	8006bac <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8006ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ba6:	fab3 f383 	clz	r3, r3
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	3301      	adds	r3, #1
 8006bae:	f003 031f 	and.w	r3, r3, #31
 8006bb2:	2b09      	cmp	r3, #9
 8006bb4:	bf94      	ite	ls
 8006bb6:	2301      	movls	r3, #1
 8006bb8:	2300      	movhi	r3, #0
 8006bba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d079      	beq.n	8006cb4 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d107      	bne.n	8006bdc <HAL_ADC_ConfigChannel+0x2f4>
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	0e9b      	lsrs	r3, r3, #26
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	069b      	lsls	r3, r3, #26
 8006bd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006bda:	e015      	b.n	8006c08 <HAL_ADC_ConfigChannel+0x320>
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006be4:	fa93 f3a3 	rbit	r3, r3
 8006be8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bec:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8006bf4:	2320      	movs	r3, #32
 8006bf6:	e003      	b.n	8006c00 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8006bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bfa:	fab3 f383 	clz	r3, r3
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	3301      	adds	r3, #1
 8006c02:	069b      	lsls	r3, r3, #26
 8006c04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d109      	bne.n	8006c28 <HAL_ADC_ConfigChannel+0x340>
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	0e9b      	lsrs	r3, r3, #26
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	f003 031f 	and.w	r3, r3, #31
 8006c20:	2101      	movs	r1, #1
 8006c22:	fa01 f303 	lsl.w	r3, r1, r3
 8006c26:	e017      	b.n	8006c58 <HAL_ADC_ConfigChannel+0x370>
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c30:	fa93 f3a3 	rbit	r3, r3
 8006c34:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c38:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8006c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8006c40:	2320      	movs	r3, #32
 8006c42:	e003      	b.n	8006c4c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8006c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c46:	fab3 f383 	clz	r3, r3
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	f003 031f 	and.w	r3, r3, #31
 8006c52:	2101      	movs	r1, #1
 8006c54:	fa01 f303 	lsl.w	r3, r1, r3
 8006c58:	ea42 0103 	orr.w	r1, r2, r3
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10a      	bne.n	8006c7e <HAL_ADC_ConfigChannel+0x396>
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	0e9b      	lsrs	r3, r3, #26
 8006c6e:	3301      	adds	r3, #1
 8006c70:	f003 021f 	and.w	r2, r3, #31
 8006c74:	4613      	mov	r3, r2
 8006c76:	005b      	lsls	r3, r3, #1
 8006c78:	4413      	add	r3, r2
 8006c7a:	051b      	lsls	r3, r3, #20
 8006c7c:	e018      	b.n	8006cb0 <HAL_ADC_ConfigChannel+0x3c8>
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c86:	fa93 f3a3 	rbit	r3, r3
 8006c8a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8006c96:	2320      	movs	r3, #32
 8006c98:	e003      	b.n	8006ca2 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8006c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9c:	fab3 f383 	clz	r3, r3
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	f003 021f 	and.w	r2, r3, #31
 8006ca8:	4613      	mov	r3, r2
 8006caa:	005b      	lsls	r3, r3, #1
 8006cac:	4413      	add	r3, r2
 8006cae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006cb0:	430b      	orrs	r3, r1
 8006cb2:	e07e      	b.n	8006db2 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d107      	bne.n	8006cd0 <HAL_ADC_ConfigChannel+0x3e8>
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	0e9b      	lsrs	r3, r3, #26
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	069b      	lsls	r3, r3, #26
 8006cca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006cce:	e015      	b.n	8006cfc <HAL_ADC_ConfigChannel+0x414>
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd8:	fa93 f3a3 	rbit	r3, r3
 8006cdc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8006ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d101      	bne.n	8006cec <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8006ce8:	2320      	movs	r3, #32
 8006cea:	e003      	b.n	8006cf4 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8006cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cee:	fab3 f383 	clz	r3, r3
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	069b      	lsls	r3, r3, #26
 8006cf8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d109      	bne.n	8006d1c <HAL_ADC_ConfigChannel+0x434>
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	0e9b      	lsrs	r3, r3, #26
 8006d0e:	3301      	adds	r3, #1
 8006d10:	f003 031f 	and.w	r3, r3, #31
 8006d14:	2101      	movs	r1, #1
 8006d16:	fa01 f303 	lsl.w	r3, r1, r3
 8006d1a:	e017      	b.n	8006d4c <HAL_ADC_ConfigChannel+0x464>
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	fa93 f3a3 	rbit	r3, r3
 8006d28:	61bb      	str	r3, [r7, #24]
  return result;
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8006d34:	2320      	movs	r3, #32
 8006d36:	e003      	b.n	8006d40 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8006d38:	6a3b      	ldr	r3, [r7, #32]
 8006d3a:	fab3 f383 	clz	r3, r3
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	3301      	adds	r3, #1
 8006d42:	f003 031f 	and.w	r3, r3, #31
 8006d46:	2101      	movs	r1, #1
 8006d48:	fa01 f303 	lsl.w	r3, r1, r3
 8006d4c:	ea42 0103 	orr.w	r1, r2, r3
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10d      	bne.n	8006d78 <HAL_ADC_ConfigChannel+0x490>
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	0e9b      	lsrs	r3, r3, #26
 8006d62:	3301      	adds	r3, #1
 8006d64:	f003 021f 	and.w	r2, r3, #31
 8006d68:	4613      	mov	r3, r2
 8006d6a:	005b      	lsls	r3, r3, #1
 8006d6c:	4413      	add	r3, r2
 8006d6e:	3b1e      	subs	r3, #30
 8006d70:	051b      	lsls	r3, r3, #20
 8006d72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006d76:	e01b      	b.n	8006db0 <HAL_ADC_ConfigChannel+0x4c8>
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	fa93 f3a3 	rbit	r3, r3
 8006d84:	60fb      	str	r3, [r7, #12]
  return result;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8006d90:	2320      	movs	r3, #32
 8006d92:	e003      	b.n	8006d9c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	fab3 f383 	clz	r3, r3
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	f003 021f 	and.w	r2, r3, #31
 8006da2:	4613      	mov	r3, r2
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	4413      	add	r3, r2
 8006da8:	3b1e      	subs	r3, #30
 8006daa:	051b      	lsls	r3, r3, #20
 8006dac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006db0:	430b      	orrs	r3, r1
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	6892      	ldr	r2, [r2, #8]
 8006db6:	4619      	mov	r1, r3
 8006db8:	f7ff f9de 	bl	8006178 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f280 80cf 	bge.w	8006f64 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a06      	ldr	r2, [pc, #24]	; (8006de4 <HAL_ADC_ConfigChannel+0x4fc>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d004      	beq.n	8006dda <HAL_ADC_ConfigChannel+0x4f2>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a04      	ldr	r2, [pc, #16]	; (8006de8 <HAL_ADC_ConfigChannel+0x500>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d10a      	bne.n	8006df0 <HAL_ADC_ConfigChannel+0x508>
 8006dda:	4b04      	ldr	r3, [pc, #16]	; (8006dec <HAL_ADC_ConfigChannel+0x504>)
 8006ddc:	e009      	b.n	8006df2 <HAL_ADC_ConfigChannel+0x50a>
 8006dde:	bf00      	nop
 8006de0:	47ff0000 	.word	0x47ff0000
 8006de4:	40022000 	.word	0x40022000
 8006de8:	40022100 	.word	0x40022100
 8006dec:	40022300 	.word	0x40022300
 8006df0:	4b61      	ldr	r3, [pc, #388]	; (8006f78 <HAL_ADC_ConfigChannel+0x690>)
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7ff f90c 	bl	8006010 <LL_ADC_GetCommonPathInternalCh>
 8006df8:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a5f      	ldr	r2, [pc, #380]	; (8006f7c <HAL_ADC_ConfigChannel+0x694>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d004      	beq.n	8006e0e <HAL_ADC_ConfigChannel+0x526>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a5d      	ldr	r2, [pc, #372]	; (8006f80 <HAL_ADC_ConfigChannel+0x698>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d10e      	bne.n	8006e2c <HAL_ADC_ConfigChannel+0x544>
 8006e0e:	485b      	ldr	r0, [pc, #364]	; (8006f7c <HAL_ADC_ConfigChannel+0x694>)
 8006e10:	f7ff fa86 	bl	8006320 <LL_ADC_IsEnabled>
 8006e14:	4604      	mov	r4, r0
 8006e16:	485a      	ldr	r0, [pc, #360]	; (8006f80 <HAL_ADC_ConfigChannel+0x698>)
 8006e18:	f7ff fa82 	bl	8006320 <LL_ADC_IsEnabled>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	4323      	orrs	r3, r4
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	bf0c      	ite	eq
 8006e24:	2301      	moveq	r3, #1
 8006e26:	2300      	movne	r3, #0
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	e008      	b.n	8006e3e <HAL_ADC_ConfigChannel+0x556>
 8006e2c:	4855      	ldr	r0, [pc, #340]	; (8006f84 <HAL_ADC_ConfigChannel+0x69c>)
 8006e2e:	f7ff fa77 	bl	8006320 <LL_ADC_IsEnabled>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	bf0c      	ite	eq
 8006e38:	2301      	moveq	r3, #1
 8006e3a:	2300      	movne	r3, #0
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d07d      	beq.n	8006f3e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a50      	ldr	r2, [pc, #320]	; (8006f88 <HAL_ADC_ConfigChannel+0x6a0>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d130      	bne.n	8006eae <HAL_ADC_ConfigChannel+0x5c6>
 8006e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d12b      	bne.n	8006eae <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a4a      	ldr	r2, [pc, #296]	; (8006f84 <HAL_ADC_ConfigChannel+0x69c>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	f040 8081 	bne.w	8006f64 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a45      	ldr	r2, [pc, #276]	; (8006f7c <HAL_ADC_ConfigChannel+0x694>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d004      	beq.n	8006e76 <HAL_ADC_ConfigChannel+0x58e>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a43      	ldr	r2, [pc, #268]	; (8006f80 <HAL_ADC_ConfigChannel+0x698>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d101      	bne.n	8006e7a <HAL_ADC_ConfigChannel+0x592>
 8006e76:	4a45      	ldr	r2, [pc, #276]	; (8006f8c <HAL_ADC_ConfigChannel+0x6a4>)
 8006e78:	e000      	b.n	8006e7c <HAL_ADC_ConfigChannel+0x594>
 8006e7a:	4a3f      	ldr	r2, [pc, #252]	; (8006f78 <HAL_ADC_ConfigChannel+0x690>)
 8006e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006e82:	4619      	mov	r1, r3
 8006e84:	4610      	mov	r0, r2
 8006e86:	f7ff f8b0 	bl	8005fea <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006e8a:	4b41      	ldr	r3, [pc, #260]	; (8006f90 <HAL_ADC_ConfigChannel+0x6a8>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	099b      	lsrs	r3, r3, #6
 8006e90:	4a40      	ldr	r2, [pc, #256]	; (8006f94 <HAL_ADC_ConfigChannel+0x6ac>)
 8006e92:	fba2 2303 	umull	r2, r3, r2, r3
 8006e96:	099b      	lsrs	r3, r3, #6
 8006e98:	3301      	adds	r3, #1
 8006e9a:	005b      	lsls	r3, r3, #1
 8006e9c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006e9e:	e002      	b.n	8006ea6 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1f9      	bne.n	8006ea0 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006eac:	e05a      	b.n	8006f64 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a39      	ldr	r2, [pc, #228]	; (8006f98 <HAL_ADC_ConfigChannel+0x6b0>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d11e      	bne.n	8006ef6 <HAL_ADC_ConfigChannel+0x60e>
 8006eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d119      	bne.n	8006ef6 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a2f      	ldr	r2, [pc, #188]	; (8006f84 <HAL_ADC_ConfigChannel+0x69c>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d14b      	bne.n	8006f64 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a2a      	ldr	r2, [pc, #168]	; (8006f7c <HAL_ADC_ConfigChannel+0x694>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d004      	beq.n	8006ee0 <HAL_ADC_ConfigChannel+0x5f8>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a29      	ldr	r2, [pc, #164]	; (8006f80 <HAL_ADC_ConfigChannel+0x698>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d101      	bne.n	8006ee4 <HAL_ADC_ConfigChannel+0x5fc>
 8006ee0:	4a2a      	ldr	r2, [pc, #168]	; (8006f8c <HAL_ADC_ConfigChannel+0x6a4>)
 8006ee2:	e000      	b.n	8006ee6 <HAL_ADC_ConfigChannel+0x5fe>
 8006ee4:	4a24      	ldr	r2, [pc, #144]	; (8006f78 <HAL_ADC_ConfigChannel+0x690>)
 8006ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006eec:	4619      	mov	r1, r3
 8006eee:	4610      	mov	r0, r2
 8006ef0:	f7ff f87b 	bl	8005fea <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006ef4:	e036      	b.n	8006f64 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a28      	ldr	r2, [pc, #160]	; (8006f9c <HAL_ADC_ConfigChannel+0x6b4>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d131      	bne.n	8006f64 <HAL_ADC_ConfigChannel+0x67c>
 8006f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d12c      	bne.n	8006f64 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a1d      	ldr	r2, [pc, #116]	; (8006f84 <HAL_ADC_ConfigChannel+0x69c>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d127      	bne.n	8006f64 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a18      	ldr	r2, [pc, #96]	; (8006f7c <HAL_ADC_ConfigChannel+0x694>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d004      	beq.n	8006f28 <HAL_ADC_ConfigChannel+0x640>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a17      	ldr	r2, [pc, #92]	; (8006f80 <HAL_ADC_ConfigChannel+0x698>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d101      	bne.n	8006f2c <HAL_ADC_ConfigChannel+0x644>
 8006f28:	4a18      	ldr	r2, [pc, #96]	; (8006f8c <HAL_ADC_ConfigChannel+0x6a4>)
 8006f2a:	e000      	b.n	8006f2e <HAL_ADC_ConfigChannel+0x646>
 8006f2c:	4a12      	ldr	r2, [pc, #72]	; (8006f78 <HAL_ADC_ConfigChannel+0x690>)
 8006f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f34:	4619      	mov	r1, r3
 8006f36:	4610      	mov	r0, r2
 8006f38:	f7ff f857 	bl	8005fea <LL_ADC_SetCommonPathInternalCh>
 8006f3c:	e012      	b.n	8006f64 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f42:	f043 0220 	orr.w	r2, r3, #32
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006f50:	e008      	b.n	8006f64 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f56:	f043 0220 	orr.w	r2, r3, #32
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006f6c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3784      	adds	r7, #132	; 0x84
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd90      	pop	{r4, r7, pc}
 8006f78:	58026300 	.word	0x58026300
 8006f7c:	40022000 	.word	0x40022000
 8006f80:	40022100 	.word	0x40022100
 8006f84:	58026000 	.word	0x58026000
 8006f88:	cb840000 	.word	0xcb840000
 8006f8c:	40022300 	.word	0x40022300
 8006f90:	240000c0 	.word	0x240000c0
 8006f94:	053e2d63 	.word	0x053e2d63
 8006f98:	c7520000 	.word	0xc7520000
 8006f9c:	cfb80000 	.word	0xcfb80000

08006fa0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7ff f9b7 	bl	8006320 <LL_ADC_IsEnabled>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d16e      	bne.n	8007096 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689a      	ldr	r2, [r3, #8]
 8006fbe:	4b38      	ldr	r3, [pc, #224]	; (80070a0 <ADC_Enable+0x100>)
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00d      	beq.n	8006fe2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fca:	f043 0210 	orr.w	r2, r3, #16
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fd6:	f043 0201 	orr.w	r2, r3, #1
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e05a      	b.n	8007098 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7ff f972 	bl	80062d0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006fec:	f7fe ffbc 	bl	8005f68 <HAL_GetTick>
 8006ff0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a2b      	ldr	r2, [pc, #172]	; (80070a4 <ADC_Enable+0x104>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d004      	beq.n	8007006 <ADC_Enable+0x66>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a29      	ldr	r2, [pc, #164]	; (80070a8 <ADC_Enable+0x108>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d101      	bne.n	800700a <ADC_Enable+0x6a>
 8007006:	4b29      	ldr	r3, [pc, #164]	; (80070ac <ADC_Enable+0x10c>)
 8007008:	e000      	b.n	800700c <ADC_Enable+0x6c>
 800700a:	4b29      	ldr	r3, [pc, #164]	; (80070b0 <ADC_Enable+0x110>)
 800700c:	4618      	mov	r0, r3
 800700e:	f7ff f903 	bl	8006218 <LL_ADC_GetMultimode>
 8007012:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a23      	ldr	r2, [pc, #140]	; (80070a8 <ADC_Enable+0x108>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d002      	beq.n	8007024 <ADC_Enable+0x84>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	e000      	b.n	8007026 <ADC_Enable+0x86>
 8007024:	4b1f      	ldr	r3, [pc, #124]	; (80070a4 <ADC_Enable+0x104>)
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	6812      	ldr	r2, [r2, #0]
 800702a:	4293      	cmp	r3, r2
 800702c:	d02c      	beq.n	8007088 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d130      	bne.n	8007096 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007034:	e028      	b.n	8007088 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4618      	mov	r0, r3
 800703c:	f7ff f970 	bl	8006320 <LL_ADC_IsEnabled>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d104      	bne.n	8007050 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4618      	mov	r0, r3
 800704c:	f7ff f940 	bl	80062d0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007050:	f7fe ff8a 	bl	8005f68 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	2b02      	cmp	r3, #2
 800705c:	d914      	bls.n	8007088 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b01      	cmp	r3, #1
 800706a:	d00d      	beq.n	8007088 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007070:	f043 0210 	orr.w	r2, r3, #16
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800707c:	f043 0201 	orr.w	r2, r3, #1
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e007      	b.n	8007098 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b01      	cmp	r3, #1
 8007094:	d1cf      	bne.n	8007036 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	8000003f 	.word	0x8000003f
 80070a4:	40022000 	.word	0x40022000
 80070a8:	40022100 	.word	0x40022100
 80070ac:	40022300 	.word	0x40022300
 80070b0:	58026300 	.word	0x58026300

080070b4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7ff f940 	bl	8006346 <LL_ADC_IsDisableOngoing>
 80070c6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7ff f927 	bl	8006320 <LL_ADC_IsEnabled>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d047      	beq.n	8007168 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d144      	bne.n	8007168 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f003 030d 	and.w	r3, r3, #13
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d10c      	bne.n	8007106 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7ff f901 	bl	80062f8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2203      	movs	r2, #3
 80070fc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80070fe:	f7fe ff33 	bl	8005f68 <HAL_GetTick>
 8007102:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007104:	e029      	b.n	800715a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800710a:	f043 0210 	orr.w	r2, r3, #16
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007116:	f043 0201 	orr.w	r2, r3, #1
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e023      	b.n	800716a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007122:	f7fe ff21 	bl	8005f68 <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	2b02      	cmp	r3, #2
 800712e:	d914      	bls.n	800715a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00d      	beq.n	800715a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007142:	f043 0210 	orr.w	r2, r3, #16
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800714e:	f043 0201 	orr.w	r2, r3, #1
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e007      	b.n	800716a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1dc      	bne.n	8007122 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b084      	sub	sp, #16
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007184:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007188:	2b00      	cmp	r3, #0
 800718a:	d14b      	bne.n	8007224 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007190:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0308 	and.w	r3, r3, #8
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d021      	beq.n	80071ea <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fe ff92 	bl	80060d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d032      	beq.n	800721c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d12b      	bne.n	800721c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d11f      	bne.n	800721c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e0:	f043 0201 	orr.w	r2, r3, #1
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	655a      	str	r2, [r3, #84]	; 0x54
 80071e8:	e018      	b.n	800721c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	f003 0303 	and.w	r3, r3, #3
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d111      	bne.n	800721c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007208:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800720c:	2b00      	cmp	r3, #0
 800720e:	d105      	bne.n	800721c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007214:	f043 0201 	orr.w	r2, r3, #1
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f7ff fb45 	bl	80068ac <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007222:	e00e      	b.n	8007242 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007228:	f003 0310 	and.w	r3, r3, #16
 800722c:	2b00      	cmp	r3, #0
 800722e:	d003      	beq.n	8007238 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f7ff fb4f 	bl	80068d4 <HAL_ADC_ErrorCallback>
}
 8007236:	e004      	b.n	8007242 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800723c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	4798      	blx	r3
}
 8007242:	bf00      	nop
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b084      	sub	sp, #16
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007256:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f7ff fb31 	bl	80068c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800725e:	bf00      	nop
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b084      	sub	sp, #16
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007272:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007278:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007284:	f043 0204 	orr.w	r2, r3, #4
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f7ff fb21 	bl	80068d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007292:	bf00      	nop
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
	...

0800729c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a7a      	ldr	r2, [pc, #488]	; (8007494 <ADC_ConfigureBoostMode+0x1f8>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d004      	beq.n	80072b8 <ADC_ConfigureBoostMode+0x1c>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a79      	ldr	r2, [pc, #484]	; (8007498 <ADC_ConfigureBoostMode+0x1fc>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d109      	bne.n	80072cc <ADC_ConfigureBoostMode+0x30>
 80072b8:	4b78      	ldr	r3, [pc, #480]	; (800749c <ADC_ConfigureBoostMode+0x200>)
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	bf14      	ite	ne
 80072c4:	2301      	movne	r3, #1
 80072c6:	2300      	moveq	r3, #0
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	e008      	b.n	80072de <ADC_ConfigureBoostMode+0x42>
 80072cc:	4b74      	ldr	r3, [pc, #464]	; (80074a0 <ADC_ConfigureBoostMode+0x204>)
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	bf14      	ite	ne
 80072d8:	2301      	movne	r3, #1
 80072da:	2300      	moveq	r3, #0
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d01c      	beq.n	800731c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80072e2:	f007 fdef 	bl	800eec4 <HAL_RCC_GetHCLKFreq>
 80072e6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072f0:	d010      	beq.n	8007314 <ADC_ConfigureBoostMode+0x78>
 80072f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072f6:	d873      	bhi.n	80073e0 <ADC_ConfigureBoostMode+0x144>
 80072f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072fc:	d002      	beq.n	8007304 <ADC_ConfigureBoostMode+0x68>
 80072fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007302:	d16d      	bne.n	80073e0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	0c1b      	lsrs	r3, r3, #16
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007310:	60fb      	str	r3, [r7, #12]
        break;
 8007312:	e068      	b.n	80073e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	089b      	lsrs	r3, r3, #2
 8007318:	60fb      	str	r3, [r7, #12]
        break;
 800731a:	e064      	b.n	80073e6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800731c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007320:	f04f 0100 	mov.w	r1, #0
 8007324:	f009 f876 	bl	8010414 <HAL_RCCEx_GetPeriphCLKFreq>
 8007328:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8007332:	d051      	beq.n	80073d8 <ADC_ConfigureBoostMode+0x13c>
 8007334:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8007338:	d854      	bhi.n	80073e4 <ADC_ConfigureBoostMode+0x148>
 800733a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800733e:	d047      	beq.n	80073d0 <ADC_ConfigureBoostMode+0x134>
 8007340:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8007344:	d84e      	bhi.n	80073e4 <ADC_ConfigureBoostMode+0x148>
 8007346:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800734a:	d03d      	beq.n	80073c8 <ADC_ConfigureBoostMode+0x12c>
 800734c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007350:	d848      	bhi.n	80073e4 <ADC_ConfigureBoostMode+0x148>
 8007352:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007356:	d033      	beq.n	80073c0 <ADC_ConfigureBoostMode+0x124>
 8007358:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800735c:	d842      	bhi.n	80073e4 <ADC_ConfigureBoostMode+0x148>
 800735e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8007362:	d029      	beq.n	80073b8 <ADC_ConfigureBoostMode+0x11c>
 8007364:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8007368:	d83c      	bhi.n	80073e4 <ADC_ConfigureBoostMode+0x148>
 800736a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800736e:	d01a      	beq.n	80073a6 <ADC_ConfigureBoostMode+0x10a>
 8007370:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007374:	d836      	bhi.n	80073e4 <ADC_ConfigureBoostMode+0x148>
 8007376:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800737a:	d014      	beq.n	80073a6 <ADC_ConfigureBoostMode+0x10a>
 800737c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007380:	d830      	bhi.n	80073e4 <ADC_ConfigureBoostMode+0x148>
 8007382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007386:	d00e      	beq.n	80073a6 <ADC_ConfigureBoostMode+0x10a>
 8007388:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800738c:	d82a      	bhi.n	80073e4 <ADC_ConfigureBoostMode+0x148>
 800738e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007392:	d008      	beq.n	80073a6 <ADC_ConfigureBoostMode+0x10a>
 8007394:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007398:	d824      	bhi.n	80073e4 <ADC_ConfigureBoostMode+0x148>
 800739a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800739e:	d002      	beq.n	80073a6 <ADC_ConfigureBoostMode+0x10a>
 80073a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80073a4:	d11e      	bne.n	80073e4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	0c9b      	lsrs	r3, r3, #18
 80073ac:	005b      	lsls	r3, r3, #1
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b4:	60fb      	str	r3, [r7, #12]
        break;
 80073b6:	e016      	b.n	80073e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	091b      	lsrs	r3, r3, #4
 80073bc:	60fb      	str	r3, [r7, #12]
        break;
 80073be:	e012      	b.n	80073e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	095b      	lsrs	r3, r3, #5
 80073c4:	60fb      	str	r3, [r7, #12]
        break;
 80073c6:	e00e      	b.n	80073e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	099b      	lsrs	r3, r3, #6
 80073cc:	60fb      	str	r3, [r7, #12]
        break;
 80073ce:	e00a      	b.n	80073e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	09db      	lsrs	r3, r3, #7
 80073d4:	60fb      	str	r3, [r7, #12]
        break;
 80073d6:	e006      	b.n	80073e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	0a1b      	lsrs	r3, r3, #8
 80073dc:	60fb      	str	r3, [r7, #12]
        break;
 80073de:	e002      	b.n	80073e6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80073e0:	bf00      	nop
 80073e2:	e000      	b.n	80073e6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80073e4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80073e6:	f7fe fdcb 	bl	8005f80 <HAL_GetREVID>
 80073ea:	4603      	mov	r3, r0
 80073ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d815      	bhi.n	8007420 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	4a2b      	ldr	r2, [pc, #172]	; (80074a4 <ADC_ConfigureBoostMode+0x208>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d908      	bls.n	800740e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689a      	ldr	r2, [r3, #8]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800740a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800740c:	e03e      	b.n	800748c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800741c:	609a      	str	r2, [r3, #8]
}
 800741e:	e035      	b.n	800748c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	085b      	lsrs	r3, r3, #1
 8007424:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	4a1f      	ldr	r2, [pc, #124]	; (80074a8 <ADC_ConfigureBoostMode+0x20c>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d808      	bhi.n	8007440 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	689a      	ldr	r2, [r3, #8]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800743c:	609a      	str	r2, [r3, #8]
}
 800743e:	e025      	b.n	800748c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	4a1a      	ldr	r2, [pc, #104]	; (80074ac <ADC_ConfigureBoostMode+0x210>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d80a      	bhi.n	800745e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800745a:	609a      	str	r2, [r3, #8]
}
 800745c:	e016      	b.n	800748c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	4a13      	ldr	r2, [pc, #76]	; (80074b0 <ADC_ConfigureBoostMode+0x214>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d80a      	bhi.n	800747c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007478:	609a      	str	r2, [r3, #8]
}
 800747a:	e007      	b.n	800748c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689a      	ldr	r2, [r3, #8]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800748a:	609a      	str	r2, [r3, #8]
}
 800748c:	bf00      	nop
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	40022000 	.word	0x40022000
 8007498:	40022100 	.word	0x40022100
 800749c:	40022300 	.word	0x40022300
 80074a0:	58026300 	.word	0x58026300
 80074a4:	01312d00 	.word	0x01312d00
 80074a8:	005f5e10 	.word	0x005f5e10
 80074ac:	00bebc20 	.word	0x00bebc20
 80074b0:	017d7840 	.word	0x017d7840

080074b4 <LL_ADC_IsEnabled>:
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f003 0301 	and.w	r3, r3, #1
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d101      	bne.n	80074cc <LL_ADC_IsEnabled+0x18>
 80074c8:	2301      	movs	r3, #1
 80074ca:	e000      	b.n	80074ce <LL_ADC_IsEnabled+0x1a>
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
	...

080074dc <LL_ADC_StartCalibration>:
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	689a      	ldr	r2, [r3, #8]
 80074ec:	4b09      	ldr	r3, [pc, #36]	; (8007514 <LL_ADC_StartCalibration+0x38>)
 80074ee:	4013      	ands	r3, r2
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80074fc:	430a      	orrs	r2, r1
 80074fe:	4313      	orrs	r3, r2
 8007500:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	609a      	str	r2, [r3, #8]
}
 8007508:	bf00      	nop
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr
 8007514:	3ffeffc0 	.word	0x3ffeffc0

08007518 <LL_ADC_IsCalibrationOnGoing>:
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007528:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800752c:	d101      	bne.n	8007532 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800752e:	2301      	movs	r3, #1
 8007530:	e000      	b.n	8007534 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <LL_ADC_REG_IsConversionOngoing>:
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f003 0304 	and.w	r3, r3, #4
 8007550:	2b04      	cmp	r3, #4
 8007552:	d101      	bne.n	8007558 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007554:	2301      	movs	r3, #1
 8007556:	e000      	b.n	800755a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
	...

08007568 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007574:	2300      	movs	r3, #0
 8007576:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800757e:	2b01      	cmp	r3, #1
 8007580:	d101      	bne.n	8007586 <HAL_ADCEx_Calibration_Start+0x1e>
 8007582:	2302      	movs	r3, #2
 8007584:	e04c      	b.n	8007620 <HAL_ADCEx_Calibration_Start+0xb8>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f7ff fd90 	bl	80070b4 <ADC_Disable>
 8007594:	4603      	mov	r3, r0
 8007596:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007598:	7dfb      	ldrb	r3, [r7, #23]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d135      	bne.n	800760a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075a2:	4b21      	ldr	r3, [pc, #132]	; (8007628 <HAL_ADCEx_Calibration_Start+0xc0>)
 80075a4:	4013      	ands	r3, r2
 80075a6:	f043 0202 	orr.w	r2, r3, #2
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	68b9      	ldr	r1, [r7, #8]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7ff ff90 	bl	80074dc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80075bc:	e014      	b.n	80075e8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	3301      	adds	r3, #1
 80075c2:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	4a19      	ldr	r2, [pc, #100]	; (800762c <HAL_ADCEx_Calibration_Start+0xc4>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d30d      	bcc.n	80075e8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d0:	f023 0312 	bic.w	r3, r3, #18
 80075d4:	f043 0210 	orr.w	r2, r3, #16
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e01b      	b.n	8007620 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7ff ff93 	bl	8007518 <LL_ADC_IsCalibrationOnGoing>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1e2      	bne.n	80075be <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075fc:	f023 0303 	bic.w	r3, r3, #3
 8007600:	f043 0201 	orr.w	r2, r3, #1
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	655a      	str	r2, [r3, #84]	; 0x54
 8007608:	e005      	b.n	8007616 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800760e:	f043 0210 	orr.w	r2, r3, #16
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800761e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3718      	adds	r7, #24
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	ffffeefd 	.word	0xffffeefd
 800762c:	25c3f800 	.word	0x25c3f800

08007630 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007630:	b590      	push	{r4, r7, lr}
 8007632:	b09f      	sub	sp, #124	; 0x7c
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007646:	2b01      	cmp	r3, #1
 8007648:	d101      	bne.n	800764e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800764a:	2302      	movs	r3, #2
 800764c:	e0be      	b.n	80077cc <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8007656:	2300      	movs	r3, #0
 8007658:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800765a:	2300      	movs	r3, #0
 800765c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a5c      	ldr	r2, [pc, #368]	; (80077d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d102      	bne.n	800766e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007668:	4b5b      	ldr	r3, [pc, #364]	; (80077d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800766a:	60bb      	str	r3, [r7, #8]
 800766c:	e001      	b.n	8007672 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800766e:	2300      	movs	r3, #0
 8007670:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10b      	bne.n	8007690 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800767c:	f043 0220 	orr.w	r2, r3, #32
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e09d      	b.n	80077cc <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	4618      	mov	r0, r3
 8007694:	f7ff ff54 	bl	8007540 <LL_ADC_REG_IsConversionOngoing>
 8007698:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4618      	mov	r0, r3
 80076a0:	f7ff ff4e 	bl	8007540 <LL_ADC_REG_IsConversionOngoing>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d17f      	bne.n	80077aa <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80076aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d17c      	bne.n	80077aa <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a47      	ldr	r2, [pc, #284]	; (80077d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d004      	beq.n	80076c4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a46      	ldr	r2, [pc, #280]	; (80077d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d101      	bne.n	80076c8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80076c4:	4b45      	ldr	r3, [pc, #276]	; (80077dc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80076c6:	e000      	b.n	80076ca <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80076c8:	4b45      	ldr	r3, [pc, #276]	; (80077e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80076ca:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d039      	beq.n	8007748 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80076d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	431a      	orrs	r2, r3
 80076e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076e4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a3a      	ldr	r2, [pc, #232]	; (80077d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d004      	beq.n	80076fa <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a38      	ldr	r2, [pc, #224]	; (80077d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d10e      	bne.n	8007718 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80076fa:	4836      	ldr	r0, [pc, #216]	; (80077d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80076fc:	f7ff feda 	bl	80074b4 <LL_ADC_IsEnabled>
 8007700:	4604      	mov	r4, r0
 8007702:	4835      	ldr	r0, [pc, #212]	; (80077d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007704:	f7ff fed6 	bl	80074b4 <LL_ADC_IsEnabled>
 8007708:	4603      	mov	r3, r0
 800770a:	4323      	orrs	r3, r4
 800770c:	2b00      	cmp	r3, #0
 800770e:	bf0c      	ite	eq
 8007710:	2301      	moveq	r3, #1
 8007712:	2300      	movne	r3, #0
 8007714:	b2db      	uxtb	r3, r3
 8007716:	e008      	b.n	800772a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8007718:	4832      	ldr	r0, [pc, #200]	; (80077e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800771a:	f7ff fecb 	bl	80074b4 <LL_ADC_IsEnabled>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	bf0c      	ite	eq
 8007724:	2301      	moveq	r3, #1
 8007726:	2300      	movne	r3, #0
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d047      	beq.n	80077be <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800772e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007730:	689a      	ldr	r2, [r3, #8]
 8007732:	4b2d      	ldr	r3, [pc, #180]	; (80077e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8007734:	4013      	ands	r3, r2
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	6811      	ldr	r1, [r2, #0]
 800773a:	683a      	ldr	r2, [r7, #0]
 800773c:	6892      	ldr	r2, [r2, #8]
 800773e:	430a      	orrs	r2, r1
 8007740:	431a      	orrs	r2, r3
 8007742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007744:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007746:	e03a      	b.n	80077be <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8007748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007752:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a1e      	ldr	r2, [pc, #120]	; (80077d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d004      	beq.n	8007768 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a1d      	ldr	r2, [pc, #116]	; (80077d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d10e      	bne.n	8007786 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8007768:	481a      	ldr	r0, [pc, #104]	; (80077d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800776a:	f7ff fea3 	bl	80074b4 <LL_ADC_IsEnabled>
 800776e:	4604      	mov	r4, r0
 8007770:	4819      	ldr	r0, [pc, #100]	; (80077d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007772:	f7ff fe9f 	bl	80074b4 <LL_ADC_IsEnabled>
 8007776:	4603      	mov	r3, r0
 8007778:	4323      	orrs	r3, r4
 800777a:	2b00      	cmp	r3, #0
 800777c:	bf0c      	ite	eq
 800777e:	2301      	moveq	r3, #1
 8007780:	2300      	movne	r3, #0
 8007782:	b2db      	uxtb	r3, r3
 8007784:	e008      	b.n	8007798 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8007786:	4817      	ldr	r0, [pc, #92]	; (80077e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8007788:	f7ff fe94 	bl	80074b4 <LL_ADC_IsEnabled>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	bf0c      	ite	eq
 8007792:	2301      	moveq	r3, #1
 8007794:	2300      	movne	r3, #0
 8007796:	b2db      	uxtb	r3, r3
 8007798:	2b00      	cmp	r3, #0
 800779a:	d010      	beq.n	80077be <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800779c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800779e:	689a      	ldr	r2, [r3, #8]
 80077a0:	4b11      	ldr	r3, [pc, #68]	; (80077e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80077a2:	4013      	ands	r3, r2
 80077a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80077a6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80077a8:	e009      	b.n	80077be <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ae:	f043 0220 	orr.w	r2, r3, #32
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80077bc:	e000      	b.n	80077c0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80077be:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80077c8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	377c      	adds	r7, #124	; 0x7c
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd90      	pop	{r4, r7, pc}
 80077d4:	40022000 	.word	0x40022000
 80077d8:	40022100 	.word	0x40022100
 80077dc:	40022300 	.word	0x40022300
 80077e0:	58026300 	.word	0x58026300
 80077e4:	58026000 	.word	0x58026000
 80077e8:	fffff0e0 	.word	0xfffff0e0

080077ec <__NVIC_SetPriorityGrouping>:
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f003 0307 	and.w	r3, r3, #7
 80077fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80077fc:	4b0b      	ldr	r3, [pc, #44]	; (800782c <__NVIC_SetPriorityGrouping+0x40>)
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007808:	4013      	ands	r3, r2
 800780a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007814:	4b06      	ldr	r3, [pc, #24]	; (8007830 <__NVIC_SetPriorityGrouping+0x44>)
 8007816:	4313      	orrs	r3, r2
 8007818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800781a:	4a04      	ldr	r2, [pc, #16]	; (800782c <__NVIC_SetPriorityGrouping+0x40>)
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	60d3      	str	r3, [r2, #12]
}
 8007820:	bf00      	nop
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr
 800782c:	e000ed00 	.word	0xe000ed00
 8007830:	05fa0000 	.word	0x05fa0000

08007834 <__NVIC_GetPriorityGrouping>:
{
 8007834:	b480      	push	{r7}
 8007836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007838:	4b04      	ldr	r3, [pc, #16]	; (800784c <__NVIC_GetPriorityGrouping+0x18>)
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	0a1b      	lsrs	r3, r3, #8
 800783e:	f003 0307 	and.w	r3, r3, #7
}
 8007842:	4618      	mov	r0, r3
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	e000ed00 	.word	0xe000ed00

08007850 <__NVIC_EnableIRQ>:
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	4603      	mov	r3, r0
 8007858:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800785a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800785e:	2b00      	cmp	r3, #0
 8007860:	db0b      	blt.n	800787a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007862:	88fb      	ldrh	r3, [r7, #6]
 8007864:	f003 021f 	and.w	r2, r3, #31
 8007868:	4907      	ldr	r1, [pc, #28]	; (8007888 <__NVIC_EnableIRQ+0x38>)
 800786a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800786e:	095b      	lsrs	r3, r3, #5
 8007870:	2001      	movs	r0, #1
 8007872:	fa00 f202 	lsl.w	r2, r0, r2
 8007876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800787a:	bf00      	nop
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	e000e100 	.word	0xe000e100

0800788c <__NVIC_SetPriority>:
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	4603      	mov	r3, r0
 8007894:	6039      	str	r1, [r7, #0]
 8007896:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007898:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800789c:	2b00      	cmp	r3, #0
 800789e:	db0a      	blt.n	80078b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	490c      	ldr	r1, [pc, #48]	; (80078d8 <__NVIC_SetPriority+0x4c>)
 80078a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078aa:	0112      	lsls	r2, r2, #4
 80078ac:	b2d2      	uxtb	r2, r2
 80078ae:	440b      	add	r3, r1
 80078b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80078b4:	e00a      	b.n	80078cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	b2da      	uxtb	r2, r3
 80078ba:	4908      	ldr	r1, [pc, #32]	; (80078dc <__NVIC_SetPriority+0x50>)
 80078bc:	88fb      	ldrh	r3, [r7, #6]
 80078be:	f003 030f 	and.w	r3, r3, #15
 80078c2:	3b04      	subs	r3, #4
 80078c4:	0112      	lsls	r2, r2, #4
 80078c6:	b2d2      	uxtb	r2, r2
 80078c8:	440b      	add	r3, r1
 80078ca:	761a      	strb	r2, [r3, #24]
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr
 80078d8:	e000e100 	.word	0xe000e100
 80078dc:	e000ed00 	.word	0xe000ed00

080078e0 <NVIC_EncodePriority>:
{
 80078e0:	b480      	push	{r7}
 80078e2:	b089      	sub	sp, #36	; 0x24
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f003 0307 	and.w	r3, r3, #7
 80078f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	f1c3 0307 	rsb	r3, r3, #7
 80078fa:	2b04      	cmp	r3, #4
 80078fc:	bf28      	it	cs
 80078fe:	2304      	movcs	r3, #4
 8007900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	3304      	adds	r3, #4
 8007906:	2b06      	cmp	r3, #6
 8007908:	d902      	bls.n	8007910 <NVIC_EncodePriority+0x30>
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	3b03      	subs	r3, #3
 800790e:	e000      	b.n	8007912 <NVIC_EncodePriority+0x32>
 8007910:	2300      	movs	r3, #0
 8007912:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	fa02 f303 	lsl.w	r3, r2, r3
 800791e:	43da      	mvns	r2, r3
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	401a      	ands	r2, r3
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007928:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	fa01 f303 	lsl.w	r3, r1, r3
 8007932:	43d9      	mvns	r1, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007938:	4313      	orrs	r3, r2
}
 800793a:	4618      	mov	r0, r3
 800793c:	3724      	adds	r7, #36	; 0x24
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b082      	sub	sp, #8
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7ff ff4c 	bl	80077ec <__NVIC_SetPriorityGrouping>
}
 8007954:	bf00      	nop
 8007956:	3708      	adds	r7, #8
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
 8007962:	4603      	mov	r3, r0
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
 8007968:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800796a:	f7ff ff63 	bl	8007834 <__NVIC_GetPriorityGrouping>
 800796e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	68b9      	ldr	r1, [r7, #8]
 8007974:	6978      	ldr	r0, [r7, #20]
 8007976:	f7ff ffb3 	bl	80078e0 <NVIC_EncodePriority>
 800797a:	4602      	mov	r2, r0
 800797c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007980:	4611      	mov	r1, r2
 8007982:	4618      	mov	r0, r3
 8007984:	f7ff ff82 	bl	800788c <__NVIC_SetPriority>
}
 8007988:	bf00      	nop
 800798a:	3718      	adds	r7, #24
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	4603      	mov	r3, r0
 8007998:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800799a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800799e:	4618      	mov	r0, r3
 80079a0:	f7ff ff56 	bl	8007850 <__NVIC_EnableIRQ>
}
 80079a4:	bf00      	nop
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d101      	bne.n	80079be <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e014      	b.n	80079e8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	791b      	ldrb	r3, [r3, #4]
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d105      	bne.n	80079d4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7f9 f908 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2202      	movs	r2, #2
 80079d8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3708      	adds	r7, #8
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d101      	bne.n	8007a04 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e046      	b.n	8007a92 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	795b      	ldrb	r3, [r3, #5]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d101      	bne.n	8007a10 <HAL_DAC_Start+0x20>
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	e040      	b.n	8007a92 <HAL_DAC_Start+0xa2>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2202      	movs	r2, #2
 8007a1a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6819      	ldr	r1, [r3, #0]
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	f003 0310 	and.w	r3, r3, #16
 8007a28:	2201      	movs	r2, #1
 8007a2a:	409a      	lsls	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	430a      	orrs	r2, r1
 8007a32:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10f      	bne.n	8007a5a <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d11d      	bne.n	8007a84 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	685a      	ldr	r2, [r3, #4]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f042 0201 	orr.w	r2, r2, #1
 8007a56:	605a      	str	r2, [r3, #4]
 8007a58:	e014      	b.n	8007a84 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	f003 0310 	and.w	r3, r3, #16
 8007a6a:	2102      	movs	r1, #2
 8007a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d107      	bne.n	8007a84 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	685a      	ldr	r2, [r3, #4]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f042 0202 	orr.w	r2, r2, #2
 8007a82:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
	...

08007aa0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
 8007aac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d101      	bne.n	8007ab8 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e0a2      	b.n	8007bfe <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	795b      	ldrb	r3, [r3, #5]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d101      	bne.n	8007ac4 <HAL_DAC_Start_DMA+0x24>
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	e09c      	b.n	8007bfe <HAL_DAC_Start_DMA+0x15e>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2202      	movs	r2, #2
 8007ace:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d129      	bne.n	8007b2a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	4a4b      	ldr	r2, [pc, #300]	; (8007c08 <HAL_DAC_Start_DMA+0x168>)
 8007adc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	4a4a      	ldr	r2, [pc, #296]	; (8007c0c <HAL_DAC_Start_DMA+0x16c>)
 8007ae4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	4a49      	ldr	r2, [pc, #292]	; (8007c10 <HAL_DAC_Start_DMA+0x170>)
 8007aec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007afc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007afe:	6a3b      	ldr	r3, [r7, #32]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d003      	beq.n	8007b0c <HAL_DAC_Start_DMA+0x6c>
 8007b04:	6a3b      	ldr	r3, [r7, #32]
 8007b06:	2b04      	cmp	r3, #4
 8007b08:	d005      	beq.n	8007b16 <HAL_DAC_Start_DMA+0x76>
 8007b0a:	e009      	b.n	8007b20 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	3308      	adds	r3, #8
 8007b12:	613b      	str	r3, [r7, #16]
        break;
 8007b14:	e033      	b.n	8007b7e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	330c      	adds	r3, #12
 8007b1c:	613b      	str	r3, [r7, #16]
        break;
 8007b1e:	e02e      	b.n	8007b7e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3310      	adds	r3, #16
 8007b26:	613b      	str	r3, [r7, #16]
        break;
 8007b28:	e029      	b.n	8007b7e <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	4a39      	ldr	r2, [pc, #228]	; (8007c14 <HAL_DAC_Start_DMA+0x174>)
 8007b30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	4a38      	ldr	r2, [pc, #224]	; (8007c18 <HAL_DAC_Start_DMA+0x178>)
 8007b38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	4a37      	ldr	r2, [pc, #220]	; (8007c1c <HAL_DAC_Start_DMA+0x17c>)
 8007b40:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007b50:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8007b52:	6a3b      	ldr	r3, [r7, #32]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d003      	beq.n	8007b60 <HAL_DAC_Start_DMA+0xc0>
 8007b58:	6a3b      	ldr	r3, [r7, #32]
 8007b5a:	2b04      	cmp	r3, #4
 8007b5c:	d005      	beq.n	8007b6a <HAL_DAC_Start_DMA+0xca>
 8007b5e:	e009      	b.n	8007b74 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3314      	adds	r3, #20
 8007b66:	613b      	str	r3, [r7, #16]
        break;
 8007b68:	e009      	b.n	8007b7e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3318      	adds	r3, #24
 8007b70:	613b      	str	r3, [r7, #16]
        break;
 8007b72:	e004      	b.n	8007b7e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	331c      	adds	r3, #28
 8007b7a:	613b      	str	r3, [r7, #16]
        break;
 8007b7c:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d111      	bne.n	8007ba8 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b92:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6898      	ldr	r0, [r3, #8]
 8007b98:	6879      	ldr	r1, [r7, #4]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	f000 fe67 	bl	8008870 <HAL_DMA_Start_IT>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	75fb      	strb	r3, [r7, #23]
 8007ba6:	e010      	b.n	8007bca <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007bb6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	68d8      	ldr	r0, [r3, #12]
 8007bbc:	6879      	ldr	r1, [r7, #4]
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	f000 fe55 	bl	8008870 <HAL_DMA_Start_IT>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007bd0:	7dfb      	ldrb	r3, [r7, #23]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10c      	bne.n	8007bf0 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	6819      	ldr	r1, [r3, #0]
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	f003 0310 	and.w	r3, r3, #16
 8007be2:	2201      	movs	r2, #1
 8007be4:	409a      	lsls	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	430a      	orrs	r2, r1
 8007bec:	601a      	str	r2, [r3, #0]
 8007bee:	e005      	b.n	8007bfc <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	f043 0204 	orr.w	r2, r3, #4
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3718      	adds	r7, #24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	08008091 	.word	0x08008091
 8007c0c:	080080b3 	.word	0x080080b3
 8007c10:	080080cf 	.word	0x080080cf
 8007c14:	0800814d 	.word	0x0800814d
 8007c18:	0800816f 	.word	0x0800816f
 8007c1c:	0800818b 	.word	0x0800818b

08007c20 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e03e      	b.n	8007cb2 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6819      	ldr	r1, [r3, #0]
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	f003 0310 	and.w	r3, r3, #16
 8007c40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007c44:	fa02 f303 	lsl.w	r3, r2, r3
 8007c48:	43da      	mvns	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	400a      	ands	r2, r1
 8007c50:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	6819      	ldr	r1, [r3, #0]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	f003 0310 	and.w	r3, r3, #16
 8007c5e:	2201      	movs	r2, #1
 8007c60:	fa02 f303 	lsl.w	r3, r2, r3
 8007c64:	43da      	mvns	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	400a      	ands	r2, r1
 8007c6c:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10d      	bne.n	8007c90 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f001 f863 	bl	8008d44 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	e00c      	b.n	8007caa <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	4618      	mov	r0, r3
 8007c96:	f001 f855 	bl	8008d44 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8007ca8:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b084      	sub	sp, #16
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cd0:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d01d      	beq.n	8007d18 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d018      	beq.n	8007d18 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2204      	movs	r2, #4
 8007cea:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	f043 0201 	orr.w	r2, r3, #1
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007d00:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d10:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f86f 	bl	8007df6 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d01d      	beq.n	8007d5e <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d018      	beq.n	8007d5e <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2204      	movs	r2, #4
 8007d30:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	f043 0202 	orr.w	r2, r3, #2
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007d46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007d56:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f9ed 	bl	8008138 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8007d5e:	bf00      	nop
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b087      	sub	sp, #28
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	60f8      	str	r0, [r7, #12]
 8007d6e:	60b9      	str	r1, [r7, #8]
 8007d70:	607a      	str	r2, [r7, #4]
 8007d72:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8007d74:	2300      	movs	r3, #0
 8007d76:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d101      	bne.n	8007d82 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e015      	b.n	8007dae <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d105      	bne.n	8007d9a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4413      	add	r3, r2
 8007d94:	3308      	adds	r3, #8
 8007d96:	617b      	str	r3, [r7, #20]
 8007d98:	e004      	b.n	8007da4 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4413      	add	r3, r2
 8007da0:	3314      	adds	r3, #20
 8007da2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	461a      	mov	r2, r3
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	371c      	adds	r7, #28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b083      	sub	sp, #12
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8007dc2:	bf00      	nop
 8007dc4:	370c      	adds	r7, #12
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b083      	sub	sp, #12
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8007dd6:	bf00      	nop
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b083      	sub	sp, #12
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8007dea:	bf00      	nop
 8007dec:	370c      	adds	r7, #12
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b083      	sub	sp, #12
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007dfe:	bf00      	nop
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
	...

08007e0c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b08a      	sub	sp, #40	; 0x28
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d002      	beq.n	8007e2a <HAL_DAC_ConfigChannel+0x1e>
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e12a      	b.n	8008084 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	795b      	ldrb	r3, [r3, #5]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d101      	bne.n	8007e3a <HAL_DAC_ConfigChannel+0x2e>
 8007e36:	2302      	movs	r3, #2
 8007e38:	e124      	b.n	8008084 <HAL_DAC_ConfigChannel+0x278>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2202      	movs	r2, #2
 8007e44:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2b04      	cmp	r3, #4
 8007e4c:	d17a      	bne.n	8007f44 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007e4e:	f7fe f88b 	bl	8005f68 <HAL_GetTick>
 8007e52:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d13d      	bne.n	8007ed6 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007e5a:	e018      	b.n	8007e8e <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007e5c:	f7fe f884 	bl	8005f68 <HAL_GetTick>
 8007e60:	4602      	mov	r2, r0
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d911      	bls.n	8007e8e <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e70:	4b86      	ldr	r3, [pc, #536]	; (800808c <HAL_DAC_ConfigChannel+0x280>)
 8007e72:	4013      	ands	r3, r2
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00a      	beq.n	8007e8e <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	f043 0208 	orr.w	r2, r3, #8
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2203      	movs	r2, #3
 8007e88:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	e0fa      	b.n	8008084 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e94:	4b7d      	ldr	r3, [pc, #500]	; (800808c <HAL_DAC_ConfigChannel+0x280>)
 8007e96:	4013      	ands	r3, r2
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1df      	bne.n	8007e5c <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	6992      	ldr	r2, [r2, #24]
 8007ea4:	641a      	str	r2, [r3, #64]	; 0x40
 8007ea6:	e020      	b.n	8007eea <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007ea8:	f7fe f85e 	bl	8005f68 <HAL_GetTick>
 8007eac:	4602      	mov	r2, r0
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d90f      	bls.n	8007ed6 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	da0a      	bge.n	8007ed6 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	f043 0208 	orr.w	r2, r3, #8
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2203      	movs	r2, #3
 8007ed0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e0d6      	b.n	8008084 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	dbe3      	blt.n	8007ea8 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	6992      	ldr	r2, [r2, #24]
 8007ee8:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f003 0310 	and.w	r3, r3, #16
 8007ef6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007efa:	fa01 f303 	lsl.w	r3, r1, r3
 8007efe:	43db      	mvns	r3, r3
 8007f00:	ea02 0103 	and.w	r1, r2, r3
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	69da      	ldr	r2, [r3, #28]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f003 0310 	and.w	r3, r3, #16
 8007f0e:	409a      	lsls	r2, r3
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	430a      	orrs	r2, r1
 8007f16:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f003 0310 	and.w	r3, r3, #16
 8007f24:	21ff      	movs	r1, #255	; 0xff
 8007f26:	fa01 f303 	lsl.w	r3, r1, r3
 8007f2a:	43db      	mvns	r3, r3
 8007f2c:	ea02 0103 	and.w	r1, r2, r3
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	6a1a      	ldr	r2, [r3, #32]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f003 0310 	and.w	r3, r3, #16
 8007f3a:	409a      	lsls	r2, r3
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	430a      	orrs	r2, r1
 8007f42:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d11d      	bne.n	8007f88 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f52:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f003 0310 	and.w	r3, r3, #16
 8007f5a:	221f      	movs	r2, #31
 8007f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f60:	43db      	mvns	r3, r3
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	4013      	ands	r3, r2
 8007f66:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f003 0310 	and.w	r3, r3, #16
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	fa02 f303 	lsl.w	r3, r2, r3
 8007f7a:	69ba      	ldr	r2, [r7, #24]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	69ba      	ldr	r2, [r7, #24]
 8007f86:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f8e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f003 0310 	and.w	r3, r3, #16
 8007f96:	2207      	movs	r2, #7
 8007f98:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9c:	43db      	mvns	r3, r3
 8007f9e:	69ba      	ldr	r2, [r7, #24]
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d102      	bne.n	8007fb2 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8007fac:	2300      	movs	r3, #0
 8007fae:	627b      	str	r3, [r7, #36]	; 0x24
 8007fb0:	e00f      	b.n	8007fd2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d102      	bne.n	8007fc0 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8007fbe:	e008      	b.n	8007fd2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d102      	bne.n	8007fce <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	627b      	str	r3, [r7, #36]	; 0x24
 8007fcc:	e001      	b.n	8007fd2 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f003 0310 	and.w	r3, r3, #16
 8007fe8:	697a      	ldr	r2, [r7, #20]
 8007fea:	fa02 f303 	lsl.w	r3, r2, r3
 8007fee:	69ba      	ldr	r2, [r7, #24]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	69ba      	ldr	r2, [r7, #24]
 8007ffa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	6819      	ldr	r1, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f003 0310 	and.w	r3, r3, #16
 8008008:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800800c:	fa02 f303 	lsl.w	r3, r2, r3
 8008010:	43da      	mvns	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	400a      	ands	r2, r1
 8008018:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f003 0310 	and.w	r3, r3, #16
 8008028:	f640 72fe 	movw	r2, #4094	; 0xffe
 800802c:	fa02 f303 	lsl.w	r3, r2, r3
 8008030:	43db      	mvns	r3, r3
 8008032:	69ba      	ldr	r2, [r7, #24]
 8008034:	4013      	ands	r3, r2
 8008036:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f003 0310 	and.w	r3, r3, #16
 8008044:	697a      	ldr	r2, [r7, #20]
 8008046:	fa02 f303 	lsl.w	r3, r2, r3
 800804a:	69ba      	ldr	r2, [r7, #24]
 800804c:	4313      	orrs	r3, r2
 800804e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	69ba      	ldr	r2, [r7, #24]
 8008056:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	6819      	ldr	r1, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f003 0310 	and.w	r3, r3, #16
 8008064:	22c0      	movs	r2, #192	; 0xc0
 8008066:	fa02 f303 	lsl.w	r3, r2, r3
 800806a:	43da      	mvns	r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	400a      	ands	r2, r1
 8008072:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2201      	movs	r2, #1
 8008078:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8008080:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008084:	4618      	mov	r0, r3
 8008086:	3728      	adds	r7, #40	; 0x28
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	20008000 	.word	0x20008000

08008090 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f7ff fe8b 	bl	8007dba <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2201      	movs	r2, #1
 80080a8:	711a      	strb	r2, [r3, #4]
}
 80080aa:	bf00      	nop
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b084      	sub	sp, #16
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080be:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	f7ff fe84 	bl	8007dce <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80080c6:	bf00      	nop
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b084      	sub	sp, #16
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080da:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	f043 0204 	orr.w	r2, r3, #4
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f7ff fe7a 	bl	8007de2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2201      	movs	r2, #1
 80080f2:	711a      	strb	r2, [r3, #4]
}
 80080f4:	bf00      	nop
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800812c:	bf00      	nop
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008158:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f7ff ffce 	bl	80080fc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2201      	movs	r2, #1
 8008164:	711a      	strb	r2, [r3, #4]
}
 8008166:	bf00      	nop
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b084      	sub	sp, #16
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800817a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f7ff ffc7 	bl	8008110 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008182:	bf00      	nop
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b084      	sub	sp, #16
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008196:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	f043 0204 	orr.w	r2, r3, #4
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f7ff ffbd 	bl	8008124 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2201      	movs	r2, #1
 80081ae:	711a      	strb	r2, [r3, #4]
}
 80081b0:	bf00      	nop
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80081c0:	f7fd fed2 	bl	8005f68 <HAL_GetTick>
 80081c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e316      	b.n	80087fe <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a66      	ldr	r2, [pc, #408]	; (8008370 <HAL_DMA_Init+0x1b8>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d04a      	beq.n	8008270 <HAL_DMA_Init+0xb8>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a65      	ldr	r2, [pc, #404]	; (8008374 <HAL_DMA_Init+0x1bc>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d045      	beq.n	8008270 <HAL_DMA_Init+0xb8>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a63      	ldr	r2, [pc, #396]	; (8008378 <HAL_DMA_Init+0x1c0>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d040      	beq.n	8008270 <HAL_DMA_Init+0xb8>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a62      	ldr	r2, [pc, #392]	; (800837c <HAL_DMA_Init+0x1c4>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d03b      	beq.n	8008270 <HAL_DMA_Init+0xb8>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a60      	ldr	r2, [pc, #384]	; (8008380 <HAL_DMA_Init+0x1c8>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d036      	beq.n	8008270 <HAL_DMA_Init+0xb8>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a5f      	ldr	r2, [pc, #380]	; (8008384 <HAL_DMA_Init+0x1cc>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d031      	beq.n	8008270 <HAL_DMA_Init+0xb8>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a5d      	ldr	r2, [pc, #372]	; (8008388 <HAL_DMA_Init+0x1d0>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d02c      	beq.n	8008270 <HAL_DMA_Init+0xb8>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a5c      	ldr	r2, [pc, #368]	; (800838c <HAL_DMA_Init+0x1d4>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d027      	beq.n	8008270 <HAL_DMA_Init+0xb8>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a5a      	ldr	r2, [pc, #360]	; (8008390 <HAL_DMA_Init+0x1d8>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d022      	beq.n	8008270 <HAL_DMA_Init+0xb8>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a59      	ldr	r2, [pc, #356]	; (8008394 <HAL_DMA_Init+0x1dc>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d01d      	beq.n	8008270 <HAL_DMA_Init+0xb8>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a57      	ldr	r2, [pc, #348]	; (8008398 <HAL_DMA_Init+0x1e0>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d018      	beq.n	8008270 <HAL_DMA_Init+0xb8>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a56      	ldr	r2, [pc, #344]	; (800839c <HAL_DMA_Init+0x1e4>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d013      	beq.n	8008270 <HAL_DMA_Init+0xb8>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a54      	ldr	r2, [pc, #336]	; (80083a0 <HAL_DMA_Init+0x1e8>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d00e      	beq.n	8008270 <HAL_DMA_Init+0xb8>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a53      	ldr	r2, [pc, #332]	; (80083a4 <HAL_DMA_Init+0x1ec>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d009      	beq.n	8008270 <HAL_DMA_Init+0xb8>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a51      	ldr	r2, [pc, #324]	; (80083a8 <HAL_DMA_Init+0x1f0>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d004      	beq.n	8008270 <HAL_DMA_Init+0xb8>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a50      	ldr	r2, [pc, #320]	; (80083ac <HAL_DMA_Init+0x1f4>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d101      	bne.n	8008274 <HAL_DMA_Init+0xbc>
 8008270:	2301      	movs	r3, #1
 8008272:	e000      	b.n	8008276 <HAL_DMA_Init+0xbe>
 8008274:	2300      	movs	r3, #0
 8008276:	2b00      	cmp	r3, #0
 8008278:	f000 813b 	beq.w	80084f2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2202      	movs	r2, #2
 8008280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a37      	ldr	r2, [pc, #220]	; (8008370 <HAL_DMA_Init+0x1b8>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d04a      	beq.n	800832c <HAL_DMA_Init+0x174>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a36      	ldr	r2, [pc, #216]	; (8008374 <HAL_DMA_Init+0x1bc>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d045      	beq.n	800832c <HAL_DMA_Init+0x174>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a34      	ldr	r2, [pc, #208]	; (8008378 <HAL_DMA_Init+0x1c0>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d040      	beq.n	800832c <HAL_DMA_Init+0x174>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a33      	ldr	r2, [pc, #204]	; (800837c <HAL_DMA_Init+0x1c4>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d03b      	beq.n	800832c <HAL_DMA_Init+0x174>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a31      	ldr	r2, [pc, #196]	; (8008380 <HAL_DMA_Init+0x1c8>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d036      	beq.n	800832c <HAL_DMA_Init+0x174>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a30      	ldr	r2, [pc, #192]	; (8008384 <HAL_DMA_Init+0x1cc>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d031      	beq.n	800832c <HAL_DMA_Init+0x174>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a2e      	ldr	r2, [pc, #184]	; (8008388 <HAL_DMA_Init+0x1d0>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d02c      	beq.n	800832c <HAL_DMA_Init+0x174>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a2d      	ldr	r2, [pc, #180]	; (800838c <HAL_DMA_Init+0x1d4>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d027      	beq.n	800832c <HAL_DMA_Init+0x174>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a2b      	ldr	r2, [pc, #172]	; (8008390 <HAL_DMA_Init+0x1d8>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d022      	beq.n	800832c <HAL_DMA_Init+0x174>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a2a      	ldr	r2, [pc, #168]	; (8008394 <HAL_DMA_Init+0x1dc>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d01d      	beq.n	800832c <HAL_DMA_Init+0x174>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a28      	ldr	r2, [pc, #160]	; (8008398 <HAL_DMA_Init+0x1e0>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d018      	beq.n	800832c <HAL_DMA_Init+0x174>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a27      	ldr	r2, [pc, #156]	; (800839c <HAL_DMA_Init+0x1e4>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d013      	beq.n	800832c <HAL_DMA_Init+0x174>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a25      	ldr	r2, [pc, #148]	; (80083a0 <HAL_DMA_Init+0x1e8>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d00e      	beq.n	800832c <HAL_DMA_Init+0x174>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a24      	ldr	r2, [pc, #144]	; (80083a4 <HAL_DMA_Init+0x1ec>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d009      	beq.n	800832c <HAL_DMA_Init+0x174>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a22      	ldr	r2, [pc, #136]	; (80083a8 <HAL_DMA_Init+0x1f0>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d004      	beq.n	800832c <HAL_DMA_Init+0x174>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a21      	ldr	r2, [pc, #132]	; (80083ac <HAL_DMA_Init+0x1f4>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d108      	bne.n	800833e <HAL_DMA_Init+0x186>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f022 0201 	bic.w	r2, r2, #1
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	e007      	b.n	800834e <HAL_DMA_Init+0x196>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f022 0201 	bic.w	r2, r2, #1
 800834c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800834e:	e02f      	b.n	80083b0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008350:	f7fd fe0a 	bl	8005f68 <HAL_GetTick>
 8008354:	4602      	mov	r2, r0
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	2b05      	cmp	r3, #5
 800835c:	d928      	bls.n	80083b0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2220      	movs	r2, #32
 8008362:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2203      	movs	r2, #3
 8008368:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	e246      	b.n	80087fe <HAL_DMA_Init+0x646>
 8008370:	40020010 	.word	0x40020010
 8008374:	40020028 	.word	0x40020028
 8008378:	40020040 	.word	0x40020040
 800837c:	40020058 	.word	0x40020058
 8008380:	40020070 	.word	0x40020070
 8008384:	40020088 	.word	0x40020088
 8008388:	400200a0 	.word	0x400200a0
 800838c:	400200b8 	.word	0x400200b8
 8008390:	40020410 	.word	0x40020410
 8008394:	40020428 	.word	0x40020428
 8008398:	40020440 	.word	0x40020440
 800839c:	40020458 	.word	0x40020458
 80083a0:	40020470 	.word	0x40020470
 80083a4:	40020488 	.word	0x40020488
 80083a8:	400204a0 	.word	0x400204a0
 80083ac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0301 	and.w	r3, r3, #1
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1c8      	bne.n	8008350 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80083c6:	697a      	ldr	r2, [r7, #20]
 80083c8:	4b83      	ldr	r3, [pc, #524]	; (80085d8 <HAL_DMA_Init+0x420>)
 80083ca:	4013      	ands	r3, r2
 80083cc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80083d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80083e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80083ee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6a1b      	ldr	r3, [r3, #32]
 80083f4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008400:	2b04      	cmp	r3, #4
 8008402:	d107      	bne.n	8008414 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840c:	4313      	orrs	r3, r2
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	4313      	orrs	r3, r2
 8008412:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8008414:	4b71      	ldr	r3, [pc, #452]	; (80085dc <HAL_DMA_Init+0x424>)
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	4b71      	ldr	r3, [pc, #452]	; (80085e0 <HAL_DMA_Init+0x428>)
 800841a:	4013      	ands	r3, r2
 800841c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008420:	d328      	bcc.n	8008474 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	2b28      	cmp	r3, #40	; 0x28
 8008428:	d903      	bls.n	8008432 <HAL_DMA_Init+0x27a>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	2b2e      	cmp	r3, #46	; 0x2e
 8008430:	d917      	bls.n	8008462 <HAL_DMA_Init+0x2aa>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	2b3e      	cmp	r3, #62	; 0x3e
 8008438:	d903      	bls.n	8008442 <HAL_DMA_Init+0x28a>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	2b42      	cmp	r3, #66	; 0x42
 8008440:	d90f      	bls.n	8008462 <HAL_DMA_Init+0x2aa>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	2b46      	cmp	r3, #70	; 0x46
 8008448:	d903      	bls.n	8008452 <HAL_DMA_Init+0x29a>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	2b48      	cmp	r3, #72	; 0x48
 8008450:	d907      	bls.n	8008462 <HAL_DMA_Init+0x2aa>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	2b4e      	cmp	r3, #78	; 0x4e
 8008458:	d905      	bls.n	8008466 <HAL_DMA_Init+0x2ae>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	2b52      	cmp	r3, #82	; 0x52
 8008460:	d801      	bhi.n	8008466 <HAL_DMA_Init+0x2ae>
 8008462:	2301      	movs	r3, #1
 8008464:	e000      	b.n	8008468 <HAL_DMA_Init+0x2b0>
 8008466:	2300      	movs	r3, #0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d003      	beq.n	8008474 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008472:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	695b      	ldr	r3, [r3, #20]
 8008482:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	f023 0307 	bic.w	r3, r3, #7
 800848a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008490:	697a      	ldr	r2, [r7, #20]
 8008492:	4313      	orrs	r3, r2
 8008494:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849a:	2b04      	cmp	r3, #4
 800849c:	d117      	bne.n	80084ce <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00e      	beq.n	80084ce <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f002 fb4d 	bl	800ab50 <DMA_CheckFifoParam>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d008      	beq.n	80084ce <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2240      	movs	r2, #64	; 0x40
 80084c0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e197      	b.n	80087fe <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f002 fa88 	bl	800a9ec <DMA_CalcBaseAndBitshift>
 80084dc:	4603      	mov	r3, r0
 80084de:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084e4:	f003 031f 	and.w	r3, r3, #31
 80084e8:	223f      	movs	r2, #63	; 0x3f
 80084ea:	409a      	lsls	r2, r3
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	609a      	str	r2, [r3, #8]
 80084f0:	e0cd      	b.n	800868e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a3b      	ldr	r2, [pc, #236]	; (80085e4 <HAL_DMA_Init+0x42c>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d022      	beq.n	8008542 <HAL_DMA_Init+0x38a>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a39      	ldr	r2, [pc, #228]	; (80085e8 <HAL_DMA_Init+0x430>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d01d      	beq.n	8008542 <HAL_DMA_Init+0x38a>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a38      	ldr	r2, [pc, #224]	; (80085ec <HAL_DMA_Init+0x434>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d018      	beq.n	8008542 <HAL_DMA_Init+0x38a>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a36      	ldr	r2, [pc, #216]	; (80085f0 <HAL_DMA_Init+0x438>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d013      	beq.n	8008542 <HAL_DMA_Init+0x38a>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a35      	ldr	r2, [pc, #212]	; (80085f4 <HAL_DMA_Init+0x43c>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d00e      	beq.n	8008542 <HAL_DMA_Init+0x38a>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a33      	ldr	r2, [pc, #204]	; (80085f8 <HAL_DMA_Init+0x440>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d009      	beq.n	8008542 <HAL_DMA_Init+0x38a>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a32      	ldr	r2, [pc, #200]	; (80085fc <HAL_DMA_Init+0x444>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d004      	beq.n	8008542 <HAL_DMA_Init+0x38a>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a30      	ldr	r2, [pc, #192]	; (8008600 <HAL_DMA_Init+0x448>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d101      	bne.n	8008546 <HAL_DMA_Init+0x38e>
 8008542:	2301      	movs	r3, #1
 8008544:	e000      	b.n	8008548 <HAL_DMA_Init+0x390>
 8008546:	2300      	movs	r3, #0
 8008548:	2b00      	cmp	r3, #0
 800854a:	f000 8097 	beq.w	800867c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a24      	ldr	r2, [pc, #144]	; (80085e4 <HAL_DMA_Init+0x42c>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d021      	beq.n	800859c <HAL_DMA_Init+0x3e4>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a22      	ldr	r2, [pc, #136]	; (80085e8 <HAL_DMA_Init+0x430>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d01c      	beq.n	800859c <HAL_DMA_Init+0x3e4>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a21      	ldr	r2, [pc, #132]	; (80085ec <HAL_DMA_Init+0x434>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d017      	beq.n	800859c <HAL_DMA_Init+0x3e4>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a1f      	ldr	r2, [pc, #124]	; (80085f0 <HAL_DMA_Init+0x438>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d012      	beq.n	800859c <HAL_DMA_Init+0x3e4>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a1e      	ldr	r2, [pc, #120]	; (80085f4 <HAL_DMA_Init+0x43c>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d00d      	beq.n	800859c <HAL_DMA_Init+0x3e4>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a1c      	ldr	r2, [pc, #112]	; (80085f8 <HAL_DMA_Init+0x440>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d008      	beq.n	800859c <HAL_DMA_Init+0x3e4>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a1b      	ldr	r2, [pc, #108]	; (80085fc <HAL_DMA_Init+0x444>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d003      	beq.n	800859c <HAL_DMA_Init+0x3e4>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a19      	ldr	r2, [pc, #100]	; (8008600 <HAL_DMA_Init+0x448>)
 800859a:	4293      	cmp	r3, r2
 800859c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2202      	movs	r2, #2
 80085a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	4b12      	ldr	r3, [pc, #72]	; (8008604 <HAL_DMA_Init+0x44c>)
 80085ba:	4013      	ands	r3, r2
 80085bc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	2b40      	cmp	r3, #64	; 0x40
 80085c4:	d020      	beq.n	8008608 <HAL_DMA_Init+0x450>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	2b80      	cmp	r3, #128	; 0x80
 80085cc:	d102      	bne.n	80085d4 <HAL_DMA_Init+0x41c>
 80085ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80085d2:	e01a      	b.n	800860a <HAL_DMA_Init+0x452>
 80085d4:	2300      	movs	r3, #0
 80085d6:	e018      	b.n	800860a <HAL_DMA_Init+0x452>
 80085d8:	fe10803f 	.word	0xfe10803f
 80085dc:	5c001000 	.word	0x5c001000
 80085e0:	ffff0000 	.word	0xffff0000
 80085e4:	58025408 	.word	0x58025408
 80085e8:	5802541c 	.word	0x5802541c
 80085ec:	58025430 	.word	0x58025430
 80085f0:	58025444 	.word	0x58025444
 80085f4:	58025458 	.word	0x58025458
 80085f8:	5802546c 	.word	0x5802546c
 80085fc:	58025480 	.word	0x58025480
 8008600:	58025494 	.word	0x58025494
 8008604:	fffe000f 	.word	0xfffe000f
 8008608:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	68d2      	ldr	r2, [r2, #12]
 800860e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008610:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8008618:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	695b      	ldr	r3, [r3, #20]
 800861e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008620:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8008628:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008630:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6a1b      	ldr	r3, [r3, #32]
 8008636:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008638:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800863a:	697a      	ldr	r2, [r7, #20]
 800863c:	4313      	orrs	r3, r2
 800863e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	461a      	mov	r2, r3
 800864e:	4b6e      	ldr	r3, [pc, #440]	; (8008808 <HAL_DMA_Init+0x650>)
 8008650:	4413      	add	r3, r2
 8008652:	4a6e      	ldr	r2, [pc, #440]	; (800880c <HAL_DMA_Init+0x654>)
 8008654:	fba2 2303 	umull	r2, r3, r2, r3
 8008658:	091b      	lsrs	r3, r3, #4
 800865a:	009a      	lsls	r2, r3, #2
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f002 f9c3 	bl	800a9ec <DMA_CalcBaseAndBitshift>
 8008666:	4603      	mov	r3, r0
 8008668:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800866e:	f003 031f 	and.w	r3, r3, #31
 8008672:	2201      	movs	r2, #1
 8008674:	409a      	lsls	r2, r3
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	605a      	str	r2, [r3, #4]
 800867a:	e008      	b.n	800868e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2240      	movs	r2, #64	; 0x40
 8008680:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2203      	movs	r2, #3
 8008686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e0b7      	b.n	80087fe <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a5f      	ldr	r2, [pc, #380]	; (8008810 <HAL_DMA_Init+0x658>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d072      	beq.n	800877e <HAL_DMA_Init+0x5c6>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a5d      	ldr	r2, [pc, #372]	; (8008814 <HAL_DMA_Init+0x65c>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d06d      	beq.n	800877e <HAL_DMA_Init+0x5c6>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a5c      	ldr	r2, [pc, #368]	; (8008818 <HAL_DMA_Init+0x660>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d068      	beq.n	800877e <HAL_DMA_Init+0x5c6>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a5a      	ldr	r2, [pc, #360]	; (800881c <HAL_DMA_Init+0x664>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d063      	beq.n	800877e <HAL_DMA_Init+0x5c6>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a59      	ldr	r2, [pc, #356]	; (8008820 <HAL_DMA_Init+0x668>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d05e      	beq.n	800877e <HAL_DMA_Init+0x5c6>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a57      	ldr	r2, [pc, #348]	; (8008824 <HAL_DMA_Init+0x66c>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d059      	beq.n	800877e <HAL_DMA_Init+0x5c6>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a56      	ldr	r2, [pc, #344]	; (8008828 <HAL_DMA_Init+0x670>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d054      	beq.n	800877e <HAL_DMA_Init+0x5c6>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a54      	ldr	r2, [pc, #336]	; (800882c <HAL_DMA_Init+0x674>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d04f      	beq.n	800877e <HAL_DMA_Init+0x5c6>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a53      	ldr	r2, [pc, #332]	; (8008830 <HAL_DMA_Init+0x678>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d04a      	beq.n	800877e <HAL_DMA_Init+0x5c6>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a51      	ldr	r2, [pc, #324]	; (8008834 <HAL_DMA_Init+0x67c>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d045      	beq.n	800877e <HAL_DMA_Init+0x5c6>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a50      	ldr	r2, [pc, #320]	; (8008838 <HAL_DMA_Init+0x680>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d040      	beq.n	800877e <HAL_DMA_Init+0x5c6>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a4e      	ldr	r2, [pc, #312]	; (800883c <HAL_DMA_Init+0x684>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d03b      	beq.n	800877e <HAL_DMA_Init+0x5c6>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a4d      	ldr	r2, [pc, #308]	; (8008840 <HAL_DMA_Init+0x688>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d036      	beq.n	800877e <HAL_DMA_Init+0x5c6>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a4b      	ldr	r2, [pc, #300]	; (8008844 <HAL_DMA_Init+0x68c>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d031      	beq.n	800877e <HAL_DMA_Init+0x5c6>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a4a      	ldr	r2, [pc, #296]	; (8008848 <HAL_DMA_Init+0x690>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d02c      	beq.n	800877e <HAL_DMA_Init+0x5c6>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a48      	ldr	r2, [pc, #288]	; (800884c <HAL_DMA_Init+0x694>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d027      	beq.n	800877e <HAL_DMA_Init+0x5c6>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a47      	ldr	r2, [pc, #284]	; (8008850 <HAL_DMA_Init+0x698>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d022      	beq.n	800877e <HAL_DMA_Init+0x5c6>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a45      	ldr	r2, [pc, #276]	; (8008854 <HAL_DMA_Init+0x69c>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d01d      	beq.n	800877e <HAL_DMA_Init+0x5c6>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a44      	ldr	r2, [pc, #272]	; (8008858 <HAL_DMA_Init+0x6a0>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d018      	beq.n	800877e <HAL_DMA_Init+0x5c6>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a42      	ldr	r2, [pc, #264]	; (800885c <HAL_DMA_Init+0x6a4>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d013      	beq.n	800877e <HAL_DMA_Init+0x5c6>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a41      	ldr	r2, [pc, #260]	; (8008860 <HAL_DMA_Init+0x6a8>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d00e      	beq.n	800877e <HAL_DMA_Init+0x5c6>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a3f      	ldr	r2, [pc, #252]	; (8008864 <HAL_DMA_Init+0x6ac>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d009      	beq.n	800877e <HAL_DMA_Init+0x5c6>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a3e      	ldr	r2, [pc, #248]	; (8008868 <HAL_DMA_Init+0x6b0>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d004      	beq.n	800877e <HAL_DMA_Init+0x5c6>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a3c      	ldr	r2, [pc, #240]	; (800886c <HAL_DMA_Init+0x6b4>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d101      	bne.n	8008782 <HAL_DMA_Init+0x5ca>
 800877e:	2301      	movs	r3, #1
 8008780:	e000      	b.n	8008784 <HAL_DMA_Init+0x5cc>
 8008782:	2300      	movs	r3, #0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d032      	beq.n	80087ee <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f002 fa5d 	bl	800ac48 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	2b80      	cmp	r3, #128	; 0x80
 8008794:	d102      	bne.n	800879c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	685a      	ldr	r2, [r3, #4]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087a4:	b2d2      	uxtb	r2, r2
 80087a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80087b0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d010      	beq.n	80087dc <HAL_DMA_Init+0x624>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	2b08      	cmp	r3, #8
 80087c0:	d80c      	bhi.n	80087dc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f002 fada 	bl	800ad7c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087cc:	2200      	movs	r2, #0
 80087ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80087d8:	605a      	str	r2, [r3, #4]
 80087da:	e008      	b.n	80087ee <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3718      	adds	r7, #24
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	a7fdabf8 	.word	0xa7fdabf8
 800880c:	cccccccd 	.word	0xcccccccd
 8008810:	40020010 	.word	0x40020010
 8008814:	40020028 	.word	0x40020028
 8008818:	40020040 	.word	0x40020040
 800881c:	40020058 	.word	0x40020058
 8008820:	40020070 	.word	0x40020070
 8008824:	40020088 	.word	0x40020088
 8008828:	400200a0 	.word	0x400200a0
 800882c:	400200b8 	.word	0x400200b8
 8008830:	40020410 	.word	0x40020410
 8008834:	40020428 	.word	0x40020428
 8008838:	40020440 	.word	0x40020440
 800883c:	40020458 	.word	0x40020458
 8008840:	40020470 	.word	0x40020470
 8008844:	40020488 	.word	0x40020488
 8008848:	400204a0 	.word	0x400204a0
 800884c:	400204b8 	.word	0x400204b8
 8008850:	58025408 	.word	0x58025408
 8008854:	5802541c 	.word	0x5802541c
 8008858:	58025430 	.word	0x58025430
 800885c:	58025444 	.word	0x58025444
 8008860:	58025458 	.word	0x58025458
 8008864:	5802546c 	.word	0x5802546c
 8008868:	58025480 	.word	0x58025480
 800886c:	58025494 	.word	0x58025494

08008870 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
 800887c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800887e:	2300      	movs	r3, #0
 8008880:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d101      	bne.n	800888c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e226      	b.n	8008cda <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008892:	2b01      	cmp	r3, #1
 8008894:	d101      	bne.n	800889a <HAL_DMA_Start_IT+0x2a>
 8008896:	2302      	movs	r3, #2
 8008898:	e21f      	b.n	8008cda <HAL_DMA_Start_IT+0x46a>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2201      	movs	r2, #1
 800889e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	f040 820a 	bne.w	8008cc4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2202      	movs	r2, #2
 80088b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2200      	movs	r2, #0
 80088bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a68      	ldr	r2, [pc, #416]	; (8008a64 <HAL_DMA_Start_IT+0x1f4>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d04a      	beq.n	800895e <HAL_DMA_Start_IT+0xee>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a66      	ldr	r2, [pc, #408]	; (8008a68 <HAL_DMA_Start_IT+0x1f8>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d045      	beq.n	800895e <HAL_DMA_Start_IT+0xee>
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a65      	ldr	r2, [pc, #404]	; (8008a6c <HAL_DMA_Start_IT+0x1fc>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d040      	beq.n	800895e <HAL_DMA_Start_IT+0xee>
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a63      	ldr	r2, [pc, #396]	; (8008a70 <HAL_DMA_Start_IT+0x200>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d03b      	beq.n	800895e <HAL_DMA_Start_IT+0xee>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a62      	ldr	r2, [pc, #392]	; (8008a74 <HAL_DMA_Start_IT+0x204>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d036      	beq.n	800895e <HAL_DMA_Start_IT+0xee>
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a60      	ldr	r2, [pc, #384]	; (8008a78 <HAL_DMA_Start_IT+0x208>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d031      	beq.n	800895e <HAL_DMA_Start_IT+0xee>
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a5f      	ldr	r2, [pc, #380]	; (8008a7c <HAL_DMA_Start_IT+0x20c>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d02c      	beq.n	800895e <HAL_DMA_Start_IT+0xee>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a5d      	ldr	r2, [pc, #372]	; (8008a80 <HAL_DMA_Start_IT+0x210>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d027      	beq.n	800895e <HAL_DMA_Start_IT+0xee>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a5c      	ldr	r2, [pc, #368]	; (8008a84 <HAL_DMA_Start_IT+0x214>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d022      	beq.n	800895e <HAL_DMA_Start_IT+0xee>
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a5a      	ldr	r2, [pc, #360]	; (8008a88 <HAL_DMA_Start_IT+0x218>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d01d      	beq.n	800895e <HAL_DMA_Start_IT+0xee>
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a59      	ldr	r2, [pc, #356]	; (8008a8c <HAL_DMA_Start_IT+0x21c>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d018      	beq.n	800895e <HAL_DMA_Start_IT+0xee>
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a57      	ldr	r2, [pc, #348]	; (8008a90 <HAL_DMA_Start_IT+0x220>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d013      	beq.n	800895e <HAL_DMA_Start_IT+0xee>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a56      	ldr	r2, [pc, #344]	; (8008a94 <HAL_DMA_Start_IT+0x224>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d00e      	beq.n	800895e <HAL_DMA_Start_IT+0xee>
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a54      	ldr	r2, [pc, #336]	; (8008a98 <HAL_DMA_Start_IT+0x228>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d009      	beq.n	800895e <HAL_DMA_Start_IT+0xee>
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a53      	ldr	r2, [pc, #332]	; (8008a9c <HAL_DMA_Start_IT+0x22c>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d004      	beq.n	800895e <HAL_DMA_Start_IT+0xee>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a51      	ldr	r2, [pc, #324]	; (8008aa0 <HAL_DMA_Start_IT+0x230>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d108      	bne.n	8008970 <HAL_DMA_Start_IT+0x100>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f022 0201 	bic.w	r2, r2, #1
 800896c:	601a      	str	r2, [r3, #0]
 800896e:	e007      	b.n	8008980 <HAL_DMA_Start_IT+0x110>
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f022 0201 	bic.w	r2, r2, #1
 800897e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	68b9      	ldr	r1, [r7, #8]
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	f001 fe84 	bl	800a694 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a34      	ldr	r2, [pc, #208]	; (8008a64 <HAL_DMA_Start_IT+0x1f4>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d04a      	beq.n	8008a2c <HAL_DMA_Start_IT+0x1bc>
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a33      	ldr	r2, [pc, #204]	; (8008a68 <HAL_DMA_Start_IT+0x1f8>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d045      	beq.n	8008a2c <HAL_DMA_Start_IT+0x1bc>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a31      	ldr	r2, [pc, #196]	; (8008a6c <HAL_DMA_Start_IT+0x1fc>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d040      	beq.n	8008a2c <HAL_DMA_Start_IT+0x1bc>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a30      	ldr	r2, [pc, #192]	; (8008a70 <HAL_DMA_Start_IT+0x200>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d03b      	beq.n	8008a2c <HAL_DMA_Start_IT+0x1bc>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a2e      	ldr	r2, [pc, #184]	; (8008a74 <HAL_DMA_Start_IT+0x204>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d036      	beq.n	8008a2c <HAL_DMA_Start_IT+0x1bc>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a2d      	ldr	r2, [pc, #180]	; (8008a78 <HAL_DMA_Start_IT+0x208>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d031      	beq.n	8008a2c <HAL_DMA_Start_IT+0x1bc>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a2b      	ldr	r2, [pc, #172]	; (8008a7c <HAL_DMA_Start_IT+0x20c>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d02c      	beq.n	8008a2c <HAL_DMA_Start_IT+0x1bc>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a2a      	ldr	r2, [pc, #168]	; (8008a80 <HAL_DMA_Start_IT+0x210>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d027      	beq.n	8008a2c <HAL_DMA_Start_IT+0x1bc>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a28      	ldr	r2, [pc, #160]	; (8008a84 <HAL_DMA_Start_IT+0x214>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d022      	beq.n	8008a2c <HAL_DMA_Start_IT+0x1bc>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a27      	ldr	r2, [pc, #156]	; (8008a88 <HAL_DMA_Start_IT+0x218>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d01d      	beq.n	8008a2c <HAL_DMA_Start_IT+0x1bc>
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a25      	ldr	r2, [pc, #148]	; (8008a8c <HAL_DMA_Start_IT+0x21c>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d018      	beq.n	8008a2c <HAL_DMA_Start_IT+0x1bc>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a24      	ldr	r2, [pc, #144]	; (8008a90 <HAL_DMA_Start_IT+0x220>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d013      	beq.n	8008a2c <HAL_DMA_Start_IT+0x1bc>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a22      	ldr	r2, [pc, #136]	; (8008a94 <HAL_DMA_Start_IT+0x224>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d00e      	beq.n	8008a2c <HAL_DMA_Start_IT+0x1bc>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a21      	ldr	r2, [pc, #132]	; (8008a98 <HAL_DMA_Start_IT+0x228>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d009      	beq.n	8008a2c <HAL_DMA_Start_IT+0x1bc>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a1f      	ldr	r2, [pc, #124]	; (8008a9c <HAL_DMA_Start_IT+0x22c>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d004      	beq.n	8008a2c <HAL_DMA_Start_IT+0x1bc>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a1e      	ldr	r2, [pc, #120]	; (8008aa0 <HAL_DMA_Start_IT+0x230>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d101      	bne.n	8008a30 <HAL_DMA_Start_IT+0x1c0>
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e000      	b.n	8008a32 <HAL_DMA_Start_IT+0x1c2>
 8008a30:	2300      	movs	r3, #0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d036      	beq.n	8008aa4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f023 021e 	bic.w	r2, r3, #30
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f042 0216 	orr.w	r2, r2, #22
 8008a48:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d03e      	beq.n	8008ad0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f042 0208 	orr.w	r2, r2, #8
 8008a60:	601a      	str	r2, [r3, #0]
 8008a62:	e035      	b.n	8008ad0 <HAL_DMA_Start_IT+0x260>
 8008a64:	40020010 	.word	0x40020010
 8008a68:	40020028 	.word	0x40020028
 8008a6c:	40020040 	.word	0x40020040
 8008a70:	40020058 	.word	0x40020058
 8008a74:	40020070 	.word	0x40020070
 8008a78:	40020088 	.word	0x40020088
 8008a7c:	400200a0 	.word	0x400200a0
 8008a80:	400200b8 	.word	0x400200b8
 8008a84:	40020410 	.word	0x40020410
 8008a88:	40020428 	.word	0x40020428
 8008a8c:	40020440 	.word	0x40020440
 8008a90:	40020458 	.word	0x40020458
 8008a94:	40020470 	.word	0x40020470
 8008a98:	40020488 	.word	0x40020488
 8008a9c:	400204a0 	.word	0x400204a0
 8008aa0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f023 020e 	bic.w	r2, r3, #14
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f042 020a 	orr.w	r2, r2, #10
 8008ab6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d007      	beq.n	8008ad0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f042 0204 	orr.w	r2, r2, #4
 8008ace:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a83      	ldr	r2, [pc, #524]	; (8008ce4 <HAL_DMA_Start_IT+0x474>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d072      	beq.n	8008bc0 <HAL_DMA_Start_IT+0x350>
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a82      	ldr	r2, [pc, #520]	; (8008ce8 <HAL_DMA_Start_IT+0x478>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d06d      	beq.n	8008bc0 <HAL_DMA_Start_IT+0x350>
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a80      	ldr	r2, [pc, #512]	; (8008cec <HAL_DMA_Start_IT+0x47c>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d068      	beq.n	8008bc0 <HAL_DMA_Start_IT+0x350>
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a7f      	ldr	r2, [pc, #508]	; (8008cf0 <HAL_DMA_Start_IT+0x480>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d063      	beq.n	8008bc0 <HAL_DMA_Start_IT+0x350>
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a7d      	ldr	r2, [pc, #500]	; (8008cf4 <HAL_DMA_Start_IT+0x484>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d05e      	beq.n	8008bc0 <HAL_DMA_Start_IT+0x350>
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a7c      	ldr	r2, [pc, #496]	; (8008cf8 <HAL_DMA_Start_IT+0x488>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d059      	beq.n	8008bc0 <HAL_DMA_Start_IT+0x350>
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a7a      	ldr	r2, [pc, #488]	; (8008cfc <HAL_DMA_Start_IT+0x48c>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d054      	beq.n	8008bc0 <HAL_DMA_Start_IT+0x350>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a79      	ldr	r2, [pc, #484]	; (8008d00 <HAL_DMA_Start_IT+0x490>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d04f      	beq.n	8008bc0 <HAL_DMA_Start_IT+0x350>
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a77      	ldr	r2, [pc, #476]	; (8008d04 <HAL_DMA_Start_IT+0x494>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d04a      	beq.n	8008bc0 <HAL_DMA_Start_IT+0x350>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a76      	ldr	r2, [pc, #472]	; (8008d08 <HAL_DMA_Start_IT+0x498>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d045      	beq.n	8008bc0 <HAL_DMA_Start_IT+0x350>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a74      	ldr	r2, [pc, #464]	; (8008d0c <HAL_DMA_Start_IT+0x49c>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d040      	beq.n	8008bc0 <HAL_DMA_Start_IT+0x350>
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a73      	ldr	r2, [pc, #460]	; (8008d10 <HAL_DMA_Start_IT+0x4a0>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d03b      	beq.n	8008bc0 <HAL_DMA_Start_IT+0x350>
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a71      	ldr	r2, [pc, #452]	; (8008d14 <HAL_DMA_Start_IT+0x4a4>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d036      	beq.n	8008bc0 <HAL_DMA_Start_IT+0x350>
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a70      	ldr	r2, [pc, #448]	; (8008d18 <HAL_DMA_Start_IT+0x4a8>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d031      	beq.n	8008bc0 <HAL_DMA_Start_IT+0x350>
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a6e      	ldr	r2, [pc, #440]	; (8008d1c <HAL_DMA_Start_IT+0x4ac>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d02c      	beq.n	8008bc0 <HAL_DMA_Start_IT+0x350>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a6d      	ldr	r2, [pc, #436]	; (8008d20 <HAL_DMA_Start_IT+0x4b0>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d027      	beq.n	8008bc0 <HAL_DMA_Start_IT+0x350>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a6b      	ldr	r2, [pc, #428]	; (8008d24 <HAL_DMA_Start_IT+0x4b4>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d022      	beq.n	8008bc0 <HAL_DMA_Start_IT+0x350>
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a6a      	ldr	r2, [pc, #424]	; (8008d28 <HAL_DMA_Start_IT+0x4b8>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d01d      	beq.n	8008bc0 <HAL_DMA_Start_IT+0x350>
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a68      	ldr	r2, [pc, #416]	; (8008d2c <HAL_DMA_Start_IT+0x4bc>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d018      	beq.n	8008bc0 <HAL_DMA_Start_IT+0x350>
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a67      	ldr	r2, [pc, #412]	; (8008d30 <HAL_DMA_Start_IT+0x4c0>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d013      	beq.n	8008bc0 <HAL_DMA_Start_IT+0x350>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a65      	ldr	r2, [pc, #404]	; (8008d34 <HAL_DMA_Start_IT+0x4c4>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d00e      	beq.n	8008bc0 <HAL_DMA_Start_IT+0x350>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a64      	ldr	r2, [pc, #400]	; (8008d38 <HAL_DMA_Start_IT+0x4c8>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d009      	beq.n	8008bc0 <HAL_DMA_Start_IT+0x350>
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a62      	ldr	r2, [pc, #392]	; (8008d3c <HAL_DMA_Start_IT+0x4cc>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d004      	beq.n	8008bc0 <HAL_DMA_Start_IT+0x350>
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a61      	ldr	r2, [pc, #388]	; (8008d40 <HAL_DMA_Start_IT+0x4d0>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d101      	bne.n	8008bc4 <HAL_DMA_Start_IT+0x354>
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e000      	b.n	8008bc6 <HAL_DMA_Start_IT+0x356>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d01a      	beq.n	8008c00 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d007      	beq.n	8008be8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008be6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d007      	beq.n	8008c00 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bfe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a37      	ldr	r2, [pc, #220]	; (8008ce4 <HAL_DMA_Start_IT+0x474>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d04a      	beq.n	8008ca0 <HAL_DMA_Start_IT+0x430>
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a36      	ldr	r2, [pc, #216]	; (8008ce8 <HAL_DMA_Start_IT+0x478>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d045      	beq.n	8008ca0 <HAL_DMA_Start_IT+0x430>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a34      	ldr	r2, [pc, #208]	; (8008cec <HAL_DMA_Start_IT+0x47c>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d040      	beq.n	8008ca0 <HAL_DMA_Start_IT+0x430>
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a33      	ldr	r2, [pc, #204]	; (8008cf0 <HAL_DMA_Start_IT+0x480>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d03b      	beq.n	8008ca0 <HAL_DMA_Start_IT+0x430>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a31      	ldr	r2, [pc, #196]	; (8008cf4 <HAL_DMA_Start_IT+0x484>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d036      	beq.n	8008ca0 <HAL_DMA_Start_IT+0x430>
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a30      	ldr	r2, [pc, #192]	; (8008cf8 <HAL_DMA_Start_IT+0x488>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d031      	beq.n	8008ca0 <HAL_DMA_Start_IT+0x430>
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a2e      	ldr	r2, [pc, #184]	; (8008cfc <HAL_DMA_Start_IT+0x48c>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d02c      	beq.n	8008ca0 <HAL_DMA_Start_IT+0x430>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a2d      	ldr	r2, [pc, #180]	; (8008d00 <HAL_DMA_Start_IT+0x490>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d027      	beq.n	8008ca0 <HAL_DMA_Start_IT+0x430>
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a2b      	ldr	r2, [pc, #172]	; (8008d04 <HAL_DMA_Start_IT+0x494>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d022      	beq.n	8008ca0 <HAL_DMA_Start_IT+0x430>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a2a      	ldr	r2, [pc, #168]	; (8008d08 <HAL_DMA_Start_IT+0x498>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d01d      	beq.n	8008ca0 <HAL_DMA_Start_IT+0x430>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a28      	ldr	r2, [pc, #160]	; (8008d0c <HAL_DMA_Start_IT+0x49c>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d018      	beq.n	8008ca0 <HAL_DMA_Start_IT+0x430>
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a27      	ldr	r2, [pc, #156]	; (8008d10 <HAL_DMA_Start_IT+0x4a0>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d013      	beq.n	8008ca0 <HAL_DMA_Start_IT+0x430>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a25      	ldr	r2, [pc, #148]	; (8008d14 <HAL_DMA_Start_IT+0x4a4>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d00e      	beq.n	8008ca0 <HAL_DMA_Start_IT+0x430>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a24      	ldr	r2, [pc, #144]	; (8008d18 <HAL_DMA_Start_IT+0x4a8>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d009      	beq.n	8008ca0 <HAL_DMA_Start_IT+0x430>
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a22      	ldr	r2, [pc, #136]	; (8008d1c <HAL_DMA_Start_IT+0x4ac>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d004      	beq.n	8008ca0 <HAL_DMA_Start_IT+0x430>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a21      	ldr	r2, [pc, #132]	; (8008d20 <HAL_DMA_Start_IT+0x4b0>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d108      	bne.n	8008cb2 <HAL_DMA_Start_IT+0x442>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f042 0201 	orr.w	r2, r2, #1
 8008cae:	601a      	str	r2, [r3, #0]
 8008cb0:	e012      	b.n	8008cd8 <HAL_DMA_Start_IT+0x468>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f042 0201 	orr.w	r2, r2, #1
 8008cc0:	601a      	str	r2, [r3, #0]
 8008cc2:	e009      	b.n	8008cd8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008cca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3718      	adds	r7, #24
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	40020010 	.word	0x40020010
 8008ce8:	40020028 	.word	0x40020028
 8008cec:	40020040 	.word	0x40020040
 8008cf0:	40020058 	.word	0x40020058
 8008cf4:	40020070 	.word	0x40020070
 8008cf8:	40020088 	.word	0x40020088
 8008cfc:	400200a0 	.word	0x400200a0
 8008d00:	400200b8 	.word	0x400200b8
 8008d04:	40020410 	.word	0x40020410
 8008d08:	40020428 	.word	0x40020428
 8008d0c:	40020440 	.word	0x40020440
 8008d10:	40020458 	.word	0x40020458
 8008d14:	40020470 	.word	0x40020470
 8008d18:	40020488 	.word	0x40020488
 8008d1c:	400204a0 	.word	0x400204a0
 8008d20:	400204b8 	.word	0x400204b8
 8008d24:	58025408 	.word	0x58025408
 8008d28:	5802541c 	.word	0x5802541c
 8008d2c:	58025430 	.word	0x58025430
 8008d30:	58025444 	.word	0x58025444
 8008d34:	58025458 	.word	0x58025458
 8008d38:	5802546c 	.word	0x5802546c
 8008d3c:	58025480 	.word	0x58025480
 8008d40:	58025494 	.word	0x58025494

08008d44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b086      	sub	sp, #24
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8008d4c:	f7fd f90c 	bl	8005f68 <HAL_GetTick>
 8008d50:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d101      	bne.n	8008d5c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e2dc      	b.n	8009316 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d008      	beq.n	8008d7a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2280      	movs	r2, #128	; 0x80
 8008d6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e2cd      	b.n	8009316 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a76      	ldr	r2, [pc, #472]	; (8008f58 <HAL_DMA_Abort+0x214>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d04a      	beq.n	8008e1a <HAL_DMA_Abort+0xd6>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a74      	ldr	r2, [pc, #464]	; (8008f5c <HAL_DMA_Abort+0x218>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d045      	beq.n	8008e1a <HAL_DMA_Abort+0xd6>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a73      	ldr	r2, [pc, #460]	; (8008f60 <HAL_DMA_Abort+0x21c>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d040      	beq.n	8008e1a <HAL_DMA_Abort+0xd6>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a71      	ldr	r2, [pc, #452]	; (8008f64 <HAL_DMA_Abort+0x220>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d03b      	beq.n	8008e1a <HAL_DMA_Abort+0xd6>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a70      	ldr	r2, [pc, #448]	; (8008f68 <HAL_DMA_Abort+0x224>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d036      	beq.n	8008e1a <HAL_DMA_Abort+0xd6>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a6e      	ldr	r2, [pc, #440]	; (8008f6c <HAL_DMA_Abort+0x228>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d031      	beq.n	8008e1a <HAL_DMA_Abort+0xd6>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a6d      	ldr	r2, [pc, #436]	; (8008f70 <HAL_DMA_Abort+0x22c>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d02c      	beq.n	8008e1a <HAL_DMA_Abort+0xd6>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a6b      	ldr	r2, [pc, #428]	; (8008f74 <HAL_DMA_Abort+0x230>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d027      	beq.n	8008e1a <HAL_DMA_Abort+0xd6>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a6a      	ldr	r2, [pc, #424]	; (8008f78 <HAL_DMA_Abort+0x234>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d022      	beq.n	8008e1a <HAL_DMA_Abort+0xd6>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a68      	ldr	r2, [pc, #416]	; (8008f7c <HAL_DMA_Abort+0x238>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d01d      	beq.n	8008e1a <HAL_DMA_Abort+0xd6>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a67      	ldr	r2, [pc, #412]	; (8008f80 <HAL_DMA_Abort+0x23c>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d018      	beq.n	8008e1a <HAL_DMA_Abort+0xd6>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a65      	ldr	r2, [pc, #404]	; (8008f84 <HAL_DMA_Abort+0x240>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d013      	beq.n	8008e1a <HAL_DMA_Abort+0xd6>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a64      	ldr	r2, [pc, #400]	; (8008f88 <HAL_DMA_Abort+0x244>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d00e      	beq.n	8008e1a <HAL_DMA_Abort+0xd6>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a62      	ldr	r2, [pc, #392]	; (8008f8c <HAL_DMA_Abort+0x248>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d009      	beq.n	8008e1a <HAL_DMA_Abort+0xd6>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a61      	ldr	r2, [pc, #388]	; (8008f90 <HAL_DMA_Abort+0x24c>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d004      	beq.n	8008e1a <HAL_DMA_Abort+0xd6>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a5f      	ldr	r2, [pc, #380]	; (8008f94 <HAL_DMA_Abort+0x250>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d101      	bne.n	8008e1e <HAL_DMA_Abort+0xda>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e000      	b.n	8008e20 <HAL_DMA_Abort+0xdc>
 8008e1e:	2300      	movs	r3, #0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d013      	beq.n	8008e4c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f022 021e 	bic.w	r2, r2, #30
 8008e32:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	695a      	ldr	r2, [r3, #20]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e42:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	617b      	str	r3, [r7, #20]
 8008e4a:	e00a      	b.n	8008e62 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f022 020e 	bic.w	r2, r2, #14
 8008e5a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a3c      	ldr	r2, [pc, #240]	; (8008f58 <HAL_DMA_Abort+0x214>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d072      	beq.n	8008f52 <HAL_DMA_Abort+0x20e>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a3a      	ldr	r2, [pc, #232]	; (8008f5c <HAL_DMA_Abort+0x218>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d06d      	beq.n	8008f52 <HAL_DMA_Abort+0x20e>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a39      	ldr	r2, [pc, #228]	; (8008f60 <HAL_DMA_Abort+0x21c>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d068      	beq.n	8008f52 <HAL_DMA_Abort+0x20e>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a37      	ldr	r2, [pc, #220]	; (8008f64 <HAL_DMA_Abort+0x220>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d063      	beq.n	8008f52 <HAL_DMA_Abort+0x20e>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a36      	ldr	r2, [pc, #216]	; (8008f68 <HAL_DMA_Abort+0x224>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d05e      	beq.n	8008f52 <HAL_DMA_Abort+0x20e>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a34      	ldr	r2, [pc, #208]	; (8008f6c <HAL_DMA_Abort+0x228>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d059      	beq.n	8008f52 <HAL_DMA_Abort+0x20e>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a33      	ldr	r2, [pc, #204]	; (8008f70 <HAL_DMA_Abort+0x22c>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d054      	beq.n	8008f52 <HAL_DMA_Abort+0x20e>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a31      	ldr	r2, [pc, #196]	; (8008f74 <HAL_DMA_Abort+0x230>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d04f      	beq.n	8008f52 <HAL_DMA_Abort+0x20e>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a30      	ldr	r2, [pc, #192]	; (8008f78 <HAL_DMA_Abort+0x234>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d04a      	beq.n	8008f52 <HAL_DMA_Abort+0x20e>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a2e      	ldr	r2, [pc, #184]	; (8008f7c <HAL_DMA_Abort+0x238>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d045      	beq.n	8008f52 <HAL_DMA_Abort+0x20e>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a2d      	ldr	r2, [pc, #180]	; (8008f80 <HAL_DMA_Abort+0x23c>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d040      	beq.n	8008f52 <HAL_DMA_Abort+0x20e>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a2b      	ldr	r2, [pc, #172]	; (8008f84 <HAL_DMA_Abort+0x240>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d03b      	beq.n	8008f52 <HAL_DMA_Abort+0x20e>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a2a      	ldr	r2, [pc, #168]	; (8008f88 <HAL_DMA_Abort+0x244>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d036      	beq.n	8008f52 <HAL_DMA_Abort+0x20e>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a28      	ldr	r2, [pc, #160]	; (8008f8c <HAL_DMA_Abort+0x248>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d031      	beq.n	8008f52 <HAL_DMA_Abort+0x20e>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a27      	ldr	r2, [pc, #156]	; (8008f90 <HAL_DMA_Abort+0x24c>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d02c      	beq.n	8008f52 <HAL_DMA_Abort+0x20e>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a25      	ldr	r2, [pc, #148]	; (8008f94 <HAL_DMA_Abort+0x250>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d027      	beq.n	8008f52 <HAL_DMA_Abort+0x20e>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a24      	ldr	r2, [pc, #144]	; (8008f98 <HAL_DMA_Abort+0x254>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d022      	beq.n	8008f52 <HAL_DMA_Abort+0x20e>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a22      	ldr	r2, [pc, #136]	; (8008f9c <HAL_DMA_Abort+0x258>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d01d      	beq.n	8008f52 <HAL_DMA_Abort+0x20e>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a21      	ldr	r2, [pc, #132]	; (8008fa0 <HAL_DMA_Abort+0x25c>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d018      	beq.n	8008f52 <HAL_DMA_Abort+0x20e>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a1f      	ldr	r2, [pc, #124]	; (8008fa4 <HAL_DMA_Abort+0x260>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d013      	beq.n	8008f52 <HAL_DMA_Abort+0x20e>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a1e      	ldr	r2, [pc, #120]	; (8008fa8 <HAL_DMA_Abort+0x264>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d00e      	beq.n	8008f52 <HAL_DMA_Abort+0x20e>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a1c      	ldr	r2, [pc, #112]	; (8008fac <HAL_DMA_Abort+0x268>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d009      	beq.n	8008f52 <HAL_DMA_Abort+0x20e>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a1b      	ldr	r2, [pc, #108]	; (8008fb0 <HAL_DMA_Abort+0x26c>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d004      	beq.n	8008f52 <HAL_DMA_Abort+0x20e>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a19      	ldr	r2, [pc, #100]	; (8008fb4 <HAL_DMA_Abort+0x270>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d132      	bne.n	8008fb8 <HAL_DMA_Abort+0x274>
 8008f52:	2301      	movs	r3, #1
 8008f54:	e031      	b.n	8008fba <HAL_DMA_Abort+0x276>
 8008f56:	bf00      	nop
 8008f58:	40020010 	.word	0x40020010
 8008f5c:	40020028 	.word	0x40020028
 8008f60:	40020040 	.word	0x40020040
 8008f64:	40020058 	.word	0x40020058
 8008f68:	40020070 	.word	0x40020070
 8008f6c:	40020088 	.word	0x40020088
 8008f70:	400200a0 	.word	0x400200a0
 8008f74:	400200b8 	.word	0x400200b8
 8008f78:	40020410 	.word	0x40020410
 8008f7c:	40020428 	.word	0x40020428
 8008f80:	40020440 	.word	0x40020440
 8008f84:	40020458 	.word	0x40020458
 8008f88:	40020470 	.word	0x40020470
 8008f8c:	40020488 	.word	0x40020488
 8008f90:	400204a0 	.word	0x400204a0
 8008f94:	400204b8 	.word	0x400204b8
 8008f98:	58025408 	.word	0x58025408
 8008f9c:	5802541c 	.word	0x5802541c
 8008fa0:	58025430 	.word	0x58025430
 8008fa4:	58025444 	.word	0x58025444
 8008fa8:	58025458 	.word	0x58025458
 8008fac:	5802546c 	.word	0x5802546c
 8008fb0:	58025480 	.word	0x58025480
 8008fb4:	58025494 	.word	0x58025494
 8008fb8:	2300      	movs	r3, #0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d007      	beq.n	8008fce <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008fcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a6d      	ldr	r2, [pc, #436]	; (8009188 <HAL_DMA_Abort+0x444>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d04a      	beq.n	800906e <HAL_DMA_Abort+0x32a>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a6b      	ldr	r2, [pc, #428]	; (800918c <HAL_DMA_Abort+0x448>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d045      	beq.n	800906e <HAL_DMA_Abort+0x32a>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a6a      	ldr	r2, [pc, #424]	; (8009190 <HAL_DMA_Abort+0x44c>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d040      	beq.n	800906e <HAL_DMA_Abort+0x32a>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a68      	ldr	r2, [pc, #416]	; (8009194 <HAL_DMA_Abort+0x450>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d03b      	beq.n	800906e <HAL_DMA_Abort+0x32a>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a67      	ldr	r2, [pc, #412]	; (8009198 <HAL_DMA_Abort+0x454>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d036      	beq.n	800906e <HAL_DMA_Abort+0x32a>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a65      	ldr	r2, [pc, #404]	; (800919c <HAL_DMA_Abort+0x458>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d031      	beq.n	800906e <HAL_DMA_Abort+0x32a>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a64      	ldr	r2, [pc, #400]	; (80091a0 <HAL_DMA_Abort+0x45c>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d02c      	beq.n	800906e <HAL_DMA_Abort+0x32a>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a62      	ldr	r2, [pc, #392]	; (80091a4 <HAL_DMA_Abort+0x460>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d027      	beq.n	800906e <HAL_DMA_Abort+0x32a>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a61      	ldr	r2, [pc, #388]	; (80091a8 <HAL_DMA_Abort+0x464>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d022      	beq.n	800906e <HAL_DMA_Abort+0x32a>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a5f      	ldr	r2, [pc, #380]	; (80091ac <HAL_DMA_Abort+0x468>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d01d      	beq.n	800906e <HAL_DMA_Abort+0x32a>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a5e      	ldr	r2, [pc, #376]	; (80091b0 <HAL_DMA_Abort+0x46c>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d018      	beq.n	800906e <HAL_DMA_Abort+0x32a>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a5c      	ldr	r2, [pc, #368]	; (80091b4 <HAL_DMA_Abort+0x470>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d013      	beq.n	800906e <HAL_DMA_Abort+0x32a>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a5b      	ldr	r2, [pc, #364]	; (80091b8 <HAL_DMA_Abort+0x474>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d00e      	beq.n	800906e <HAL_DMA_Abort+0x32a>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a59      	ldr	r2, [pc, #356]	; (80091bc <HAL_DMA_Abort+0x478>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d009      	beq.n	800906e <HAL_DMA_Abort+0x32a>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a58      	ldr	r2, [pc, #352]	; (80091c0 <HAL_DMA_Abort+0x47c>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d004      	beq.n	800906e <HAL_DMA_Abort+0x32a>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a56      	ldr	r2, [pc, #344]	; (80091c4 <HAL_DMA_Abort+0x480>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d108      	bne.n	8009080 <HAL_DMA_Abort+0x33c>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f022 0201 	bic.w	r2, r2, #1
 800907c:	601a      	str	r2, [r3, #0]
 800907e:	e007      	b.n	8009090 <HAL_DMA_Abort+0x34c>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f022 0201 	bic.w	r2, r2, #1
 800908e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009090:	e013      	b.n	80090ba <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009092:	f7fc ff69 	bl	8005f68 <HAL_GetTick>
 8009096:	4602      	mov	r2, r0
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	1ad3      	subs	r3, r2, r3
 800909c:	2b05      	cmp	r3, #5
 800909e:	d90c      	bls.n	80090ba <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2220      	movs	r2, #32
 80090a4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2203      	movs	r2, #3
 80090aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e12d      	b.n	8009316 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 0301 	and.w	r3, r3, #1
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1e5      	bne.n	8009092 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a2f      	ldr	r2, [pc, #188]	; (8009188 <HAL_DMA_Abort+0x444>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d04a      	beq.n	8009166 <HAL_DMA_Abort+0x422>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a2d      	ldr	r2, [pc, #180]	; (800918c <HAL_DMA_Abort+0x448>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d045      	beq.n	8009166 <HAL_DMA_Abort+0x422>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a2c      	ldr	r2, [pc, #176]	; (8009190 <HAL_DMA_Abort+0x44c>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d040      	beq.n	8009166 <HAL_DMA_Abort+0x422>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a2a      	ldr	r2, [pc, #168]	; (8009194 <HAL_DMA_Abort+0x450>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d03b      	beq.n	8009166 <HAL_DMA_Abort+0x422>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a29      	ldr	r2, [pc, #164]	; (8009198 <HAL_DMA_Abort+0x454>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d036      	beq.n	8009166 <HAL_DMA_Abort+0x422>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a27      	ldr	r2, [pc, #156]	; (800919c <HAL_DMA_Abort+0x458>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d031      	beq.n	8009166 <HAL_DMA_Abort+0x422>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a26      	ldr	r2, [pc, #152]	; (80091a0 <HAL_DMA_Abort+0x45c>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d02c      	beq.n	8009166 <HAL_DMA_Abort+0x422>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a24      	ldr	r2, [pc, #144]	; (80091a4 <HAL_DMA_Abort+0x460>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d027      	beq.n	8009166 <HAL_DMA_Abort+0x422>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a23      	ldr	r2, [pc, #140]	; (80091a8 <HAL_DMA_Abort+0x464>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d022      	beq.n	8009166 <HAL_DMA_Abort+0x422>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a21      	ldr	r2, [pc, #132]	; (80091ac <HAL_DMA_Abort+0x468>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d01d      	beq.n	8009166 <HAL_DMA_Abort+0x422>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a20      	ldr	r2, [pc, #128]	; (80091b0 <HAL_DMA_Abort+0x46c>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d018      	beq.n	8009166 <HAL_DMA_Abort+0x422>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a1e      	ldr	r2, [pc, #120]	; (80091b4 <HAL_DMA_Abort+0x470>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d013      	beq.n	8009166 <HAL_DMA_Abort+0x422>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a1d      	ldr	r2, [pc, #116]	; (80091b8 <HAL_DMA_Abort+0x474>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d00e      	beq.n	8009166 <HAL_DMA_Abort+0x422>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a1b      	ldr	r2, [pc, #108]	; (80091bc <HAL_DMA_Abort+0x478>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d009      	beq.n	8009166 <HAL_DMA_Abort+0x422>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a1a      	ldr	r2, [pc, #104]	; (80091c0 <HAL_DMA_Abort+0x47c>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d004      	beq.n	8009166 <HAL_DMA_Abort+0x422>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a18      	ldr	r2, [pc, #96]	; (80091c4 <HAL_DMA_Abort+0x480>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d101      	bne.n	800916a <HAL_DMA_Abort+0x426>
 8009166:	2301      	movs	r3, #1
 8009168:	e000      	b.n	800916c <HAL_DMA_Abort+0x428>
 800916a:	2300      	movs	r3, #0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d02b      	beq.n	80091c8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009174:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800917a:	f003 031f 	and.w	r3, r3, #31
 800917e:	223f      	movs	r2, #63	; 0x3f
 8009180:	409a      	lsls	r2, r3
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	609a      	str	r2, [r3, #8]
 8009186:	e02a      	b.n	80091de <HAL_DMA_Abort+0x49a>
 8009188:	40020010 	.word	0x40020010
 800918c:	40020028 	.word	0x40020028
 8009190:	40020040 	.word	0x40020040
 8009194:	40020058 	.word	0x40020058
 8009198:	40020070 	.word	0x40020070
 800919c:	40020088 	.word	0x40020088
 80091a0:	400200a0 	.word	0x400200a0
 80091a4:	400200b8 	.word	0x400200b8
 80091a8:	40020410 	.word	0x40020410
 80091ac:	40020428 	.word	0x40020428
 80091b0:	40020440 	.word	0x40020440
 80091b4:	40020458 	.word	0x40020458
 80091b8:	40020470 	.word	0x40020470
 80091bc:	40020488 	.word	0x40020488
 80091c0:	400204a0 	.word	0x400204a0
 80091c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091cc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091d2:	f003 031f 	and.w	r3, r3, #31
 80091d6:	2201      	movs	r2, #1
 80091d8:	409a      	lsls	r2, r3
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a4f      	ldr	r2, [pc, #316]	; (8009320 <HAL_DMA_Abort+0x5dc>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d072      	beq.n	80092ce <HAL_DMA_Abort+0x58a>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a4d      	ldr	r2, [pc, #308]	; (8009324 <HAL_DMA_Abort+0x5e0>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d06d      	beq.n	80092ce <HAL_DMA_Abort+0x58a>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a4c      	ldr	r2, [pc, #304]	; (8009328 <HAL_DMA_Abort+0x5e4>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d068      	beq.n	80092ce <HAL_DMA_Abort+0x58a>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a4a      	ldr	r2, [pc, #296]	; (800932c <HAL_DMA_Abort+0x5e8>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d063      	beq.n	80092ce <HAL_DMA_Abort+0x58a>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a49      	ldr	r2, [pc, #292]	; (8009330 <HAL_DMA_Abort+0x5ec>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d05e      	beq.n	80092ce <HAL_DMA_Abort+0x58a>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a47      	ldr	r2, [pc, #284]	; (8009334 <HAL_DMA_Abort+0x5f0>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d059      	beq.n	80092ce <HAL_DMA_Abort+0x58a>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a46      	ldr	r2, [pc, #280]	; (8009338 <HAL_DMA_Abort+0x5f4>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d054      	beq.n	80092ce <HAL_DMA_Abort+0x58a>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a44      	ldr	r2, [pc, #272]	; (800933c <HAL_DMA_Abort+0x5f8>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d04f      	beq.n	80092ce <HAL_DMA_Abort+0x58a>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a43      	ldr	r2, [pc, #268]	; (8009340 <HAL_DMA_Abort+0x5fc>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d04a      	beq.n	80092ce <HAL_DMA_Abort+0x58a>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a41      	ldr	r2, [pc, #260]	; (8009344 <HAL_DMA_Abort+0x600>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d045      	beq.n	80092ce <HAL_DMA_Abort+0x58a>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a40      	ldr	r2, [pc, #256]	; (8009348 <HAL_DMA_Abort+0x604>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d040      	beq.n	80092ce <HAL_DMA_Abort+0x58a>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a3e      	ldr	r2, [pc, #248]	; (800934c <HAL_DMA_Abort+0x608>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d03b      	beq.n	80092ce <HAL_DMA_Abort+0x58a>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a3d      	ldr	r2, [pc, #244]	; (8009350 <HAL_DMA_Abort+0x60c>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d036      	beq.n	80092ce <HAL_DMA_Abort+0x58a>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a3b      	ldr	r2, [pc, #236]	; (8009354 <HAL_DMA_Abort+0x610>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d031      	beq.n	80092ce <HAL_DMA_Abort+0x58a>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a3a      	ldr	r2, [pc, #232]	; (8009358 <HAL_DMA_Abort+0x614>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d02c      	beq.n	80092ce <HAL_DMA_Abort+0x58a>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a38      	ldr	r2, [pc, #224]	; (800935c <HAL_DMA_Abort+0x618>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d027      	beq.n	80092ce <HAL_DMA_Abort+0x58a>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a37      	ldr	r2, [pc, #220]	; (8009360 <HAL_DMA_Abort+0x61c>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d022      	beq.n	80092ce <HAL_DMA_Abort+0x58a>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a35      	ldr	r2, [pc, #212]	; (8009364 <HAL_DMA_Abort+0x620>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d01d      	beq.n	80092ce <HAL_DMA_Abort+0x58a>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a34      	ldr	r2, [pc, #208]	; (8009368 <HAL_DMA_Abort+0x624>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d018      	beq.n	80092ce <HAL_DMA_Abort+0x58a>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a32      	ldr	r2, [pc, #200]	; (800936c <HAL_DMA_Abort+0x628>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d013      	beq.n	80092ce <HAL_DMA_Abort+0x58a>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a31      	ldr	r2, [pc, #196]	; (8009370 <HAL_DMA_Abort+0x62c>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d00e      	beq.n	80092ce <HAL_DMA_Abort+0x58a>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a2f      	ldr	r2, [pc, #188]	; (8009374 <HAL_DMA_Abort+0x630>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d009      	beq.n	80092ce <HAL_DMA_Abort+0x58a>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a2e      	ldr	r2, [pc, #184]	; (8009378 <HAL_DMA_Abort+0x634>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d004      	beq.n	80092ce <HAL_DMA_Abort+0x58a>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a2c      	ldr	r2, [pc, #176]	; (800937c <HAL_DMA_Abort+0x638>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d101      	bne.n	80092d2 <HAL_DMA_Abort+0x58e>
 80092ce:	2301      	movs	r3, #1
 80092d0:	e000      	b.n	80092d4 <HAL_DMA_Abort+0x590>
 80092d2:	2300      	movs	r3, #0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d015      	beq.n	8009304 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80092e0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00c      	beq.n	8009304 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092f8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009302:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3718      	adds	r7, #24
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	40020010 	.word	0x40020010
 8009324:	40020028 	.word	0x40020028
 8009328:	40020040 	.word	0x40020040
 800932c:	40020058 	.word	0x40020058
 8009330:	40020070 	.word	0x40020070
 8009334:	40020088 	.word	0x40020088
 8009338:	400200a0 	.word	0x400200a0
 800933c:	400200b8 	.word	0x400200b8
 8009340:	40020410 	.word	0x40020410
 8009344:	40020428 	.word	0x40020428
 8009348:	40020440 	.word	0x40020440
 800934c:	40020458 	.word	0x40020458
 8009350:	40020470 	.word	0x40020470
 8009354:	40020488 	.word	0x40020488
 8009358:	400204a0 	.word	0x400204a0
 800935c:	400204b8 	.word	0x400204b8
 8009360:	58025408 	.word	0x58025408
 8009364:	5802541c 	.word	0x5802541c
 8009368:	58025430 	.word	0x58025430
 800936c:	58025444 	.word	0x58025444
 8009370:	58025458 	.word	0x58025458
 8009374:	5802546c 	.word	0x5802546c
 8009378:	58025480 	.word	0x58025480
 800937c:	58025494 	.word	0x58025494

08009380 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d101      	bne.n	8009392 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e237      	b.n	8009802 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009398:	b2db      	uxtb	r3, r3
 800939a:	2b02      	cmp	r3, #2
 800939c:	d004      	beq.n	80093a8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2280      	movs	r2, #128	; 0x80
 80093a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80093a4:	2301      	movs	r3, #1
 80093a6:	e22c      	b.n	8009802 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a5c      	ldr	r2, [pc, #368]	; (8009520 <HAL_DMA_Abort_IT+0x1a0>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d04a      	beq.n	8009448 <HAL_DMA_Abort_IT+0xc8>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a5b      	ldr	r2, [pc, #364]	; (8009524 <HAL_DMA_Abort_IT+0x1a4>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d045      	beq.n	8009448 <HAL_DMA_Abort_IT+0xc8>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a59      	ldr	r2, [pc, #356]	; (8009528 <HAL_DMA_Abort_IT+0x1a8>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d040      	beq.n	8009448 <HAL_DMA_Abort_IT+0xc8>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a58      	ldr	r2, [pc, #352]	; (800952c <HAL_DMA_Abort_IT+0x1ac>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d03b      	beq.n	8009448 <HAL_DMA_Abort_IT+0xc8>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a56      	ldr	r2, [pc, #344]	; (8009530 <HAL_DMA_Abort_IT+0x1b0>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d036      	beq.n	8009448 <HAL_DMA_Abort_IT+0xc8>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a55      	ldr	r2, [pc, #340]	; (8009534 <HAL_DMA_Abort_IT+0x1b4>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d031      	beq.n	8009448 <HAL_DMA_Abort_IT+0xc8>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a53      	ldr	r2, [pc, #332]	; (8009538 <HAL_DMA_Abort_IT+0x1b8>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d02c      	beq.n	8009448 <HAL_DMA_Abort_IT+0xc8>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a52      	ldr	r2, [pc, #328]	; (800953c <HAL_DMA_Abort_IT+0x1bc>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d027      	beq.n	8009448 <HAL_DMA_Abort_IT+0xc8>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a50      	ldr	r2, [pc, #320]	; (8009540 <HAL_DMA_Abort_IT+0x1c0>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d022      	beq.n	8009448 <HAL_DMA_Abort_IT+0xc8>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a4f      	ldr	r2, [pc, #316]	; (8009544 <HAL_DMA_Abort_IT+0x1c4>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d01d      	beq.n	8009448 <HAL_DMA_Abort_IT+0xc8>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a4d      	ldr	r2, [pc, #308]	; (8009548 <HAL_DMA_Abort_IT+0x1c8>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d018      	beq.n	8009448 <HAL_DMA_Abort_IT+0xc8>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a4c      	ldr	r2, [pc, #304]	; (800954c <HAL_DMA_Abort_IT+0x1cc>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d013      	beq.n	8009448 <HAL_DMA_Abort_IT+0xc8>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a4a      	ldr	r2, [pc, #296]	; (8009550 <HAL_DMA_Abort_IT+0x1d0>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d00e      	beq.n	8009448 <HAL_DMA_Abort_IT+0xc8>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a49      	ldr	r2, [pc, #292]	; (8009554 <HAL_DMA_Abort_IT+0x1d4>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d009      	beq.n	8009448 <HAL_DMA_Abort_IT+0xc8>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a47      	ldr	r2, [pc, #284]	; (8009558 <HAL_DMA_Abort_IT+0x1d8>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d004      	beq.n	8009448 <HAL_DMA_Abort_IT+0xc8>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a46      	ldr	r2, [pc, #280]	; (800955c <HAL_DMA_Abort_IT+0x1dc>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d101      	bne.n	800944c <HAL_DMA_Abort_IT+0xcc>
 8009448:	2301      	movs	r3, #1
 800944a:	e000      	b.n	800944e <HAL_DMA_Abort_IT+0xce>
 800944c:	2300      	movs	r3, #0
 800944e:	2b00      	cmp	r3, #0
 8009450:	f000 8086 	beq.w	8009560 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2204      	movs	r2, #4
 8009458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a2f      	ldr	r2, [pc, #188]	; (8009520 <HAL_DMA_Abort_IT+0x1a0>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d04a      	beq.n	80094fc <HAL_DMA_Abort_IT+0x17c>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a2e      	ldr	r2, [pc, #184]	; (8009524 <HAL_DMA_Abort_IT+0x1a4>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d045      	beq.n	80094fc <HAL_DMA_Abort_IT+0x17c>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a2c      	ldr	r2, [pc, #176]	; (8009528 <HAL_DMA_Abort_IT+0x1a8>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d040      	beq.n	80094fc <HAL_DMA_Abort_IT+0x17c>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a2b      	ldr	r2, [pc, #172]	; (800952c <HAL_DMA_Abort_IT+0x1ac>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d03b      	beq.n	80094fc <HAL_DMA_Abort_IT+0x17c>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a29      	ldr	r2, [pc, #164]	; (8009530 <HAL_DMA_Abort_IT+0x1b0>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d036      	beq.n	80094fc <HAL_DMA_Abort_IT+0x17c>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a28      	ldr	r2, [pc, #160]	; (8009534 <HAL_DMA_Abort_IT+0x1b4>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d031      	beq.n	80094fc <HAL_DMA_Abort_IT+0x17c>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a26      	ldr	r2, [pc, #152]	; (8009538 <HAL_DMA_Abort_IT+0x1b8>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d02c      	beq.n	80094fc <HAL_DMA_Abort_IT+0x17c>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a25      	ldr	r2, [pc, #148]	; (800953c <HAL_DMA_Abort_IT+0x1bc>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d027      	beq.n	80094fc <HAL_DMA_Abort_IT+0x17c>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a23      	ldr	r2, [pc, #140]	; (8009540 <HAL_DMA_Abort_IT+0x1c0>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d022      	beq.n	80094fc <HAL_DMA_Abort_IT+0x17c>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a22      	ldr	r2, [pc, #136]	; (8009544 <HAL_DMA_Abort_IT+0x1c4>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d01d      	beq.n	80094fc <HAL_DMA_Abort_IT+0x17c>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a20      	ldr	r2, [pc, #128]	; (8009548 <HAL_DMA_Abort_IT+0x1c8>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d018      	beq.n	80094fc <HAL_DMA_Abort_IT+0x17c>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a1f      	ldr	r2, [pc, #124]	; (800954c <HAL_DMA_Abort_IT+0x1cc>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d013      	beq.n	80094fc <HAL_DMA_Abort_IT+0x17c>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a1d      	ldr	r2, [pc, #116]	; (8009550 <HAL_DMA_Abort_IT+0x1d0>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d00e      	beq.n	80094fc <HAL_DMA_Abort_IT+0x17c>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a1c      	ldr	r2, [pc, #112]	; (8009554 <HAL_DMA_Abort_IT+0x1d4>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d009      	beq.n	80094fc <HAL_DMA_Abort_IT+0x17c>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a1a      	ldr	r2, [pc, #104]	; (8009558 <HAL_DMA_Abort_IT+0x1d8>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d004      	beq.n	80094fc <HAL_DMA_Abort_IT+0x17c>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a19      	ldr	r2, [pc, #100]	; (800955c <HAL_DMA_Abort_IT+0x1dc>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d108      	bne.n	800950e <HAL_DMA_Abort_IT+0x18e>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f022 0201 	bic.w	r2, r2, #1
 800950a:	601a      	str	r2, [r3, #0]
 800950c:	e178      	b.n	8009800 <HAL_DMA_Abort_IT+0x480>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f022 0201 	bic.w	r2, r2, #1
 800951c:	601a      	str	r2, [r3, #0]
 800951e:	e16f      	b.n	8009800 <HAL_DMA_Abort_IT+0x480>
 8009520:	40020010 	.word	0x40020010
 8009524:	40020028 	.word	0x40020028
 8009528:	40020040 	.word	0x40020040
 800952c:	40020058 	.word	0x40020058
 8009530:	40020070 	.word	0x40020070
 8009534:	40020088 	.word	0x40020088
 8009538:	400200a0 	.word	0x400200a0
 800953c:	400200b8 	.word	0x400200b8
 8009540:	40020410 	.word	0x40020410
 8009544:	40020428 	.word	0x40020428
 8009548:	40020440 	.word	0x40020440
 800954c:	40020458 	.word	0x40020458
 8009550:	40020470 	.word	0x40020470
 8009554:	40020488 	.word	0x40020488
 8009558:	400204a0 	.word	0x400204a0
 800955c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f022 020e 	bic.w	r2, r2, #14
 800956e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a6c      	ldr	r2, [pc, #432]	; (8009728 <HAL_DMA_Abort_IT+0x3a8>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d04a      	beq.n	8009610 <HAL_DMA_Abort_IT+0x290>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a6b      	ldr	r2, [pc, #428]	; (800972c <HAL_DMA_Abort_IT+0x3ac>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d045      	beq.n	8009610 <HAL_DMA_Abort_IT+0x290>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a69      	ldr	r2, [pc, #420]	; (8009730 <HAL_DMA_Abort_IT+0x3b0>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d040      	beq.n	8009610 <HAL_DMA_Abort_IT+0x290>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a68      	ldr	r2, [pc, #416]	; (8009734 <HAL_DMA_Abort_IT+0x3b4>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d03b      	beq.n	8009610 <HAL_DMA_Abort_IT+0x290>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a66      	ldr	r2, [pc, #408]	; (8009738 <HAL_DMA_Abort_IT+0x3b8>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d036      	beq.n	8009610 <HAL_DMA_Abort_IT+0x290>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a65      	ldr	r2, [pc, #404]	; (800973c <HAL_DMA_Abort_IT+0x3bc>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d031      	beq.n	8009610 <HAL_DMA_Abort_IT+0x290>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a63      	ldr	r2, [pc, #396]	; (8009740 <HAL_DMA_Abort_IT+0x3c0>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d02c      	beq.n	8009610 <HAL_DMA_Abort_IT+0x290>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a62      	ldr	r2, [pc, #392]	; (8009744 <HAL_DMA_Abort_IT+0x3c4>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d027      	beq.n	8009610 <HAL_DMA_Abort_IT+0x290>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a60      	ldr	r2, [pc, #384]	; (8009748 <HAL_DMA_Abort_IT+0x3c8>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d022      	beq.n	8009610 <HAL_DMA_Abort_IT+0x290>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a5f      	ldr	r2, [pc, #380]	; (800974c <HAL_DMA_Abort_IT+0x3cc>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d01d      	beq.n	8009610 <HAL_DMA_Abort_IT+0x290>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a5d      	ldr	r2, [pc, #372]	; (8009750 <HAL_DMA_Abort_IT+0x3d0>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d018      	beq.n	8009610 <HAL_DMA_Abort_IT+0x290>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a5c      	ldr	r2, [pc, #368]	; (8009754 <HAL_DMA_Abort_IT+0x3d4>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d013      	beq.n	8009610 <HAL_DMA_Abort_IT+0x290>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a5a      	ldr	r2, [pc, #360]	; (8009758 <HAL_DMA_Abort_IT+0x3d8>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d00e      	beq.n	8009610 <HAL_DMA_Abort_IT+0x290>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a59      	ldr	r2, [pc, #356]	; (800975c <HAL_DMA_Abort_IT+0x3dc>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d009      	beq.n	8009610 <HAL_DMA_Abort_IT+0x290>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a57      	ldr	r2, [pc, #348]	; (8009760 <HAL_DMA_Abort_IT+0x3e0>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d004      	beq.n	8009610 <HAL_DMA_Abort_IT+0x290>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a56      	ldr	r2, [pc, #344]	; (8009764 <HAL_DMA_Abort_IT+0x3e4>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d108      	bne.n	8009622 <HAL_DMA_Abort_IT+0x2a2>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f022 0201 	bic.w	r2, r2, #1
 800961e:	601a      	str	r2, [r3, #0]
 8009620:	e007      	b.n	8009632 <HAL_DMA_Abort_IT+0x2b2>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f022 0201 	bic.w	r2, r2, #1
 8009630:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a3c      	ldr	r2, [pc, #240]	; (8009728 <HAL_DMA_Abort_IT+0x3a8>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d072      	beq.n	8009722 <HAL_DMA_Abort_IT+0x3a2>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a3a      	ldr	r2, [pc, #232]	; (800972c <HAL_DMA_Abort_IT+0x3ac>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d06d      	beq.n	8009722 <HAL_DMA_Abort_IT+0x3a2>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a39      	ldr	r2, [pc, #228]	; (8009730 <HAL_DMA_Abort_IT+0x3b0>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d068      	beq.n	8009722 <HAL_DMA_Abort_IT+0x3a2>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a37      	ldr	r2, [pc, #220]	; (8009734 <HAL_DMA_Abort_IT+0x3b4>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d063      	beq.n	8009722 <HAL_DMA_Abort_IT+0x3a2>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a36      	ldr	r2, [pc, #216]	; (8009738 <HAL_DMA_Abort_IT+0x3b8>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d05e      	beq.n	8009722 <HAL_DMA_Abort_IT+0x3a2>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a34      	ldr	r2, [pc, #208]	; (800973c <HAL_DMA_Abort_IT+0x3bc>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d059      	beq.n	8009722 <HAL_DMA_Abort_IT+0x3a2>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a33      	ldr	r2, [pc, #204]	; (8009740 <HAL_DMA_Abort_IT+0x3c0>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d054      	beq.n	8009722 <HAL_DMA_Abort_IT+0x3a2>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a31      	ldr	r2, [pc, #196]	; (8009744 <HAL_DMA_Abort_IT+0x3c4>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d04f      	beq.n	8009722 <HAL_DMA_Abort_IT+0x3a2>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a30      	ldr	r2, [pc, #192]	; (8009748 <HAL_DMA_Abort_IT+0x3c8>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d04a      	beq.n	8009722 <HAL_DMA_Abort_IT+0x3a2>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a2e      	ldr	r2, [pc, #184]	; (800974c <HAL_DMA_Abort_IT+0x3cc>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d045      	beq.n	8009722 <HAL_DMA_Abort_IT+0x3a2>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a2d      	ldr	r2, [pc, #180]	; (8009750 <HAL_DMA_Abort_IT+0x3d0>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d040      	beq.n	8009722 <HAL_DMA_Abort_IT+0x3a2>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a2b      	ldr	r2, [pc, #172]	; (8009754 <HAL_DMA_Abort_IT+0x3d4>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d03b      	beq.n	8009722 <HAL_DMA_Abort_IT+0x3a2>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a2a      	ldr	r2, [pc, #168]	; (8009758 <HAL_DMA_Abort_IT+0x3d8>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d036      	beq.n	8009722 <HAL_DMA_Abort_IT+0x3a2>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a28      	ldr	r2, [pc, #160]	; (800975c <HAL_DMA_Abort_IT+0x3dc>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d031      	beq.n	8009722 <HAL_DMA_Abort_IT+0x3a2>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a27      	ldr	r2, [pc, #156]	; (8009760 <HAL_DMA_Abort_IT+0x3e0>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d02c      	beq.n	8009722 <HAL_DMA_Abort_IT+0x3a2>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a25      	ldr	r2, [pc, #148]	; (8009764 <HAL_DMA_Abort_IT+0x3e4>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d027      	beq.n	8009722 <HAL_DMA_Abort_IT+0x3a2>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a24      	ldr	r2, [pc, #144]	; (8009768 <HAL_DMA_Abort_IT+0x3e8>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d022      	beq.n	8009722 <HAL_DMA_Abort_IT+0x3a2>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a22      	ldr	r2, [pc, #136]	; (800976c <HAL_DMA_Abort_IT+0x3ec>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d01d      	beq.n	8009722 <HAL_DMA_Abort_IT+0x3a2>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a21      	ldr	r2, [pc, #132]	; (8009770 <HAL_DMA_Abort_IT+0x3f0>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d018      	beq.n	8009722 <HAL_DMA_Abort_IT+0x3a2>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a1f      	ldr	r2, [pc, #124]	; (8009774 <HAL_DMA_Abort_IT+0x3f4>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d013      	beq.n	8009722 <HAL_DMA_Abort_IT+0x3a2>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a1e      	ldr	r2, [pc, #120]	; (8009778 <HAL_DMA_Abort_IT+0x3f8>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d00e      	beq.n	8009722 <HAL_DMA_Abort_IT+0x3a2>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a1c      	ldr	r2, [pc, #112]	; (800977c <HAL_DMA_Abort_IT+0x3fc>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d009      	beq.n	8009722 <HAL_DMA_Abort_IT+0x3a2>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a1b      	ldr	r2, [pc, #108]	; (8009780 <HAL_DMA_Abort_IT+0x400>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d004      	beq.n	8009722 <HAL_DMA_Abort_IT+0x3a2>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a19      	ldr	r2, [pc, #100]	; (8009784 <HAL_DMA_Abort_IT+0x404>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d132      	bne.n	8009788 <HAL_DMA_Abort_IT+0x408>
 8009722:	2301      	movs	r3, #1
 8009724:	e031      	b.n	800978a <HAL_DMA_Abort_IT+0x40a>
 8009726:	bf00      	nop
 8009728:	40020010 	.word	0x40020010
 800972c:	40020028 	.word	0x40020028
 8009730:	40020040 	.word	0x40020040
 8009734:	40020058 	.word	0x40020058
 8009738:	40020070 	.word	0x40020070
 800973c:	40020088 	.word	0x40020088
 8009740:	400200a0 	.word	0x400200a0
 8009744:	400200b8 	.word	0x400200b8
 8009748:	40020410 	.word	0x40020410
 800974c:	40020428 	.word	0x40020428
 8009750:	40020440 	.word	0x40020440
 8009754:	40020458 	.word	0x40020458
 8009758:	40020470 	.word	0x40020470
 800975c:	40020488 	.word	0x40020488
 8009760:	400204a0 	.word	0x400204a0
 8009764:	400204b8 	.word	0x400204b8
 8009768:	58025408 	.word	0x58025408
 800976c:	5802541c 	.word	0x5802541c
 8009770:	58025430 	.word	0x58025430
 8009774:	58025444 	.word	0x58025444
 8009778:	58025458 	.word	0x58025458
 800977c:	5802546c 	.word	0x5802546c
 8009780:	58025480 	.word	0x58025480
 8009784:	58025494 	.word	0x58025494
 8009788:	2300      	movs	r3, #0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d028      	beq.n	80097e0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009798:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800979c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097a2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097a8:	f003 031f 	and.w	r3, r3, #31
 80097ac:	2201      	movs	r2, #1
 80097ae:	409a      	lsls	r2, r3
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80097bc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00c      	beq.n	80097e0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097d4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80097de:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d003      	beq.n	8009800 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop

0800980c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b08a      	sub	sp, #40	; 0x28
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8009814:	2300      	movs	r3, #0
 8009816:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009818:	4b67      	ldr	r3, [pc, #412]	; (80099b8 <HAL_DMA_IRQHandler+0x1ac>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a67      	ldr	r2, [pc, #412]	; (80099bc <HAL_DMA_IRQHandler+0x1b0>)
 800981e:	fba2 2303 	umull	r2, r3, r2, r3
 8009822:	0a9b      	lsrs	r3, r3, #10
 8009824:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800982a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009830:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8009832:	6a3b      	ldr	r3, [r7, #32]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a5f      	ldr	r2, [pc, #380]	; (80099c0 <HAL_DMA_IRQHandler+0x1b4>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d04a      	beq.n	80098de <HAL_DMA_IRQHandler+0xd2>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a5d      	ldr	r2, [pc, #372]	; (80099c4 <HAL_DMA_IRQHandler+0x1b8>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d045      	beq.n	80098de <HAL_DMA_IRQHandler+0xd2>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a5c      	ldr	r2, [pc, #368]	; (80099c8 <HAL_DMA_IRQHandler+0x1bc>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d040      	beq.n	80098de <HAL_DMA_IRQHandler+0xd2>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a5a      	ldr	r2, [pc, #360]	; (80099cc <HAL_DMA_IRQHandler+0x1c0>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d03b      	beq.n	80098de <HAL_DMA_IRQHandler+0xd2>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a59      	ldr	r2, [pc, #356]	; (80099d0 <HAL_DMA_IRQHandler+0x1c4>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d036      	beq.n	80098de <HAL_DMA_IRQHandler+0xd2>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a57      	ldr	r2, [pc, #348]	; (80099d4 <HAL_DMA_IRQHandler+0x1c8>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d031      	beq.n	80098de <HAL_DMA_IRQHandler+0xd2>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a56      	ldr	r2, [pc, #344]	; (80099d8 <HAL_DMA_IRQHandler+0x1cc>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d02c      	beq.n	80098de <HAL_DMA_IRQHandler+0xd2>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a54      	ldr	r2, [pc, #336]	; (80099dc <HAL_DMA_IRQHandler+0x1d0>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d027      	beq.n	80098de <HAL_DMA_IRQHandler+0xd2>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a53      	ldr	r2, [pc, #332]	; (80099e0 <HAL_DMA_IRQHandler+0x1d4>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d022      	beq.n	80098de <HAL_DMA_IRQHandler+0xd2>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a51      	ldr	r2, [pc, #324]	; (80099e4 <HAL_DMA_IRQHandler+0x1d8>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d01d      	beq.n	80098de <HAL_DMA_IRQHandler+0xd2>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a50      	ldr	r2, [pc, #320]	; (80099e8 <HAL_DMA_IRQHandler+0x1dc>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d018      	beq.n	80098de <HAL_DMA_IRQHandler+0xd2>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a4e      	ldr	r2, [pc, #312]	; (80099ec <HAL_DMA_IRQHandler+0x1e0>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d013      	beq.n	80098de <HAL_DMA_IRQHandler+0xd2>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a4d      	ldr	r2, [pc, #308]	; (80099f0 <HAL_DMA_IRQHandler+0x1e4>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d00e      	beq.n	80098de <HAL_DMA_IRQHandler+0xd2>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a4b      	ldr	r2, [pc, #300]	; (80099f4 <HAL_DMA_IRQHandler+0x1e8>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d009      	beq.n	80098de <HAL_DMA_IRQHandler+0xd2>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a4a      	ldr	r2, [pc, #296]	; (80099f8 <HAL_DMA_IRQHandler+0x1ec>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d004      	beq.n	80098de <HAL_DMA_IRQHandler+0xd2>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a48      	ldr	r2, [pc, #288]	; (80099fc <HAL_DMA_IRQHandler+0x1f0>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d101      	bne.n	80098e2 <HAL_DMA_IRQHandler+0xd6>
 80098de:	2301      	movs	r3, #1
 80098e0:	e000      	b.n	80098e4 <HAL_DMA_IRQHandler+0xd8>
 80098e2:	2300      	movs	r3, #0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f000 842b 	beq.w	800a140 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098ee:	f003 031f 	and.w	r3, r3, #31
 80098f2:	2208      	movs	r2, #8
 80098f4:	409a      	lsls	r2, r3
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	4013      	ands	r3, r2
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	f000 80a2 	beq.w	8009a44 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a2e      	ldr	r2, [pc, #184]	; (80099c0 <HAL_DMA_IRQHandler+0x1b4>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d04a      	beq.n	80099a0 <HAL_DMA_IRQHandler+0x194>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a2d      	ldr	r2, [pc, #180]	; (80099c4 <HAL_DMA_IRQHandler+0x1b8>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d045      	beq.n	80099a0 <HAL_DMA_IRQHandler+0x194>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a2b      	ldr	r2, [pc, #172]	; (80099c8 <HAL_DMA_IRQHandler+0x1bc>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d040      	beq.n	80099a0 <HAL_DMA_IRQHandler+0x194>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a2a      	ldr	r2, [pc, #168]	; (80099cc <HAL_DMA_IRQHandler+0x1c0>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d03b      	beq.n	80099a0 <HAL_DMA_IRQHandler+0x194>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a28      	ldr	r2, [pc, #160]	; (80099d0 <HAL_DMA_IRQHandler+0x1c4>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d036      	beq.n	80099a0 <HAL_DMA_IRQHandler+0x194>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a27      	ldr	r2, [pc, #156]	; (80099d4 <HAL_DMA_IRQHandler+0x1c8>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d031      	beq.n	80099a0 <HAL_DMA_IRQHandler+0x194>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a25      	ldr	r2, [pc, #148]	; (80099d8 <HAL_DMA_IRQHandler+0x1cc>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d02c      	beq.n	80099a0 <HAL_DMA_IRQHandler+0x194>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a24      	ldr	r2, [pc, #144]	; (80099dc <HAL_DMA_IRQHandler+0x1d0>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d027      	beq.n	80099a0 <HAL_DMA_IRQHandler+0x194>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a22      	ldr	r2, [pc, #136]	; (80099e0 <HAL_DMA_IRQHandler+0x1d4>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d022      	beq.n	80099a0 <HAL_DMA_IRQHandler+0x194>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a21      	ldr	r2, [pc, #132]	; (80099e4 <HAL_DMA_IRQHandler+0x1d8>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d01d      	beq.n	80099a0 <HAL_DMA_IRQHandler+0x194>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a1f      	ldr	r2, [pc, #124]	; (80099e8 <HAL_DMA_IRQHandler+0x1dc>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d018      	beq.n	80099a0 <HAL_DMA_IRQHandler+0x194>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a1e      	ldr	r2, [pc, #120]	; (80099ec <HAL_DMA_IRQHandler+0x1e0>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d013      	beq.n	80099a0 <HAL_DMA_IRQHandler+0x194>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a1c      	ldr	r2, [pc, #112]	; (80099f0 <HAL_DMA_IRQHandler+0x1e4>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d00e      	beq.n	80099a0 <HAL_DMA_IRQHandler+0x194>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a1b      	ldr	r2, [pc, #108]	; (80099f4 <HAL_DMA_IRQHandler+0x1e8>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d009      	beq.n	80099a0 <HAL_DMA_IRQHandler+0x194>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a19      	ldr	r2, [pc, #100]	; (80099f8 <HAL_DMA_IRQHandler+0x1ec>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d004      	beq.n	80099a0 <HAL_DMA_IRQHandler+0x194>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a18      	ldr	r2, [pc, #96]	; (80099fc <HAL_DMA_IRQHandler+0x1f0>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d12f      	bne.n	8009a00 <HAL_DMA_IRQHandler+0x1f4>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f003 0304 	and.w	r3, r3, #4
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	bf14      	ite	ne
 80099ae:	2301      	movne	r3, #1
 80099b0:	2300      	moveq	r3, #0
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	e02e      	b.n	8009a14 <HAL_DMA_IRQHandler+0x208>
 80099b6:	bf00      	nop
 80099b8:	240000c0 	.word	0x240000c0
 80099bc:	1b4e81b5 	.word	0x1b4e81b5
 80099c0:	40020010 	.word	0x40020010
 80099c4:	40020028 	.word	0x40020028
 80099c8:	40020040 	.word	0x40020040
 80099cc:	40020058 	.word	0x40020058
 80099d0:	40020070 	.word	0x40020070
 80099d4:	40020088 	.word	0x40020088
 80099d8:	400200a0 	.word	0x400200a0
 80099dc:	400200b8 	.word	0x400200b8
 80099e0:	40020410 	.word	0x40020410
 80099e4:	40020428 	.word	0x40020428
 80099e8:	40020440 	.word	0x40020440
 80099ec:	40020458 	.word	0x40020458
 80099f0:	40020470 	.word	0x40020470
 80099f4:	40020488 	.word	0x40020488
 80099f8:	400204a0 	.word	0x400204a0
 80099fc:	400204b8 	.word	0x400204b8
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f003 0308 	and.w	r3, r3, #8
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	bf14      	ite	ne
 8009a0e:	2301      	movne	r3, #1
 8009a10:	2300      	moveq	r3, #0
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d015      	beq.n	8009a44 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f022 0204 	bic.w	r2, r2, #4
 8009a26:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a2c:	f003 031f 	and.w	r3, r3, #31
 8009a30:	2208      	movs	r2, #8
 8009a32:	409a      	lsls	r2, r3
 8009a34:	6a3b      	ldr	r3, [r7, #32]
 8009a36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a3c:	f043 0201 	orr.w	r2, r3, #1
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a48:	f003 031f 	and.w	r3, r3, #31
 8009a4c:	69ba      	ldr	r2, [r7, #24]
 8009a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a52:	f003 0301 	and.w	r3, r3, #1
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d06e      	beq.n	8009b38 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a69      	ldr	r2, [pc, #420]	; (8009c04 <HAL_DMA_IRQHandler+0x3f8>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d04a      	beq.n	8009afa <HAL_DMA_IRQHandler+0x2ee>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a67      	ldr	r2, [pc, #412]	; (8009c08 <HAL_DMA_IRQHandler+0x3fc>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d045      	beq.n	8009afa <HAL_DMA_IRQHandler+0x2ee>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a66      	ldr	r2, [pc, #408]	; (8009c0c <HAL_DMA_IRQHandler+0x400>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d040      	beq.n	8009afa <HAL_DMA_IRQHandler+0x2ee>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a64      	ldr	r2, [pc, #400]	; (8009c10 <HAL_DMA_IRQHandler+0x404>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d03b      	beq.n	8009afa <HAL_DMA_IRQHandler+0x2ee>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a63      	ldr	r2, [pc, #396]	; (8009c14 <HAL_DMA_IRQHandler+0x408>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d036      	beq.n	8009afa <HAL_DMA_IRQHandler+0x2ee>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a61      	ldr	r2, [pc, #388]	; (8009c18 <HAL_DMA_IRQHandler+0x40c>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d031      	beq.n	8009afa <HAL_DMA_IRQHandler+0x2ee>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a60      	ldr	r2, [pc, #384]	; (8009c1c <HAL_DMA_IRQHandler+0x410>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d02c      	beq.n	8009afa <HAL_DMA_IRQHandler+0x2ee>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a5e      	ldr	r2, [pc, #376]	; (8009c20 <HAL_DMA_IRQHandler+0x414>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d027      	beq.n	8009afa <HAL_DMA_IRQHandler+0x2ee>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a5d      	ldr	r2, [pc, #372]	; (8009c24 <HAL_DMA_IRQHandler+0x418>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d022      	beq.n	8009afa <HAL_DMA_IRQHandler+0x2ee>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a5b      	ldr	r2, [pc, #364]	; (8009c28 <HAL_DMA_IRQHandler+0x41c>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d01d      	beq.n	8009afa <HAL_DMA_IRQHandler+0x2ee>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a5a      	ldr	r2, [pc, #360]	; (8009c2c <HAL_DMA_IRQHandler+0x420>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d018      	beq.n	8009afa <HAL_DMA_IRQHandler+0x2ee>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a58      	ldr	r2, [pc, #352]	; (8009c30 <HAL_DMA_IRQHandler+0x424>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d013      	beq.n	8009afa <HAL_DMA_IRQHandler+0x2ee>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a57      	ldr	r2, [pc, #348]	; (8009c34 <HAL_DMA_IRQHandler+0x428>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d00e      	beq.n	8009afa <HAL_DMA_IRQHandler+0x2ee>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a55      	ldr	r2, [pc, #340]	; (8009c38 <HAL_DMA_IRQHandler+0x42c>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d009      	beq.n	8009afa <HAL_DMA_IRQHandler+0x2ee>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a54      	ldr	r2, [pc, #336]	; (8009c3c <HAL_DMA_IRQHandler+0x430>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d004      	beq.n	8009afa <HAL_DMA_IRQHandler+0x2ee>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a52      	ldr	r2, [pc, #328]	; (8009c40 <HAL_DMA_IRQHandler+0x434>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d10a      	bne.n	8009b10 <HAL_DMA_IRQHandler+0x304>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	695b      	ldr	r3, [r3, #20]
 8009b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	bf14      	ite	ne
 8009b08:	2301      	movne	r3, #1
 8009b0a:	2300      	moveq	r3, #0
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	e003      	b.n	8009b18 <HAL_DMA_IRQHandler+0x30c>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	2300      	movs	r3, #0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d00d      	beq.n	8009b38 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b20:	f003 031f 	and.w	r3, r3, #31
 8009b24:	2201      	movs	r2, #1
 8009b26:	409a      	lsls	r2, r3
 8009b28:	6a3b      	ldr	r3, [r7, #32]
 8009b2a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b30:	f043 0202 	orr.w	r2, r3, #2
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b3c:	f003 031f 	and.w	r3, r3, #31
 8009b40:	2204      	movs	r2, #4
 8009b42:	409a      	lsls	r2, r3
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	4013      	ands	r3, r2
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f000 808f 	beq.w	8009c6c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a2c      	ldr	r2, [pc, #176]	; (8009c04 <HAL_DMA_IRQHandler+0x3f8>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d04a      	beq.n	8009bee <HAL_DMA_IRQHandler+0x3e2>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a2a      	ldr	r2, [pc, #168]	; (8009c08 <HAL_DMA_IRQHandler+0x3fc>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d045      	beq.n	8009bee <HAL_DMA_IRQHandler+0x3e2>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a29      	ldr	r2, [pc, #164]	; (8009c0c <HAL_DMA_IRQHandler+0x400>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d040      	beq.n	8009bee <HAL_DMA_IRQHandler+0x3e2>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a27      	ldr	r2, [pc, #156]	; (8009c10 <HAL_DMA_IRQHandler+0x404>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d03b      	beq.n	8009bee <HAL_DMA_IRQHandler+0x3e2>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a26      	ldr	r2, [pc, #152]	; (8009c14 <HAL_DMA_IRQHandler+0x408>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d036      	beq.n	8009bee <HAL_DMA_IRQHandler+0x3e2>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a24      	ldr	r2, [pc, #144]	; (8009c18 <HAL_DMA_IRQHandler+0x40c>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d031      	beq.n	8009bee <HAL_DMA_IRQHandler+0x3e2>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a23      	ldr	r2, [pc, #140]	; (8009c1c <HAL_DMA_IRQHandler+0x410>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d02c      	beq.n	8009bee <HAL_DMA_IRQHandler+0x3e2>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a21      	ldr	r2, [pc, #132]	; (8009c20 <HAL_DMA_IRQHandler+0x414>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d027      	beq.n	8009bee <HAL_DMA_IRQHandler+0x3e2>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a20      	ldr	r2, [pc, #128]	; (8009c24 <HAL_DMA_IRQHandler+0x418>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d022      	beq.n	8009bee <HAL_DMA_IRQHandler+0x3e2>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a1e      	ldr	r2, [pc, #120]	; (8009c28 <HAL_DMA_IRQHandler+0x41c>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d01d      	beq.n	8009bee <HAL_DMA_IRQHandler+0x3e2>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a1d      	ldr	r2, [pc, #116]	; (8009c2c <HAL_DMA_IRQHandler+0x420>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d018      	beq.n	8009bee <HAL_DMA_IRQHandler+0x3e2>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a1b      	ldr	r2, [pc, #108]	; (8009c30 <HAL_DMA_IRQHandler+0x424>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d013      	beq.n	8009bee <HAL_DMA_IRQHandler+0x3e2>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a1a      	ldr	r2, [pc, #104]	; (8009c34 <HAL_DMA_IRQHandler+0x428>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d00e      	beq.n	8009bee <HAL_DMA_IRQHandler+0x3e2>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a18      	ldr	r2, [pc, #96]	; (8009c38 <HAL_DMA_IRQHandler+0x42c>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d009      	beq.n	8009bee <HAL_DMA_IRQHandler+0x3e2>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a17      	ldr	r2, [pc, #92]	; (8009c3c <HAL_DMA_IRQHandler+0x430>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d004      	beq.n	8009bee <HAL_DMA_IRQHandler+0x3e2>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a15      	ldr	r2, [pc, #84]	; (8009c40 <HAL_DMA_IRQHandler+0x434>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d12a      	bne.n	8009c44 <HAL_DMA_IRQHandler+0x438>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f003 0302 	and.w	r3, r3, #2
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	bf14      	ite	ne
 8009bfc:	2301      	movne	r3, #1
 8009bfe:	2300      	moveq	r3, #0
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	e023      	b.n	8009c4c <HAL_DMA_IRQHandler+0x440>
 8009c04:	40020010 	.word	0x40020010
 8009c08:	40020028 	.word	0x40020028
 8009c0c:	40020040 	.word	0x40020040
 8009c10:	40020058 	.word	0x40020058
 8009c14:	40020070 	.word	0x40020070
 8009c18:	40020088 	.word	0x40020088
 8009c1c:	400200a0 	.word	0x400200a0
 8009c20:	400200b8 	.word	0x400200b8
 8009c24:	40020410 	.word	0x40020410
 8009c28:	40020428 	.word	0x40020428
 8009c2c:	40020440 	.word	0x40020440
 8009c30:	40020458 	.word	0x40020458
 8009c34:	40020470 	.word	0x40020470
 8009c38:	40020488 	.word	0x40020488
 8009c3c:	400204a0 	.word	0x400204a0
 8009c40:	400204b8 	.word	0x400204b8
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00d      	beq.n	8009c6c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c54:	f003 031f 	and.w	r3, r3, #31
 8009c58:	2204      	movs	r2, #4
 8009c5a:	409a      	lsls	r2, r3
 8009c5c:	6a3b      	ldr	r3, [r7, #32]
 8009c5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c64:	f043 0204 	orr.w	r2, r3, #4
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c70:	f003 031f 	and.w	r3, r3, #31
 8009c74:	2210      	movs	r2, #16
 8009c76:	409a      	lsls	r2, r3
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f000 80a6 	beq.w	8009dce <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a85      	ldr	r2, [pc, #532]	; (8009e9c <HAL_DMA_IRQHandler+0x690>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d04a      	beq.n	8009d22 <HAL_DMA_IRQHandler+0x516>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a83      	ldr	r2, [pc, #524]	; (8009ea0 <HAL_DMA_IRQHandler+0x694>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d045      	beq.n	8009d22 <HAL_DMA_IRQHandler+0x516>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a82      	ldr	r2, [pc, #520]	; (8009ea4 <HAL_DMA_IRQHandler+0x698>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d040      	beq.n	8009d22 <HAL_DMA_IRQHandler+0x516>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a80      	ldr	r2, [pc, #512]	; (8009ea8 <HAL_DMA_IRQHandler+0x69c>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d03b      	beq.n	8009d22 <HAL_DMA_IRQHandler+0x516>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a7f      	ldr	r2, [pc, #508]	; (8009eac <HAL_DMA_IRQHandler+0x6a0>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d036      	beq.n	8009d22 <HAL_DMA_IRQHandler+0x516>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a7d      	ldr	r2, [pc, #500]	; (8009eb0 <HAL_DMA_IRQHandler+0x6a4>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d031      	beq.n	8009d22 <HAL_DMA_IRQHandler+0x516>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a7c      	ldr	r2, [pc, #496]	; (8009eb4 <HAL_DMA_IRQHandler+0x6a8>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d02c      	beq.n	8009d22 <HAL_DMA_IRQHandler+0x516>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a7a      	ldr	r2, [pc, #488]	; (8009eb8 <HAL_DMA_IRQHandler+0x6ac>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d027      	beq.n	8009d22 <HAL_DMA_IRQHandler+0x516>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a79      	ldr	r2, [pc, #484]	; (8009ebc <HAL_DMA_IRQHandler+0x6b0>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d022      	beq.n	8009d22 <HAL_DMA_IRQHandler+0x516>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a77      	ldr	r2, [pc, #476]	; (8009ec0 <HAL_DMA_IRQHandler+0x6b4>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d01d      	beq.n	8009d22 <HAL_DMA_IRQHandler+0x516>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a76      	ldr	r2, [pc, #472]	; (8009ec4 <HAL_DMA_IRQHandler+0x6b8>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d018      	beq.n	8009d22 <HAL_DMA_IRQHandler+0x516>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a74      	ldr	r2, [pc, #464]	; (8009ec8 <HAL_DMA_IRQHandler+0x6bc>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d013      	beq.n	8009d22 <HAL_DMA_IRQHandler+0x516>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a73      	ldr	r2, [pc, #460]	; (8009ecc <HAL_DMA_IRQHandler+0x6c0>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d00e      	beq.n	8009d22 <HAL_DMA_IRQHandler+0x516>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a71      	ldr	r2, [pc, #452]	; (8009ed0 <HAL_DMA_IRQHandler+0x6c4>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d009      	beq.n	8009d22 <HAL_DMA_IRQHandler+0x516>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a70      	ldr	r2, [pc, #448]	; (8009ed4 <HAL_DMA_IRQHandler+0x6c8>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d004      	beq.n	8009d22 <HAL_DMA_IRQHandler+0x516>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a6e      	ldr	r2, [pc, #440]	; (8009ed8 <HAL_DMA_IRQHandler+0x6cc>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d10a      	bne.n	8009d38 <HAL_DMA_IRQHandler+0x52c>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f003 0308 	and.w	r3, r3, #8
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	bf14      	ite	ne
 8009d30:	2301      	movne	r3, #1
 8009d32:	2300      	moveq	r3, #0
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	e009      	b.n	8009d4c <HAL_DMA_IRQHandler+0x540>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f003 0304 	and.w	r3, r3, #4
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	bf14      	ite	ne
 8009d46:	2301      	movne	r3, #1
 8009d48:	2300      	moveq	r3, #0
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d03e      	beq.n	8009dce <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d54:	f003 031f 	and.w	r3, r3, #31
 8009d58:	2210      	movs	r2, #16
 8009d5a:	409a      	lsls	r2, r3
 8009d5c:	6a3b      	ldr	r3, [r7, #32]
 8009d5e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d018      	beq.n	8009da0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d108      	bne.n	8009d8e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d024      	beq.n	8009dce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	4798      	blx	r3
 8009d8c:	e01f      	b.n	8009dce <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d01b      	beq.n	8009dce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	4798      	blx	r3
 8009d9e:	e016      	b.n	8009dce <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d107      	bne.n	8009dbe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f022 0208 	bic.w	r2, r2, #8
 8009dbc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d003      	beq.n	8009dce <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dd2:	f003 031f 	and.w	r3, r3, #31
 8009dd6:	2220      	movs	r2, #32
 8009dd8:	409a      	lsls	r2, r3
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	4013      	ands	r3, r2
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	f000 8110 	beq.w	800a004 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a2c      	ldr	r2, [pc, #176]	; (8009e9c <HAL_DMA_IRQHandler+0x690>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d04a      	beq.n	8009e84 <HAL_DMA_IRQHandler+0x678>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a2b      	ldr	r2, [pc, #172]	; (8009ea0 <HAL_DMA_IRQHandler+0x694>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d045      	beq.n	8009e84 <HAL_DMA_IRQHandler+0x678>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a29      	ldr	r2, [pc, #164]	; (8009ea4 <HAL_DMA_IRQHandler+0x698>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d040      	beq.n	8009e84 <HAL_DMA_IRQHandler+0x678>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a28      	ldr	r2, [pc, #160]	; (8009ea8 <HAL_DMA_IRQHandler+0x69c>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d03b      	beq.n	8009e84 <HAL_DMA_IRQHandler+0x678>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a26      	ldr	r2, [pc, #152]	; (8009eac <HAL_DMA_IRQHandler+0x6a0>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d036      	beq.n	8009e84 <HAL_DMA_IRQHandler+0x678>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a25      	ldr	r2, [pc, #148]	; (8009eb0 <HAL_DMA_IRQHandler+0x6a4>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d031      	beq.n	8009e84 <HAL_DMA_IRQHandler+0x678>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a23      	ldr	r2, [pc, #140]	; (8009eb4 <HAL_DMA_IRQHandler+0x6a8>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d02c      	beq.n	8009e84 <HAL_DMA_IRQHandler+0x678>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a22      	ldr	r2, [pc, #136]	; (8009eb8 <HAL_DMA_IRQHandler+0x6ac>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d027      	beq.n	8009e84 <HAL_DMA_IRQHandler+0x678>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a20      	ldr	r2, [pc, #128]	; (8009ebc <HAL_DMA_IRQHandler+0x6b0>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d022      	beq.n	8009e84 <HAL_DMA_IRQHandler+0x678>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a1f      	ldr	r2, [pc, #124]	; (8009ec0 <HAL_DMA_IRQHandler+0x6b4>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d01d      	beq.n	8009e84 <HAL_DMA_IRQHandler+0x678>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a1d      	ldr	r2, [pc, #116]	; (8009ec4 <HAL_DMA_IRQHandler+0x6b8>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d018      	beq.n	8009e84 <HAL_DMA_IRQHandler+0x678>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a1c      	ldr	r2, [pc, #112]	; (8009ec8 <HAL_DMA_IRQHandler+0x6bc>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d013      	beq.n	8009e84 <HAL_DMA_IRQHandler+0x678>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a1a      	ldr	r2, [pc, #104]	; (8009ecc <HAL_DMA_IRQHandler+0x6c0>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d00e      	beq.n	8009e84 <HAL_DMA_IRQHandler+0x678>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a19      	ldr	r2, [pc, #100]	; (8009ed0 <HAL_DMA_IRQHandler+0x6c4>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d009      	beq.n	8009e84 <HAL_DMA_IRQHandler+0x678>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a17      	ldr	r2, [pc, #92]	; (8009ed4 <HAL_DMA_IRQHandler+0x6c8>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d004      	beq.n	8009e84 <HAL_DMA_IRQHandler+0x678>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a16      	ldr	r2, [pc, #88]	; (8009ed8 <HAL_DMA_IRQHandler+0x6cc>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d12b      	bne.n	8009edc <HAL_DMA_IRQHandler+0x6d0>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f003 0310 	and.w	r3, r3, #16
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	bf14      	ite	ne
 8009e92:	2301      	movne	r3, #1
 8009e94:	2300      	moveq	r3, #0
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	e02a      	b.n	8009ef0 <HAL_DMA_IRQHandler+0x6e4>
 8009e9a:	bf00      	nop
 8009e9c:	40020010 	.word	0x40020010
 8009ea0:	40020028 	.word	0x40020028
 8009ea4:	40020040 	.word	0x40020040
 8009ea8:	40020058 	.word	0x40020058
 8009eac:	40020070 	.word	0x40020070
 8009eb0:	40020088 	.word	0x40020088
 8009eb4:	400200a0 	.word	0x400200a0
 8009eb8:	400200b8 	.word	0x400200b8
 8009ebc:	40020410 	.word	0x40020410
 8009ec0:	40020428 	.word	0x40020428
 8009ec4:	40020440 	.word	0x40020440
 8009ec8:	40020458 	.word	0x40020458
 8009ecc:	40020470 	.word	0x40020470
 8009ed0:	40020488 	.word	0x40020488
 8009ed4:	400204a0 	.word	0x400204a0
 8009ed8:	400204b8 	.word	0x400204b8
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f003 0302 	and.w	r3, r3, #2
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	bf14      	ite	ne
 8009eea:	2301      	movne	r3, #1
 8009eec:	2300      	moveq	r3, #0
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	f000 8087 	beq.w	800a004 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009efa:	f003 031f 	and.w	r3, r3, #31
 8009efe:	2220      	movs	r2, #32
 8009f00:	409a      	lsls	r2, r3
 8009f02:	6a3b      	ldr	r3, [r7, #32]
 8009f04:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	2b04      	cmp	r3, #4
 8009f10:	d139      	bne.n	8009f86 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f022 0216 	bic.w	r2, r2, #22
 8009f20:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	695a      	ldr	r2, [r3, #20]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f30:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d103      	bne.n	8009f42 <HAL_DMA_IRQHandler+0x736>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d007      	beq.n	8009f52 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f022 0208 	bic.w	r2, r2, #8
 8009f50:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f56:	f003 031f 	and.w	r3, r3, #31
 8009f5a:	223f      	movs	r2, #63	; 0x3f
 8009f5c:	409a      	lsls	r2, r3
 8009f5e:	6a3b      	ldr	r3, [r7, #32]
 8009f60:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2201      	movs	r2, #1
 8009f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	f000 834a 	beq.w	800a610 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	4798      	blx	r3
          }
          return;
 8009f84:	e344      	b.n	800a610 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d018      	beq.n	8009fc6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d108      	bne.n	8009fb4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d02c      	beq.n	800a004 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	4798      	blx	r3
 8009fb2:	e027      	b.n	800a004 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d023      	beq.n	800a004 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	4798      	blx	r3
 8009fc4:	e01e      	b.n	800a004 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10f      	bne.n	8009ff4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f022 0210 	bic.w	r2, r2, #16
 8009fe2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d003      	beq.n	800a004 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f000 8306 	beq.w	800a61a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a012:	f003 0301 	and.w	r3, r3, #1
 800a016:	2b00      	cmp	r3, #0
 800a018:	f000 8088 	beq.w	800a12c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2204      	movs	r2, #4
 800a020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a7a      	ldr	r2, [pc, #488]	; (800a214 <HAL_DMA_IRQHandler+0xa08>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d04a      	beq.n	800a0c4 <HAL_DMA_IRQHandler+0x8b8>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a79      	ldr	r2, [pc, #484]	; (800a218 <HAL_DMA_IRQHandler+0xa0c>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d045      	beq.n	800a0c4 <HAL_DMA_IRQHandler+0x8b8>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a77      	ldr	r2, [pc, #476]	; (800a21c <HAL_DMA_IRQHandler+0xa10>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d040      	beq.n	800a0c4 <HAL_DMA_IRQHandler+0x8b8>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a76      	ldr	r2, [pc, #472]	; (800a220 <HAL_DMA_IRQHandler+0xa14>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d03b      	beq.n	800a0c4 <HAL_DMA_IRQHandler+0x8b8>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a74      	ldr	r2, [pc, #464]	; (800a224 <HAL_DMA_IRQHandler+0xa18>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d036      	beq.n	800a0c4 <HAL_DMA_IRQHandler+0x8b8>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a73      	ldr	r2, [pc, #460]	; (800a228 <HAL_DMA_IRQHandler+0xa1c>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d031      	beq.n	800a0c4 <HAL_DMA_IRQHandler+0x8b8>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a71      	ldr	r2, [pc, #452]	; (800a22c <HAL_DMA_IRQHandler+0xa20>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d02c      	beq.n	800a0c4 <HAL_DMA_IRQHandler+0x8b8>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a70      	ldr	r2, [pc, #448]	; (800a230 <HAL_DMA_IRQHandler+0xa24>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d027      	beq.n	800a0c4 <HAL_DMA_IRQHandler+0x8b8>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a6e      	ldr	r2, [pc, #440]	; (800a234 <HAL_DMA_IRQHandler+0xa28>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d022      	beq.n	800a0c4 <HAL_DMA_IRQHandler+0x8b8>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a6d      	ldr	r2, [pc, #436]	; (800a238 <HAL_DMA_IRQHandler+0xa2c>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d01d      	beq.n	800a0c4 <HAL_DMA_IRQHandler+0x8b8>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a6b      	ldr	r2, [pc, #428]	; (800a23c <HAL_DMA_IRQHandler+0xa30>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d018      	beq.n	800a0c4 <HAL_DMA_IRQHandler+0x8b8>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a6a      	ldr	r2, [pc, #424]	; (800a240 <HAL_DMA_IRQHandler+0xa34>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d013      	beq.n	800a0c4 <HAL_DMA_IRQHandler+0x8b8>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a68      	ldr	r2, [pc, #416]	; (800a244 <HAL_DMA_IRQHandler+0xa38>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d00e      	beq.n	800a0c4 <HAL_DMA_IRQHandler+0x8b8>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a67      	ldr	r2, [pc, #412]	; (800a248 <HAL_DMA_IRQHandler+0xa3c>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d009      	beq.n	800a0c4 <HAL_DMA_IRQHandler+0x8b8>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a65      	ldr	r2, [pc, #404]	; (800a24c <HAL_DMA_IRQHandler+0xa40>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d004      	beq.n	800a0c4 <HAL_DMA_IRQHandler+0x8b8>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a64      	ldr	r2, [pc, #400]	; (800a250 <HAL_DMA_IRQHandler+0xa44>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d108      	bne.n	800a0d6 <HAL_DMA_IRQHandler+0x8ca>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f022 0201 	bic.w	r2, r2, #1
 800a0d2:	601a      	str	r2, [r3, #0]
 800a0d4:	e007      	b.n	800a0e6 <HAL_DMA_IRQHandler+0x8da>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f022 0201 	bic.w	r2, r2, #1
 800a0e4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	60fb      	str	r3, [r7, #12]
 800a0ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d307      	bcc.n	800a102 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f003 0301 	and.w	r3, r3, #1
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d1f2      	bne.n	800a0e6 <HAL_DMA_IRQHandler+0x8da>
 800a100:	e000      	b.n	800a104 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800a102:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f003 0301 	and.w	r3, r3, #1
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d004      	beq.n	800a11c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2203      	movs	r2, #3
 800a116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800a11a:	e003      	b.n	800a124 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2201      	movs	r2, #1
 800a120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a130:	2b00      	cmp	r3, #0
 800a132:	f000 8272 	beq.w	800a61a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	4798      	blx	r3
 800a13e:	e26c      	b.n	800a61a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a43      	ldr	r2, [pc, #268]	; (800a254 <HAL_DMA_IRQHandler+0xa48>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d022      	beq.n	800a190 <HAL_DMA_IRQHandler+0x984>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a42      	ldr	r2, [pc, #264]	; (800a258 <HAL_DMA_IRQHandler+0xa4c>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d01d      	beq.n	800a190 <HAL_DMA_IRQHandler+0x984>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a40      	ldr	r2, [pc, #256]	; (800a25c <HAL_DMA_IRQHandler+0xa50>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d018      	beq.n	800a190 <HAL_DMA_IRQHandler+0x984>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a3f      	ldr	r2, [pc, #252]	; (800a260 <HAL_DMA_IRQHandler+0xa54>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d013      	beq.n	800a190 <HAL_DMA_IRQHandler+0x984>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a3d      	ldr	r2, [pc, #244]	; (800a264 <HAL_DMA_IRQHandler+0xa58>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d00e      	beq.n	800a190 <HAL_DMA_IRQHandler+0x984>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a3c      	ldr	r2, [pc, #240]	; (800a268 <HAL_DMA_IRQHandler+0xa5c>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d009      	beq.n	800a190 <HAL_DMA_IRQHandler+0x984>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a3a      	ldr	r2, [pc, #232]	; (800a26c <HAL_DMA_IRQHandler+0xa60>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d004      	beq.n	800a190 <HAL_DMA_IRQHandler+0x984>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a39      	ldr	r2, [pc, #228]	; (800a270 <HAL_DMA_IRQHandler+0xa64>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d101      	bne.n	800a194 <HAL_DMA_IRQHandler+0x988>
 800a190:	2301      	movs	r3, #1
 800a192:	e000      	b.n	800a196 <HAL_DMA_IRQHandler+0x98a>
 800a194:	2300      	movs	r3, #0
 800a196:	2b00      	cmp	r3, #0
 800a198:	f000 823f 	beq.w	800a61a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1a8:	f003 031f 	and.w	r3, r3, #31
 800a1ac:	2204      	movs	r2, #4
 800a1ae:	409a      	lsls	r2, r3
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	4013      	ands	r3, r2
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	f000 80cd 	beq.w	800a354 <HAL_DMA_IRQHandler+0xb48>
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	f003 0304 	and.w	r3, r3, #4
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	f000 80c7 	beq.w	800a354 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1ca:	f003 031f 	and.w	r3, r3, #31
 800a1ce:	2204      	movs	r2, #4
 800a1d0:	409a      	lsls	r2, r3
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d049      	beq.n	800a274 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d109      	bne.n	800a1fe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	f000 8210 	beq.w	800a614 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a1fc:	e20a      	b.n	800a614 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a202:	2b00      	cmp	r3, #0
 800a204:	f000 8206 	beq.w	800a614 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a210:	e200      	b.n	800a614 <HAL_DMA_IRQHandler+0xe08>
 800a212:	bf00      	nop
 800a214:	40020010 	.word	0x40020010
 800a218:	40020028 	.word	0x40020028
 800a21c:	40020040 	.word	0x40020040
 800a220:	40020058 	.word	0x40020058
 800a224:	40020070 	.word	0x40020070
 800a228:	40020088 	.word	0x40020088
 800a22c:	400200a0 	.word	0x400200a0
 800a230:	400200b8 	.word	0x400200b8
 800a234:	40020410 	.word	0x40020410
 800a238:	40020428 	.word	0x40020428
 800a23c:	40020440 	.word	0x40020440
 800a240:	40020458 	.word	0x40020458
 800a244:	40020470 	.word	0x40020470
 800a248:	40020488 	.word	0x40020488
 800a24c:	400204a0 	.word	0x400204a0
 800a250:	400204b8 	.word	0x400204b8
 800a254:	58025408 	.word	0x58025408
 800a258:	5802541c 	.word	0x5802541c
 800a25c:	58025430 	.word	0x58025430
 800a260:	58025444 	.word	0x58025444
 800a264:	58025458 	.word	0x58025458
 800a268:	5802546c 	.word	0x5802546c
 800a26c:	58025480 	.word	0x58025480
 800a270:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	f003 0320 	and.w	r3, r3, #32
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d160      	bne.n	800a340 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a7f      	ldr	r2, [pc, #508]	; (800a480 <HAL_DMA_IRQHandler+0xc74>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d04a      	beq.n	800a31e <HAL_DMA_IRQHandler+0xb12>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a7d      	ldr	r2, [pc, #500]	; (800a484 <HAL_DMA_IRQHandler+0xc78>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d045      	beq.n	800a31e <HAL_DMA_IRQHandler+0xb12>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a7c      	ldr	r2, [pc, #496]	; (800a488 <HAL_DMA_IRQHandler+0xc7c>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d040      	beq.n	800a31e <HAL_DMA_IRQHandler+0xb12>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a7a      	ldr	r2, [pc, #488]	; (800a48c <HAL_DMA_IRQHandler+0xc80>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d03b      	beq.n	800a31e <HAL_DMA_IRQHandler+0xb12>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a79      	ldr	r2, [pc, #484]	; (800a490 <HAL_DMA_IRQHandler+0xc84>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d036      	beq.n	800a31e <HAL_DMA_IRQHandler+0xb12>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a77      	ldr	r2, [pc, #476]	; (800a494 <HAL_DMA_IRQHandler+0xc88>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d031      	beq.n	800a31e <HAL_DMA_IRQHandler+0xb12>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a76      	ldr	r2, [pc, #472]	; (800a498 <HAL_DMA_IRQHandler+0xc8c>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d02c      	beq.n	800a31e <HAL_DMA_IRQHandler+0xb12>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a74      	ldr	r2, [pc, #464]	; (800a49c <HAL_DMA_IRQHandler+0xc90>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d027      	beq.n	800a31e <HAL_DMA_IRQHandler+0xb12>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4a73      	ldr	r2, [pc, #460]	; (800a4a0 <HAL_DMA_IRQHandler+0xc94>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d022      	beq.n	800a31e <HAL_DMA_IRQHandler+0xb12>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a71      	ldr	r2, [pc, #452]	; (800a4a4 <HAL_DMA_IRQHandler+0xc98>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d01d      	beq.n	800a31e <HAL_DMA_IRQHandler+0xb12>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a70      	ldr	r2, [pc, #448]	; (800a4a8 <HAL_DMA_IRQHandler+0xc9c>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d018      	beq.n	800a31e <HAL_DMA_IRQHandler+0xb12>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a6e      	ldr	r2, [pc, #440]	; (800a4ac <HAL_DMA_IRQHandler+0xca0>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d013      	beq.n	800a31e <HAL_DMA_IRQHandler+0xb12>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a6d      	ldr	r2, [pc, #436]	; (800a4b0 <HAL_DMA_IRQHandler+0xca4>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d00e      	beq.n	800a31e <HAL_DMA_IRQHandler+0xb12>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a6b      	ldr	r2, [pc, #428]	; (800a4b4 <HAL_DMA_IRQHandler+0xca8>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d009      	beq.n	800a31e <HAL_DMA_IRQHandler+0xb12>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a6a      	ldr	r2, [pc, #424]	; (800a4b8 <HAL_DMA_IRQHandler+0xcac>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d004      	beq.n	800a31e <HAL_DMA_IRQHandler+0xb12>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a68      	ldr	r2, [pc, #416]	; (800a4bc <HAL_DMA_IRQHandler+0xcb0>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d108      	bne.n	800a330 <HAL_DMA_IRQHandler+0xb24>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f022 0208 	bic.w	r2, r2, #8
 800a32c:	601a      	str	r2, [r3, #0]
 800a32e:	e007      	b.n	800a340 <HAL_DMA_IRQHandler+0xb34>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f022 0204 	bic.w	r2, r2, #4
 800a33e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a344:	2b00      	cmp	r3, #0
 800a346:	f000 8165 	beq.w	800a614 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a352:	e15f      	b.n	800a614 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a358:	f003 031f 	and.w	r3, r3, #31
 800a35c:	2202      	movs	r2, #2
 800a35e:	409a      	lsls	r2, r3
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	4013      	ands	r3, r2
 800a364:	2b00      	cmp	r3, #0
 800a366:	f000 80c5 	beq.w	800a4f4 <HAL_DMA_IRQHandler+0xce8>
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	f003 0302 	and.w	r3, r3, #2
 800a370:	2b00      	cmp	r3, #0
 800a372:	f000 80bf 	beq.w	800a4f4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a37a:	f003 031f 	and.w	r3, r3, #31
 800a37e:	2202      	movs	r2, #2
 800a380:	409a      	lsls	r2, r3
 800a382:	69fb      	ldr	r3, [r7, #28]
 800a384:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d018      	beq.n	800a3c2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a396:	2b00      	cmp	r3, #0
 800a398:	d109      	bne.n	800a3ae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f000 813a 	beq.w	800a618 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a3ac:	e134      	b.n	800a618 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	f000 8130 	beq.w	800a618 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a3c0:	e12a      	b.n	800a618 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	f003 0320 	and.w	r3, r3, #32
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f040 8089 	bne.w	800a4e0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a2b      	ldr	r2, [pc, #172]	; (800a480 <HAL_DMA_IRQHandler+0xc74>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d04a      	beq.n	800a46e <HAL_DMA_IRQHandler+0xc62>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a29      	ldr	r2, [pc, #164]	; (800a484 <HAL_DMA_IRQHandler+0xc78>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d045      	beq.n	800a46e <HAL_DMA_IRQHandler+0xc62>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a28      	ldr	r2, [pc, #160]	; (800a488 <HAL_DMA_IRQHandler+0xc7c>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d040      	beq.n	800a46e <HAL_DMA_IRQHandler+0xc62>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a26      	ldr	r2, [pc, #152]	; (800a48c <HAL_DMA_IRQHandler+0xc80>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d03b      	beq.n	800a46e <HAL_DMA_IRQHandler+0xc62>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a25      	ldr	r2, [pc, #148]	; (800a490 <HAL_DMA_IRQHandler+0xc84>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d036      	beq.n	800a46e <HAL_DMA_IRQHandler+0xc62>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a23      	ldr	r2, [pc, #140]	; (800a494 <HAL_DMA_IRQHandler+0xc88>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d031      	beq.n	800a46e <HAL_DMA_IRQHandler+0xc62>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a22      	ldr	r2, [pc, #136]	; (800a498 <HAL_DMA_IRQHandler+0xc8c>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d02c      	beq.n	800a46e <HAL_DMA_IRQHandler+0xc62>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a20      	ldr	r2, [pc, #128]	; (800a49c <HAL_DMA_IRQHandler+0xc90>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d027      	beq.n	800a46e <HAL_DMA_IRQHandler+0xc62>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a1f      	ldr	r2, [pc, #124]	; (800a4a0 <HAL_DMA_IRQHandler+0xc94>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d022      	beq.n	800a46e <HAL_DMA_IRQHandler+0xc62>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a1d      	ldr	r2, [pc, #116]	; (800a4a4 <HAL_DMA_IRQHandler+0xc98>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d01d      	beq.n	800a46e <HAL_DMA_IRQHandler+0xc62>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a1c      	ldr	r2, [pc, #112]	; (800a4a8 <HAL_DMA_IRQHandler+0xc9c>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d018      	beq.n	800a46e <HAL_DMA_IRQHandler+0xc62>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a1a      	ldr	r2, [pc, #104]	; (800a4ac <HAL_DMA_IRQHandler+0xca0>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d013      	beq.n	800a46e <HAL_DMA_IRQHandler+0xc62>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a19      	ldr	r2, [pc, #100]	; (800a4b0 <HAL_DMA_IRQHandler+0xca4>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d00e      	beq.n	800a46e <HAL_DMA_IRQHandler+0xc62>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a17      	ldr	r2, [pc, #92]	; (800a4b4 <HAL_DMA_IRQHandler+0xca8>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d009      	beq.n	800a46e <HAL_DMA_IRQHandler+0xc62>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a16      	ldr	r2, [pc, #88]	; (800a4b8 <HAL_DMA_IRQHandler+0xcac>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d004      	beq.n	800a46e <HAL_DMA_IRQHandler+0xc62>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a14      	ldr	r2, [pc, #80]	; (800a4bc <HAL_DMA_IRQHandler+0xcb0>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d128      	bne.n	800a4c0 <HAL_DMA_IRQHandler+0xcb4>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f022 0214 	bic.w	r2, r2, #20
 800a47c:	601a      	str	r2, [r3, #0]
 800a47e:	e027      	b.n	800a4d0 <HAL_DMA_IRQHandler+0xcc4>
 800a480:	40020010 	.word	0x40020010
 800a484:	40020028 	.word	0x40020028
 800a488:	40020040 	.word	0x40020040
 800a48c:	40020058 	.word	0x40020058
 800a490:	40020070 	.word	0x40020070
 800a494:	40020088 	.word	0x40020088
 800a498:	400200a0 	.word	0x400200a0
 800a49c:	400200b8 	.word	0x400200b8
 800a4a0:	40020410 	.word	0x40020410
 800a4a4:	40020428 	.word	0x40020428
 800a4a8:	40020440 	.word	0x40020440
 800a4ac:	40020458 	.word	0x40020458
 800a4b0:	40020470 	.word	0x40020470
 800a4b4:	40020488 	.word	0x40020488
 800a4b8:	400204a0 	.word	0x400204a0
 800a4bc:	400204b8 	.word	0x400204b8
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f022 020a 	bic.w	r2, r2, #10
 800a4ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f000 8097 	beq.w	800a618 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a4f2:	e091      	b.n	800a618 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4f8:	f003 031f 	and.w	r3, r3, #31
 800a4fc:	2208      	movs	r2, #8
 800a4fe:	409a      	lsls	r2, r3
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	4013      	ands	r3, r2
 800a504:	2b00      	cmp	r3, #0
 800a506:	f000 8088 	beq.w	800a61a <HAL_DMA_IRQHandler+0xe0e>
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	f003 0308 	and.w	r3, r3, #8
 800a510:	2b00      	cmp	r3, #0
 800a512:	f000 8082 	beq.w	800a61a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a41      	ldr	r2, [pc, #260]	; (800a620 <HAL_DMA_IRQHandler+0xe14>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d04a      	beq.n	800a5b6 <HAL_DMA_IRQHandler+0xdaa>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a3f      	ldr	r2, [pc, #252]	; (800a624 <HAL_DMA_IRQHandler+0xe18>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d045      	beq.n	800a5b6 <HAL_DMA_IRQHandler+0xdaa>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a3e      	ldr	r2, [pc, #248]	; (800a628 <HAL_DMA_IRQHandler+0xe1c>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d040      	beq.n	800a5b6 <HAL_DMA_IRQHandler+0xdaa>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a3c      	ldr	r2, [pc, #240]	; (800a62c <HAL_DMA_IRQHandler+0xe20>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d03b      	beq.n	800a5b6 <HAL_DMA_IRQHandler+0xdaa>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a3b      	ldr	r2, [pc, #236]	; (800a630 <HAL_DMA_IRQHandler+0xe24>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d036      	beq.n	800a5b6 <HAL_DMA_IRQHandler+0xdaa>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a39      	ldr	r2, [pc, #228]	; (800a634 <HAL_DMA_IRQHandler+0xe28>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d031      	beq.n	800a5b6 <HAL_DMA_IRQHandler+0xdaa>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a38      	ldr	r2, [pc, #224]	; (800a638 <HAL_DMA_IRQHandler+0xe2c>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d02c      	beq.n	800a5b6 <HAL_DMA_IRQHandler+0xdaa>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a36      	ldr	r2, [pc, #216]	; (800a63c <HAL_DMA_IRQHandler+0xe30>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d027      	beq.n	800a5b6 <HAL_DMA_IRQHandler+0xdaa>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a35      	ldr	r2, [pc, #212]	; (800a640 <HAL_DMA_IRQHandler+0xe34>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d022      	beq.n	800a5b6 <HAL_DMA_IRQHandler+0xdaa>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a33      	ldr	r2, [pc, #204]	; (800a644 <HAL_DMA_IRQHandler+0xe38>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d01d      	beq.n	800a5b6 <HAL_DMA_IRQHandler+0xdaa>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a32      	ldr	r2, [pc, #200]	; (800a648 <HAL_DMA_IRQHandler+0xe3c>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d018      	beq.n	800a5b6 <HAL_DMA_IRQHandler+0xdaa>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a30      	ldr	r2, [pc, #192]	; (800a64c <HAL_DMA_IRQHandler+0xe40>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d013      	beq.n	800a5b6 <HAL_DMA_IRQHandler+0xdaa>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a2f      	ldr	r2, [pc, #188]	; (800a650 <HAL_DMA_IRQHandler+0xe44>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d00e      	beq.n	800a5b6 <HAL_DMA_IRQHandler+0xdaa>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a2d      	ldr	r2, [pc, #180]	; (800a654 <HAL_DMA_IRQHandler+0xe48>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d009      	beq.n	800a5b6 <HAL_DMA_IRQHandler+0xdaa>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a2c      	ldr	r2, [pc, #176]	; (800a658 <HAL_DMA_IRQHandler+0xe4c>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d004      	beq.n	800a5b6 <HAL_DMA_IRQHandler+0xdaa>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a2a      	ldr	r2, [pc, #168]	; (800a65c <HAL_DMA_IRQHandler+0xe50>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d108      	bne.n	800a5c8 <HAL_DMA_IRQHandler+0xdbc>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f022 021c 	bic.w	r2, r2, #28
 800a5c4:	601a      	str	r2, [r3, #0]
 800a5c6:	e007      	b.n	800a5d8 <HAL_DMA_IRQHandler+0xdcc>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f022 020e 	bic.w	r2, r2, #14
 800a5d6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5dc:	f003 031f 	and.w	r3, r3, #31
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	409a      	lsls	r2, r3
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a602:	2b00      	cmp	r3, #0
 800a604:	d009      	beq.n	800a61a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	4798      	blx	r3
 800a60e:	e004      	b.n	800a61a <HAL_DMA_IRQHandler+0xe0e>
          return;
 800a610:	bf00      	nop
 800a612:	e002      	b.n	800a61a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a614:	bf00      	nop
 800a616:	e000      	b.n	800a61a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a618:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a61a:	3728      	adds	r7, #40	; 0x28
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	40020010 	.word	0x40020010
 800a624:	40020028 	.word	0x40020028
 800a628:	40020040 	.word	0x40020040
 800a62c:	40020058 	.word	0x40020058
 800a630:	40020070 	.word	0x40020070
 800a634:	40020088 	.word	0x40020088
 800a638:	400200a0 	.word	0x400200a0
 800a63c:	400200b8 	.word	0x400200b8
 800a640:	40020410 	.word	0x40020410
 800a644:	40020428 	.word	0x40020428
 800a648:	40020440 	.word	0x40020440
 800a64c:	40020458 	.word	0x40020458
 800a650:	40020470 	.word	0x40020470
 800a654:	40020488 	.word	0x40020488
 800a658:	400204a0 	.word	0x400204a0
 800a65c:	400204b8 	.word	0x400204b8

0800a660 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a660:	b480      	push	{r7}
 800a662:	b083      	sub	sp, #12
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a66e:	b2db      	uxtb	r3, r3
}
 800a670:	4618      	mov	r0, r3
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a688:	4618      	mov	r0, r3
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a694:	b480      	push	{r7}
 800a696:	b087      	sub	sp, #28
 800a698:	af00      	add	r7, sp, #0
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	60b9      	str	r1, [r7, #8]
 800a69e:	607a      	str	r2, [r7, #4]
 800a6a0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6a6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ac:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a7f      	ldr	r2, [pc, #508]	; (800a8b0 <DMA_SetConfig+0x21c>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d072      	beq.n	800a79e <DMA_SetConfig+0x10a>
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a7d      	ldr	r2, [pc, #500]	; (800a8b4 <DMA_SetConfig+0x220>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d06d      	beq.n	800a79e <DMA_SetConfig+0x10a>
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4a7c      	ldr	r2, [pc, #496]	; (800a8b8 <DMA_SetConfig+0x224>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d068      	beq.n	800a79e <DMA_SetConfig+0x10a>
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a7a      	ldr	r2, [pc, #488]	; (800a8bc <DMA_SetConfig+0x228>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d063      	beq.n	800a79e <DMA_SetConfig+0x10a>
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a79      	ldr	r2, [pc, #484]	; (800a8c0 <DMA_SetConfig+0x22c>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d05e      	beq.n	800a79e <DMA_SetConfig+0x10a>
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a77      	ldr	r2, [pc, #476]	; (800a8c4 <DMA_SetConfig+0x230>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d059      	beq.n	800a79e <DMA_SetConfig+0x10a>
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a76      	ldr	r2, [pc, #472]	; (800a8c8 <DMA_SetConfig+0x234>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d054      	beq.n	800a79e <DMA_SetConfig+0x10a>
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a74      	ldr	r2, [pc, #464]	; (800a8cc <DMA_SetConfig+0x238>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d04f      	beq.n	800a79e <DMA_SetConfig+0x10a>
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4a73      	ldr	r2, [pc, #460]	; (800a8d0 <DMA_SetConfig+0x23c>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d04a      	beq.n	800a79e <DMA_SetConfig+0x10a>
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a71      	ldr	r2, [pc, #452]	; (800a8d4 <DMA_SetConfig+0x240>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d045      	beq.n	800a79e <DMA_SetConfig+0x10a>
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a70      	ldr	r2, [pc, #448]	; (800a8d8 <DMA_SetConfig+0x244>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d040      	beq.n	800a79e <DMA_SetConfig+0x10a>
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a6e      	ldr	r2, [pc, #440]	; (800a8dc <DMA_SetConfig+0x248>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d03b      	beq.n	800a79e <DMA_SetConfig+0x10a>
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a6d      	ldr	r2, [pc, #436]	; (800a8e0 <DMA_SetConfig+0x24c>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d036      	beq.n	800a79e <DMA_SetConfig+0x10a>
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a6b      	ldr	r2, [pc, #428]	; (800a8e4 <DMA_SetConfig+0x250>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d031      	beq.n	800a79e <DMA_SetConfig+0x10a>
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a6a      	ldr	r2, [pc, #424]	; (800a8e8 <DMA_SetConfig+0x254>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d02c      	beq.n	800a79e <DMA_SetConfig+0x10a>
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a68      	ldr	r2, [pc, #416]	; (800a8ec <DMA_SetConfig+0x258>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d027      	beq.n	800a79e <DMA_SetConfig+0x10a>
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a67      	ldr	r2, [pc, #412]	; (800a8f0 <DMA_SetConfig+0x25c>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d022      	beq.n	800a79e <DMA_SetConfig+0x10a>
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a65      	ldr	r2, [pc, #404]	; (800a8f4 <DMA_SetConfig+0x260>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d01d      	beq.n	800a79e <DMA_SetConfig+0x10a>
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a64      	ldr	r2, [pc, #400]	; (800a8f8 <DMA_SetConfig+0x264>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d018      	beq.n	800a79e <DMA_SetConfig+0x10a>
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a62      	ldr	r2, [pc, #392]	; (800a8fc <DMA_SetConfig+0x268>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d013      	beq.n	800a79e <DMA_SetConfig+0x10a>
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a61      	ldr	r2, [pc, #388]	; (800a900 <DMA_SetConfig+0x26c>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d00e      	beq.n	800a79e <DMA_SetConfig+0x10a>
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a5f      	ldr	r2, [pc, #380]	; (800a904 <DMA_SetConfig+0x270>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d009      	beq.n	800a79e <DMA_SetConfig+0x10a>
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a5e      	ldr	r2, [pc, #376]	; (800a908 <DMA_SetConfig+0x274>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d004      	beq.n	800a79e <DMA_SetConfig+0x10a>
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a5c      	ldr	r2, [pc, #368]	; (800a90c <DMA_SetConfig+0x278>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d101      	bne.n	800a7a2 <DMA_SetConfig+0x10e>
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e000      	b.n	800a7a4 <DMA_SetConfig+0x110>
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d00d      	beq.n	800a7c4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a7b0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d004      	beq.n	800a7c4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a7c2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a39      	ldr	r2, [pc, #228]	; (800a8b0 <DMA_SetConfig+0x21c>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d04a      	beq.n	800a864 <DMA_SetConfig+0x1d0>
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a38      	ldr	r2, [pc, #224]	; (800a8b4 <DMA_SetConfig+0x220>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d045      	beq.n	800a864 <DMA_SetConfig+0x1d0>
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a36      	ldr	r2, [pc, #216]	; (800a8b8 <DMA_SetConfig+0x224>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d040      	beq.n	800a864 <DMA_SetConfig+0x1d0>
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4a35      	ldr	r2, [pc, #212]	; (800a8bc <DMA_SetConfig+0x228>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d03b      	beq.n	800a864 <DMA_SetConfig+0x1d0>
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a33      	ldr	r2, [pc, #204]	; (800a8c0 <DMA_SetConfig+0x22c>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d036      	beq.n	800a864 <DMA_SetConfig+0x1d0>
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a32      	ldr	r2, [pc, #200]	; (800a8c4 <DMA_SetConfig+0x230>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d031      	beq.n	800a864 <DMA_SetConfig+0x1d0>
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a30      	ldr	r2, [pc, #192]	; (800a8c8 <DMA_SetConfig+0x234>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d02c      	beq.n	800a864 <DMA_SetConfig+0x1d0>
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a2f      	ldr	r2, [pc, #188]	; (800a8cc <DMA_SetConfig+0x238>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d027      	beq.n	800a864 <DMA_SetConfig+0x1d0>
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a2d      	ldr	r2, [pc, #180]	; (800a8d0 <DMA_SetConfig+0x23c>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d022      	beq.n	800a864 <DMA_SetConfig+0x1d0>
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a2c      	ldr	r2, [pc, #176]	; (800a8d4 <DMA_SetConfig+0x240>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d01d      	beq.n	800a864 <DMA_SetConfig+0x1d0>
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a2a      	ldr	r2, [pc, #168]	; (800a8d8 <DMA_SetConfig+0x244>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d018      	beq.n	800a864 <DMA_SetConfig+0x1d0>
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a29      	ldr	r2, [pc, #164]	; (800a8dc <DMA_SetConfig+0x248>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d013      	beq.n	800a864 <DMA_SetConfig+0x1d0>
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a27      	ldr	r2, [pc, #156]	; (800a8e0 <DMA_SetConfig+0x24c>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d00e      	beq.n	800a864 <DMA_SetConfig+0x1d0>
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a26      	ldr	r2, [pc, #152]	; (800a8e4 <DMA_SetConfig+0x250>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d009      	beq.n	800a864 <DMA_SetConfig+0x1d0>
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a24      	ldr	r2, [pc, #144]	; (800a8e8 <DMA_SetConfig+0x254>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d004      	beq.n	800a864 <DMA_SetConfig+0x1d0>
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a23      	ldr	r2, [pc, #140]	; (800a8ec <DMA_SetConfig+0x258>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d101      	bne.n	800a868 <DMA_SetConfig+0x1d4>
 800a864:	2301      	movs	r3, #1
 800a866:	e000      	b.n	800a86a <DMA_SetConfig+0x1d6>
 800a868:	2300      	movs	r3, #0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d059      	beq.n	800a922 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a872:	f003 031f 	and.w	r3, r3, #31
 800a876:	223f      	movs	r2, #63	; 0x3f
 800a878:	409a      	lsls	r2, r3
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a88c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	683a      	ldr	r2, [r7, #0]
 800a894:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	689b      	ldr	r3, [r3, #8]
 800a89a:	2b40      	cmp	r3, #64	; 0x40
 800a89c:	d138      	bne.n	800a910 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	68ba      	ldr	r2, [r7, #8]
 800a8ac:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a8ae:	e086      	b.n	800a9be <DMA_SetConfig+0x32a>
 800a8b0:	40020010 	.word	0x40020010
 800a8b4:	40020028 	.word	0x40020028
 800a8b8:	40020040 	.word	0x40020040
 800a8bc:	40020058 	.word	0x40020058
 800a8c0:	40020070 	.word	0x40020070
 800a8c4:	40020088 	.word	0x40020088
 800a8c8:	400200a0 	.word	0x400200a0
 800a8cc:	400200b8 	.word	0x400200b8
 800a8d0:	40020410 	.word	0x40020410
 800a8d4:	40020428 	.word	0x40020428
 800a8d8:	40020440 	.word	0x40020440
 800a8dc:	40020458 	.word	0x40020458
 800a8e0:	40020470 	.word	0x40020470
 800a8e4:	40020488 	.word	0x40020488
 800a8e8:	400204a0 	.word	0x400204a0
 800a8ec:	400204b8 	.word	0x400204b8
 800a8f0:	58025408 	.word	0x58025408
 800a8f4:	5802541c 	.word	0x5802541c
 800a8f8:	58025430 	.word	0x58025430
 800a8fc:	58025444 	.word	0x58025444
 800a900:	58025458 	.word	0x58025458
 800a904:	5802546c 	.word	0x5802546c
 800a908:	58025480 	.word	0x58025480
 800a90c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	68ba      	ldr	r2, [r7, #8]
 800a916:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	60da      	str	r2, [r3, #12]
}
 800a920:	e04d      	b.n	800a9be <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a29      	ldr	r2, [pc, #164]	; (800a9cc <DMA_SetConfig+0x338>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d022      	beq.n	800a972 <DMA_SetConfig+0x2de>
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a27      	ldr	r2, [pc, #156]	; (800a9d0 <DMA_SetConfig+0x33c>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d01d      	beq.n	800a972 <DMA_SetConfig+0x2de>
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a26      	ldr	r2, [pc, #152]	; (800a9d4 <DMA_SetConfig+0x340>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d018      	beq.n	800a972 <DMA_SetConfig+0x2de>
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a24      	ldr	r2, [pc, #144]	; (800a9d8 <DMA_SetConfig+0x344>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d013      	beq.n	800a972 <DMA_SetConfig+0x2de>
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a23      	ldr	r2, [pc, #140]	; (800a9dc <DMA_SetConfig+0x348>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d00e      	beq.n	800a972 <DMA_SetConfig+0x2de>
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a21      	ldr	r2, [pc, #132]	; (800a9e0 <DMA_SetConfig+0x34c>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d009      	beq.n	800a972 <DMA_SetConfig+0x2de>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4a20      	ldr	r2, [pc, #128]	; (800a9e4 <DMA_SetConfig+0x350>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d004      	beq.n	800a972 <DMA_SetConfig+0x2de>
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a1e      	ldr	r2, [pc, #120]	; (800a9e8 <DMA_SetConfig+0x354>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d101      	bne.n	800a976 <DMA_SetConfig+0x2e2>
 800a972:	2301      	movs	r3, #1
 800a974:	e000      	b.n	800a978 <DMA_SetConfig+0x2e4>
 800a976:	2300      	movs	r3, #0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d020      	beq.n	800a9be <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a980:	f003 031f 	and.w	r3, r3, #31
 800a984:	2201      	movs	r2, #1
 800a986:	409a      	lsls	r2, r3
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	683a      	ldr	r2, [r7, #0]
 800a992:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	689b      	ldr	r3, [r3, #8]
 800a998:	2b40      	cmp	r3, #64	; 0x40
 800a99a:	d108      	bne.n	800a9ae <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	687a      	ldr	r2, [r7, #4]
 800a9a2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	68ba      	ldr	r2, [r7, #8]
 800a9aa:	60da      	str	r2, [r3, #12]
}
 800a9ac:	e007      	b.n	800a9be <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	68ba      	ldr	r2, [r7, #8]
 800a9b4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	60da      	str	r2, [r3, #12]
}
 800a9be:	bf00      	nop
 800a9c0:	371c      	adds	r7, #28
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	58025408 	.word	0x58025408
 800a9d0:	5802541c 	.word	0x5802541c
 800a9d4:	58025430 	.word	0x58025430
 800a9d8:	58025444 	.word	0x58025444
 800a9dc:	58025458 	.word	0x58025458
 800a9e0:	5802546c 	.word	0x5802546c
 800a9e4:	58025480 	.word	0x58025480
 800a9e8:	58025494 	.word	0x58025494

0800a9ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b085      	sub	sp, #20
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a42      	ldr	r2, [pc, #264]	; (800ab04 <DMA_CalcBaseAndBitshift+0x118>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d04a      	beq.n	800aa94 <DMA_CalcBaseAndBitshift+0xa8>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a41      	ldr	r2, [pc, #260]	; (800ab08 <DMA_CalcBaseAndBitshift+0x11c>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d045      	beq.n	800aa94 <DMA_CalcBaseAndBitshift+0xa8>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a3f      	ldr	r2, [pc, #252]	; (800ab0c <DMA_CalcBaseAndBitshift+0x120>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d040      	beq.n	800aa94 <DMA_CalcBaseAndBitshift+0xa8>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a3e      	ldr	r2, [pc, #248]	; (800ab10 <DMA_CalcBaseAndBitshift+0x124>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d03b      	beq.n	800aa94 <DMA_CalcBaseAndBitshift+0xa8>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a3c      	ldr	r2, [pc, #240]	; (800ab14 <DMA_CalcBaseAndBitshift+0x128>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d036      	beq.n	800aa94 <DMA_CalcBaseAndBitshift+0xa8>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a3b      	ldr	r2, [pc, #236]	; (800ab18 <DMA_CalcBaseAndBitshift+0x12c>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d031      	beq.n	800aa94 <DMA_CalcBaseAndBitshift+0xa8>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a39      	ldr	r2, [pc, #228]	; (800ab1c <DMA_CalcBaseAndBitshift+0x130>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d02c      	beq.n	800aa94 <DMA_CalcBaseAndBitshift+0xa8>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4a38      	ldr	r2, [pc, #224]	; (800ab20 <DMA_CalcBaseAndBitshift+0x134>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d027      	beq.n	800aa94 <DMA_CalcBaseAndBitshift+0xa8>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4a36      	ldr	r2, [pc, #216]	; (800ab24 <DMA_CalcBaseAndBitshift+0x138>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d022      	beq.n	800aa94 <DMA_CalcBaseAndBitshift+0xa8>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4a35      	ldr	r2, [pc, #212]	; (800ab28 <DMA_CalcBaseAndBitshift+0x13c>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d01d      	beq.n	800aa94 <DMA_CalcBaseAndBitshift+0xa8>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a33      	ldr	r2, [pc, #204]	; (800ab2c <DMA_CalcBaseAndBitshift+0x140>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d018      	beq.n	800aa94 <DMA_CalcBaseAndBitshift+0xa8>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a32      	ldr	r2, [pc, #200]	; (800ab30 <DMA_CalcBaseAndBitshift+0x144>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d013      	beq.n	800aa94 <DMA_CalcBaseAndBitshift+0xa8>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a30      	ldr	r2, [pc, #192]	; (800ab34 <DMA_CalcBaseAndBitshift+0x148>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d00e      	beq.n	800aa94 <DMA_CalcBaseAndBitshift+0xa8>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a2f      	ldr	r2, [pc, #188]	; (800ab38 <DMA_CalcBaseAndBitshift+0x14c>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d009      	beq.n	800aa94 <DMA_CalcBaseAndBitshift+0xa8>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a2d      	ldr	r2, [pc, #180]	; (800ab3c <DMA_CalcBaseAndBitshift+0x150>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d004      	beq.n	800aa94 <DMA_CalcBaseAndBitshift+0xa8>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4a2c      	ldr	r2, [pc, #176]	; (800ab40 <DMA_CalcBaseAndBitshift+0x154>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d101      	bne.n	800aa98 <DMA_CalcBaseAndBitshift+0xac>
 800aa94:	2301      	movs	r3, #1
 800aa96:	e000      	b.n	800aa9a <DMA_CalcBaseAndBitshift+0xae>
 800aa98:	2300      	movs	r3, #0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d024      	beq.n	800aae8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	3b10      	subs	r3, #16
 800aaa6:	4a27      	ldr	r2, [pc, #156]	; (800ab44 <DMA_CalcBaseAndBitshift+0x158>)
 800aaa8:	fba2 2303 	umull	r2, r3, r2, r3
 800aaac:	091b      	lsrs	r3, r3, #4
 800aaae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f003 0307 	and.w	r3, r3, #7
 800aab6:	4a24      	ldr	r2, [pc, #144]	; (800ab48 <DMA_CalcBaseAndBitshift+0x15c>)
 800aab8:	5cd3      	ldrb	r3, [r2, r3]
 800aaba:	461a      	mov	r2, r3
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2b03      	cmp	r3, #3
 800aac4:	d908      	bls.n	800aad8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	461a      	mov	r2, r3
 800aacc:	4b1f      	ldr	r3, [pc, #124]	; (800ab4c <DMA_CalcBaseAndBitshift+0x160>)
 800aace:	4013      	ands	r3, r2
 800aad0:	1d1a      	adds	r2, r3, #4
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	659a      	str	r2, [r3, #88]	; 0x58
 800aad6:	e00d      	b.n	800aaf4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	461a      	mov	r2, r3
 800aade:	4b1b      	ldr	r3, [pc, #108]	; (800ab4c <DMA_CalcBaseAndBitshift+0x160>)
 800aae0:	4013      	ands	r3, r2
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	6593      	str	r3, [r2, #88]	; 0x58
 800aae6:	e005      	b.n	800aaf4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3714      	adds	r7, #20
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr
 800ab04:	40020010 	.word	0x40020010
 800ab08:	40020028 	.word	0x40020028
 800ab0c:	40020040 	.word	0x40020040
 800ab10:	40020058 	.word	0x40020058
 800ab14:	40020070 	.word	0x40020070
 800ab18:	40020088 	.word	0x40020088
 800ab1c:	400200a0 	.word	0x400200a0
 800ab20:	400200b8 	.word	0x400200b8
 800ab24:	40020410 	.word	0x40020410
 800ab28:	40020428 	.word	0x40020428
 800ab2c:	40020440 	.word	0x40020440
 800ab30:	40020458 	.word	0x40020458
 800ab34:	40020470 	.word	0x40020470
 800ab38:	40020488 	.word	0x40020488
 800ab3c:	400204a0 	.word	0x400204a0
 800ab40:	400204b8 	.word	0x400204b8
 800ab44:	aaaaaaab 	.word	0xaaaaaaab
 800ab48:	0801b534 	.word	0x0801b534
 800ab4c:	fffffc00 	.word	0xfffffc00

0800ab50 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b085      	sub	sp, #20
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	699b      	ldr	r3, [r3, #24]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d120      	bne.n	800aba6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab68:	2b03      	cmp	r3, #3
 800ab6a:	d858      	bhi.n	800ac1e <DMA_CheckFifoParam+0xce>
 800ab6c:	a201      	add	r2, pc, #4	; (adr r2, 800ab74 <DMA_CheckFifoParam+0x24>)
 800ab6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab72:	bf00      	nop
 800ab74:	0800ab85 	.word	0x0800ab85
 800ab78:	0800ab97 	.word	0x0800ab97
 800ab7c:	0800ab85 	.word	0x0800ab85
 800ab80:	0800ac1f 	.word	0x0800ac1f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d048      	beq.n	800ac22 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800ab90:	2301      	movs	r3, #1
 800ab92:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ab94:	e045      	b.n	800ac22 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ab9e:	d142      	bne.n	800ac26 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800aba4:	e03f      	b.n	800ac26 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	699b      	ldr	r3, [r3, #24]
 800abaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abae:	d123      	bne.n	800abf8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abb4:	2b03      	cmp	r3, #3
 800abb6:	d838      	bhi.n	800ac2a <DMA_CheckFifoParam+0xda>
 800abb8:	a201      	add	r2, pc, #4	; (adr r2, 800abc0 <DMA_CheckFifoParam+0x70>)
 800abba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abbe:	bf00      	nop
 800abc0:	0800abd1 	.word	0x0800abd1
 800abc4:	0800abd7 	.word	0x0800abd7
 800abc8:	0800abd1 	.word	0x0800abd1
 800abcc:	0800abe9 	.word	0x0800abe9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800abd0:	2301      	movs	r3, #1
 800abd2:	73fb      	strb	r3, [r7, #15]
        break;
 800abd4:	e030      	b.n	800ac38 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d025      	beq.n	800ac2e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800abe2:	2301      	movs	r3, #1
 800abe4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800abe6:	e022      	b.n	800ac2e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800abf0:	d11f      	bne.n	800ac32 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800abf2:	2301      	movs	r3, #1
 800abf4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800abf6:	e01c      	b.n	800ac32 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abfc:	2b02      	cmp	r3, #2
 800abfe:	d902      	bls.n	800ac06 <DMA_CheckFifoParam+0xb6>
 800ac00:	2b03      	cmp	r3, #3
 800ac02:	d003      	beq.n	800ac0c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800ac04:	e018      	b.n	800ac38 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800ac06:	2301      	movs	r3, #1
 800ac08:	73fb      	strb	r3, [r7, #15]
        break;
 800ac0a:	e015      	b.n	800ac38 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d00e      	beq.n	800ac36 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ac1c:	e00b      	b.n	800ac36 <DMA_CheckFifoParam+0xe6>
        break;
 800ac1e:	bf00      	nop
 800ac20:	e00a      	b.n	800ac38 <DMA_CheckFifoParam+0xe8>
        break;
 800ac22:	bf00      	nop
 800ac24:	e008      	b.n	800ac38 <DMA_CheckFifoParam+0xe8>
        break;
 800ac26:	bf00      	nop
 800ac28:	e006      	b.n	800ac38 <DMA_CheckFifoParam+0xe8>
        break;
 800ac2a:	bf00      	nop
 800ac2c:	e004      	b.n	800ac38 <DMA_CheckFifoParam+0xe8>
        break;
 800ac2e:	bf00      	nop
 800ac30:	e002      	b.n	800ac38 <DMA_CheckFifoParam+0xe8>
        break;
 800ac32:	bf00      	nop
 800ac34:	e000      	b.n	800ac38 <DMA_CheckFifoParam+0xe8>
    break;
 800ac36:	bf00      	nop
    }
  }

  return status;
 800ac38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3714      	adds	r7, #20
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr
 800ac46:	bf00      	nop

0800ac48 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b085      	sub	sp, #20
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a38      	ldr	r2, [pc, #224]	; (800ad3c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d022      	beq.n	800aca6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	4a36      	ldr	r2, [pc, #216]	; (800ad40 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d01d      	beq.n	800aca6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4a35      	ldr	r2, [pc, #212]	; (800ad44 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d018      	beq.n	800aca6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4a33      	ldr	r2, [pc, #204]	; (800ad48 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d013      	beq.n	800aca6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a32      	ldr	r2, [pc, #200]	; (800ad4c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d00e      	beq.n	800aca6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a30      	ldr	r2, [pc, #192]	; (800ad50 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d009      	beq.n	800aca6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a2f      	ldr	r2, [pc, #188]	; (800ad54 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d004      	beq.n	800aca6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a2d      	ldr	r2, [pc, #180]	; (800ad58 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d101      	bne.n	800acaa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800aca6:	2301      	movs	r3, #1
 800aca8:	e000      	b.n	800acac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800acaa:	2300      	movs	r3, #0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d01a      	beq.n	800ace6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	3b08      	subs	r3, #8
 800acb8:	4a28      	ldr	r2, [pc, #160]	; (800ad5c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800acba:	fba2 2303 	umull	r2, r3, r2, r3
 800acbe:	091b      	lsrs	r3, r3, #4
 800acc0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	4b26      	ldr	r3, [pc, #152]	; (800ad60 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800acc6:	4413      	add	r3, r2
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	461a      	mov	r2, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	4a24      	ldr	r2, [pc, #144]	; (800ad64 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800acd4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f003 031f 	and.w	r3, r3, #31
 800acdc:	2201      	movs	r2, #1
 800acde:	409a      	lsls	r2, r3
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800ace4:	e024      	b.n	800ad30 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	b2db      	uxtb	r3, r3
 800acec:	3b10      	subs	r3, #16
 800acee:	4a1e      	ldr	r2, [pc, #120]	; (800ad68 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800acf0:	fba2 2303 	umull	r2, r3, r2, r3
 800acf4:	091b      	lsrs	r3, r3, #4
 800acf6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	4a1c      	ldr	r2, [pc, #112]	; (800ad6c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d806      	bhi.n	800ad0e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	4a1b      	ldr	r2, [pc, #108]	; (800ad70 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d902      	bls.n	800ad0e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	3308      	adds	r3, #8
 800ad0c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800ad0e:	68fa      	ldr	r2, [r7, #12]
 800ad10:	4b18      	ldr	r3, [pc, #96]	; (800ad74 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800ad12:	4413      	add	r3, r2
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	461a      	mov	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	4a16      	ldr	r2, [pc, #88]	; (800ad78 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800ad20:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f003 031f 	and.w	r3, r3, #31
 800ad28:	2201      	movs	r2, #1
 800ad2a:	409a      	lsls	r2, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	669a      	str	r2, [r3, #104]	; 0x68
}
 800ad30:	bf00      	nop
 800ad32:	3714      	adds	r7, #20
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr
 800ad3c:	58025408 	.word	0x58025408
 800ad40:	5802541c 	.word	0x5802541c
 800ad44:	58025430 	.word	0x58025430
 800ad48:	58025444 	.word	0x58025444
 800ad4c:	58025458 	.word	0x58025458
 800ad50:	5802546c 	.word	0x5802546c
 800ad54:	58025480 	.word	0x58025480
 800ad58:	58025494 	.word	0x58025494
 800ad5c:	cccccccd 	.word	0xcccccccd
 800ad60:	16009600 	.word	0x16009600
 800ad64:	58025880 	.word	0x58025880
 800ad68:	aaaaaaab 	.word	0xaaaaaaab
 800ad6c:	400204b8 	.word	0x400204b8
 800ad70:	4002040f 	.word	0x4002040f
 800ad74:	10008200 	.word	0x10008200
 800ad78:	40020880 	.word	0x40020880

0800ad7c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b085      	sub	sp, #20
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d04a      	beq.n	800ae28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2b08      	cmp	r3, #8
 800ad96:	d847      	bhi.n	800ae28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a25      	ldr	r2, [pc, #148]	; (800ae34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d022      	beq.n	800ade8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a24      	ldr	r2, [pc, #144]	; (800ae38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d01d      	beq.n	800ade8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a22      	ldr	r2, [pc, #136]	; (800ae3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d018      	beq.n	800ade8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a21      	ldr	r2, [pc, #132]	; (800ae40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d013      	beq.n	800ade8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a1f      	ldr	r2, [pc, #124]	; (800ae44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d00e      	beq.n	800ade8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a1e      	ldr	r2, [pc, #120]	; (800ae48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d009      	beq.n	800ade8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a1c      	ldr	r2, [pc, #112]	; (800ae4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d004      	beq.n	800ade8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4a1b      	ldr	r2, [pc, #108]	; (800ae50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d101      	bne.n	800adec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800ade8:	2301      	movs	r3, #1
 800adea:	e000      	b.n	800adee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800adec:	2300      	movs	r3, #0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d00a      	beq.n	800ae08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800adf2:	68fa      	ldr	r2, [r7, #12]
 800adf4:	4b17      	ldr	r3, [pc, #92]	; (800ae54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800adf6:	4413      	add	r3, r2
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	461a      	mov	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4a15      	ldr	r2, [pc, #84]	; (800ae58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800ae04:	671a      	str	r2, [r3, #112]	; 0x70
 800ae06:	e009      	b.n	800ae1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ae08:	68fa      	ldr	r2, [r7, #12]
 800ae0a:	4b14      	ldr	r3, [pc, #80]	; (800ae5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800ae0c:	4413      	add	r3, r2
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	461a      	mov	r2, r3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	4a11      	ldr	r2, [pc, #68]	; (800ae60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800ae1a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	3b01      	subs	r3, #1
 800ae20:	2201      	movs	r2, #1
 800ae22:	409a      	lsls	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800ae28:	bf00      	nop
 800ae2a:	3714      	adds	r7, #20
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr
 800ae34:	58025408 	.word	0x58025408
 800ae38:	5802541c 	.word	0x5802541c
 800ae3c:	58025430 	.word	0x58025430
 800ae40:	58025444 	.word	0x58025444
 800ae44:	58025458 	.word	0x58025458
 800ae48:	5802546c 	.word	0x5802546c
 800ae4c:	58025480 	.word	0x58025480
 800ae50:	58025494 	.word	0x58025494
 800ae54:	1600963f 	.word	0x1600963f
 800ae58:	58025940 	.word	0x58025940
 800ae5c:	1000823f 	.word	0x1000823f
 800ae60:	40020940 	.word	0x40020940

0800ae64 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b08a      	sub	sp, #40	; 0x28
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	60b9      	str	r1, [r7, #8]
 800ae6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800ae78:	2308      	movs	r3, #8
 800ae7a:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ae7c:	4b40      	ldr	r3, [pc, #256]	; (800af80 <HAL_FLASH_Program+0x11c>)
 800ae7e:	7d1b      	ldrb	r3, [r3, #20]
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d101      	bne.n	800ae88 <HAL_FLASH_Program+0x24>
 800ae84:	2302      	movs	r3, #2
 800ae86:	e076      	b.n	800af76 <HAL_FLASH_Program+0x112>
 800ae88:	4b3d      	ldr	r3, [pc, #244]	; (800af80 <HAL_FLASH_Program+0x11c>)
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae94:	d306      	bcc.n	800aea4 <HAL_FLASH_Program+0x40>
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800ae9c:	d202      	bcs.n	800aea4 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 800aea2:	e00c      	b.n	800aebe <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800aeaa:	d306      	bcc.n	800aeba <HAL_FLASH_Program+0x56>
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800aeb2:	d202      	bcs.n	800aeba <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 800aeb4:	2302      	movs	r3, #2
 800aeb6:	61bb      	str	r3, [r7, #24]
 800aeb8:	e001      	b.n	800aebe <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 800aeba:	2301      	movs	r3, #1
 800aebc:	e05b      	b.n	800af76 <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800aebe:	4b30      	ldr	r3, [pc, #192]	; (800af80 <HAL_FLASH_Program+0x11c>)
 800aec0:	2200      	movs	r2, #0
 800aec2:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800aec4:	69b9      	ldr	r1, [r7, #24]
 800aec6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aeca:	f000 f897 	bl	800affc <FLASH_WaitForLastOperation>
 800aece:	4603      	mov	r3, r0
 800aed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 800aed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d147      	bne.n	800af6c <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 800aedc:	69bb      	ldr	r3, [r7, #24]
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d106      	bne.n	800aef0 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800aee2:	4b28      	ldr	r3, [pc, #160]	; (800af84 <HAL_FLASH_Program+0x120>)
 800aee4:	68db      	ldr	r3, [r3, #12]
 800aee6:	4a27      	ldr	r2, [pc, #156]	; (800af84 <HAL_FLASH_Program+0x120>)
 800aee8:	f043 0302 	orr.w	r3, r3, #2
 800aeec:	60d3      	str	r3, [r2, #12]
 800aeee:	e007      	b.n	800af00 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 800aef0:	4b24      	ldr	r3, [pc, #144]	; (800af84 <HAL_FLASH_Program+0x120>)
 800aef2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800aef6:	4a23      	ldr	r2, [pc, #140]	; (800af84 <HAL_FLASH_Program+0x120>)
 800aef8:	f043 0302 	orr.w	r3, r3, #2
 800aefc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 800af00:	f3bf 8f6f 	isb	sy
}
 800af04:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800af06:	f3bf 8f4f 	dsb	sy
}
 800af0a:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	6a3b      	ldr	r3, [r7, #32]
 800af12:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800af14:	6a3b      	ldr	r3, [r7, #32]
 800af16:	3304      	adds	r3, #4
 800af18:	623b      	str	r3, [r7, #32]
        src_addr++;
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	3304      	adds	r3, #4
 800af1e:	61fb      	str	r3, [r7, #28]
        row_index--;
 800af20:	7dfb      	ldrb	r3, [r7, #23]
 800af22:	3b01      	subs	r3, #1
 800af24:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800af26:	7dfb      	ldrb	r3, [r7, #23]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d1ef      	bne.n	800af0c <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 800af2c:	f3bf 8f6f 	isb	sy
}
 800af30:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800af32:	f3bf 8f4f 	dsb	sy
}
 800af36:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800af38:	69b9      	ldr	r1, [r7, #24]
 800af3a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800af3e:	f000 f85d 	bl	800affc <FLASH_WaitForLastOperation>
 800af42:	4603      	mov	r3, r0
 800af44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800af48:	69bb      	ldr	r3, [r7, #24]
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d106      	bne.n	800af5c <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800af4e:	4b0d      	ldr	r3, [pc, #52]	; (800af84 <HAL_FLASH_Program+0x120>)
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	4a0c      	ldr	r2, [pc, #48]	; (800af84 <HAL_FLASH_Program+0x120>)
 800af54:	f023 0302 	bic.w	r3, r3, #2
 800af58:	60d3      	str	r3, [r2, #12]
 800af5a:	e007      	b.n	800af6c <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 800af5c:	4b09      	ldr	r3, [pc, #36]	; (800af84 <HAL_FLASH_Program+0x120>)
 800af5e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800af62:	4a08      	ldr	r2, [pc, #32]	; (800af84 <HAL_FLASH_Program+0x120>)
 800af64:	f023 0302 	bic.w	r3, r3, #2
 800af68:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800af6c:	4b04      	ldr	r3, [pc, #16]	; (800af80 <HAL_FLASH_Program+0x11c>)
 800af6e:	2200      	movs	r2, #0
 800af70:	751a      	strb	r2, [r3, #20]

  return status;
 800af72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800af76:	4618      	mov	r0, r3
 800af78:	3728      	adds	r7, #40	; 0x28
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	24002000 	.word	0x24002000
 800af84:	52002000 	.word	0x52002000

0800af88 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800af88:	b480      	push	{r7}
 800af8a:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800af8c:	4b18      	ldr	r3, [pc, #96]	; (800aff0 <HAL_FLASH_Unlock+0x68>)
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	f003 0301 	and.w	r3, r3, #1
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00d      	beq.n	800afb4 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800af98:	4b15      	ldr	r3, [pc, #84]	; (800aff0 <HAL_FLASH_Unlock+0x68>)
 800af9a:	4a16      	ldr	r2, [pc, #88]	; (800aff4 <HAL_FLASH_Unlock+0x6c>)
 800af9c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800af9e:	4b14      	ldr	r3, [pc, #80]	; (800aff0 <HAL_FLASH_Unlock+0x68>)
 800afa0:	4a15      	ldr	r2, [pc, #84]	; (800aff8 <HAL_FLASH_Unlock+0x70>)
 800afa2:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800afa4:	4b12      	ldr	r3, [pc, #72]	; (800aff0 <HAL_FLASH_Unlock+0x68>)
 800afa6:	68db      	ldr	r3, [r3, #12]
 800afa8:	f003 0301 	and.w	r3, r3, #1
 800afac:	2b00      	cmp	r3, #0
 800afae:	d001      	beq.n	800afb4 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800afb0:	2301      	movs	r3, #1
 800afb2:	e018      	b.n	800afe6 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800afb4:	4b0e      	ldr	r3, [pc, #56]	; (800aff0 <HAL_FLASH_Unlock+0x68>)
 800afb6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800afba:	f003 0301 	and.w	r3, r3, #1
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d010      	beq.n	800afe4 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800afc2:	4b0b      	ldr	r3, [pc, #44]	; (800aff0 <HAL_FLASH_Unlock+0x68>)
 800afc4:	4a0b      	ldr	r2, [pc, #44]	; (800aff4 <HAL_FLASH_Unlock+0x6c>)
 800afc6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800afca:	4b09      	ldr	r3, [pc, #36]	; (800aff0 <HAL_FLASH_Unlock+0x68>)
 800afcc:	4a0a      	ldr	r2, [pc, #40]	; (800aff8 <HAL_FLASH_Unlock+0x70>)
 800afce:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800afd2:	4b07      	ldr	r3, [pc, #28]	; (800aff0 <HAL_FLASH_Unlock+0x68>)
 800afd4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800afd8:	f003 0301 	and.w	r3, r3, #1
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d001      	beq.n	800afe4 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 800afe0:	2301      	movs	r3, #1
 800afe2:	e000      	b.n	800afe6 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800afe4:	2300      	movs	r3, #0
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr
 800aff0:	52002000 	.word	0x52002000
 800aff4:	45670123 	.word	0x45670123
 800aff8:	cdef89ab 	.word	0xcdef89ab

0800affc <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b086      	sub	sp, #24
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800b006:	2304      	movs	r3, #4
 800b008:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800b00a:	2300      	movs	r3, #0
 800b00c:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800b00e:	f7fa ffab 	bl	8005f68 <HAL_GetTick>
 800b012:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	2b02      	cmp	r3, #2
 800b018:	d113      	bne.n	800b042 <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800b01a:	4b41      	ldr	r3, [pc, #260]	; (800b120 <FLASH_WaitForLastOperation+0x124>)
 800b01c:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800b01e:	e010      	b.n	800b042 <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b026:	d00c      	beq.n	800b042 <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b028:	f7fa ff9e 	bl	8005f68 <HAL_GetTick>
 800b02c:	4602      	mov	r2, r0
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	1ad3      	subs	r3, r2, r3
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	429a      	cmp	r2, r3
 800b036:	d302      	bcc.n	800b03e <FLASH_WaitForLastOperation+0x42>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d101      	bne.n	800b042 <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800b03e:	2303      	movs	r3, #3
 800b040:	e06a      	b.n	800b118 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800b042:	697a      	ldr	r2, [r7, #20]
 800b044:	4b37      	ldr	r3, [pc, #220]	; (800b124 <FLASH_WaitForLastOperation+0x128>)
 800b046:	4013      	ands	r3, r2
 800b048:	697a      	ldr	r2, [r7, #20]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d10a      	bne.n	800b064 <FLASH_WaitForLastOperation+0x68>
 800b04e:	4b36      	ldr	r3, [pc, #216]	; (800b128 <FLASH_WaitForLastOperation+0x12c>)
 800b050:	691a      	ldr	r2, [r3, #16]
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	4013      	ands	r3, r2
 800b056:	697a      	ldr	r2, [r7, #20]
 800b058:	429a      	cmp	r2, r3
 800b05a:	bf0c      	ite	eq
 800b05c:	2301      	moveq	r3, #1
 800b05e:	2300      	movne	r3, #0
 800b060:	b2db      	uxtb	r3, r3
 800b062:	e00c      	b.n	800b07e <FLASH_WaitForLastOperation+0x82>
 800b064:	4b30      	ldr	r3, [pc, #192]	; (800b128 <FLASH_WaitForLastOperation+0x12c>)
 800b066:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800b06a:	43da      	mvns	r2, r3
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	4013      	ands	r3, r2
 800b070:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b074:	2b00      	cmp	r3, #0
 800b076:	bf0c      	ite	eq
 800b078:	2301      	moveq	r3, #1
 800b07a:	2300      	movne	r3, #0
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d1ce      	bne.n	800b020 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	2b01      	cmp	r3, #1
 800b086:	d105      	bne.n	800b094 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800b088:	4b27      	ldr	r3, [pc, #156]	; (800b128 <FLASH_WaitForLastOperation+0x12c>)
 800b08a:	691a      	ldr	r2, [r3, #16]
 800b08c:	4b27      	ldr	r3, [pc, #156]	; (800b12c <FLASH_WaitForLastOperation+0x130>)
 800b08e:	4013      	ands	r3, r2
 800b090:	613b      	str	r3, [r7, #16]
 800b092:	e007      	b.n	800b0a4 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800b094:	4b24      	ldr	r3, [pc, #144]	; (800b128 <FLASH_WaitForLastOperation+0x12c>)
 800b096:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800b09a:	4b24      	ldr	r3, [pc, #144]	; (800b12c <FLASH_WaitForLastOperation+0x130>)
 800b09c:	4013      	ands	r3, r2
 800b09e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b0a2:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d017      	beq.n	800b0de <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800b0ae:	4b20      	ldr	r3, [pc, #128]	; (800b130 <FLASH_WaitForLastOperation+0x134>)
 800b0b0:	699a      	ldr	r2, [r3, #24]
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	4a1e      	ldr	r2, [pc, #120]	; (800b130 <FLASH_WaitForLastOperation+0x134>)
 800b0b8:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800b0ba:	693a      	ldr	r2, [r7, #16]
 800b0bc:	4b19      	ldr	r3, [pc, #100]	; (800b124 <FLASH_WaitForLastOperation+0x128>)
 800b0be:	4013      	ands	r3, r2
 800b0c0:	693a      	ldr	r2, [r7, #16]
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d103      	bne.n	800b0ce <FLASH_WaitForLastOperation+0xd2>
 800b0c6:	4a18      	ldr	r2, [pc, #96]	; (800b128 <FLASH_WaitForLastOperation+0x12c>)
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	6153      	str	r3, [r2, #20]
 800b0cc:	e005      	b.n	800b0da <FLASH_WaitForLastOperation+0xde>
 800b0ce:	4a16      	ldr	r2, [pc, #88]	; (800b128 <FLASH_WaitForLastOperation+0x12c>)
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b0d6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e01c      	b.n	800b118 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d10b      	bne.n	800b0fc <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800b0e4:	4b10      	ldr	r3, [pc, #64]	; (800b128 <FLASH_WaitForLastOperation+0x12c>)
 800b0e6:	691b      	ldr	r3, [r3, #16]
 800b0e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0f0:	d111      	bne.n	800b116 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800b0f2:	4b0d      	ldr	r3, [pc, #52]	; (800b128 <FLASH_WaitForLastOperation+0x12c>)
 800b0f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b0f8:	615a      	str	r2, [r3, #20]
 800b0fa:	e00c      	b.n	800b116 <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800b0fc:	4b0a      	ldr	r3, [pc, #40]	; (800b128 <FLASH_WaitForLastOperation+0x12c>)
 800b0fe:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800b102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b10a:	d104      	bne.n	800b116 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800b10c:	4b06      	ldr	r3, [pc, #24]	; (800b128 <FLASH_WaitForLastOperation+0x12c>)
 800b10e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b112:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800b116:	2300      	movs	r3, #0
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3718      	adds	r7, #24
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	80000004 	.word	0x80000004
 800b124:	1fef000f 	.word	0x1fef000f
 800b128:	52002000 	.word	0x52002000
 800b12c:	17ee0000 	.word	0x17ee0000
 800b130:	24002000 	.word	0x24002000

0800b134 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b13e:	2300      	movs	r3, #0
 800b140:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b142:	4b5e      	ldr	r3, [pc, #376]	; (800b2bc <HAL_FLASHEx_Erase+0x188>)
 800b144:	7d1b      	ldrb	r3, [r3, #20]
 800b146:	2b01      	cmp	r3, #1
 800b148:	d101      	bne.n	800b14e <HAL_FLASHEx_Erase+0x1a>
 800b14a:	2302      	movs	r3, #2
 800b14c:	e0b2      	b.n	800b2b4 <HAL_FLASHEx_Erase+0x180>
 800b14e:	4b5b      	ldr	r3, [pc, #364]	; (800b2bc <HAL_FLASHEx_Erase+0x188>)
 800b150:	2201      	movs	r2, #1
 800b152:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b154:	4b59      	ldr	r3, [pc, #356]	; (800b2bc <HAL_FLASHEx_Erase+0x188>)
 800b156:	2200      	movs	r2, #0
 800b158:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	f003 0301 	and.w	r3, r3, #1
 800b162:	2b00      	cmp	r3, #0
 800b164:	d009      	beq.n	800b17a <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800b166:	2101      	movs	r1, #1
 800b168:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b16c:	f7ff ff46 	bl	800affc <FLASH_WaitForLastOperation>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d001      	beq.n	800b17a <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800b176:	2301      	movs	r3, #1
 800b178:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	f003 0302 	and.w	r3, r3, #2
 800b182:	2b00      	cmp	r3, #0
 800b184:	d009      	beq.n	800b19a <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800b186:	2102      	movs	r1, #2
 800b188:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b18c:	f7ff ff36 	bl	800affc <FLASH_WaitForLastOperation>
 800b190:	4603      	mov	r3, r0
 800b192:	2b00      	cmp	r3, #0
 800b194:	d001      	beq.n	800b19a <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800b196:	2301      	movs	r3, #1
 800b198:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800b19a:	7bfb      	ldrb	r3, [r7, #15]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	f040 8085 	bne.w	800b2ac <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d136      	bne.n	800b218 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	691a      	ldr	r2, [r3, #16]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	4610      	mov	r0, r2
 800b1b6:	f000 f887 	bl	800b2c8 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	f003 0301 	and.w	r3, r3, #1
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d00f      	beq.n	800b1e6 <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800b1c6:	2101      	movs	r1, #1
 800b1c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b1cc:	f7ff ff16 	bl	800affc <FLASH_WaitForLastOperation>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d001      	beq.n	800b1da <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800b1da:	4b39      	ldr	r3, [pc, #228]	; (800b2c0 <HAL_FLASHEx_Erase+0x18c>)
 800b1dc:	68db      	ldr	r3, [r3, #12]
 800b1de:	4a38      	ldr	r2, [pc, #224]	; (800b2c0 <HAL_FLASHEx_Erase+0x18c>)
 800b1e0:	f023 0308 	bic.w	r3, r3, #8
 800b1e4:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	f003 0302 	and.w	r3, r3, #2
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d05c      	beq.n	800b2ac <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800b1f2:	2102      	movs	r1, #2
 800b1f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b1f8:	f7ff ff00 	bl	800affc <FLASH_WaitForLastOperation>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d001      	beq.n	800b206 <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800b202:	2301      	movs	r3, #1
 800b204:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800b206:	4b2e      	ldr	r3, [pc, #184]	; (800b2c0 <HAL_FLASHEx_Erase+0x18c>)
 800b208:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b20c:	4a2c      	ldr	r2, [pc, #176]	; (800b2c0 <HAL_FLASHEx_Erase+0x18c>)
 800b20e:	f023 0308 	bic.w	r3, r3, #8
 800b212:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800b216:	e049      	b.n	800b2ac <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b21e:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	689b      	ldr	r3, [r3, #8]
 800b224:	60bb      	str	r3, [r7, #8]
 800b226:	e039      	b.n	800b29c <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6859      	ldr	r1, [r3, #4]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	691b      	ldr	r3, [r3, #16]
 800b230:	461a      	mov	r2, r3
 800b232:	68b8      	ldr	r0, [r7, #8]
 800b234:	f000 f8b2 	bl	800b39c <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	f003 0301 	and.w	r3, r3, #1
 800b240:	2b00      	cmp	r3, #0
 800b242:	d00c      	beq.n	800b25e <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800b244:	2101      	movs	r1, #1
 800b246:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b24a:	f7ff fed7 	bl	800affc <FLASH_WaitForLastOperation>
 800b24e:	4603      	mov	r3, r0
 800b250:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800b252:	4b1b      	ldr	r3, [pc, #108]	; (800b2c0 <HAL_FLASHEx_Erase+0x18c>)
 800b254:	68da      	ldr	r2, [r3, #12]
 800b256:	491a      	ldr	r1, [pc, #104]	; (800b2c0 <HAL_FLASHEx_Erase+0x18c>)
 800b258:	4b1a      	ldr	r3, [pc, #104]	; (800b2c4 <HAL_FLASHEx_Erase+0x190>)
 800b25a:	4013      	ands	r3, r2
 800b25c:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	f003 0302 	and.w	r3, r3, #2
 800b266:	2b00      	cmp	r3, #0
 800b268:	d00e      	beq.n	800b288 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800b26a:	2102      	movs	r1, #2
 800b26c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b270:	f7ff fec4 	bl	800affc <FLASH_WaitForLastOperation>
 800b274:	4603      	mov	r3, r0
 800b276:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800b278:	4b11      	ldr	r3, [pc, #68]	; (800b2c0 <HAL_FLASHEx_Erase+0x18c>)
 800b27a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b27e:	4910      	ldr	r1, [pc, #64]	; (800b2c0 <HAL_FLASHEx_Erase+0x18c>)
 800b280:	4b10      	ldr	r3, [pc, #64]	; (800b2c4 <HAL_FLASHEx_Erase+0x190>)
 800b282:	4013      	ands	r3, r2
 800b284:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800b288:	7bfb      	ldrb	r3, [r7, #15]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d003      	beq.n	800b296 <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	68ba      	ldr	r2, [r7, #8]
 800b292:	601a      	str	r2, [r3, #0]
          break;
 800b294:	e00a      	b.n	800b2ac <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	3301      	adds	r3, #1
 800b29a:	60bb      	str	r3, [r7, #8]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	68da      	ldr	r2, [r3, #12]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	689b      	ldr	r3, [r3, #8]
 800b2a4:	4413      	add	r3, r2
 800b2a6:	68ba      	ldr	r2, [r7, #8]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d3bd      	bcc.n	800b228 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b2ac:	4b03      	ldr	r3, [pc, #12]	; (800b2bc <HAL_FLASHEx_Erase+0x188>)
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	751a      	strb	r2, [r3, #20]

  return status;
 800b2b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3710      	adds	r7, #16
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	24002000 	.word	0x24002000
 800b2c0:	52002000 	.word	0x52002000
 800b2c4:	fffff8fb 	.word	0xfffff8fb

0800b2c8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	f003 0303 	and.w	r3, r3, #3
 800b2d8:	2b03      	cmp	r3, #3
 800b2da:	d122      	bne.n	800b322 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800b2dc:	4b2e      	ldr	r3, [pc, #184]	; (800b398 <FLASH_MassErase+0xd0>)
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	4a2d      	ldr	r2, [pc, #180]	; (800b398 <FLASH_MassErase+0xd0>)
 800b2e2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b2e6:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800b2e8:	4b2b      	ldr	r3, [pc, #172]	; (800b398 <FLASH_MassErase+0xd0>)
 800b2ea:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b2ee:	4a2a      	ldr	r2, [pc, #168]	; (800b398 <FLASH_MassErase+0xd0>)
 800b2f0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b2f4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800b2f8:	4b27      	ldr	r3, [pc, #156]	; (800b398 <FLASH_MassErase+0xd0>)
 800b2fa:	68da      	ldr	r2, [r3, #12]
 800b2fc:	4926      	ldr	r1, [pc, #152]	; (800b398 <FLASH_MassErase+0xd0>)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	4313      	orrs	r3, r2
 800b302:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800b304:	4b24      	ldr	r3, [pc, #144]	; (800b398 <FLASH_MassErase+0xd0>)
 800b306:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b30a:	4923      	ldr	r1, [pc, #140]	; (800b398 <FLASH_MassErase+0xd0>)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	4313      	orrs	r3, r2
 800b310:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800b314:	4b20      	ldr	r3, [pc, #128]	; (800b398 <FLASH_MassErase+0xd0>)
 800b316:	699b      	ldr	r3, [r3, #24]
 800b318:	4a1f      	ldr	r2, [pc, #124]	; (800b398 <FLASH_MassErase+0xd0>)
 800b31a:	f043 0310 	orr.w	r3, r3, #16
 800b31e:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800b320:	e033      	b.n	800b38a <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	f003 0301 	and.w	r3, r3, #1
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d011      	beq.n	800b350 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800b32c:	4b1a      	ldr	r3, [pc, #104]	; (800b398 <FLASH_MassErase+0xd0>)
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	4a19      	ldr	r2, [pc, #100]	; (800b398 <FLASH_MassErase+0xd0>)
 800b332:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b336:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800b338:	4b17      	ldr	r3, [pc, #92]	; (800b398 <FLASH_MassErase+0xd0>)
 800b33a:	68da      	ldr	r2, [r3, #12]
 800b33c:	4916      	ldr	r1, [pc, #88]	; (800b398 <FLASH_MassErase+0xd0>)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4313      	orrs	r3, r2
 800b342:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800b344:	4b14      	ldr	r3, [pc, #80]	; (800b398 <FLASH_MassErase+0xd0>)
 800b346:	68db      	ldr	r3, [r3, #12]
 800b348:	4a13      	ldr	r2, [pc, #76]	; (800b398 <FLASH_MassErase+0xd0>)
 800b34a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800b34e:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	f003 0302 	and.w	r3, r3, #2
 800b356:	2b00      	cmp	r3, #0
 800b358:	d017      	beq.n	800b38a <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800b35a:	4b0f      	ldr	r3, [pc, #60]	; (800b398 <FLASH_MassErase+0xd0>)
 800b35c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b360:	4a0d      	ldr	r2, [pc, #52]	; (800b398 <FLASH_MassErase+0xd0>)
 800b362:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b366:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800b36a:	4b0b      	ldr	r3, [pc, #44]	; (800b398 <FLASH_MassErase+0xd0>)
 800b36c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b370:	4909      	ldr	r1, [pc, #36]	; (800b398 <FLASH_MassErase+0xd0>)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	4313      	orrs	r3, r2
 800b376:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800b37a:	4b07      	ldr	r3, [pc, #28]	; (800b398 <FLASH_MassErase+0xd0>)
 800b37c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b380:	4a05      	ldr	r2, [pc, #20]	; (800b398 <FLASH_MassErase+0xd0>)
 800b382:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800b386:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800b38a:	bf00      	nop
 800b38c:	370c      	adds	r7, #12
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr
 800b396:	bf00      	nop
 800b398:	52002000 	.word	0x52002000

0800b39c <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b085      	sub	sp, #20
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	60b9      	str	r1, [r7, #8]
 800b3a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	f003 0301 	and.w	r3, r3, #1
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d010      	beq.n	800b3d4 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800b3b2:	4b18      	ldr	r3, [pc, #96]	; (800b414 <FLASH_Erase_Sector+0x78>)
 800b3b4:	68db      	ldr	r3, [r3, #12]
 800b3b6:	4a17      	ldr	r2, [pc, #92]	; (800b414 <FLASH_Erase_Sector+0x78>)
 800b3b8:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800b3bc:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800b3be:	4b15      	ldr	r3, [pc, #84]	; (800b414 <FLASH_Erase_Sector+0x78>)
 800b3c0:	68da      	ldr	r2, [r3, #12]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	0219      	lsls	r1, r3, #8
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	430b      	orrs	r3, r1
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	4a11      	ldr	r2, [pc, #68]	; (800b414 <FLASH_Erase_Sector+0x78>)
 800b3ce:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800b3d2:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	f003 0302 	and.w	r3, r3, #2
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d014      	beq.n	800b408 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800b3de:	4b0d      	ldr	r3, [pc, #52]	; (800b414 <FLASH_Erase_Sector+0x78>)
 800b3e0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b3e4:	4a0b      	ldr	r2, [pc, #44]	; (800b414 <FLASH_Erase_Sector+0x78>)
 800b3e6:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800b3ea:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800b3ee:	4b09      	ldr	r3, [pc, #36]	; (800b414 <FLASH_Erase_Sector+0x78>)
 800b3f0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	0219      	lsls	r1, r3, #8
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	430b      	orrs	r3, r1
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	4a05      	ldr	r2, [pc, #20]	; (800b414 <FLASH_Erase_Sector+0x78>)
 800b400:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800b404:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800b408:	bf00      	nop
 800b40a:	3714      	adds	r7, #20
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr
 800b414:	52002000 	.word	0x52002000

0800b418 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b418:	b480      	push	{r7}
 800b41a:	b089      	sub	sp, #36	; 0x24
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b422:	2300      	movs	r3, #0
 800b424:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b426:	4b89      	ldr	r3, [pc, #548]	; (800b64c <HAL_GPIO_Init+0x234>)
 800b428:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b42a:	e194      	b.n	800b756 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	2101      	movs	r1, #1
 800b432:	69fb      	ldr	r3, [r7, #28]
 800b434:	fa01 f303 	lsl.w	r3, r1, r3
 800b438:	4013      	ands	r3, r2
 800b43a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	f000 8186 	beq.w	800b750 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	f003 0303 	and.w	r3, r3, #3
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d005      	beq.n	800b45c <HAL_GPIO_Init+0x44>
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	f003 0303 	and.w	r3, r3, #3
 800b458:	2b02      	cmp	r3, #2
 800b45a:	d130      	bne.n	800b4be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	689b      	ldr	r3, [r3, #8]
 800b460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b462:	69fb      	ldr	r3, [r7, #28]
 800b464:	005b      	lsls	r3, r3, #1
 800b466:	2203      	movs	r2, #3
 800b468:	fa02 f303 	lsl.w	r3, r2, r3
 800b46c:	43db      	mvns	r3, r3
 800b46e:	69ba      	ldr	r2, [r7, #24]
 800b470:	4013      	ands	r3, r2
 800b472:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	68da      	ldr	r2, [r3, #12]
 800b478:	69fb      	ldr	r3, [r7, #28]
 800b47a:	005b      	lsls	r3, r3, #1
 800b47c:	fa02 f303 	lsl.w	r3, r2, r3
 800b480:	69ba      	ldr	r2, [r7, #24]
 800b482:	4313      	orrs	r3, r2
 800b484:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	69ba      	ldr	r2, [r7, #24]
 800b48a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b492:	2201      	movs	r2, #1
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	fa02 f303 	lsl.w	r3, r2, r3
 800b49a:	43db      	mvns	r3, r3
 800b49c:	69ba      	ldr	r2, [r7, #24]
 800b49e:	4013      	ands	r3, r2
 800b4a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	091b      	lsrs	r3, r3, #4
 800b4a8:	f003 0201 	and.w	r2, r3, #1
 800b4ac:	69fb      	ldr	r3, [r7, #28]
 800b4ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b4b2:	69ba      	ldr	r2, [r7, #24]
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	69ba      	ldr	r2, [r7, #24]
 800b4bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	f003 0303 	and.w	r3, r3, #3
 800b4c6:	2b03      	cmp	r3, #3
 800b4c8:	d017      	beq.n	800b4fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b4d0:	69fb      	ldr	r3, [r7, #28]
 800b4d2:	005b      	lsls	r3, r3, #1
 800b4d4:	2203      	movs	r2, #3
 800b4d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b4da:	43db      	mvns	r3, r3
 800b4dc:	69ba      	ldr	r2, [r7, #24]
 800b4de:	4013      	ands	r3, r2
 800b4e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	689a      	ldr	r2, [r3, #8]
 800b4e6:	69fb      	ldr	r3, [r7, #28]
 800b4e8:	005b      	lsls	r3, r3, #1
 800b4ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b4ee:	69ba      	ldr	r2, [r7, #24]
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	69ba      	ldr	r2, [r7, #24]
 800b4f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	f003 0303 	and.w	r3, r3, #3
 800b502:	2b02      	cmp	r3, #2
 800b504:	d123      	bne.n	800b54e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b506:	69fb      	ldr	r3, [r7, #28]
 800b508:	08da      	lsrs	r2, r3, #3
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	3208      	adds	r2, #8
 800b50e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b514:	69fb      	ldr	r3, [r7, #28]
 800b516:	f003 0307 	and.w	r3, r3, #7
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	220f      	movs	r2, #15
 800b51e:	fa02 f303 	lsl.w	r3, r2, r3
 800b522:	43db      	mvns	r3, r3
 800b524:	69ba      	ldr	r2, [r7, #24]
 800b526:	4013      	ands	r3, r2
 800b528:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	691a      	ldr	r2, [r3, #16]
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	f003 0307 	and.w	r3, r3, #7
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	fa02 f303 	lsl.w	r3, r2, r3
 800b53a:	69ba      	ldr	r2, [r7, #24]
 800b53c:	4313      	orrs	r3, r2
 800b53e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	08da      	lsrs	r2, r3, #3
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	3208      	adds	r2, #8
 800b548:	69b9      	ldr	r1, [r7, #24]
 800b54a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b554:	69fb      	ldr	r3, [r7, #28]
 800b556:	005b      	lsls	r3, r3, #1
 800b558:	2203      	movs	r2, #3
 800b55a:	fa02 f303 	lsl.w	r3, r2, r3
 800b55e:	43db      	mvns	r3, r3
 800b560:	69ba      	ldr	r2, [r7, #24]
 800b562:	4013      	ands	r3, r2
 800b564:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	f003 0203 	and.w	r2, r3, #3
 800b56e:	69fb      	ldr	r3, [r7, #28]
 800b570:	005b      	lsls	r3, r3, #1
 800b572:	fa02 f303 	lsl.w	r3, r2, r3
 800b576:	69ba      	ldr	r2, [r7, #24]
 800b578:	4313      	orrs	r3, r2
 800b57a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	69ba      	ldr	r2, [r7, #24]
 800b580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	f000 80e0 	beq.w	800b750 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b590:	4b2f      	ldr	r3, [pc, #188]	; (800b650 <HAL_GPIO_Init+0x238>)
 800b592:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b596:	4a2e      	ldr	r2, [pc, #184]	; (800b650 <HAL_GPIO_Init+0x238>)
 800b598:	f043 0302 	orr.w	r3, r3, #2
 800b59c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b5a0:	4b2b      	ldr	r3, [pc, #172]	; (800b650 <HAL_GPIO_Init+0x238>)
 800b5a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b5a6:	f003 0302 	and.w	r3, r3, #2
 800b5aa:	60fb      	str	r3, [r7, #12]
 800b5ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b5ae:	4a29      	ldr	r2, [pc, #164]	; (800b654 <HAL_GPIO_Init+0x23c>)
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	089b      	lsrs	r3, r3, #2
 800b5b4:	3302      	adds	r3, #2
 800b5b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	f003 0303 	and.w	r3, r3, #3
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	220f      	movs	r2, #15
 800b5c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b5ca:	43db      	mvns	r3, r3
 800b5cc:	69ba      	ldr	r2, [r7, #24]
 800b5ce:	4013      	ands	r3, r2
 800b5d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	4a20      	ldr	r2, [pc, #128]	; (800b658 <HAL_GPIO_Init+0x240>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d052      	beq.n	800b680 <HAL_GPIO_Init+0x268>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	4a1f      	ldr	r2, [pc, #124]	; (800b65c <HAL_GPIO_Init+0x244>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d031      	beq.n	800b646 <HAL_GPIO_Init+0x22e>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4a1e      	ldr	r2, [pc, #120]	; (800b660 <HAL_GPIO_Init+0x248>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d02b      	beq.n	800b642 <HAL_GPIO_Init+0x22a>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4a1d      	ldr	r2, [pc, #116]	; (800b664 <HAL_GPIO_Init+0x24c>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d025      	beq.n	800b63e <HAL_GPIO_Init+0x226>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	4a1c      	ldr	r2, [pc, #112]	; (800b668 <HAL_GPIO_Init+0x250>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d01f      	beq.n	800b63a <HAL_GPIO_Init+0x222>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4a1b      	ldr	r2, [pc, #108]	; (800b66c <HAL_GPIO_Init+0x254>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d019      	beq.n	800b636 <HAL_GPIO_Init+0x21e>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	4a1a      	ldr	r2, [pc, #104]	; (800b670 <HAL_GPIO_Init+0x258>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d013      	beq.n	800b632 <HAL_GPIO_Init+0x21a>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	4a19      	ldr	r2, [pc, #100]	; (800b674 <HAL_GPIO_Init+0x25c>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d00d      	beq.n	800b62e <HAL_GPIO_Init+0x216>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	4a18      	ldr	r2, [pc, #96]	; (800b678 <HAL_GPIO_Init+0x260>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d007      	beq.n	800b62a <HAL_GPIO_Init+0x212>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4a17      	ldr	r2, [pc, #92]	; (800b67c <HAL_GPIO_Init+0x264>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d101      	bne.n	800b626 <HAL_GPIO_Init+0x20e>
 800b622:	2309      	movs	r3, #9
 800b624:	e02d      	b.n	800b682 <HAL_GPIO_Init+0x26a>
 800b626:	230a      	movs	r3, #10
 800b628:	e02b      	b.n	800b682 <HAL_GPIO_Init+0x26a>
 800b62a:	2308      	movs	r3, #8
 800b62c:	e029      	b.n	800b682 <HAL_GPIO_Init+0x26a>
 800b62e:	2307      	movs	r3, #7
 800b630:	e027      	b.n	800b682 <HAL_GPIO_Init+0x26a>
 800b632:	2306      	movs	r3, #6
 800b634:	e025      	b.n	800b682 <HAL_GPIO_Init+0x26a>
 800b636:	2305      	movs	r3, #5
 800b638:	e023      	b.n	800b682 <HAL_GPIO_Init+0x26a>
 800b63a:	2304      	movs	r3, #4
 800b63c:	e021      	b.n	800b682 <HAL_GPIO_Init+0x26a>
 800b63e:	2303      	movs	r3, #3
 800b640:	e01f      	b.n	800b682 <HAL_GPIO_Init+0x26a>
 800b642:	2302      	movs	r3, #2
 800b644:	e01d      	b.n	800b682 <HAL_GPIO_Init+0x26a>
 800b646:	2301      	movs	r3, #1
 800b648:	e01b      	b.n	800b682 <HAL_GPIO_Init+0x26a>
 800b64a:	bf00      	nop
 800b64c:	58000080 	.word	0x58000080
 800b650:	58024400 	.word	0x58024400
 800b654:	58000400 	.word	0x58000400
 800b658:	58020000 	.word	0x58020000
 800b65c:	58020400 	.word	0x58020400
 800b660:	58020800 	.word	0x58020800
 800b664:	58020c00 	.word	0x58020c00
 800b668:	58021000 	.word	0x58021000
 800b66c:	58021400 	.word	0x58021400
 800b670:	58021800 	.word	0x58021800
 800b674:	58021c00 	.word	0x58021c00
 800b678:	58022000 	.word	0x58022000
 800b67c:	58022400 	.word	0x58022400
 800b680:	2300      	movs	r3, #0
 800b682:	69fa      	ldr	r2, [r7, #28]
 800b684:	f002 0203 	and.w	r2, r2, #3
 800b688:	0092      	lsls	r2, r2, #2
 800b68a:	4093      	lsls	r3, r2
 800b68c:	69ba      	ldr	r2, [r7, #24]
 800b68e:	4313      	orrs	r3, r2
 800b690:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b692:	4938      	ldr	r1, [pc, #224]	; (800b774 <HAL_GPIO_Init+0x35c>)
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	089b      	lsrs	r3, r3, #2
 800b698:	3302      	adds	r3, #2
 800b69a:	69ba      	ldr	r2, [r7, #24]
 800b69c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b6a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	43db      	mvns	r3, r3
 800b6ac:	69ba      	ldr	r2, [r7, #24]
 800b6ae:	4013      	ands	r3, r2
 800b6b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d003      	beq.n	800b6c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b6be:	69ba      	ldr	r2, [r7, #24]
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b6c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b6ca:	69bb      	ldr	r3, [r7, #24]
 800b6cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b6ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	43db      	mvns	r3, r3
 800b6da:	69ba      	ldr	r2, [r7, #24]
 800b6dc:	4013      	ands	r3, r2
 800b6de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d003      	beq.n	800b6f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b6ec:	69ba      	ldr	r2, [r7, #24]
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b6f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b6f8:	69bb      	ldr	r3, [r7, #24]
 800b6fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	43db      	mvns	r3, r3
 800b706:	69ba      	ldr	r2, [r7, #24]
 800b708:	4013      	ands	r3, r2
 800b70a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b714:	2b00      	cmp	r3, #0
 800b716:	d003      	beq.n	800b720 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800b718:	69ba      	ldr	r2, [r7, #24]
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	4313      	orrs	r3, r2
 800b71e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	69ba      	ldr	r2, [r7, #24]
 800b724:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	43db      	mvns	r3, r3
 800b730:	69ba      	ldr	r2, [r7, #24]
 800b732:	4013      	ands	r3, r2
 800b734:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d003      	beq.n	800b74a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800b742:	69ba      	ldr	r2, [r7, #24]
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	4313      	orrs	r3, r2
 800b748:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	69ba      	ldr	r2, [r7, #24]
 800b74e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b750:	69fb      	ldr	r3, [r7, #28]
 800b752:	3301      	adds	r3, #1
 800b754:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	69fb      	ldr	r3, [r7, #28]
 800b75c:	fa22 f303 	lsr.w	r3, r2, r3
 800b760:	2b00      	cmp	r3, #0
 800b762:	f47f ae63 	bne.w	800b42c <HAL_GPIO_Init+0x14>
  }
}
 800b766:	bf00      	nop
 800b768:	bf00      	nop
 800b76a:	3724      	adds	r7, #36	; 0x24
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr
 800b774:	58000400 	.word	0x58000400

0800b778 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b778:	b480      	push	{r7}
 800b77a:	b085      	sub	sp, #20
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	460b      	mov	r3, r1
 800b782:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	691a      	ldr	r2, [r3, #16]
 800b788:	887b      	ldrh	r3, [r7, #2]
 800b78a:	4013      	ands	r3, r2
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d002      	beq.n	800b796 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b790:	2301      	movs	r3, #1
 800b792:	73fb      	strb	r3, [r7, #15]
 800b794:	e001      	b.n	800b79a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b796:	2300      	movs	r3, #0
 800b798:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b79a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3714      	adds	r7, #20
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	807b      	strh	r3, [r7, #2]
 800b7b4:	4613      	mov	r3, r2
 800b7b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b7b8:	787b      	ldrb	r3, [r7, #1]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d003      	beq.n	800b7c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b7be:	887a      	ldrh	r2, [r7, #2]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b7c4:	e003      	b.n	800b7ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b7c6:	887b      	ldrh	r3, [r7, #2]
 800b7c8:	041a      	lsls	r2, r3, #16
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	619a      	str	r2, [r3, #24]
}
 800b7ce:	bf00      	nop
 800b7d0:	370c      	adds	r7, #12
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr
	...

0800b7dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b082      	sub	sp, #8
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d101      	bne.n	800b7ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	e08b      	b.n	800b906 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d106      	bne.n	800b808 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f7f7 f968 	bl	8002ad8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2224      	movs	r2, #36	; 0x24
 800b80c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f022 0201 	bic.w	r2, r2, #1
 800b81e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	685a      	ldr	r2, [r3, #4]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b82c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	689a      	ldr	r2, [r3, #8]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b83c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	68db      	ldr	r3, [r3, #12]
 800b842:	2b01      	cmp	r3, #1
 800b844:	d107      	bne.n	800b856 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	689a      	ldr	r2, [r3, #8]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b852:	609a      	str	r2, [r3, #8]
 800b854:	e006      	b.n	800b864 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	689a      	ldr	r2, [r3, #8]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b862:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	68db      	ldr	r3, [r3, #12]
 800b868:	2b02      	cmp	r3, #2
 800b86a:	d108      	bne.n	800b87e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	685a      	ldr	r2, [r3, #4]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b87a:	605a      	str	r2, [r3, #4]
 800b87c:	e007      	b.n	800b88e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	685a      	ldr	r2, [r3, #4]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b88c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	6859      	ldr	r1, [r3, #4]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	4b1d      	ldr	r3, [pc, #116]	; (800b910 <HAL_I2C_Init+0x134>)
 800b89a:	430b      	orrs	r3, r1
 800b89c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	68da      	ldr	r2, [r3, #12]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b8ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	691a      	ldr	r2, [r3, #16]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	695b      	ldr	r3, [r3, #20]
 800b8b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	699b      	ldr	r3, [r3, #24]
 800b8be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	430a      	orrs	r2, r1
 800b8c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	69d9      	ldr	r1, [r3, #28]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6a1a      	ldr	r2, [r3, #32]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	430a      	orrs	r2, r1
 800b8d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	681a      	ldr	r2, [r3, #0]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f042 0201 	orr.w	r2, r2, #1
 800b8e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2220      	movs	r2, #32
 800b8f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2200      	movs	r2, #0
 800b900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b904:	2300      	movs	r3, #0
}
 800b906:	4618      	mov	r0, r3
 800b908:	3708      	adds	r7, #8
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
 800b90e:	bf00      	nop
 800b910:	02008000 	.word	0x02008000

0800b914 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b08a      	sub	sp, #40	; 0x28
 800b918:	af02      	add	r7, sp, #8
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	607a      	str	r2, [r7, #4]
 800b91e:	461a      	mov	r2, r3
 800b920:	460b      	mov	r3, r1
 800b922:	817b      	strh	r3, [r7, #10]
 800b924:	4613      	mov	r3, r2
 800b926:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800b928:	2300      	movs	r3, #0
 800b92a:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b932:	b2db      	uxtb	r3, r3
 800b934:	2b20      	cmp	r3, #32
 800b936:	f040 80ef 	bne.w	800bb18 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	699b      	ldr	r3, [r3, #24]
 800b940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b948:	d101      	bne.n	800b94e <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800b94a:	2302      	movs	r3, #2
 800b94c:	e0e5      	b.n	800bb1a <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b954:	2b01      	cmp	r3, #1
 800b956:	d101      	bne.n	800b95c <HAL_I2C_Master_Transmit_DMA+0x48>
 800b958:	2302      	movs	r3, #2
 800b95a:	e0de      	b.n	800bb1a <HAL_I2C_Master_Transmit_DMA+0x206>
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2201      	movs	r2, #1
 800b960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2221      	movs	r2, #33	; 0x21
 800b968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2210      	movs	r2, #16
 800b970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2200      	movs	r2, #0
 800b978:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	893a      	ldrh	r2, [r7, #8]
 800b984:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	4a66      	ldr	r2, [pc, #408]	; (800bb24 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800b98a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	4a66      	ldr	r2, [pc, #408]	; (800bb28 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800b990:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b996:	b29b      	uxth	r3, r3
 800b998:	2bff      	cmp	r3, #255	; 0xff
 800b99a:	d906      	bls.n	800b9aa <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	22ff      	movs	r2, #255	; 0xff
 800b9a0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b9a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b9a6:	61fb      	str	r3, [r7, #28]
 800b9a8:	e007      	b.n	800b9ba <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9ae:	b29a      	uxth	r2, r3
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b9b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b9b8:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d01a      	beq.n	800b9f8 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c6:	781a      	ldrb	r2, [r3, #0]
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d2:	1c5a      	adds	r2, r3, #1
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9dc:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	b29a      	uxth	r2, r3
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9f0:	3b01      	subs	r3, #1
 800b9f2:	b29a      	uxth	r2, r3
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d074      	beq.n	800baea <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d022      	beq.n	800ba4e <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba0c:	4a47      	ldr	r2, [pc, #284]	; (800bb2c <HAL_I2C_Master_Transmit_DMA+0x218>)
 800ba0e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba14:	4a46      	ldr	r2, [pc, #280]	; (800bb30 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800ba16:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba24:	2200      	movs	r2, #0
 800ba26:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba30:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800ba38:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800ba3e:	f7fc ff17 	bl	8008870 <HAL_DMA_Start_IT>
 800ba42:	4603      	mov	r3, r0
 800ba44:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800ba46:	7dfb      	ldrb	r3, [r7, #23]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d13a      	bne.n	800bac2 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800ba4c:	e013      	b.n	800ba76 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2220      	movs	r2, #32
 800ba52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba62:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800ba72:	2301      	movs	r3, #1
 800ba74:	e051      	b.n	800bb1a <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	b2da      	uxtb	r2, r3
 800ba80:	8979      	ldrh	r1, [r7, #10]
 800ba82:	4b2c      	ldr	r3, [pc, #176]	; (800bb34 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800ba84:	9300      	str	r3, [sp, #0]
 800ba86:	69fb      	ldr	r3, [r7, #28]
 800ba88:	68f8      	ldr	r0, [r7, #12]
 800ba8a:	f002 f83b 	bl	800db04 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba92:	b29a      	uxth	r2, r3
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba98:	1ad3      	subs	r3, r2, r3
 800ba9a:	b29a      	uxth	r2, r3
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2200      	movs	r2, #0
 800baa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800baa8:	2110      	movs	r1, #16
 800baaa:	68f8      	ldr	r0, [r7, #12]
 800baac:	f002 f85c 	bl	800db68 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800babe:	601a      	str	r2, [r3, #0]
 800bac0:	e028      	b.n	800bb14 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2220      	movs	r2, #32
 800bac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2200      	movs	r2, #0
 800bace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bad6:	f043 0210 	orr.w	r2, r3, #16
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2200      	movs	r2, #0
 800bae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bae6:	2301      	movs	r3, #1
 800bae8:	e017      	b.n	800bb1a <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	4a12      	ldr	r2, [pc, #72]	; (800bb38 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800baee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800baf0:	69bb      	ldr	r3, [r7, #24]
 800baf2:	b2da      	uxtb	r2, r3
 800baf4:	8979      	ldrh	r1, [r7, #10]
 800baf6:	4b0f      	ldr	r3, [pc, #60]	; (800bb34 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800baf8:	9300      	str	r3, [sp, #0]
 800bafa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	f002 f800 	bl	800db04 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2200      	movs	r2, #0
 800bb08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bb0c:	2101      	movs	r1, #1
 800bb0e:	68f8      	ldr	r0, [r7, #12]
 800bb10:	f002 f82a 	bl	800db68 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800bb14:	2300      	movs	r3, #0
 800bb16:	e000      	b.n	800bb1a <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800bb18:	2302      	movs	r3, #2
  }
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3720      	adds	r7, #32
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	ffff0000 	.word	0xffff0000
 800bb28:	0800c36f 	.word	0x0800c36f
 800bb2c:	0800d727 	.word	0x0800d727
 800bb30:	0800d855 	.word	0x0800d855
 800bb34:	80002000 	.word	0x80002000
 800bb38:	0800beff 	.word	0x0800beff

0800bb3c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b088      	sub	sp, #32
 800bb40:	af02      	add	r7, sp, #8
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	607a      	str	r2, [r7, #4]
 800bb46:	461a      	mov	r2, r3
 800bb48:	460b      	mov	r3, r1
 800bb4a:	817b      	strh	r3, [r7, #10]
 800bb4c:	4613      	mov	r3, r2
 800bb4e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb56:	b2db      	uxtb	r3, r3
 800bb58:	2b20      	cmp	r3, #32
 800bb5a:	f040 80cd 	bne.w	800bcf8 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	699b      	ldr	r3, [r3, #24]
 800bb64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb6c:	d101      	bne.n	800bb72 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800bb6e:	2302      	movs	r3, #2
 800bb70:	e0c3      	b.n	800bcfa <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	d101      	bne.n	800bb80 <HAL_I2C_Master_Receive_DMA+0x44>
 800bb7c:	2302      	movs	r3, #2
 800bb7e:	e0bc      	b.n	800bcfa <HAL_I2C_Master_Receive_DMA+0x1be>
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2201      	movs	r2, #1
 800bb84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2222      	movs	r2, #34	; 0x22
 800bb8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2210      	movs	r2, #16
 800bb94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	893a      	ldrh	r2, [r7, #8]
 800bba8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	4a55      	ldr	r2, [pc, #340]	; (800bd04 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800bbae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	4a55      	ldr	r2, [pc, #340]	; (800bd08 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800bbb4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	2bff      	cmp	r3, #255	; 0xff
 800bbbe:	d906      	bls.n	800bbce <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	22ff      	movs	r2, #255	; 0xff
 800bbc4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800bbc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bbca:	617b      	str	r3, [r7, #20]
 800bbcc:	e007      	b.n	800bbde <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbd2:	b29a      	uxth	r2, r3
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800bbd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bbdc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d070      	beq.n	800bcc8 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d020      	beq.n	800bc30 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbf2:	4a46      	ldr	r2, [pc, #280]	; (800bd0c <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800bbf4:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbfa:	4a45      	ldr	r2, [pc, #276]	; (800bd10 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800bbfc:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc02:	2200      	movs	r2, #0
 800bc04:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	3324      	adds	r3, #36	; 0x24
 800bc18:	4619      	mov	r1, r3
 800bc1a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800bc20:	f7fc fe26 	bl	8008870 <HAL_DMA_Start_IT>
 800bc24:	4603      	mov	r3, r0
 800bc26:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800bc28:	7cfb      	ldrb	r3, [r7, #19]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d138      	bne.n	800bca0 <HAL_I2C_Master_Receive_DMA+0x164>
 800bc2e:	e013      	b.n	800bc58 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2220      	movs	r2, #32
 800bc34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800bc54:	2301      	movs	r3, #1
 800bc56:	e050      	b.n	800bcfa <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc5c:	b2da      	uxtb	r2, r3
 800bc5e:	8979      	ldrh	r1, [r7, #10]
 800bc60:	4b2c      	ldr	r3, [pc, #176]	; (800bd14 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800bc62:	9300      	str	r3, [sp, #0]
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	68f8      	ldr	r0, [r7, #12]
 800bc68:	f001 ff4c 	bl	800db04 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc70:	b29a      	uxth	r2, r3
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc76:	1ad3      	subs	r3, r2, r3
 800bc78:	b29a      	uxth	r2, r3
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	2200      	movs	r2, #0
 800bc82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800bc86:	2110      	movs	r1, #16
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	f001 ff6d 	bl	800db68 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	681a      	ldr	r2, [r3, #0]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bc9c:	601a      	str	r2, [r3, #0]
 800bc9e:	e029      	b.n	800bcf4 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2220      	movs	r2, #32
 800bca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcb4:	f043 0210 	orr.w	r2, r3, #16
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	e018      	b.n	800bcfa <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	4a13      	ldr	r2, [pc, #76]	; (800bd18 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800bccc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcd2:	b2da      	uxtb	r2, r3
 800bcd4:	8979      	ldrh	r1, [r7, #10]
 800bcd6:	4b0f      	ldr	r3, [pc, #60]	; (800bd14 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800bcd8:	9300      	str	r3, [sp, #0]
 800bcda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bcde:	68f8      	ldr	r0, [r7, #12]
 800bce0:	f001 ff10 	bl	800db04 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2200      	movs	r2, #0
 800bce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800bcec:	2102      	movs	r1, #2
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	f001 ff3a 	bl	800db68 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	e000      	b.n	800bcfa <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800bcf8:	2302      	movs	r3, #2
  }
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3718      	adds	r7, #24
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	ffff0000 	.word	0xffff0000
 800bd08:	0800c36f 	.word	0x0800c36f
 800bd0c:	0800d7bd 	.word	0x0800d7bd
 800bd10:	0800d855 	.word	0x0800d855
 800bd14:	80002400 	.word	0x80002400
 800bd18:	0800beff 	.word	0x0800beff

0800bd1c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	699b      	ldr	r3, [r3, #24]
 800bd2a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d005      	beq.n	800bd48 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd40:	68ba      	ldr	r2, [r7, #8]
 800bd42:	68f9      	ldr	r1, [r7, #12]
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	4798      	blx	r3
  }
}
 800bd48:	bf00      	nop
 800bd4a:	3710      	adds	r7, #16
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b086      	sub	sp, #24
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	699b      	ldr	r3, [r3, #24]
 800bd5e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	0a1b      	lsrs	r3, r3, #8
 800bd6c:	f003 0301 	and.w	r3, r3, #1
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d010      	beq.n	800bd96 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	09db      	lsrs	r3, r3, #7
 800bd78:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d00a      	beq.n	800bd96 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd84:	f043 0201 	orr.w	r2, r3, #1
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd94:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	0a9b      	lsrs	r3, r3, #10
 800bd9a:	f003 0301 	and.w	r3, r3, #1
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d010      	beq.n	800bdc4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	09db      	lsrs	r3, r3, #7
 800bda6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d00a      	beq.n	800bdc4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdb2:	f043 0208 	orr.w	r2, r3, #8
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bdc2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	0a5b      	lsrs	r3, r3, #9
 800bdc8:	f003 0301 	and.w	r3, r3, #1
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d010      	beq.n	800bdf2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	09db      	lsrs	r3, r3, #7
 800bdd4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d00a      	beq.n	800bdf2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bde0:	f043 0202 	orr.w	r2, r3, #2
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bdf0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdf6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f003 030b 	and.w	r3, r3, #11
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d003      	beq.n	800be0a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800be02:	68f9      	ldr	r1, [r7, #12]
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f001 fb53 	bl	800d4b0 <I2C_ITError>
  }
}
 800be0a:	bf00      	nop
 800be0c:	3718      	adds	r7, #24
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800be12:	b480      	push	{r7}
 800be14:	b083      	sub	sp, #12
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800be1a:	bf00      	nop
 800be1c:	370c      	adds	r7, #12
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr

0800be26 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800be26:	b480      	push	{r7}
 800be28:	b083      	sub	sp, #12
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800be2e:	bf00      	nop
 800be30:	370c      	adds	r7, #12
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr

0800be3a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800be3a:	b480      	push	{r7}
 800be3c:	b083      	sub	sp, #12
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800be42:	bf00      	nop
 800be44:	370c      	adds	r7, #12
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr

0800be4e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800be4e:	b480      	push	{r7}
 800be50:	b083      	sub	sp, #12
 800be52:	af00      	add	r7, sp, #0
 800be54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800be56:	bf00      	nop
 800be58:	370c      	adds	r7, #12
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr

0800be62 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800be62:	b480      	push	{r7}
 800be64:	b083      	sub	sp, #12
 800be66:	af00      	add	r7, sp, #0
 800be68:	6078      	str	r0, [r7, #4]
 800be6a:	460b      	mov	r3, r1
 800be6c:	70fb      	strb	r3, [r7, #3]
 800be6e:	4613      	mov	r3, r2
 800be70:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800be72:	bf00      	nop
 800be74:	370c      	adds	r7, #12
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr

0800be7e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800be7e:	b480      	push	{r7}
 800be80:	b083      	sub	sp, #12
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800be86:	bf00      	nop
 800be88:	370c      	adds	r7, #12
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr

0800be92 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800be92:	b480      	push	{r7}
 800be94:	b083      	sub	sp, #12
 800be96:	af00      	add	r7, sp, #0
 800be98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800be9a:	bf00      	nop
 800be9c:	370c      	adds	r7, #12
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr

0800bea6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bea6:	b480      	push	{r7}
 800bea8:	b083      	sub	sp, #12
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800beae:	bf00      	nop
 800beb0:	370c      	adds	r7, #12
 800beb2:	46bd      	mov	sp, r7
 800beb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb8:	4770      	bx	lr

0800beba <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800beba:	b480      	push	{r7}
 800bebc:	b083      	sub	sp, #12
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800bec2:	bf00      	nop
 800bec4:	370c      	adds	r7, #12
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr

0800bece <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bece:	b480      	push	{r7}
 800bed0:	b083      	sub	sp, #12
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800bed6:	bf00      	nop
 800bed8:	370c      	adds	r7, #12
 800beda:	46bd      	mov	sp, r7
 800bedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee0:	4770      	bx	lr

0800bee2 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800bee2:	b480      	push	{r7}
 800bee4:	b083      	sub	sp, #12
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bef0:	b2db      	uxtb	r3, r3
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	370c      	adds	r7, #12
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr

0800befe <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800befe:	b580      	push	{r7, lr}
 800bf00:	b088      	sub	sp, #32
 800bf02:	af02      	add	r7, sp, #8
 800bf04:	60f8      	str	r0, [r7, #12]
 800bf06:	60b9      	str	r1, [r7, #8]
 800bf08:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d101      	bne.n	800bf1c <I2C_Master_ISR_IT+0x1e>
 800bf18:	2302      	movs	r3, #2
 800bf1a:	e120      	b.n	800c15e <I2C_Master_ISR_IT+0x260>
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2201      	movs	r2, #1
 800bf20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	091b      	lsrs	r3, r3, #4
 800bf28:	f003 0301 	and.w	r3, r3, #1
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d013      	beq.n	800bf58 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	091b      	lsrs	r3, r3, #4
 800bf34:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d00d      	beq.n	800bf58 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	2210      	movs	r2, #16
 800bf42:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf48:	f043 0204 	orr.w	r2, r3, #4
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bf50:	68f8      	ldr	r0, [r7, #12]
 800bf52:	f001 fbc4 	bl	800d6de <I2C_Flush_TXDR>
 800bf56:	e0ed      	b.n	800c134 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	089b      	lsrs	r3, r3, #2
 800bf5c:	f003 0301 	and.w	r3, r3, #1
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d023      	beq.n	800bfac <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	089b      	lsrs	r3, r3, #2
 800bf68:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d01d      	beq.n	800bfac <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	f023 0304 	bic.w	r3, r3, #4
 800bf76:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf82:	b2d2      	uxtb	r2, r2
 800bf84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf8a:	1c5a      	adds	r2, r3, #1
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf94:	3b01      	subs	r3, #1
 800bf96:	b29a      	uxth	r2, r3
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfa0:	b29b      	uxth	r3, r3
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	b29a      	uxth	r2, r3
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bfaa:	e0c3      	b.n	800c134 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	099b      	lsrs	r3, r3, #6
 800bfb0:	f003 0301 	and.w	r3, r3, #1
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d12a      	bne.n	800c00e <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	085b      	lsrs	r3, r3, #1
 800bfbc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d024      	beq.n	800c00e <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	085b      	lsrs	r3, r3, #1
 800bfc8:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d01e      	beq.n	800c00e <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfd4:	b29b      	uxth	r3, r3
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	f000 80ac 	beq.w	800c134 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe0:	781a      	ldrb	r2, [r3, #0]
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfec:	1c5a      	adds	r2, r3, #1
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bff6:	3b01      	subs	r3, #1
 800bff8:	b29a      	uxth	r2, r3
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c002:	b29b      	uxth	r3, r3
 800c004:	3b01      	subs	r3, #1
 800c006:	b29a      	uxth	r2, r3
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800c00c:	e092      	b.n	800c134 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	09db      	lsrs	r3, r3, #7
 800c012:	f003 0301 	and.w	r3, r3, #1
 800c016:	2b00      	cmp	r3, #0
 800c018:	d05d      	beq.n	800c0d6 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	099b      	lsrs	r3, r3, #6
 800c01e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800c022:	2b00      	cmp	r3, #0
 800c024:	d057      	beq.n	800c0d6 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c02a:	b29b      	uxth	r3, r3
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d040      	beq.n	800c0b2 <I2C_Master_ISR_IT+0x1b4>
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c034:	2b00      	cmp	r3, #0
 800c036:	d13c      	bne.n	800c0b2 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	b29b      	uxth	r3, r3
 800c040:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c044:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	2bff      	cmp	r3, #255	; 0xff
 800c04e:	d90e      	bls.n	800c06e <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	22ff      	movs	r2, #255	; 0xff
 800c054:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c05a:	b2da      	uxtb	r2, r3
 800c05c:	8a79      	ldrh	r1, [r7, #18]
 800c05e:	2300      	movs	r3, #0
 800c060:	9300      	str	r3, [sp, #0]
 800c062:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c066:	68f8      	ldr	r0, [r7, #12]
 800c068:	f001 fd4c 	bl	800db04 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c06c:	e032      	b.n	800c0d4 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c072:	b29a      	uxth	r2, r3
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c07c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c080:	d00b      	beq.n	800c09a <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c086:	b2da      	uxtb	r2, r3
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c08c:	8a79      	ldrh	r1, [r7, #18]
 800c08e:	2000      	movs	r0, #0
 800c090:	9000      	str	r0, [sp, #0]
 800c092:	68f8      	ldr	r0, [r7, #12]
 800c094:	f001 fd36 	bl	800db04 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c098:	e01c      	b.n	800c0d4 <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c09e:	b2da      	uxtb	r2, r3
 800c0a0:	8a79      	ldrh	r1, [r7, #18]
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	9300      	str	r3, [sp, #0]
 800c0a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	f001 fd2a 	bl	800db04 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c0b0:	e010      	b.n	800c0d4 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	685b      	ldr	r3, [r3, #4]
 800c0b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0c0:	d003      	beq.n	800c0ca <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c0c2:	68f8      	ldr	r0, [r7, #12]
 800c0c4:	f000 fdde 	bl	800cc84 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c0c8:	e034      	b.n	800c134 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c0ca:	2140      	movs	r1, #64	; 0x40
 800c0cc:	68f8      	ldr	r0, [r7, #12]
 800c0ce:	f001 f9ef 	bl	800d4b0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c0d2:	e02f      	b.n	800c134 <I2C_Master_ISR_IT+0x236>
 800c0d4:	e02e      	b.n	800c134 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	099b      	lsrs	r3, r3, #6
 800c0da:	f003 0301 	and.w	r3, r3, #1
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d028      	beq.n	800c134 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	099b      	lsrs	r3, r3, #6
 800c0e6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d022      	beq.n	800c134 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0f2:	b29b      	uxth	r3, r3
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d119      	bne.n	800c12c <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c102:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c106:	d015      	beq.n	800c134 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c10c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c110:	d108      	bne.n	800c124 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	685a      	ldr	r2, [r3, #4]
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c120:	605a      	str	r2, [r3, #4]
 800c122:	e007      	b.n	800c134 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c124:	68f8      	ldr	r0, [r7, #12]
 800c126:	f000 fdad 	bl	800cc84 <I2C_ITMasterSeqCplt>
 800c12a:	e003      	b.n	800c134 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c12c:	2140      	movs	r1, #64	; 0x40
 800c12e:	68f8      	ldr	r0, [r7, #12]
 800c130:	f001 f9be 	bl	800d4b0 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	095b      	lsrs	r3, r3, #5
 800c138:	f003 0301 	and.w	r3, r3, #1
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d009      	beq.n	800c154 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	095b      	lsrs	r3, r3, #5
 800c144:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d003      	beq.n	800c154 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800c14c:	6979      	ldr	r1, [r7, #20]
 800c14e:	68f8      	ldr	r0, [r7, #12]
 800c150:	f000 fe34 	bl	800cdbc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2200      	movs	r2, #0
 800c158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c15c:	2300      	movs	r3, #0
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3718      	adds	r7, #24
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800c166:	b580      	push	{r7, lr}
 800c168:	b086      	sub	sp, #24
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	60f8      	str	r0, [r7, #12]
 800c16e:	60b9      	str	r1, [r7, #8]
 800c170:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c176:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c182:	2b01      	cmp	r3, #1
 800c184:	d101      	bne.n	800c18a <I2C_Slave_ISR_IT+0x24>
 800c186:	2302      	movs	r3, #2
 800c188:	e0ed      	b.n	800c366 <I2C_Slave_ISR_IT+0x200>
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2201      	movs	r2, #1
 800c18e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	095b      	lsrs	r3, r3, #5
 800c196:	f003 0301 	and.w	r3, r3, #1
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d00a      	beq.n	800c1b4 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	095b      	lsrs	r3, r3, #5
 800c1a2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d004      	beq.n	800c1b4 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800c1aa:	6939      	ldr	r1, [r7, #16]
 800c1ac:	68f8      	ldr	r0, [r7, #12]
 800c1ae:	f000 fecf 	bl	800cf50 <I2C_ITSlaveCplt>
 800c1b2:	e0d3      	b.n	800c35c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	091b      	lsrs	r3, r3, #4
 800c1b8:	f003 0301 	and.w	r3, r3, #1
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d04d      	beq.n	800c25c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	091b      	lsrs	r3, r3, #4
 800c1c4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d047      	beq.n	800c25c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d128      	bne.n	800c228 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1dc:	b2db      	uxtb	r3, r3
 800c1de:	2b28      	cmp	r3, #40	; 0x28
 800c1e0:	d108      	bne.n	800c1f4 <I2C_Slave_ISR_IT+0x8e>
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c1e8:	d104      	bne.n	800c1f4 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c1ea:	6939      	ldr	r1, [r7, #16]
 800c1ec:	68f8      	ldr	r0, [r7, #12]
 800c1ee:	f001 f909 	bl	800d404 <I2C_ITListenCplt>
 800c1f2:	e032      	b.n	800c25a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	2b29      	cmp	r3, #41	; 0x29
 800c1fe:	d10e      	bne.n	800c21e <I2C_Slave_ISR_IT+0xb8>
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c206:	d00a      	beq.n	800c21e <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	2210      	movs	r2, #16
 800c20e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c210:	68f8      	ldr	r0, [r7, #12]
 800c212:	f001 fa64 	bl	800d6de <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c216:	68f8      	ldr	r0, [r7, #12]
 800c218:	f000 fd71 	bl	800ccfe <I2C_ITSlaveSeqCplt>
 800c21c:	e01d      	b.n	800c25a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	2210      	movs	r2, #16
 800c224:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800c226:	e096      	b.n	800c356 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2210      	movs	r2, #16
 800c22e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c234:	f043 0204 	orr.w	r2, r3, #4
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d004      	beq.n	800c24c <I2C_Slave_ISR_IT+0xe6>
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c248:	f040 8085 	bne.w	800c356 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c250:	4619      	mov	r1, r3
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	f001 f92c 	bl	800d4b0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c258:	e07d      	b.n	800c356 <I2C_Slave_ISR_IT+0x1f0>
 800c25a:	e07c      	b.n	800c356 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	089b      	lsrs	r3, r3, #2
 800c260:	f003 0301 	and.w	r3, r3, #1
 800c264:	2b00      	cmp	r3, #0
 800c266:	d030      	beq.n	800c2ca <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	089b      	lsrs	r3, r3, #2
 800c26c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c270:	2b00      	cmp	r3, #0
 800c272:	d02a      	beq.n	800c2ca <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c278:	b29b      	uxth	r3, r3
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d018      	beq.n	800c2b0 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c288:	b2d2      	uxtb	r2, r2
 800c28a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c290:	1c5a      	adds	r2, r3, #1
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c29a:	3b01      	subs	r3, #1
 800c29c:	b29a      	uxth	r2, r3
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	3b01      	subs	r3, #1
 800c2aa:	b29a      	uxth	r2, r3
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d14f      	bne.n	800c35a <I2C_Slave_ISR_IT+0x1f4>
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c2c0:	d04b      	beq.n	800c35a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800c2c2:	68f8      	ldr	r0, [r7, #12]
 800c2c4:	f000 fd1b 	bl	800ccfe <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800c2c8:	e047      	b.n	800c35a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	08db      	lsrs	r3, r3, #3
 800c2ce:	f003 0301 	and.w	r3, r3, #1
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d00a      	beq.n	800c2ec <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	08db      	lsrs	r3, r3, #3
 800c2da:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d004      	beq.n	800c2ec <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800c2e2:	6939      	ldr	r1, [r7, #16]
 800c2e4:	68f8      	ldr	r0, [r7, #12]
 800c2e6:	f000 fc49 	bl	800cb7c <I2C_ITAddrCplt>
 800c2ea:	e037      	b.n	800c35c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	085b      	lsrs	r3, r3, #1
 800c2f0:	f003 0301 	and.w	r3, r3, #1
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d031      	beq.n	800c35c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	085b      	lsrs	r3, r3, #1
 800c2fc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c300:	2b00      	cmp	r3, #0
 800c302:	d02b      	beq.n	800c35c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c308:	b29b      	uxth	r3, r3
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d018      	beq.n	800c340 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c312:	781a      	ldrb	r2, [r3, #0]
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c31e:	1c5a      	adds	r2, r3, #1
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c328:	b29b      	uxth	r3, r3
 800c32a:	3b01      	subs	r3, #1
 800c32c:	b29a      	uxth	r2, r3
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c336:	3b01      	subs	r3, #1
 800c338:	b29a      	uxth	r2, r3
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	851a      	strh	r2, [r3, #40]	; 0x28
 800c33e:	e00d      	b.n	800c35c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c346:	d002      	beq.n	800c34e <I2C_Slave_ISR_IT+0x1e8>
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d106      	bne.n	800c35c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c34e:	68f8      	ldr	r0, [r7, #12]
 800c350:	f000 fcd5 	bl	800ccfe <I2C_ITSlaveSeqCplt>
 800c354:	e002      	b.n	800c35c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800c356:	bf00      	nop
 800c358:	e000      	b.n	800c35c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800c35a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2200      	movs	r2, #0
 800c360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c364:	2300      	movs	r3, #0
}
 800c366:	4618      	mov	r0, r3
 800c368:	3718      	adds	r7, #24
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}

0800c36e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800c36e:	b580      	push	{r7, lr}
 800c370:	b088      	sub	sp, #32
 800c372:	af02      	add	r7, sp, #8
 800c374:	60f8      	str	r0, [r7, #12]
 800c376:	60b9      	str	r1, [r7, #8]
 800c378:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c380:	2b01      	cmp	r3, #1
 800c382:	d101      	bne.n	800c388 <I2C_Master_ISR_DMA+0x1a>
 800c384:	2302      	movs	r3, #2
 800c386:	e0e1      	b.n	800c54c <I2C_Master_ISR_DMA+0x1de>
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2201      	movs	r2, #1
 800c38c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	091b      	lsrs	r3, r3, #4
 800c394:	f003 0301 	and.w	r3, r3, #1
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d017      	beq.n	800c3cc <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	091b      	lsrs	r3, r3, #4
 800c3a0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d011      	beq.n	800c3cc <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	2210      	movs	r2, #16
 800c3ae:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3b4:	f043 0204 	orr.w	r2, r3, #4
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c3bc:	2120      	movs	r1, #32
 800c3be:	68f8      	ldr	r0, [r7, #12]
 800c3c0:	f001 fbd2 	bl	800db68 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c3c4:	68f8      	ldr	r0, [r7, #12]
 800c3c6:	f001 f98a 	bl	800d6de <I2C_Flush_TXDR>
 800c3ca:	e0ba      	b.n	800c542 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	09db      	lsrs	r3, r3, #7
 800c3d0:	f003 0301 	and.w	r3, r3, #1
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d072      	beq.n	800c4be <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	099b      	lsrs	r3, r3, #6
 800c3dc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d06c      	beq.n	800c4be <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c3f2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3f8:	b29b      	uxth	r3, r3
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d04e      	beq.n	800c49c <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	b29b      	uxth	r3, r3
 800c406:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c40a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c410:	b29b      	uxth	r3, r3
 800c412:	2bff      	cmp	r3, #255	; 0xff
 800c414:	d906      	bls.n	800c424 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	22ff      	movs	r2, #255	; 0xff
 800c41a:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800c41c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c420:	617b      	str	r3, [r7, #20]
 800c422:	e010      	b.n	800c446 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c428:	b29a      	uxth	r2, r3
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c432:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c436:	d003      	beq.n	800c440 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c43c:	617b      	str	r3, [r7, #20]
 800c43e:	e002      	b.n	800c446 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800c440:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c444:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c44a:	b2da      	uxtb	r2, r3
 800c44c:	8a79      	ldrh	r1, [r7, #18]
 800c44e:	2300      	movs	r3, #0
 800c450:	9300      	str	r3, [sp, #0]
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	68f8      	ldr	r0, [r7, #12]
 800c456:	f001 fb55 	bl	800db04 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c45e:	b29a      	uxth	r2, r3
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c464:	1ad3      	subs	r3, r2, r3
 800c466:	b29a      	uxth	r2, r3
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c472:	b2db      	uxtb	r3, r3
 800c474:	2b22      	cmp	r3, #34	; 0x22
 800c476:	d108      	bne.n	800c48a <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c486:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c488:	e05b      	b.n	800c542 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c498:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c49a:	e052      	b.n	800c542 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4aa:	d003      	beq.n	800c4b4 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c4ac:	68f8      	ldr	r0, [r7, #12]
 800c4ae:	f000 fbe9 	bl	800cc84 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800c4b2:	e046      	b.n	800c542 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c4b4:	2140      	movs	r1, #64	; 0x40
 800c4b6:	68f8      	ldr	r0, [r7, #12]
 800c4b8:	f000 fffa 	bl	800d4b0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c4bc:	e041      	b.n	800c542 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	099b      	lsrs	r3, r3, #6
 800c4c2:	f003 0301 	and.w	r3, r3, #1
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d029      	beq.n	800c51e <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	099b      	lsrs	r3, r3, #6
 800c4ce:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d023      	beq.n	800c51e <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4da:	b29b      	uxth	r3, r3
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d119      	bne.n	800c514 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4ee:	d027      	beq.n	800c540 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c4f8:	d108      	bne.n	800c50c <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	685a      	ldr	r2, [r3, #4]
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c508:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800c50a:	e019      	b.n	800c540 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c50c:	68f8      	ldr	r0, [r7, #12]
 800c50e:	f000 fbb9 	bl	800cc84 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800c512:	e015      	b.n	800c540 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c514:	2140      	movs	r1, #64	; 0x40
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	f000 ffca 	bl	800d4b0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c51c:	e010      	b.n	800c540 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	095b      	lsrs	r3, r3, #5
 800c522:	f003 0301 	and.w	r3, r3, #1
 800c526:	2b00      	cmp	r3, #0
 800c528:	d00b      	beq.n	800c542 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	095b      	lsrs	r3, r3, #5
 800c52e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c532:	2b00      	cmp	r3, #0
 800c534:	d005      	beq.n	800c542 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c536:	68b9      	ldr	r1, [r7, #8]
 800c538:	68f8      	ldr	r0, [r7, #12]
 800c53a:	f000 fc3f 	bl	800cdbc <I2C_ITMasterCplt>
 800c53e:	e000      	b.n	800c542 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800c540:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	2200      	movs	r2, #0
 800c546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c54a:	2300      	movs	r3, #0
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3718      	adds	r7, #24
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}

0800c554 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b088      	sub	sp, #32
 800c558:	af02      	add	r7, sp, #8
 800c55a:	60f8      	str	r0, [r7, #12]
 800c55c:	60b9      	str	r1, [r7, #8]
 800c55e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800c560:	4b92      	ldr	r3, [pc, #584]	; (800c7ac <I2C_Mem_ISR_DMA+0x258>)
 800c562:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d101      	bne.n	800c572 <I2C_Mem_ISR_DMA+0x1e>
 800c56e:	2302      	movs	r3, #2
 800c570:	e118      	b.n	800c7a4 <I2C_Mem_ISR_DMA+0x250>
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2201      	movs	r2, #1
 800c576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	091b      	lsrs	r3, r3, #4
 800c57e:	f003 0301 	and.w	r3, r3, #1
 800c582:	2b00      	cmp	r3, #0
 800c584:	d017      	beq.n	800c5b6 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	091b      	lsrs	r3, r3, #4
 800c58a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d011      	beq.n	800c5b6 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	2210      	movs	r2, #16
 800c598:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c59e:	f043 0204 	orr.w	r2, r3, #4
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c5a6:	2120      	movs	r1, #32
 800c5a8:	68f8      	ldr	r0, [r7, #12]
 800c5aa:	f001 fadd 	bl	800db68 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c5ae:	68f8      	ldr	r0, [r7, #12]
 800c5b0:	f001 f895 	bl	800d6de <I2C_Flush_TXDR>
 800c5b4:	e0f1      	b.n	800c79a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	085b      	lsrs	r3, r3, #1
 800c5ba:	f003 0301 	and.w	r3, r3, #1
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d00f      	beq.n	800c5e2 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	085b      	lsrs	r3, r3, #1
 800c5c6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d009      	beq.n	800c5e2 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	68fa      	ldr	r2, [r7, #12]
 800c5d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c5d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5de:	651a      	str	r2, [r3, #80]	; 0x50
 800c5e0:	e0db      	b.n	800c79a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	09db      	lsrs	r3, r3, #7
 800c5e6:	f003 0301 	and.w	r3, r3, #1
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d060      	beq.n	800c6b0 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	099b      	lsrs	r3, r3, #6
 800c5f2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d05a      	beq.n	800c6b0 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c5fa:	2101      	movs	r1, #1
 800c5fc:	68f8      	ldr	r0, [r7, #12]
 800c5fe:	f001 fb37 	bl	800dc70 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c602:	2110      	movs	r1, #16
 800c604:	68f8      	ldr	r0, [r7, #12]
 800c606:	f001 faaf 	bl	800db68 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c60e:	b29b      	uxth	r3, r3
 800c610:	2b00      	cmp	r3, #0
 800c612:	d048      	beq.n	800c6a6 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c618:	b29b      	uxth	r3, r3
 800c61a:	2bff      	cmp	r3, #255	; 0xff
 800c61c:	d910      	bls.n	800c640 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	22ff      	movs	r2, #255	; 0xff
 800c622:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c628:	b299      	uxth	r1, r3
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c62e:	b2da      	uxtb	r2, r3
 800c630:	2300      	movs	r3, #0
 800c632:	9300      	str	r3, [sp, #0]
 800c634:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c638:	68f8      	ldr	r0, [r7, #12]
 800c63a:	f001 fa63 	bl	800db04 <I2C_TransferConfig>
 800c63e:	e011      	b.n	800c664 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c644:	b29a      	uxth	r2, r3
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c64e:	b299      	uxth	r1, r3
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c654:	b2da      	uxtb	r2, r3
 800c656:	2300      	movs	r3, #0
 800c658:	9300      	str	r3, [sp, #0]
 800c65a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c65e:	68f8      	ldr	r0, [r7, #12]
 800c660:	f001 fa50 	bl	800db04 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c668:	b29a      	uxth	r2, r3
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c66e:	1ad3      	subs	r3, r2, r3
 800c670:	b29a      	uxth	r2, r3
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	2b22      	cmp	r3, #34	; 0x22
 800c680:	d108      	bne.n	800c694 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	681a      	ldr	r2, [r3, #0]
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c690:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c692:	e082      	b.n	800c79a <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	681a      	ldr	r2, [r3, #0]
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c6a2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c6a4:	e079      	b.n	800c79a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c6a6:	2140      	movs	r1, #64	; 0x40
 800c6a8:	68f8      	ldr	r0, [r7, #12]
 800c6aa:	f000 ff01 	bl	800d4b0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c6ae:	e074      	b.n	800c79a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	099b      	lsrs	r3, r3, #6
 800c6b4:	f003 0301 	and.w	r3, r3, #1
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d05e      	beq.n	800c77a <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	099b      	lsrs	r3, r3, #6
 800c6c0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d058      	beq.n	800c77a <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c6c8:	2101      	movs	r1, #1
 800c6ca:	68f8      	ldr	r0, [r7, #12]
 800c6cc:	f001 fad0 	bl	800dc70 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c6d0:	2110      	movs	r1, #16
 800c6d2:	68f8      	ldr	r0, [r7, #12]
 800c6d4:	f001 fa48 	bl	800db68 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	2b22      	cmp	r3, #34	; 0x22
 800c6e2:	d101      	bne.n	800c6e8 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800c6e4:	4b32      	ldr	r3, [pc, #200]	; (800c7b0 <I2C_Mem_ISR_DMA+0x25c>)
 800c6e6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	2bff      	cmp	r3, #255	; 0xff
 800c6f0:	d910      	bls.n	800c714 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	22ff      	movs	r2, #255	; 0xff
 800c6f6:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6fc:	b299      	uxth	r1, r3
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c702:	b2da      	uxtb	r2, r3
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	9300      	str	r3, [sp, #0]
 800c708:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c70c:	68f8      	ldr	r0, [r7, #12]
 800c70e:	f001 f9f9 	bl	800db04 <I2C_TransferConfig>
 800c712:	e011      	b.n	800c738 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c718:	b29a      	uxth	r2, r3
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c722:	b299      	uxth	r1, r3
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c728:	b2da      	uxtb	r2, r3
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	9300      	str	r3, [sp, #0]
 800c72e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c732:	68f8      	ldr	r0, [r7, #12]
 800c734:	f001 f9e6 	bl	800db04 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c73c:	b29a      	uxth	r2, r3
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c742:	1ad3      	subs	r3, r2, r3
 800c744:	b29a      	uxth	r2, r3
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c750:	b2db      	uxtb	r3, r3
 800c752:	2b22      	cmp	r3, #34	; 0x22
 800c754:	d108      	bne.n	800c768 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c764:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c766:	e018      	b.n	800c79a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	681a      	ldr	r2, [r3, #0]
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c776:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c778:	e00f      	b.n	800c79a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	095b      	lsrs	r3, r3, #5
 800c77e:	f003 0301 	and.w	r3, r3, #1
 800c782:	2b00      	cmp	r3, #0
 800c784:	d009      	beq.n	800c79a <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	095b      	lsrs	r3, r3, #5
 800c78a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d003      	beq.n	800c79a <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c792:	68b9      	ldr	r1, [r7, #8]
 800c794:	68f8      	ldr	r0, [r7, #12]
 800c796:	f000 fb11 	bl	800cdbc <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	2200      	movs	r2, #0
 800c79e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c7a2:	2300      	movs	r3, #0
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3718      	adds	r7, #24
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}
 800c7ac:	80002000 	.word	0x80002000
 800c7b0:	80002400 	.word	0x80002400

0800c7b4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b088      	sub	sp, #32
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	60f8      	str	r0, [r7, #12]
 800c7bc:	60b9      	str	r1, [r7, #8]
 800c7be:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	d101      	bne.n	800c7d8 <I2C_Slave_ISR_DMA+0x24>
 800c7d4:	2302      	movs	r3, #2
 800c7d6:	e1cc      	b.n	800cb72 <I2C_Slave_ISR_DMA+0x3be>
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2201      	movs	r2, #1
 800c7dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	095b      	lsrs	r3, r3, #5
 800c7e4:	f003 0301 	and.w	r3, r3, #1
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d00a      	beq.n	800c802 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	095b      	lsrs	r3, r3, #5
 800c7f0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d004      	beq.n	800c802 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800c7f8:	68b9      	ldr	r1, [r7, #8]
 800c7fa:	68f8      	ldr	r0, [r7, #12]
 800c7fc:	f000 fba8 	bl	800cf50 <I2C_ITSlaveCplt>
 800c800:	e1b2      	b.n	800cb68 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	091b      	lsrs	r3, r3, #4
 800c806:	f003 0301 	and.w	r3, r3, #1
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f000 819c 	beq.w	800cb48 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	091b      	lsrs	r3, r3, #4
 800c814:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c818:	2b00      	cmp	r3, #0
 800c81a:	f000 8195 	beq.w	800cb48 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	0b9b      	lsrs	r3, r3, #14
 800c822:	f003 0301 	and.w	r3, r3, #1
 800c826:	2b00      	cmp	r3, #0
 800c828:	d106      	bne.n	800c838 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	0bdb      	lsrs	r3, r3, #15
 800c82e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c832:	2b00      	cmp	r3, #0
 800c834:	f000 8181 	beq.w	800cb3a <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d07c      	beq.n	800c93a <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	0bdb      	lsrs	r3, r3, #15
 800c844:	f003 0301 	and.w	r3, r3, #1
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d076      	beq.n	800c93a <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	4a75      	ldr	r2, [pc, #468]	; (800ca28 <I2C_Slave_ISR_DMA+0x274>)
 800c854:	4293      	cmp	r3, r2
 800c856:	d059      	beq.n	800c90c <I2C_Slave_ISR_DMA+0x158>
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	4a73      	ldr	r2, [pc, #460]	; (800ca2c <I2C_Slave_ISR_DMA+0x278>)
 800c860:	4293      	cmp	r3, r2
 800c862:	d053      	beq.n	800c90c <I2C_Slave_ISR_DMA+0x158>
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	4a71      	ldr	r2, [pc, #452]	; (800ca30 <I2C_Slave_ISR_DMA+0x27c>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d04d      	beq.n	800c90c <I2C_Slave_ISR_DMA+0x158>
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	4a6f      	ldr	r2, [pc, #444]	; (800ca34 <I2C_Slave_ISR_DMA+0x280>)
 800c878:	4293      	cmp	r3, r2
 800c87a:	d047      	beq.n	800c90c <I2C_Slave_ISR_DMA+0x158>
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	4a6d      	ldr	r2, [pc, #436]	; (800ca38 <I2C_Slave_ISR_DMA+0x284>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d041      	beq.n	800c90c <I2C_Slave_ISR_DMA+0x158>
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	4a6b      	ldr	r2, [pc, #428]	; (800ca3c <I2C_Slave_ISR_DMA+0x288>)
 800c890:	4293      	cmp	r3, r2
 800c892:	d03b      	beq.n	800c90c <I2C_Slave_ISR_DMA+0x158>
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4a69      	ldr	r2, [pc, #420]	; (800ca40 <I2C_Slave_ISR_DMA+0x28c>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d035      	beq.n	800c90c <I2C_Slave_ISR_DMA+0x158>
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	4a67      	ldr	r2, [pc, #412]	; (800ca44 <I2C_Slave_ISR_DMA+0x290>)
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d02f      	beq.n	800c90c <I2C_Slave_ISR_DMA+0x158>
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4a65      	ldr	r2, [pc, #404]	; (800ca48 <I2C_Slave_ISR_DMA+0x294>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d029      	beq.n	800c90c <I2C_Slave_ISR_DMA+0x158>
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4a63      	ldr	r2, [pc, #396]	; (800ca4c <I2C_Slave_ISR_DMA+0x298>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d023      	beq.n	800c90c <I2C_Slave_ISR_DMA+0x158>
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	4a61      	ldr	r2, [pc, #388]	; (800ca50 <I2C_Slave_ISR_DMA+0x29c>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d01d      	beq.n	800c90c <I2C_Slave_ISR_DMA+0x158>
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4a5f      	ldr	r2, [pc, #380]	; (800ca54 <I2C_Slave_ISR_DMA+0x2a0>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d017      	beq.n	800c90c <I2C_Slave_ISR_DMA+0x158>
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	4a5d      	ldr	r2, [pc, #372]	; (800ca58 <I2C_Slave_ISR_DMA+0x2a4>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d011      	beq.n	800c90c <I2C_Slave_ISR_DMA+0x158>
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	4a5b      	ldr	r2, [pc, #364]	; (800ca5c <I2C_Slave_ISR_DMA+0x2a8>)
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d00b      	beq.n	800c90c <I2C_Slave_ISR_DMA+0x158>
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4a59      	ldr	r2, [pc, #356]	; (800ca60 <I2C_Slave_ISR_DMA+0x2ac>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d005      	beq.n	800c90c <I2C_Slave_ISR_DMA+0x158>
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	4a57      	ldr	r2, [pc, #348]	; (800ca64 <I2C_Slave_ISR_DMA+0x2b0>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	d109      	bne.n	800c920 <I2C_Slave_ISR_DMA+0x16c>
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	2b00      	cmp	r3, #0
 800c916:	bf0c      	ite	eq
 800c918:	2301      	moveq	r3, #1
 800c91a:	2300      	movne	r3, #0
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	e008      	b.n	800c932 <I2C_Slave_ISR_DMA+0x17e>
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	685b      	ldr	r3, [r3, #4]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	bf0c      	ite	eq
 800c92c:	2301      	moveq	r3, #1
 800c92e:	2300      	movne	r3, #0
 800c930:	b2db      	uxtb	r3, r3
 800c932:	2b00      	cmp	r3, #0
 800c934:	d001      	beq.n	800c93a <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800c936:	2301      	movs	r3, #1
 800c938:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c93e:	2b00      	cmp	r3, #0
 800c940:	f000 809f 	beq.w	800ca82 <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	0b9b      	lsrs	r3, r3, #14
 800c948:	f003 0301 	and.w	r3, r3, #1
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	f000 8098 	beq.w	800ca82 <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4a33      	ldr	r2, [pc, #204]	; (800ca28 <I2C_Slave_ISR_DMA+0x274>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d059      	beq.n	800ca12 <I2C_Slave_ISR_DMA+0x25e>
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4a31      	ldr	r2, [pc, #196]	; (800ca2c <I2C_Slave_ISR_DMA+0x278>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d053      	beq.n	800ca12 <I2C_Slave_ISR_DMA+0x25e>
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4a2f      	ldr	r2, [pc, #188]	; (800ca30 <I2C_Slave_ISR_DMA+0x27c>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d04d      	beq.n	800ca12 <I2C_Slave_ISR_DMA+0x25e>
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4a2d      	ldr	r2, [pc, #180]	; (800ca34 <I2C_Slave_ISR_DMA+0x280>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d047      	beq.n	800ca12 <I2C_Slave_ISR_DMA+0x25e>
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4a2b      	ldr	r2, [pc, #172]	; (800ca38 <I2C_Slave_ISR_DMA+0x284>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d041      	beq.n	800ca12 <I2C_Slave_ISR_DMA+0x25e>
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4a29      	ldr	r2, [pc, #164]	; (800ca3c <I2C_Slave_ISR_DMA+0x288>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d03b      	beq.n	800ca12 <I2C_Slave_ISR_DMA+0x25e>
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a27      	ldr	r2, [pc, #156]	; (800ca40 <I2C_Slave_ISR_DMA+0x28c>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d035      	beq.n	800ca12 <I2C_Slave_ISR_DMA+0x25e>
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4a25      	ldr	r2, [pc, #148]	; (800ca44 <I2C_Slave_ISR_DMA+0x290>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d02f      	beq.n	800ca12 <I2C_Slave_ISR_DMA+0x25e>
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4a23      	ldr	r2, [pc, #140]	; (800ca48 <I2C_Slave_ISR_DMA+0x294>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d029      	beq.n	800ca12 <I2C_Slave_ISR_DMA+0x25e>
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4a21      	ldr	r2, [pc, #132]	; (800ca4c <I2C_Slave_ISR_DMA+0x298>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d023      	beq.n	800ca12 <I2C_Slave_ISR_DMA+0x25e>
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4a1f      	ldr	r2, [pc, #124]	; (800ca50 <I2C_Slave_ISR_DMA+0x29c>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d01d      	beq.n	800ca12 <I2C_Slave_ISR_DMA+0x25e>
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4a1d      	ldr	r2, [pc, #116]	; (800ca54 <I2C_Slave_ISR_DMA+0x2a0>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d017      	beq.n	800ca12 <I2C_Slave_ISR_DMA+0x25e>
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4a1b      	ldr	r2, [pc, #108]	; (800ca58 <I2C_Slave_ISR_DMA+0x2a4>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d011      	beq.n	800ca12 <I2C_Slave_ISR_DMA+0x25e>
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4a19      	ldr	r2, [pc, #100]	; (800ca5c <I2C_Slave_ISR_DMA+0x2a8>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d00b      	beq.n	800ca12 <I2C_Slave_ISR_DMA+0x25e>
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a17      	ldr	r2, [pc, #92]	; (800ca60 <I2C_Slave_ISR_DMA+0x2ac>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d005      	beq.n	800ca12 <I2C_Slave_ISR_DMA+0x25e>
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a15      	ldr	r2, [pc, #84]	; (800ca64 <I2C_Slave_ISR_DMA+0x2b0>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d12a      	bne.n	800ca68 <I2C_Slave_ISR_DMA+0x2b4>
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	bf0c      	ite	eq
 800ca1e:	2301      	moveq	r3, #1
 800ca20:	2300      	movne	r3, #0
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	e029      	b.n	800ca7a <I2C_Slave_ISR_DMA+0x2c6>
 800ca26:	bf00      	nop
 800ca28:	40020010 	.word	0x40020010
 800ca2c:	40020028 	.word	0x40020028
 800ca30:	40020040 	.word	0x40020040
 800ca34:	40020058 	.word	0x40020058
 800ca38:	40020070 	.word	0x40020070
 800ca3c:	40020088 	.word	0x40020088
 800ca40:	400200a0 	.word	0x400200a0
 800ca44:	400200b8 	.word	0x400200b8
 800ca48:	40020410 	.word	0x40020410
 800ca4c:	40020428 	.word	0x40020428
 800ca50:	40020440 	.word	0x40020440
 800ca54:	40020458 	.word	0x40020458
 800ca58:	40020470 	.word	0x40020470
 800ca5c:	40020488 	.word	0x40020488
 800ca60:	400204a0 	.word	0x400204a0
 800ca64:	400204b8 	.word	0x400204b8
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	bf0c      	ite	eq
 800ca74:	2301      	moveq	r3, #1
 800ca76:	2300      	movne	r3, #0
 800ca78:	b2db      	uxtb	r3, r3
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d001      	beq.n	800ca82 <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800ca7e:	2301      	movs	r3, #1
 800ca80:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800ca82:	69fb      	ldr	r3, [r7, #28]
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	d128      	bne.n	800cada <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca8e:	b2db      	uxtb	r3, r3
 800ca90:	2b28      	cmp	r3, #40	; 0x28
 800ca92:	d108      	bne.n	800caa6 <I2C_Slave_ISR_DMA+0x2f2>
 800ca94:	69bb      	ldr	r3, [r7, #24]
 800ca96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca9a:	d104      	bne.n	800caa6 <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800ca9c:	68b9      	ldr	r1, [r7, #8]
 800ca9e:	68f8      	ldr	r0, [r7, #12]
 800caa0:	f000 fcb0 	bl	800d404 <I2C_ITListenCplt>
 800caa4:	e048      	b.n	800cb38 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800caac:	b2db      	uxtb	r3, r3
 800caae:	2b29      	cmp	r3, #41	; 0x29
 800cab0:	d10e      	bne.n	800cad0 <I2C_Slave_ISR_DMA+0x31c>
 800cab2:	69bb      	ldr	r3, [r7, #24]
 800cab4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cab8:	d00a      	beq.n	800cad0 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2210      	movs	r2, #16
 800cac0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800cac2:	68f8      	ldr	r0, [r7, #12]
 800cac4:	f000 fe0b 	bl	800d6de <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800cac8:	68f8      	ldr	r0, [r7, #12]
 800caca:	f000 f918 	bl	800ccfe <I2C_ITSlaveSeqCplt>
 800cace:	e033      	b.n	800cb38 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	2210      	movs	r2, #16
 800cad6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800cad8:	e034      	b.n	800cb44 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	2210      	movs	r2, #16
 800cae0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cae6:	f043 0204 	orr.w	r2, r3, #4
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800caf4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800caf6:	69bb      	ldr	r3, [r7, #24]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d003      	beq.n	800cb04 <I2C_Slave_ISR_DMA+0x350>
 800cafc:	69bb      	ldr	r3, [r7, #24]
 800cafe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cb02:	d11f      	bne.n	800cb44 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cb04:	7dfb      	ldrb	r3, [r7, #23]
 800cb06:	2b21      	cmp	r3, #33	; 0x21
 800cb08:	d002      	beq.n	800cb10 <I2C_Slave_ISR_DMA+0x35c>
 800cb0a:	7dfb      	ldrb	r3, [r7, #23]
 800cb0c:	2b29      	cmp	r3, #41	; 0x29
 800cb0e:	d103      	bne.n	800cb18 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2221      	movs	r2, #33	; 0x21
 800cb14:	631a      	str	r2, [r3, #48]	; 0x30
 800cb16:	e008      	b.n	800cb2a <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cb18:	7dfb      	ldrb	r3, [r7, #23]
 800cb1a:	2b22      	cmp	r3, #34	; 0x22
 800cb1c:	d002      	beq.n	800cb24 <I2C_Slave_ISR_DMA+0x370>
 800cb1e:	7dfb      	ldrb	r3, [r7, #23]
 800cb20:	2b2a      	cmp	r3, #42	; 0x2a
 800cb22:	d102      	bne.n	800cb2a <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2222      	movs	r2, #34	; 0x22
 800cb28:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb2e:	4619      	mov	r1, r3
 800cb30:	68f8      	ldr	r0, [r7, #12]
 800cb32:	f000 fcbd 	bl	800d4b0 <I2C_ITError>
      if (treatdmanack == 1U)
 800cb36:	e005      	b.n	800cb44 <I2C_Slave_ISR_DMA+0x390>
 800cb38:	e004      	b.n	800cb44 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	2210      	movs	r2, #16
 800cb40:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800cb42:	e011      	b.n	800cb68 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800cb44:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800cb46:	e00f      	b.n	800cb68 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	08db      	lsrs	r3, r3, #3
 800cb4c:	f003 0301 	and.w	r3, r3, #1
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d009      	beq.n	800cb68 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	08db      	lsrs	r3, r3, #3
 800cb58:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d003      	beq.n	800cb68 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800cb60:	68b9      	ldr	r1, [r7, #8]
 800cb62:	68f8      	ldr	r0, [r7, #12]
 800cb64:	f000 f80a 	bl	800cb7c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800cb70:	2300      	movs	r3, #0
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3720      	adds	r7, #32
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop

0800cb7c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cb92:	2b28      	cmp	r3, #40	; 0x28
 800cb94:	d16a      	bne.n	800cc6c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	699b      	ldr	r3, [r3, #24]
 800cb9c:	0c1b      	lsrs	r3, r3, #16
 800cb9e:	b2db      	uxtb	r3, r3
 800cba0:	f003 0301 	and.w	r3, r3, #1
 800cba4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	699b      	ldr	r3, [r3, #24]
 800cbac:	0c1b      	lsrs	r3, r3, #16
 800cbae:	b29b      	uxth	r3, r3
 800cbb0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800cbb4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	689b      	ldr	r3, [r3, #8]
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cbc2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	68db      	ldr	r3, [r3, #12]
 800cbca:	b29b      	uxth	r3, r3
 800cbcc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800cbd0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	68db      	ldr	r3, [r3, #12]
 800cbd6:	2b02      	cmp	r3, #2
 800cbd8:	d138      	bne.n	800cc4c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800cbda:	897b      	ldrh	r3, [r7, #10]
 800cbdc:	09db      	lsrs	r3, r3, #7
 800cbde:	b29a      	uxth	r2, r3
 800cbe0:	89bb      	ldrh	r3, [r7, #12]
 800cbe2:	4053      	eors	r3, r2
 800cbe4:	b29b      	uxth	r3, r3
 800cbe6:	f003 0306 	and.w	r3, r3, #6
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d11c      	bne.n	800cc28 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800cbee:	897b      	ldrh	r3, [r7, #10]
 800cbf0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cbf6:	1c5a      	adds	r2, r3, #1
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc00:	2b02      	cmp	r3, #2
 800cc02:	d13b      	bne.n	800cc7c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2200      	movs	r2, #0
 800cc08:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2208      	movs	r2, #8
 800cc10:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2200      	movs	r2, #0
 800cc16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cc1a:	89ba      	ldrh	r2, [r7, #12]
 800cc1c:	7bfb      	ldrb	r3, [r7, #15]
 800cc1e:	4619      	mov	r1, r3
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f7ff f91e 	bl	800be62 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800cc26:	e029      	b.n	800cc7c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800cc28:	893b      	ldrh	r3, [r7, #8]
 800cc2a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800cc2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f001 f81d 	bl	800dc70 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cc3e:	89ba      	ldrh	r2, [r7, #12]
 800cc40:	7bfb      	ldrb	r3, [r7, #15]
 800cc42:	4619      	mov	r1, r3
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f7ff f90c 	bl	800be62 <HAL_I2C_AddrCallback>
}
 800cc4a:	e017      	b.n	800cc7c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800cc4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f001 f80d 	bl	800dc70 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cc5e:	89ba      	ldrh	r2, [r7, #12]
 800cc60:	7bfb      	ldrb	r3, [r7, #15]
 800cc62:	4619      	mov	r1, r3
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f7ff f8fc 	bl	800be62 <HAL_I2C_AddrCallback>
}
 800cc6a:	e007      	b.n	800cc7c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	2208      	movs	r2, #8
 800cc72:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2200      	movs	r2, #0
 800cc78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800cc7c:	bf00      	nop
 800cc7e:	3710      	adds	r7, #16
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc9a:	b2db      	uxtb	r3, r3
 800cc9c:	2b21      	cmp	r3, #33	; 0x21
 800cc9e:	d115      	bne.n	800cccc <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2220      	movs	r2, #32
 800cca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2211      	movs	r2, #17
 800ccac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ccb4:	2101      	movs	r1, #1
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f000 ffda 	bl	800dc70 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f7ff f8a4 	bl	800be12 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ccca:	e014      	b.n	800ccf6 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2220      	movs	r2, #32
 800ccd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2212      	movs	r2, #18
 800ccd8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800cce0:	2102      	movs	r1, #2
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f000 ffc4 	bl	800dc70 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2200      	movs	r2, #0
 800ccec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f7ff f898 	bl	800be26 <HAL_I2C_MasterRxCpltCallback>
}
 800ccf6:	bf00      	nop
 800ccf8:	3708      	adds	r7, #8
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}

0800ccfe <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800ccfe:	b580      	push	{r7, lr}
 800cd00:	b084      	sub	sp, #16
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2200      	movs	r2, #0
 800cd12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	0b9b      	lsrs	r3, r3, #14
 800cd1a:	f003 0301 	and.w	r3, r3, #1
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d008      	beq.n	800cd34 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	681a      	ldr	r2, [r3, #0]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cd30:	601a      	str	r2, [r3, #0]
 800cd32:	e00d      	b.n	800cd50 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	0bdb      	lsrs	r3, r3, #15
 800cd38:	f003 0301 	and.w	r3, r3, #1
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d007      	beq.n	800cd50 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	681a      	ldr	r2, [r3, #0]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cd4e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	2b29      	cmp	r3, #41	; 0x29
 800cd5a:	d112      	bne.n	800cd82 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2228      	movs	r2, #40	; 0x28
 800cd60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2221      	movs	r2, #33	; 0x21
 800cd68:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cd6a:	2101      	movs	r1, #1
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f000 ff7f 	bl	800dc70 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2200      	movs	r2, #0
 800cd76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f7ff f85d 	bl	800be3a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cd80:	e017      	b.n	800cdb2 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd88:	b2db      	uxtb	r3, r3
 800cd8a:	2b2a      	cmp	r3, #42	; 0x2a
 800cd8c:	d111      	bne.n	800cdb2 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2228      	movs	r2, #40	; 0x28
 800cd92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2222      	movs	r2, #34	; 0x22
 800cd9a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800cd9c:	2102      	movs	r1, #2
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f000 ff66 	bl	800dc70 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2200      	movs	r2, #0
 800cda8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f7ff f84e 	bl	800be4e <HAL_I2C_SlaveRxCpltCallback>
}
 800cdb2:	bf00      	nop
 800cdb4:	3710      	adds	r7, #16
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
	...

0800cdbc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b086      	sub	sp, #24
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	2220      	movs	r2, #32
 800cdd0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cdd8:	b2db      	uxtb	r3, r3
 800cdda:	2b21      	cmp	r3, #33	; 0x21
 800cddc:	d107      	bne.n	800cdee <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cdde:	2101      	movs	r1, #1
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f000 ff45 	bl	800dc70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2211      	movs	r2, #17
 800cdea:	631a      	str	r2, [r3, #48]	; 0x30
 800cdec:	e00c      	b.n	800ce08 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	2b22      	cmp	r3, #34	; 0x22
 800cdf8:	d106      	bne.n	800ce08 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800cdfa:	2102      	movs	r1, #2
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f000 ff37 	bl	800dc70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2212      	movs	r2, #18
 800ce06:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	6859      	ldr	r1, [r3, #4]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681a      	ldr	r2, [r3, #0]
 800ce12:	4b4d      	ldr	r3, [pc, #308]	; (800cf48 <I2C_ITMasterCplt+0x18c>)
 800ce14:	400b      	ands	r3, r1
 800ce16:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	4a4a      	ldr	r2, [pc, #296]	; (800cf4c <I2C_ITMasterCplt+0x190>)
 800ce22:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	091b      	lsrs	r3, r3, #4
 800ce28:	f003 0301 	and.w	r3, r3, #1
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d009      	beq.n	800ce44 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	2210      	movs	r2, #16
 800ce36:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce3c:	f043 0204 	orr.w	r2, r3, #4
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce4a:	b2db      	uxtb	r3, r3
 800ce4c:	2b60      	cmp	r3, #96	; 0x60
 800ce4e:	d10b      	bne.n	800ce68 <I2C_ITMasterCplt+0xac>
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	089b      	lsrs	r3, r3, #2
 800ce54:	f003 0301 	and.w	r3, r3, #1
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d005      	beq.n	800ce68 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce62:	b2db      	uxtb	r3, r3
 800ce64:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800ce66:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f000 fc38 	bl	800d6de <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce72:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce7a:	b2db      	uxtb	r3, r3
 800ce7c:	2b60      	cmp	r3, #96	; 0x60
 800ce7e:	d002      	beq.n	800ce86 <I2C_ITMasterCplt+0xca>
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d006      	beq.n	800ce94 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f000 fb0f 	bl	800d4b0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ce92:	e054      	b.n	800cf3e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce9a:	b2db      	uxtb	r3, r3
 800ce9c:	2b21      	cmp	r3, #33	; 0x21
 800ce9e:	d124      	bne.n	800ceea <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2220      	movs	r2, #32
 800cea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ceb4:	b2db      	uxtb	r3, r3
 800ceb6:	2b40      	cmp	r3, #64	; 0x40
 800ceb8:	d10b      	bne.n	800ced2 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2200      	movs	r2, #0
 800cebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2200      	movs	r2, #0
 800cec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f7fe ffe1 	bl	800be92 <HAL_I2C_MemTxCpltCallback>
}
 800ced0:	e035      	b.n	800cf3e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2200      	movs	r2, #0
 800ced6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2200      	movs	r2, #0
 800cede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f7fe ff95 	bl	800be12 <HAL_I2C_MasterTxCpltCallback>
}
 800cee8:	e029      	b.n	800cf3e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cef0:	b2db      	uxtb	r3, r3
 800cef2:	2b22      	cmp	r3, #34	; 0x22
 800cef4:	d123      	bne.n	800cf3e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2220      	movs	r2, #32
 800cefa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2200      	movs	r2, #0
 800cf02:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cf0a:	b2db      	uxtb	r3, r3
 800cf0c:	2b40      	cmp	r3, #64	; 0x40
 800cf0e:	d10b      	bne.n	800cf28 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2200      	movs	r2, #0
 800cf14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f7fe ffc0 	bl	800bea6 <HAL_I2C_MemRxCpltCallback>
}
 800cf26:	e00a      	b.n	800cf3e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2200      	movs	r2, #0
 800cf34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f7fe ff74 	bl	800be26 <HAL_I2C_MasterRxCpltCallback>
}
 800cf3e:	bf00      	nop
 800cf40:	3718      	adds	r7, #24
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	fe00e800 	.word	0xfe00e800
 800cf4c:	ffff0000 	.word	0xffff0000

0800cf50 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b086      	sub	sp, #24
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf6a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf72:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	2220      	movs	r2, #32
 800cf7a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cf7c:	7afb      	ldrb	r3, [r7, #11]
 800cf7e:	2b21      	cmp	r3, #33	; 0x21
 800cf80:	d002      	beq.n	800cf88 <I2C_ITSlaveCplt+0x38>
 800cf82:	7afb      	ldrb	r3, [r7, #11]
 800cf84:	2b29      	cmp	r3, #41	; 0x29
 800cf86:	d108      	bne.n	800cf9a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800cf88:	f248 0101 	movw	r1, #32769	; 0x8001
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f000 fe6f 	bl	800dc70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2221      	movs	r2, #33	; 0x21
 800cf96:	631a      	str	r2, [r3, #48]	; 0x30
 800cf98:	e019      	b.n	800cfce <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cf9a:	7afb      	ldrb	r3, [r7, #11]
 800cf9c:	2b22      	cmp	r3, #34	; 0x22
 800cf9e:	d002      	beq.n	800cfa6 <I2C_ITSlaveCplt+0x56>
 800cfa0:	7afb      	ldrb	r3, [r7, #11]
 800cfa2:	2b2a      	cmp	r3, #42	; 0x2a
 800cfa4:	d108      	bne.n	800cfb8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800cfa6:	f248 0102 	movw	r1, #32770	; 0x8002
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 fe60 	bl	800dc70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2222      	movs	r2, #34	; 0x22
 800cfb4:	631a      	str	r2, [r3, #48]	; 0x30
 800cfb6:	e00a      	b.n	800cfce <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800cfb8:	7afb      	ldrb	r3, [r7, #11]
 800cfba:	2b28      	cmp	r3, #40	; 0x28
 800cfbc:	d107      	bne.n	800cfce <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800cfbe:	f248 0103 	movw	r1, #32771	; 0x8003
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f000 fe54 	bl	800dc70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	685a      	ldr	r2, [r3, #4]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cfdc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	6859      	ldr	r1, [r3, #4]
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	4b80      	ldr	r3, [pc, #512]	; (800d1ec <I2C_ITSlaveCplt+0x29c>)
 800cfea:	400b      	ands	r3, r1
 800cfec:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f000 fb75 	bl	800d6de <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	0b9b      	lsrs	r3, r3, #14
 800cff8:	f003 0301 	and.w	r3, r3, #1
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d07a      	beq.n	800d0f6 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	681a      	ldr	r2, [r3, #0]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d00e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d014:	2b00      	cmp	r3, #0
 800d016:	f000 8112 	beq.w	800d23e <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a73      	ldr	r2, [pc, #460]	; (800d1f0 <I2C_ITSlaveCplt+0x2a0>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d059      	beq.n	800d0da <I2C_ITSlaveCplt+0x18a>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4a71      	ldr	r2, [pc, #452]	; (800d1f4 <I2C_ITSlaveCplt+0x2a4>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d053      	beq.n	800d0da <I2C_ITSlaveCplt+0x18a>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	4a6f      	ldr	r2, [pc, #444]	; (800d1f8 <I2C_ITSlaveCplt+0x2a8>)
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d04d      	beq.n	800d0da <I2C_ITSlaveCplt+0x18a>
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	4a6d      	ldr	r2, [pc, #436]	; (800d1fc <I2C_ITSlaveCplt+0x2ac>)
 800d046:	4293      	cmp	r3, r2
 800d048:	d047      	beq.n	800d0da <I2C_ITSlaveCplt+0x18a>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4a6b      	ldr	r2, [pc, #428]	; (800d200 <I2C_ITSlaveCplt+0x2b0>)
 800d052:	4293      	cmp	r3, r2
 800d054:	d041      	beq.n	800d0da <I2C_ITSlaveCplt+0x18a>
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	4a69      	ldr	r2, [pc, #420]	; (800d204 <I2C_ITSlaveCplt+0x2b4>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d03b      	beq.n	800d0da <I2C_ITSlaveCplt+0x18a>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4a67      	ldr	r2, [pc, #412]	; (800d208 <I2C_ITSlaveCplt+0x2b8>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d035      	beq.n	800d0da <I2C_ITSlaveCplt+0x18a>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4a65      	ldr	r2, [pc, #404]	; (800d20c <I2C_ITSlaveCplt+0x2bc>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d02f      	beq.n	800d0da <I2C_ITSlaveCplt+0x18a>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a63      	ldr	r2, [pc, #396]	; (800d210 <I2C_ITSlaveCplt+0x2c0>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d029      	beq.n	800d0da <I2C_ITSlaveCplt+0x18a>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	4a61      	ldr	r2, [pc, #388]	; (800d214 <I2C_ITSlaveCplt+0x2c4>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d023      	beq.n	800d0da <I2C_ITSlaveCplt+0x18a>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	4a5f      	ldr	r2, [pc, #380]	; (800d218 <I2C_ITSlaveCplt+0x2c8>)
 800d09a:	4293      	cmp	r3, r2
 800d09c:	d01d      	beq.n	800d0da <I2C_ITSlaveCplt+0x18a>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4a5d      	ldr	r2, [pc, #372]	; (800d21c <I2C_ITSlaveCplt+0x2cc>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d017      	beq.n	800d0da <I2C_ITSlaveCplt+0x18a>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4a5b      	ldr	r2, [pc, #364]	; (800d220 <I2C_ITSlaveCplt+0x2d0>)
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d011      	beq.n	800d0da <I2C_ITSlaveCplt+0x18a>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	4a59      	ldr	r2, [pc, #356]	; (800d224 <I2C_ITSlaveCplt+0x2d4>)
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d00b      	beq.n	800d0da <I2C_ITSlaveCplt+0x18a>
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4a57      	ldr	r2, [pc, #348]	; (800d228 <I2C_ITSlaveCplt+0x2d8>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d005      	beq.n	800d0da <I2C_ITSlaveCplt+0x18a>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	4a55      	ldr	r2, [pc, #340]	; (800d22c <I2C_ITSlaveCplt+0x2dc>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d105      	bne.n	800d0e6 <I2C_ITSlaveCplt+0x196>
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	685b      	ldr	r3, [r3, #4]
 800d0e2:	b29b      	uxth	r3, r3
 800d0e4:	e004      	b.n	800d0f0 <I2C_ITSlaveCplt+0x1a0>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	685b      	ldr	r3, [r3, #4]
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	687a      	ldr	r2, [r7, #4]
 800d0f2:	8553      	strh	r3, [r2, #42]	; 0x2a
 800d0f4:	e0a3      	b.n	800d23e <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	0bdb      	lsrs	r3, r3, #15
 800d0fa:	f003 0301 	and.w	r3, r3, #1
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	f000 809d 	beq.w	800d23e <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d112:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d118:	2b00      	cmp	r3, #0
 800d11a:	f000 8090 	beq.w	800d23e <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4a32      	ldr	r2, [pc, #200]	; (800d1f0 <I2C_ITSlaveCplt+0x2a0>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d059      	beq.n	800d1de <I2C_ITSlaveCplt+0x28e>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4a30      	ldr	r2, [pc, #192]	; (800d1f4 <I2C_ITSlaveCplt+0x2a4>)
 800d132:	4293      	cmp	r3, r2
 800d134:	d053      	beq.n	800d1de <I2C_ITSlaveCplt+0x28e>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	4a2e      	ldr	r2, [pc, #184]	; (800d1f8 <I2C_ITSlaveCplt+0x2a8>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d04d      	beq.n	800d1de <I2C_ITSlaveCplt+0x28e>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4a2c      	ldr	r2, [pc, #176]	; (800d1fc <I2C_ITSlaveCplt+0x2ac>)
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d047      	beq.n	800d1de <I2C_ITSlaveCplt+0x28e>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	4a2a      	ldr	r2, [pc, #168]	; (800d200 <I2C_ITSlaveCplt+0x2b0>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d041      	beq.n	800d1de <I2C_ITSlaveCplt+0x28e>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4a28      	ldr	r2, [pc, #160]	; (800d204 <I2C_ITSlaveCplt+0x2b4>)
 800d162:	4293      	cmp	r3, r2
 800d164:	d03b      	beq.n	800d1de <I2C_ITSlaveCplt+0x28e>
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4a26      	ldr	r2, [pc, #152]	; (800d208 <I2C_ITSlaveCplt+0x2b8>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d035      	beq.n	800d1de <I2C_ITSlaveCplt+0x28e>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4a24      	ldr	r2, [pc, #144]	; (800d20c <I2C_ITSlaveCplt+0x2bc>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d02f      	beq.n	800d1de <I2C_ITSlaveCplt+0x28e>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	4a22      	ldr	r2, [pc, #136]	; (800d210 <I2C_ITSlaveCplt+0x2c0>)
 800d186:	4293      	cmp	r3, r2
 800d188:	d029      	beq.n	800d1de <I2C_ITSlaveCplt+0x28e>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4a20      	ldr	r2, [pc, #128]	; (800d214 <I2C_ITSlaveCplt+0x2c4>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d023      	beq.n	800d1de <I2C_ITSlaveCplt+0x28e>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	4a1e      	ldr	r2, [pc, #120]	; (800d218 <I2C_ITSlaveCplt+0x2c8>)
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d01d      	beq.n	800d1de <I2C_ITSlaveCplt+0x28e>
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	4a1c      	ldr	r2, [pc, #112]	; (800d21c <I2C_ITSlaveCplt+0x2cc>)
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d017      	beq.n	800d1de <I2C_ITSlaveCplt+0x28e>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4a1a      	ldr	r2, [pc, #104]	; (800d220 <I2C_ITSlaveCplt+0x2d0>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d011      	beq.n	800d1de <I2C_ITSlaveCplt+0x28e>
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4a18      	ldr	r2, [pc, #96]	; (800d224 <I2C_ITSlaveCplt+0x2d4>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d00b      	beq.n	800d1de <I2C_ITSlaveCplt+0x28e>
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	4a16      	ldr	r2, [pc, #88]	; (800d228 <I2C_ITSlaveCplt+0x2d8>)
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d005      	beq.n	800d1de <I2C_ITSlaveCplt+0x28e>
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	4a14      	ldr	r2, [pc, #80]	; (800d22c <I2C_ITSlaveCplt+0x2dc>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d128      	bne.n	800d230 <I2C_ITSlaveCplt+0x2e0>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	e027      	b.n	800d23a <I2C_ITSlaveCplt+0x2ea>
 800d1ea:	bf00      	nop
 800d1ec:	fe00e800 	.word	0xfe00e800
 800d1f0:	40020010 	.word	0x40020010
 800d1f4:	40020028 	.word	0x40020028
 800d1f8:	40020040 	.word	0x40020040
 800d1fc:	40020058 	.word	0x40020058
 800d200:	40020070 	.word	0x40020070
 800d204:	40020088 	.word	0x40020088
 800d208:	400200a0 	.word	0x400200a0
 800d20c:	400200b8 	.word	0x400200b8
 800d210:	40020410 	.word	0x40020410
 800d214:	40020428 	.word	0x40020428
 800d218:	40020440 	.word	0x40020440
 800d21c:	40020458 	.word	0x40020458
 800d220:	40020470 	.word	0x40020470
 800d224:	40020488 	.word	0x40020488
 800d228:	400204a0 	.word	0x400204a0
 800d22c:	400204b8 	.word	0x400204b8
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	685b      	ldr	r3, [r3, #4]
 800d238:	b29b      	uxth	r3, r3
 800d23a:	687a      	ldr	r2, [r7, #4]
 800d23c:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	089b      	lsrs	r3, r3, #2
 800d242:	f003 0301 	and.w	r3, r3, #1
 800d246:	2b00      	cmp	r3, #0
 800d248:	d020      	beq.n	800d28c <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	f023 0304 	bic.w	r3, r3, #4
 800d250:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d25c:	b2d2      	uxtb	r2, r2
 800d25e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d264:	1c5a      	adds	r2, r3, #1
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d00c      	beq.n	800d28c <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d276:	3b01      	subs	r3, #1
 800d278:	b29a      	uxth	r2, r3
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d282:	b29b      	uxth	r3, r3
 800d284:	3b01      	subs	r3, #1
 800d286:	b29a      	uxth	r2, r3
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d290:	b29b      	uxth	r3, r3
 800d292:	2b00      	cmp	r3, #0
 800d294:	d005      	beq.n	800d2a2 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d29a:	f043 0204 	orr.w	r2, r3, #4
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	091b      	lsrs	r3, r3, #4
 800d2a6:	f003 0301 	and.w	r3, r3, #1
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d04a      	beq.n	800d344 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	091b      	lsrs	r3, r3, #4
 800d2b2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d044      	beq.n	800d344 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2be:	b29b      	uxth	r3, r3
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d128      	bne.n	800d316 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d2ca:	b2db      	uxtb	r3, r3
 800d2cc:	2b28      	cmp	r3, #40	; 0x28
 800d2ce:	d108      	bne.n	800d2e2 <I2C_ITSlaveCplt+0x392>
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d2d6:	d104      	bne.n	800d2e2 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800d2d8:	6979      	ldr	r1, [r7, #20]
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f000 f892 	bl	800d404 <I2C_ITListenCplt>
 800d2e0:	e030      	b.n	800d344 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d2e8:	b2db      	uxtb	r3, r3
 800d2ea:	2b29      	cmp	r3, #41	; 0x29
 800d2ec:	d10e      	bne.n	800d30c <I2C_ITSlaveCplt+0x3bc>
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d2f4:	d00a      	beq.n	800d30c <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	2210      	movs	r2, #16
 800d2fc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f000 f9ed 	bl	800d6de <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f7ff fcfa 	bl	800ccfe <I2C_ITSlaveSeqCplt>
 800d30a:	e01b      	b.n	800d344 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	2210      	movs	r2, #16
 800d312:	61da      	str	r2, [r3, #28]
 800d314:	e016      	b.n	800d344 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	2210      	movs	r2, #16
 800d31c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d322:	f043 0204 	orr.w	r2, r3, #4
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d003      	beq.n	800d338 <I2C_ITSlaveCplt+0x3e8>
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d336:	d105      	bne.n	800d344 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d33c:	4619      	mov	r1, r3
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f000 f8b6 	bl	800d4b0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2200      	movs	r2, #0
 800d348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2200      	movs	r2, #0
 800d350:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d356:	2b00      	cmp	r3, #0
 800d358:	d010      	beq.n	800d37c <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d35e:	4619      	mov	r1, r3
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f000 f8a5 	bl	800d4b0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d36c:	b2db      	uxtb	r3, r3
 800d36e:	2b28      	cmp	r3, #40	; 0x28
 800d370:	d141      	bne.n	800d3f6 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800d372:	6979      	ldr	r1, [r7, #20]
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f000 f845 	bl	800d404 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d37a:	e03c      	b.n	800d3f6 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d380:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d384:	d014      	beq.n	800d3b0 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f7ff fcb9 	bl	800ccfe <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	4a1c      	ldr	r2, [pc, #112]	; (800d400 <I2C_ITSlaveCplt+0x4b0>)
 800d390:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2220      	movs	r2, #32
 800d396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2200      	movs	r2, #0
 800d39e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f7fe fd68 	bl	800be7e <HAL_I2C_ListenCpltCallback>
}
 800d3ae:	e022      	b.n	800d3f6 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d3b6:	b2db      	uxtb	r3, r3
 800d3b8:	2b22      	cmp	r3, #34	; 0x22
 800d3ba:	d10e      	bne.n	800d3da <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2220      	movs	r2, #32
 800d3c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f7fe fd3b 	bl	800be4e <HAL_I2C_SlaveRxCpltCallback>
}
 800d3d8:	e00d      	b.n	800d3f6 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2220      	movs	r2, #32
 800d3de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f7fe fd22 	bl	800be3a <HAL_I2C_SlaveTxCpltCallback>
}
 800d3f6:	bf00      	nop
 800d3f8:	3718      	adds	r7, #24
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}
 800d3fe:	bf00      	nop
 800d400:	ffff0000 	.word	0xffff0000

0800d404 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b082      	sub	sp, #8
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	4a26      	ldr	r2, [pc, #152]	; (800d4ac <I2C_ITListenCplt+0xa8>)
 800d412:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2200      	movs	r2, #0
 800d418:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2220      	movs	r2, #32
 800d41e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2200      	movs	r2, #0
 800d426:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2200      	movs	r2, #0
 800d42e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	089b      	lsrs	r3, r3, #2
 800d434:	f003 0301 	and.w	r3, r3, #1
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d022      	beq.n	800d482 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d446:	b2d2      	uxtb	r2, r2
 800d448:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d44e:	1c5a      	adds	r2, r3, #1
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d012      	beq.n	800d482 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d460:	3b01      	subs	r3, #1
 800d462:	b29a      	uxth	r2, r3
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d46c:	b29b      	uxth	r3, r3
 800d46e:	3b01      	subs	r3, #1
 800d470:	b29a      	uxth	r2, r3
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d47a:	f043 0204 	orr.w	r2, r3, #4
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d482:	f248 0103 	movw	r1, #32771	; 0x8003
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 fbf2 	bl	800dc70 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	2210      	movs	r2, #16
 800d492:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2200      	movs	r2, #0
 800d498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f7fe fcee 	bl	800be7e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800d4a2:	bf00      	nop
 800d4a4:	3708      	adds	r7, #8
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}
 800d4aa:	bf00      	nop
 800d4ac:	ffff0000 	.word	0xffff0000

0800d4b0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b084      	sub	sp, #16
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d4c0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	4a6d      	ldr	r2, [pc, #436]	; (800d684 <I2C_ITError+0x1d4>)
 800d4ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	431a      	orrs	r2, r3
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800d4e2:	7bfb      	ldrb	r3, [r7, #15]
 800d4e4:	2b28      	cmp	r3, #40	; 0x28
 800d4e6:	d005      	beq.n	800d4f4 <I2C_ITError+0x44>
 800d4e8:	7bfb      	ldrb	r3, [r7, #15]
 800d4ea:	2b29      	cmp	r3, #41	; 0x29
 800d4ec:	d002      	beq.n	800d4f4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800d4ee:	7bfb      	ldrb	r3, [r7, #15]
 800d4f0:	2b2a      	cmp	r3, #42	; 0x2a
 800d4f2:	d10b      	bne.n	800d50c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d4f4:	2103      	movs	r1, #3
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f000 fbba 	bl	800dc70 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2228      	movs	r2, #40	; 0x28
 800d500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	4a60      	ldr	r2, [pc, #384]	; (800d688 <I2C_ITError+0x1d8>)
 800d508:	635a      	str	r2, [r3, #52]	; 0x34
 800d50a:	e030      	b.n	800d56e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d50c:	f248 0103 	movw	r1, #32771	; 0x8003
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f000 fbad 	bl	800dc70 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f000 f8e1 	bl	800d6de <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d522:	b2db      	uxtb	r3, r3
 800d524:	2b60      	cmp	r3, #96	; 0x60
 800d526:	d01f      	beq.n	800d568 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2220      	movs	r2, #32
 800d52c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	699b      	ldr	r3, [r3, #24]
 800d536:	f003 0320 	and.w	r3, r3, #32
 800d53a:	2b20      	cmp	r3, #32
 800d53c:	d114      	bne.n	800d568 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	699b      	ldr	r3, [r3, #24]
 800d544:	f003 0310 	and.w	r3, r3, #16
 800d548:	2b10      	cmp	r3, #16
 800d54a:	d109      	bne.n	800d560 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	2210      	movs	r2, #16
 800d552:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d558:	f043 0204 	orr.w	r2, r3, #4
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	2220      	movs	r2, #32
 800d566:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2200      	movs	r2, #0
 800d56c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d572:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d039      	beq.n	800d5f0 <I2C_ITError+0x140>
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	2b11      	cmp	r3, #17
 800d580:	d002      	beq.n	800d588 <I2C_ITError+0xd8>
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	2b21      	cmp	r3, #33	; 0x21
 800d586:	d133      	bne.n	800d5f0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d592:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d596:	d107      	bne.n	800d5a8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	681a      	ldr	r2, [r3, #0]
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d5a6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f7fd f857 	bl	800a660 <HAL_DMA_GetState>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	d017      	beq.n	800d5e8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5bc:	4a33      	ldr	r2, [pc, #204]	; (800d68c <I2C_ITError+0x1dc>)
 800d5be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f7fb fed7 	bl	8009380 <HAL_DMA_Abort_IT>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d04d      	beq.n	800d674 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d5e2:	4610      	mov	r0, r2
 800d5e4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d5e6:	e045      	b.n	800d674 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f000 f851 	bl	800d690 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d5ee:	e041      	b.n	800d674 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d039      	beq.n	800d66c <I2C_ITError+0x1bc>
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	2b12      	cmp	r3, #18
 800d5fc:	d002      	beq.n	800d604 <I2C_ITError+0x154>
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	2b22      	cmp	r3, #34	; 0x22
 800d602:	d133      	bne.n	800d66c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d60e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d612:	d107      	bne.n	800d624 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d622:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d628:	4618      	mov	r0, r3
 800d62a:	f7fd f819 	bl	800a660 <HAL_DMA_GetState>
 800d62e:	4603      	mov	r3, r0
 800d630:	2b01      	cmp	r3, #1
 800d632:	d017      	beq.n	800d664 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d638:	4a14      	ldr	r2, [pc, #80]	; (800d68c <I2C_ITError+0x1dc>)
 800d63a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2200      	movs	r2, #0
 800d640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d648:	4618      	mov	r0, r3
 800d64a:	f7fb fe99 	bl	8009380 <HAL_DMA_Abort_IT>
 800d64e:	4603      	mov	r3, r0
 800d650:	2b00      	cmp	r3, #0
 800d652:	d011      	beq.n	800d678 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d65a:	687a      	ldr	r2, [r7, #4]
 800d65c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d65e:	4610      	mov	r0, r2
 800d660:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d662:	e009      	b.n	800d678 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f000 f813 	bl	800d690 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d66a:	e005      	b.n	800d678 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f000 f80f 	bl	800d690 <I2C_TreatErrorCallback>
  }
}
 800d672:	e002      	b.n	800d67a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d674:	bf00      	nop
 800d676:	e000      	b.n	800d67a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d678:	bf00      	nop
}
 800d67a:	bf00      	nop
 800d67c:	3710      	adds	r7, #16
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	ffff0000 	.word	0xffff0000
 800d688:	0800c167 	.word	0x0800c167
 800d68c:	0800dac9 	.word	0x0800dac9

0800d690 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d69e:	b2db      	uxtb	r3, r3
 800d6a0:	2b60      	cmp	r3, #96	; 0x60
 800d6a2:	d10e      	bne.n	800d6c2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2220      	movs	r2, #32
 800d6a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f7fe fc07 	bl	800bece <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d6c0:	e009      	b.n	800d6d6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f7fe fbf2 	bl	800beba <HAL_I2C_ErrorCallback>
}
 800d6d6:	bf00      	nop
 800d6d8:	3708      	adds	r7, #8
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}

0800d6de <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d6de:	b480      	push	{r7}
 800d6e0:	b083      	sub	sp, #12
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	699b      	ldr	r3, [r3, #24]
 800d6ec:	f003 0302 	and.w	r3, r3, #2
 800d6f0:	2b02      	cmp	r3, #2
 800d6f2:	d103      	bne.n	800d6fc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	699b      	ldr	r3, [r3, #24]
 800d702:	f003 0301 	and.w	r3, r3, #1
 800d706:	2b01      	cmp	r3, #1
 800d708:	d007      	beq.n	800d71a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	699a      	ldr	r2, [r3, #24]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f042 0201 	orr.w	r2, r2, #1
 800d718:	619a      	str	r2, [r3, #24]
  }
}
 800d71a:	bf00      	nop
 800d71c:	370c      	adds	r7, #12
 800d71e:	46bd      	mov	sp, r7
 800d720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d724:	4770      	bx	lr

0800d726 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d726:	b580      	push	{r7, lr}
 800d728:	b084      	sub	sp, #16
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d732:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	681a      	ldr	r2, [r3, #0]
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d742:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d748:	b29b      	uxth	r3, r3
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d104      	bne.n	800d758 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d74e:	2120      	movs	r1, #32
 800d750:	68f8      	ldr	r0, [r7, #12]
 800d752:	f000 fa09 	bl	800db68 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d756:	e02d      	b.n	800d7b4 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d75c:	68fa      	ldr	r2, [r7, #12]
 800d75e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d760:	441a      	add	r2, r3
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d76a:	b29b      	uxth	r3, r3
 800d76c:	2bff      	cmp	r3, #255	; 0xff
 800d76e:	d903      	bls.n	800d778 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	22ff      	movs	r2, #255	; 0xff
 800d774:	851a      	strh	r2, [r3, #40]	; 0x28
 800d776:	e004      	b.n	800d782 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d77c:	b29a      	uxth	r2, r3
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d78a:	4619      	mov	r1, r3
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	3328      	adds	r3, #40	; 0x28
 800d792:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d798:	f7fb f86a 	bl	8008870 <HAL_DMA_Start_IT>
 800d79c:	4603      	mov	r3, r0
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d004      	beq.n	800d7ac <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d7a2:	2110      	movs	r1, #16
 800d7a4:	68f8      	ldr	r0, [r7, #12]
 800d7a6:	f7ff fe83 	bl	800d4b0 <I2C_ITError>
}
 800d7aa:	e003      	b.n	800d7b4 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d7ac:	2140      	movs	r1, #64	; 0x40
 800d7ae:	68f8      	ldr	r0, [r7, #12]
 800d7b0:	f000 f9da 	bl	800db68 <I2C_Enable_IRQ>
}
 800d7b4:	bf00      	nop
 800d7b6:	3710      	adds	r7, #16
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b084      	sub	sp, #16
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7c8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	681a      	ldr	r2, [r3, #0]
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d7d8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7de:	b29b      	uxth	r3, r3
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d104      	bne.n	800d7ee <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d7e4:	2120      	movs	r1, #32
 800d7e6:	68f8      	ldr	r0, [r7, #12]
 800d7e8:	f000 f9be 	bl	800db68 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d7ec:	e02d      	b.n	800d84a <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f2:	68fa      	ldr	r2, [r7, #12]
 800d7f4:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d7f6:	441a      	add	r2, r3
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d800:	b29b      	uxth	r3, r3
 800d802:	2bff      	cmp	r3, #255	; 0xff
 800d804:	d903      	bls.n	800d80e <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	22ff      	movs	r2, #255	; 0xff
 800d80a:	851a      	strh	r2, [r3, #40]	; 0x28
 800d80c:	e004      	b.n	800d818 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d812:	b29a      	uxth	r2, r3
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	3324      	adds	r3, #36	; 0x24
 800d822:	4619      	mov	r1, r3
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d828:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d82e:	f7fb f81f 	bl	8008870 <HAL_DMA_Start_IT>
 800d832:	4603      	mov	r3, r0
 800d834:	2b00      	cmp	r3, #0
 800d836:	d004      	beq.n	800d842 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d838:	2110      	movs	r1, #16
 800d83a:	68f8      	ldr	r0, [r7, #12]
 800d83c:	f7ff fe38 	bl	800d4b0 <I2C_ITError>
}
 800d840:	e003      	b.n	800d84a <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d842:	2140      	movs	r1, #64	; 0x40
 800d844:	68f8      	ldr	r0, [r7, #12]
 800d846:	f000 f98f 	bl	800db68 <I2C_Enable_IRQ>
}
 800d84a:	bf00      	nop
 800d84c:	3710      	adds	r7, #16
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
	...

0800d854 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b084      	sub	sp, #16
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800d85c:	2300      	movs	r3, #0
 800d85e:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d864:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d076      	beq.n	800d95c <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4a71      	ldr	r2, [pc, #452]	; (800da3c <I2C_DMAError+0x1e8>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d059      	beq.n	800d92e <I2C_DMAError+0xda>
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4a6f      	ldr	r2, [pc, #444]	; (800da40 <I2C_DMAError+0x1ec>)
 800d882:	4293      	cmp	r3, r2
 800d884:	d053      	beq.n	800d92e <I2C_DMAError+0xda>
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	4a6d      	ldr	r2, [pc, #436]	; (800da44 <I2C_DMAError+0x1f0>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d04d      	beq.n	800d92e <I2C_DMAError+0xda>
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	4a6b      	ldr	r2, [pc, #428]	; (800da48 <I2C_DMAError+0x1f4>)
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d047      	beq.n	800d92e <I2C_DMAError+0xda>
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	4a69      	ldr	r2, [pc, #420]	; (800da4c <I2C_DMAError+0x1f8>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d041      	beq.n	800d92e <I2C_DMAError+0xda>
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	4a67      	ldr	r2, [pc, #412]	; (800da50 <I2C_DMAError+0x1fc>)
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d03b      	beq.n	800d92e <I2C_DMAError+0xda>
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	4a65      	ldr	r2, [pc, #404]	; (800da54 <I2C_DMAError+0x200>)
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d035      	beq.n	800d92e <I2C_DMAError+0xda>
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4a63      	ldr	r2, [pc, #396]	; (800da58 <I2C_DMAError+0x204>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d02f      	beq.n	800d92e <I2C_DMAError+0xda>
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	4a61      	ldr	r2, [pc, #388]	; (800da5c <I2C_DMAError+0x208>)
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d029      	beq.n	800d92e <I2C_DMAError+0xda>
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	4a5f      	ldr	r2, [pc, #380]	; (800da60 <I2C_DMAError+0x20c>)
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	d023      	beq.n	800d92e <I2C_DMAError+0xda>
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	4a5d      	ldr	r2, [pc, #372]	; (800da64 <I2C_DMAError+0x210>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d01d      	beq.n	800d92e <I2C_DMAError+0xda>
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	4a5b      	ldr	r2, [pc, #364]	; (800da68 <I2C_DMAError+0x214>)
 800d8fa:	4293      	cmp	r3, r2
 800d8fc:	d017      	beq.n	800d92e <I2C_DMAError+0xda>
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4a59      	ldr	r2, [pc, #356]	; (800da6c <I2C_DMAError+0x218>)
 800d906:	4293      	cmp	r3, r2
 800d908:	d011      	beq.n	800d92e <I2C_DMAError+0xda>
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	4a57      	ldr	r2, [pc, #348]	; (800da70 <I2C_DMAError+0x21c>)
 800d912:	4293      	cmp	r3, r2
 800d914:	d00b      	beq.n	800d92e <I2C_DMAError+0xda>
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	4a55      	ldr	r2, [pc, #340]	; (800da74 <I2C_DMAError+0x220>)
 800d91e:	4293      	cmp	r3, r2
 800d920:	d005      	beq.n	800d92e <I2C_DMAError+0xda>
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	4a53      	ldr	r2, [pc, #332]	; (800da78 <I2C_DMAError+0x224>)
 800d92a:	4293      	cmp	r3, r2
 800d92c:	d109      	bne.n	800d942 <I2C_DMAError+0xee>
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	685b      	ldr	r3, [r3, #4]
 800d936:	2b00      	cmp	r3, #0
 800d938:	bf0c      	ite	eq
 800d93a:	2301      	moveq	r3, #1
 800d93c:	2300      	movne	r3, #0
 800d93e:	b2db      	uxtb	r3, r3
 800d940:	e008      	b.n	800d954 <I2C_DMAError+0x100>
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	685b      	ldr	r3, [r3, #4]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	bf0c      	ite	eq
 800d94e:	2301      	moveq	r3, #1
 800d950:	2300      	movne	r3, #0
 800d952:	b2db      	uxtb	r3, r3
 800d954:	2b00      	cmp	r3, #0
 800d956:	d001      	beq.n	800d95c <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800d958:	2301      	movs	r3, #1
 800d95a:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d960:	2b00      	cmp	r3, #0
 800d962:	f000 8098 	beq.w	800da96 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	4a33      	ldr	r2, [pc, #204]	; (800da3c <I2C_DMAError+0x1e8>)
 800d96e:	4293      	cmp	r3, r2
 800d970:	d059      	beq.n	800da26 <I2C_DMAError+0x1d2>
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	4a31      	ldr	r2, [pc, #196]	; (800da40 <I2C_DMAError+0x1ec>)
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d053      	beq.n	800da26 <I2C_DMAError+0x1d2>
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	4a2f      	ldr	r2, [pc, #188]	; (800da44 <I2C_DMAError+0x1f0>)
 800d986:	4293      	cmp	r3, r2
 800d988:	d04d      	beq.n	800da26 <I2C_DMAError+0x1d2>
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4a2d      	ldr	r2, [pc, #180]	; (800da48 <I2C_DMAError+0x1f4>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d047      	beq.n	800da26 <I2C_DMAError+0x1d2>
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	4a2b      	ldr	r2, [pc, #172]	; (800da4c <I2C_DMAError+0x1f8>)
 800d99e:	4293      	cmp	r3, r2
 800d9a0:	d041      	beq.n	800da26 <I2C_DMAError+0x1d2>
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4a29      	ldr	r2, [pc, #164]	; (800da50 <I2C_DMAError+0x1fc>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d03b      	beq.n	800da26 <I2C_DMAError+0x1d2>
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	4a27      	ldr	r2, [pc, #156]	; (800da54 <I2C_DMAError+0x200>)
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	d035      	beq.n	800da26 <I2C_DMAError+0x1d2>
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	4a25      	ldr	r2, [pc, #148]	; (800da58 <I2C_DMAError+0x204>)
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d02f      	beq.n	800da26 <I2C_DMAError+0x1d2>
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4a23      	ldr	r2, [pc, #140]	; (800da5c <I2C_DMAError+0x208>)
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d029      	beq.n	800da26 <I2C_DMAError+0x1d2>
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	4a21      	ldr	r2, [pc, #132]	; (800da60 <I2C_DMAError+0x20c>)
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d023      	beq.n	800da26 <I2C_DMAError+0x1d2>
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	4a1f      	ldr	r2, [pc, #124]	; (800da64 <I2C_DMAError+0x210>)
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d01d      	beq.n	800da26 <I2C_DMAError+0x1d2>
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4a1d      	ldr	r2, [pc, #116]	; (800da68 <I2C_DMAError+0x214>)
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	d017      	beq.n	800da26 <I2C_DMAError+0x1d2>
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	4a1b      	ldr	r2, [pc, #108]	; (800da6c <I2C_DMAError+0x218>)
 800d9fe:	4293      	cmp	r3, r2
 800da00:	d011      	beq.n	800da26 <I2C_DMAError+0x1d2>
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	4a19      	ldr	r2, [pc, #100]	; (800da70 <I2C_DMAError+0x21c>)
 800da0a:	4293      	cmp	r3, r2
 800da0c:	d00b      	beq.n	800da26 <I2C_DMAError+0x1d2>
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4a17      	ldr	r2, [pc, #92]	; (800da74 <I2C_DMAError+0x220>)
 800da16:	4293      	cmp	r3, r2
 800da18:	d005      	beq.n	800da26 <I2C_DMAError+0x1d2>
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	4a15      	ldr	r2, [pc, #84]	; (800da78 <I2C_DMAError+0x224>)
 800da22:	4293      	cmp	r3, r2
 800da24:	d12a      	bne.n	800da7c <I2C_DMAError+0x228>
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	685b      	ldr	r3, [r3, #4]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	bf0c      	ite	eq
 800da32:	2301      	moveq	r3, #1
 800da34:	2300      	movne	r3, #0
 800da36:	b2db      	uxtb	r3, r3
 800da38:	e029      	b.n	800da8e <I2C_DMAError+0x23a>
 800da3a:	bf00      	nop
 800da3c:	40020010 	.word	0x40020010
 800da40:	40020028 	.word	0x40020028
 800da44:	40020040 	.word	0x40020040
 800da48:	40020058 	.word	0x40020058
 800da4c:	40020070 	.word	0x40020070
 800da50:	40020088 	.word	0x40020088
 800da54:	400200a0 	.word	0x400200a0
 800da58:	400200b8 	.word	0x400200b8
 800da5c:	40020410 	.word	0x40020410
 800da60:	40020428 	.word	0x40020428
 800da64:	40020440 	.word	0x40020440
 800da68:	40020458 	.word	0x40020458
 800da6c:	40020470 	.word	0x40020470
 800da70:	40020488 	.word	0x40020488
 800da74:	400204a0 	.word	0x400204a0
 800da78:	400204b8 	.word	0x400204b8
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	685b      	ldr	r3, [r3, #4]
 800da84:	2b00      	cmp	r3, #0
 800da86:	bf0c      	ite	eq
 800da88:	2301      	moveq	r3, #1
 800da8a:	2300      	movne	r3, #0
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d001      	beq.n	800da96 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800da92:	2301      	movs	r3, #1
 800da94:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f7fc fdf0 	bl	800a67c <HAL_DMA_GetError>
 800da9c:	4603      	mov	r3, r0
 800da9e:	2b02      	cmp	r3, #2
 800daa0:	d00e      	beq.n	800dac0 <I2C_DMAError+0x26c>
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d00b      	beq.n	800dac0 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	685a      	ldr	r2, [r3, #4]
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dab6:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800dab8:	2110      	movs	r1, #16
 800daba:	68b8      	ldr	r0, [r7, #8]
 800dabc:	f7ff fcf8 	bl	800d4b0 <I2C_ITError>
  }
}
 800dac0:	bf00      	nop
 800dac2:	3710      	adds	r7, #16
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b084      	sub	sp, #16
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dad4:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d003      	beq.n	800dae6 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dae2:	2200      	movs	r2, #0
 800dae4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daea:	2b00      	cmp	r3, #0
 800daec:	d003      	beq.n	800daf6 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daf2:	2200      	movs	r2, #0
 800daf4:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800daf6:	68f8      	ldr	r0, [r7, #12]
 800daf8:	f7ff fdca 	bl	800d690 <I2C_TreatErrorCallback>
}
 800dafc:	bf00      	nop
 800dafe:	3710      	adds	r7, #16
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800db04:	b480      	push	{r7}
 800db06:	b087      	sub	sp, #28
 800db08:	af00      	add	r7, sp, #0
 800db0a:	60f8      	str	r0, [r7, #12]
 800db0c:	607b      	str	r3, [r7, #4]
 800db0e:	460b      	mov	r3, r1
 800db10:	817b      	strh	r3, [r7, #10]
 800db12:	4613      	mov	r3, r2
 800db14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800db16:	897b      	ldrh	r3, [r7, #10]
 800db18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800db1c:	7a7b      	ldrb	r3, [r7, #9]
 800db1e:	041b      	lsls	r3, r3, #16
 800db20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800db24:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800db2a:	6a3b      	ldr	r3, [r7, #32]
 800db2c:	4313      	orrs	r3, r2
 800db2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db32:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	685a      	ldr	r2, [r3, #4]
 800db3a:	6a3b      	ldr	r3, [r7, #32]
 800db3c:	0d5b      	lsrs	r3, r3, #21
 800db3e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800db42:	4b08      	ldr	r3, [pc, #32]	; (800db64 <I2C_TransferConfig+0x60>)
 800db44:	430b      	orrs	r3, r1
 800db46:	43db      	mvns	r3, r3
 800db48:	ea02 0103 	and.w	r1, r2, r3
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	697a      	ldr	r2, [r7, #20]
 800db52:	430a      	orrs	r2, r1
 800db54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800db56:	bf00      	nop
 800db58:	371c      	adds	r7, #28
 800db5a:	46bd      	mov	sp, r7
 800db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db60:	4770      	bx	lr
 800db62:	bf00      	nop
 800db64:	03ff63ff 	.word	0x03ff63ff

0800db68 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800db68:	b480      	push	{r7}
 800db6a:	b085      	sub	sp, #20
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
 800db70:	460b      	mov	r3, r1
 800db72:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800db74:	2300      	movs	r3, #0
 800db76:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db7c:	4a39      	ldr	r2, [pc, #228]	; (800dc64 <I2C_Enable_IRQ+0xfc>)
 800db7e:	4293      	cmp	r3, r2
 800db80:	d032      	beq.n	800dbe8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800db86:	4a38      	ldr	r2, [pc, #224]	; (800dc68 <I2C_Enable_IRQ+0x100>)
 800db88:	4293      	cmp	r3, r2
 800db8a:	d02d      	beq.n	800dbe8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800db90:	4a36      	ldr	r2, [pc, #216]	; (800dc6c <I2C_Enable_IRQ+0x104>)
 800db92:	4293      	cmp	r3, r2
 800db94:	d028      	beq.n	800dbe8 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800db96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	da03      	bge.n	800dba6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800dba4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800dba6:	887b      	ldrh	r3, [r7, #2]
 800dba8:	f003 0301 	and.w	r3, r3, #1
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d003      	beq.n	800dbb8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800dbb6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800dbb8:	887b      	ldrh	r3, [r7, #2]
 800dbba:	f003 0302 	and.w	r3, r3, #2
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d003      	beq.n	800dbca <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800dbc8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800dbca:	887b      	ldrh	r3, [r7, #2]
 800dbcc:	2b10      	cmp	r3, #16
 800dbce:	d103      	bne.n	800dbd8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800dbd6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800dbd8:	887b      	ldrh	r3, [r7, #2]
 800dbda:	2b20      	cmp	r3, #32
 800dbdc:	d133      	bne.n	800dc46 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	f043 0320 	orr.w	r3, r3, #32
 800dbe4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800dbe6:	e02e      	b.n	800dc46 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800dbe8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	da03      	bge.n	800dbf8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800dbf6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800dbf8:	887b      	ldrh	r3, [r7, #2]
 800dbfa:	f003 0301 	and.w	r3, r3, #1
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d003      	beq.n	800dc0a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800dc08:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800dc0a:	887b      	ldrh	r3, [r7, #2]
 800dc0c:	f003 0302 	and.w	r3, r3, #2
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d003      	beq.n	800dc1c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800dc1a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800dc1c:	887b      	ldrh	r3, [r7, #2]
 800dc1e:	2b10      	cmp	r3, #16
 800dc20:	d103      	bne.n	800dc2a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800dc28:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800dc2a:	887b      	ldrh	r3, [r7, #2]
 800dc2c:	2b20      	cmp	r3, #32
 800dc2e:	d103      	bne.n	800dc38 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800dc36:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800dc38:	887b      	ldrh	r3, [r7, #2]
 800dc3a:	2b40      	cmp	r3, #64	; 0x40
 800dc3c:	d103      	bne.n	800dc46 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc44:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	6819      	ldr	r1, [r3, #0]
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	68fa      	ldr	r2, [r7, #12]
 800dc52:	430a      	orrs	r2, r1
 800dc54:	601a      	str	r2, [r3, #0]
}
 800dc56:	bf00      	nop
 800dc58:	3714      	adds	r7, #20
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc60:	4770      	bx	lr
 800dc62:	bf00      	nop
 800dc64:	0800c36f 	.word	0x0800c36f
 800dc68:	0800c7b5 	.word	0x0800c7b5
 800dc6c:	0800c555 	.word	0x0800c555

0800dc70 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800dc70:	b480      	push	{r7}
 800dc72:	b085      	sub	sp, #20
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	460b      	mov	r3, r1
 800dc7a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800dc80:	887b      	ldrh	r3, [r7, #2]
 800dc82:	f003 0301 	and.w	r3, r3, #1
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d00f      	beq.n	800dcaa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800dc90:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc98:	b2db      	uxtb	r3, r3
 800dc9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800dc9e:	2b28      	cmp	r3, #40	; 0x28
 800dca0:	d003      	beq.n	800dcaa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800dca8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800dcaa:	887b      	ldrh	r3, [r7, #2]
 800dcac:	f003 0302 	and.w	r3, r3, #2
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d00f      	beq.n	800dcd4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800dcba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dcc2:	b2db      	uxtb	r3, r3
 800dcc4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800dcc8:	2b28      	cmp	r3, #40	; 0x28
 800dcca:	d003      	beq.n	800dcd4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800dcd2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800dcd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	da03      	bge.n	800dce4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800dce2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800dce4:	887b      	ldrh	r3, [r7, #2]
 800dce6:	2b10      	cmp	r3, #16
 800dce8:	d103      	bne.n	800dcf2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800dcf0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800dcf2:	887b      	ldrh	r3, [r7, #2]
 800dcf4:	2b20      	cmp	r3, #32
 800dcf6:	d103      	bne.n	800dd00 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	f043 0320 	orr.w	r3, r3, #32
 800dcfe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800dd00:	887b      	ldrh	r3, [r7, #2]
 800dd02:	2b40      	cmp	r3, #64	; 0x40
 800dd04:	d103      	bne.n	800dd0e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd0c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	6819      	ldr	r1, [r3, #0]
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	43da      	mvns	r2, r3
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	400a      	ands	r2, r1
 800dd1e:	601a      	str	r2, [r3, #0]
}
 800dd20:	bf00      	nop
 800dd22:	3714      	adds	r7, #20
 800dd24:	46bd      	mov	sp, r7
 800dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2a:	4770      	bx	lr

0800dd2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800dd2c:	b480      	push	{r7}
 800dd2e:	b083      	sub	sp, #12
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
 800dd34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	2b20      	cmp	r3, #32
 800dd40:	d138      	bne.n	800ddb4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd48:	2b01      	cmp	r3, #1
 800dd4a:	d101      	bne.n	800dd50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800dd4c:	2302      	movs	r3, #2
 800dd4e:	e032      	b.n	800ddb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2201      	movs	r2, #1
 800dd54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2224      	movs	r2, #36	; 0x24
 800dd5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	681a      	ldr	r2, [r3, #0]
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	f022 0201 	bic.w	r2, r2, #1
 800dd6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	681a      	ldr	r2, [r3, #0]
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dd7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	6819      	ldr	r1, [r3, #0]
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	683a      	ldr	r2, [r7, #0]
 800dd8c:	430a      	orrs	r2, r1
 800dd8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	681a      	ldr	r2, [r3, #0]
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	f042 0201 	orr.w	r2, r2, #1
 800dd9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2220      	movs	r2, #32
 800dda4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	e000      	b.n	800ddb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ddb4:	2302      	movs	r3, #2
  }
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	370c      	adds	r7, #12
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc0:	4770      	bx	lr

0800ddc2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ddc2:	b480      	push	{r7}
 800ddc4:	b085      	sub	sp, #20
 800ddc6:	af00      	add	r7, sp, #0
 800ddc8:	6078      	str	r0, [r7, #4]
 800ddca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ddd2:	b2db      	uxtb	r3, r3
 800ddd4:	2b20      	cmp	r3, #32
 800ddd6:	d139      	bne.n	800de4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ddde:	2b01      	cmp	r3, #1
 800dde0:	d101      	bne.n	800dde6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800dde2:	2302      	movs	r3, #2
 800dde4:	e033      	b.n	800de4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2201      	movs	r2, #1
 800ddea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2224      	movs	r2, #36	; 0x24
 800ddf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	681a      	ldr	r2, [r3, #0]
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	f022 0201 	bic.w	r2, r2, #1
 800de04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800de14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	021b      	lsls	r3, r3, #8
 800de1a:	68fa      	ldr	r2, [r7, #12]
 800de1c:	4313      	orrs	r3, r2
 800de1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	68fa      	ldr	r2, [r7, #12]
 800de26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	681a      	ldr	r2, [r3, #0]
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	f042 0201 	orr.w	r2, r2, #1
 800de36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2220      	movs	r2, #32
 800de3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2200      	movs	r2, #0
 800de44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800de48:	2300      	movs	r3, #0
 800de4a:	e000      	b.n	800de4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800de4c:	2302      	movs	r3, #2
  }
}
 800de4e:	4618      	mov	r0, r3
 800de50:	3714      	adds	r7, #20
 800de52:	46bd      	mov	sp, r7
 800de54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de58:	4770      	bx	lr
	...

0800de5c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800de5c:	b480      	push	{r7}
 800de5e:	b085      	sub	sp, #20
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800de64:	4b0d      	ldr	r3, [pc, #52]	; (800de9c <HAL_I2CEx_EnableFastModePlus+0x40>)
 800de66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800de6a:	4a0c      	ldr	r2, [pc, #48]	; (800de9c <HAL_I2CEx_EnableFastModePlus+0x40>)
 800de6c:	f043 0302 	orr.w	r3, r3, #2
 800de70:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800de74:	4b09      	ldr	r3, [pc, #36]	; (800de9c <HAL_I2CEx_EnableFastModePlus+0x40>)
 800de76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800de7a:	f003 0302 	and.w	r3, r3, #2
 800de7e:	60fb      	str	r3, [r7, #12]
 800de80:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800de82:	4b07      	ldr	r3, [pc, #28]	; (800dea0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800de84:	685a      	ldr	r2, [r3, #4]
 800de86:	4906      	ldr	r1, [pc, #24]	; (800dea0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	4313      	orrs	r3, r2
 800de8c:	604b      	str	r3, [r1, #4]
}
 800de8e:	bf00      	nop
 800de90:	3714      	adds	r7, #20
 800de92:	46bd      	mov	sp, r7
 800de94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de98:	4770      	bx	lr
 800de9a:	bf00      	nop
 800de9c:	58024400 	.word	0x58024400
 800dea0:	58000400 	.word	0x58000400

0800dea4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800dea4:	b480      	push	{r7}
 800dea6:	b083      	sub	sp, #12
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800deb4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800deb6:	2300      	movs	r3, #0
}
 800deb8:	4618      	mov	r0, r3
 800deba:	370c      	adds	r7, #12
 800debc:	46bd      	mov	sp, r7
 800debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec2:	4770      	bx	lr

0800dec4 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800dec4:	b480      	push	{r7}
 800dec6:	b083      	sub	sp, #12
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	460b      	mov	r3, r1
 800dece:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800ded0:	4b18      	ldr	r3, [pc, #96]	; (800df34 <HAL_PWR_EnterSTOPMode+0x70>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	f023 0201 	bic.w	r2, r3, #1
 800ded8:	4916      	ldr	r1, [pc, #88]	; (800df34 <HAL_PWR_EnterSTOPMode+0x70>)
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	4313      	orrs	r3, r2
 800dede:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800dee0:	4b14      	ldr	r3, [pc, #80]	; (800df34 <HAL_PWR_EnterSTOPMode+0x70>)
 800dee2:	691b      	ldr	r3, [r3, #16]
 800dee4:	4a13      	ldr	r2, [pc, #76]	; (800df34 <HAL_PWR_EnterSTOPMode+0x70>)
 800dee6:	f023 0305 	bic.w	r3, r3, #5
 800deea:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800deec:	4b11      	ldr	r3, [pc, #68]	; (800df34 <HAL_PWR_EnterSTOPMode+0x70>)
 800deee:	691b      	ldr	r3, [r3, #16]
 800def0:	4a10      	ldr	r2, [pc, #64]	; (800df34 <HAL_PWR_EnterSTOPMode+0x70>)
 800def2:	f023 0302 	bic.w	r3, r3, #2
 800def6:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800def8:	4b0f      	ldr	r3, [pc, #60]	; (800df38 <HAL_PWR_EnterSTOPMode+0x74>)
 800defa:	691b      	ldr	r3, [r3, #16]
 800defc:	4a0e      	ldr	r2, [pc, #56]	; (800df38 <HAL_PWR_EnterSTOPMode+0x74>)
 800defe:	f043 0304 	orr.w	r3, r3, #4
 800df02:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800df04:	f3bf 8f4f 	dsb	sy
}
 800df08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800df0a:	f3bf 8f6f 	isb	sy
}
 800df0e:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800df10:	78fb      	ldrb	r3, [r7, #3]
 800df12:	2b01      	cmp	r3, #1
 800df14:	d101      	bne.n	800df1a <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800df16:	bf30      	wfi
 800df18:	e000      	b.n	800df1c <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800df1a:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800df1c:	4b06      	ldr	r3, [pc, #24]	; (800df38 <HAL_PWR_EnterSTOPMode+0x74>)
 800df1e:	691b      	ldr	r3, [r3, #16]
 800df20:	4a05      	ldr	r2, [pc, #20]	; (800df38 <HAL_PWR_EnterSTOPMode+0x74>)
 800df22:	f023 0304 	bic.w	r3, r3, #4
 800df26:	6113      	str	r3, [r2, #16]
}
 800df28:	bf00      	nop
 800df2a:	370c      	adds	r7, #12
 800df2c:	46bd      	mov	sp, r7
 800df2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df32:	4770      	bx	lr
 800df34:	58024800 	.word	0x58024800
 800df38:	e000ed00 	.word	0xe000ed00

0800df3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b084      	sub	sp, #16
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800df44:	4b19      	ldr	r3, [pc, #100]	; (800dfac <HAL_PWREx_ConfigSupply+0x70>)
 800df46:	68db      	ldr	r3, [r3, #12]
 800df48:	f003 0304 	and.w	r3, r3, #4
 800df4c:	2b04      	cmp	r3, #4
 800df4e:	d00a      	beq.n	800df66 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800df50:	4b16      	ldr	r3, [pc, #88]	; (800dfac <HAL_PWREx_ConfigSupply+0x70>)
 800df52:	68db      	ldr	r3, [r3, #12]
 800df54:	f003 0307 	and.w	r3, r3, #7
 800df58:	687a      	ldr	r2, [r7, #4]
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d001      	beq.n	800df62 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800df5e:	2301      	movs	r3, #1
 800df60:	e01f      	b.n	800dfa2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800df62:	2300      	movs	r3, #0
 800df64:	e01d      	b.n	800dfa2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800df66:	4b11      	ldr	r3, [pc, #68]	; (800dfac <HAL_PWREx_ConfigSupply+0x70>)
 800df68:	68db      	ldr	r3, [r3, #12]
 800df6a:	f023 0207 	bic.w	r2, r3, #7
 800df6e:	490f      	ldr	r1, [pc, #60]	; (800dfac <HAL_PWREx_ConfigSupply+0x70>)
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	4313      	orrs	r3, r2
 800df74:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800df76:	f7f7 fff7 	bl	8005f68 <HAL_GetTick>
 800df7a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800df7c:	e009      	b.n	800df92 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800df7e:	f7f7 fff3 	bl	8005f68 <HAL_GetTick>
 800df82:	4602      	mov	r2, r0
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	1ad3      	subs	r3, r2, r3
 800df88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800df8c:	d901      	bls.n	800df92 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800df8e:	2301      	movs	r3, #1
 800df90:	e007      	b.n	800dfa2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800df92:	4b06      	ldr	r3, [pc, #24]	; (800dfac <HAL_PWREx_ConfigSupply+0x70>)
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800df9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df9e:	d1ee      	bne.n	800df7e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800dfa0:	2300      	movs	r3, #0
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3710      	adds	r7, #16
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
 800dfaa:	bf00      	nop
 800dfac:	58024800 	.word	0x58024800

0800dfb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b08c      	sub	sp, #48	; 0x30
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d102      	bne.n	800dfc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	f000 bc48 	b.w	800e854 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	f003 0301 	and.w	r3, r3, #1
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	f000 8088 	beq.w	800e0e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dfd2:	4b99      	ldr	r3, [pc, #612]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800dfd4:	691b      	ldr	r3, [r3, #16]
 800dfd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dfda:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dfdc:	4b96      	ldr	r3, [pc, #600]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800dfde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfe0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800dfe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe4:	2b10      	cmp	r3, #16
 800dfe6:	d007      	beq.n	800dff8 <HAL_RCC_OscConfig+0x48>
 800dfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfea:	2b18      	cmp	r3, #24
 800dfec:	d111      	bne.n	800e012 <HAL_RCC_OscConfig+0x62>
 800dfee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff0:	f003 0303 	and.w	r3, r3, #3
 800dff4:	2b02      	cmp	r3, #2
 800dff6:	d10c      	bne.n	800e012 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dff8:	4b8f      	ldr	r3, [pc, #572]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e000:	2b00      	cmp	r3, #0
 800e002:	d06d      	beq.n	800e0e0 <HAL_RCC_OscConfig+0x130>
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	685b      	ldr	r3, [r3, #4]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d169      	bne.n	800e0e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800e00c:	2301      	movs	r3, #1
 800e00e:	f000 bc21 	b.w	800e854 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e01a:	d106      	bne.n	800e02a <HAL_RCC_OscConfig+0x7a>
 800e01c:	4b86      	ldr	r3, [pc, #536]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	4a85      	ldr	r2, [pc, #532]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e026:	6013      	str	r3, [r2, #0]
 800e028:	e02e      	b.n	800e088 <HAL_RCC_OscConfig+0xd8>
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d10c      	bne.n	800e04c <HAL_RCC_OscConfig+0x9c>
 800e032:	4b81      	ldr	r3, [pc, #516]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	4a80      	ldr	r2, [pc, #512]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e03c:	6013      	str	r3, [r2, #0]
 800e03e:	4b7e      	ldr	r3, [pc, #504]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	4a7d      	ldr	r2, [pc, #500]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e044:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e048:	6013      	str	r3, [r2, #0]
 800e04a:	e01d      	b.n	800e088 <HAL_RCC_OscConfig+0xd8>
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	685b      	ldr	r3, [r3, #4]
 800e050:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e054:	d10c      	bne.n	800e070 <HAL_RCC_OscConfig+0xc0>
 800e056:	4b78      	ldr	r3, [pc, #480]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	4a77      	ldr	r2, [pc, #476]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e05c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e060:	6013      	str	r3, [r2, #0]
 800e062:	4b75      	ldr	r3, [pc, #468]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	4a74      	ldr	r2, [pc, #464]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e06c:	6013      	str	r3, [r2, #0]
 800e06e:	e00b      	b.n	800e088 <HAL_RCC_OscConfig+0xd8>
 800e070:	4b71      	ldr	r3, [pc, #452]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	4a70      	ldr	r2, [pc, #448]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e07a:	6013      	str	r3, [r2, #0]
 800e07c:	4b6e      	ldr	r3, [pc, #440]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	4a6d      	ldr	r2, [pc, #436]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d013      	beq.n	800e0b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e090:	f7f7 ff6a 	bl	8005f68 <HAL_GetTick>
 800e094:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e096:	e008      	b.n	800e0aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e098:	f7f7 ff66 	bl	8005f68 <HAL_GetTick>
 800e09c:	4602      	mov	r2, r0
 800e09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a0:	1ad3      	subs	r3, r2, r3
 800e0a2:	2b64      	cmp	r3, #100	; 0x64
 800e0a4:	d901      	bls.n	800e0aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e0a6:	2303      	movs	r3, #3
 800e0a8:	e3d4      	b.n	800e854 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e0aa:	4b63      	ldr	r3, [pc, #396]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d0f0      	beq.n	800e098 <HAL_RCC_OscConfig+0xe8>
 800e0b6:	e014      	b.n	800e0e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e0b8:	f7f7 ff56 	bl	8005f68 <HAL_GetTick>
 800e0bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e0be:	e008      	b.n	800e0d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e0c0:	f7f7 ff52 	bl	8005f68 <HAL_GetTick>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c8:	1ad3      	subs	r3, r2, r3
 800e0ca:	2b64      	cmp	r3, #100	; 0x64
 800e0cc:	d901      	bls.n	800e0d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800e0ce:	2303      	movs	r3, #3
 800e0d0:	e3c0      	b.n	800e854 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e0d2:	4b59      	ldr	r3, [pc, #356]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d1f0      	bne.n	800e0c0 <HAL_RCC_OscConfig+0x110>
 800e0de:	e000      	b.n	800e0e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e0e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	f003 0302 	and.w	r3, r3, #2
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	f000 80ca 	beq.w	800e284 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e0f0:	4b51      	ldr	r3, [pc, #324]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e0f2:	691b      	ldr	r3, [r3, #16]
 800e0f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e0f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e0fa:	4b4f      	ldr	r3, [pc, #316]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e0fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0fe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800e100:	6a3b      	ldr	r3, [r7, #32]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d007      	beq.n	800e116 <HAL_RCC_OscConfig+0x166>
 800e106:	6a3b      	ldr	r3, [r7, #32]
 800e108:	2b18      	cmp	r3, #24
 800e10a:	d156      	bne.n	800e1ba <HAL_RCC_OscConfig+0x20a>
 800e10c:	69fb      	ldr	r3, [r7, #28]
 800e10e:	f003 0303 	and.w	r3, r3, #3
 800e112:	2b00      	cmp	r3, #0
 800e114:	d151      	bne.n	800e1ba <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e116:	4b48      	ldr	r3, [pc, #288]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f003 0304 	and.w	r3, r3, #4
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d005      	beq.n	800e12e <HAL_RCC_OscConfig+0x17e>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	68db      	ldr	r3, [r3, #12]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d101      	bne.n	800e12e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800e12a:	2301      	movs	r3, #1
 800e12c:	e392      	b.n	800e854 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e12e:	4b42      	ldr	r3, [pc, #264]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	f023 0219 	bic.w	r2, r3, #25
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	68db      	ldr	r3, [r3, #12]
 800e13a:	493f      	ldr	r1, [pc, #252]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e13c:	4313      	orrs	r3, r2
 800e13e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e140:	f7f7 ff12 	bl	8005f68 <HAL_GetTick>
 800e144:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e146:	e008      	b.n	800e15a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e148:	f7f7 ff0e 	bl	8005f68 <HAL_GetTick>
 800e14c:	4602      	mov	r2, r0
 800e14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e150:	1ad3      	subs	r3, r2, r3
 800e152:	2b02      	cmp	r3, #2
 800e154:	d901      	bls.n	800e15a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800e156:	2303      	movs	r3, #3
 800e158:	e37c      	b.n	800e854 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e15a:	4b37      	ldr	r3, [pc, #220]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f003 0304 	and.w	r3, r3, #4
 800e162:	2b00      	cmp	r3, #0
 800e164:	d0f0      	beq.n	800e148 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e166:	f7f7 ff0b 	bl	8005f80 <HAL_GetREVID>
 800e16a:	4603      	mov	r3, r0
 800e16c:	f241 0203 	movw	r2, #4099	; 0x1003
 800e170:	4293      	cmp	r3, r2
 800e172:	d817      	bhi.n	800e1a4 <HAL_RCC_OscConfig+0x1f4>
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	691b      	ldr	r3, [r3, #16]
 800e178:	2b40      	cmp	r3, #64	; 0x40
 800e17a:	d108      	bne.n	800e18e <HAL_RCC_OscConfig+0x1de>
 800e17c:	4b2e      	ldr	r3, [pc, #184]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e17e:	685b      	ldr	r3, [r3, #4]
 800e180:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800e184:	4a2c      	ldr	r2, [pc, #176]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e18a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e18c:	e07a      	b.n	800e284 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e18e:	4b2a      	ldr	r3, [pc, #168]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e190:	685b      	ldr	r3, [r3, #4]
 800e192:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	691b      	ldr	r3, [r3, #16]
 800e19a:	031b      	lsls	r3, r3, #12
 800e19c:	4926      	ldr	r1, [pc, #152]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e19e:	4313      	orrs	r3, r2
 800e1a0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e1a2:	e06f      	b.n	800e284 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e1a4:	4b24      	ldr	r3, [pc, #144]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e1a6:	685b      	ldr	r3, [r3, #4]
 800e1a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	691b      	ldr	r3, [r3, #16]
 800e1b0:	061b      	lsls	r3, r3, #24
 800e1b2:	4921      	ldr	r1, [pc, #132]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e1b4:	4313      	orrs	r3, r2
 800e1b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e1b8:	e064      	b.n	800e284 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	68db      	ldr	r3, [r3, #12]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d047      	beq.n	800e252 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e1c2:	4b1d      	ldr	r3, [pc, #116]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f023 0219 	bic.w	r2, r3, #25
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	68db      	ldr	r3, [r3, #12]
 800e1ce:	491a      	ldr	r1, [pc, #104]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e1d0:	4313      	orrs	r3, r2
 800e1d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e1d4:	f7f7 fec8 	bl	8005f68 <HAL_GetTick>
 800e1d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e1da:	e008      	b.n	800e1ee <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e1dc:	f7f7 fec4 	bl	8005f68 <HAL_GetTick>
 800e1e0:	4602      	mov	r2, r0
 800e1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e4:	1ad3      	subs	r3, r2, r3
 800e1e6:	2b02      	cmp	r3, #2
 800e1e8:	d901      	bls.n	800e1ee <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800e1ea:	2303      	movs	r3, #3
 800e1ec:	e332      	b.n	800e854 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e1ee:	4b12      	ldr	r3, [pc, #72]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f003 0304 	and.w	r3, r3, #4
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d0f0      	beq.n	800e1dc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e1fa:	f7f7 fec1 	bl	8005f80 <HAL_GetREVID>
 800e1fe:	4603      	mov	r3, r0
 800e200:	f241 0203 	movw	r2, #4099	; 0x1003
 800e204:	4293      	cmp	r3, r2
 800e206:	d819      	bhi.n	800e23c <HAL_RCC_OscConfig+0x28c>
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	691b      	ldr	r3, [r3, #16]
 800e20c:	2b40      	cmp	r3, #64	; 0x40
 800e20e:	d108      	bne.n	800e222 <HAL_RCC_OscConfig+0x272>
 800e210:	4b09      	ldr	r3, [pc, #36]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e212:	685b      	ldr	r3, [r3, #4]
 800e214:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800e218:	4a07      	ldr	r2, [pc, #28]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e21a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e21e:	6053      	str	r3, [r2, #4]
 800e220:	e030      	b.n	800e284 <HAL_RCC_OscConfig+0x2d4>
 800e222:	4b05      	ldr	r3, [pc, #20]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e224:	685b      	ldr	r3, [r3, #4]
 800e226:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	691b      	ldr	r3, [r3, #16]
 800e22e:	031b      	lsls	r3, r3, #12
 800e230:	4901      	ldr	r1, [pc, #4]	; (800e238 <HAL_RCC_OscConfig+0x288>)
 800e232:	4313      	orrs	r3, r2
 800e234:	604b      	str	r3, [r1, #4]
 800e236:	e025      	b.n	800e284 <HAL_RCC_OscConfig+0x2d4>
 800e238:	58024400 	.word	0x58024400
 800e23c:	4b9a      	ldr	r3, [pc, #616]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e23e:	685b      	ldr	r3, [r3, #4]
 800e240:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	691b      	ldr	r3, [r3, #16]
 800e248:	061b      	lsls	r3, r3, #24
 800e24a:	4997      	ldr	r1, [pc, #604]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e24c:	4313      	orrs	r3, r2
 800e24e:	604b      	str	r3, [r1, #4]
 800e250:	e018      	b.n	800e284 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e252:	4b95      	ldr	r3, [pc, #596]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	4a94      	ldr	r2, [pc, #592]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e258:	f023 0301 	bic.w	r3, r3, #1
 800e25c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e25e:	f7f7 fe83 	bl	8005f68 <HAL_GetTick>
 800e262:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e264:	e008      	b.n	800e278 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e266:	f7f7 fe7f 	bl	8005f68 <HAL_GetTick>
 800e26a:	4602      	mov	r2, r0
 800e26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26e:	1ad3      	subs	r3, r2, r3
 800e270:	2b02      	cmp	r3, #2
 800e272:	d901      	bls.n	800e278 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800e274:	2303      	movs	r3, #3
 800e276:	e2ed      	b.n	800e854 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e278:	4b8b      	ldr	r3, [pc, #556]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	f003 0304 	and.w	r3, r3, #4
 800e280:	2b00      	cmp	r3, #0
 800e282:	d1f0      	bne.n	800e266 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	f003 0310 	and.w	r3, r3, #16
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	f000 80a9 	beq.w	800e3e4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e292:	4b85      	ldr	r3, [pc, #532]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e294:	691b      	ldr	r3, [r3, #16]
 800e296:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e29a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e29c:	4b82      	ldr	r3, [pc, #520]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2a0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800e2a2:	69bb      	ldr	r3, [r7, #24]
 800e2a4:	2b08      	cmp	r3, #8
 800e2a6:	d007      	beq.n	800e2b8 <HAL_RCC_OscConfig+0x308>
 800e2a8:	69bb      	ldr	r3, [r7, #24]
 800e2aa:	2b18      	cmp	r3, #24
 800e2ac:	d13a      	bne.n	800e324 <HAL_RCC_OscConfig+0x374>
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	f003 0303 	and.w	r3, r3, #3
 800e2b4:	2b01      	cmp	r3, #1
 800e2b6:	d135      	bne.n	800e324 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e2b8:	4b7b      	ldr	r3, [pc, #492]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d005      	beq.n	800e2d0 <HAL_RCC_OscConfig+0x320>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	69db      	ldr	r3, [r3, #28]
 800e2c8:	2b80      	cmp	r3, #128	; 0x80
 800e2ca:	d001      	beq.n	800e2d0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	e2c1      	b.n	800e854 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e2d0:	f7f7 fe56 	bl	8005f80 <HAL_GetREVID>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	f241 0203 	movw	r2, #4099	; 0x1003
 800e2da:	4293      	cmp	r3, r2
 800e2dc:	d817      	bhi.n	800e30e <HAL_RCC_OscConfig+0x35e>
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6a1b      	ldr	r3, [r3, #32]
 800e2e2:	2b20      	cmp	r3, #32
 800e2e4:	d108      	bne.n	800e2f8 <HAL_RCC_OscConfig+0x348>
 800e2e6:	4b70      	ldr	r3, [pc, #448]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e2e8:	685b      	ldr	r3, [r3, #4]
 800e2ea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800e2ee:	4a6e      	ldr	r2, [pc, #440]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e2f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e2f4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e2f6:	e075      	b.n	800e3e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e2f8:	4b6b      	ldr	r3, [pc, #428]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e2fa:	685b      	ldr	r3, [r3, #4]
 800e2fc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6a1b      	ldr	r3, [r3, #32]
 800e304:	069b      	lsls	r3, r3, #26
 800e306:	4968      	ldr	r1, [pc, #416]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e308:	4313      	orrs	r3, r2
 800e30a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e30c:	e06a      	b.n	800e3e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e30e:	4b66      	ldr	r3, [pc, #408]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e310:	68db      	ldr	r3, [r3, #12]
 800e312:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6a1b      	ldr	r3, [r3, #32]
 800e31a:	061b      	lsls	r3, r3, #24
 800e31c:	4962      	ldr	r1, [pc, #392]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e31e:	4313      	orrs	r3, r2
 800e320:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e322:	e05f      	b.n	800e3e4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	69db      	ldr	r3, [r3, #28]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d042      	beq.n	800e3b2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800e32c:	4b5e      	ldr	r3, [pc, #376]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	4a5d      	ldr	r2, [pc, #372]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e338:	f7f7 fe16 	bl	8005f68 <HAL_GetTick>
 800e33c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e33e:	e008      	b.n	800e352 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e340:	f7f7 fe12 	bl	8005f68 <HAL_GetTick>
 800e344:	4602      	mov	r2, r0
 800e346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e348:	1ad3      	subs	r3, r2, r3
 800e34a:	2b02      	cmp	r3, #2
 800e34c:	d901      	bls.n	800e352 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800e34e:	2303      	movs	r3, #3
 800e350:	e280      	b.n	800e854 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e352:	4b55      	ldr	r3, [pc, #340]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d0f0      	beq.n	800e340 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e35e:	f7f7 fe0f 	bl	8005f80 <HAL_GetREVID>
 800e362:	4603      	mov	r3, r0
 800e364:	f241 0203 	movw	r2, #4099	; 0x1003
 800e368:	4293      	cmp	r3, r2
 800e36a:	d817      	bhi.n	800e39c <HAL_RCC_OscConfig+0x3ec>
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6a1b      	ldr	r3, [r3, #32]
 800e370:	2b20      	cmp	r3, #32
 800e372:	d108      	bne.n	800e386 <HAL_RCC_OscConfig+0x3d6>
 800e374:	4b4c      	ldr	r3, [pc, #304]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e376:	685b      	ldr	r3, [r3, #4]
 800e378:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800e37c:	4a4a      	ldr	r2, [pc, #296]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e37e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e382:	6053      	str	r3, [r2, #4]
 800e384:	e02e      	b.n	800e3e4 <HAL_RCC_OscConfig+0x434>
 800e386:	4b48      	ldr	r3, [pc, #288]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e388:	685b      	ldr	r3, [r3, #4]
 800e38a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6a1b      	ldr	r3, [r3, #32]
 800e392:	069b      	lsls	r3, r3, #26
 800e394:	4944      	ldr	r1, [pc, #272]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e396:	4313      	orrs	r3, r2
 800e398:	604b      	str	r3, [r1, #4]
 800e39a:	e023      	b.n	800e3e4 <HAL_RCC_OscConfig+0x434>
 800e39c:	4b42      	ldr	r3, [pc, #264]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e39e:	68db      	ldr	r3, [r3, #12]
 800e3a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6a1b      	ldr	r3, [r3, #32]
 800e3a8:	061b      	lsls	r3, r3, #24
 800e3aa:	493f      	ldr	r1, [pc, #252]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e3ac:	4313      	orrs	r3, r2
 800e3ae:	60cb      	str	r3, [r1, #12]
 800e3b0:	e018      	b.n	800e3e4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800e3b2:	4b3d      	ldr	r3, [pc, #244]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	4a3c      	ldr	r2, [pc, #240]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e3b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e3bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e3be:	f7f7 fdd3 	bl	8005f68 <HAL_GetTick>
 800e3c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e3c4:	e008      	b.n	800e3d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e3c6:	f7f7 fdcf 	bl	8005f68 <HAL_GetTick>
 800e3ca:	4602      	mov	r2, r0
 800e3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ce:	1ad3      	subs	r3, r2, r3
 800e3d0:	2b02      	cmp	r3, #2
 800e3d2:	d901      	bls.n	800e3d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800e3d4:	2303      	movs	r3, #3
 800e3d6:	e23d      	b.n	800e854 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e3d8:	4b33      	ldr	r3, [pc, #204]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d1f0      	bne.n	800e3c6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	f003 0308 	and.w	r3, r3, #8
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d036      	beq.n	800e45e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	695b      	ldr	r3, [r3, #20]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d019      	beq.n	800e42c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e3f8:	4b2b      	ldr	r3, [pc, #172]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e3fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3fc:	4a2a      	ldr	r2, [pc, #168]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e3fe:	f043 0301 	orr.w	r3, r3, #1
 800e402:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e404:	f7f7 fdb0 	bl	8005f68 <HAL_GetTick>
 800e408:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e40a:	e008      	b.n	800e41e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e40c:	f7f7 fdac 	bl	8005f68 <HAL_GetTick>
 800e410:	4602      	mov	r2, r0
 800e412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e414:	1ad3      	subs	r3, r2, r3
 800e416:	2b02      	cmp	r3, #2
 800e418:	d901      	bls.n	800e41e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800e41a:	2303      	movs	r3, #3
 800e41c:	e21a      	b.n	800e854 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e41e:	4b22      	ldr	r3, [pc, #136]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e422:	f003 0302 	and.w	r3, r3, #2
 800e426:	2b00      	cmp	r3, #0
 800e428:	d0f0      	beq.n	800e40c <HAL_RCC_OscConfig+0x45c>
 800e42a:	e018      	b.n	800e45e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e42c:	4b1e      	ldr	r3, [pc, #120]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e42e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e430:	4a1d      	ldr	r2, [pc, #116]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e432:	f023 0301 	bic.w	r3, r3, #1
 800e436:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e438:	f7f7 fd96 	bl	8005f68 <HAL_GetTick>
 800e43c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e43e:	e008      	b.n	800e452 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e440:	f7f7 fd92 	bl	8005f68 <HAL_GetTick>
 800e444:	4602      	mov	r2, r0
 800e446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e448:	1ad3      	subs	r3, r2, r3
 800e44a:	2b02      	cmp	r3, #2
 800e44c:	d901      	bls.n	800e452 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800e44e:	2303      	movs	r3, #3
 800e450:	e200      	b.n	800e854 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e452:	4b15      	ldr	r3, [pc, #84]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e456:	f003 0302 	and.w	r3, r3, #2
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d1f0      	bne.n	800e440 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	f003 0320 	and.w	r3, r3, #32
 800e466:	2b00      	cmp	r3, #0
 800e468:	d039      	beq.n	800e4de <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	699b      	ldr	r3, [r3, #24]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d01c      	beq.n	800e4ac <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e472:	4b0d      	ldr	r3, [pc, #52]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	4a0c      	ldr	r2, [pc, #48]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e478:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e47c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e47e:	f7f7 fd73 	bl	8005f68 <HAL_GetTick>
 800e482:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e484:	e008      	b.n	800e498 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e486:	f7f7 fd6f 	bl	8005f68 <HAL_GetTick>
 800e48a:	4602      	mov	r2, r0
 800e48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48e:	1ad3      	subs	r3, r2, r3
 800e490:	2b02      	cmp	r3, #2
 800e492:	d901      	bls.n	800e498 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800e494:	2303      	movs	r3, #3
 800e496:	e1dd      	b.n	800e854 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e498:	4b03      	ldr	r3, [pc, #12]	; (800e4a8 <HAL_RCC_OscConfig+0x4f8>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d0f0      	beq.n	800e486 <HAL_RCC_OscConfig+0x4d6>
 800e4a4:	e01b      	b.n	800e4de <HAL_RCC_OscConfig+0x52e>
 800e4a6:	bf00      	nop
 800e4a8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e4ac:	4b9b      	ldr	r3, [pc, #620]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4a9a      	ldr	r2, [pc, #616]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e4b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e4b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e4b8:	f7f7 fd56 	bl	8005f68 <HAL_GetTick>
 800e4bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e4be:	e008      	b.n	800e4d2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e4c0:	f7f7 fd52 	bl	8005f68 <HAL_GetTick>
 800e4c4:	4602      	mov	r2, r0
 800e4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c8:	1ad3      	subs	r3, r2, r3
 800e4ca:	2b02      	cmp	r3, #2
 800e4cc:	d901      	bls.n	800e4d2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800e4ce:	2303      	movs	r3, #3
 800e4d0:	e1c0      	b.n	800e854 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e4d2:	4b92      	ldr	r3, [pc, #584]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d1f0      	bne.n	800e4c0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	f003 0304 	and.w	r3, r3, #4
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	f000 8081 	beq.w	800e5ee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e4ec:	4b8c      	ldr	r3, [pc, #560]	; (800e720 <HAL_RCC_OscConfig+0x770>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	4a8b      	ldr	r2, [pc, #556]	; (800e720 <HAL_RCC_OscConfig+0x770>)
 800e4f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e4f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e4f8:	f7f7 fd36 	bl	8005f68 <HAL_GetTick>
 800e4fc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e4fe:	e008      	b.n	800e512 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e500:	f7f7 fd32 	bl	8005f68 <HAL_GetTick>
 800e504:	4602      	mov	r2, r0
 800e506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e508:	1ad3      	subs	r3, r2, r3
 800e50a:	2b64      	cmp	r3, #100	; 0x64
 800e50c:	d901      	bls.n	800e512 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800e50e:	2303      	movs	r3, #3
 800e510:	e1a0      	b.n	800e854 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e512:	4b83      	ldr	r3, [pc, #524]	; (800e720 <HAL_RCC_OscConfig+0x770>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d0f0      	beq.n	800e500 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	689b      	ldr	r3, [r3, #8]
 800e522:	2b01      	cmp	r3, #1
 800e524:	d106      	bne.n	800e534 <HAL_RCC_OscConfig+0x584>
 800e526:	4b7d      	ldr	r3, [pc, #500]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e52a:	4a7c      	ldr	r2, [pc, #496]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e52c:	f043 0301 	orr.w	r3, r3, #1
 800e530:	6713      	str	r3, [r2, #112]	; 0x70
 800e532:	e02d      	b.n	800e590 <HAL_RCC_OscConfig+0x5e0>
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	689b      	ldr	r3, [r3, #8]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d10c      	bne.n	800e556 <HAL_RCC_OscConfig+0x5a6>
 800e53c:	4b77      	ldr	r3, [pc, #476]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e53e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e540:	4a76      	ldr	r2, [pc, #472]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e542:	f023 0301 	bic.w	r3, r3, #1
 800e546:	6713      	str	r3, [r2, #112]	; 0x70
 800e548:	4b74      	ldr	r3, [pc, #464]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e54a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e54c:	4a73      	ldr	r2, [pc, #460]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e54e:	f023 0304 	bic.w	r3, r3, #4
 800e552:	6713      	str	r3, [r2, #112]	; 0x70
 800e554:	e01c      	b.n	800e590 <HAL_RCC_OscConfig+0x5e0>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	689b      	ldr	r3, [r3, #8]
 800e55a:	2b05      	cmp	r3, #5
 800e55c:	d10c      	bne.n	800e578 <HAL_RCC_OscConfig+0x5c8>
 800e55e:	4b6f      	ldr	r3, [pc, #444]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e562:	4a6e      	ldr	r2, [pc, #440]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e564:	f043 0304 	orr.w	r3, r3, #4
 800e568:	6713      	str	r3, [r2, #112]	; 0x70
 800e56a:	4b6c      	ldr	r3, [pc, #432]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e56c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e56e:	4a6b      	ldr	r2, [pc, #428]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e570:	f043 0301 	orr.w	r3, r3, #1
 800e574:	6713      	str	r3, [r2, #112]	; 0x70
 800e576:	e00b      	b.n	800e590 <HAL_RCC_OscConfig+0x5e0>
 800e578:	4b68      	ldr	r3, [pc, #416]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e57a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e57c:	4a67      	ldr	r2, [pc, #412]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e57e:	f023 0301 	bic.w	r3, r3, #1
 800e582:	6713      	str	r3, [r2, #112]	; 0x70
 800e584:	4b65      	ldr	r3, [pc, #404]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e588:	4a64      	ldr	r2, [pc, #400]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e58a:	f023 0304 	bic.w	r3, r3, #4
 800e58e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	689b      	ldr	r3, [r3, #8]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d015      	beq.n	800e5c4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e598:	f7f7 fce6 	bl	8005f68 <HAL_GetTick>
 800e59c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e59e:	e00a      	b.n	800e5b6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e5a0:	f7f7 fce2 	bl	8005f68 <HAL_GetTick>
 800e5a4:	4602      	mov	r2, r0
 800e5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a8:	1ad3      	subs	r3, r2, r3
 800e5aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5ae:	4293      	cmp	r3, r2
 800e5b0:	d901      	bls.n	800e5b6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800e5b2:	2303      	movs	r3, #3
 800e5b4:	e14e      	b.n	800e854 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e5b6:	4b59      	ldr	r3, [pc, #356]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e5b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5ba:	f003 0302 	and.w	r3, r3, #2
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d0ee      	beq.n	800e5a0 <HAL_RCC_OscConfig+0x5f0>
 800e5c2:	e014      	b.n	800e5ee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e5c4:	f7f7 fcd0 	bl	8005f68 <HAL_GetTick>
 800e5c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e5ca:	e00a      	b.n	800e5e2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e5cc:	f7f7 fccc 	bl	8005f68 <HAL_GetTick>
 800e5d0:	4602      	mov	r2, r0
 800e5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d4:	1ad3      	subs	r3, r2, r3
 800e5d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5da:	4293      	cmp	r3, r2
 800e5dc:	d901      	bls.n	800e5e2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800e5de:	2303      	movs	r3, #3
 800e5e0:	e138      	b.n	800e854 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e5e2:	4b4e      	ldr	r3, [pc, #312]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e5e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5e6:	f003 0302 	and.w	r3, r3, #2
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d1ee      	bne.n	800e5cc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	f000 812d 	beq.w	800e852 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800e5f8:	4b48      	ldr	r3, [pc, #288]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e5fa:	691b      	ldr	r3, [r3, #16]
 800e5fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e600:	2b18      	cmp	r3, #24
 800e602:	f000 80bd 	beq.w	800e780 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e60a:	2b02      	cmp	r3, #2
 800e60c:	f040 809e 	bne.w	800e74c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e610:	4b42      	ldr	r3, [pc, #264]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	4a41      	ldr	r2, [pc, #260]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e616:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e61a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e61c:	f7f7 fca4 	bl	8005f68 <HAL_GetTick>
 800e620:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e622:	e008      	b.n	800e636 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e624:	f7f7 fca0 	bl	8005f68 <HAL_GetTick>
 800e628:	4602      	mov	r2, r0
 800e62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62c:	1ad3      	subs	r3, r2, r3
 800e62e:	2b02      	cmp	r3, #2
 800e630:	d901      	bls.n	800e636 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800e632:	2303      	movs	r3, #3
 800e634:	e10e      	b.n	800e854 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e636:	4b39      	ldr	r3, [pc, #228]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d1f0      	bne.n	800e624 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e642:	4b36      	ldr	r3, [pc, #216]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e646:	4b37      	ldr	r3, [pc, #220]	; (800e724 <HAL_RCC_OscConfig+0x774>)
 800e648:	4013      	ands	r3, r2
 800e64a:	687a      	ldr	r2, [r7, #4]
 800e64c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800e64e:	687a      	ldr	r2, [r7, #4]
 800e650:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e652:	0112      	lsls	r2, r2, #4
 800e654:	430a      	orrs	r2, r1
 800e656:	4931      	ldr	r1, [pc, #196]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e658:	4313      	orrs	r3, r2
 800e65a:	628b      	str	r3, [r1, #40]	; 0x28
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e660:	3b01      	subs	r3, #1
 800e662:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e66a:	3b01      	subs	r3, #1
 800e66c:	025b      	lsls	r3, r3, #9
 800e66e:	b29b      	uxth	r3, r3
 800e670:	431a      	orrs	r2, r3
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e676:	3b01      	subs	r3, #1
 800e678:	041b      	lsls	r3, r3, #16
 800e67a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e67e:	431a      	orrs	r2, r3
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e684:	3b01      	subs	r3, #1
 800e686:	061b      	lsls	r3, r3, #24
 800e688:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e68c:	4923      	ldr	r1, [pc, #140]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e68e:	4313      	orrs	r3, r2
 800e690:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800e692:	4b22      	ldr	r3, [pc, #136]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e696:	4a21      	ldr	r2, [pc, #132]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e698:	f023 0301 	bic.w	r3, r3, #1
 800e69c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e69e:	4b1f      	ldr	r3, [pc, #124]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e6a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6a2:	4b21      	ldr	r3, [pc, #132]	; (800e728 <HAL_RCC_OscConfig+0x778>)
 800e6a4:	4013      	ands	r3, r2
 800e6a6:	687a      	ldr	r2, [r7, #4]
 800e6a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e6aa:	00d2      	lsls	r2, r2, #3
 800e6ac:	491b      	ldr	r1, [pc, #108]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e6ae:	4313      	orrs	r3, r2
 800e6b0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800e6b2:	4b1a      	ldr	r3, [pc, #104]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6b6:	f023 020c 	bic.w	r2, r3, #12
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6be:	4917      	ldr	r1, [pc, #92]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e6c0:	4313      	orrs	r3, r2
 800e6c2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800e6c4:	4b15      	ldr	r3, [pc, #84]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c8:	f023 0202 	bic.w	r2, r3, #2
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6d0:	4912      	ldr	r1, [pc, #72]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e6d2:	4313      	orrs	r3, r2
 800e6d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e6d6:	4b11      	ldr	r3, [pc, #68]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e6d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6da:	4a10      	ldr	r2, [pc, #64]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e6dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e6e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e6e2:	4b0e      	ldr	r3, [pc, #56]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6e6:	4a0d      	ldr	r2, [pc, #52]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e6e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e6ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800e6ee:	4b0b      	ldr	r3, [pc, #44]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6f2:	4a0a      	ldr	r2, [pc, #40]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e6f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e6f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800e6fa:	4b08      	ldr	r3, [pc, #32]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6fe:	4a07      	ldr	r2, [pc, #28]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e700:	f043 0301 	orr.w	r3, r3, #1
 800e704:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e706:	4b05      	ldr	r3, [pc, #20]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	4a04      	ldr	r2, [pc, #16]	; (800e71c <HAL_RCC_OscConfig+0x76c>)
 800e70c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e712:	f7f7 fc29 	bl	8005f68 <HAL_GetTick>
 800e716:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e718:	e011      	b.n	800e73e <HAL_RCC_OscConfig+0x78e>
 800e71a:	bf00      	nop
 800e71c:	58024400 	.word	0x58024400
 800e720:	58024800 	.word	0x58024800
 800e724:	fffffc0c 	.word	0xfffffc0c
 800e728:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e72c:	f7f7 fc1c 	bl	8005f68 <HAL_GetTick>
 800e730:	4602      	mov	r2, r0
 800e732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e734:	1ad3      	subs	r3, r2, r3
 800e736:	2b02      	cmp	r3, #2
 800e738:	d901      	bls.n	800e73e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800e73a:	2303      	movs	r3, #3
 800e73c:	e08a      	b.n	800e854 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e73e:	4b47      	ldr	r3, [pc, #284]	; (800e85c <HAL_RCC_OscConfig+0x8ac>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e746:	2b00      	cmp	r3, #0
 800e748:	d0f0      	beq.n	800e72c <HAL_RCC_OscConfig+0x77c>
 800e74a:	e082      	b.n	800e852 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e74c:	4b43      	ldr	r3, [pc, #268]	; (800e85c <HAL_RCC_OscConfig+0x8ac>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	4a42      	ldr	r2, [pc, #264]	; (800e85c <HAL_RCC_OscConfig+0x8ac>)
 800e752:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e758:	f7f7 fc06 	bl	8005f68 <HAL_GetTick>
 800e75c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e75e:	e008      	b.n	800e772 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e760:	f7f7 fc02 	bl	8005f68 <HAL_GetTick>
 800e764:	4602      	mov	r2, r0
 800e766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e768:	1ad3      	subs	r3, r2, r3
 800e76a:	2b02      	cmp	r3, #2
 800e76c:	d901      	bls.n	800e772 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800e76e:	2303      	movs	r3, #3
 800e770:	e070      	b.n	800e854 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e772:	4b3a      	ldr	r3, [pc, #232]	; (800e85c <HAL_RCC_OscConfig+0x8ac>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d1f0      	bne.n	800e760 <HAL_RCC_OscConfig+0x7b0>
 800e77e:	e068      	b.n	800e852 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800e780:	4b36      	ldr	r3, [pc, #216]	; (800e85c <HAL_RCC_OscConfig+0x8ac>)
 800e782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e784:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800e786:	4b35      	ldr	r3, [pc, #212]	; (800e85c <HAL_RCC_OscConfig+0x8ac>)
 800e788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e78a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e790:	2b01      	cmp	r3, #1
 800e792:	d031      	beq.n	800e7f8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	f003 0203 	and.w	r2, r3, #3
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	d12a      	bne.n	800e7f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e7a2:	693b      	ldr	r3, [r7, #16]
 800e7a4:	091b      	lsrs	r3, r3, #4
 800e7a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d122      	bne.n	800e7f8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	d11a      	bne.n	800e7f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	0a5b      	lsrs	r3, r3, #9
 800e7c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e7d0:	429a      	cmp	r2, r3
 800e7d2:	d111      	bne.n	800e7f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	0c1b      	lsrs	r3, r3, #16
 800e7d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d108      	bne.n	800e7f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	0e1b      	lsrs	r3, r3, #24
 800e7ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e7f4:	429a      	cmp	r2, r3
 800e7f6:	d001      	beq.n	800e7fc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800e7f8:	2301      	movs	r3, #1
 800e7fa:	e02b      	b.n	800e854 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800e7fc:	4b17      	ldr	r3, [pc, #92]	; (800e85c <HAL_RCC_OscConfig+0x8ac>)
 800e7fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e800:	08db      	lsrs	r3, r3, #3
 800e802:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e806:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e80c:	693a      	ldr	r2, [r7, #16]
 800e80e:	429a      	cmp	r2, r3
 800e810:	d01f      	beq.n	800e852 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800e812:	4b12      	ldr	r3, [pc, #72]	; (800e85c <HAL_RCC_OscConfig+0x8ac>)
 800e814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e816:	4a11      	ldr	r2, [pc, #68]	; (800e85c <HAL_RCC_OscConfig+0x8ac>)
 800e818:	f023 0301 	bic.w	r3, r3, #1
 800e81c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e81e:	f7f7 fba3 	bl	8005f68 <HAL_GetTick>
 800e822:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800e824:	bf00      	nop
 800e826:	f7f7 fb9f 	bl	8005f68 <HAL_GetTick>
 800e82a:	4602      	mov	r2, r0
 800e82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82e:	4293      	cmp	r3, r2
 800e830:	d0f9      	beq.n	800e826 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e832:	4b0a      	ldr	r3, [pc, #40]	; (800e85c <HAL_RCC_OscConfig+0x8ac>)
 800e834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e836:	4b0a      	ldr	r3, [pc, #40]	; (800e860 <HAL_RCC_OscConfig+0x8b0>)
 800e838:	4013      	ands	r3, r2
 800e83a:	687a      	ldr	r2, [r7, #4]
 800e83c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e83e:	00d2      	lsls	r2, r2, #3
 800e840:	4906      	ldr	r1, [pc, #24]	; (800e85c <HAL_RCC_OscConfig+0x8ac>)
 800e842:	4313      	orrs	r3, r2
 800e844:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800e846:	4b05      	ldr	r3, [pc, #20]	; (800e85c <HAL_RCC_OscConfig+0x8ac>)
 800e848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e84a:	4a04      	ldr	r2, [pc, #16]	; (800e85c <HAL_RCC_OscConfig+0x8ac>)
 800e84c:	f043 0301 	orr.w	r3, r3, #1
 800e850:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800e852:	2300      	movs	r3, #0
}
 800e854:	4618      	mov	r0, r3
 800e856:	3730      	adds	r7, #48	; 0x30
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}
 800e85c:	58024400 	.word	0x58024400
 800e860:	ffff0007 	.word	0xffff0007

0800e864 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b086      	sub	sp, #24
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d101      	bne.n	800e878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e874:	2301      	movs	r3, #1
 800e876:	e19c      	b.n	800ebb2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e878:	4b8a      	ldr	r3, [pc, #552]	; (800eaa4 <HAL_RCC_ClockConfig+0x240>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	f003 030f 	and.w	r3, r3, #15
 800e880:	683a      	ldr	r2, [r7, #0]
 800e882:	429a      	cmp	r2, r3
 800e884:	d910      	bls.n	800e8a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e886:	4b87      	ldr	r3, [pc, #540]	; (800eaa4 <HAL_RCC_ClockConfig+0x240>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	f023 020f 	bic.w	r2, r3, #15
 800e88e:	4985      	ldr	r1, [pc, #532]	; (800eaa4 <HAL_RCC_ClockConfig+0x240>)
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	4313      	orrs	r3, r2
 800e894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e896:	4b83      	ldr	r3, [pc, #524]	; (800eaa4 <HAL_RCC_ClockConfig+0x240>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f003 030f 	and.w	r3, r3, #15
 800e89e:	683a      	ldr	r2, [r7, #0]
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	d001      	beq.n	800e8a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e8a4:	2301      	movs	r3, #1
 800e8a6:	e184      	b.n	800ebb2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	f003 0304 	and.w	r3, r3, #4
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d010      	beq.n	800e8d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	691a      	ldr	r2, [r3, #16]
 800e8b8:	4b7b      	ldr	r3, [pc, #492]	; (800eaa8 <HAL_RCC_ClockConfig+0x244>)
 800e8ba:	699b      	ldr	r3, [r3, #24]
 800e8bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e8c0:	429a      	cmp	r2, r3
 800e8c2:	d908      	bls.n	800e8d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e8c4:	4b78      	ldr	r3, [pc, #480]	; (800eaa8 <HAL_RCC_ClockConfig+0x244>)
 800e8c6:	699b      	ldr	r3, [r3, #24]
 800e8c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	691b      	ldr	r3, [r3, #16]
 800e8d0:	4975      	ldr	r1, [pc, #468]	; (800eaa8 <HAL_RCC_ClockConfig+0x244>)
 800e8d2:	4313      	orrs	r3, r2
 800e8d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	f003 0308 	and.w	r3, r3, #8
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d010      	beq.n	800e904 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	695a      	ldr	r2, [r3, #20]
 800e8e6:	4b70      	ldr	r3, [pc, #448]	; (800eaa8 <HAL_RCC_ClockConfig+0x244>)
 800e8e8:	69db      	ldr	r3, [r3, #28]
 800e8ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d908      	bls.n	800e904 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e8f2:	4b6d      	ldr	r3, [pc, #436]	; (800eaa8 <HAL_RCC_ClockConfig+0x244>)
 800e8f4:	69db      	ldr	r3, [r3, #28]
 800e8f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	695b      	ldr	r3, [r3, #20]
 800e8fe:	496a      	ldr	r1, [pc, #424]	; (800eaa8 <HAL_RCC_ClockConfig+0x244>)
 800e900:	4313      	orrs	r3, r2
 800e902:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	f003 0310 	and.w	r3, r3, #16
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d010      	beq.n	800e932 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	699a      	ldr	r2, [r3, #24]
 800e914:	4b64      	ldr	r3, [pc, #400]	; (800eaa8 <HAL_RCC_ClockConfig+0x244>)
 800e916:	69db      	ldr	r3, [r3, #28]
 800e918:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d908      	bls.n	800e932 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e920:	4b61      	ldr	r3, [pc, #388]	; (800eaa8 <HAL_RCC_ClockConfig+0x244>)
 800e922:	69db      	ldr	r3, [r3, #28]
 800e924:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	699b      	ldr	r3, [r3, #24]
 800e92c:	495e      	ldr	r1, [pc, #376]	; (800eaa8 <HAL_RCC_ClockConfig+0x244>)
 800e92e:	4313      	orrs	r3, r2
 800e930:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f003 0320 	and.w	r3, r3, #32
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d010      	beq.n	800e960 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	69da      	ldr	r2, [r3, #28]
 800e942:	4b59      	ldr	r3, [pc, #356]	; (800eaa8 <HAL_RCC_ClockConfig+0x244>)
 800e944:	6a1b      	ldr	r3, [r3, #32]
 800e946:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d908      	bls.n	800e960 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e94e:	4b56      	ldr	r3, [pc, #344]	; (800eaa8 <HAL_RCC_ClockConfig+0x244>)
 800e950:	6a1b      	ldr	r3, [r3, #32]
 800e952:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	69db      	ldr	r3, [r3, #28]
 800e95a:	4953      	ldr	r1, [pc, #332]	; (800eaa8 <HAL_RCC_ClockConfig+0x244>)
 800e95c:	4313      	orrs	r3, r2
 800e95e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	f003 0302 	and.w	r3, r3, #2
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d010      	beq.n	800e98e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	68da      	ldr	r2, [r3, #12]
 800e970:	4b4d      	ldr	r3, [pc, #308]	; (800eaa8 <HAL_RCC_ClockConfig+0x244>)
 800e972:	699b      	ldr	r3, [r3, #24]
 800e974:	f003 030f 	and.w	r3, r3, #15
 800e978:	429a      	cmp	r2, r3
 800e97a:	d908      	bls.n	800e98e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e97c:	4b4a      	ldr	r3, [pc, #296]	; (800eaa8 <HAL_RCC_ClockConfig+0x244>)
 800e97e:	699b      	ldr	r3, [r3, #24]
 800e980:	f023 020f 	bic.w	r2, r3, #15
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	68db      	ldr	r3, [r3, #12]
 800e988:	4947      	ldr	r1, [pc, #284]	; (800eaa8 <HAL_RCC_ClockConfig+0x244>)
 800e98a:	4313      	orrs	r3, r2
 800e98c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	f003 0301 	and.w	r3, r3, #1
 800e996:	2b00      	cmp	r3, #0
 800e998:	d055      	beq.n	800ea46 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e99a:	4b43      	ldr	r3, [pc, #268]	; (800eaa8 <HAL_RCC_ClockConfig+0x244>)
 800e99c:	699b      	ldr	r3, [r3, #24]
 800e99e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	689b      	ldr	r3, [r3, #8]
 800e9a6:	4940      	ldr	r1, [pc, #256]	; (800eaa8 <HAL_RCC_ClockConfig+0x244>)
 800e9a8:	4313      	orrs	r3, r2
 800e9aa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	685b      	ldr	r3, [r3, #4]
 800e9b0:	2b02      	cmp	r3, #2
 800e9b2:	d107      	bne.n	800e9c4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e9b4:	4b3c      	ldr	r3, [pc, #240]	; (800eaa8 <HAL_RCC_ClockConfig+0x244>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d121      	bne.n	800ea04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	e0f6      	b.n	800ebb2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	685b      	ldr	r3, [r3, #4]
 800e9c8:	2b03      	cmp	r3, #3
 800e9ca:	d107      	bne.n	800e9dc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e9cc:	4b36      	ldr	r3, [pc, #216]	; (800eaa8 <HAL_RCC_ClockConfig+0x244>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d115      	bne.n	800ea04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e9d8:	2301      	movs	r3, #1
 800e9da:	e0ea      	b.n	800ebb2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	685b      	ldr	r3, [r3, #4]
 800e9e0:	2b01      	cmp	r3, #1
 800e9e2:	d107      	bne.n	800e9f4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e9e4:	4b30      	ldr	r3, [pc, #192]	; (800eaa8 <HAL_RCC_ClockConfig+0x244>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d109      	bne.n	800ea04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	e0de      	b.n	800ebb2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e9f4:	4b2c      	ldr	r3, [pc, #176]	; (800eaa8 <HAL_RCC_ClockConfig+0x244>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	f003 0304 	and.w	r3, r3, #4
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d101      	bne.n	800ea04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ea00:	2301      	movs	r3, #1
 800ea02:	e0d6      	b.n	800ebb2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ea04:	4b28      	ldr	r3, [pc, #160]	; (800eaa8 <HAL_RCC_ClockConfig+0x244>)
 800ea06:	691b      	ldr	r3, [r3, #16]
 800ea08:	f023 0207 	bic.w	r2, r3, #7
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	685b      	ldr	r3, [r3, #4]
 800ea10:	4925      	ldr	r1, [pc, #148]	; (800eaa8 <HAL_RCC_ClockConfig+0x244>)
 800ea12:	4313      	orrs	r3, r2
 800ea14:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ea16:	f7f7 faa7 	bl	8005f68 <HAL_GetTick>
 800ea1a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ea1c:	e00a      	b.n	800ea34 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ea1e:	f7f7 faa3 	bl	8005f68 <HAL_GetTick>
 800ea22:	4602      	mov	r2, r0
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	1ad3      	subs	r3, r2, r3
 800ea28:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea2c:	4293      	cmp	r3, r2
 800ea2e:	d901      	bls.n	800ea34 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800ea30:	2303      	movs	r3, #3
 800ea32:	e0be      	b.n	800ebb2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ea34:	4b1c      	ldr	r3, [pc, #112]	; (800eaa8 <HAL_RCC_ClockConfig+0x244>)
 800ea36:	691b      	ldr	r3, [r3, #16]
 800ea38:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	685b      	ldr	r3, [r3, #4]
 800ea40:	00db      	lsls	r3, r3, #3
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d1eb      	bne.n	800ea1e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	f003 0302 	and.w	r3, r3, #2
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d010      	beq.n	800ea74 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	68da      	ldr	r2, [r3, #12]
 800ea56:	4b14      	ldr	r3, [pc, #80]	; (800eaa8 <HAL_RCC_ClockConfig+0x244>)
 800ea58:	699b      	ldr	r3, [r3, #24]
 800ea5a:	f003 030f 	and.w	r3, r3, #15
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	d208      	bcs.n	800ea74 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ea62:	4b11      	ldr	r3, [pc, #68]	; (800eaa8 <HAL_RCC_ClockConfig+0x244>)
 800ea64:	699b      	ldr	r3, [r3, #24]
 800ea66:	f023 020f 	bic.w	r2, r3, #15
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	68db      	ldr	r3, [r3, #12]
 800ea6e:	490e      	ldr	r1, [pc, #56]	; (800eaa8 <HAL_RCC_ClockConfig+0x244>)
 800ea70:	4313      	orrs	r3, r2
 800ea72:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ea74:	4b0b      	ldr	r3, [pc, #44]	; (800eaa4 <HAL_RCC_ClockConfig+0x240>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	f003 030f 	and.w	r3, r3, #15
 800ea7c:	683a      	ldr	r2, [r7, #0]
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d214      	bcs.n	800eaac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ea82:	4b08      	ldr	r3, [pc, #32]	; (800eaa4 <HAL_RCC_ClockConfig+0x240>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	f023 020f 	bic.w	r2, r3, #15
 800ea8a:	4906      	ldr	r1, [pc, #24]	; (800eaa4 <HAL_RCC_ClockConfig+0x240>)
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	4313      	orrs	r3, r2
 800ea90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ea92:	4b04      	ldr	r3, [pc, #16]	; (800eaa4 <HAL_RCC_ClockConfig+0x240>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	f003 030f 	and.w	r3, r3, #15
 800ea9a:	683a      	ldr	r2, [r7, #0]
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	d005      	beq.n	800eaac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	e086      	b.n	800ebb2 <HAL_RCC_ClockConfig+0x34e>
 800eaa4:	52002000 	.word	0x52002000
 800eaa8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	f003 0304 	and.w	r3, r3, #4
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d010      	beq.n	800eada <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	691a      	ldr	r2, [r3, #16]
 800eabc:	4b3f      	ldr	r3, [pc, #252]	; (800ebbc <HAL_RCC_ClockConfig+0x358>)
 800eabe:	699b      	ldr	r3, [r3, #24]
 800eac0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d208      	bcs.n	800eada <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800eac8:	4b3c      	ldr	r3, [pc, #240]	; (800ebbc <HAL_RCC_ClockConfig+0x358>)
 800eaca:	699b      	ldr	r3, [r3, #24]
 800eacc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	691b      	ldr	r3, [r3, #16]
 800ead4:	4939      	ldr	r1, [pc, #228]	; (800ebbc <HAL_RCC_ClockConfig+0x358>)
 800ead6:	4313      	orrs	r3, r2
 800ead8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	f003 0308 	and.w	r3, r3, #8
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d010      	beq.n	800eb08 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	695a      	ldr	r2, [r3, #20]
 800eaea:	4b34      	ldr	r3, [pc, #208]	; (800ebbc <HAL_RCC_ClockConfig+0x358>)
 800eaec:	69db      	ldr	r3, [r3, #28]
 800eaee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d208      	bcs.n	800eb08 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800eaf6:	4b31      	ldr	r3, [pc, #196]	; (800ebbc <HAL_RCC_ClockConfig+0x358>)
 800eaf8:	69db      	ldr	r3, [r3, #28]
 800eafa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	695b      	ldr	r3, [r3, #20]
 800eb02:	492e      	ldr	r1, [pc, #184]	; (800ebbc <HAL_RCC_ClockConfig+0x358>)
 800eb04:	4313      	orrs	r3, r2
 800eb06:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	f003 0310 	and.w	r3, r3, #16
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d010      	beq.n	800eb36 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	699a      	ldr	r2, [r3, #24]
 800eb18:	4b28      	ldr	r3, [pc, #160]	; (800ebbc <HAL_RCC_ClockConfig+0x358>)
 800eb1a:	69db      	ldr	r3, [r3, #28]
 800eb1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eb20:	429a      	cmp	r2, r3
 800eb22:	d208      	bcs.n	800eb36 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800eb24:	4b25      	ldr	r3, [pc, #148]	; (800ebbc <HAL_RCC_ClockConfig+0x358>)
 800eb26:	69db      	ldr	r3, [r3, #28]
 800eb28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	699b      	ldr	r3, [r3, #24]
 800eb30:	4922      	ldr	r1, [pc, #136]	; (800ebbc <HAL_RCC_ClockConfig+0x358>)
 800eb32:	4313      	orrs	r3, r2
 800eb34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	f003 0320 	and.w	r3, r3, #32
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d010      	beq.n	800eb64 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	69da      	ldr	r2, [r3, #28]
 800eb46:	4b1d      	ldr	r3, [pc, #116]	; (800ebbc <HAL_RCC_ClockConfig+0x358>)
 800eb48:	6a1b      	ldr	r3, [r3, #32]
 800eb4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	d208      	bcs.n	800eb64 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800eb52:	4b1a      	ldr	r3, [pc, #104]	; (800ebbc <HAL_RCC_ClockConfig+0x358>)
 800eb54:	6a1b      	ldr	r3, [r3, #32]
 800eb56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	69db      	ldr	r3, [r3, #28]
 800eb5e:	4917      	ldr	r1, [pc, #92]	; (800ebbc <HAL_RCC_ClockConfig+0x358>)
 800eb60:	4313      	orrs	r3, r2
 800eb62:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800eb64:	f000 f834 	bl	800ebd0 <HAL_RCC_GetSysClockFreq>
 800eb68:	4602      	mov	r2, r0
 800eb6a:	4b14      	ldr	r3, [pc, #80]	; (800ebbc <HAL_RCC_ClockConfig+0x358>)
 800eb6c:	699b      	ldr	r3, [r3, #24]
 800eb6e:	0a1b      	lsrs	r3, r3, #8
 800eb70:	f003 030f 	and.w	r3, r3, #15
 800eb74:	4912      	ldr	r1, [pc, #72]	; (800ebc0 <HAL_RCC_ClockConfig+0x35c>)
 800eb76:	5ccb      	ldrb	r3, [r1, r3]
 800eb78:	f003 031f 	and.w	r3, r3, #31
 800eb7c:	fa22 f303 	lsr.w	r3, r2, r3
 800eb80:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800eb82:	4b0e      	ldr	r3, [pc, #56]	; (800ebbc <HAL_RCC_ClockConfig+0x358>)
 800eb84:	699b      	ldr	r3, [r3, #24]
 800eb86:	f003 030f 	and.w	r3, r3, #15
 800eb8a:	4a0d      	ldr	r2, [pc, #52]	; (800ebc0 <HAL_RCC_ClockConfig+0x35c>)
 800eb8c:	5cd3      	ldrb	r3, [r2, r3]
 800eb8e:	f003 031f 	and.w	r3, r3, #31
 800eb92:	693a      	ldr	r2, [r7, #16]
 800eb94:	fa22 f303 	lsr.w	r3, r2, r3
 800eb98:	4a0a      	ldr	r2, [pc, #40]	; (800ebc4 <HAL_RCC_ClockConfig+0x360>)
 800eb9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800eb9c:	4a0a      	ldr	r2, [pc, #40]	; (800ebc8 <HAL_RCC_ClockConfig+0x364>)
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800eba2:	4b0a      	ldr	r3, [pc, #40]	; (800ebcc <HAL_RCC_ClockConfig+0x368>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7f5 fd9c 	bl	80046e4 <HAL_InitTick>
 800ebac:	4603      	mov	r3, r0
 800ebae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ebb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	3718      	adds	r7, #24
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}
 800ebba:	bf00      	nop
 800ebbc:	58024400 	.word	0x58024400
 800ebc0:	0801b524 	.word	0x0801b524
 800ebc4:	240000c4 	.word	0x240000c4
 800ebc8:	240000c0 	.word	0x240000c0
 800ebcc:	240000c8 	.word	0x240000c8

0800ebd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b089      	sub	sp, #36	; 0x24
 800ebd4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ebd6:	4bb3      	ldr	r3, [pc, #716]	; (800eea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ebd8:	691b      	ldr	r3, [r3, #16]
 800ebda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ebde:	2b18      	cmp	r3, #24
 800ebe0:	f200 8155 	bhi.w	800ee8e <HAL_RCC_GetSysClockFreq+0x2be>
 800ebe4:	a201      	add	r2, pc, #4	; (adr r2, 800ebec <HAL_RCC_GetSysClockFreq+0x1c>)
 800ebe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebea:	bf00      	nop
 800ebec:	0800ec51 	.word	0x0800ec51
 800ebf0:	0800ee8f 	.word	0x0800ee8f
 800ebf4:	0800ee8f 	.word	0x0800ee8f
 800ebf8:	0800ee8f 	.word	0x0800ee8f
 800ebfc:	0800ee8f 	.word	0x0800ee8f
 800ec00:	0800ee8f 	.word	0x0800ee8f
 800ec04:	0800ee8f 	.word	0x0800ee8f
 800ec08:	0800ee8f 	.word	0x0800ee8f
 800ec0c:	0800ec77 	.word	0x0800ec77
 800ec10:	0800ee8f 	.word	0x0800ee8f
 800ec14:	0800ee8f 	.word	0x0800ee8f
 800ec18:	0800ee8f 	.word	0x0800ee8f
 800ec1c:	0800ee8f 	.word	0x0800ee8f
 800ec20:	0800ee8f 	.word	0x0800ee8f
 800ec24:	0800ee8f 	.word	0x0800ee8f
 800ec28:	0800ee8f 	.word	0x0800ee8f
 800ec2c:	0800ec7d 	.word	0x0800ec7d
 800ec30:	0800ee8f 	.word	0x0800ee8f
 800ec34:	0800ee8f 	.word	0x0800ee8f
 800ec38:	0800ee8f 	.word	0x0800ee8f
 800ec3c:	0800ee8f 	.word	0x0800ee8f
 800ec40:	0800ee8f 	.word	0x0800ee8f
 800ec44:	0800ee8f 	.word	0x0800ee8f
 800ec48:	0800ee8f 	.word	0x0800ee8f
 800ec4c:	0800ec83 	.word	0x0800ec83
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ec50:	4b94      	ldr	r3, [pc, #592]	; (800eea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	f003 0320 	and.w	r3, r3, #32
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d009      	beq.n	800ec70 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ec5c:	4b91      	ldr	r3, [pc, #580]	; (800eea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	08db      	lsrs	r3, r3, #3
 800ec62:	f003 0303 	and.w	r3, r3, #3
 800ec66:	4a90      	ldr	r2, [pc, #576]	; (800eea8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ec68:	fa22 f303 	lsr.w	r3, r2, r3
 800ec6c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ec6e:	e111      	b.n	800ee94 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ec70:	4b8d      	ldr	r3, [pc, #564]	; (800eea8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ec72:	61bb      	str	r3, [r7, #24]
      break;
 800ec74:	e10e      	b.n	800ee94 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ec76:	4b8d      	ldr	r3, [pc, #564]	; (800eeac <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ec78:	61bb      	str	r3, [r7, #24]
      break;
 800ec7a:	e10b      	b.n	800ee94 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ec7c:	4b8c      	ldr	r3, [pc, #560]	; (800eeb0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ec7e:	61bb      	str	r3, [r7, #24]
      break;
 800ec80:	e108      	b.n	800ee94 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ec82:	4b88      	ldr	r3, [pc, #544]	; (800eea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ec84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec86:	f003 0303 	and.w	r3, r3, #3
 800ec8a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ec8c:	4b85      	ldr	r3, [pc, #532]	; (800eea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ec8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec90:	091b      	lsrs	r3, r3, #4
 800ec92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ec96:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ec98:	4b82      	ldr	r3, [pc, #520]	; (800eea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ec9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec9c:	f003 0301 	and.w	r3, r3, #1
 800eca0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800eca2:	4b80      	ldr	r3, [pc, #512]	; (800eea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eca6:	08db      	lsrs	r3, r3, #3
 800eca8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ecac:	68fa      	ldr	r2, [r7, #12]
 800ecae:	fb02 f303 	mul.w	r3, r2, r3
 800ecb2:	ee07 3a90 	vmov	s15, r3
 800ecb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	f000 80e1 	beq.w	800ee88 <HAL_RCC_GetSysClockFreq+0x2b8>
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	2b02      	cmp	r3, #2
 800ecca:	f000 8083 	beq.w	800edd4 <HAL_RCC_GetSysClockFreq+0x204>
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	2b02      	cmp	r3, #2
 800ecd2:	f200 80a1 	bhi.w	800ee18 <HAL_RCC_GetSysClockFreq+0x248>
 800ecd6:	697b      	ldr	r3, [r7, #20]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d003      	beq.n	800ece4 <HAL_RCC_GetSysClockFreq+0x114>
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	2b01      	cmp	r3, #1
 800ece0:	d056      	beq.n	800ed90 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ece2:	e099      	b.n	800ee18 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ece4:	4b6f      	ldr	r3, [pc, #444]	; (800eea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	f003 0320 	and.w	r3, r3, #32
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d02d      	beq.n	800ed4c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ecf0:	4b6c      	ldr	r3, [pc, #432]	; (800eea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	08db      	lsrs	r3, r3, #3
 800ecf6:	f003 0303 	and.w	r3, r3, #3
 800ecfa:	4a6b      	ldr	r2, [pc, #428]	; (800eea8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ecfc:	fa22 f303 	lsr.w	r3, r2, r3
 800ed00:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	ee07 3a90 	vmov	s15, r3
 800ed08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	ee07 3a90 	vmov	s15, r3
 800ed12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ed1a:	4b62      	ldr	r3, [pc, #392]	; (800eea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ed1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed22:	ee07 3a90 	vmov	s15, r3
 800ed26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed2a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ed2e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800eeb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ed32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ed3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed46:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ed4a:	e087      	b.n	800ee5c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	ee07 3a90 	vmov	s15, r3
 800ed52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed56:	eddf 6a58 	vldr	s13, [pc, #352]	; 800eeb8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ed5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ed5e:	4b51      	ldr	r3, [pc, #324]	; (800eea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ed60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed66:	ee07 3a90 	vmov	s15, r3
 800ed6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed6e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ed72:	eddf 5a50 	vldr	s11, [pc, #320]	; 800eeb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ed76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ed82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ed8e:	e065      	b.n	800ee5c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	ee07 3a90 	vmov	s15, r3
 800ed96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed9a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800eebc <HAL_RCC_GetSysClockFreq+0x2ec>
 800ed9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eda2:	4b40      	ldr	r3, [pc, #256]	; (800eea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eda4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eda6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edaa:	ee07 3a90 	vmov	s15, r3
 800edae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800edb2:	ed97 6a02 	vldr	s12, [r7, #8]
 800edb6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800eeb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800edba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800edbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800edc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800edc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800edca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800edd2:	e043      	b.n	800ee5c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800edd4:	693b      	ldr	r3, [r7, #16]
 800edd6:	ee07 3a90 	vmov	s15, r3
 800edda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800edde:	eddf 6a38 	vldr	s13, [pc, #224]	; 800eec0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ede2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ede6:	4b2f      	ldr	r3, [pc, #188]	; (800eea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ede8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edee:	ee07 3a90 	vmov	s15, r3
 800edf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800edf6:	ed97 6a02 	vldr	s12, [r7, #8]
 800edfa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800eeb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800edfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ee02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ee06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ee0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ee16:	e021      	b.n	800ee5c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	ee07 3a90 	vmov	s15, r3
 800ee1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee22:	eddf 6a26 	vldr	s13, [pc, #152]	; 800eebc <HAL_RCC_GetSysClockFreq+0x2ec>
 800ee26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ee2a:	4b1e      	ldr	r3, [pc, #120]	; (800eea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ee2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee32:	ee07 3a90 	vmov	s15, r3
 800ee36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee3a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ee3e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800eeb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ee42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ee46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ee4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ee4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ee5a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ee5c:	4b11      	ldr	r3, [pc, #68]	; (800eea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ee5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee60:	0a5b      	lsrs	r3, r3, #9
 800ee62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee66:	3301      	adds	r3, #1
 800ee68:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	ee07 3a90 	vmov	s15, r3
 800ee70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ee74:	edd7 6a07 	vldr	s13, [r7, #28]
 800ee78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ee7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ee80:	ee17 3a90 	vmov	r3, s15
 800ee84:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ee86:	e005      	b.n	800ee94 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ee88:	2300      	movs	r3, #0
 800ee8a:	61bb      	str	r3, [r7, #24]
      break;
 800ee8c:	e002      	b.n	800ee94 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ee8e:	4b07      	ldr	r3, [pc, #28]	; (800eeac <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ee90:	61bb      	str	r3, [r7, #24]
      break;
 800ee92:	bf00      	nop
  }

  return sysclockfreq;
 800ee94:	69bb      	ldr	r3, [r7, #24]
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3724      	adds	r7, #36	; 0x24
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea0:	4770      	bx	lr
 800eea2:	bf00      	nop
 800eea4:	58024400 	.word	0x58024400
 800eea8:	03d09000 	.word	0x03d09000
 800eeac:	003d0900 	.word	0x003d0900
 800eeb0:	017d7840 	.word	0x017d7840
 800eeb4:	46000000 	.word	0x46000000
 800eeb8:	4c742400 	.word	0x4c742400
 800eebc:	4a742400 	.word	0x4a742400
 800eec0:	4bbebc20 	.word	0x4bbebc20

0800eec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b082      	sub	sp, #8
 800eec8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800eeca:	f7ff fe81 	bl	800ebd0 <HAL_RCC_GetSysClockFreq>
 800eece:	4602      	mov	r2, r0
 800eed0:	4b10      	ldr	r3, [pc, #64]	; (800ef14 <HAL_RCC_GetHCLKFreq+0x50>)
 800eed2:	699b      	ldr	r3, [r3, #24]
 800eed4:	0a1b      	lsrs	r3, r3, #8
 800eed6:	f003 030f 	and.w	r3, r3, #15
 800eeda:	490f      	ldr	r1, [pc, #60]	; (800ef18 <HAL_RCC_GetHCLKFreq+0x54>)
 800eedc:	5ccb      	ldrb	r3, [r1, r3]
 800eede:	f003 031f 	and.w	r3, r3, #31
 800eee2:	fa22 f303 	lsr.w	r3, r2, r3
 800eee6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800eee8:	4b0a      	ldr	r3, [pc, #40]	; (800ef14 <HAL_RCC_GetHCLKFreq+0x50>)
 800eeea:	699b      	ldr	r3, [r3, #24]
 800eeec:	f003 030f 	and.w	r3, r3, #15
 800eef0:	4a09      	ldr	r2, [pc, #36]	; (800ef18 <HAL_RCC_GetHCLKFreq+0x54>)
 800eef2:	5cd3      	ldrb	r3, [r2, r3]
 800eef4:	f003 031f 	and.w	r3, r3, #31
 800eef8:	687a      	ldr	r2, [r7, #4]
 800eefa:	fa22 f303 	lsr.w	r3, r2, r3
 800eefe:	4a07      	ldr	r2, [pc, #28]	; (800ef1c <HAL_RCC_GetHCLKFreq+0x58>)
 800ef00:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ef02:	4a07      	ldr	r2, [pc, #28]	; (800ef20 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ef08:	4b04      	ldr	r3, [pc, #16]	; (800ef1c <HAL_RCC_GetHCLKFreq+0x58>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	3708      	adds	r7, #8
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}
 800ef14:	58024400 	.word	0x58024400
 800ef18:	0801b524 	.word	0x0801b524
 800ef1c:	240000c4 	.word	0x240000c4
 800ef20:	240000c0 	.word	0x240000c0

0800ef24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ef28:	f7ff ffcc 	bl	800eec4 <HAL_RCC_GetHCLKFreq>
 800ef2c:	4602      	mov	r2, r0
 800ef2e:	4b06      	ldr	r3, [pc, #24]	; (800ef48 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ef30:	69db      	ldr	r3, [r3, #28]
 800ef32:	091b      	lsrs	r3, r3, #4
 800ef34:	f003 0307 	and.w	r3, r3, #7
 800ef38:	4904      	ldr	r1, [pc, #16]	; (800ef4c <HAL_RCC_GetPCLK1Freq+0x28>)
 800ef3a:	5ccb      	ldrb	r3, [r1, r3]
 800ef3c:	f003 031f 	and.w	r3, r3, #31
 800ef40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	bd80      	pop	{r7, pc}
 800ef48:	58024400 	.word	0x58024400
 800ef4c:	0801b524 	.word	0x0801b524

0800ef50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ef54:	f7ff ffb6 	bl	800eec4 <HAL_RCC_GetHCLKFreq>
 800ef58:	4602      	mov	r2, r0
 800ef5a:	4b06      	ldr	r3, [pc, #24]	; (800ef74 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ef5c:	69db      	ldr	r3, [r3, #28]
 800ef5e:	0a1b      	lsrs	r3, r3, #8
 800ef60:	f003 0307 	and.w	r3, r3, #7
 800ef64:	4904      	ldr	r1, [pc, #16]	; (800ef78 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ef66:	5ccb      	ldrb	r3, [r1, r3]
 800ef68:	f003 031f 	and.w	r3, r3, #31
 800ef6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	bd80      	pop	{r7, pc}
 800ef74:	58024400 	.word	0x58024400
 800ef78:	0801b524 	.word	0x0801b524

0800ef7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ef7c:	b480      	push	{r7}
 800ef7e:	b083      	sub	sp, #12
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
 800ef84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	223f      	movs	r2, #63	; 0x3f
 800ef8a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ef8c:	4b1a      	ldr	r3, [pc, #104]	; (800eff8 <HAL_RCC_GetClockConfig+0x7c>)
 800ef8e:	691b      	ldr	r3, [r3, #16]
 800ef90:	f003 0207 	and.w	r2, r3, #7
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800ef98:	4b17      	ldr	r3, [pc, #92]	; (800eff8 <HAL_RCC_GetClockConfig+0x7c>)
 800ef9a:	699b      	ldr	r3, [r3, #24]
 800ef9c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800efa4:	4b14      	ldr	r3, [pc, #80]	; (800eff8 <HAL_RCC_GetClockConfig+0x7c>)
 800efa6:	699b      	ldr	r3, [r3, #24]
 800efa8:	f003 020f 	and.w	r2, r3, #15
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800efb0:	4b11      	ldr	r3, [pc, #68]	; (800eff8 <HAL_RCC_GetClockConfig+0x7c>)
 800efb2:	699b      	ldr	r3, [r3, #24]
 800efb4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800efbc:	4b0e      	ldr	r3, [pc, #56]	; (800eff8 <HAL_RCC_GetClockConfig+0x7c>)
 800efbe:	69db      	ldr	r3, [r3, #28]
 800efc0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800efc8:	4b0b      	ldr	r3, [pc, #44]	; (800eff8 <HAL_RCC_GetClockConfig+0x7c>)
 800efca:	69db      	ldr	r3, [r3, #28]
 800efcc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800efd4:	4b08      	ldr	r3, [pc, #32]	; (800eff8 <HAL_RCC_GetClockConfig+0x7c>)
 800efd6:	6a1b      	ldr	r3, [r3, #32]
 800efd8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800efe0:	4b06      	ldr	r3, [pc, #24]	; (800effc <HAL_RCC_GetClockConfig+0x80>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	f003 020f 	and.w	r2, r3, #15
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	601a      	str	r2, [r3, #0]
}
 800efec:	bf00      	nop
 800efee:	370c      	adds	r7, #12
 800eff0:	46bd      	mov	sp, r7
 800eff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff6:	4770      	bx	lr
 800eff8:	58024400 	.word	0x58024400
 800effc:	52002000 	.word	0x52002000

0800f000 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f004:	b0ca      	sub	sp, #296	; 0x128
 800f006:	af00      	add	r7, sp, #0
 800f008:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800f00c:	2300      	movs	r3, #0
 800f00e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800f012:	2300      	movs	r3, #0
 800f014:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f020:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800f024:	2500      	movs	r5, #0
 800f026:	ea54 0305 	orrs.w	r3, r4, r5
 800f02a:	d049      	beq.n	800f0c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800f02c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f032:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f036:	d02f      	beq.n	800f098 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800f038:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f03c:	d828      	bhi.n	800f090 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800f03e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f042:	d01a      	beq.n	800f07a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800f044:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f048:	d822      	bhi.n	800f090 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d003      	beq.n	800f056 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800f04e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f052:	d007      	beq.n	800f064 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f054:	e01c      	b.n	800f090 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f056:	4bb8      	ldr	r3, [pc, #736]	; (800f338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f05a:	4ab7      	ldr	r2, [pc, #732]	; (800f338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f05c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f060:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f062:	e01a      	b.n	800f09a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f068:	3308      	adds	r3, #8
 800f06a:	2102      	movs	r1, #2
 800f06c:	4618      	mov	r0, r3
 800f06e:	f002 fb61 	bl	8011734 <RCCEx_PLL2_Config>
 800f072:	4603      	mov	r3, r0
 800f074:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f078:	e00f      	b.n	800f09a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f07a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f07e:	3328      	adds	r3, #40	; 0x28
 800f080:	2102      	movs	r1, #2
 800f082:	4618      	mov	r0, r3
 800f084:	f002 fc08 	bl	8011898 <RCCEx_PLL3_Config>
 800f088:	4603      	mov	r3, r0
 800f08a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f08e:	e004      	b.n	800f09a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f090:	2301      	movs	r3, #1
 800f092:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f096:	e000      	b.n	800f09a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800f098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f09a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d10a      	bne.n	800f0b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800f0a2:	4ba5      	ldr	r3, [pc, #660]	; (800f338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f0a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0a6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800f0aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f0b0:	4aa1      	ldr	r2, [pc, #644]	; (800f338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f0b2:	430b      	orrs	r3, r1
 800f0b4:	6513      	str	r3, [r2, #80]	; 0x50
 800f0b6:	e003      	b.n	800f0c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f0bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800f0c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800f0cc:	f04f 0900 	mov.w	r9, #0
 800f0d0:	ea58 0309 	orrs.w	r3, r8, r9
 800f0d4:	d047      	beq.n	800f166 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800f0d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0dc:	2b04      	cmp	r3, #4
 800f0de:	d82a      	bhi.n	800f136 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800f0e0:	a201      	add	r2, pc, #4	; (adr r2, 800f0e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800f0e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0e6:	bf00      	nop
 800f0e8:	0800f0fd 	.word	0x0800f0fd
 800f0ec:	0800f10b 	.word	0x0800f10b
 800f0f0:	0800f121 	.word	0x0800f121
 800f0f4:	0800f13f 	.word	0x0800f13f
 800f0f8:	0800f13f 	.word	0x0800f13f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f0fc:	4b8e      	ldr	r3, [pc, #568]	; (800f338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f100:	4a8d      	ldr	r2, [pc, #564]	; (800f338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f106:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f108:	e01a      	b.n	800f140 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f10a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f10e:	3308      	adds	r3, #8
 800f110:	2100      	movs	r1, #0
 800f112:	4618      	mov	r0, r3
 800f114:	f002 fb0e 	bl	8011734 <RCCEx_PLL2_Config>
 800f118:	4603      	mov	r3, r0
 800f11a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f11e:	e00f      	b.n	800f140 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f124:	3328      	adds	r3, #40	; 0x28
 800f126:	2100      	movs	r1, #0
 800f128:	4618      	mov	r0, r3
 800f12a:	f002 fbb5 	bl	8011898 <RCCEx_PLL3_Config>
 800f12e:	4603      	mov	r3, r0
 800f130:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f134:	e004      	b.n	800f140 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f136:	2301      	movs	r3, #1
 800f138:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f13c:	e000      	b.n	800f140 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800f13e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f140:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f144:	2b00      	cmp	r3, #0
 800f146:	d10a      	bne.n	800f15e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f148:	4b7b      	ldr	r3, [pc, #492]	; (800f338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f14a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f14c:	f023 0107 	bic.w	r1, r3, #7
 800f150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f156:	4a78      	ldr	r2, [pc, #480]	; (800f338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f158:	430b      	orrs	r3, r1
 800f15a:	6513      	str	r3, [r2, #80]	; 0x50
 800f15c:	e003      	b.n	800f166 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f15e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f162:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800f166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f16e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800f172:	f04f 0b00 	mov.w	fp, #0
 800f176:	ea5a 030b 	orrs.w	r3, sl, fp
 800f17a:	d04c      	beq.n	800f216 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800f17c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f186:	d030      	beq.n	800f1ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800f188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f18c:	d829      	bhi.n	800f1e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f18e:	2bc0      	cmp	r3, #192	; 0xc0
 800f190:	d02d      	beq.n	800f1ee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800f192:	2bc0      	cmp	r3, #192	; 0xc0
 800f194:	d825      	bhi.n	800f1e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f196:	2b80      	cmp	r3, #128	; 0x80
 800f198:	d018      	beq.n	800f1cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800f19a:	2b80      	cmp	r3, #128	; 0x80
 800f19c:	d821      	bhi.n	800f1e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d002      	beq.n	800f1a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800f1a2:	2b40      	cmp	r3, #64	; 0x40
 800f1a4:	d007      	beq.n	800f1b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800f1a6:	e01c      	b.n	800f1e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f1a8:	4b63      	ldr	r3, [pc, #396]	; (800f338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1ac:	4a62      	ldr	r2, [pc, #392]	; (800f338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f1ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f1b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f1b4:	e01c      	b.n	800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1ba:	3308      	adds	r3, #8
 800f1bc:	2100      	movs	r1, #0
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f002 fab8 	bl	8011734 <RCCEx_PLL2_Config>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f1ca:	e011      	b.n	800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f1cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1d0:	3328      	adds	r3, #40	; 0x28
 800f1d2:	2100      	movs	r1, #0
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f002 fb5f 	bl	8011898 <RCCEx_PLL3_Config>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f1e0:	e006      	b.n	800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f1e2:	2301      	movs	r3, #1
 800f1e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f1e8:	e002      	b.n	800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800f1ea:	bf00      	nop
 800f1ec:	e000      	b.n	800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800f1ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f1f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d10a      	bne.n	800f20e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800f1f8:	4b4f      	ldr	r3, [pc, #316]	; (800f338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f1fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1fc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800f200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f206:	4a4c      	ldr	r2, [pc, #304]	; (800f338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f208:	430b      	orrs	r3, r1
 800f20a:	6513      	str	r3, [r2, #80]	; 0x50
 800f20c:	e003      	b.n	800f216 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f20e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f212:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800f216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f21e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800f222:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800f226:	2300      	movs	r3, #0
 800f228:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800f22c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800f230:	460b      	mov	r3, r1
 800f232:	4313      	orrs	r3, r2
 800f234:	d053      	beq.n	800f2de <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800f236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f23a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f23e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f242:	d035      	beq.n	800f2b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800f244:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f248:	d82e      	bhi.n	800f2a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f24a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f24e:	d031      	beq.n	800f2b4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800f250:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f254:	d828      	bhi.n	800f2a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f256:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f25a:	d01a      	beq.n	800f292 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800f25c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f260:	d822      	bhi.n	800f2a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f262:	2b00      	cmp	r3, #0
 800f264:	d003      	beq.n	800f26e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800f266:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f26a:	d007      	beq.n	800f27c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800f26c:	e01c      	b.n	800f2a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f26e:	4b32      	ldr	r3, [pc, #200]	; (800f338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f272:	4a31      	ldr	r2, [pc, #196]	; (800f338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f278:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f27a:	e01c      	b.n	800f2b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f27c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f280:	3308      	adds	r3, #8
 800f282:	2100      	movs	r1, #0
 800f284:	4618      	mov	r0, r3
 800f286:	f002 fa55 	bl	8011734 <RCCEx_PLL2_Config>
 800f28a:	4603      	mov	r3, r0
 800f28c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800f290:	e011      	b.n	800f2b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f296:	3328      	adds	r3, #40	; 0x28
 800f298:	2100      	movs	r1, #0
 800f29a:	4618      	mov	r0, r3
 800f29c:	f002 fafc 	bl	8011898 <RCCEx_PLL3_Config>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f2a6:	e006      	b.n	800f2b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800f2a8:	2301      	movs	r3, #1
 800f2aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f2ae:	e002      	b.n	800f2b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800f2b0:	bf00      	nop
 800f2b2:	e000      	b.n	800f2b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800f2b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f2b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d10b      	bne.n	800f2d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800f2be:	4b1e      	ldr	r3, [pc, #120]	; (800f338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f2c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2c2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800f2c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f2ce:	4a1a      	ldr	r2, [pc, #104]	; (800f338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f2d0:	430b      	orrs	r3, r1
 800f2d2:	6593      	str	r3, [r2, #88]	; 0x58
 800f2d4:	e003      	b.n	800f2de <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f2d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f2da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800f2de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800f2ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f2f4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800f2f8:	460b      	mov	r3, r1
 800f2fa:	4313      	orrs	r3, r2
 800f2fc:	d056      	beq.n	800f3ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800f2fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f302:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f306:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f30a:	d038      	beq.n	800f37e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800f30c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f310:	d831      	bhi.n	800f376 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f312:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f316:	d034      	beq.n	800f382 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800f318:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f31c:	d82b      	bhi.n	800f376 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f31e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f322:	d01d      	beq.n	800f360 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800f324:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f328:	d825      	bhi.n	800f376 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d006      	beq.n	800f33c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800f32e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f332:	d00a      	beq.n	800f34a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800f334:	e01f      	b.n	800f376 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f336:	bf00      	nop
 800f338:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f33c:	4ba2      	ldr	r3, [pc, #648]	; (800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f340:	4aa1      	ldr	r2, [pc, #644]	; (800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f346:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f348:	e01c      	b.n	800f384 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f34a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f34e:	3308      	adds	r3, #8
 800f350:	2100      	movs	r1, #0
 800f352:	4618      	mov	r0, r3
 800f354:	f002 f9ee 	bl	8011734 <RCCEx_PLL2_Config>
 800f358:	4603      	mov	r3, r0
 800f35a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800f35e:	e011      	b.n	800f384 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f364:	3328      	adds	r3, #40	; 0x28
 800f366:	2100      	movs	r1, #0
 800f368:	4618      	mov	r0, r3
 800f36a:	f002 fa95 	bl	8011898 <RCCEx_PLL3_Config>
 800f36e:	4603      	mov	r3, r0
 800f370:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f374:	e006      	b.n	800f384 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800f376:	2301      	movs	r3, #1
 800f378:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f37c:	e002      	b.n	800f384 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800f37e:	bf00      	nop
 800f380:	e000      	b.n	800f384 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800f382:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f384:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d10b      	bne.n	800f3a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800f38c:	4b8e      	ldr	r3, [pc, #568]	; (800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f38e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f390:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800f394:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f398:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f39c:	4a8a      	ldr	r2, [pc, #552]	; (800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f39e:	430b      	orrs	r3, r1
 800f3a0:	6593      	str	r3, [r2, #88]	; 0x58
 800f3a2:	e003      	b.n	800f3ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f3a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f3a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800f3ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800f3b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f3bc:	2300      	movs	r3, #0
 800f3be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f3c2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800f3c6:	460b      	mov	r3, r1
 800f3c8:	4313      	orrs	r3, r2
 800f3ca:	d03a      	beq.n	800f442 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800f3cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f3d2:	2b30      	cmp	r3, #48	; 0x30
 800f3d4:	d01f      	beq.n	800f416 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800f3d6:	2b30      	cmp	r3, #48	; 0x30
 800f3d8:	d819      	bhi.n	800f40e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800f3da:	2b20      	cmp	r3, #32
 800f3dc:	d00c      	beq.n	800f3f8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800f3de:	2b20      	cmp	r3, #32
 800f3e0:	d815      	bhi.n	800f40e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d019      	beq.n	800f41a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800f3e6:	2b10      	cmp	r3, #16
 800f3e8:	d111      	bne.n	800f40e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f3ea:	4b77      	ldr	r3, [pc, #476]	; (800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3ee:	4a76      	ldr	r2, [pc, #472]	; (800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f3f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f3f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800f3f6:	e011      	b.n	800f41c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f3f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3fc:	3308      	adds	r3, #8
 800f3fe:	2102      	movs	r1, #2
 800f400:	4618      	mov	r0, r3
 800f402:	f002 f997 	bl	8011734 <RCCEx_PLL2_Config>
 800f406:	4603      	mov	r3, r0
 800f408:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800f40c:	e006      	b.n	800f41c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f40e:	2301      	movs	r3, #1
 800f410:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f414:	e002      	b.n	800f41c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800f416:	bf00      	nop
 800f418:	e000      	b.n	800f41c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800f41a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f41c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f420:	2b00      	cmp	r3, #0
 800f422:	d10a      	bne.n	800f43a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800f424:	4b68      	ldr	r3, [pc, #416]	; (800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f428:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800f42c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f432:	4a65      	ldr	r2, [pc, #404]	; (800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f434:	430b      	orrs	r3, r1
 800f436:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f438:	e003      	b.n	800f442 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f43a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f43e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800f442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f44a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800f44e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f452:	2300      	movs	r3, #0
 800f454:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f458:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800f45c:	460b      	mov	r3, r1
 800f45e:	4313      	orrs	r3, r2
 800f460:	d051      	beq.n	800f506 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800f462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f468:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f46c:	d035      	beq.n	800f4da <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800f46e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f472:	d82e      	bhi.n	800f4d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f474:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f478:	d031      	beq.n	800f4de <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800f47a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f47e:	d828      	bhi.n	800f4d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f484:	d01a      	beq.n	800f4bc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800f486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f48a:	d822      	bhi.n	800f4d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d003      	beq.n	800f498 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800f490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f494:	d007      	beq.n	800f4a6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800f496:	e01c      	b.n	800f4d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f498:	4b4b      	ldr	r3, [pc, #300]	; (800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f49c:	4a4a      	ldr	r2, [pc, #296]	; (800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f49e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f4a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f4a4:	e01c      	b.n	800f4e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f4a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4aa:	3308      	adds	r3, #8
 800f4ac:	2100      	movs	r1, #0
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f002 f940 	bl	8011734 <RCCEx_PLL2_Config>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f4ba:	e011      	b.n	800f4e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f4bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4c0:	3328      	adds	r3, #40	; 0x28
 800f4c2:	2100      	movs	r1, #0
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f002 f9e7 	bl	8011898 <RCCEx_PLL3_Config>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f4d0:	e006      	b.n	800f4e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f4d2:	2301      	movs	r3, #1
 800f4d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f4d8:	e002      	b.n	800f4e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800f4da:	bf00      	nop
 800f4dc:	e000      	b.n	800f4e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800f4de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f4e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d10a      	bne.n	800f4fe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800f4e8:	4b37      	ldr	r3, [pc, #220]	; (800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f4ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4ec:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800f4f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f4f6:	4a34      	ldr	r2, [pc, #208]	; (800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f4f8:	430b      	orrs	r3, r1
 800f4fa:	6513      	str	r3, [r2, #80]	; 0x50
 800f4fc:	e003      	b.n	800f506 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f4fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f502:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800f506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f50e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800f512:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f516:	2300      	movs	r3, #0
 800f518:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f51c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800f520:	460b      	mov	r3, r1
 800f522:	4313      	orrs	r3, r2
 800f524:	d056      	beq.n	800f5d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800f526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f52a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f52c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f530:	d033      	beq.n	800f59a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800f532:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f536:	d82c      	bhi.n	800f592 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f538:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f53c:	d02f      	beq.n	800f59e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800f53e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f542:	d826      	bhi.n	800f592 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f544:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f548:	d02b      	beq.n	800f5a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800f54a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f54e:	d820      	bhi.n	800f592 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f554:	d012      	beq.n	800f57c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800f556:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f55a:	d81a      	bhi.n	800f592 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d022      	beq.n	800f5a6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800f560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f564:	d115      	bne.n	800f592 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f56a:	3308      	adds	r3, #8
 800f56c:	2101      	movs	r1, #1
 800f56e:	4618      	mov	r0, r3
 800f570:	f002 f8e0 	bl	8011734 <RCCEx_PLL2_Config>
 800f574:	4603      	mov	r3, r0
 800f576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f57a:	e015      	b.n	800f5a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f57c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f580:	3328      	adds	r3, #40	; 0x28
 800f582:	2101      	movs	r1, #1
 800f584:	4618      	mov	r0, r3
 800f586:	f002 f987 	bl	8011898 <RCCEx_PLL3_Config>
 800f58a:	4603      	mov	r3, r0
 800f58c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f590:	e00a      	b.n	800f5a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f592:	2301      	movs	r3, #1
 800f594:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f598:	e006      	b.n	800f5a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f59a:	bf00      	nop
 800f59c:	e004      	b.n	800f5a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f59e:	bf00      	nop
 800f5a0:	e002      	b.n	800f5a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f5a2:	bf00      	nop
 800f5a4:	e000      	b.n	800f5a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f5a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f5a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d10d      	bne.n	800f5cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800f5b0:	4b05      	ldr	r3, [pc, #20]	; (800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f5b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5b4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800f5b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5be:	4a02      	ldr	r2, [pc, #8]	; (800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f5c0:	430b      	orrs	r3, r1
 800f5c2:	6513      	str	r3, [r2, #80]	; 0x50
 800f5c4:	e006      	b.n	800f5d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800f5c6:	bf00      	nop
 800f5c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f5cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f5d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800f5d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5dc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800f5e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f5ea:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800f5ee:	460b      	mov	r3, r1
 800f5f0:	4313      	orrs	r3, r2
 800f5f2:	d055      	beq.n	800f6a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800f5f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f5fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f600:	d033      	beq.n	800f66a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800f602:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f606:	d82c      	bhi.n	800f662 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f60c:	d02f      	beq.n	800f66e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800f60e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f612:	d826      	bhi.n	800f662 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f614:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f618:	d02b      	beq.n	800f672 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800f61a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f61e:	d820      	bhi.n	800f662 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f620:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f624:	d012      	beq.n	800f64c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800f626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f62a:	d81a      	bhi.n	800f662 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d022      	beq.n	800f676 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800f630:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f634:	d115      	bne.n	800f662 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f63a:	3308      	adds	r3, #8
 800f63c:	2101      	movs	r1, #1
 800f63e:	4618      	mov	r0, r3
 800f640:	f002 f878 	bl	8011734 <RCCEx_PLL2_Config>
 800f644:	4603      	mov	r3, r0
 800f646:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f64a:	e015      	b.n	800f678 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f64c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f650:	3328      	adds	r3, #40	; 0x28
 800f652:	2101      	movs	r1, #1
 800f654:	4618      	mov	r0, r3
 800f656:	f002 f91f 	bl	8011898 <RCCEx_PLL3_Config>
 800f65a:	4603      	mov	r3, r0
 800f65c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f660:	e00a      	b.n	800f678 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800f662:	2301      	movs	r3, #1
 800f664:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f668:	e006      	b.n	800f678 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f66a:	bf00      	nop
 800f66c:	e004      	b.n	800f678 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f66e:	bf00      	nop
 800f670:	e002      	b.n	800f678 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f672:	bf00      	nop
 800f674:	e000      	b.n	800f678 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f676:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f678:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d10b      	bne.n	800f698 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800f680:	4ba3      	ldr	r3, [pc, #652]	; (800f910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f684:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800f688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f68c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f690:	4a9f      	ldr	r2, [pc, #636]	; (800f910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f692:	430b      	orrs	r3, r1
 800f694:	6593      	str	r3, [r2, #88]	; 0x58
 800f696:	e003      	b.n	800f6a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f698:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f69c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f6a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800f6ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f6b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800f6ba:	460b      	mov	r3, r1
 800f6bc:	4313      	orrs	r3, r2
 800f6be:	d037      	beq.n	800f730 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800f6c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f6ca:	d00e      	beq.n	800f6ea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800f6cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f6d0:	d816      	bhi.n	800f700 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d018      	beq.n	800f708 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800f6d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f6da:	d111      	bne.n	800f700 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f6dc:	4b8c      	ldr	r3, [pc, #560]	; (800f910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6e0:	4a8b      	ldr	r2, [pc, #556]	; (800f910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f6e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f6e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f6e8:	e00f      	b.n	800f70a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f6ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6ee:	3308      	adds	r3, #8
 800f6f0:	2101      	movs	r1, #1
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	f002 f81e 	bl	8011734 <RCCEx_PLL2_Config>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f6fe:	e004      	b.n	800f70a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f700:	2301      	movs	r3, #1
 800f702:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f706:	e000      	b.n	800f70a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800f708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f70a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d10a      	bne.n	800f728 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f712:	4b7f      	ldr	r3, [pc, #508]	; (800f910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f716:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800f71a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f71e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f720:	4a7b      	ldr	r2, [pc, #492]	; (800f910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f722:	430b      	orrs	r3, r1
 800f724:	6513      	str	r3, [r2, #80]	; 0x50
 800f726:	e003      	b.n	800f730 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f728:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f72c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f738:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800f73c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f740:	2300      	movs	r3, #0
 800f742:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f746:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800f74a:	460b      	mov	r3, r1
 800f74c:	4313      	orrs	r3, r2
 800f74e:	d039      	beq.n	800f7c4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800f750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f756:	2b03      	cmp	r3, #3
 800f758:	d81c      	bhi.n	800f794 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800f75a:	a201      	add	r2, pc, #4	; (adr r2, 800f760 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800f75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f760:	0800f79d 	.word	0x0800f79d
 800f764:	0800f771 	.word	0x0800f771
 800f768:	0800f77f 	.word	0x0800f77f
 800f76c:	0800f79d 	.word	0x0800f79d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f770:	4b67      	ldr	r3, [pc, #412]	; (800f910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f774:	4a66      	ldr	r2, [pc, #408]	; (800f910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f77a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f77c:	e00f      	b.n	800f79e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f77e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f782:	3308      	adds	r3, #8
 800f784:	2102      	movs	r1, #2
 800f786:	4618      	mov	r0, r3
 800f788:	f001 ffd4 	bl	8011734 <RCCEx_PLL2_Config>
 800f78c:	4603      	mov	r3, r0
 800f78e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f792:	e004      	b.n	800f79e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f794:	2301      	movs	r3, #1
 800f796:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f79a:	e000      	b.n	800f79e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800f79c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f79e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d10a      	bne.n	800f7bc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f7a6:	4b5a      	ldr	r3, [pc, #360]	; (800f910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f7a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7aa:	f023 0103 	bic.w	r1, r3, #3
 800f7ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f7b4:	4a56      	ldr	r2, [pc, #344]	; (800f910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f7b6:	430b      	orrs	r3, r1
 800f7b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f7ba:	e003      	b.n	800f7c4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f7bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f7c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f7c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7cc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800f7d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f7da:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800f7de:	460b      	mov	r3, r1
 800f7e0:	4313      	orrs	r3, r2
 800f7e2:	f000 809f 	beq.w	800f924 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f7e6:	4b4b      	ldr	r3, [pc, #300]	; (800f914 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	4a4a      	ldr	r2, [pc, #296]	; (800f914 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f7ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f7f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f7f2:	f7f6 fbb9 	bl	8005f68 <HAL_GetTick>
 800f7f6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f7fa:	e00b      	b.n	800f814 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f7fc:	f7f6 fbb4 	bl	8005f68 <HAL_GetTick>
 800f800:	4602      	mov	r2, r0
 800f802:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f806:	1ad3      	subs	r3, r2, r3
 800f808:	2b64      	cmp	r3, #100	; 0x64
 800f80a:	d903      	bls.n	800f814 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800f80c:	2303      	movs	r3, #3
 800f80e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f812:	e005      	b.n	800f820 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f814:	4b3f      	ldr	r3, [pc, #252]	; (800f914 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d0ed      	beq.n	800f7fc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800f820:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f824:	2b00      	cmp	r3, #0
 800f826:	d179      	bne.n	800f91c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f828:	4b39      	ldr	r3, [pc, #228]	; (800f910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f82a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f82c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f830:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f834:	4053      	eors	r3, r2
 800f836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d015      	beq.n	800f86a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f83e:	4b34      	ldr	r3, [pc, #208]	; (800f910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f846:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f84a:	4b31      	ldr	r3, [pc, #196]	; (800f910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f84c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f84e:	4a30      	ldr	r2, [pc, #192]	; (800f910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f854:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f856:	4b2e      	ldr	r3, [pc, #184]	; (800f910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f85a:	4a2d      	ldr	r2, [pc, #180]	; (800f910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f85c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f860:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800f862:	4a2b      	ldr	r2, [pc, #172]	; (800f910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f864:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f868:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f86a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f86e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f876:	d118      	bne.n	800f8aa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f878:	f7f6 fb76 	bl	8005f68 <HAL_GetTick>
 800f87c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f880:	e00d      	b.n	800f89e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f882:	f7f6 fb71 	bl	8005f68 <HAL_GetTick>
 800f886:	4602      	mov	r2, r0
 800f888:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f88c:	1ad2      	subs	r2, r2, r3
 800f88e:	f241 3388 	movw	r3, #5000	; 0x1388
 800f892:	429a      	cmp	r2, r3
 800f894:	d903      	bls.n	800f89e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800f896:	2303      	movs	r3, #3
 800f898:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800f89c:	e005      	b.n	800f8aa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f89e:	4b1c      	ldr	r3, [pc, #112]	; (800f910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f8a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8a2:	f003 0302 	and.w	r3, r3, #2
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d0eb      	beq.n	800f882 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800f8aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d129      	bne.n	800f906 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f8b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f8ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f8be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f8c2:	d10e      	bne.n	800f8e2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800f8c4:	4b12      	ldr	r3, [pc, #72]	; (800f910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f8c6:	691b      	ldr	r3, [r3, #16]
 800f8c8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800f8cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f8d4:	091a      	lsrs	r2, r3, #4
 800f8d6:	4b10      	ldr	r3, [pc, #64]	; (800f918 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800f8d8:	4013      	ands	r3, r2
 800f8da:	4a0d      	ldr	r2, [pc, #52]	; (800f910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f8dc:	430b      	orrs	r3, r1
 800f8de:	6113      	str	r3, [r2, #16]
 800f8e0:	e005      	b.n	800f8ee <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800f8e2:	4b0b      	ldr	r3, [pc, #44]	; (800f910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f8e4:	691b      	ldr	r3, [r3, #16]
 800f8e6:	4a0a      	ldr	r2, [pc, #40]	; (800f910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f8e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f8ec:	6113      	str	r3, [r2, #16]
 800f8ee:	4b08      	ldr	r3, [pc, #32]	; (800f910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f8f0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f8f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f8fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f8fe:	4a04      	ldr	r2, [pc, #16]	; (800f910 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f900:	430b      	orrs	r3, r1
 800f902:	6713      	str	r3, [r2, #112]	; 0x70
 800f904:	e00e      	b.n	800f924 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f906:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f90a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800f90e:	e009      	b.n	800f924 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800f910:	58024400 	.word	0x58024400
 800f914:	58024800 	.word	0x58024800
 800f918:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f91c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f920:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f92c:	f002 0301 	and.w	r3, r2, #1
 800f930:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f934:	2300      	movs	r3, #0
 800f936:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f93a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800f93e:	460b      	mov	r3, r1
 800f940:	4313      	orrs	r3, r2
 800f942:	f000 8089 	beq.w	800fa58 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800f946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f94a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f94c:	2b28      	cmp	r3, #40	; 0x28
 800f94e:	d86b      	bhi.n	800fa28 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800f950:	a201      	add	r2, pc, #4	; (adr r2, 800f958 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f956:	bf00      	nop
 800f958:	0800fa31 	.word	0x0800fa31
 800f95c:	0800fa29 	.word	0x0800fa29
 800f960:	0800fa29 	.word	0x0800fa29
 800f964:	0800fa29 	.word	0x0800fa29
 800f968:	0800fa29 	.word	0x0800fa29
 800f96c:	0800fa29 	.word	0x0800fa29
 800f970:	0800fa29 	.word	0x0800fa29
 800f974:	0800fa29 	.word	0x0800fa29
 800f978:	0800f9fd 	.word	0x0800f9fd
 800f97c:	0800fa29 	.word	0x0800fa29
 800f980:	0800fa29 	.word	0x0800fa29
 800f984:	0800fa29 	.word	0x0800fa29
 800f988:	0800fa29 	.word	0x0800fa29
 800f98c:	0800fa29 	.word	0x0800fa29
 800f990:	0800fa29 	.word	0x0800fa29
 800f994:	0800fa29 	.word	0x0800fa29
 800f998:	0800fa13 	.word	0x0800fa13
 800f99c:	0800fa29 	.word	0x0800fa29
 800f9a0:	0800fa29 	.word	0x0800fa29
 800f9a4:	0800fa29 	.word	0x0800fa29
 800f9a8:	0800fa29 	.word	0x0800fa29
 800f9ac:	0800fa29 	.word	0x0800fa29
 800f9b0:	0800fa29 	.word	0x0800fa29
 800f9b4:	0800fa29 	.word	0x0800fa29
 800f9b8:	0800fa31 	.word	0x0800fa31
 800f9bc:	0800fa29 	.word	0x0800fa29
 800f9c0:	0800fa29 	.word	0x0800fa29
 800f9c4:	0800fa29 	.word	0x0800fa29
 800f9c8:	0800fa29 	.word	0x0800fa29
 800f9cc:	0800fa29 	.word	0x0800fa29
 800f9d0:	0800fa29 	.word	0x0800fa29
 800f9d4:	0800fa29 	.word	0x0800fa29
 800f9d8:	0800fa31 	.word	0x0800fa31
 800f9dc:	0800fa29 	.word	0x0800fa29
 800f9e0:	0800fa29 	.word	0x0800fa29
 800f9e4:	0800fa29 	.word	0x0800fa29
 800f9e8:	0800fa29 	.word	0x0800fa29
 800f9ec:	0800fa29 	.word	0x0800fa29
 800f9f0:	0800fa29 	.word	0x0800fa29
 800f9f4:	0800fa29 	.word	0x0800fa29
 800f9f8:	0800fa31 	.word	0x0800fa31
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f9fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa00:	3308      	adds	r3, #8
 800fa02:	2101      	movs	r1, #1
 800fa04:	4618      	mov	r0, r3
 800fa06:	f001 fe95 	bl	8011734 <RCCEx_PLL2_Config>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800fa10:	e00f      	b.n	800fa32 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fa12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa16:	3328      	adds	r3, #40	; 0x28
 800fa18:	2101      	movs	r1, #1
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f001 ff3c 	bl	8011898 <RCCEx_PLL3_Config>
 800fa20:	4603      	mov	r3, r0
 800fa22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800fa26:	e004      	b.n	800fa32 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fa28:	2301      	movs	r3, #1
 800fa2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fa2e:	e000      	b.n	800fa32 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800fa30:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fa32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d10a      	bne.n	800fa50 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800fa3a:	4bbf      	ldr	r3, [pc, #764]	; (800fd38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fa3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa3e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800fa42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa48:	4abb      	ldr	r2, [pc, #748]	; (800fd38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fa4a:	430b      	orrs	r3, r1
 800fa4c:	6553      	str	r3, [r2, #84]	; 0x54
 800fa4e:	e003      	b.n	800fa58 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fa54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800fa58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa60:	f002 0302 	and.w	r3, r2, #2
 800fa64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fa68:	2300      	movs	r3, #0
 800fa6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fa6e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800fa72:	460b      	mov	r3, r1
 800fa74:	4313      	orrs	r3, r2
 800fa76:	d041      	beq.n	800fafc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800fa78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa7e:	2b05      	cmp	r3, #5
 800fa80:	d824      	bhi.n	800facc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800fa82:	a201      	add	r2, pc, #4	; (adr r2, 800fa88 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800fa84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa88:	0800fad5 	.word	0x0800fad5
 800fa8c:	0800faa1 	.word	0x0800faa1
 800fa90:	0800fab7 	.word	0x0800fab7
 800fa94:	0800fad5 	.word	0x0800fad5
 800fa98:	0800fad5 	.word	0x0800fad5
 800fa9c:	0800fad5 	.word	0x0800fad5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800faa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800faa4:	3308      	adds	r3, #8
 800faa6:	2101      	movs	r1, #1
 800faa8:	4618      	mov	r0, r3
 800faaa:	f001 fe43 	bl	8011734 <RCCEx_PLL2_Config>
 800faae:	4603      	mov	r3, r0
 800fab0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800fab4:	e00f      	b.n	800fad6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800faba:	3328      	adds	r3, #40	; 0x28
 800fabc:	2101      	movs	r1, #1
 800fabe:	4618      	mov	r0, r3
 800fac0:	f001 feea 	bl	8011898 <RCCEx_PLL3_Config>
 800fac4:	4603      	mov	r3, r0
 800fac6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800faca:	e004      	b.n	800fad6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800facc:	2301      	movs	r3, #1
 800face:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fad2:	e000      	b.n	800fad6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800fad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fad6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d10a      	bne.n	800faf4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800fade:	4b96      	ldr	r3, [pc, #600]	; (800fd38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fae2:	f023 0107 	bic.w	r1, r3, #7
 800fae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800faea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800faec:	4a92      	ldr	r2, [pc, #584]	; (800fd38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800faee:	430b      	orrs	r3, r1
 800faf0:	6553      	str	r3, [r2, #84]	; 0x54
 800faf2:	e003      	b.n	800fafc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800faf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800faf8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800fafc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb04:	f002 0304 	and.w	r3, r2, #4
 800fb08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fb12:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800fb16:	460b      	mov	r3, r1
 800fb18:	4313      	orrs	r3, r2
 800fb1a:	d044      	beq.n	800fba6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800fb1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fb24:	2b05      	cmp	r3, #5
 800fb26:	d825      	bhi.n	800fb74 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800fb28:	a201      	add	r2, pc, #4	; (adr r2, 800fb30 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800fb2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb2e:	bf00      	nop
 800fb30:	0800fb7d 	.word	0x0800fb7d
 800fb34:	0800fb49 	.word	0x0800fb49
 800fb38:	0800fb5f 	.word	0x0800fb5f
 800fb3c:	0800fb7d 	.word	0x0800fb7d
 800fb40:	0800fb7d 	.word	0x0800fb7d
 800fb44:	0800fb7d 	.word	0x0800fb7d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fb48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb4c:	3308      	adds	r3, #8
 800fb4e:	2101      	movs	r1, #1
 800fb50:	4618      	mov	r0, r3
 800fb52:	f001 fdef 	bl	8011734 <RCCEx_PLL2_Config>
 800fb56:	4603      	mov	r3, r0
 800fb58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800fb5c:	e00f      	b.n	800fb7e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fb5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb62:	3328      	adds	r3, #40	; 0x28
 800fb64:	2101      	movs	r1, #1
 800fb66:	4618      	mov	r0, r3
 800fb68:	f001 fe96 	bl	8011898 <RCCEx_PLL3_Config>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800fb72:	e004      	b.n	800fb7e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fb74:	2301      	movs	r3, #1
 800fb76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fb7a:	e000      	b.n	800fb7e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800fb7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fb7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d10b      	bne.n	800fb9e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800fb86:	4b6c      	ldr	r3, [pc, #432]	; (800fd38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fb88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb8a:	f023 0107 	bic.w	r1, r3, #7
 800fb8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fb96:	4a68      	ldr	r2, [pc, #416]	; (800fd38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fb98:	430b      	orrs	r3, r1
 800fb9a:	6593      	str	r3, [r2, #88]	; 0x58
 800fb9c:	e003      	b.n	800fba6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fba2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800fba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbae:	f002 0320 	and.w	r3, r2, #32
 800fbb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fbbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800fbc0:	460b      	mov	r3, r1
 800fbc2:	4313      	orrs	r3, r2
 800fbc4:	d055      	beq.n	800fc72 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800fbc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fbce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fbd2:	d033      	beq.n	800fc3c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800fbd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fbd8:	d82c      	bhi.n	800fc34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800fbda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fbde:	d02f      	beq.n	800fc40 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800fbe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fbe4:	d826      	bhi.n	800fc34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800fbe6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fbea:	d02b      	beq.n	800fc44 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800fbec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fbf0:	d820      	bhi.n	800fc34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800fbf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fbf6:	d012      	beq.n	800fc1e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800fbf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fbfc:	d81a      	bhi.n	800fc34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d022      	beq.n	800fc48 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800fc02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fc06:	d115      	bne.n	800fc34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fc08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc0c:	3308      	adds	r3, #8
 800fc0e:	2100      	movs	r1, #0
 800fc10:	4618      	mov	r0, r3
 800fc12:	f001 fd8f 	bl	8011734 <RCCEx_PLL2_Config>
 800fc16:	4603      	mov	r3, r0
 800fc18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800fc1c:	e015      	b.n	800fc4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fc1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc22:	3328      	adds	r3, #40	; 0x28
 800fc24:	2102      	movs	r1, #2
 800fc26:	4618      	mov	r0, r3
 800fc28:	f001 fe36 	bl	8011898 <RCCEx_PLL3_Config>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800fc32:	e00a      	b.n	800fc4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fc34:	2301      	movs	r3, #1
 800fc36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fc3a:	e006      	b.n	800fc4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800fc3c:	bf00      	nop
 800fc3e:	e004      	b.n	800fc4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800fc40:	bf00      	nop
 800fc42:	e002      	b.n	800fc4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800fc44:	bf00      	nop
 800fc46:	e000      	b.n	800fc4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800fc48:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fc4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d10b      	bne.n	800fc6a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800fc52:	4b39      	ldr	r3, [pc, #228]	; (800fd38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fc54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc56:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800fc5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc62:	4a35      	ldr	r2, [pc, #212]	; (800fd38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fc64:	430b      	orrs	r3, r1
 800fc66:	6553      	str	r3, [r2, #84]	; 0x54
 800fc68:	e003      	b.n	800fc72 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800fc72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc7a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800fc7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800fc82:	2300      	movs	r3, #0
 800fc84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800fc88:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800fc8c:	460b      	mov	r3, r1
 800fc8e:	4313      	orrs	r3, r2
 800fc90:	d058      	beq.n	800fd44 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800fc92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fc9a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800fc9e:	d033      	beq.n	800fd08 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800fca0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800fca4:	d82c      	bhi.n	800fd00 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcaa:	d02f      	beq.n	800fd0c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800fcac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcb0:	d826      	bhi.n	800fd00 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fcb2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fcb6:	d02b      	beq.n	800fd10 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800fcb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fcbc:	d820      	bhi.n	800fd00 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fcbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fcc2:	d012      	beq.n	800fcea <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800fcc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fcc8:	d81a      	bhi.n	800fd00 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d022      	beq.n	800fd14 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800fcce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fcd2:	d115      	bne.n	800fd00 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fcd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcd8:	3308      	adds	r3, #8
 800fcda:	2100      	movs	r1, #0
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f001 fd29 	bl	8011734 <RCCEx_PLL2_Config>
 800fce2:	4603      	mov	r3, r0
 800fce4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800fce8:	e015      	b.n	800fd16 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fcea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcee:	3328      	adds	r3, #40	; 0x28
 800fcf0:	2102      	movs	r1, #2
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f001 fdd0 	bl	8011898 <RCCEx_PLL3_Config>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800fcfe:	e00a      	b.n	800fd16 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fd00:	2301      	movs	r3, #1
 800fd02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fd06:	e006      	b.n	800fd16 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fd08:	bf00      	nop
 800fd0a:	e004      	b.n	800fd16 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fd0c:	bf00      	nop
 800fd0e:	e002      	b.n	800fd16 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fd10:	bf00      	nop
 800fd12:	e000      	b.n	800fd16 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fd14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fd16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d10e      	bne.n	800fd3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800fd1e:	4b06      	ldr	r3, [pc, #24]	; (800fd38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fd20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd22:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800fd26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fd2e:	4a02      	ldr	r2, [pc, #8]	; (800fd38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fd30:	430b      	orrs	r3, r1
 800fd32:	6593      	str	r3, [r2, #88]	; 0x58
 800fd34:	e006      	b.n	800fd44 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800fd36:	bf00      	nop
 800fd38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fd3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fd40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800fd44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd4c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800fd50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fd54:	2300      	movs	r3, #0
 800fd56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800fd5a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800fd5e:	460b      	mov	r3, r1
 800fd60:	4313      	orrs	r3, r2
 800fd62:	d055      	beq.n	800fe10 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800fd64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fd6c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800fd70:	d033      	beq.n	800fdda <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800fd72:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800fd76:	d82c      	bhi.n	800fdd2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fd78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd7c:	d02f      	beq.n	800fdde <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800fd7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd82:	d826      	bhi.n	800fdd2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fd84:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800fd88:	d02b      	beq.n	800fde2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800fd8a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800fd8e:	d820      	bhi.n	800fdd2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fd90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fd94:	d012      	beq.n	800fdbc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800fd96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fd9a:	d81a      	bhi.n	800fdd2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d022      	beq.n	800fde6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800fda0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fda4:	d115      	bne.n	800fdd2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fda6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdaa:	3308      	adds	r3, #8
 800fdac:	2100      	movs	r1, #0
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f001 fcc0 	bl	8011734 <RCCEx_PLL2_Config>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800fdba:	e015      	b.n	800fde8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fdbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdc0:	3328      	adds	r3, #40	; 0x28
 800fdc2:	2102      	movs	r1, #2
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f001 fd67 	bl	8011898 <RCCEx_PLL3_Config>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800fdd0:	e00a      	b.n	800fde8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fdd8:	e006      	b.n	800fde8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fdda:	bf00      	nop
 800fddc:	e004      	b.n	800fde8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fdde:	bf00      	nop
 800fde0:	e002      	b.n	800fde8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fde2:	bf00      	nop
 800fde4:	e000      	b.n	800fde8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fde6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fde8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d10b      	bne.n	800fe08 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800fdf0:	4ba1      	ldr	r3, [pc, #644]	; (8010078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fdf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fdf4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800fdf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdfc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fe00:	4a9d      	ldr	r2, [pc, #628]	; (8010078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fe02:	430b      	orrs	r3, r1
 800fe04:	6593      	str	r3, [r2, #88]	; 0x58
 800fe06:	e003      	b.n	800fe10 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800fe10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe18:	f002 0308 	and.w	r3, r2, #8
 800fe1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fe20:	2300      	movs	r3, #0
 800fe22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fe26:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800fe2a:	460b      	mov	r3, r1
 800fe2c:	4313      	orrs	r3, r2
 800fe2e:	d01e      	beq.n	800fe6e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800fe30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe3c:	d10c      	bne.n	800fe58 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fe3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe42:	3328      	adds	r3, #40	; 0x28
 800fe44:	2102      	movs	r1, #2
 800fe46:	4618      	mov	r0, r3
 800fe48:	f001 fd26 	bl	8011898 <RCCEx_PLL3_Config>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d002      	beq.n	800fe58 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800fe52:	2301      	movs	r3, #1
 800fe54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800fe58:	4b87      	ldr	r3, [pc, #540]	; (8010078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fe5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fe60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe68:	4a83      	ldr	r2, [pc, #524]	; (8010078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fe6a:	430b      	orrs	r3, r1
 800fe6c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800fe6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe76:	f002 0310 	and.w	r3, r2, #16
 800fe7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fe7e:	2300      	movs	r3, #0
 800fe80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fe84:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800fe88:	460b      	mov	r3, r1
 800fe8a:	4313      	orrs	r3, r2
 800fe8c:	d01e      	beq.n	800fecc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800fe8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fe96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe9a:	d10c      	bne.n	800feb6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fe9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fea0:	3328      	adds	r3, #40	; 0x28
 800fea2:	2102      	movs	r1, #2
 800fea4:	4618      	mov	r0, r3
 800fea6:	f001 fcf7 	bl	8011898 <RCCEx_PLL3_Config>
 800feaa:	4603      	mov	r3, r0
 800feac:	2b00      	cmp	r3, #0
 800feae:	d002      	beq.n	800feb6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800feb0:	2301      	movs	r3, #1
 800feb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800feb6:	4b70      	ldr	r3, [pc, #448]	; (8010078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800feb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800feba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800febe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fec6:	4a6c      	ldr	r2, [pc, #432]	; (8010078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fec8:	430b      	orrs	r3, r1
 800feca:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800fecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fed4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800fed8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fedc:	2300      	movs	r3, #0
 800fede:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fee2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800fee6:	460b      	mov	r3, r1
 800fee8:	4313      	orrs	r3, r2
 800feea:	d03e      	beq.n	800ff6a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800feec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fef0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fef4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fef8:	d022      	beq.n	800ff40 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800fefa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fefe:	d81b      	bhi.n	800ff38 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d003      	beq.n	800ff0c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800ff04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff08:	d00b      	beq.n	800ff22 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800ff0a:	e015      	b.n	800ff38 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ff0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff10:	3308      	adds	r3, #8
 800ff12:	2100      	movs	r1, #0
 800ff14:	4618      	mov	r0, r3
 800ff16:	f001 fc0d 	bl	8011734 <RCCEx_PLL2_Config>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ff20:	e00f      	b.n	800ff42 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ff22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff26:	3328      	adds	r3, #40	; 0x28
 800ff28:	2102      	movs	r1, #2
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f001 fcb4 	bl	8011898 <RCCEx_PLL3_Config>
 800ff30:	4603      	mov	r3, r0
 800ff32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ff36:	e004      	b.n	800ff42 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ff38:	2301      	movs	r3, #1
 800ff3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ff3e:	e000      	b.n	800ff42 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800ff40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ff42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d10b      	bne.n	800ff62 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ff4a:	4b4b      	ldr	r3, [pc, #300]	; (8010078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ff4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff4e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ff52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ff5a:	4a47      	ldr	r2, [pc, #284]	; (8010078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ff5c:	430b      	orrs	r3, r1
 800ff5e:	6593      	str	r3, [r2, #88]	; 0x58
 800ff60:	e003      	b.n	800ff6a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ff6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff72:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800ff76:	67bb      	str	r3, [r7, #120]	; 0x78
 800ff78:	2300      	movs	r3, #0
 800ff7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ff7c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800ff80:	460b      	mov	r3, r1
 800ff82:	4313      	orrs	r3, r2
 800ff84:	d03b      	beq.n	800fffe <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ff86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ff92:	d01f      	beq.n	800ffd4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800ff94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ff98:	d818      	bhi.n	800ffcc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800ff9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ff9e:	d003      	beq.n	800ffa8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ffa0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ffa4:	d007      	beq.n	800ffb6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ffa6:	e011      	b.n	800ffcc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ffa8:	4b33      	ldr	r3, [pc, #204]	; (8010078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ffaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffac:	4a32      	ldr	r2, [pc, #200]	; (8010078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ffae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ffb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ffb4:	e00f      	b.n	800ffd6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ffb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ffba:	3328      	adds	r3, #40	; 0x28
 800ffbc:	2101      	movs	r1, #1
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f001 fc6a 	bl	8011898 <RCCEx_PLL3_Config>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800ffca:	e004      	b.n	800ffd6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ffcc:	2301      	movs	r3, #1
 800ffce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ffd2:	e000      	b.n	800ffd6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800ffd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ffd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d10b      	bne.n	800fff6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ffde:	4b26      	ldr	r3, [pc, #152]	; (8010078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ffe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffe2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ffe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ffea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ffee:	4a22      	ldr	r2, [pc, #136]	; (8010078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fff0:	430b      	orrs	r3, r1
 800fff2:	6553      	str	r3, [r2, #84]	; 0x54
 800fff4:	e003      	b.n	800fffe <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fff6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fffa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800fffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010006:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 801000a:	673b      	str	r3, [r7, #112]	; 0x70
 801000c:	2300      	movs	r3, #0
 801000e:	677b      	str	r3, [r7, #116]	; 0x74
 8010010:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8010014:	460b      	mov	r3, r1
 8010016:	4313      	orrs	r3, r2
 8010018:	d034      	beq.n	8010084 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801001a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801001e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010020:	2b00      	cmp	r3, #0
 8010022:	d003      	beq.n	801002c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8010024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010028:	d007      	beq.n	801003a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801002a:	e011      	b.n	8010050 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801002c:	4b12      	ldr	r3, [pc, #72]	; (8010078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801002e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010030:	4a11      	ldr	r2, [pc, #68]	; (8010078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010036:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8010038:	e00e      	b.n	8010058 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801003a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801003e:	3308      	adds	r3, #8
 8010040:	2102      	movs	r1, #2
 8010042:	4618      	mov	r0, r3
 8010044:	f001 fb76 	bl	8011734 <RCCEx_PLL2_Config>
 8010048:	4603      	mov	r3, r0
 801004a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801004e:	e003      	b.n	8010058 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8010050:	2301      	movs	r3, #1
 8010052:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010056:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010058:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801005c:	2b00      	cmp	r3, #0
 801005e:	d10d      	bne.n	801007c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8010060:	4b05      	ldr	r3, [pc, #20]	; (8010078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010064:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801006c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801006e:	4a02      	ldr	r2, [pc, #8]	; (8010078 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010070:	430b      	orrs	r3, r1
 8010072:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010074:	e006      	b.n	8010084 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8010076:	bf00      	nop
 8010078:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801007c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010080:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8010084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801008c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8010090:	66bb      	str	r3, [r7, #104]	; 0x68
 8010092:	2300      	movs	r3, #0
 8010094:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010096:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 801009a:	460b      	mov	r3, r1
 801009c:	4313      	orrs	r3, r2
 801009e:	d00c      	beq.n	80100ba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80100a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80100a4:	3328      	adds	r3, #40	; 0x28
 80100a6:	2102      	movs	r1, #2
 80100a8:	4618      	mov	r0, r3
 80100aa:	f001 fbf5 	bl	8011898 <RCCEx_PLL3_Config>
 80100ae:	4603      	mov	r3, r0
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d002      	beq.n	80100ba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80100b4:	2301      	movs	r3, #1
 80100b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80100ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80100be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80100c6:	663b      	str	r3, [r7, #96]	; 0x60
 80100c8:	2300      	movs	r3, #0
 80100ca:	667b      	str	r3, [r7, #100]	; 0x64
 80100cc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80100d0:	460b      	mov	r3, r1
 80100d2:	4313      	orrs	r3, r2
 80100d4:	d038      	beq.n	8010148 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80100d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80100da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80100e2:	d018      	beq.n	8010116 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80100e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80100e8:	d811      	bhi.n	801010e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80100ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80100ee:	d014      	beq.n	801011a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80100f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80100f4:	d80b      	bhi.n	801010e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d011      	beq.n	801011e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80100fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80100fe:	d106      	bne.n	801010e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010100:	4bc3      	ldr	r3, [pc, #780]	; (8010410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010104:	4ac2      	ldr	r2, [pc, #776]	; (8010410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801010a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801010c:	e008      	b.n	8010120 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801010e:	2301      	movs	r3, #1
 8010110:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010114:	e004      	b.n	8010120 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8010116:	bf00      	nop
 8010118:	e002      	b.n	8010120 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801011a:	bf00      	nop
 801011c:	e000      	b.n	8010120 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801011e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010120:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010124:	2b00      	cmp	r3, #0
 8010126:	d10b      	bne.n	8010140 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010128:	4bb9      	ldr	r3, [pc, #740]	; (8010410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801012a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801012c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8010130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010134:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010138:	4ab5      	ldr	r2, [pc, #724]	; (8010410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801013a:	430b      	orrs	r3, r1
 801013c:	6553      	str	r3, [r2, #84]	; 0x54
 801013e:	e003      	b.n	8010148 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010140:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010144:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801014c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010150:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8010154:	65bb      	str	r3, [r7, #88]	; 0x58
 8010156:	2300      	movs	r3, #0
 8010158:	65fb      	str	r3, [r7, #92]	; 0x5c
 801015a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 801015e:	460b      	mov	r3, r1
 8010160:	4313      	orrs	r3, r2
 8010162:	d009      	beq.n	8010178 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8010164:	4baa      	ldr	r3, [pc, #680]	; (8010410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010168:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801016c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010172:	4aa7      	ldr	r2, [pc, #668]	; (8010410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010174:	430b      	orrs	r3, r1
 8010176:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8010178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801017c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010180:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8010184:	653b      	str	r3, [r7, #80]	; 0x50
 8010186:	2300      	movs	r3, #0
 8010188:	657b      	str	r3, [r7, #84]	; 0x54
 801018a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 801018e:	460b      	mov	r3, r1
 8010190:	4313      	orrs	r3, r2
 8010192:	d00a      	beq.n	80101aa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8010194:	4b9e      	ldr	r3, [pc, #632]	; (8010410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010196:	691b      	ldr	r3, [r3, #16]
 8010198:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 801019c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80101a4:	4a9a      	ldr	r2, [pc, #616]	; (8010410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80101a6:	430b      	orrs	r3, r1
 80101a8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80101aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80101b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80101b8:	2300      	movs	r3, #0
 80101ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80101bc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80101c0:	460b      	mov	r3, r1
 80101c2:	4313      	orrs	r3, r2
 80101c4:	d009      	beq.n	80101da <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80101c6:	4b92      	ldr	r3, [pc, #584]	; (8010410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80101c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101ca:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80101ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101d4:	4a8e      	ldr	r2, [pc, #568]	; (8010410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80101d6:	430b      	orrs	r3, r1
 80101d8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80101da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101e2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80101e6:	643b      	str	r3, [r7, #64]	; 0x40
 80101e8:	2300      	movs	r3, #0
 80101ea:	647b      	str	r3, [r7, #68]	; 0x44
 80101ec:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80101f0:	460b      	mov	r3, r1
 80101f2:	4313      	orrs	r3, r2
 80101f4:	d00e      	beq.n	8010214 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80101f6:	4b86      	ldr	r3, [pc, #536]	; (8010410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80101f8:	691b      	ldr	r3, [r3, #16]
 80101fa:	4a85      	ldr	r2, [pc, #532]	; (8010410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80101fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8010200:	6113      	str	r3, [r2, #16]
 8010202:	4b83      	ldr	r3, [pc, #524]	; (8010410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010204:	6919      	ldr	r1, [r3, #16]
 8010206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801020a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801020e:	4a80      	ldr	r2, [pc, #512]	; (8010410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010210:	430b      	orrs	r3, r1
 8010212:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8010214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801021c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8010220:	63bb      	str	r3, [r7, #56]	; 0x38
 8010222:	2300      	movs	r3, #0
 8010224:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010226:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801022a:	460b      	mov	r3, r1
 801022c:	4313      	orrs	r3, r2
 801022e:	d009      	beq.n	8010244 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8010230:	4b77      	ldr	r3, [pc, #476]	; (8010410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010234:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8010238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801023c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801023e:	4a74      	ldr	r2, [pc, #464]	; (8010410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010240:	430b      	orrs	r3, r1
 8010242:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8010244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8010250:	633b      	str	r3, [r7, #48]	; 0x30
 8010252:	2300      	movs	r3, #0
 8010254:	637b      	str	r3, [r7, #52]	; 0x34
 8010256:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 801025a:	460b      	mov	r3, r1
 801025c:	4313      	orrs	r3, r2
 801025e:	d00a      	beq.n	8010276 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8010260:	4b6b      	ldr	r3, [pc, #428]	; (8010410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010264:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8010268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801026c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010270:	4a67      	ldr	r2, [pc, #412]	; (8010410 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010272:	430b      	orrs	r3, r1
 8010274:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8010276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801027a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801027e:	2100      	movs	r1, #0
 8010280:	62b9      	str	r1, [r7, #40]	; 0x28
 8010282:	f003 0301 	and.w	r3, r3, #1
 8010286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010288:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 801028c:	460b      	mov	r3, r1
 801028e:	4313      	orrs	r3, r2
 8010290:	d011      	beq.n	80102b6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010296:	3308      	adds	r3, #8
 8010298:	2100      	movs	r1, #0
 801029a:	4618      	mov	r0, r3
 801029c:	f001 fa4a 	bl	8011734 <RCCEx_PLL2_Config>
 80102a0:	4603      	mov	r3, r0
 80102a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80102a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d003      	beq.n	80102b6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80102ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80102b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80102b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102be:	2100      	movs	r1, #0
 80102c0:	6239      	str	r1, [r7, #32]
 80102c2:	f003 0302 	and.w	r3, r3, #2
 80102c6:	627b      	str	r3, [r7, #36]	; 0x24
 80102c8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80102cc:	460b      	mov	r3, r1
 80102ce:	4313      	orrs	r3, r2
 80102d0:	d011      	beq.n	80102f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80102d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102d6:	3308      	adds	r3, #8
 80102d8:	2101      	movs	r1, #1
 80102da:	4618      	mov	r0, r3
 80102dc:	f001 fa2a 	bl	8011734 <RCCEx_PLL2_Config>
 80102e0:	4603      	mov	r3, r0
 80102e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80102e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d003      	beq.n	80102f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80102ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80102f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80102f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102fe:	2100      	movs	r1, #0
 8010300:	61b9      	str	r1, [r7, #24]
 8010302:	f003 0304 	and.w	r3, r3, #4
 8010306:	61fb      	str	r3, [r7, #28]
 8010308:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801030c:	460b      	mov	r3, r1
 801030e:	4313      	orrs	r3, r2
 8010310:	d011      	beq.n	8010336 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010316:	3308      	adds	r3, #8
 8010318:	2102      	movs	r1, #2
 801031a:	4618      	mov	r0, r3
 801031c:	f001 fa0a 	bl	8011734 <RCCEx_PLL2_Config>
 8010320:	4603      	mov	r3, r0
 8010322:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8010326:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801032a:	2b00      	cmp	r3, #0
 801032c:	d003      	beq.n	8010336 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801032e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010332:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8010336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801033a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801033e:	2100      	movs	r1, #0
 8010340:	6139      	str	r1, [r7, #16]
 8010342:	f003 0308 	and.w	r3, r3, #8
 8010346:	617b      	str	r3, [r7, #20]
 8010348:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801034c:	460b      	mov	r3, r1
 801034e:	4313      	orrs	r3, r2
 8010350:	d011      	beq.n	8010376 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010356:	3328      	adds	r3, #40	; 0x28
 8010358:	2100      	movs	r1, #0
 801035a:	4618      	mov	r0, r3
 801035c:	f001 fa9c 	bl	8011898 <RCCEx_PLL3_Config>
 8010360:	4603      	mov	r3, r0
 8010362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8010366:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801036a:	2b00      	cmp	r3, #0
 801036c:	d003      	beq.n	8010376 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801036e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010372:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8010376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801037a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801037e:	2100      	movs	r1, #0
 8010380:	60b9      	str	r1, [r7, #8]
 8010382:	f003 0310 	and.w	r3, r3, #16
 8010386:	60fb      	str	r3, [r7, #12]
 8010388:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801038c:	460b      	mov	r3, r1
 801038e:	4313      	orrs	r3, r2
 8010390:	d011      	beq.n	80103b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010396:	3328      	adds	r3, #40	; 0x28
 8010398:	2101      	movs	r1, #1
 801039a:	4618      	mov	r0, r3
 801039c:	f001 fa7c 	bl	8011898 <RCCEx_PLL3_Config>
 80103a0:	4603      	mov	r3, r0
 80103a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80103a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d003      	beq.n	80103b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80103ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80103b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80103b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80103ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103be:	2100      	movs	r1, #0
 80103c0:	6039      	str	r1, [r7, #0]
 80103c2:	f003 0320 	and.w	r3, r3, #32
 80103c6:	607b      	str	r3, [r7, #4]
 80103c8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80103cc:	460b      	mov	r3, r1
 80103ce:	4313      	orrs	r3, r2
 80103d0:	d011      	beq.n	80103f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80103d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80103d6:	3328      	adds	r3, #40	; 0x28
 80103d8:	2102      	movs	r1, #2
 80103da:	4618      	mov	r0, r3
 80103dc:	f001 fa5c 	bl	8011898 <RCCEx_PLL3_Config>
 80103e0:	4603      	mov	r3, r0
 80103e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80103e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d003      	beq.n	80103f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80103ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80103f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80103f6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d101      	bne.n	8010402 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80103fe:	2300      	movs	r3, #0
 8010400:	e000      	b.n	8010404 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8010402:	2301      	movs	r3, #1
}
 8010404:	4618      	mov	r0, r3
 8010406:	f507 7794 	add.w	r7, r7, #296	; 0x128
 801040a:	46bd      	mov	sp, r7
 801040c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010410:	58024400 	.word	0x58024400

08010414 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b090      	sub	sp, #64	; 0x40
 8010418:	af00      	add	r7, sp, #0
 801041a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801041e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010422:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8010426:	430b      	orrs	r3, r1
 8010428:	f040 8094 	bne.w	8010554 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 801042c:	4b9e      	ldr	r3, [pc, #632]	; (80106a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801042e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010430:	f003 0307 	and.w	r3, r3, #7
 8010434:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8010436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010438:	2b04      	cmp	r3, #4
 801043a:	f200 8087 	bhi.w	801054c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801043e:	a201      	add	r2, pc, #4	; (adr r2, 8010444 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8010440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010444:	08010459 	.word	0x08010459
 8010448:	08010481 	.word	0x08010481
 801044c:	080104a9 	.word	0x080104a9
 8010450:	08010545 	.word	0x08010545
 8010454:	080104d1 	.word	0x080104d1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010458:	4b93      	ldr	r3, [pc, #588]	; (80106a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010460:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010464:	d108      	bne.n	8010478 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801046a:	4618      	mov	r0, r3
 801046c:	f001 f810 	bl	8011490 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010472:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010474:	f000 bd45 	b.w	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010478:	2300      	movs	r3, #0
 801047a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801047c:	f000 bd41 	b.w	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010480:	4b89      	ldr	r3, [pc, #548]	; (80106a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010488:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801048c:	d108      	bne.n	80104a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801048e:	f107 0318 	add.w	r3, r7, #24
 8010492:	4618      	mov	r0, r3
 8010494:	f000 fd54 	bl	8010f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010498:	69bb      	ldr	r3, [r7, #24]
 801049a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801049c:	f000 bd31 	b.w	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104a0:	2300      	movs	r3, #0
 80104a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104a4:	f000 bd2d 	b.w	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80104a8:	4b7f      	ldr	r3, [pc, #508]	; (80106a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80104b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80104b4:	d108      	bne.n	80104c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80104b6:	f107 030c 	add.w	r3, r7, #12
 80104ba:	4618      	mov	r0, r3
 80104bc:	f000 fe94 	bl	80111e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104c4:	f000 bd1d 	b.w	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104c8:	2300      	movs	r3, #0
 80104ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104cc:	f000 bd19 	b.w	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80104d0:	4b75      	ldr	r3, [pc, #468]	; (80106a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80104d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80104d8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80104da:	4b73      	ldr	r3, [pc, #460]	; (80106a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	f003 0304 	and.w	r3, r3, #4
 80104e2:	2b04      	cmp	r3, #4
 80104e4:	d10c      	bne.n	8010500 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80104e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d109      	bne.n	8010500 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80104ec:	4b6e      	ldr	r3, [pc, #440]	; (80106a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	08db      	lsrs	r3, r3, #3
 80104f2:	f003 0303 	and.w	r3, r3, #3
 80104f6:	4a6d      	ldr	r2, [pc, #436]	; (80106ac <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80104f8:	fa22 f303 	lsr.w	r3, r2, r3
 80104fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80104fe:	e01f      	b.n	8010540 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010500:	4b69      	ldr	r3, [pc, #420]	; (80106a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801050c:	d106      	bne.n	801051c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801050e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010510:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010514:	d102      	bne.n	801051c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010516:	4b66      	ldr	r3, [pc, #408]	; (80106b0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8010518:	63fb      	str	r3, [r7, #60]	; 0x3c
 801051a:	e011      	b.n	8010540 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801051c:	4b62      	ldr	r3, [pc, #392]	; (80106a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010524:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010528:	d106      	bne.n	8010538 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801052a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801052c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010530:	d102      	bne.n	8010538 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010532:	4b60      	ldr	r3, [pc, #384]	; (80106b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8010534:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010536:	e003      	b.n	8010540 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010538:	2300      	movs	r3, #0
 801053a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801053c:	f000 bce1 	b.w	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010540:	f000 bcdf 	b.w	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010544:	4b5c      	ldr	r3, [pc, #368]	; (80106b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8010546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010548:	f000 bcdb 	b.w	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801054c:	2300      	movs	r3, #0
 801054e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010550:	f000 bcd7 	b.w	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8010554:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010558:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 801055c:	430b      	orrs	r3, r1
 801055e:	f040 80ad 	bne.w	80106bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8010562:	4b51      	ldr	r3, [pc, #324]	; (80106a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010566:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 801056a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801056c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801056e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010572:	d056      	beq.n	8010622 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8010574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801057a:	f200 8090 	bhi.w	801069e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801057e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010580:	2bc0      	cmp	r3, #192	; 0xc0
 8010582:	f000 8088 	beq.w	8010696 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8010586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010588:	2bc0      	cmp	r3, #192	; 0xc0
 801058a:	f200 8088 	bhi.w	801069e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801058e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010590:	2b80      	cmp	r3, #128	; 0x80
 8010592:	d032      	beq.n	80105fa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8010594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010596:	2b80      	cmp	r3, #128	; 0x80
 8010598:	f200 8081 	bhi.w	801069e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801059c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d003      	beq.n	80105aa <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80105a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a4:	2b40      	cmp	r3, #64	; 0x40
 80105a6:	d014      	beq.n	80105d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80105a8:	e079      	b.n	801069e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80105aa:	4b3f      	ldr	r3, [pc, #252]	; (80106a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80105b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80105b6:	d108      	bne.n	80105ca <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80105b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80105bc:	4618      	mov	r0, r3
 80105be:	f000 ff67 	bl	8011490 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80105c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80105c6:	f000 bc9c 	b.w	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80105ca:	2300      	movs	r3, #0
 80105cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80105ce:	f000 bc98 	b.w	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80105d2:	4b35      	ldr	r3, [pc, #212]	; (80106a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80105da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80105de:	d108      	bne.n	80105f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80105e0:	f107 0318 	add.w	r3, r7, #24
 80105e4:	4618      	mov	r0, r3
 80105e6:	f000 fcab 	bl	8010f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80105ea:	69bb      	ldr	r3, [r7, #24]
 80105ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80105ee:	f000 bc88 	b.w	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80105f2:	2300      	movs	r3, #0
 80105f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80105f6:	f000 bc84 	b.w	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80105fa:	4b2b      	ldr	r3, [pc, #172]	; (80106a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010606:	d108      	bne.n	801061a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010608:	f107 030c 	add.w	r3, r7, #12
 801060c:	4618      	mov	r0, r3
 801060e:	f000 fdeb 	bl	80111e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010616:	f000 bc74 	b.w	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801061a:	2300      	movs	r3, #0
 801061c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801061e:	f000 bc70 	b.w	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010622:	4b21      	ldr	r3, [pc, #132]	; (80106a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010626:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801062a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801062c:	4b1e      	ldr	r3, [pc, #120]	; (80106a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	f003 0304 	and.w	r3, r3, #4
 8010634:	2b04      	cmp	r3, #4
 8010636:	d10c      	bne.n	8010652 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8010638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801063a:	2b00      	cmp	r3, #0
 801063c:	d109      	bne.n	8010652 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801063e:	4b1a      	ldr	r3, [pc, #104]	; (80106a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	08db      	lsrs	r3, r3, #3
 8010644:	f003 0303 	and.w	r3, r3, #3
 8010648:	4a18      	ldr	r2, [pc, #96]	; (80106ac <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801064a:	fa22 f303 	lsr.w	r3, r2, r3
 801064e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010650:	e01f      	b.n	8010692 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010652:	4b15      	ldr	r3, [pc, #84]	; (80106a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801065a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801065e:	d106      	bne.n	801066e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8010660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010662:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010666:	d102      	bne.n	801066e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010668:	4b11      	ldr	r3, [pc, #68]	; (80106b0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801066a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801066c:	e011      	b.n	8010692 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801066e:	4b0e      	ldr	r3, [pc, #56]	; (80106a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010676:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801067a:	d106      	bne.n	801068a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 801067c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801067e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010682:	d102      	bne.n	801068a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010684:	4b0b      	ldr	r3, [pc, #44]	; (80106b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8010686:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010688:	e003      	b.n	8010692 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801068a:	2300      	movs	r3, #0
 801068c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801068e:	f000 bc38 	b.w	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010692:	f000 bc36 	b.w	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010696:	4b08      	ldr	r3, [pc, #32]	; (80106b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8010698:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801069a:	f000 bc32 	b.w	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801069e:	2300      	movs	r3, #0
 80106a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106a2:	f000 bc2e 	b.w	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80106a6:	bf00      	nop
 80106a8:	58024400 	.word	0x58024400
 80106ac:	03d09000 	.word	0x03d09000
 80106b0:	003d0900 	.word	0x003d0900
 80106b4:	017d7840 	.word	0x017d7840
 80106b8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80106bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80106c0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80106c4:	430b      	orrs	r3, r1
 80106c6:	f040 809c 	bne.w	8010802 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80106ca:	4b9e      	ldr	r3, [pc, #632]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80106cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106ce:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80106d2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80106d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80106da:	d054      	beq.n	8010786 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80106dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80106e2:	f200 808b 	bhi.w	80107fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80106e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80106ec:	f000 8083 	beq.w	80107f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80106f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80106f6:	f200 8081 	bhi.w	80107fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80106fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010700:	d02f      	beq.n	8010762 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8010702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010704:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010708:	d878      	bhi.n	80107fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801070a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801070c:	2b00      	cmp	r3, #0
 801070e:	d004      	beq.n	801071a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8010710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010712:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010716:	d012      	beq.n	801073e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8010718:	e070      	b.n	80107fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801071a:	4b8a      	ldr	r3, [pc, #552]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010722:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010726:	d107      	bne.n	8010738 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801072c:	4618      	mov	r0, r3
 801072e:	f000 feaf 	bl	8011490 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010734:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010736:	e3e4      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010738:	2300      	movs	r3, #0
 801073a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801073c:	e3e1      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801073e:	4b81      	ldr	r3, [pc, #516]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801074a:	d107      	bne.n	801075c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801074c:	f107 0318 	add.w	r3, r7, #24
 8010750:	4618      	mov	r0, r3
 8010752:	f000 fbf5 	bl	8010f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010756:	69bb      	ldr	r3, [r7, #24]
 8010758:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801075a:	e3d2      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801075c:	2300      	movs	r3, #0
 801075e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010760:	e3cf      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010762:	4b78      	ldr	r3, [pc, #480]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801076a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801076e:	d107      	bne.n	8010780 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010770:	f107 030c 	add.w	r3, r7, #12
 8010774:	4618      	mov	r0, r3
 8010776:	f000 fd37 	bl	80111e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801077e:	e3c0      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010780:	2300      	movs	r3, #0
 8010782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010784:	e3bd      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010786:	4b6f      	ldr	r3, [pc, #444]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801078a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801078e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010790:	4b6c      	ldr	r3, [pc, #432]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	f003 0304 	and.w	r3, r3, #4
 8010798:	2b04      	cmp	r3, #4
 801079a:	d10c      	bne.n	80107b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 801079c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d109      	bne.n	80107b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80107a2:	4b68      	ldr	r3, [pc, #416]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	08db      	lsrs	r3, r3, #3
 80107a8:	f003 0303 	and.w	r3, r3, #3
 80107ac:	4a66      	ldr	r2, [pc, #408]	; (8010948 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80107ae:	fa22 f303 	lsr.w	r3, r2, r3
 80107b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107b4:	e01e      	b.n	80107f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80107b6:	4b63      	ldr	r3, [pc, #396]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80107c2:	d106      	bne.n	80107d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80107c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80107ca:	d102      	bne.n	80107d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80107cc:	4b5f      	ldr	r3, [pc, #380]	; (801094c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80107ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107d0:	e010      	b.n	80107f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80107d2:	4b5c      	ldr	r3, [pc, #368]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80107da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80107de:	d106      	bne.n	80107ee <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80107e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80107e6:	d102      	bne.n	80107ee <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80107e8:	4b59      	ldr	r3, [pc, #356]	; (8010950 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80107ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107ec:	e002      	b.n	80107f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80107ee:	2300      	movs	r3, #0
 80107f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80107f2:	e386      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80107f4:	e385      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80107f6:	4b57      	ldr	r3, [pc, #348]	; (8010954 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80107f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80107fa:	e382      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80107fc:	2300      	movs	r3, #0
 80107fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010800:	e37f      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8010802:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010806:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 801080a:	430b      	orrs	r3, r1
 801080c:	f040 80a7 	bne.w	801095e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8010810:	4b4c      	ldr	r3, [pc, #304]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010814:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8010818:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801081a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801081c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010820:	d055      	beq.n	80108ce <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8010822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010824:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010828:	f200 8096 	bhi.w	8010958 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801082c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801082e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010832:	f000 8084 	beq.w	801093e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8010836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010838:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801083c:	f200 808c 	bhi.w	8010958 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010842:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010846:	d030      	beq.n	80108aa <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8010848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801084a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801084e:	f200 8083 	bhi.w	8010958 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010854:	2b00      	cmp	r3, #0
 8010856:	d004      	beq.n	8010862 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8010858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801085a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801085e:	d012      	beq.n	8010886 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8010860:	e07a      	b.n	8010958 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010862:	4b38      	ldr	r3, [pc, #224]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801086a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801086e:	d107      	bne.n	8010880 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010874:	4618      	mov	r0, r3
 8010876:	f000 fe0b 	bl	8011490 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801087a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801087c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801087e:	e340      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010880:	2300      	movs	r3, #0
 8010882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010884:	e33d      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010886:	4b2f      	ldr	r3, [pc, #188]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801088e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010892:	d107      	bne.n	80108a4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010894:	f107 0318 	add.w	r3, r7, #24
 8010898:	4618      	mov	r0, r3
 801089a:	f000 fb51 	bl	8010f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801089e:	69bb      	ldr	r3, [r7, #24]
 80108a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80108a2:	e32e      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80108a4:	2300      	movs	r3, #0
 80108a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108a8:	e32b      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80108aa:	4b26      	ldr	r3, [pc, #152]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80108b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80108b6:	d107      	bne.n	80108c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80108b8:	f107 030c 	add.w	r3, r7, #12
 80108bc:	4618      	mov	r0, r3
 80108be:	f000 fc93 	bl	80111e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80108c6:	e31c      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80108c8:	2300      	movs	r3, #0
 80108ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108cc:	e319      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80108ce:	4b1d      	ldr	r3, [pc, #116]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80108d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80108d6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80108d8:	4b1a      	ldr	r3, [pc, #104]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	f003 0304 	and.w	r3, r3, #4
 80108e0:	2b04      	cmp	r3, #4
 80108e2:	d10c      	bne.n	80108fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80108e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d109      	bne.n	80108fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80108ea:	4b16      	ldr	r3, [pc, #88]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	08db      	lsrs	r3, r3, #3
 80108f0:	f003 0303 	and.w	r3, r3, #3
 80108f4:	4a14      	ldr	r2, [pc, #80]	; (8010948 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80108f6:	fa22 f303 	lsr.w	r3, r2, r3
 80108fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80108fc:	e01e      	b.n	801093c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80108fe:	4b11      	ldr	r3, [pc, #68]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801090a:	d106      	bne.n	801091a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 801090c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801090e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010912:	d102      	bne.n	801091a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010914:	4b0d      	ldr	r3, [pc, #52]	; (801094c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8010916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010918:	e010      	b.n	801093c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801091a:	4b0a      	ldr	r3, [pc, #40]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010922:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010926:	d106      	bne.n	8010936 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8010928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801092a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801092e:	d102      	bne.n	8010936 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010930:	4b07      	ldr	r3, [pc, #28]	; (8010950 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8010932:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010934:	e002      	b.n	801093c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010936:	2300      	movs	r3, #0
 8010938:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801093a:	e2e2      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801093c:	e2e1      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801093e:	4b05      	ldr	r3, [pc, #20]	; (8010954 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010940:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010942:	e2de      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010944:	58024400 	.word	0x58024400
 8010948:	03d09000 	.word	0x03d09000
 801094c:	003d0900 	.word	0x003d0900
 8010950:	017d7840 	.word	0x017d7840
 8010954:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8010958:	2300      	movs	r3, #0
 801095a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801095c:	e2d1      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801095e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010962:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8010966:	430b      	orrs	r3, r1
 8010968:	f040 809c 	bne.w	8010aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 801096c:	4b93      	ldr	r3, [pc, #588]	; (8010bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801096e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010970:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8010974:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010978:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801097c:	d054      	beq.n	8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 801097e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010980:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010984:	f200 808b 	bhi.w	8010a9e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801098a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801098e:	f000 8083 	beq.w	8010a98 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8010992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010994:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010998:	f200 8081 	bhi.w	8010a9e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 801099c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801099e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80109a2:	d02f      	beq.n	8010a04 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80109a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80109aa:	d878      	bhi.n	8010a9e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80109ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d004      	beq.n	80109bc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80109b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80109b8:	d012      	beq.n	80109e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80109ba:	e070      	b.n	8010a9e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80109bc:	4b7f      	ldr	r3, [pc, #508]	; (8010bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80109c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80109c8:	d107      	bne.n	80109da <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80109ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80109ce:	4618      	mov	r0, r3
 80109d0:	f000 fd5e 	bl	8011490 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80109d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80109d8:	e293      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80109da:	2300      	movs	r3, #0
 80109dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109de:	e290      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80109e0:	4b76      	ldr	r3, [pc, #472]	; (8010bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80109e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80109ec:	d107      	bne.n	80109fe <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80109ee:	f107 0318 	add.w	r3, r7, #24
 80109f2:	4618      	mov	r0, r3
 80109f4:	f000 faa4 	bl	8010f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80109f8:	69bb      	ldr	r3, [r7, #24]
 80109fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80109fc:	e281      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80109fe:	2300      	movs	r3, #0
 8010a00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a02:	e27e      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010a04:	4b6d      	ldr	r3, [pc, #436]	; (8010bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010a0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010a10:	d107      	bne.n	8010a22 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010a12:	f107 030c 	add.w	r3, r7, #12
 8010a16:	4618      	mov	r0, r3
 8010a18:	f000 fbe6 	bl	80111e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a20:	e26f      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a22:	2300      	movs	r3, #0
 8010a24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a26:	e26c      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010a28:	4b64      	ldr	r3, [pc, #400]	; (8010bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010a30:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010a32:	4b62      	ldr	r3, [pc, #392]	; (8010bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	f003 0304 	and.w	r3, r3, #4
 8010a3a:	2b04      	cmp	r3, #4
 8010a3c:	d10c      	bne.n	8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8010a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d109      	bne.n	8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010a44:	4b5d      	ldr	r3, [pc, #372]	; (8010bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	08db      	lsrs	r3, r3, #3
 8010a4a:	f003 0303 	and.w	r3, r3, #3
 8010a4e:	4a5c      	ldr	r2, [pc, #368]	; (8010bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010a50:	fa22 f303 	lsr.w	r3, r2, r3
 8010a54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a56:	e01e      	b.n	8010a96 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010a58:	4b58      	ldr	r3, [pc, #352]	; (8010bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a64:	d106      	bne.n	8010a74 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8010a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010a6c:	d102      	bne.n	8010a74 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010a6e:	4b55      	ldr	r3, [pc, #340]	; (8010bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010a70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a72:	e010      	b.n	8010a96 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010a74:	4b51      	ldr	r3, [pc, #324]	; (8010bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010a7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010a80:	d106      	bne.n	8010a90 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8010a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010a88:	d102      	bne.n	8010a90 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010a8a:	4b4f      	ldr	r3, [pc, #316]	; (8010bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a8e:	e002      	b.n	8010a96 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010a90:	2300      	movs	r3, #0
 8010a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010a94:	e235      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010a96:	e234      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010a98:	4b4c      	ldr	r3, [pc, #304]	; (8010bcc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8010a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a9c:	e231      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010aa2:	e22e      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8010aa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010aa8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8010aac:	430b      	orrs	r3, r1
 8010aae:	f040 808f 	bne.w	8010bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8010ab2:	4b42      	ldr	r3, [pc, #264]	; (8010bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ab6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8010aba:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8010abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010abe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010ac2:	d06b      	beq.n	8010b9c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8010ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ac6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010aca:	d874      	bhi.n	8010bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ace:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010ad2:	d056      	beq.n	8010b82 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8010ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ad6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010ada:	d86c      	bhi.n	8010bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ade:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010ae2:	d03b      	beq.n	8010b5c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8010ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ae6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010aea:	d864      	bhi.n	8010bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010af2:	d021      	beq.n	8010b38 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8010af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010af6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010afa:	d85c      	bhi.n	8010bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d004      	beq.n	8010b0c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8010b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b08:	d004      	beq.n	8010b14 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8010b0a:	e054      	b.n	8010bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8010b0c:	f7fe fa0a 	bl	800ef24 <HAL_RCC_GetPCLK1Freq>
 8010b10:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010b12:	e1f6      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010b14:	4b29      	ldr	r3, [pc, #164]	; (8010bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010b1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010b20:	d107      	bne.n	8010b32 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010b22:	f107 0318 	add.w	r3, r7, #24
 8010b26:	4618      	mov	r0, r3
 8010b28:	f000 fa0a 	bl	8010f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010b2c:	69fb      	ldr	r3, [r7, #28]
 8010b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010b30:	e1e7      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010b32:	2300      	movs	r3, #0
 8010b34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b36:	e1e4      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010b38:	4b20      	ldr	r3, [pc, #128]	; (8010bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010b40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010b44:	d107      	bne.n	8010b56 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010b46:	f107 030c 	add.w	r3, r7, #12
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f000 fb4c 	bl	80111e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010b50:	693b      	ldr	r3, [r7, #16]
 8010b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010b54:	e1d5      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010b56:	2300      	movs	r3, #0
 8010b58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b5a:	e1d2      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010b5c:	4b17      	ldr	r3, [pc, #92]	; (8010bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	f003 0304 	and.w	r3, r3, #4
 8010b64:	2b04      	cmp	r3, #4
 8010b66:	d109      	bne.n	8010b7c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010b68:	4b14      	ldr	r3, [pc, #80]	; (8010bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	08db      	lsrs	r3, r3, #3
 8010b6e:	f003 0303 	and.w	r3, r3, #3
 8010b72:	4a13      	ldr	r2, [pc, #76]	; (8010bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010b74:	fa22 f303 	lsr.w	r3, r2, r3
 8010b78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010b7a:	e1c2      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b80:	e1bf      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010b82:	4b0e      	ldr	r3, [pc, #56]	; (8010bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b8e:	d102      	bne.n	8010b96 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8010b90:	4b0c      	ldr	r3, [pc, #48]	; (8010bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010b94:	e1b5      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010b96:	2300      	movs	r3, #0
 8010b98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b9a:	e1b2      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010b9c:	4b07      	ldr	r3, [pc, #28]	; (8010bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010ba4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010ba8:	d102      	bne.n	8010bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8010baa:	4b07      	ldr	r3, [pc, #28]	; (8010bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010bac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010bae:	e1a8      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bb4:	e1a5      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bba:	e1a2      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010bbc:	58024400 	.word	0x58024400
 8010bc0:	03d09000 	.word	0x03d09000
 8010bc4:	003d0900 	.word	0x003d0900
 8010bc8:	017d7840 	.word	0x017d7840
 8010bcc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8010bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010bd4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8010bd8:	430b      	orrs	r3, r1
 8010bda:	d173      	bne.n	8010cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8010bdc:	4b9c      	ldr	r3, [pc, #624]	; (8010e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010be0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010be4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010be8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010bec:	d02f      	beq.n	8010c4e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010bf4:	d863      	bhi.n	8010cbe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8010bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d004      	beq.n	8010c06 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8010bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c02:	d012      	beq.n	8010c2a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8010c04:	e05b      	b.n	8010cbe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010c06:	4b92      	ldr	r3, [pc, #584]	; (8010e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010c0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010c12:	d107      	bne.n	8010c24 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010c14:	f107 0318 	add.w	r3, r7, #24
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f000 f991 	bl	8010f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010c1e:	69bb      	ldr	r3, [r7, #24]
 8010c20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010c22:	e16e      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010c24:	2300      	movs	r3, #0
 8010c26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c28:	e16b      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010c2a:	4b89      	ldr	r3, [pc, #548]	; (8010e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010c32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010c36:	d107      	bne.n	8010c48 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010c38:	f107 030c 	add.w	r3, r7, #12
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f000 fad3 	bl	80111e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8010c42:	697b      	ldr	r3, [r7, #20]
 8010c44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010c46:	e15c      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010c48:	2300      	movs	r3, #0
 8010c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c4c:	e159      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010c4e:	4b80      	ldr	r3, [pc, #512]	; (8010e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010c56:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010c58:	4b7d      	ldr	r3, [pc, #500]	; (8010e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	f003 0304 	and.w	r3, r3, #4
 8010c60:	2b04      	cmp	r3, #4
 8010c62:	d10c      	bne.n	8010c7e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8010c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d109      	bne.n	8010c7e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010c6a:	4b79      	ldr	r3, [pc, #484]	; (8010e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	08db      	lsrs	r3, r3, #3
 8010c70:	f003 0303 	and.w	r3, r3, #3
 8010c74:	4a77      	ldr	r2, [pc, #476]	; (8010e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8010c76:	fa22 f303 	lsr.w	r3, r2, r3
 8010c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c7c:	e01e      	b.n	8010cbc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010c7e:	4b74      	ldr	r3, [pc, #464]	; (8010e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c8a:	d106      	bne.n	8010c9a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8010c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010c92:	d102      	bne.n	8010c9a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010c94:	4b70      	ldr	r3, [pc, #448]	; (8010e58 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8010c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c98:	e010      	b.n	8010cbc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010c9a:	4b6d      	ldr	r3, [pc, #436]	; (8010e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010ca2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010ca6:	d106      	bne.n	8010cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8010ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010caa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010cae:	d102      	bne.n	8010cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010cb0:	4b6a      	ldr	r3, [pc, #424]	; (8010e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8010cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010cb4:	e002      	b.n	8010cbc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010cba:	e122      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010cbc:	e121      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010cc2:	e11e      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8010cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010cc8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8010ccc:	430b      	orrs	r3, r1
 8010cce:	d133      	bne.n	8010d38 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8010cd0:	4b5f      	ldr	r3, [pc, #380]	; (8010e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010cd8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d004      	beq.n	8010cea <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8010ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ce6:	d012      	beq.n	8010d0e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8010ce8:	e023      	b.n	8010d32 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010cea:	4b59      	ldr	r3, [pc, #356]	; (8010e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010cf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010cf6:	d107      	bne.n	8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f000 fbc7 	bl	8011490 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d06:	e0fc      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d0c:	e0f9      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010d0e:	4b50      	ldr	r3, [pc, #320]	; (8010e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010d16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010d1a:	d107      	bne.n	8010d2c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d1c:	f107 0318 	add.w	r3, r7, #24
 8010d20:	4618      	mov	r0, r3
 8010d22:	f000 f90d 	bl	8010f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8010d26:	6a3b      	ldr	r3, [r7, #32]
 8010d28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d2a:	e0ea      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d30:	e0e7      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010d32:	2300      	movs	r3, #0
 8010d34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d36:	e0e4      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8010d38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d3c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8010d40:	430b      	orrs	r3, r1
 8010d42:	f040 808d 	bne.w	8010e60 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8010d46:	4b42      	ldr	r3, [pc, #264]	; (8010e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d4a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8010d4e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010d56:	d06b      	beq.n	8010e30 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8010d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010d5e:	d874      	bhi.n	8010e4a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d66:	d056      	beq.n	8010e16 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8010d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d6e:	d86c      	bhi.n	8010e4a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010d76:	d03b      	beq.n	8010df0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8010d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010d7e:	d864      	bhi.n	8010e4a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010d86:	d021      	beq.n	8010dcc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8010d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010d8e:	d85c      	bhi.n	8010e4a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d004      	beq.n	8010da0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8010d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010d9c:	d004      	beq.n	8010da8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8010d9e:	e054      	b.n	8010e4a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8010da0:	f000 f8b8 	bl	8010f14 <HAL_RCCEx_GetD3PCLK1Freq>
 8010da4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010da6:	e0ac      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010da8:	4b29      	ldr	r3, [pc, #164]	; (8010e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010db0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010db4:	d107      	bne.n	8010dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010db6:	f107 0318 	add.w	r3, r7, #24
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f000 f8c0 	bl	8010f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010dc0:	69fb      	ldr	r3, [r7, #28]
 8010dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010dc4:	e09d      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010dca:	e09a      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010dcc:	4b20      	ldr	r3, [pc, #128]	; (8010e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010dd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010dd8:	d107      	bne.n	8010dea <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010dda:	f107 030c 	add.w	r3, r7, #12
 8010dde:	4618      	mov	r0, r3
 8010de0:	f000 fa02 	bl	80111e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010de4:	693b      	ldr	r3, [r7, #16]
 8010de6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010de8:	e08b      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010dea:	2300      	movs	r3, #0
 8010dec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010dee:	e088      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010df0:	4b17      	ldr	r3, [pc, #92]	; (8010e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	f003 0304 	and.w	r3, r3, #4
 8010df8:	2b04      	cmp	r3, #4
 8010dfa:	d109      	bne.n	8010e10 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010dfc:	4b14      	ldr	r3, [pc, #80]	; (8010e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	08db      	lsrs	r3, r3, #3
 8010e02:	f003 0303 	and.w	r3, r3, #3
 8010e06:	4a13      	ldr	r2, [pc, #76]	; (8010e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8010e08:	fa22 f303 	lsr.w	r3, r2, r3
 8010e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010e0e:	e078      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010e10:	2300      	movs	r3, #0
 8010e12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e14:	e075      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010e16:	4b0e      	ldr	r3, [pc, #56]	; (8010e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e22:	d102      	bne.n	8010e2a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8010e24:	4b0c      	ldr	r3, [pc, #48]	; (8010e58 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8010e26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010e28:	e06b      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e2e:	e068      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010e30:	4b07      	ldr	r3, [pc, #28]	; (8010e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010e3c:	d102      	bne.n	8010e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8010e3e:	4b07      	ldr	r3, [pc, #28]	; (8010e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8010e40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010e42:	e05e      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010e44:	2300      	movs	r3, #0
 8010e46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e48:	e05b      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e4e:	e058      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010e50:	58024400 	.word	0x58024400
 8010e54:	03d09000 	.word	0x03d09000
 8010e58:	003d0900 	.word	0x003d0900
 8010e5c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8010e60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e64:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8010e68:	430b      	orrs	r3, r1
 8010e6a:	d148      	bne.n	8010efe <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8010e6c:	4b27      	ldr	r3, [pc, #156]	; (8010f0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010e74:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010e7c:	d02a      	beq.n	8010ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8010e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010e84:	d838      	bhi.n	8010ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8010e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d004      	beq.n	8010e96 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8010e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010e92:	d00d      	beq.n	8010eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8010e94:	e030      	b.n	8010ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010e96:	4b1d      	ldr	r3, [pc, #116]	; (8010f0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010ea2:	d102      	bne.n	8010eaa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8010ea4:	4b1a      	ldr	r3, [pc, #104]	; (8010f10 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8010ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010ea8:	e02b      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010eaa:	2300      	movs	r3, #0
 8010eac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010eae:	e028      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010eb0:	4b16      	ldr	r3, [pc, #88]	; (8010f0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010eb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010ebc:	d107      	bne.n	8010ece <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f000 fae4 	bl	8011490 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010ecc:	e019      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010ece:	2300      	movs	r3, #0
 8010ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ed2:	e016      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010ed4:	4b0d      	ldr	r3, [pc, #52]	; (8010f0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010edc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010ee0:	d107      	bne.n	8010ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010ee2:	f107 0318 	add.w	r3, r7, #24
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f000 f82a 	bl	8010f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010eec:	69fb      	ldr	r3, [r7, #28]
 8010eee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010ef0:	e007      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ef6:	e004      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010ef8:	2300      	movs	r3, #0
 8010efa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010efc:	e001      	b.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8010efe:	2300      	movs	r3, #0
 8010f00:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8010f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010f04:	4618      	mov	r0, r3
 8010f06:	3740      	adds	r7, #64	; 0x40
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}
 8010f0c:	58024400 	.word	0x58024400
 8010f10:	017d7840 	.word	0x017d7840

08010f14 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010f18:	f7fd ffd4 	bl	800eec4 <HAL_RCC_GetHCLKFreq>
 8010f1c:	4602      	mov	r2, r0
 8010f1e:	4b06      	ldr	r3, [pc, #24]	; (8010f38 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8010f20:	6a1b      	ldr	r3, [r3, #32]
 8010f22:	091b      	lsrs	r3, r3, #4
 8010f24:	f003 0307 	and.w	r3, r3, #7
 8010f28:	4904      	ldr	r1, [pc, #16]	; (8010f3c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8010f2a:	5ccb      	ldrb	r3, [r1, r3]
 8010f2c:	f003 031f 	and.w	r3, r3, #31
 8010f30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8010f34:	4618      	mov	r0, r3
 8010f36:	bd80      	pop	{r7, pc}
 8010f38:	58024400 	.word	0x58024400
 8010f3c:	0801b524 	.word	0x0801b524

08010f40 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8010f40:	b480      	push	{r7}
 8010f42:	b089      	sub	sp, #36	; 0x24
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010f48:	4ba1      	ldr	r3, [pc, #644]	; (80111d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f4c:	f003 0303 	and.w	r3, r3, #3
 8010f50:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8010f52:	4b9f      	ldr	r3, [pc, #636]	; (80111d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f56:	0b1b      	lsrs	r3, r3, #12
 8010f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010f5c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8010f5e:	4b9c      	ldr	r3, [pc, #624]	; (80111d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f62:	091b      	lsrs	r3, r3, #4
 8010f64:	f003 0301 	and.w	r3, r3, #1
 8010f68:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8010f6a:	4b99      	ldr	r3, [pc, #612]	; (80111d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f6e:	08db      	lsrs	r3, r3, #3
 8010f70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010f74:	693a      	ldr	r2, [r7, #16]
 8010f76:	fb02 f303 	mul.w	r3, r2, r3
 8010f7a:	ee07 3a90 	vmov	s15, r3
 8010f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8010f86:	697b      	ldr	r3, [r7, #20]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	f000 8111 	beq.w	80111b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8010f8e:	69bb      	ldr	r3, [r7, #24]
 8010f90:	2b02      	cmp	r3, #2
 8010f92:	f000 8083 	beq.w	801109c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8010f96:	69bb      	ldr	r3, [r7, #24]
 8010f98:	2b02      	cmp	r3, #2
 8010f9a:	f200 80a1 	bhi.w	80110e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8010f9e:	69bb      	ldr	r3, [r7, #24]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d003      	beq.n	8010fac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8010fa4:	69bb      	ldr	r3, [r7, #24]
 8010fa6:	2b01      	cmp	r3, #1
 8010fa8:	d056      	beq.n	8011058 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8010faa:	e099      	b.n	80110e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010fac:	4b88      	ldr	r3, [pc, #544]	; (80111d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	f003 0320 	and.w	r3, r3, #32
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d02d      	beq.n	8011014 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010fb8:	4b85      	ldr	r3, [pc, #532]	; (80111d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	08db      	lsrs	r3, r3, #3
 8010fbe:	f003 0303 	and.w	r3, r3, #3
 8010fc2:	4a84      	ldr	r2, [pc, #528]	; (80111d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8010fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8010fc8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010fca:	68bb      	ldr	r3, [r7, #8]
 8010fcc:	ee07 3a90 	vmov	s15, r3
 8010fd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010fd4:	697b      	ldr	r3, [r7, #20]
 8010fd6:	ee07 3a90 	vmov	s15, r3
 8010fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010fe2:	4b7b      	ldr	r3, [pc, #492]	; (80111d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010fea:	ee07 3a90 	vmov	s15, r3
 8010fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8010ff6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80111d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801100a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801100e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8011012:	e087      	b.n	8011124 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8011014:	697b      	ldr	r3, [r7, #20]
 8011016:	ee07 3a90 	vmov	s15, r3
 801101a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801101e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80111dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8011022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011026:	4b6a      	ldr	r3, [pc, #424]	; (80111d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801102a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801102e:	ee07 3a90 	vmov	s15, r3
 8011032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011036:	ed97 6a03 	vldr	s12, [r7, #12]
 801103a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80111d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801103e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801104a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801104e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011052:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011056:	e065      	b.n	8011124 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8011058:	697b      	ldr	r3, [r7, #20]
 801105a:	ee07 3a90 	vmov	s15, r3
 801105e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011062:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80111e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8011066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801106a:	4b59      	ldr	r3, [pc, #356]	; (80111d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801106c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801106e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011072:	ee07 3a90 	vmov	s15, r3
 8011076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801107a:	ed97 6a03 	vldr	s12, [r7, #12]
 801107e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80111d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8011082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801108a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801108e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011096:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801109a:	e043      	b.n	8011124 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801109c:	697b      	ldr	r3, [r7, #20]
 801109e:	ee07 3a90 	vmov	s15, r3
 80110a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80111e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80110aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80110ae:	4b48      	ldr	r3, [pc, #288]	; (80111d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80110b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110b6:	ee07 3a90 	vmov	s15, r3
 80110ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80110be:	ed97 6a03 	vldr	s12, [r7, #12]
 80110c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80111d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80110c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80110ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80110ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80110d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80110d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80110de:	e021      	b.n	8011124 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80110e0:	697b      	ldr	r3, [r7, #20]
 80110e2:	ee07 3a90 	vmov	s15, r3
 80110e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80111e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80110ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80110f2:	4b37      	ldr	r3, [pc, #220]	; (80111d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80110f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110fa:	ee07 3a90 	vmov	s15, r3
 80110fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011102:	ed97 6a03 	vldr	s12, [r7, #12]
 8011106:	eddf 5a34 	vldr	s11, [pc, #208]	; 80111d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801110a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801110e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801111a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801111e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011122:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8011124:	4b2a      	ldr	r3, [pc, #168]	; (80111d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011128:	0a5b      	lsrs	r3, r3, #9
 801112a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801112e:	ee07 3a90 	vmov	s15, r3
 8011132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011136:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801113a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801113e:	edd7 6a07 	vldr	s13, [r7, #28]
 8011142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801114a:	ee17 2a90 	vmov	r2, s15
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8011152:	4b1f      	ldr	r3, [pc, #124]	; (80111d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011156:	0c1b      	lsrs	r3, r3, #16
 8011158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801115c:	ee07 3a90 	vmov	s15, r3
 8011160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011164:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011168:	ee37 7a87 	vadd.f32	s14, s15, s14
 801116c:	edd7 6a07 	vldr	s13, [r7, #28]
 8011170:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011174:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011178:	ee17 2a90 	vmov	r2, s15
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8011180:	4b13      	ldr	r3, [pc, #76]	; (80111d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011184:	0e1b      	lsrs	r3, r3, #24
 8011186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801118a:	ee07 3a90 	vmov	s15, r3
 801118e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011192:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011196:	ee37 7a87 	vadd.f32	s14, s15, s14
 801119a:	edd7 6a07 	vldr	s13, [r7, #28]
 801119e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80111a6:	ee17 2a90 	vmov	r2, s15
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80111ae:	e008      	b.n	80111c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	2200      	movs	r2, #0
 80111b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	2200      	movs	r2, #0
 80111ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	2200      	movs	r2, #0
 80111c0:	609a      	str	r2, [r3, #8]
}
 80111c2:	bf00      	nop
 80111c4:	3724      	adds	r7, #36	; 0x24
 80111c6:	46bd      	mov	sp, r7
 80111c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111cc:	4770      	bx	lr
 80111ce:	bf00      	nop
 80111d0:	58024400 	.word	0x58024400
 80111d4:	03d09000 	.word	0x03d09000
 80111d8:	46000000 	.word	0x46000000
 80111dc:	4c742400 	.word	0x4c742400
 80111e0:	4a742400 	.word	0x4a742400
 80111e4:	4bbebc20 	.word	0x4bbebc20

080111e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80111e8:	b480      	push	{r7}
 80111ea:	b089      	sub	sp, #36	; 0x24
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80111f0:	4ba1      	ldr	r3, [pc, #644]	; (8011478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80111f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111f4:	f003 0303 	and.w	r3, r3, #3
 80111f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80111fa:	4b9f      	ldr	r3, [pc, #636]	; (8011478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80111fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111fe:	0d1b      	lsrs	r3, r3, #20
 8011200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011204:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8011206:	4b9c      	ldr	r3, [pc, #624]	; (8011478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801120a:	0a1b      	lsrs	r3, r3, #8
 801120c:	f003 0301 	and.w	r3, r3, #1
 8011210:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8011212:	4b99      	ldr	r3, [pc, #612]	; (8011478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011216:	08db      	lsrs	r3, r3, #3
 8011218:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801121c:	693a      	ldr	r2, [r7, #16]
 801121e:	fb02 f303 	mul.w	r3, r2, r3
 8011222:	ee07 3a90 	vmov	s15, r3
 8011226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801122a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801122e:	697b      	ldr	r3, [r7, #20]
 8011230:	2b00      	cmp	r3, #0
 8011232:	f000 8111 	beq.w	8011458 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8011236:	69bb      	ldr	r3, [r7, #24]
 8011238:	2b02      	cmp	r3, #2
 801123a:	f000 8083 	beq.w	8011344 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801123e:	69bb      	ldr	r3, [r7, #24]
 8011240:	2b02      	cmp	r3, #2
 8011242:	f200 80a1 	bhi.w	8011388 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8011246:	69bb      	ldr	r3, [r7, #24]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d003      	beq.n	8011254 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801124c:	69bb      	ldr	r3, [r7, #24]
 801124e:	2b01      	cmp	r3, #1
 8011250:	d056      	beq.n	8011300 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8011252:	e099      	b.n	8011388 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011254:	4b88      	ldr	r3, [pc, #544]	; (8011478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	f003 0320 	and.w	r3, r3, #32
 801125c:	2b00      	cmp	r3, #0
 801125e:	d02d      	beq.n	80112bc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011260:	4b85      	ldr	r3, [pc, #532]	; (8011478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	08db      	lsrs	r3, r3, #3
 8011266:	f003 0303 	and.w	r3, r3, #3
 801126a:	4a84      	ldr	r2, [pc, #528]	; (801147c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801126c:	fa22 f303 	lsr.w	r3, r2, r3
 8011270:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011272:	68bb      	ldr	r3, [r7, #8]
 8011274:	ee07 3a90 	vmov	s15, r3
 8011278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801127c:	697b      	ldr	r3, [r7, #20]
 801127e:	ee07 3a90 	vmov	s15, r3
 8011282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801128a:	4b7b      	ldr	r3, [pc, #492]	; (8011478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801128e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011292:	ee07 3a90 	vmov	s15, r3
 8011296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801129a:	ed97 6a03 	vldr	s12, [r7, #12]
 801129e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8011480 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80112a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80112a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80112aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80112ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80112b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80112ba:	e087      	b.n	80113cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80112bc:	697b      	ldr	r3, [r7, #20]
 80112be:	ee07 3a90 	vmov	s15, r3
 80112c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8011484 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80112ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80112ce:	4b6a      	ldr	r3, [pc, #424]	; (8011478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80112d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112d6:	ee07 3a90 	vmov	s15, r3
 80112da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80112de:	ed97 6a03 	vldr	s12, [r7, #12]
 80112e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8011480 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80112e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80112ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80112ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80112f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80112f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80112fe:	e065      	b.n	80113cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011300:	697b      	ldr	r3, [r7, #20]
 8011302:	ee07 3a90 	vmov	s15, r3
 8011306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801130a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8011488 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801130e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011312:	4b59      	ldr	r3, [pc, #356]	; (8011478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801131a:	ee07 3a90 	vmov	s15, r3
 801131e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011322:	ed97 6a03 	vldr	s12, [r7, #12]
 8011326:	eddf 5a56 	vldr	s11, [pc, #344]	; 8011480 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801132a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801132e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801133a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801133e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011342:	e043      	b.n	80113cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011344:	697b      	ldr	r3, [r7, #20]
 8011346:	ee07 3a90 	vmov	s15, r3
 801134a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801134e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801148c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8011352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011356:	4b48      	ldr	r3, [pc, #288]	; (8011478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801135a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801135e:	ee07 3a90 	vmov	s15, r3
 8011362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011366:	ed97 6a03 	vldr	s12, [r7, #12]
 801136a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8011480 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801136e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801137a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801137e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011382:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011386:	e021      	b.n	80113cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011388:	697b      	ldr	r3, [r7, #20]
 801138a:	ee07 3a90 	vmov	s15, r3
 801138e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011392:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8011488 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8011396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801139a:	4b37      	ldr	r3, [pc, #220]	; (8011478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801139e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80113a2:	ee07 3a90 	vmov	s15, r3
 80113a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80113aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80113ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8011480 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80113b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80113b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80113ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80113be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80113c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80113ca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80113cc:	4b2a      	ldr	r3, [pc, #168]	; (8011478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80113ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113d0:	0a5b      	lsrs	r3, r3, #9
 80113d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80113d6:	ee07 3a90 	vmov	s15, r3
 80113da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80113de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80113e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80113e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80113ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80113ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80113f2:	ee17 2a90 	vmov	r2, s15
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80113fa:	4b1f      	ldr	r3, [pc, #124]	; (8011478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80113fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113fe:	0c1b      	lsrs	r3, r3, #16
 8011400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011404:	ee07 3a90 	vmov	s15, r3
 8011408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801140c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011410:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011414:	edd7 6a07 	vldr	s13, [r7, #28]
 8011418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801141c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011420:	ee17 2a90 	vmov	r2, s15
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8011428:	4b13      	ldr	r3, [pc, #76]	; (8011478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801142c:	0e1b      	lsrs	r3, r3, #24
 801142e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011432:	ee07 3a90 	vmov	s15, r3
 8011436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801143a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801143e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011442:	edd7 6a07 	vldr	s13, [r7, #28]
 8011446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801144a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801144e:	ee17 2a90 	vmov	r2, s15
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8011456:	e008      	b.n	801146a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	2200      	movs	r2, #0
 801145c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	2200      	movs	r2, #0
 8011462:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	2200      	movs	r2, #0
 8011468:	609a      	str	r2, [r3, #8]
}
 801146a:	bf00      	nop
 801146c:	3724      	adds	r7, #36	; 0x24
 801146e:	46bd      	mov	sp, r7
 8011470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011474:	4770      	bx	lr
 8011476:	bf00      	nop
 8011478:	58024400 	.word	0x58024400
 801147c:	03d09000 	.word	0x03d09000
 8011480:	46000000 	.word	0x46000000
 8011484:	4c742400 	.word	0x4c742400
 8011488:	4a742400 	.word	0x4a742400
 801148c:	4bbebc20 	.word	0x4bbebc20

08011490 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8011490:	b480      	push	{r7}
 8011492:	b089      	sub	sp, #36	; 0x24
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011498:	4ba0      	ldr	r3, [pc, #640]	; (801171c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801149c:	f003 0303 	and.w	r3, r3, #3
 80114a0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80114a2:	4b9e      	ldr	r3, [pc, #632]	; (801171c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80114a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114a6:	091b      	lsrs	r3, r3, #4
 80114a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80114ac:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80114ae:	4b9b      	ldr	r3, [pc, #620]	; (801171c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80114b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114b2:	f003 0301 	and.w	r3, r3, #1
 80114b6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80114b8:	4b98      	ldr	r3, [pc, #608]	; (801171c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80114ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114bc:	08db      	lsrs	r3, r3, #3
 80114be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80114c2:	693a      	ldr	r2, [r7, #16]
 80114c4:	fb02 f303 	mul.w	r3, r2, r3
 80114c8:	ee07 3a90 	vmov	s15, r3
 80114cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80114d0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80114d4:	697b      	ldr	r3, [r7, #20]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	f000 8111 	beq.w	80116fe <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80114dc:	69bb      	ldr	r3, [r7, #24]
 80114de:	2b02      	cmp	r3, #2
 80114e0:	f000 8083 	beq.w	80115ea <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80114e4:	69bb      	ldr	r3, [r7, #24]
 80114e6:	2b02      	cmp	r3, #2
 80114e8:	f200 80a1 	bhi.w	801162e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80114ec:	69bb      	ldr	r3, [r7, #24]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d003      	beq.n	80114fa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80114f2:	69bb      	ldr	r3, [r7, #24]
 80114f4:	2b01      	cmp	r3, #1
 80114f6:	d056      	beq.n	80115a6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80114f8:	e099      	b.n	801162e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80114fa:	4b88      	ldr	r3, [pc, #544]	; (801171c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	f003 0320 	and.w	r3, r3, #32
 8011502:	2b00      	cmp	r3, #0
 8011504:	d02d      	beq.n	8011562 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011506:	4b85      	ldr	r3, [pc, #532]	; (801171c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	08db      	lsrs	r3, r3, #3
 801150c:	f003 0303 	and.w	r3, r3, #3
 8011510:	4a83      	ldr	r2, [pc, #524]	; (8011720 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8011512:	fa22 f303 	lsr.w	r3, r2, r3
 8011516:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011518:	68bb      	ldr	r3, [r7, #8]
 801151a:	ee07 3a90 	vmov	s15, r3
 801151e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011522:	697b      	ldr	r3, [r7, #20]
 8011524:	ee07 3a90 	vmov	s15, r3
 8011528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801152c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011530:	4b7a      	ldr	r3, [pc, #488]	; (801171c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011538:	ee07 3a90 	vmov	s15, r3
 801153c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011540:	ed97 6a03 	vldr	s12, [r7, #12]
 8011544:	eddf 5a77 	vldr	s11, [pc, #476]	; 8011724 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011548:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801154c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011550:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011554:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011558:	ee67 7a27 	vmul.f32	s15, s14, s15
 801155c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8011560:	e087      	b.n	8011672 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011562:	697b      	ldr	r3, [r7, #20]
 8011564:	ee07 3a90 	vmov	s15, r3
 8011568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801156c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8011728 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011570:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011574:	4b69      	ldr	r3, [pc, #420]	; (801171c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801157c:	ee07 3a90 	vmov	s15, r3
 8011580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011584:	ed97 6a03 	vldr	s12, [r7, #12]
 8011588:	eddf 5a66 	vldr	s11, [pc, #408]	; 8011724 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801158c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011590:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011594:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011598:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801159c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80115a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80115a4:	e065      	b.n	8011672 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80115a6:	697b      	ldr	r3, [r7, #20]
 80115a8:	ee07 3a90 	vmov	s15, r3
 80115ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80115b0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 801172c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80115b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80115b8:	4b58      	ldr	r3, [pc, #352]	; (801171c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80115ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80115c0:	ee07 3a90 	vmov	s15, r3
 80115c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80115c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80115cc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8011724 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80115d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80115d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80115d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80115dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80115e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80115e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80115e8:	e043      	b.n	8011672 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	ee07 3a90 	vmov	s15, r3
 80115f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80115f4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8011730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80115f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80115fc:	4b47      	ldr	r3, [pc, #284]	; (801171c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80115fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011604:	ee07 3a90 	vmov	s15, r3
 8011608:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801160c:	ed97 6a03 	vldr	s12, [r7, #12]
 8011610:	eddf 5a44 	vldr	s11, [pc, #272]	; 8011724 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011614:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011618:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801161c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011620:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011628:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801162c:	e021      	b.n	8011672 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801162e:	697b      	ldr	r3, [r7, #20]
 8011630:	ee07 3a90 	vmov	s15, r3
 8011634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011638:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8011728 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801163c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011640:	4b36      	ldr	r3, [pc, #216]	; (801171c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011648:	ee07 3a90 	vmov	s15, r3
 801164c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011650:	ed97 6a03 	vldr	s12, [r7, #12]
 8011654:	eddf 5a33 	vldr	s11, [pc, #204]	; 8011724 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011658:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801165c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011660:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011664:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011668:	ee67 7a27 	vmul.f32	s15, s14, s15
 801166c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011670:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8011672:	4b2a      	ldr	r3, [pc, #168]	; (801171c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011676:	0a5b      	lsrs	r3, r3, #9
 8011678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801167c:	ee07 3a90 	vmov	s15, r3
 8011680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011684:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011688:	ee37 7a87 	vadd.f32	s14, s15, s14
 801168c:	edd7 6a07 	vldr	s13, [r7, #28]
 8011690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011694:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011698:	ee17 2a90 	vmov	r2, s15
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80116a0:	4b1e      	ldr	r3, [pc, #120]	; (801171c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80116a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116a4:	0c1b      	lsrs	r3, r3, #16
 80116a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80116aa:	ee07 3a90 	vmov	s15, r3
 80116ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80116b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80116b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80116ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80116be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80116c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80116c6:	ee17 2a90 	vmov	r2, s15
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80116ce:	4b13      	ldr	r3, [pc, #76]	; (801171c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80116d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116d2:	0e1b      	lsrs	r3, r3, #24
 80116d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80116d8:	ee07 3a90 	vmov	s15, r3
 80116dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80116e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80116e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80116e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80116ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80116f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80116f4:	ee17 2a90 	vmov	r2, s15
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80116fc:	e008      	b.n	8011710 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2200      	movs	r2, #0
 8011702:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2200      	movs	r2, #0
 8011708:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	2200      	movs	r2, #0
 801170e:	609a      	str	r2, [r3, #8]
}
 8011710:	bf00      	nop
 8011712:	3724      	adds	r7, #36	; 0x24
 8011714:	46bd      	mov	sp, r7
 8011716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171a:	4770      	bx	lr
 801171c:	58024400 	.word	0x58024400
 8011720:	03d09000 	.word	0x03d09000
 8011724:	46000000 	.word	0x46000000
 8011728:	4c742400 	.word	0x4c742400
 801172c:	4a742400 	.word	0x4a742400
 8011730:	4bbebc20 	.word	0x4bbebc20

08011734 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8011734:	b580      	push	{r7, lr}
 8011736:	b084      	sub	sp, #16
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
 801173c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801173e:	2300      	movs	r3, #0
 8011740:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011742:	4b53      	ldr	r3, [pc, #332]	; (8011890 <RCCEx_PLL2_Config+0x15c>)
 8011744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011746:	f003 0303 	and.w	r3, r3, #3
 801174a:	2b03      	cmp	r3, #3
 801174c:	d101      	bne.n	8011752 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801174e:	2301      	movs	r3, #1
 8011750:	e099      	b.n	8011886 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8011752:	4b4f      	ldr	r3, [pc, #316]	; (8011890 <RCCEx_PLL2_Config+0x15c>)
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	4a4e      	ldr	r2, [pc, #312]	; (8011890 <RCCEx_PLL2_Config+0x15c>)
 8011758:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801175c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801175e:	f7f4 fc03 	bl	8005f68 <HAL_GetTick>
 8011762:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011764:	e008      	b.n	8011778 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011766:	f7f4 fbff 	bl	8005f68 <HAL_GetTick>
 801176a:	4602      	mov	r2, r0
 801176c:	68bb      	ldr	r3, [r7, #8]
 801176e:	1ad3      	subs	r3, r2, r3
 8011770:	2b02      	cmp	r3, #2
 8011772:	d901      	bls.n	8011778 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011774:	2303      	movs	r3, #3
 8011776:	e086      	b.n	8011886 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011778:	4b45      	ldr	r3, [pc, #276]	; (8011890 <RCCEx_PLL2_Config+0x15c>)
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011780:	2b00      	cmp	r3, #0
 8011782:	d1f0      	bne.n	8011766 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8011784:	4b42      	ldr	r3, [pc, #264]	; (8011890 <RCCEx_PLL2_Config+0x15c>)
 8011786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011788:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	031b      	lsls	r3, r3, #12
 8011792:	493f      	ldr	r1, [pc, #252]	; (8011890 <RCCEx_PLL2_Config+0x15c>)
 8011794:	4313      	orrs	r3, r2
 8011796:	628b      	str	r3, [r1, #40]	; 0x28
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	685b      	ldr	r3, [r3, #4]
 801179c:	3b01      	subs	r3, #1
 801179e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	689b      	ldr	r3, [r3, #8]
 80117a6:	3b01      	subs	r3, #1
 80117a8:	025b      	lsls	r3, r3, #9
 80117aa:	b29b      	uxth	r3, r3
 80117ac:	431a      	orrs	r2, r3
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	68db      	ldr	r3, [r3, #12]
 80117b2:	3b01      	subs	r3, #1
 80117b4:	041b      	lsls	r3, r3, #16
 80117b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80117ba:	431a      	orrs	r2, r3
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	691b      	ldr	r3, [r3, #16]
 80117c0:	3b01      	subs	r3, #1
 80117c2:	061b      	lsls	r3, r3, #24
 80117c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80117c8:	4931      	ldr	r1, [pc, #196]	; (8011890 <RCCEx_PLL2_Config+0x15c>)
 80117ca:	4313      	orrs	r3, r2
 80117cc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80117ce:	4b30      	ldr	r3, [pc, #192]	; (8011890 <RCCEx_PLL2_Config+0x15c>)
 80117d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	695b      	ldr	r3, [r3, #20]
 80117da:	492d      	ldr	r1, [pc, #180]	; (8011890 <RCCEx_PLL2_Config+0x15c>)
 80117dc:	4313      	orrs	r3, r2
 80117de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80117e0:	4b2b      	ldr	r3, [pc, #172]	; (8011890 <RCCEx_PLL2_Config+0x15c>)
 80117e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117e4:	f023 0220 	bic.w	r2, r3, #32
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	699b      	ldr	r3, [r3, #24]
 80117ec:	4928      	ldr	r1, [pc, #160]	; (8011890 <RCCEx_PLL2_Config+0x15c>)
 80117ee:	4313      	orrs	r3, r2
 80117f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80117f2:	4b27      	ldr	r3, [pc, #156]	; (8011890 <RCCEx_PLL2_Config+0x15c>)
 80117f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117f6:	4a26      	ldr	r2, [pc, #152]	; (8011890 <RCCEx_PLL2_Config+0x15c>)
 80117f8:	f023 0310 	bic.w	r3, r3, #16
 80117fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80117fe:	4b24      	ldr	r3, [pc, #144]	; (8011890 <RCCEx_PLL2_Config+0x15c>)
 8011800:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011802:	4b24      	ldr	r3, [pc, #144]	; (8011894 <RCCEx_PLL2_Config+0x160>)
 8011804:	4013      	ands	r3, r2
 8011806:	687a      	ldr	r2, [r7, #4]
 8011808:	69d2      	ldr	r2, [r2, #28]
 801180a:	00d2      	lsls	r2, r2, #3
 801180c:	4920      	ldr	r1, [pc, #128]	; (8011890 <RCCEx_PLL2_Config+0x15c>)
 801180e:	4313      	orrs	r3, r2
 8011810:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8011812:	4b1f      	ldr	r3, [pc, #124]	; (8011890 <RCCEx_PLL2_Config+0x15c>)
 8011814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011816:	4a1e      	ldr	r2, [pc, #120]	; (8011890 <RCCEx_PLL2_Config+0x15c>)
 8011818:	f043 0310 	orr.w	r3, r3, #16
 801181c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801181e:	683b      	ldr	r3, [r7, #0]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d106      	bne.n	8011832 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8011824:	4b1a      	ldr	r3, [pc, #104]	; (8011890 <RCCEx_PLL2_Config+0x15c>)
 8011826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011828:	4a19      	ldr	r2, [pc, #100]	; (8011890 <RCCEx_PLL2_Config+0x15c>)
 801182a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801182e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011830:	e00f      	b.n	8011852 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	2b01      	cmp	r3, #1
 8011836:	d106      	bne.n	8011846 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8011838:	4b15      	ldr	r3, [pc, #84]	; (8011890 <RCCEx_PLL2_Config+0x15c>)
 801183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801183c:	4a14      	ldr	r2, [pc, #80]	; (8011890 <RCCEx_PLL2_Config+0x15c>)
 801183e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011842:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011844:	e005      	b.n	8011852 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8011846:	4b12      	ldr	r3, [pc, #72]	; (8011890 <RCCEx_PLL2_Config+0x15c>)
 8011848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801184a:	4a11      	ldr	r2, [pc, #68]	; (8011890 <RCCEx_PLL2_Config+0x15c>)
 801184c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011850:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8011852:	4b0f      	ldr	r3, [pc, #60]	; (8011890 <RCCEx_PLL2_Config+0x15c>)
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	4a0e      	ldr	r2, [pc, #56]	; (8011890 <RCCEx_PLL2_Config+0x15c>)
 8011858:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801185c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801185e:	f7f4 fb83 	bl	8005f68 <HAL_GetTick>
 8011862:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011864:	e008      	b.n	8011878 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011866:	f7f4 fb7f 	bl	8005f68 <HAL_GetTick>
 801186a:	4602      	mov	r2, r0
 801186c:	68bb      	ldr	r3, [r7, #8]
 801186e:	1ad3      	subs	r3, r2, r3
 8011870:	2b02      	cmp	r3, #2
 8011872:	d901      	bls.n	8011878 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011874:	2303      	movs	r3, #3
 8011876:	e006      	b.n	8011886 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011878:	4b05      	ldr	r3, [pc, #20]	; (8011890 <RCCEx_PLL2_Config+0x15c>)
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011880:	2b00      	cmp	r3, #0
 8011882:	d0f0      	beq.n	8011866 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8011884:	7bfb      	ldrb	r3, [r7, #15]
}
 8011886:	4618      	mov	r0, r3
 8011888:	3710      	adds	r7, #16
 801188a:	46bd      	mov	sp, r7
 801188c:	bd80      	pop	{r7, pc}
 801188e:	bf00      	nop
 8011890:	58024400 	.word	0x58024400
 8011894:	ffff0007 	.word	0xffff0007

08011898 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b084      	sub	sp, #16
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
 80118a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80118a2:	2300      	movs	r3, #0
 80118a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80118a6:	4b53      	ldr	r3, [pc, #332]	; (80119f4 <RCCEx_PLL3_Config+0x15c>)
 80118a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118aa:	f003 0303 	and.w	r3, r3, #3
 80118ae:	2b03      	cmp	r3, #3
 80118b0:	d101      	bne.n	80118b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80118b2:	2301      	movs	r3, #1
 80118b4:	e099      	b.n	80119ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80118b6:	4b4f      	ldr	r3, [pc, #316]	; (80119f4 <RCCEx_PLL3_Config+0x15c>)
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	4a4e      	ldr	r2, [pc, #312]	; (80119f4 <RCCEx_PLL3_Config+0x15c>)
 80118bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80118c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80118c2:	f7f4 fb51 	bl	8005f68 <HAL_GetTick>
 80118c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80118c8:	e008      	b.n	80118dc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80118ca:	f7f4 fb4d 	bl	8005f68 <HAL_GetTick>
 80118ce:	4602      	mov	r2, r0
 80118d0:	68bb      	ldr	r3, [r7, #8]
 80118d2:	1ad3      	subs	r3, r2, r3
 80118d4:	2b02      	cmp	r3, #2
 80118d6:	d901      	bls.n	80118dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80118d8:	2303      	movs	r3, #3
 80118da:	e086      	b.n	80119ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80118dc:	4b45      	ldr	r3, [pc, #276]	; (80119f4 <RCCEx_PLL3_Config+0x15c>)
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d1f0      	bne.n	80118ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80118e8:	4b42      	ldr	r3, [pc, #264]	; (80119f4 <RCCEx_PLL3_Config+0x15c>)
 80118ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118ec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	051b      	lsls	r3, r3, #20
 80118f6:	493f      	ldr	r1, [pc, #252]	; (80119f4 <RCCEx_PLL3_Config+0x15c>)
 80118f8:	4313      	orrs	r3, r2
 80118fa:	628b      	str	r3, [r1, #40]	; 0x28
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	685b      	ldr	r3, [r3, #4]
 8011900:	3b01      	subs	r3, #1
 8011902:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	689b      	ldr	r3, [r3, #8]
 801190a:	3b01      	subs	r3, #1
 801190c:	025b      	lsls	r3, r3, #9
 801190e:	b29b      	uxth	r3, r3
 8011910:	431a      	orrs	r2, r3
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	68db      	ldr	r3, [r3, #12]
 8011916:	3b01      	subs	r3, #1
 8011918:	041b      	lsls	r3, r3, #16
 801191a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801191e:	431a      	orrs	r2, r3
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	691b      	ldr	r3, [r3, #16]
 8011924:	3b01      	subs	r3, #1
 8011926:	061b      	lsls	r3, r3, #24
 8011928:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801192c:	4931      	ldr	r1, [pc, #196]	; (80119f4 <RCCEx_PLL3_Config+0x15c>)
 801192e:	4313      	orrs	r3, r2
 8011930:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8011932:	4b30      	ldr	r3, [pc, #192]	; (80119f4 <RCCEx_PLL3_Config+0x15c>)
 8011934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011936:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	695b      	ldr	r3, [r3, #20]
 801193e:	492d      	ldr	r1, [pc, #180]	; (80119f4 <RCCEx_PLL3_Config+0x15c>)
 8011940:	4313      	orrs	r3, r2
 8011942:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8011944:	4b2b      	ldr	r3, [pc, #172]	; (80119f4 <RCCEx_PLL3_Config+0x15c>)
 8011946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011948:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	699b      	ldr	r3, [r3, #24]
 8011950:	4928      	ldr	r1, [pc, #160]	; (80119f4 <RCCEx_PLL3_Config+0x15c>)
 8011952:	4313      	orrs	r3, r2
 8011954:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8011956:	4b27      	ldr	r3, [pc, #156]	; (80119f4 <RCCEx_PLL3_Config+0x15c>)
 8011958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801195a:	4a26      	ldr	r2, [pc, #152]	; (80119f4 <RCCEx_PLL3_Config+0x15c>)
 801195c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011960:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8011962:	4b24      	ldr	r3, [pc, #144]	; (80119f4 <RCCEx_PLL3_Config+0x15c>)
 8011964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011966:	4b24      	ldr	r3, [pc, #144]	; (80119f8 <RCCEx_PLL3_Config+0x160>)
 8011968:	4013      	ands	r3, r2
 801196a:	687a      	ldr	r2, [r7, #4]
 801196c:	69d2      	ldr	r2, [r2, #28]
 801196e:	00d2      	lsls	r2, r2, #3
 8011970:	4920      	ldr	r1, [pc, #128]	; (80119f4 <RCCEx_PLL3_Config+0x15c>)
 8011972:	4313      	orrs	r3, r2
 8011974:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8011976:	4b1f      	ldr	r3, [pc, #124]	; (80119f4 <RCCEx_PLL3_Config+0x15c>)
 8011978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801197a:	4a1e      	ldr	r2, [pc, #120]	; (80119f4 <RCCEx_PLL3_Config+0x15c>)
 801197c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011980:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8011982:	683b      	ldr	r3, [r7, #0]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d106      	bne.n	8011996 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8011988:	4b1a      	ldr	r3, [pc, #104]	; (80119f4 <RCCEx_PLL3_Config+0x15c>)
 801198a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801198c:	4a19      	ldr	r2, [pc, #100]	; (80119f4 <RCCEx_PLL3_Config+0x15c>)
 801198e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8011992:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011994:	e00f      	b.n	80119b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011996:	683b      	ldr	r3, [r7, #0]
 8011998:	2b01      	cmp	r3, #1
 801199a:	d106      	bne.n	80119aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801199c:	4b15      	ldr	r3, [pc, #84]	; (80119f4 <RCCEx_PLL3_Config+0x15c>)
 801199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119a0:	4a14      	ldr	r2, [pc, #80]	; (80119f4 <RCCEx_PLL3_Config+0x15c>)
 80119a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80119a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80119a8:	e005      	b.n	80119b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80119aa:	4b12      	ldr	r3, [pc, #72]	; (80119f4 <RCCEx_PLL3_Config+0x15c>)
 80119ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119ae:	4a11      	ldr	r2, [pc, #68]	; (80119f4 <RCCEx_PLL3_Config+0x15c>)
 80119b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80119b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80119b6:	4b0f      	ldr	r3, [pc, #60]	; (80119f4 <RCCEx_PLL3_Config+0x15c>)
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	4a0e      	ldr	r2, [pc, #56]	; (80119f4 <RCCEx_PLL3_Config+0x15c>)
 80119bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80119c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80119c2:	f7f4 fad1 	bl	8005f68 <HAL_GetTick>
 80119c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80119c8:	e008      	b.n	80119dc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80119ca:	f7f4 facd 	bl	8005f68 <HAL_GetTick>
 80119ce:	4602      	mov	r2, r0
 80119d0:	68bb      	ldr	r3, [r7, #8]
 80119d2:	1ad3      	subs	r3, r2, r3
 80119d4:	2b02      	cmp	r3, #2
 80119d6:	d901      	bls.n	80119dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80119d8:	2303      	movs	r3, #3
 80119da:	e006      	b.n	80119ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80119dc:	4b05      	ldr	r3, [pc, #20]	; (80119f4 <RCCEx_PLL3_Config+0x15c>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d0f0      	beq.n	80119ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80119e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80119ea:	4618      	mov	r0, r3
 80119ec:	3710      	adds	r7, #16
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}
 80119f2:	bf00      	nop
 80119f4:	58024400 	.word	0x58024400
 80119f8:	ffff0007 	.word	0xffff0007

080119fc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b084      	sub	sp, #16
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011a04:	2301      	movs	r3, #1
 8011a06:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d071      	beq.n	8011af2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011a14:	b2db      	uxtb	r3, r3
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d106      	bne.n	8011a28 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	f7f2 fa90 	bl	8003f48 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	2202      	movs	r2, #2
 8011a2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	68db      	ldr	r3, [r3, #12]
 8011a36:	f003 0310 	and.w	r3, r3, #16
 8011a3a:	2b10      	cmp	r3, #16
 8011a3c:	d050      	beq.n	8011ae0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	22ca      	movs	r2, #202	; 0xca
 8011a44:	625a      	str	r2, [r3, #36]	; 0x24
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	2253      	movs	r2, #83	; 0x53
 8011a4c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8011a4e:	6878      	ldr	r0, [r7, #4]
 8011a50:	f000 fa4a 	bl	8011ee8 <RTC_EnterInitMode>
 8011a54:	4603      	mov	r3, r0
 8011a56:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8011a58:	7bfb      	ldrb	r3, [r7, #15]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d124      	bne.n	8011aa8 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	6899      	ldr	r1, [r3, #8]
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	681a      	ldr	r2, [r3, #0]
 8011a68:	4b24      	ldr	r3, [pc, #144]	; (8011afc <HAL_RTC_Init+0x100>)
 8011a6a:	400b      	ands	r3, r1
 8011a6c:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	6899      	ldr	r1, [r3, #8]
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	685a      	ldr	r2, [r3, #4]
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	691b      	ldr	r3, [r3, #16]
 8011a7c:	431a      	orrs	r2, r3
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	699b      	ldr	r3, [r3, #24]
 8011a82:	431a      	orrs	r2, r3
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	430a      	orrs	r2, r1
 8011a8a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	689b      	ldr	r3, [r3, #8]
 8011a90:	0419      	lsls	r1, r3, #16
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	68da      	ldr	r2, [r3, #12]
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	430a      	orrs	r2, r1
 8011a9c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8011a9e:	6878      	ldr	r0, [r7, #4]
 8011aa0:	f000 fa56 	bl	8011f50 <RTC_ExitInitMode>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8011aa8:	7bfb      	ldrb	r3, [r7, #15]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d113      	bne.n	8011ad6 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	f022 0203 	bic.w	r2, r2, #3
 8011abc:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	69da      	ldr	r2, [r3, #28]
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	695b      	ldr	r3, [r3, #20]
 8011acc:	431a      	orrs	r2, r3
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	430a      	orrs	r2, r1
 8011ad4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	22ff      	movs	r2, #255	; 0xff
 8011adc:	625a      	str	r2, [r3, #36]	; 0x24
 8011ade:	e001      	b.n	8011ae4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8011ae4:	7bfb      	ldrb	r3, [r7, #15]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d103      	bne.n	8011af2 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2201      	movs	r2, #1
 8011aee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8011af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	3710      	adds	r7, #16
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}
 8011afc:	ff8fffbf 	.word	0xff8fffbf

08011b00 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011b00:	b590      	push	{r4, r7, lr}
 8011b02:	b087      	sub	sp, #28
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	60f8      	str	r0, [r7, #12]
 8011b08:	60b9      	str	r1, [r7, #8]
 8011b0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011b12:	2b01      	cmp	r3, #1
 8011b14:	d101      	bne.n	8011b1a <HAL_RTC_SetTime+0x1a>
 8011b16:	2302      	movs	r3, #2
 8011b18:	e089      	b.n	8011c2e <HAL_RTC_SetTime+0x12e>
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	2201      	movs	r2, #1
 8011b1e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	2202      	movs	r2, #2
 8011b26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	22ca      	movs	r2, #202	; 0xca
 8011b30:	625a      	str	r2, [r3, #36]	; 0x24
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	2253      	movs	r2, #83	; 0x53
 8011b38:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011b3a:	68f8      	ldr	r0, [r7, #12]
 8011b3c:	f000 f9d4 	bl	8011ee8 <RTC_EnterInitMode>
 8011b40:	4603      	mov	r3, r0
 8011b42:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011b44:	7cfb      	ldrb	r3, [r7, #19]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d161      	bne.n	8011c0e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d126      	bne.n	8011b9e <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	689b      	ldr	r3, [r3, #8]
 8011b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d102      	bne.n	8011b64 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011b5e:	68bb      	ldr	r3, [r7, #8]
 8011b60:	2200      	movs	r2, #0
 8011b62:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011b64:	68bb      	ldr	r3, [r7, #8]
 8011b66:	781b      	ldrb	r3, [r3, #0]
 8011b68:	4618      	mov	r0, r3
 8011b6a:	f000 fa2f 	bl	8011fcc <RTC_ByteToBcd2>
 8011b6e:	4603      	mov	r3, r0
 8011b70:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011b72:	68bb      	ldr	r3, [r7, #8]
 8011b74:	785b      	ldrb	r3, [r3, #1]
 8011b76:	4618      	mov	r0, r3
 8011b78:	f000 fa28 	bl	8011fcc <RTC_ByteToBcd2>
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011b80:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8011b82:	68bb      	ldr	r3, [r7, #8]
 8011b84:	789b      	ldrb	r3, [r3, #2]
 8011b86:	4618      	mov	r0, r3
 8011b88:	f000 fa20 	bl	8011fcc <RTC_ByteToBcd2>
 8011b8c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011b8e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011b92:	68bb      	ldr	r3, [r7, #8]
 8011b94:	78db      	ldrb	r3, [r3, #3]
 8011b96:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011b98:	4313      	orrs	r3, r2
 8011b9a:	617b      	str	r3, [r7, #20]
 8011b9c:	e018      	b.n	8011bd0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	689b      	ldr	r3, [r3, #8]
 8011ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d102      	bne.n	8011bb2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011bac:	68bb      	ldr	r3, [r7, #8]
 8011bae:	2200      	movs	r2, #0
 8011bb0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011bb2:	68bb      	ldr	r3, [r7, #8]
 8011bb4:	781b      	ldrb	r3, [r3, #0]
 8011bb6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011bb8:	68bb      	ldr	r3, [r7, #8]
 8011bba:	785b      	ldrb	r3, [r3, #1]
 8011bbc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011bbe:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8011bc0:	68ba      	ldr	r2, [r7, #8]
 8011bc2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011bc4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011bc6:	68bb      	ldr	r3, [r7, #8]
 8011bc8:	78db      	ldrb	r3, [r3, #3]
 8011bca:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011bcc:	4313      	orrs	r3, r2
 8011bce:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	681a      	ldr	r2, [r3, #0]
 8011bd4:	6979      	ldr	r1, [r7, #20]
 8011bd6:	4b18      	ldr	r3, [pc, #96]	; (8011c38 <HAL_RTC_SetTime+0x138>)
 8011bd8:	400b      	ands	r3, r1
 8011bda:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	689a      	ldr	r2, [r3, #8]
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011bea:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	6899      	ldr	r1, [r3, #8]
 8011bf2:	68bb      	ldr	r3, [r7, #8]
 8011bf4:	68da      	ldr	r2, [r3, #12]
 8011bf6:	68bb      	ldr	r3, [r7, #8]
 8011bf8:	691b      	ldr	r3, [r3, #16]
 8011bfa:	431a      	orrs	r2, r3
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	430a      	orrs	r2, r1
 8011c02:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011c04:	68f8      	ldr	r0, [r7, #12]
 8011c06:	f000 f9a3 	bl	8011f50 <RTC_ExitInitMode>
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	22ff      	movs	r2, #255	; 0xff
 8011c14:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8011c16:	7cfb      	ldrb	r3, [r7, #19]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d103      	bne.n	8011c24 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	2201      	movs	r2, #1
 8011c20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	2200      	movs	r2, #0
 8011c28:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011c2c:	7cfb      	ldrb	r3, [r7, #19]
}
 8011c2e:	4618      	mov	r0, r3
 8011c30:	371c      	adds	r7, #28
 8011c32:	46bd      	mov	sp, r7
 8011c34:	bd90      	pop	{r4, r7, pc}
 8011c36:	bf00      	nop
 8011c38:	007f7f7f 	.word	0x007f7f7f

08011c3c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b086      	sub	sp, #24
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	60f8      	str	r0, [r7, #12]
 8011c44:	60b9      	str	r1, [r7, #8]
 8011c46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c4e:	68bb      	ldr	r3, [r7, #8]
 8011c50:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	691b      	ldr	r3, [r3, #16]
 8011c58:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	681a      	ldr	r2, [r3, #0]
 8011c66:	4b22      	ldr	r3, [pc, #136]	; (8011cf0 <HAL_RTC_GetTime+0xb4>)
 8011c68:	4013      	ands	r3, r2
 8011c6a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8011c6c:	697b      	ldr	r3, [r7, #20]
 8011c6e:	0c1b      	lsrs	r3, r3, #16
 8011c70:	b2db      	uxtb	r3, r3
 8011c72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011c76:	b2da      	uxtb	r2, r3
 8011c78:	68bb      	ldr	r3, [r7, #8]
 8011c7a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8011c7c:	697b      	ldr	r3, [r7, #20]
 8011c7e:	0a1b      	lsrs	r3, r3, #8
 8011c80:	b2db      	uxtb	r3, r3
 8011c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c86:	b2da      	uxtb	r2, r3
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8011c8c:	697b      	ldr	r3, [r7, #20]
 8011c8e:	b2db      	uxtb	r3, r3
 8011c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c94:	b2da      	uxtb	r2, r3
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8011c9a:	697b      	ldr	r3, [r7, #20]
 8011c9c:	0d9b      	lsrs	r3, r3, #22
 8011c9e:	b2db      	uxtb	r3, r3
 8011ca0:	f003 0301 	and.w	r3, r3, #1
 8011ca4:	b2da      	uxtb	r2, r3
 8011ca6:	68bb      	ldr	r3, [r7, #8]
 8011ca8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d11a      	bne.n	8011ce6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8011cb0:	68bb      	ldr	r3, [r7, #8]
 8011cb2:	781b      	ldrb	r3, [r3, #0]
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	f000 f9a9 	bl	801200c <RTC_Bcd2ToByte>
 8011cba:	4603      	mov	r3, r0
 8011cbc:	461a      	mov	r2, r3
 8011cbe:	68bb      	ldr	r3, [r7, #8]
 8011cc0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8011cc2:	68bb      	ldr	r3, [r7, #8]
 8011cc4:	785b      	ldrb	r3, [r3, #1]
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	f000 f9a0 	bl	801200c <RTC_Bcd2ToByte>
 8011ccc:	4603      	mov	r3, r0
 8011cce:	461a      	mov	r2, r3
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8011cd4:	68bb      	ldr	r3, [r7, #8]
 8011cd6:	789b      	ldrb	r3, [r3, #2]
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f000 f997 	bl	801200c <RTC_Bcd2ToByte>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	461a      	mov	r2, r3
 8011ce2:	68bb      	ldr	r3, [r7, #8]
 8011ce4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8011ce6:	2300      	movs	r3, #0
}
 8011ce8:	4618      	mov	r0, r3
 8011cea:	3718      	adds	r7, #24
 8011cec:	46bd      	mov	sp, r7
 8011cee:	bd80      	pop	{r7, pc}
 8011cf0:	007f7f7f 	.word	0x007f7f7f

08011cf4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011cf4:	b590      	push	{r4, r7, lr}
 8011cf6:	b087      	sub	sp, #28
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	60f8      	str	r0, [r7, #12]
 8011cfc:	60b9      	str	r1, [r7, #8]
 8011cfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011d06:	2b01      	cmp	r3, #1
 8011d08:	d101      	bne.n	8011d0e <HAL_RTC_SetDate+0x1a>
 8011d0a:	2302      	movs	r3, #2
 8011d0c:	e073      	b.n	8011df6 <HAL_RTC_SetDate+0x102>
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	2201      	movs	r2, #1
 8011d12:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	2202      	movs	r2, #2
 8011d1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d10e      	bne.n	8011d42 <HAL_RTC_SetDate+0x4e>
 8011d24:	68bb      	ldr	r3, [r7, #8]
 8011d26:	785b      	ldrb	r3, [r3, #1]
 8011d28:	f003 0310 	and.w	r3, r3, #16
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d008      	beq.n	8011d42 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8011d30:	68bb      	ldr	r3, [r7, #8]
 8011d32:	785b      	ldrb	r3, [r3, #1]
 8011d34:	f023 0310 	bic.w	r3, r3, #16
 8011d38:	b2db      	uxtb	r3, r3
 8011d3a:	330a      	adds	r3, #10
 8011d3c:	b2da      	uxtb	r2, r3
 8011d3e:	68bb      	ldr	r3, [r7, #8]
 8011d40:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d11c      	bne.n	8011d82 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011d48:	68bb      	ldr	r3, [r7, #8]
 8011d4a:	78db      	ldrb	r3, [r3, #3]
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f000 f93d 	bl	8011fcc <RTC_ByteToBcd2>
 8011d52:	4603      	mov	r3, r0
 8011d54:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011d56:	68bb      	ldr	r3, [r7, #8]
 8011d58:	785b      	ldrb	r3, [r3, #1]
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f000 f936 	bl	8011fcc <RTC_ByteToBcd2>
 8011d60:	4603      	mov	r3, r0
 8011d62:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011d64:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	789b      	ldrb	r3, [r3, #2]
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	f000 f92e 	bl	8011fcc <RTC_ByteToBcd2>
 8011d70:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011d72:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8011d76:	68bb      	ldr	r3, [r7, #8]
 8011d78:	781b      	ldrb	r3, [r3, #0]
 8011d7a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011d7c:	4313      	orrs	r3, r2
 8011d7e:	617b      	str	r3, [r7, #20]
 8011d80:	e00e      	b.n	8011da0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011d82:	68bb      	ldr	r3, [r7, #8]
 8011d84:	78db      	ldrb	r3, [r3, #3]
 8011d86:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8011d88:	68bb      	ldr	r3, [r7, #8]
 8011d8a:	785b      	ldrb	r3, [r3, #1]
 8011d8c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011d8e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8011d90:	68ba      	ldr	r2, [r7, #8]
 8011d92:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8011d94:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8011d96:	68bb      	ldr	r3, [r7, #8]
 8011d98:	781b      	ldrb	r3, [r3, #0]
 8011d9a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011d9c:	4313      	orrs	r3, r2
 8011d9e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	22ca      	movs	r2, #202	; 0xca
 8011da6:	625a      	str	r2, [r3, #36]	; 0x24
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	2253      	movs	r2, #83	; 0x53
 8011dae:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011db0:	68f8      	ldr	r0, [r7, #12]
 8011db2:	f000 f899 	bl	8011ee8 <RTC_EnterInitMode>
 8011db6:	4603      	mov	r3, r0
 8011db8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011dba:	7cfb      	ldrb	r3, [r7, #19]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d10a      	bne.n	8011dd6 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	681a      	ldr	r2, [r3, #0]
 8011dc4:	6979      	ldr	r1, [r7, #20]
 8011dc6:	4b0e      	ldr	r3, [pc, #56]	; (8011e00 <HAL_RTC_SetDate+0x10c>)
 8011dc8:	400b      	ands	r3, r1
 8011dca:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011dcc:	68f8      	ldr	r0, [r7, #12]
 8011dce:	f000 f8bf 	bl	8011f50 <RTC_ExitInitMode>
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	22ff      	movs	r2, #255	; 0xff
 8011ddc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8011dde:	7cfb      	ldrb	r3, [r7, #19]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d103      	bne.n	8011dec <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	2201      	movs	r2, #1
 8011de8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	2200      	movs	r2, #0
 8011df0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011df4:	7cfb      	ldrb	r3, [r7, #19]


}
 8011df6:	4618      	mov	r0, r3
 8011df8:	371c      	adds	r7, #28
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd90      	pop	{r4, r7, pc}
 8011dfe:	bf00      	nop
 8011e00:	00ffff3f 	.word	0x00ffff3f

08011e04 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b086      	sub	sp, #24
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	60f8      	str	r0, [r7, #12]
 8011e0c:	60b9      	str	r1, [r7, #8]
 8011e0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	685a      	ldr	r2, [r3, #4]
 8011e16:	4b21      	ldr	r3, [pc, #132]	; (8011e9c <HAL_RTC_GetDate+0x98>)
 8011e18:	4013      	ands	r3, r2
 8011e1a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8011e1c:	697b      	ldr	r3, [r7, #20]
 8011e1e:	0c1b      	lsrs	r3, r3, #16
 8011e20:	b2da      	uxtb	r2, r3
 8011e22:	68bb      	ldr	r3, [r7, #8]
 8011e24:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8011e26:	697b      	ldr	r3, [r7, #20]
 8011e28:	0a1b      	lsrs	r3, r3, #8
 8011e2a:	b2db      	uxtb	r3, r3
 8011e2c:	f003 031f 	and.w	r3, r3, #31
 8011e30:	b2da      	uxtb	r2, r3
 8011e32:	68bb      	ldr	r3, [r7, #8]
 8011e34:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8011e36:	697b      	ldr	r3, [r7, #20]
 8011e38:	b2db      	uxtb	r3, r3
 8011e3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011e3e:	b2da      	uxtb	r2, r3
 8011e40:	68bb      	ldr	r3, [r7, #8]
 8011e42:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8011e44:	697b      	ldr	r3, [r7, #20]
 8011e46:	0b5b      	lsrs	r3, r3, #13
 8011e48:	b2db      	uxtb	r3, r3
 8011e4a:	f003 0307 	and.w	r3, r3, #7
 8011e4e:	b2da      	uxtb	r2, r3
 8011e50:	68bb      	ldr	r3, [r7, #8]
 8011e52:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d11a      	bne.n	8011e90 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011e5a:	68bb      	ldr	r3, [r7, #8]
 8011e5c:	78db      	ldrb	r3, [r3, #3]
 8011e5e:	4618      	mov	r0, r3
 8011e60:	f000 f8d4 	bl	801200c <RTC_Bcd2ToByte>
 8011e64:	4603      	mov	r3, r0
 8011e66:	461a      	mov	r2, r3
 8011e68:	68bb      	ldr	r3, [r7, #8]
 8011e6a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011e6c:	68bb      	ldr	r3, [r7, #8]
 8011e6e:	785b      	ldrb	r3, [r3, #1]
 8011e70:	4618      	mov	r0, r3
 8011e72:	f000 f8cb 	bl	801200c <RTC_Bcd2ToByte>
 8011e76:	4603      	mov	r3, r0
 8011e78:	461a      	mov	r2, r3
 8011e7a:	68bb      	ldr	r3, [r7, #8]
 8011e7c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8011e7e:	68bb      	ldr	r3, [r7, #8]
 8011e80:	789b      	ldrb	r3, [r3, #2]
 8011e82:	4618      	mov	r0, r3
 8011e84:	f000 f8c2 	bl	801200c <RTC_Bcd2ToByte>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	461a      	mov	r2, r3
 8011e8c:	68bb      	ldr	r3, [r7, #8]
 8011e8e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8011e90:	2300      	movs	r3, #0
}
 8011e92:	4618      	mov	r0, r3
 8011e94:	3718      	adds	r7, #24
 8011e96:	46bd      	mov	sp, r7
 8011e98:	bd80      	pop	{r7, pc}
 8011e9a:	bf00      	nop
 8011e9c:	00ffff3f 	.word	0x00ffff3f

08011ea0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b084      	sub	sp, #16
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	4a0d      	ldr	r2, [pc, #52]	; (8011ee4 <HAL_RTC_WaitForSynchro+0x44>)
 8011eae:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8011eb0:	f7f4 f85a 	bl	8005f68 <HAL_GetTick>
 8011eb4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011eb6:	e009      	b.n	8011ecc <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011eb8:	f7f4 f856 	bl	8005f68 <HAL_GetTick>
 8011ebc:	4602      	mov	r2, r0
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	1ad3      	subs	r3, r2, r3
 8011ec2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011ec6:	d901      	bls.n	8011ecc <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8011ec8:	2303      	movs	r3, #3
 8011eca:	e007      	b.n	8011edc <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	68db      	ldr	r3, [r3, #12]
 8011ed2:	f003 0320 	and.w	r3, r3, #32
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d0ee      	beq.n	8011eb8 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8011eda:	2300      	movs	r3, #0
}
 8011edc:	4618      	mov	r0, r3
 8011ede:	3710      	adds	r7, #16
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	bd80      	pop	{r7, pc}
 8011ee4:	0003ff5f 	.word	0x0003ff5f

08011ee8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b084      	sub	sp, #16
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	68db      	ldr	r3, [r3, #12]
 8011efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d120      	bne.n	8011f44 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011f0a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8011f0c:	f7f4 f82c 	bl	8005f68 <HAL_GetTick>
 8011f10:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011f12:	e00d      	b.n	8011f30 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011f14:	f7f4 f828 	bl	8005f68 <HAL_GetTick>
 8011f18:	4602      	mov	r2, r0
 8011f1a:	68bb      	ldr	r3, [r7, #8]
 8011f1c:	1ad3      	subs	r3, r2, r3
 8011f1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011f22:	d905      	bls.n	8011f30 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8011f24:	2303      	movs	r3, #3
 8011f26:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	2203      	movs	r2, #3
 8011f2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	68db      	ldr	r3, [r3, #12]
 8011f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d102      	bne.n	8011f44 <RTC_EnterInitMode+0x5c>
 8011f3e:	7bfb      	ldrb	r3, [r7, #15]
 8011f40:	2b03      	cmp	r3, #3
 8011f42:	d1e7      	bne.n	8011f14 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8011f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f46:	4618      	mov	r0, r3
 8011f48:	3710      	adds	r7, #16
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	bd80      	pop	{r7, pc}
	...

08011f50 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b084      	sub	sp, #16
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011f58:	2300      	movs	r3, #0
 8011f5a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8011f5c:	4b1a      	ldr	r3, [pc, #104]	; (8011fc8 <RTC_ExitInitMode+0x78>)
 8011f5e:	68db      	ldr	r3, [r3, #12]
 8011f60:	4a19      	ldr	r2, [pc, #100]	; (8011fc8 <RTC_ExitInitMode+0x78>)
 8011f62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011f66:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8011f68:	4b17      	ldr	r3, [pc, #92]	; (8011fc8 <RTC_ExitInitMode+0x78>)
 8011f6a:	689b      	ldr	r3, [r3, #8]
 8011f6c:	f003 0320 	and.w	r3, r3, #32
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d10c      	bne.n	8011f8e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011f74:	6878      	ldr	r0, [r7, #4]
 8011f76:	f7ff ff93 	bl	8011ea0 <HAL_RTC_WaitForSynchro>
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d01e      	beq.n	8011fbe <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	2203      	movs	r2, #3
 8011f84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8011f88:	2303      	movs	r3, #3
 8011f8a:	73fb      	strb	r3, [r7, #15]
 8011f8c:	e017      	b.n	8011fbe <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011f8e:	4b0e      	ldr	r3, [pc, #56]	; (8011fc8 <RTC_ExitInitMode+0x78>)
 8011f90:	689b      	ldr	r3, [r3, #8]
 8011f92:	4a0d      	ldr	r2, [pc, #52]	; (8011fc8 <RTC_ExitInitMode+0x78>)
 8011f94:	f023 0320 	bic.w	r3, r3, #32
 8011f98:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011f9a:	6878      	ldr	r0, [r7, #4]
 8011f9c:	f7ff ff80 	bl	8011ea0 <HAL_RTC_WaitForSynchro>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d005      	beq.n	8011fb2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2203      	movs	r2, #3
 8011faa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8011fae:	2303      	movs	r3, #3
 8011fb0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011fb2:	4b05      	ldr	r3, [pc, #20]	; (8011fc8 <RTC_ExitInitMode+0x78>)
 8011fb4:	689b      	ldr	r3, [r3, #8]
 8011fb6:	4a04      	ldr	r2, [pc, #16]	; (8011fc8 <RTC_ExitInitMode+0x78>)
 8011fb8:	f043 0320 	orr.w	r3, r3, #32
 8011fbc:	6093      	str	r3, [r2, #8]
  }

  return status;
 8011fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	3710      	adds	r7, #16
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	bd80      	pop	{r7, pc}
 8011fc8:	58004000 	.word	0x58004000

08011fcc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8011fcc:	b480      	push	{r7}
 8011fce:	b085      	sub	sp, #20
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8011fda:	79fb      	ldrb	r3, [r7, #7]
 8011fdc:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8011fde:	e005      	b.n	8011fec <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	3301      	adds	r3, #1
 8011fe4:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8011fe6:	7afb      	ldrb	r3, [r7, #11]
 8011fe8:	3b0a      	subs	r3, #10
 8011fea:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8011fec:	7afb      	ldrb	r3, [r7, #11]
 8011fee:	2b09      	cmp	r3, #9
 8011ff0:	d8f6      	bhi.n	8011fe0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	b2db      	uxtb	r3, r3
 8011ff6:	011b      	lsls	r3, r3, #4
 8011ff8:	b2da      	uxtb	r2, r3
 8011ffa:	7afb      	ldrb	r3, [r7, #11]
 8011ffc:	4313      	orrs	r3, r2
 8011ffe:	b2db      	uxtb	r3, r3
}
 8012000:	4618      	mov	r0, r3
 8012002:	3714      	adds	r7, #20
 8012004:	46bd      	mov	sp, r7
 8012006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200a:	4770      	bx	lr

0801200c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 801200c:	b480      	push	{r7}
 801200e:	b085      	sub	sp, #20
 8012010:	af00      	add	r7, sp, #0
 8012012:	4603      	mov	r3, r0
 8012014:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8012016:	79fb      	ldrb	r3, [r7, #7]
 8012018:	091b      	lsrs	r3, r3, #4
 801201a:	b2db      	uxtb	r3, r3
 801201c:	461a      	mov	r2, r3
 801201e:	0092      	lsls	r2, r2, #2
 8012020:	4413      	add	r3, r2
 8012022:	005b      	lsls	r3, r3, #1
 8012024:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8012026:	79fb      	ldrb	r3, [r7, #7]
 8012028:	f003 030f 	and.w	r3, r3, #15
 801202c:	b2da      	uxtb	r2, r3
 801202e:	7bfb      	ldrb	r3, [r7, #15]
 8012030:	4413      	add	r3, r2
 8012032:	b2db      	uxtb	r3, r3
}
 8012034:	4618      	mov	r0, r3
 8012036:	3714      	adds	r7, #20
 8012038:	46bd      	mov	sp, r7
 801203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203e:	4770      	bx	lr

08012040 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b084      	sub	sp, #16
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d101      	bne.n	8012052 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801204e:	2301      	movs	r3, #1
 8012050:	e10f      	b.n	8012272 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	2200      	movs	r2, #0
 8012056:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	4a87      	ldr	r2, [pc, #540]	; (801227c <HAL_SPI_Init+0x23c>)
 801205e:	4293      	cmp	r3, r2
 8012060:	d00f      	beq.n	8012082 <HAL_SPI_Init+0x42>
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	4a86      	ldr	r2, [pc, #536]	; (8012280 <HAL_SPI_Init+0x240>)
 8012068:	4293      	cmp	r3, r2
 801206a:	d00a      	beq.n	8012082 <HAL_SPI_Init+0x42>
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	4a84      	ldr	r2, [pc, #528]	; (8012284 <HAL_SPI_Init+0x244>)
 8012072:	4293      	cmp	r3, r2
 8012074:	d005      	beq.n	8012082 <HAL_SPI_Init+0x42>
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	68db      	ldr	r3, [r3, #12]
 801207a:	2b0f      	cmp	r3, #15
 801207c:	d901      	bls.n	8012082 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801207e:	2301      	movs	r3, #1
 8012080:	e0f7      	b.n	8012272 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8012082:	6878      	ldr	r0, [r7, #4]
 8012084:	f000 fd60 	bl	8012b48 <SPI_GetPacketSize>
 8012088:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	4a7b      	ldr	r2, [pc, #492]	; (801227c <HAL_SPI_Init+0x23c>)
 8012090:	4293      	cmp	r3, r2
 8012092:	d00c      	beq.n	80120ae <HAL_SPI_Init+0x6e>
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	4a79      	ldr	r2, [pc, #484]	; (8012280 <HAL_SPI_Init+0x240>)
 801209a:	4293      	cmp	r3, r2
 801209c:	d007      	beq.n	80120ae <HAL_SPI_Init+0x6e>
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	4a78      	ldr	r2, [pc, #480]	; (8012284 <HAL_SPI_Init+0x244>)
 80120a4:	4293      	cmp	r3, r2
 80120a6:	d002      	beq.n	80120ae <HAL_SPI_Init+0x6e>
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	2b08      	cmp	r3, #8
 80120ac:	d811      	bhi.n	80120d2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80120b2:	4a72      	ldr	r2, [pc, #456]	; (801227c <HAL_SPI_Init+0x23c>)
 80120b4:	4293      	cmp	r3, r2
 80120b6:	d009      	beq.n	80120cc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	4a70      	ldr	r2, [pc, #448]	; (8012280 <HAL_SPI_Init+0x240>)
 80120be:	4293      	cmp	r3, r2
 80120c0:	d004      	beq.n	80120cc <HAL_SPI_Init+0x8c>
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	4a6f      	ldr	r2, [pc, #444]	; (8012284 <HAL_SPI_Init+0x244>)
 80120c8:	4293      	cmp	r3, r2
 80120ca:	d104      	bne.n	80120d6 <HAL_SPI_Init+0x96>
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	2b10      	cmp	r3, #16
 80120d0:	d901      	bls.n	80120d6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80120d2:	2301      	movs	r3, #1
 80120d4:	e0cd      	b.n	8012272 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80120dc:	b2db      	uxtb	r3, r3
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d106      	bne.n	80120f0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	2200      	movs	r2, #0
 80120e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80120ea:	6878      	ldr	r0, [r7, #4]
 80120ec:	f7f2 f9b0 	bl	8004450 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	2202      	movs	r2, #2
 80120f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	681a      	ldr	r2, [r3, #0]
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	f022 0201 	bic.w	r2, r2, #1
 8012106:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	689b      	ldr	r3, [r3, #8]
 801210e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8012112:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	699b      	ldr	r3, [r3, #24]
 8012118:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801211c:	d119      	bne.n	8012152 <HAL_SPI_Init+0x112>
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	685b      	ldr	r3, [r3, #4]
 8012122:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012126:	d103      	bne.n	8012130 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801212c:	2b00      	cmp	r3, #0
 801212e:	d008      	beq.n	8012142 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8012134:	2b00      	cmp	r3, #0
 8012136:	d10c      	bne.n	8012152 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801213c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012140:	d107      	bne.n	8012152 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	681a      	ldr	r2, [r3, #0]
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8012150:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	685b      	ldr	r3, [r3, #4]
 8012156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801215a:	2b00      	cmp	r3, #0
 801215c:	d00f      	beq.n	801217e <HAL_SPI_Init+0x13e>
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	68db      	ldr	r3, [r3, #12]
 8012162:	2b06      	cmp	r3, #6
 8012164:	d90b      	bls.n	801217e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	430a      	orrs	r2, r1
 801217a:	601a      	str	r2, [r3, #0]
 801217c:	e007      	b.n	801218e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	681a      	ldr	r2, [r3, #0]
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801218c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	69da      	ldr	r2, [r3, #28]
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012196:	431a      	orrs	r2, r3
 8012198:	68bb      	ldr	r3, [r7, #8]
 801219a:	431a      	orrs	r2, r3
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121a0:	ea42 0103 	orr.w	r1, r2, r3
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	68da      	ldr	r2, [r3, #12]
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	430a      	orrs	r2, r1
 80121ae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121b8:	431a      	orrs	r2, r3
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121be:	431a      	orrs	r2, r3
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	699b      	ldr	r3, [r3, #24]
 80121c4:	431a      	orrs	r2, r3
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	691b      	ldr	r3, [r3, #16]
 80121ca:	431a      	orrs	r2, r3
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	695b      	ldr	r3, [r3, #20]
 80121d0:	431a      	orrs	r2, r3
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	6a1b      	ldr	r3, [r3, #32]
 80121d6:	431a      	orrs	r2, r3
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	685b      	ldr	r3, [r3, #4]
 80121dc:	431a      	orrs	r2, r3
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80121e2:	431a      	orrs	r2, r3
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	689b      	ldr	r3, [r3, #8]
 80121e8:	431a      	orrs	r2, r3
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80121ee:	ea42 0103 	orr.w	r1, r2, r3
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	430a      	orrs	r2, r1
 80121fc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	685b      	ldr	r3, [r3, #4]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d113      	bne.n	801222e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	689b      	ldr	r3, [r3, #8]
 801220c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012218:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	689b      	ldr	r3, [r3, #8]
 8012220:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801222c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	f022 0201 	bic.w	r2, r2, #1
 801223c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	685b      	ldr	r3, [r3, #4]
 8012242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012246:	2b00      	cmp	r3, #0
 8012248:	d00a      	beq.n	8012260 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	68db      	ldr	r3, [r3, #12]
 8012250:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	430a      	orrs	r2, r1
 801225e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	2200      	movs	r2, #0
 8012264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	2201      	movs	r2, #1
 801226c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8012270:	2300      	movs	r3, #0
}
 8012272:	4618      	mov	r0, r3
 8012274:	3710      	adds	r7, #16
 8012276:	46bd      	mov	sp, r7
 8012278:	bd80      	pop	{r7, pc}
 801227a:	bf00      	nop
 801227c:	40013000 	.word	0x40013000
 8012280:	40003800 	.word	0x40003800
 8012284:	40003c00 	.word	0x40003c00

08012288 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b084      	sub	sp, #16
 801228c:	af00      	add	r7, sp, #0
 801228e:	60f8      	str	r0, [r7, #12]
 8012290:	60b9      	str	r1, [r7, #8]
 8012292:	4613      	mov	r3, r2
 8012294:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801229c:	b2db      	uxtb	r3, r3
 801229e:	2b01      	cmp	r3, #1
 80122a0:	d005      	beq.n	80122ae <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	2200      	movs	r2, #0
 80122a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 80122aa:	2302      	movs	r3, #2
 80122ac:	e127      	b.n	80124fe <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 80122ae:	68bb      	ldr	r3, [r7, #8]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d002      	beq.n	80122ba <HAL_SPI_Receive_DMA+0x32>
 80122b4:	88fb      	ldrh	r3, [r7, #6]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d105      	bne.n	80122c6 <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	2200      	movs	r2, #0
 80122be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 80122c2:	2301      	movs	r3, #1
 80122c4:	e11b      	b.n	80124fe <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80122cc:	2b01      	cmp	r3, #1
 80122ce:	d101      	bne.n	80122d4 <HAL_SPI_Receive_DMA+0x4c>
 80122d0:	2302      	movs	r3, #2
 80122d2:	e114      	b.n	80124fe <HAL_SPI_Receive_DMA+0x276>
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	2201      	movs	r2, #1
 80122d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	2204      	movs	r2, #4
 80122e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	2200      	movs	r2, #0
 80122e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	68ba      	ldr	r2, [r7, #8]
 80122f0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	88fa      	ldrh	r2, [r7, #6]
 80122f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	88fa      	ldrh	r2, [r7, #6]
 80122fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	2200      	movs	r2, #0
 8012306:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	2200      	movs	r2, #0
 801230c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	2200      	movs	r2, #0
 8012312:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	2200      	movs	r2, #0
 801231a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	689b      	ldr	r3, [r3, #8]
 8012322:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8012326:	d108      	bne.n	801233a <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	681a      	ldr	r2, [r3, #0]
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012336:	601a      	str	r2, [r3, #0]
 8012338:	e009      	b.n	801234e <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	68db      	ldr	r3, [r3, #12]
 8012340:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 801234c:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	68db      	ldr	r3, [r3, #12]
 8012352:	2b0f      	cmp	r3, #15
 8012354:	d905      	bls.n	8012362 <HAL_SPI_Receive_DMA+0xda>
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801235a:	699b      	ldr	r3, [r3, #24]
 801235c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012360:	d10f      	bne.n	8012382 <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8012366:	2b07      	cmp	r3, #7
 8012368:	d911      	bls.n	801238e <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801236e:	699b      	ldr	r3, [r3, #24]
 8012370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012374:	d00b      	beq.n	801238e <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801237a:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801237c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012380:	d005      	beq.n	801238e <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	2200      	movs	r2, #0
 8012386:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 801238a:	2301      	movs	r3, #1
 801238c:	e0b7      	b.n	80124fe <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	689a      	ldr	r2, [r3, #8]
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801239c:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	68db      	ldr	r3, [r3, #12]
 80123a2:	2b07      	cmp	r3, #7
 80123a4:	d820      	bhi.n	80123e8 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80123aa:	699b      	ldr	r3, [r3, #24]
 80123ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80123b0:	d109      	bne.n	80123c6 <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80123b8:	b29b      	uxth	r3, r3
 80123ba:	3301      	adds	r3, #1
 80123bc:	105b      	asrs	r3, r3, #1
 80123be:	b29a      	uxth	r2, r3
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80123ca:	699b      	ldr	r3, [r3, #24]
 80123cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80123d0:	d11e      	bne.n	8012410 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80123d8:	b29b      	uxth	r3, r3
 80123da:	3303      	adds	r3, #3
 80123dc:	109b      	asrs	r3, r3, #2
 80123de:	b29a      	uxth	r2, r3
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80123e6:	e013      	b.n	8012410 <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	68db      	ldr	r3, [r3, #12]
 80123ec:	2b0f      	cmp	r3, #15
 80123ee:	d80f      	bhi.n	8012410 <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80123f4:	699b      	ldr	r3, [r3, #24]
 80123f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80123fa:	d109      	bne.n	8012410 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012402:	b29b      	uxth	r3, r3
 8012404:	3301      	adds	r3, #1
 8012406:	105b      	asrs	r3, r3, #1
 8012408:	b29a      	uxth	r2, r3
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012414:	4a3c      	ldr	r2, [pc, #240]	; (8012508 <HAL_SPI_Receive_DMA+0x280>)
 8012416:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801241c:	4a3b      	ldr	r2, [pc, #236]	; (801250c <HAL_SPI_Receive_DMA+0x284>)
 801241e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012424:	4a3a      	ldr	r2, [pc, #232]	; (8012510 <HAL_SPI_Receive_DMA+0x288>)
 8012426:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801242c:	2200      	movs	r2, #0
 801242e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	3330      	adds	r3, #48	; 0x30
 801243a:	4619      	mov	r1, r3
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012440:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012448:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 801244a:	f7f6 fa11 	bl	8008870 <HAL_DMA_Start_IT>
 801244e:	4603      	mov	r3, r0
 8012450:	2b00      	cmp	r3, #0
 8012452:	d011      	beq.n	8012478 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801245a:	f043 0210 	orr.w	r2, r3, #16
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	2201      	movs	r2, #1
 8012468:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	2200      	movs	r2, #0
 8012470:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 8012474:	2301      	movs	r3, #1
 8012476:	e042      	b.n	80124fe <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801247c:	69db      	ldr	r3, [r3, #28]
 801247e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012482:	d108      	bne.n	8012496 <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	6859      	ldr	r1, [r3, #4]
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	681a      	ldr	r2, [r3, #0]
 801248e:	4b21      	ldr	r3, [pc, #132]	; (8012514 <HAL_SPI_Receive_DMA+0x28c>)
 8012490:	400b      	ands	r3, r1
 8012492:	6053      	str	r3, [r2, #4]
 8012494:	e009      	b.n	80124aa <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	685a      	ldr	r2, [r3, #4]
 801249c:	4b1d      	ldr	r3, [pc, #116]	; (8012514 <HAL_SPI_Receive_DMA+0x28c>)
 801249e:	4013      	ands	r3, r2
 80124a0:	88f9      	ldrh	r1, [r7, #6]
 80124a2:	68fa      	ldr	r2, [r7, #12]
 80124a4:	6812      	ldr	r2, [r2, #0]
 80124a6:	430b      	orrs	r3, r1
 80124a8:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	689a      	ldr	r2, [r3, #8]
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80124b8:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	691a      	ldr	r2, [r3, #16]
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 80124c8:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	681a      	ldr	r2, [r3, #0]
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	f042 0201 	orr.w	r2, r2, #1
 80124d8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	685b      	ldr	r3, [r3, #4]
 80124de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80124e2:	d107      	bne.n	80124f4 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	681a      	ldr	r2, [r3, #0]
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80124f2:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	2200      	movs	r2, #0
 80124f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80124fc:	2300      	movs	r3, #0
}
 80124fe:	4618      	mov	r0, r3
 8012500:	3710      	adds	r7, #16
 8012502:	46bd      	mov	sp, r7
 8012504:	bd80      	pop	{r7, pc}
 8012506:	bf00      	nop
 8012508:	08012973 	.word	0x08012973
 801250c:	0801292d 	.word	0x0801292d
 8012510:	0801298f 	.word	0x0801298f
 8012514:	ffff0000 	.word	0xffff0000

08012518 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b08a      	sub	sp, #40	; 0x28
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	691b      	ldr	r3, [r3, #16]
 8012526:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	695b      	ldr	r3, [r3, #20]
 801252e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8012530:	6a3a      	ldr	r2, [r7, #32]
 8012532:	69fb      	ldr	r3, [r7, #28]
 8012534:	4013      	ands	r3, r2
 8012536:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	689b      	ldr	r3, [r3, #8]
 801253e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8012540:	2300      	movs	r3, #0
 8012542:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801254a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	3330      	adds	r3, #48	; 0x30
 8012552:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8012554:	69fb      	ldr	r3, [r7, #28]
 8012556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801255a:	2b00      	cmp	r3, #0
 801255c:	d010      	beq.n	8012580 <HAL_SPI_IRQHandler+0x68>
 801255e:	6a3b      	ldr	r3, [r7, #32]
 8012560:	f003 0308 	and.w	r3, r3, #8
 8012564:	2b00      	cmp	r3, #0
 8012566:	d00b      	beq.n	8012580 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	699a      	ldr	r2, [r3, #24]
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012576:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8012578:	6878      	ldr	r0, [r7, #4]
 801257a:	f000 f9cd 	bl	8012918 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801257e:	e192      	b.n	80128a6 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8012580:	69bb      	ldr	r3, [r7, #24]
 8012582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012586:	2b00      	cmp	r3, #0
 8012588:	d113      	bne.n	80125b2 <HAL_SPI_IRQHandler+0x9a>
 801258a:	69bb      	ldr	r3, [r7, #24]
 801258c:	f003 0320 	and.w	r3, r3, #32
 8012590:	2b00      	cmp	r3, #0
 8012592:	d10e      	bne.n	80125b2 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8012594:	69bb      	ldr	r3, [r7, #24]
 8012596:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801259a:	2b00      	cmp	r3, #0
 801259c:	d009      	beq.n	80125b2 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125a2:	6878      	ldr	r0, [r7, #4]
 80125a4:	4798      	blx	r3
    hspi->RxISR(hspi);
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125aa:	6878      	ldr	r0, [r7, #4]
 80125ac:	4798      	blx	r3
    handled = 1UL;
 80125ae:	2301      	movs	r3, #1
 80125b0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80125b2:	69bb      	ldr	r3, [r7, #24]
 80125b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d10f      	bne.n	80125dc <HAL_SPI_IRQHandler+0xc4>
 80125bc:	69bb      	ldr	r3, [r7, #24]
 80125be:	f003 0301 	and.w	r3, r3, #1
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d00a      	beq.n	80125dc <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80125c6:	69bb      	ldr	r3, [r7, #24]
 80125c8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d105      	bne.n	80125dc <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125d4:	6878      	ldr	r0, [r7, #4]
 80125d6:	4798      	blx	r3
    handled = 1UL;
 80125d8:	2301      	movs	r3, #1
 80125da:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80125dc:	69bb      	ldr	r3, [r7, #24]
 80125de:	f003 0320 	and.w	r3, r3, #32
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d10f      	bne.n	8012606 <HAL_SPI_IRQHandler+0xee>
 80125e6:	69bb      	ldr	r3, [r7, #24]
 80125e8:	f003 0302 	and.w	r3, r3, #2
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d00a      	beq.n	8012606 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80125f0:	69bb      	ldr	r3, [r7, #24]
 80125f2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d105      	bne.n	8012606 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125fe:	6878      	ldr	r0, [r7, #4]
 8012600:	4798      	blx	r3
    handled = 1UL;
 8012602:	2301      	movs	r3, #1
 8012604:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8012606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012608:	2b00      	cmp	r3, #0
 801260a:	f040 8147 	bne.w	801289c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801260e:	69bb      	ldr	r3, [r7, #24]
 8012610:	f003 0308 	and.w	r3, r3, #8
 8012614:	2b00      	cmp	r3, #0
 8012616:	f000 808b 	beq.w	8012730 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	699a      	ldr	r2, [r3, #24]
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	f042 0208 	orr.w	r2, r2, #8
 8012628:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	699a      	ldr	r2, [r3, #24]
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	f042 0210 	orr.w	r2, r2, #16
 8012638:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	699a      	ldr	r2, [r3, #24]
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012648:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	691a      	ldr	r2, [r3, #16]
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	f022 0208 	bic.w	r2, r2, #8
 8012658:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	689b      	ldr	r3, [r3, #8]
 8012660:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012664:	2b00      	cmp	r3, #0
 8012666:	d13d      	bne.n	80126e4 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8012668:	e036      	b.n	80126d8 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	68db      	ldr	r3, [r3, #12]
 801266e:	2b0f      	cmp	r3, #15
 8012670:	d90b      	bls.n	801268a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	681a      	ldr	r2, [r3, #0]
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801267a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801267c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012682:	1d1a      	adds	r2, r3, #4
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	665a      	str	r2, [r3, #100]	; 0x64
 8012688:	e01d      	b.n	80126c6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	68db      	ldr	r3, [r3, #12]
 801268e:	2b07      	cmp	r3, #7
 8012690:	d90b      	bls.n	80126aa <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012696:	68fa      	ldr	r2, [r7, #12]
 8012698:	8812      	ldrh	r2, [r2, #0]
 801269a:	b292      	uxth	r2, r2
 801269c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80126a2:	1c9a      	adds	r2, r3, #2
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	665a      	str	r2, [r3, #100]	; 0x64
 80126a8:	e00d      	b.n	80126c6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80126b6:	7812      	ldrb	r2, [r2, #0]
 80126b8:	b2d2      	uxtb	r2, r2
 80126ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80126c0:	1c5a      	adds	r2, r3, #1
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80126cc:	b29b      	uxth	r3, r3
 80126ce:	3b01      	subs	r3, #1
 80126d0:	b29a      	uxth	r2, r3
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80126de:	b29b      	uxth	r3, r3
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d1c2      	bne.n	801266a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80126e4:	6878      	ldr	r0, [r7, #4]
 80126e6:	f000 f98f 	bl	8012a08 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	2201      	movs	r2, #1
 80126ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d003      	beq.n	8012704 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80126fc:	6878      	ldr	r0, [r7, #4]
 80126fe:	f000 f901 	bl	8012904 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8012702:	e0d0      	b.n	80128a6 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8012704:	7cfb      	ldrb	r3, [r7, #19]
 8012706:	2b05      	cmp	r3, #5
 8012708:	d103      	bne.n	8012712 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 801270a:	6878      	ldr	r0, [r7, #4]
 801270c:	f000 f8e6 	bl	80128dc <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8012710:	e0c6      	b.n	80128a0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8012712:	7cfb      	ldrb	r3, [r7, #19]
 8012714:	2b04      	cmp	r3, #4
 8012716:	d103      	bne.n	8012720 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f000 f8d5 	bl	80128c8 <HAL_SPI_RxCpltCallback>
    return;
 801271e:	e0bf      	b.n	80128a0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8012720:	7cfb      	ldrb	r3, [r7, #19]
 8012722:	2b03      	cmp	r3, #3
 8012724:	f040 80bc 	bne.w	80128a0 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8012728:	6878      	ldr	r0, [r7, #4]
 801272a:	f000 f8c3 	bl	80128b4 <HAL_SPI_TxCpltCallback>
    return;
 801272e:	e0b7      	b.n	80128a0 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8012730:	69bb      	ldr	r3, [r7, #24]
 8012732:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8012736:	2b00      	cmp	r3, #0
 8012738:	f000 80b5 	beq.w	80128a6 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 801273c:	69bb      	ldr	r3, [r7, #24]
 801273e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012742:	2b00      	cmp	r3, #0
 8012744:	d00f      	beq.n	8012766 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801274c:	f043 0204 	orr.w	r2, r3, #4
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	699a      	ldr	r2, [r3, #24]
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012764:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8012766:	69bb      	ldr	r3, [r7, #24]
 8012768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801276c:	2b00      	cmp	r3, #0
 801276e:	d00f      	beq.n	8012790 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012776:	f043 0201 	orr.w	r2, r3, #1
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	699a      	ldr	r2, [r3, #24]
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801278e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8012790:	69bb      	ldr	r3, [r7, #24]
 8012792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012796:	2b00      	cmp	r3, #0
 8012798:	d00f      	beq.n	80127ba <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80127a0:	f043 0208 	orr.w	r2, r3, #8
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	699a      	ldr	r2, [r3, #24]
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80127b8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80127ba:	69bb      	ldr	r3, [r7, #24]
 80127bc:	f003 0320 	and.w	r3, r3, #32
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d00f      	beq.n	80127e4 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80127ca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	699a      	ldr	r2, [r3, #24]
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	f042 0220 	orr.w	r2, r2, #32
 80127e2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d05a      	beq.n	80128a4 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	681a      	ldr	r2, [r3, #0]
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	f022 0201 	bic.w	r2, r2, #1
 80127fc:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	6919      	ldr	r1, [r3, #16]
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	681a      	ldr	r2, [r3, #0]
 8012808:	4b28      	ldr	r3, [pc, #160]	; (80128ac <HAL_SPI_IRQHandler+0x394>)
 801280a:	400b      	ands	r3, r1
 801280c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801280e:	697b      	ldr	r3, [r7, #20]
 8012810:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012814:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8012818:	d138      	bne.n	801288c <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	689a      	ldr	r2, [r3, #8]
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8012828:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801282e:	2b00      	cmp	r3, #0
 8012830:	d013      	beq.n	801285a <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012836:	4a1e      	ldr	r2, [pc, #120]	; (80128b0 <HAL_SPI_IRQHandler+0x398>)
 8012838:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801283e:	4618      	mov	r0, r3
 8012840:	f7f6 fd9e 	bl	8009380 <HAL_DMA_Abort_IT>
 8012844:	4603      	mov	r3, r0
 8012846:	2b00      	cmp	r3, #0
 8012848:	d007      	beq.n	801285a <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012850:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801285e:	2b00      	cmp	r3, #0
 8012860:	d020      	beq.n	80128a4 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012866:	4a12      	ldr	r2, [pc, #72]	; (80128b0 <HAL_SPI_IRQHandler+0x398>)
 8012868:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801286e:	4618      	mov	r0, r3
 8012870:	f7f6 fd86 	bl	8009380 <HAL_DMA_Abort_IT>
 8012874:	4603      	mov	r3, r0
 8012876:	2b00      	cmp	r3, #0
 8012878:	d014      	beq.n	80128a4 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012880:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801288a:	e00b      	b.n	80128a4 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2201      	movs	r2, #1
 8012890:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8012894:	6878      	ldr	r0, [r7, #4]
 8012896:	f000 f835 	bl	8012904 <HAL_SPI_ErrorCallback>
    return;
 801289a:	e003      	b.n	80128a4 <HAL_SPI_IRQHandler+0x38c>
    return;
 801289c:	bf00      	nop
 801289e:	e002      	b.n	80128a6 <HAL_SPI_IRQHandler+0x38e>
    return;
 80128a0:	bf00      	nop
 80128a2:	e000      	b.n	80128a6 <HAL_SPI_IRQHandler+0x38e>
    return;
 80128a4:	bf00      	nop
  }
}
 80128a6:	3728      	adds	r7, #40	; 0x28
 80128a8:	46bd      	mov	sp, r7
 80128aa:	bd80      	pop	{r7, pc}
 80128ac:	fffffc94 	.word	0xfffffc94
 80128b0:	080129d5 	.word	0x080129d5

080128b4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80128b4:	b480      	push	{r7}
 80128b6:	b083      	sub	sp, #12
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80128bc:	bf00      	nop
 80128be:	370c      	adds	r7, #12
 80128c0:	46bd      	mov	sp, r7
 80128c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c6:	4770      	bx	lr

080128c8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80128c8:	b480      	push	{r7}
 80128ca:	b083      	sub	sp, #12
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80128d0:	bf00      	nop
 80128d2:	370c      	adds	r7, #12
 80128d4:	46bd      	mov	sp, r7
 80128d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128da:	4770      	bx	lr

080128dc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80128dc:	b480      	push	{r7}
 80128de:	b083      	sub	sp, #12
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80128e4:	bf00      	nop
 80128e6:	370c      	adds	r7, #12
 80128e8:	46bd      	mov	sp, r7
 80128ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ee:	4770      	bx	lr

080128f0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80128f0:	b480      	push	{r7}
 80128f2:	b083      	sub	sp, #12
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80128f8:	bf00      	nop
 80128fa:	370c      	adds	r7, #12
 80128fc:	46bd      	mov	sp, r7
 80128fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012902:	4770      	bx	lr

08012904 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012904:	b480      	push	{r7}
 8012906:	b083      	sub	sp, #12
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801290c:	bf00      	nop
 801290e:	370c      	adds	r7, #12
 8012910:	46bd      	mov	sp, r7
 8012912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012916:	4770      	bx	lr

08012918 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012918:	b480      	push	{r7}
 801291a:	b083      	sub	sp, #12
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8012920:	bf00      	nop
 8012922:	370c      	adds	r7, #12
 8012924:	46bd      	mov	sp, r7
 8012926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292a:	4770      	bx	lr

0801292c <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b084      	sub	sp, #16
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012938:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012940:	b2db      	uxtb	r3, r3
 8012942:	2b07      	cmp	r3, #7
 8012944:	d011      	beq.n	801296a <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801294a:	69db      	ldr	r3, [r3, #28]
 801294c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012950:	d103      	bne.n	801295a <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8012952:	68f8      	ldr	r0, [r7, #12]
 8012954:	f7ff ffb8 	bl	80128c8 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8012958:	e007      	b.n	801296a <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	691a      	ldr	r2, [r3, #16]
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	f042 0208 	orr.w	r2, r2, #8
 8012968:	611a      	str	r2, [r3, #16]
}
 801296a:	bf00      	nop
 801296c:	3710      	adds	r7, #16
 801296e:	46bd      	mov	sp, r7
 8012970:	bd80      	pop	{r7, pc}

08012972 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012972:	b580      	push	{r7, lr}
 8012974:	b084      	sub	sp, #16
 8012976:	af00      	add	r7, sp, #0
 8012978:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801297e:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8012980:	68f8      	ldr	r0, [r7, #12]
 8012982:	f7ff ffb5 	bl	80128f0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012986:	bf00      	nop
 8012988:	3710      	adds	r7, #16
 801298a:	46bd      	mov	sp, r7
 801298c:	bd80      	pop	{r7, pc}

0801298e <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 801298e:	b580      	push	{r7, lr}
 8012990:	b084      	sub	sp, #16
 8012992:	af00      	add	r7, sp, #0
 8012994:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801299a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 801299c:	6878      	ldr	r0, [r7, #4]
 801299e:	f7f7 fe6d 	bl	800a67c <HAL_DMA_GetError>
 80129a2:	4603      	mov	r3, r0
 80129a4:	2b02      	cmp	r3, #2
 80129a6:	d011      	beq.n	80129cc <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80129a8:	68f8      	ldr	r0, [r7, #12]
 80129aa:	f000 f82d 	bl	8012a08 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80129b4:	f043 0210 	orr.w	r2, r3, #16
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	2201      	movs	r2, #1
 80129c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80129c6:	68f8      	ldr	r0, [r7, #12]
 80129c8:	f7ff ff9c 	bl	8012904 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80129cc:	bf00      	nop
 80129ce:	3710      	adds	r7, #16
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bd80      	pop	{r7, pc}

080129d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b084      	sub	sp, #16
 80129d8:	af00      	add	r7, sp, #0
 80129da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	2200      	movs	r2, #0
 80129e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	2200      	movs	r2, #0
 80129ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	2201      	movs	r2, #1
 80129f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80129fa:	68f8      	ldr	r0, [r7, #12]
 80129fc:	f7ff ff82 	bl	8012904 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012a00:	bf00      	nop
 8012a02:	3710      	adds	r7, #16
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bd80      	pop	{r7, pc}

08012a08 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8012a08:	b480      	push	{r7}
 8012a0a:	b085      	sub	sp, #20
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	695b      	ldr	r3, [r3, #20]
 8012a16:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	699a      	ldr	r2, [r3, #24]
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	f042 0208 	orr.w	r2, r2, #8
 8012a26:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	699a      	ldr	r2, [r3, #24]
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	f042 0210 	orr.w	r2, r2, #16
 8012a36:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	681a      	ldr	r2, [r3, #0]
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	f022 0201 	bic.w	r2, r2, #1
 8012a46:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	6919      	ldr	r1, [r3, #16]
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681a      	ldr	r2, [r3, #0]
 8012a52:	4b3c      	ldr	r3, [pc, #240]	; (8012b44 <SPI_CloseTransfer+0x13c>)
 8012a54:	400b      	ands	r3, r1
 8012a56:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	689a      	ldr	r2, [r3, #8]
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8012a66:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012a6e:	b2db      	uxtb	r3, r3
 8012a70:	2b04      	cmp	r3, #4
 8012a72:	d014      	beq.n	8012a9e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	f003 0320 	and.w	r3, r3, #32
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d00f      	beq.n	8012a9e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012a84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	699a      	ldr	r2, [r3, #24]
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	f042 0220 	orr.w	r2, r2, #32
 8012a9c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012aa4:	b2db      	uxtb	r3, r3
 8012aa6:	2b03      	cmp	r3, #3
 8012aa8:	d014      	beq.n	8012ad4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d00f      	beq.n	8012ad4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012aba:	f043 0204 	orr.w	r2, r3, #4
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	699a      	ldr	r2, [r3, #24]
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012ad2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d00f      	beq.n	8012afe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012ae4:	f043 0201 	orr.w	r2, r3, #1
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	699a      	ldr	r2, [r3, #24]
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012afc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d00f      	beq.n	8012b28 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b0e:	f043 0208 	orr.w	r2, r3, #8
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	699a      	ldr	r2, [r3, #24]
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012b26:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	2200      	movs	r2, #0
 8012b34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8012b38:	bf00      	nop
 8012b3a:	3714      	adds	r7, #20
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b42:	4770      	bx	lr
 8012b44:	fffffc90 	.word	0xfffffc90

08012b48 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8012b48:	b480      	push	{r7}
 8012b4a:	b085      	sub	sp, #20
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b54:	095b      	lsrs	r3, r3, #5
 8012b56:	3301      	adds	r3, #1
 8012b58:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	68db      	ldr	r3, [r3, #12]
 8012b5e:	3301      	adds	r3, #1
 8012b60:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8012b62:	68bb      	ldr	r3, [r7, #8]
 8012b64:	3307      	adds	r3, #7
 8012b66:	08db      	lsrs	r3, r3, #3
 8012b68:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	68fa      	ldr	r2, [r7, #12]
 8012b6e:	fb02 f303 	mul.w	r3, r2, r3
}
 8012b72:	4618      	mov	r0, r3
 8012b74:	3714      	adds	r7, #20
 8012b76:	46bd      	mov	sp, r7
 8012b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7c:	4770      	bx	lr

08012b7e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012b7e:	b580      	push	{r7, lr}
 8012b80:	b082      	sub	sp, #8
 8012b82:	af00      	add	r7, sp, #0
 8012b84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d101      	bne.n	8012b90 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012b8c:	2301      	movs	r3, #1
 8012b8e:	e049      	b.n	8012c24 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012b96:	b2db      	uxtb	r3, r3
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d106      	bne.n	8012baa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012ba4:	6878      	ldr	r0, [r7, #4]
 8012ba6:	f7f2 f95f 	bl	8004e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	2202      	movs	r2, #2
 8012bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	681a      	ldr	r2, [r3, #0]
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	3304      	adds	r3, #4
 8012bba:	4619      	mov	r1, r3
 8012bbc:	4610      	mov	r0, r2
 8012bbe:	f000 fe7d 	bl	80138bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	2201      	movs	r2, #1
 8012bc6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	2201      	movs	r2, #1
 8012bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2201      	movs	r2, #1
 8012bd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	2201      	movs	r2, #1
 8012bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	2201      	movs	r2, #1
 8012be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	2201      	movs	r2, #1
 8012bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	2201      	movs	r2, #1
 8012bf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	2201      	movs	r2, #1
 8012bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	2201      	movs	r2, #1
 8012c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	2201      	movs	r2, #1
 8012c0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	2201      	movs	r2, #1
 8012c16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	2201      	movs	r2, #1
 8012c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012c22:	2300      	movs	r3, #0
}
 8012c24:	4618      	mov	r0, r3
 8012c26:	3708      	adds	r7, #8
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	bd80      	pop	{r7, pc}

08012c2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012c2c:	b480      	push	{r7}
 8012c2e:	b085      	sub	sp, #20
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012c3a:	b2db      	uxtb	r3, r3
 8012c3c:	2b01      	cmp	r3, #1
 8012c3e:	d001      	beq.n	8012c44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012c40:	2301      	movs	r3, #1
 8012c42:	e054      	b.n	8012cee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	2202      	movs	r2, #2
 8012c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	68da      	ldr	r2, [r3, #12]
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	f042 0201 	orr.w	r2, r2, #1
 8012c5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	4a26      	ldr	r2, [pc, #152]	; (8012cfc <HAL_TIM_Base_Start_IT+0xd0>)
 8012c62:	4293      	cmp	r3, r2
 8012c64:	d022      	beq.n	8012cac <HAL_TIM_Base_Start_IT+0x80>
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012c6e:	d01d      	beq.n	8012cac <HAL_TIM_Base_Start_IT+0x80>
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	4a22      	ldr	r2, [pc, #136]	; (8012d00 <HAL_TIM_Base_Start_IT+0xd4>)
 8012c76:	4293      	cmp	r3, r2
 8012c78:	d018      	beq.n	8012cac <HAL_TIM_Base_Start_IT+0x80>
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	4a21      	ldr	r2, [pc, #132]	; (8012d04 <HAL_TIM_Base_Start_IT+0xd8>)
 8012c80:	4293      	cmp	r3, r2
 8012c82:	d013      	beq.n	8012cac <HAL_TIM_Base_Start_IT+0x80>
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	4a1f      	ldr	r2, [pc, #124]	; (8012d08 <HAL_TIM_Base_Start_IT+0xdc>)
 8012c8a:	4293      	cmp	r3, r2
 8012c8c:	d00e      	beq.n	8012cac <HAL_TIM_Base_Start_IT+0x80>
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	4a1e      	ldr	r2, [pc, #120]	; (8012d0c <HAL_TIM_Base_Start_IT+0xe0>)
 8012c94:	4293      	cmp	r3, r2
 8012c96:	d009      	beq.n	8012cac <HAL_TIM_Base_Start_IT+0x80>
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	4a1c      	ldr	r2, [pc, #112]	; (8012d10 <HAL_TIM_Base_Start_IT+0xe4>)
 8012c9e:	4293      	cmp	r3, r2
 8012ca0:	d004      	beq.n	8012cac <HAL_TIM_Base_Start_IT+0x80>
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	4a1b      	ldr	r2, [pc, #108]	; (8012d14 <HAL_TIM_Base_Start_IT+0xe8>)
 8012ca8:	4293      	cmp	r3, r2
 8012caa:	d115      	bne.n	8012cd8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	689a      	ldr	r2, [r3, #8]
 8012cb2:	4b19      	ldr	r3, [pc, #100]	; (8012d18 <HAL_TIM_Base_Start_IT+0xec>)
 8012cb4:	4013      	ands	r3, r2
 8012cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	2b06      	cmp	r3, #6
 8012cbc:	d015      	beq.n	8012cea <HAL_TIM_Base_Start_IT+0xbe>
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012cc4:	d011      	beq.n	8012cea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	681a      	ldr	r2, [r3, #0]
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	f042 0201 	orr.w	r2, r2, #1
 8012cd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012cd6:	e008      	b.n	8012cea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	681a      	ldr	r2, [r3, #0]
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	f042 0201 	orr.w	r2, r2, #1
 8012ce6:	601a      	str	r2, [r3, #0]
 8012ce8:	e000      	b.n	8012cec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012cea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012cec:	2300      	movs	r3, #0
}
 8012cee:	4618      	mov	r0, r3
 8012cf0:	3714      	adds	r7, #20
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf8:	4770      	bx	lr
 8012cfa:	bf00      	nop
 8012cfc:	40010000 	.word	0x40010000
 8012d00:	40000400 	.word	0x40000400
 8012d04:	40000800 	.word	0x40000800
 8012d08:	40000c00 	.word	0x40000c00
 8012d0c:	40010400 	.word	0x40010400
 8012d10:	40001800 	.word	0x40001800
 8012d14:	40014000 	.word	0x40014000
 8012d18:	00010007 	.word	0x00010007

08012d1c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b084      	sub	sp, #16
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
 8012d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012d26:	2300      	movs	r3, #0
 8012d28:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012d2a:	683b      	ldr	r3, [r7, #0]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d109      	bne.n	8012d44 <HAL_TIM_OC_Start_IT+0x28>
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012d36:	b2db      	uxtb	r3, r3
 8012d38:	2b01      	cmp	r3, #1
 8012d3a:	bf14      	ite	ne
 8012d3c:	2301      	movne	r3, #1
 8012d3e:	2300      	moveq	r3, #0
 8012d40:	b2db      	uxtb	r3, r3
 8012d42:	e03c      	b.n	8012dbe <HAL_TIM_OC_Start_IT+0xa2>
 8012d44:	683b      	ldr	r3, [r7, #0]
 8012d46:	2b04      	cmp	r3, #4
 8012d48:	d109      	bne.n	8012d5e <HAL_TIM_OC_Start_IT+0x42>
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012d50:	b2db      	uxtb	r3, r3
 8012d52:	2b01      	cmp	r3, #1
 8012d54:	bf14      	ite	ne
 8012d56:	2301      	movne	r3, #1
 8012d58:	2300      	moveq	r3, #0
 8012d5a:	b2db      	uxtb	r3, r3
 8012d5c:	e02f      	b.n	8012dbe <HAL_TIM_OC_Start_IT+0xa2>
 8012d5e:	683b      	ldr	r3, [r7, #0]
 8012d60:	2b08      	cmp	r3, #8
 8012d62:	d109      	bne.n	8012d78 <HAL_TIM_OC_Start_IT+0x5c>
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012d6a:	b2db      	uxtb	r3, r3
 8012d6c:	2b01      	cmp	r3, #1
 8012d6e:	bf14      	ite	ne
 8012d70:	2301      	movne	r3, #1
 8012d72:	2300      	moveq	r3, #0
 8012d74:	b2db      	uxtb	r3, r3
 8012d76:	e022      	b.n	8012dbe <HAL_TIM_OC_Start_IT+0xa2>
 8012d78:	683b      	ldr	r3, [r7, #0]
 8012d7a:	2b0c      	cmp	r3, #12
 8012d7c:	d109      	bne.n	8012d92 <HAL_TIM_OC_Start_IT+0x76>
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012d84:	b2db      	uxtb	r3, r3
 8012d86:	2b01      	cmp	r3, #1
 8012d88:	bf14      	ite	ne
 8012d8a:	2301      	movne	r3, #1
 8012d8c:	2300      	moveq	r3, #0
 8012d8e:	b2db      	uxtb	r3, r3
 8012d90:	e015      	b.n	8012dbe <HAL_TIM_OC_Start_IT+0xa2>
 8012d92:	683b      	ldr	r3, [r7, #0]
 8012d94:	2b10      	cmp	r3, #16
 8012d96:	d109      	bne.n	8012dac <HAL_TIM_OC_Start_IT+0x90>
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012d9e:	b2db      	uxtb	r3, r3
 8012da0:	2b01      	cmp	r3, #1
 8012da2:	bf14      	ite	ne
 8012da4:	2301      	movne	r3, #1
 8012da6:	2300      	moveq	r3, #0
 8012da8:	b2db      	uxtb	r3, r3
 8012daa:	e008      	b.n	8012dbe <HAL_TIM_OC_Start_IT+0xa2>
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012db2:	b2db      	uxtb	r3, r3
 8012db4:	2b01      	cmp	r3, #1
 8012db6:	bf14      	ite	ne
 8012db8:	2301      	movne	r3, #1
 8012dba:	2300      	moveq	r3, #0
 8012dbc:	b2db      	uxtb	r3, r3
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d001      	beq.n	8012dc6 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8012dc2:	2301      	movs	r3, #1
 8012dc4:	e0ec      	b.n	8012fa0 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012dc6:	683b      	ldr	r3, [r7, #0]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d104      	bne.n	8012dd6 <HAL_TIM_OC_Start_IT+0xba>
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	2202      	movs	r2, #2
 8012dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012dd4:	e023      	b.n	8012e1e <HAL_TIM_OC_Start_IT+0x102>
 8012dd6:	683b      	ldr	r3, [r7, #0]
 8012dd8:	2b04      	cmp	r3, #4
 8012dda:	d104      	bne.n	8012de6 <HAL_TIM_OC_Start_IT+0xca>
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	2202      	movs	r2, #2
 8012de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012de4:	e01b      	b.n	8012e1e <HAL_TIM_OC_Start_IT+0x102>
 8012de6:	683b      	ldr	r3, [r7, #0]
 8012de8:	2b08      	cmp	r3, #8
 8012dea:	d104      	bne.n	8012df6 <HAL_TIM_OC_Start_IT+0xda>
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	2202      	movs	r2, #2
 8012df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012df4:	e013      	b.n	8012e1e <HAL_TIM_OC_Start_IT+0x102>
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	2b0c      	cmp	r3, #12
 8012dfa:	d104      	bne.n	8012e06 <HAL_TIM_OC_Start_IT+0xea>
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	2202      	movs	r2, #2
 8012e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012e04:	e00b      	b.n	8012e1e <HAL_TIM_OC_Start_IT+0x102>
 8012e06:	683b      	ldr	r3, [r7, #0]
 8012e08:	2b10      	cmp	r3, #16
 8012e0a:	d104      	bne.n	8012e16 <HAL_TIM_OC_Start_IT+0xfa>
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	2202      	movs	r2, #2
 8012e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012e14:	e003      	b.n	8012e1e <HAL_TIM_OC_Start_IT+0x102>
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	2202      	movs	r2, #2
 8012e1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8012e1e:	683b      	ldr	r3, [r7, #0]
 8012e20:	2b0c      	cmp	r3, #12
 8012e22:	d841      	bhi.n	8012ea8 <HAL_TIM_OC_Start_IT+0x18c>
 8012e24:	a201      	add	r2, pc, #4	; (adr r2, 8012e2c <HAL_TIM_OC_Start_IT+0x110>)
 8012e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e2a:	bf00      	nop
 8012e2c:	08012e61 	.word	0x08012e61
 8012e30:	08012ea9 	.word	0x08012ea9
 8012e34:	08012ea9 	.word	0x08012ea9
 8012e38:	08012ea9 	.word	0x08012ea9
 8012e3c:	08012e73 	.word	0x08012e73
 8012e40:	08012ea9 	.word	0x08012ea9
 8012e44:	08012ea9 	.word	0x08012ea9
 8012e48:	08012ea9 	.word	0x08012ea9
 8012e4c:	08012e85 	.word	0x08012e85
 8012e50:	08012ea9 	.word	0x08012ea9
 8012e54:	08012ea9 	.word	0x08012ea9
 8012e58:	08012ea9 	.word	0x08012ea9
 8012e5c:	08012e97 	.word	0x08012e97
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	68da      	ldr	r2, [r3, #12]
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	f042 0202 	orr.w	r2, r2, #2
 8012e6e:	60da      	str	r2, [r3, #12]
      break;
 8012e70:	e01d      	b.n	8012eae <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	68da      	ldr	r2, [r3, #12]
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	f042 0204 	orr.w	r2, r2, #4
 8012e80:	60da      	str	r2, [r3, #12]
      break;
 8012e82:	e014      	b.n	8012eae <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	68da      	ldr	r2, [r3, #12]
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	f042 0208 	orr.w	r2, r2, #8
 8012e92:	60da      	str	r2, [r3, #12]
      break;
 8012e94:	e00b      	b.n	8012eae <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	68da      	ldr	r2, [r3, #12]
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	f042 0210 	orr.w	r2, r2, #16
 8012ea4:	60da      	str	r2, [r3, #12]
      break;
 8012ea6:	e002      	b.n	8012eae <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8012ea8:	2301      	movs	r3, #1
 8012eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8012eac:	bf00      	nop
  }

  if (status == HAL_OK)
 8012eae:	7bfb      	ldrb	r3, [r7, #15]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d174      	bne.n	8012f9e <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	2201      	movs	r2, #1
 8012eba:	6839      	ldr	r1, [r7, #0]
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	f001 f917 	bl	80140f0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	4a38      	ldr	r2, [pc, #224]	; (8012fa8 <HAL_TIM_OC_Start_IT+0x28c>)
 8012ec8:	4293      	cmp	r3, r2
 8012eca:	d013      	beq.n	8012ef4 <HAL_TIM_OC_Start_IT+0x1d8>
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	4a36      	ldr	r2, [pc, #216]	; (8012fac <HAL_TIM_OC_Start_IT+0x290>)
 8012ed2:	4293      	cmp	r3, r2
 8012ed4:	d00e      	beq.n	8012ef4 <HAL_TIM_OC_Start_IT+0x1d8>
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	4a35      	ldr	r2, [pc, #212]	; (8012fb0 <HAL_TIM_OC_Start_IT+0x294>)
 8012edc:	4293      	cmp	r3, r2
 8012ede:	d009      	beq.n	8012ef4 <HAL_TIM_OC_Start_IT+0x1d8>
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	4a33      	ldr	r2, [pc, #204]	; (8012fb4 <HAL_TIM_OC_Start_IT+0x298>)
 8012ee6:	4293      	cmp	r3, r2
 8012ee8:	d004      	beq.n	8012ef4 <HAL_TIM_OC_Start_IT+0x1d8>
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	4a32      	ldr	r2, [pc, #200]	; (8012fb8 <HAL_TIM_OC_Start_IT+0x29c>)
 8012ef0:	4293      	cmp	r3, r2
 8012ef2:	d101      	bne.n	8012ef8 <HAL_TIM_OC_Start_IT+0x1dc>
 8012ef4:	2301      	movs	r3, #1
 8012ef6:	e000      	b.n	8012efa <HAL_TIM_OC_Start_IT+0x1de>
 8012ef8:	2300      	movs	r3, #0
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d007      	beq.n	8012f0e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012f0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	4a25      	ldr	r2, [pc, #148]	; (8012fa8 <HAL_TIM_OC_Start_IT+0x28c>)
 8012f14:	4293      	cmp	r3, r2
 8012f16:	d022      	beq.n	8012f5e <HAL_TIM_OC_Start_IT+0x242>
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012f20:	d01d      	beq.n	8012f5e <HAL_TIM_OC_Start_IT+0x242>
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	4a25      	ldr	r2, [pc, #148]	; (8012fbc <HAL_TIM_OC_Start_IT+0x2a0>)
 8012f28:	4293      	cmp	r3, r2
 8012f2a:	d018      	beq.n	8012f5e <HAL_TIM_OC_Start_IT+0x242>
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	4a23      	ldr	r2, [pc, #140]	; (8012fc0 <HAL_TIM_OC_Start_IT+0x2a4>)
 8012f32:	4293      	cmp	r3, r2
 8012f34:	d013      	beq.n	8012f5e <HAL_TIM_OC_Start_IT+0x242>
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	4a22      	ldr	r2, [pc, #136]	; (8012fc4 <HAL_TIM_OC_Start_IT+0x2a8>)
 8012f3c:	4293      	cmp	r3, r2
 8012f3e:	d00e      	beq.n	8012f5e <HAL_TIM_OC_Start_IT+0x242>
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	4a19      	ldr	r2, [pc, #100]	; (8012fac <HAL_TIM_OC_Start_IT+0x290>)
 8012f46:	4293      	cmp	r3, r2
 8012f48:	d009      	beq.n	8012f5e <HAL_TIM_OC_Start_IT+0x242>
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	4a1e      	ldr	r2, [pc, #120]	; (8012fc8 <HAL_TIM_OC_Start_IT+0x2ac>)
 8012f50:	4293      	cmp	r3, r2
 8012f52:	d004      	beq.n	8012f5e <HAL_TIM_OC_Start_IT+0x242>
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	4a15      	ldr	r2, [pc, #84]	; (8012fb0 <HAL_TIM_OC_Start_IT+0x294>)
 8012f5a:	4293      	cmp	r3, r2
 8012f5c:	d115      	bne.n	8012f8a <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	689a      	ldr	r2, [r3, #8]
 8012f64:	4b19      	ldr	r3, [pc, #100]	; (8012fcc <HAL_TIM_OC_Start_IT+0x2b0>)
 8012f66:	4013      	ands	r3, r2
 8012f68:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012f6a:	68bb      	ldr	r3, [r7, #8]
 8012f6c:	2b06      	cmp	r3, #6
 8012f6e:	d015      	beq.n	8012f9c <HAL_TIM_OC_Start_IT+0x280>
 8012f70:	68bb      	ldr	r3, [r7, #8]
 8012f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012f76:	d011      	beq.n	8012f9c <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	681a      	ldr	r2, [r3, #0]
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	f042 0201 	orr.w	r2, r2, #1
 8012f86:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012f88:	e008      	b.n	8012f9c <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	681a      	ldr	r2, [r3, #0]
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	f042 0201 	orr.w	r2, r2, #1
 8012f98:	601a      	str	r2, [r3, #0]
 8012f9a:	e000      	b.n	8012f9e <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012f9c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	3710      	adds	r7, #16
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	bd80      	pop	{r7, pc}
 8012fa8:	40010000 	.word	0x40010000
 8012fac:	40010400 	.word	0x40010400
 8012fb0:	40014000 	.word	0x40014000
 8012fb4:	40014400 	.word	0x40014400
 8012fb8:	40014800 	.word	0x40014800
 8012fbc:	40000400 	.word	0x40000400
 8012fc0:	40000800 	.word	0x40000800
 8012fc4:	40000c00 	.word	0x40000c00
 8012fc8:	40001800 	.word	0x40001800
 8012fcc:	00010007 	.word	0x00010007

08012fd0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b084      	sub	sp, #16
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
 8012fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012fda:	2300      	movs	r3, #0
 8012fdc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8012fde:	683b      	ldr	r3, [r7, #0]
 8012fe0:	2b0c      	cmp	r3, #12
 8012fe2:	d841      	bhi.n	8013068 <HAL_TIM_OC_Stop_IT+0x98>
 8012fe4:	a201      	add	r2, pc, #4	; (adr r2, 8012fec <HAL_TIM_OC_Stop_IT+0x1c>)
 8012fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fea:	bf00      	nop
 8012fec:	08013021 	.word	0x08013021
 8012ff0:	08013069 	.word	0x08013069
 8012ff4:	08013069 	.word	0x08013069
 8012ff8:	08013069 	.word	0x08013069
 8012ffc:	08013033 	.word	0x08013033
 8013000:	08013069 	.word	0x08013069
 8013004:	08013069 	.word	0x08013069
 8013008:	08013069 	.word	0x08013069
 801300c:	08013045 	.word	0x08013045
 8013010:	08013069 	.word	0x08013069
 8013014:	08013069 	.word	0x08013069
 8013018:	08013069 	.word	0x08013069
 801301c:	08013057 	.word	0x08013057
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	68da      	ldr	r2, [r3, #12]
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	f022 0202 	bic.w	r2, r2, #2
 801302e:	60da      	str	r2, [r3, #12]
      break;
 8013030:	e01d      	b.n	801306e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	68da      	ldr	r2, [r3, #12]
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	f022 0204 	bic.w	r2, r2, #4
 8013040:	60da      	str	r2, [r3, #12]
      break;
 8013042:	e014      	b.n	801306e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	68da      	ldr	r2, [r3, #12]
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	f022 0208 	bic.w	r2, r2, #8
 8013052:	60da      	str	r2, [r3, #12]
      break;
 8013054:	e00b      	b.n	801306e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	68da      	ldr	r2, [r3, #12]
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	f022 0210 	bic.w	r2, r2, #16
 8013064:	60da      	str	r2, [r3, #12]
      break;
 8013066:	e002      	b.n	801306e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8013068:	2301      	movs	r3, #1
 801306a:	73fb      	strb	r3, [r7, #15]
      break;
 801306c:	bf00      	nop
  }

  if (status == HAL_OK)
 801306e:	7bfb      	ldrb	r3, [r7, #15]
 8013070:	2b00      	cmp	r3, #0
 8013072:	f040 8081 	bne.w	8013178 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	2200      	movs	r2, #0
 801307c:	6839      	ldr	r1, [r7, #0]
 801307e:	4618      	mov	r0, r3
 8013080:	f001 f836 	bl	80140f0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	4a3e      	ldr	r2, [pc, #248]	; (8013184 <HAL_TIM_OC_Stop_IT+0x1b4>)
 801308a:	4293      	cmp	r3, r2
 801308c:	d013      	beq.n	80130b6 <HAL_TIM_OC_Stop_IT+0xe6>
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	4a3d      	ldr	r2, [pc, #244]	; (8013188 <HAL_TIM_OC_Stop_IT+0x1b8>)
 8013094:	4293      	cmp	r3, r2
 8013096:	d00e      	beq.n	80130b6 <HAL_TIM_OC_Stop_IT+0xe6>
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	4a3b      	ldr	r2, [pc, #236]	; (801318c <HAL_TIM_OC_Stop_IT+0x1bc>)
 801309e:	4293      	cmp	r3, r2
 80130a0:	d009      	beq.n	80130b6 <HAL_TIM_OC_Stop_IT+0xe6>
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	4a3a      	ldr	r2, [pc, #232]	; (8013190 <HAL_TIM_OC_Stop_IT+0x1c0>)
 80130a8:	4293      	cmp	r3, r2
 80130aa:	d004      	beq.n	80130b6 <HAL_TIM_OC_Stop_IT+0xe6>
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	4a38      	ldr	r2, [pc, #224]	; (8013194 <HAL_TIM_OC_Stop_IT+0x1c4>)
 80130b2:	4293      	cmp	r3, r2
 80130b4:	d101      	bne.n	80130ba <HAL_TIM_OC_Stop_IT+0xea>
 80130b6:	2301      	movs	r3, #1
 80130b8:	e000      	b.n	80130bc <HAL_TIM_OC_Stop_IT+0xec>
 80130ba:	2300      	movs	r3, #0
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d017      	beq.n	80130f0 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	6a1a      	ldr	r2, [r3, #32]
 80130c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80130ca:	4013      	ands	r3, r2
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d10f      	bne.n	80130f0 <HAL_TIM_OC_Stop_IT+0x120>
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	6a1a      	ldr	r2, [r3, #32]
 80130d6:	f240 4344 	movw	r3, #1092	; 0x444
 80130da:	4013      	ands	r3, r2
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d107      	bne.n	80130f0 <HAL_TIM_OC_Stop_IT+0x120>
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80130ee:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	6a1a      	ldr	r2, [r3, #32]
 80130f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80130fa:	4013      	ands	r3, r2
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d10f      	bne.n	8013120 <HAL_TIM_OC_Stop_IT+0x150>
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	6a1a      	ldr	r2, [r3, #32]
 8013106:	f240 4344 	movw	r3, #1092	; 0x444
 801310a:	4013      	ands	r3, r2
 801310c:	2b00      	cmp	r3, #0
 801310e:	d107      	bne.n	8013120 <HAL_TIM_OC_Stop_IT+0x150>
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	681a      	ldr	r2, [r3, #0]
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	f022 0201 	bic.w	r2, r2, #1
 801311e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8013120:	683b      	ldr	r3, [r7, #0]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d104      	bne.n	8013130 <HAL_TIM_OC_Stop_IT+0x160>
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	2201      	movs	r2, #1
 801312a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801312e:	e023      	b.n	8013178 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013130:	683b      	ldr	r3, [r7, #0]
 8013132:	2b04      	cmp	r3, #4
 8013134:	d104      	bne.n	8013140 <HAL_TIM_OC_Stop_IT+0x170>
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	2201      	movs	r2, #1
 801313a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801313e:	e01b      	b.n	8013178 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013140:	683b      	ldr	r3, [r7, #0]
 8013142:	2b08      	cmp	r3, #8
 8013144:	d104      	bne.n	8013150 <HAL_TIM_OC_Stop_IT+0x180>
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	2201      	movs	r2, #1
 801314a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801314e:	e013      	b.n	8013178 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013150:	683b      	ldr	r3, [r7, #0]
 8013152:	2b0c      	cmp	r3, #12
 8013154:	d104      	bne.n	8013160 <HAL_TIM_OC_Stop_IT+0x190>
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	2201      	movs	r2, #1
 801315a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801315e:	e00b      	b.n	8013178 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013160:	683b      	ldr	r3, [r7, #0]
 8013162:	2b10      	cmp	r3, #16
 8013164:	d104      	bne.n	8013170 <HAL_TIM_OC_Stop_IT+0x1a0>
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	2201      	movs	r2, #1
 801316a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801316e:	e003      	b.n	8013178 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	2201      	movs	r2, #1
 8013174:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8013178:	7bfb      	ldrb	r3, [r7, #15]
}
 801317a:	4618      	mov	r0, r3
 801317c:	3710      	adds	r7, #16
 801317e:	46bd      	mov	sp, r7
 8013180:	bd80      	pop	{r7, pc}
 8013182:	bf00      	nop
 8013184:	40010000 	.word	0x40010000
 8013188:	40010400 	.word	0x40010400
 801318c:	40014000 	.word	0x40014000
 8013190:	40014400 	.word	0x40014400
 8013194:	40014800 	.word	0x40014800

08013198 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b082      	sub	sp, #8
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d101      	bne.n	80131aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80131a6:	2301      	movs	r3, #1
 80131a8:	e049      	b.n	801323e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80131b0:	b2db      	uxtb	r3, r3
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d106      	bne.n	80131c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	2200      	movs	r2, #0
 80131ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80131be:	6878      	ldr	r0, [r7, #4]
 80131c0:	f000 f841 	bl	8013246 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	2202      	movs	r2, #2
 80131c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	681a      	ldr	r2, [r3, #0]
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	3304      	adds	r3, #4
 80131d4:	4619      	mov	r1, r3
 80131d6:	4610      	mov	r0, r2
 80131d8:	f000 fb70 	bl	80138bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	2201      	movs	r2, #1
 80131e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	2201      	movs	r2, #1
 80131e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	2201      	movs	r2, #1
 80131f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	2201      	movs	r2, #1
 80131f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	2201      	movs	r2, #1
 8013200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	2201      	movs	r2, #1
 8013208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	2201      	movs	r2, #1
 8013210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	2201      	movs	r2, #1
 8013218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	2201      	movs	r2, #1
 8013220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	2201      	movs	r2, #1
 8013228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	2201      	movs	r2, #1
 8013230:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	2201      	movs	r2, #1
 8013238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801323c:	2300      	movs	r3, #0
}
 801323e:	4618      	mov	r0, r3
 8013240:	3708      	adds	r7, #8
 8013242:	46bd      	mov	sp, r7
 8013244:	bd80      	pop	{r7, pc}

08013246 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8013246:	b480      	push	{r7}
 8013248:	b083      	sub	sp, #12
 801324a:	af00      	add	r7, sp, #0
 801324c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801324e:	bf00      	nop
 8013250:	370c      	adds	r7, #12
 8013252:	46bd      	mov	sp, r7
 8013254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013258:	4770      	bx	lr

0801325a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801325a:	b580      	push	{r7, lr}
 801325c:	b084      	sub	sp, #16
 801325e:	af00      	add	r7, sp, #0
 8013260:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	68db      	ldr	r3, [r3, #12]
 8013268:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	691b      	ldr	r3, [r3, #16]
 8013270:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8013272:	68bb      	ldr	r3, [r7, #8]
 8013274:	f003 0302 	and.w	r3, r3, #2
 8013278:	2b00      	cmp	r3, #0
 801327a:	d020      	beq.n	80132be <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	f003 0302 	and.w	r3, r3, #2
 8013282:	2b00      	cmp	r3, #0
 8013284:	d01b      	beq.n	80132be <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	f06f 0202 	mvn.w	r2, #2
 801328e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	2201      	movs	r2, #1
 8013294:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	699b      	ldr	r3, [r3, #24]
 801329c:	f003 0303 	and.w	r3, r3, #3
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d003      	beq.n	80132ac <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80132a4:	6878      	ldr	r0, [r7, #4]
 80132a6:	f000 faeb 	bl	8013880 <HAL_TIM_IC_CaptureCallback>
 80132aa:	e005      	b.n	80132b8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80132ac:	6878      	ldr	r0, [r7, #4]
 80132ae:	f7ef fd07 	bl	8002cc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80132b2:	6878      	ldr	r0, [r7, #4]
 80132b4:	f000 faee 	bl	8013894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	2200      	movs	r2, #0
 80132bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80132be:	68bb      	ldr	r3, [r7, #8]
 80132c0:	f003 0304 	and.w	r3, r3, #4
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d020      	beq.n	801330a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	f003 0304 	and.w	r3, r3, #4
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d01b      	beq.n	801330a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	f06f 0204 	mvn.w	r2, #4
 80132da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	2202      	movs	r2, #2
 80132e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	699b      	ldr	r3, [r3, #24]
 80132e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d003      	beq.n	80132f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80132f0:	6878      	ldr	r0, [r7, #4]
 80132f2:	f000 fac5 	bl	8013880 <HAL_TIM_IC_CaptureCallback>
 80132f6:	e005      	b.n	8013304 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80132f8:	6878      	ldr	r0, [r7, #4]
 80132fa:	f7ef fce1 	bl	8002cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80132fe:	6878      	ldr	r0, [r7, #4]
 8013300:	f000 fac8 	bl	8013894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	2200      	movs	r2, #0
 8013308:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801330a:	68bb      	ldr	r3, [r7, #8]
 801330c:	f003 0308 	and.w	r3, r3, #8
 8013310:	2b00      	cmp	r3, #0
 8013312:	d020      	beq.n	8013356 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	f003 0308 	and.w	r3, r3, #8
 801331a:	2b00      	cmp	r3, #0
 801331c:	d01b      	beq.n	8013356 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	f06f 0208 	mvn.w	r2, #8
 8013326:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2204      	movs	r2, #4
 801332c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	69db      	ldr	r3, [r3, #28]
 8013334:	f003 0303 	and.w	r3, r3, #3
 8013338:	2b00      	cmp	r3, #0
 801333a:	d003      	beq.n	8013344 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801333c:	6878      	ldr	r0, [r7, #4]
 801333e:	f000 fa9f 	bl	8013880 <HAL_TIM_IC_CaptureCallback>
 8013342:	e005      	b.n	8013350 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f7ef fcbb 	bl	8002cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801334a:	6878      	ldr	r0, [r7, #4]
 801334c:	f000 faa2 	bl	8013894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	2200      	movs	r2, #0
 8013354:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8013356:	68bb      	ldr	r3, [r7, #8]
 8013358:	f003 0310 	and.w	r3, r3, #16
 801335c:	2b00      	cmp	r3, #0
 801335e:	d020      	beq.n	80133a2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	f003 0310 	and.w	r3, r3, #16
 8013366:	2b00      	cmp	r3, #0
 8013368:	d01b      	beq.n	80133a2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	f06f 0210 	mvn.w	r2, #16
 8013372:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	2208      	movs	r2, #8
 8013378:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	69db      	ldr	r3, [r3, #28]
 8013380:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013384:	2b00      	cmp	r3, #0
 8013386:	d003      	beq.n	8013390 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013388:	6878      	ldr	r0, [r7, #4]
 801338a:	f000 fa79 	bl	8013880 <HAL_TIM_IC_CaptureCallback>
 801338e:	e005      	b.n	801339c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013390:	6878      	ldr	r0, [r7, #4]
 8013392:	f7ef fc95 	bl	8002cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013396:	6878      	ldr	r0, [r7, #4]
 8013398:	f000 fa7c 	bl	8013894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	2200      	movs	r2, #0
 80133a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80133a2:	68bb      	ldr	r3, [r7, #8]
 80133a4:	f003 0301 	and.w	r3, r3, #1
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d00c      	beq.n	80133c6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	f003 0301 	and.w	r3, r3, #1
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d007      	beq.n	80133c6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	f06f 0201 	mvn.w	r2, #1
 80133be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80133c0:	6878      	ldr	r0, [r7, #4]
 80133c2:	f7f0 fb4b 	bl	8003a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80133c6:	68bb      	ldr	r3, [r7, #8]
 80133c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d104      	bne.n	80133da <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80133d0:	68bb      	ldr	r3, [r7, #8]
 80133d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d00c      	beq.n	80133f4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d007      	beq.n	80133f4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80133ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80133ee:	6878      	ldr	r0, [r7, #4]
 80133f0:	f000 ffba 	bl	8014368 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80133f4:	68bb      	ldr	r3, [r7, #8]
 80133f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d00c      	beq.n	8013418 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013404:	2b00      	cmp	r3, #0
 8013406:	d007      	beq.n	8013418 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8013410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8013412:	6878      	ldr	r0, [r7, #4]
 8013414:	f000 ffb2 	bl	801437c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8013418:	68bb      	ldr	r3, [r7, #8]
 801341a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801341e:	2b00      	cmp	r3, #0
 8013420:	d00c      	beq.n	801343c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013428:	2b00      	cmp	r3, #0
 801342a:	d007      	beq.n	801343c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8013434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8013436:	6878      	ldr	r0, [r7, #4]
 8013438:	f000 fa36 	bl	80138a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801343c:	68bb      	ldr	r3, [r7, #8]
 801343e:	f003 0320 	and.w	r3, r3, #32
 8013442:	2b00      	cmp	r3, #0
 8013444:	d00c      	beq.n	8013460 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	f003 0320 	and.w	r3, r3, #32
 801344c:	2b00      	cmp	r3, #0
 801344e:	d007      	beq.n	8013460 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	f06f 0220 	mvn.w	r2, #32
 8013458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801345a:	6878      	ldr	r0, [r7, #4]
 801345c:	f000 ff7a 	bl	8014354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8013460:	bf00      	nop
 8013462:	3710      	adds	r7, #16
 8013464:	46bd      	mov	sp, r7
 8013466:	bd80      	pop	{r7, pc}

08013468 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b086      	sub	sp, #24
 801346c:	af00      	add	r7, sp, #0
 801346e:	60f8      	str	r0, [r7, #12]
 8013470:	60b9      	str	r1, [r7, #8]
 8013472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013474:	2300      	movs	r3, #0
 8013476:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801347e:	2b01      	cmp	r3, #1
 8013480:	d101      	bne.n	8013486 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8013482:	2302      	movs	r3, #2
 8013484:	e0ff      	b.n	8013686 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	2201      	movs	r2, #1
 801348a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	2b14      	cmp	r3, #20
 8013492:	f200 80f0 	bhi.w	8013676 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8013496:	a201      	add	r2, pc, #4	; (adr r2, 801349c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8013498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801349c:	080134f1 	.word	0x080134f1
 80134a0:	08013677 	.word	0x08013677
 80134a4:	08013677 	.word	0x08013677
 80134a8:	08013677 	.word	0x08013677
 80134ac:	08013531 	.word	0x08013531
 80134b0:	08013677 	.word	0x08013677
 80134b4:	08013677 	.word	0x08013677
 80134b8:	08013677 	.word	0x08013677
 80134bc:	08013573 	.word	0x08013573
 80134c0:	08013677 	.word	0x08013677
 80134c4:	08013677 	.word	0x08013677
 80134c8:	08013677 	.word	0x08013677
 80134cc:	080135b3 	.word	0x080135b3
 80134d0:	08013677 	.word	0x08013677
 80134d4:	08013677 	.word	0x08013677
 80134d8:	08013677 	.word	0x08013677
 80134dc:	080135f5 	.word	0x080135f5
 80134e0:	08013677 	.word	0x08013677
 80134e4:	08013677 	.word	0x08013677
 80134e8:	08013677 	.word	0x08013677
 80134ec:	08013635 	.word	0x08013635
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	68b9      	ldr	r1, [r7, #8]
 80134f6:	4618      	mov	r0, r3
 80134f8:	f000 fa86 	bl	8013a08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	699a      	ldr	r2, [r3, #24]
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	f042 0208 	orr.w	r2, r2, #8
 801350a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	699a      	ldr	r2, [r3, #24]
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	f022 0204 	bic.w	r2, r2, #4
 801351a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	6999      	ldr	r1, [r3, #24]
 8013522:	68bb      	ldr	r3, [r7, #8]
 8013524:	691a      	ldr	r2, [r3, #16]
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	430a      	orrs	r2, r1
 801352c:	619a      	str	r2, [r3, #24]
      break;
 801352e:	e0a5      	b.n	801367c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	68b9      	ldr	r1, [r7, #8]
 8013536:	4618      	mov	r0, r3
 8013538:	f000 faf6 	bl	8013b28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	699a      	ldr	r2, [r3, #24]
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801354a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	699a      	ldr	r2, [r3, #24]
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801355a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	6999      	ldr	r1, [r3, #24]
 8013562:	68bb      	ldr	r3, [r7, #8]
 8013564:	691b      	ldr	r3, [r3, #16]
 8013566:	021a      	lsls	r2, r3, #8
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	430a      	orrs	r2, r1
 801356e:	619a      	str	r2, [r3, #24]
      break;
 8013570:	e084      	b.n	801367c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	68b9      	ldr	r1, [r7, #8]
 8013578:	4618      	mov	r0, r3
 801357a:	f000 fb5f 	bl	8013c3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	69da      	ldr	r2, [r3, #28]
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	f042 0208 	orr.w	r2, r2, #8
 801358c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	69da      	ldr	r2, [r3, #28]
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	f022 0204 	bic.w	r2, r2, #4
 801359c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	69d9      	ldr	r1, [r3, #28]
 80135a4:	68bb      	ldr	r3, [r7, #8]
 80135a6:	691a      	ldr	r2, [r3, #16]
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	430a      	orrs	r2, r1
 80135ae:	61da      	str	r2, [r3, #28]
      break;
 80135b0:	e064      	b.n	801367c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	68b9      	ldr	r1, [r7, #8]
 80135b8:	4618      	mov	r0, r3
 80135ba:	f000 fbc7 	bl	8013d4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	69da      	ldr	r2, [r3, #28]
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80135cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	69da      	ldr	r2, [r3, #28]
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80135dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	69d9      	ldr	r1, [r3, #28]
 80135e4:	68bb      	ldr	r3, [r7, #8]
 80135e6:	691b      	ldr	r3, [r3, #16]
 80135e8:	021a      	lsls	r2, r3, #8
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	430a      	orrs	r2, r1
 80135f0:	61da      	str	r2, [r3, #28]
      break;
 80135f2:	e043      	b.n	801367c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	68b9      	ldr	r1, [r7, #8]
 80135fa:	4618      	mov	r0, r3
 80135fc:	f000 fc10 	bl	8013e20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	f042 0208 	orr.w	r2, r2, #8
 801360e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	f022 0204 	bic.w	r2, r2, #4
 801361e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013626:	68bb      	ldr	r3, [r7, #8]
 8013628:	691a      	ldr	r2, [r3, #16]
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	430a      	orrs	r2, r1
 8013630:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8013632:	e023      	b.n	801367c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	68b9      	ldr	r1, [r7, #8]
 801363a:	4618      	mov	r0, r3
 801363c:	f000 fc54 	bl	8013ee8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801364e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801365e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013666:	68bb      	ldr	r3, [r7, #8]
 8013668:	691b      	ldr	r3, [r3, #16]
 801366a:	021a      	lsls	r2, r3, #8
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	430a      	orrs	r2, r1
 8013672:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8013674:	e002      	b.n	801367c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8013676:	2301      	movs	r3, #1
 8013678:	75fb      	strb	r3, [r7, #23]
      break;
 801367a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	2200      	movs	r2, #0
 8013680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8013684:	7dfb      	ldrb	r3, [r7, #23]
}
 8013686:	4618      	mov	r0, r3
 8013688:	3718      	adds	r7, #24
 801368a:	46bd      	mov	sp, r7
 801368c:	bd80      	pop	{r7, pc}
 801368e:	bf00      	nop

08013690 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013690:	b580      	push	{r7, lr}
 8013692:	b084      	sub	sp, #16
 8013694:	af00      	add	r7, sp, #0
 8013696:	6078      	str	r0, [r7, #4]
 8013698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801369a:	2300      	movs	r3, #0
 801369c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80136a4:	2b01      	cmp	r3, #1
 80136a6:	d101      	bne.n	80136ac <HAL_TIM_ConfigClockSource+0x1c>
 80136a8:	2302      	movs	r3, #2
 80136aa:	e0dc      	b.n	8013866 <HAL_TIM_ConfigClockSource+0x1d6>
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	2201      	movs	r2, #1
 80136b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	2202      	movs	r2, #2
 80136b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	689b      	ldr	r3, [r3, #8]
 80136c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80136c4:	68ba      	ldr	r2, [r7, #8]
 80136c6:	4b6a      	ldr	r3, [pc, #424]	; (8013870 <HAL_TIM_ConfigClockSource+0x1e0>)
 80136c8:	4013      	ands	r3, r2
 80136ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80136cc:	68bb      	ldr	r3, [r7, #8]
 80136ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80136d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	68ba      	ldr	r2, [r7, #8]
 80136da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80136dc:	683b      	ldr	r3, [r7, #0]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	4a64      	ldr	r2, [pc, #400]	; (8013874 <HAL_TIM_ConfigClockSource+0x1e4>)
 80136e2:	4293      	cmp	r3, r2
 80136e4:	f000 80a9 	beq.w	801383a <HAL_TIM_ConfigClockSource+0x1aa>
 80136e8:	4a62      	ldr	r2, [pc, #392]	; (8013874 <HAL_TIM_ConfigClockSource+0x1e4>)
 80136ea:	4293      	cmp	r3, r2
 80136ec:	f200 80ae 	bhi.w	801384c <HAL_TIM_ConfigClockSource+0x1bc>
 80136f0:	4a61      	ldr	r2, [pc, #388]	; (8013878 <HAL_TIM_ConfigClockSource+0x1e8>)
 80136f2:	4293      	cmp	r3, r2
 80136f4:	f000 80a1 	beq.w	801383a <HAL_TIM_ConfigClockSource+0x1aa>
 80136f8:	4a5f      	ldr	r2, [pc, #380]	; (8013878 <HAL_TIM_ConfigClockSource+0x1e8>)
 80136fa:	4293      	cmp	r3, r2
 80136fc:	f200 80a6 	bhi.w	801384c <HAL_TIM_ConfigClockSource+0x1bc>
 8013700:	4a5e      	ldr	r2, [pc, #376]	; (801387c <HAL_TIM_ConfigClockSource+0x1ec>)
 8013702:	4293      	cmp	r3, r2
 8013704:	f000 8099 	beq.w	801383a <HAL_TIM_ConfigClockSource+0x1aa>
 8013708:	4a5c      	ldr	r2, [pc, #368]	; (801387c <HAL_TIM_ConfigClockSource+0x1ec>)
 801370a:	4293      	cmp	r3, r2
 801370c:	f200 809e 	bhi.w	801384c <HAL_TIM_ConfigClockSource+0x1bc>
 8013710:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8013714:	f000 8091 	beq.w	801383a <HAL_TIM_ConfigClockSource+0x1aa>
 8013718:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801371c:	f200 8096 	bhi.w	801384c <HAL_TIM_ConfigClockSource+0x1bc>
 8013720:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013724:	f000 8089 	beq.w	801383a <HAL_TIM_ConfigClockSource+0x1aa>
 8013728:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801372c:	f200 808e 	bhi.w	801384c <HAL_TIM_ConfigClockSource+0x1bc>
 8013730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013734:	d03e      	beq.n	80137b4 <HAL_TIM_ConfigClockSource+0x124>
 8013736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801373a:	f200 8087 	bhi.w	801384c <HAL_TIM_ConfigClockSource+0x1bc>
 801373e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013742:	f000 8086 	beq.w	8013852 <HAL_TIM_ConfigClockSource+0x1c2>
 8013746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801374a:	d87f      	bhi.n	801384c <HAL_TIM_ConfigClockSource+0x1bc>
 801374c:	2b70      	cmp	r3, #112	; 0x70
 801374e:	d01a      	beq.n	8013786 <HAL_TIM_ConfigClockSource+0xf6>
 8013750:	2b70      	cmp	r3, #112	; 0x70
 8013752:	d87b      	bhi.n	801384c <HAL_TIM_ConfigClockSource+0x1bc>
 8013754:	2b60      	cmp	r3, #96	; 0x60
 8013756:	d050      	beq.n	80137fa <HAL_TIM_ConfigClockSource+0x16a>
 8013758:	2b60      	cmp	r3, #96	; 0x60
 801375a:	d877      	bhi.n	801384c <HAL_TIM_ConfigClockSource+0x1bc>
 801375c:	2b50      	cmp	r3, #80	; 0x50
 801375e:	d03c      	beq.n	80137da <HAL_TIM_ConfigClockSource+0x14a>
 8013760:	2b50      	cmp	r3, #80	; 0x50
 8013762:	d873      	bhi.n	801384c <HAL_TIM_ConfigClockSource+0x1bc>
 8013764:	2b40      	cmp	r3, #64	; 0x40
 8013766:	d058      	beq.n	801381a <HAL_TIM_ConfigClockSource+0x18a>
 8013768:	2b40      	cmp	r3, #64	; 0x40
 801376a:	d86f      	bhi.n	801384c <HAL_TIM_ConfigClockSource+0x1bc>
 801376c:	2b30      	cmp	r3, #48	; 0x30
 801376e:	d064      	beq.n	801383a <HAL_TIM_ConfigClockSource+0x1aa>
 8013770:	2b30      	cmp	r3, #48	; 0x30
 8013772:	d86b      	bhi.n	801384c <HAL_TIM_ConfigClockSource+0x1bc>
 8013774:	2b20      	cmp	r3, #32
 8013776:	d060      	beq.n	801383a <HAL_TIM_ConfigClockSource+0x1aa>
 8013778:	2b20      	cmp	r3, #32
 801377a:	d867      	bhi.n	801384c <HAL_TIM_ConfigClockSource+0x1bc>
 801377c:	2b00      	cmp	r3, #0
 801377e:	d05c      	beq.n	801383a <HAL_TIM_ConfigClockSource+0x1aa>
 8013780:	2b10      	cmp	r3, #16
 8013782:	d05a      	beq.n	801383a <HAL_TIM_ConfigClockSource+0x1aa>
 8013784:	e062      	b.n	801384c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	6818      	ldr	r0, [r3, #0]
 801378a:	683b      	ldr	r3, [r7, #0]
 801378c:	6899      	ldr	r1, [r3, #8]
 801378e:	683b      	ldr	r3, [r7, #0]
 8013790:	685a      	ldr	r2, [r3, #4]
 8013792:	683b      	ldr	r3, [r7, #0]
 8013794:	68db      	ldr	r3, [r3, #12]
 8013796:	f000 fc8b 	bl	80140b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	689b      	ldr	r3, [r3, #8]
 80137a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80137a2:	68bb      	ldr	r3, [r7, #8]
 80137a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80137a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	68ba      	ldr	r2, [r7, #8]
 80137b0:	609a      	str	r2, [r3, #8]
      break;
 80137b2:	e04f      	b.n	8013854 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	6818      	ldr	r0, [r3, #0]
 80137b8:	683b      	ldr	r3, [r7, #0]
 80137ba:	6899      	ldr	r1, [r3, #8]
 80137bc:	683b      	ldr	r3, [r7, #0]
 80137be:	685a      	ldr	r2, [r3, #4]
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	68db      	ldr	r3, [r3, #12]
 80137c4:	f000 fc74 	bl	80140b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	689a      	ldr	r2, [r3, #8]
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80137d6:	609a      	str	r2, [r3, #8]
      break;
 80137d8:	e03c      	b.n	8013854 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	6818      	ldr	r0, [r3, #0]
 80137de:	683b      	ldr	r3, [r7, #0]
 80137e0:	6859      	ldr	r1, [r3, #4]
 80137e2:	683b      	ldr	r3, [r7, #0]
 80137e4:	68db      	ldr	r3, [r3, #12]
 80137e6:	461a      	mov	r2, r3
 80137e8:	f000 fbe4 	bl	8013fb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	2150      	movs	r1, #80	; 0x50
 80137f2:	4618      	mov	r0, r3
 80137f4:	f000 fc3e 	bl	8014074 <TIM_ITRx_SetConfig>
      break;
 80137f8:	e02c      	b.n	8013854 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	6818      	ldr	r0, [r3, #0]
 80137fe:	683b      	ldr	r3, [r7, #0]
 8013800:	6859      	ldr	r1, [r3, #4]
 8013802:	683b      	ldr	r3, [r7, #0]
 8013804:	68db      	ldr	r3, [r3, #12]
 8013806:	461a      	mov	r2, r3
 8013808:	f000 fc03 	bl	8014012 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	2160      	movs	r1, #96	; 0x60
 8013812:	4618      	mov	r0, r3
 8013814:	f000 fc2e 	bl	8014074 <TIM_ITRx_SetConfig>
      break;
 8013818:	e01c      	b.n	8013854 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	6818      	ldr	r0, [r3, #0]
 801381e:	683b      	ldr	r3, [r7, #0]
 8013820:	6859      	ldr	r1, [r3, #4]
 8013822:	683b      	ldr	r3, [r7, #0]
 8013824:	68db      	ldr	r3, [r3, #12]
 8013826:	461a      	mov	r2, r3
 8013828:	f000 fbc4 	bl	8013fb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	2140      	movs	r1, #64	; 0x40
 8013832:	4618      	mov	r0, r3
 8013834:	f000 fc1e 	bl	8014074 <TIM_ITRx_SetConfig>
      break;
 8013838:	e00c      	b.n	8013854 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	681a      	ldr	r2, [r3, #0]
 801383e:	683b      	ldr	r3, [r7, #0]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	4619      	mov	r1, r3
 8013844:	4610      	mov	r0, r2
 8013846:	f000 fc15 	bl	8014074 <TIM_ITRx_SetConfig>
      break;
 801384a:	e003      	b.n	8013854 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801384c:	2301      	movs	r3, #1
 801384e:	73fb      	strb	r3, [r7, #15]
      break;
 8013850:	e000      	b.n	8013854 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8013852:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	2201      	movs	r2, #1
 8013858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	2200      	movs	r2, #0
 8013860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8013864:	7bfb      	ldrb	r3, [r7, #15]
}
 8013866:	4618      	mov	r0, r3
 8013868:	3710      	adds	r7, #16
 801386a:	46bd      	mov	sp, r7
 801386c:	bd80      	pop	{r7, pc}
 801386e:	bf00      	nop
 8013870:	ffceff88 	.word	0xffceff88
 8013874:	00100040 	.word	0x00100040
 8013878:	00100030 	.word	0x00100030
 801387c:	00100020 	.word	0x00100020

08013880 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013880:	b480      	push	{r7}
 8013882:	b083      	sub	sp, #12
 8013884:	af00      	add	r7, sp, #0
 8013886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013888:	bf00      	nop
 801388a:	370c      	adds	r7, #12
 801388c:	46bd      	mov	sp, r7
 801388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013892:	4770      	bx	lr

08013894 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013894:	b480      	push	{r7}
 8013896:	b083      	sub	sp, #12
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801389c:	bf00      	nop
 801389e:	370c      	adds	r7, #12
 80138a0:	46bd      	mov	sp, r7
 80138a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a6:	4770      	bx	lr

080138a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80138a8:	b480      	push	{r7}
 80138aa:	b083      	sub	sp, #12
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80138b0:	bf00      	nop
 80138b2:	370c      	adds	r7, #12
 80138b4:	46bd      	mov	sp, r7
 80138b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ba:	4770      	bx	lr

080138bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80138bc:	b480      	push	{r7}
 80138be:	b085      	sub	sp, #20
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
 80138c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	4a46      	ldr	r2, [pc, #280]	; (80139e8 <TIM_Base_SetConfig+0x12c>)
 80138d0:	4293      	cmp	r3, r2
 80138d2:	d013      	beq.n	80138fc <TIM_Base_SetConfig+0x40>
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80138da:	d00f      	beq.n	80138fc <TIM_Base_SetConfig+0x40>
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	4a43      	ldr	r2, [pc, #268]	; (80139ec <TIM_Base_SetConfig+0x130>)
 80138e0:	4293      	cmp	r3, r2
 80138e2:	d00b      	beq.n	80138fc <TIM_Base_SetConfig+0x40>
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	4a42      	ldr	r2, [pc, #264]	; (80139f0 <TIM_Base_SetConfig+0x134>)
 80138e8:	4293      	cmp	r3, r2
 80138ea:	d007      	beq.n	80138fc <TIM_Base_SetConfig+0x40>
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	4a41      	ldr	r2, [pc, #260]	; (80139f4 <TIM_Base_SetConfig+0x138>)
 80138f0:	4293      	cmp	r3, r2
 80138f2:	d003      	beq.n	80138fc <TIM_Base_SetConfig+0x40>
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	4a40      	ldr	r2, [pc, #256]	; (80139f8 <TIM_Base_SetConfig+0x13c>)
 80138f8:	4293      	cmp	r3, r2
 80138fa:	d108      	bne.n	801390e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013904:	683b      	ldr	r3, [r7, #0]
 8013906:	685b      	ldr	r3, [r3, #4]
 8013908:	68fa      	ldr	r2, [r7, #12]
 801390a:	4313      	orrs	r3, r2
 801390c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	4a35      	ldr	r2, [pc, #212]	; (80139e8 <TIM_Base_SetConfig+0x12c>)
 8013912:	4293      	cmp	r3, r2
 8013914:	d01f      	beq.n	8013956 <TIM_Base_SetConfig+0x9a>
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801391c:	d01b      	beq.n	8013956 <TIM_Base_SetConfig+0x9a>
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	4a32      	ldr	r2, [pc, #200]	; (80139ec <TIM_Base_SetConfig+0x130>)
 8013922:	4293      	cmp	r3, r2
 8013924:	d017      	beq.n	8013956 <TIM_Base_SetConfig+0x9a>
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	4a31      	ldr	r2, [pc, #196]	; (80139f0 <TIM_Base_SetConfig+0x134>)
 801392a:	4293      	cmp	r3, r2
 801392c:	d013      	beq.n	8013956 <TIM_Base_SetConfig+0x9a>
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	4a30      	ldr	r2, [pc, #192]	; (80139f4 <TIM_Base_SetConfig+0x138>)
 8013932:	4293      	cmp	r3, r2
 8013934:	d00f      	beq.n	8013956 <TIM_Base_SetConfig+0x9a>
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	4a2f      	ldr	r2, [pc, #188]	; (80139f8 <TIM_Base_SetConfig+0x13c>)
 801393a:	4293      	cmp	r3, r2
 801393c:	d00b      	beq.n	8013956 <TIM_Base_SetConfig+0x9a>
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	4a2e      	ldr	r2, [pc, #184]	; (80139fc <TIM_Base_SetConfig+0x140>)
 8013942:	4293      	cmp	r3, r2
 8013944:	d007      	beq.n	8013956 <TIM_Base_SetConfig+0x9a>
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	4a2d      	ldr	r2, [pc, #180]	; (8013a00 <TIM_Base_SetConfig+0x144>)
 801394a:	4293      	cmp	r3, r2
 801394c:	d003      	beq.n	8013956 <TIM_Base_SetConfig+0x9a>
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	4a2c      	ldr	r2, [pc, #176]	; (8013a04 <TIM_Base_SetConfig+0x148>)
 8013952:	4293      	cmp	r3, r2
 8013954:	d108      	bne.n	8013968 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801395c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801395e:	683b      	ldr	r3, [r7, #0]
 8013960:	68db      	ldr	r3, [r3, #12]
 8013962:	68fa      	ldr	r2, [r7, #12]
 8013964:	4313      	orrs	r3, r2
 8013966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801396e:	683b      	ldr	r3, [r7, #0]
 8013970:	695b      	ldr	r3, [r3, #20]
 8013972:	4313      	orrs	r3, r2
 8013974:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	68fa      	ldr	r2, [r7, #12]
 801397a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801397c:	683b      	ldr	r3, [r7, #0]
 801397e:	689a      	ldr	r2, [r3, #8]
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013984:	683b      	ldr	r3, [r7, #0]
 8013986:	681a      	ldr	r2, [r3, #0]
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	4a16      	ldr	r2, [pc, #88]	; (80139e8 <TIM_Base_SetConfig+0x12c>)
 8013990:	4293      	cmp	r3, r2
 8013992:	d00f      	beq.n	80139b4 <TIM_Base_SetConfig+0xf8>
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	4a18      	ldr	r2, [pc, #96]	; (80139f8 <TIM_Base_SetConfig+0x13c>)
 8013998:	4293      	cmp	r3, r2
 801399a:	d00b      	beq.n	80139b4 <TIM_Base_SetConfig+0xf8>
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	4a17      	ldr	r2, [pc, #92]	; (80139fc <TIM_Base_SetConfig+0x140>)
 80139a0:	4293      	cmp	r3, r2
 80139a2:	d007      	beq.n	80139b4 <TIM_Base_SetConfig+0xf8>
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	4a16      	ldr	r2, [pc, #88]	; (8013a00 <TIM_Base_SetConfig+0x144>)
 80139a8:	4293      	cmp	r3, r2
 80139aa:	d003      	beq.n	80139b4 <TIM_Base_SetConfig+0xf8>
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	4a15      	ldr	r2, [pc, #84]	; (8013a04 <TIM_Base_SetConfig+0x148>)
 80139b0:	4293      	cmp	r3, r2
 80139b2:	d103      	bne.n	80139bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80139b4:	683b      	ldr	r3, [r7, #0]
 80139b6:	691a      	ldr	r2, [r3, #16]
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	2201      	movs	r2, #1
 80139c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	691b      	ldr	r3, [r3, #16]
 80139c6:	f003 0301 	and.w	r3, r3, #1
 80139ca:	2b01      	cmp	r3, #1
 80139cc:	d105      	bne.n	80139da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	691b      	ldr	r3, [r3, #16]
 80139d2:	f023 0201 	bic.w	r2, r3, #1
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	611a      	str	r2, [r3, #16]
  }
}
 80139da:	bf00      	nop
 80139dc:	3714      	adds	r7, #20
 80139de:	46bd      	mov	sp, r7
 80139e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e4:	4770      	bx	lr
 80139e6:	bf00      	nop
 80139e8:	40010000 	.word	0x40010000
 80139ec:	40000400 	.word	0x40000400
 80139f0:	40000800 	.word	0x40000800
 80139f4:	40000c00 	.word	0x40000c00
 80139f8:	40010400 	.word	0x40010400
 80139fc:	40014000 	.word	0x40014000
 8013a00:	40014400 	.word	0x40014400
 8013a04:	40014800 	.word	0x40014800

08013a08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013a08:	b480      	push	{r7}
 8013a0a:	b087      	sub	sp, #28
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]
 8013a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	6a1b      	ldr	r3, [r3, #32]
 8013a16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	6a1b      	ldr	r3, [r3, #32]
 8013a1c:	f023 0201 	bic.w	r2, r3, #1
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	685b      	ldr	r3, [r3, #4]
 8013a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	699b      	ldr	r3, [r3, #24]
 8013a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013a30:	68fa      	ldr	r2, [r7, #12]
 8013a32:	4b37      	ldr	r3, [pc, #220]	; (8013b10 <TIM_OC1_SetConfig+0x108>)
 8013a34:	4013      	ands	r3, r2
 8013a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	f023 0303 	bic.w	r3, r3, #3
 8013a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013a40:	683b      	ldr	r3, [r7, #0]
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	68fa      	ldr	r2, [r7, #12]
 8013a46:	4313      	orrs	r3, r2
 8013a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013a4a:	697b      	ldr	r3, [r7, #20]
 8013a4c:	f023 0302 	bic.w	r3, r3, #2
 8013a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013a52:	683b      	ldr	r3, [r7, #0]
 8013a54:	689b      	ldr	r3, [r3, #8]
 8013a56:	697a      	ldr	r2, [r7, #20]
 8013a58:	4313      	orrs	r3, r2
 8013a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	4a2d      	ldr	r2, [pc, #180]	; (8013b14 <TIM_OC1_SetConfig+0x10c>)
 8013a60:	4293      	cmp	r3, r2
 8013a62:	d00f      	beq.n	8013a84 <TIM_OC1_SetConfig+0x7c>
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	4a2c      	ldr	r2, [pc, #176]	; (8013b18 <TIM_OC1_SetConfig+0x110>)
 8013a68:	4293      	cmp	r3, r2
 8013a6a:	d00b      	beq.n	8013a84 <TIM_OC1_SetConfig+0x7c>
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	4a2b      	ldr	r2, [pc, #172]	; (8013b1c <TIM_OC1_SetConfig+0x114>)
 8013a70:	4293      	cmp	r3, r2
 8013a72:	d007      	beq.n	8013a84 <TIM_OC1_SetConfig+0x7c>
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	4a2a      	ldr	r2, [pc, #168]	; (8013b20 <TIM_OC1_SetConfig+0x118>)
 8013a78:	4293      	cmp	r3, r2
 8013a7a:	d003      	beq.n	8013a84 <TIM_OC1_SetConfig+0x7c>
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	4a29      	ldr	r2, [pc, #164]	; (8013b24 <TIM_OC1_SetConfig+0x11c>)
 8013a80:	4293      	cmp	r3, r2
 8013a82:	d10c      	bne.n	8013a9e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013a84:	697b      	ldr	r3, [r7, #20]
 8013a86:	f023 0308 	bic.w	r3, r3, #8
 8013a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013a8c:	683b      	ldr	r3, [r7, #0]
 8013a8e:	68db      	ldr	r3, [r3, #12]
 8013a90:	697a      	ldr	r2, [r7, #20]
 8013a92:	4313      	orrs	r3, r2
 8013a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013a96:	697b      	ldr	r3, [r7, #20]
 8013a98:	f023 0304 	bic.w	r3, r3, #4
 8013a9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	4a1c      	ldr	r2, [pc, #112]	; (8013b14 <TIM_OC1_SetConfig+0x10c>)
 8013aa2:	4293      	cmp	r3, r2
 8013aa4:	d00f      	beq.n	8013ac6 <TIM_OC1_SetConfig+0xbe>
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	4a1b      	ldr	r2, [pc, #108]	; (8013b18 <TIM_OC1_SetConfig+0x110>)
 8013aaa:	4293      	cmp	r3, r2
 8013aac:	d00b      	beq.n	8013ac6 <TIM_OC1_SetConfig+0xbe>
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	4a1a      	ldr	r2, [pc, #104]	; (8013b1c <TIM_OC1_SetConfig+0x114>)
 8013ab2:	4293      	cmp	r3, r2
 8013ab4:	d007      	beq.n	8013ac6 <TIM_OC1_SetConfig+0xbe>
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	4a19      	ldr	r2, [pc, #100]	; (8013b20 <TIM_OC1_SetConfig+0x118>)
 8013aba:	4293      	cmp	r3, r2
 8013abc:	d003      	beq.n	8013ac6 <TIM_OC1_SetConfig+0xbe>
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	4a18      	ldr	r2, [pc, #96]	; (8013b24 <TIM_OC1_SetConfig+0x11c>)
 8013ac2:	4293      	cmp	r3, r2
 8013ac4:	d111      	bne.n	8013aea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013ac6:	693b      	ldr	r3, [r7, #16]
 8013ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013ace:	693b      	ldr	r3, [r7, #16]
 8013ad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013ad6:	683b      	ldr	r3, [r7, #0]
 8013ad8:	695b      	ldr	r3, [r3, #20]
 8013ada:	693a      	ldr	r2, [r7, #16]
 8013adc:	4313      	orrs	r3, r2
 8013ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013ae0:	683b      	ldr	r3, [r7, #0]
 8013ae2:	699b      	ldr	r3, [r3, #24]
 8013ae4:	693a      	ldr	r2, [r7, #16]
 8013ae6:	4313      	orrs	r3, r2
 8013ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	693a      	ldr	r2, [r7, #16]
 8013aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	68fa      	ldr	r2, [r7, #12]
 8013af4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013af6:	683b      	ldr	r3, [r7, #0]
 8013af8:	685a      	ldr	r2, [r3, #4]
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	697a      	ldr	r2, [r7, #20]
 8013b02:	621a      	str	r2, [r3, #32]
}
 8013b04:	bf00      	nop
 8013b06:	371c      	adds	r7, #28
 8013b08:	46bd      	mov	sp, r7
 8013b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b0e:	4770      	bx	lr
 8013b10:	fffeff8f 	.word	0xfffeff8f
 8013b14:	40010000 	.word	0x40010000
 8013b18:	40010400 	.word	0x40010400
 8013b1c:	40014000 	.word	0x40014000
 8013b20:	40014400 	.word	0x40014400
 8013b24:	40014800 	.word	0x40014800

08013b28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013b28:	b480      	push	{r7}
 8013b2a:	b087      	sub	sp, #28
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
 8013b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	6a1b      	ldr	r3, [r3, #32]
 8013b36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	6a1b      	ldr	r3, [r3, #32]
 8013b3c:	f023 0210 	bic.w	r2, r3, #16
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	685b      	ldr	r3, [r3, #4]
 8013b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	699b      	ldr	r3, [r3, #24]
 8013b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013b50:	68fa      	ldr	r2, [r7, #12]
 8013b52:	4b34      	ldr	r3, [pc, #208]	; (8013c24 <TIM_OC2_SetConfig+0xfc>)
 8013b54:	4013      	ands	r3, r2
 8013b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013b60:	683b      	ldr	r3, [r7, #0]
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	021b      	lsls	r3, r3, #8
 8013b66:	68fa      	ldr	r2, [r7, #12]
 8013b68:	4313      	orrs	r3, r2
 8013b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013b6c:	697b      	ldr	r3, [r7, #20]
 8013b6e:	f023 0320 	bic.w	r3, r3, #32
 8013b72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013b74:	683b      	ldr	r3, [r7, #0]
 8013b76:	689b      	ldr	r3, [r3, #8]
 8013b78:	011b      	lsls	r3, r3, #4
 8013b7a:	697a      	ldr	r2, [r7, #20]
 8013b7c:	4313      	orrs	r3, r2
 8013b7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	4a29      	ldr	r2, [pc, #164]	; (8013c28 <TIM_OC2_SetConfig+0x100>)
 8013b84:	4293      	cmp	r3, r2
 8013b86:	d003      	beq.n	8013b90 <TIM_OC2_SetConfig+0x68>
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	4a28      	ldr	r2, [pc, #160]	; (8013c2c <TIM_OC2_SetConfig+0x104>)
 8013b8c:	4293      	cmp	r3, r2
 8013b8e:	d10d      	bne.n	8013bac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013b90:	697b      	ldr	r3, [r7, #20]
 8013b92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013b96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013b98:	683b      	ldr	r3, [r7, #0]
 8013b9a:	68db      	ldr	r3, [r3, #12]
 8013b9c:	011b      	lsls	r3, r3, #4
 8013b9e:	697a      	ldr	r2, [r7, #20]
 8013ba0:	4313      	orrs	r3, r2
 8013ba2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013ba4:	697b      	ldr	r3, [r7, #20]
 8013ba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013baa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	4a1e      	ldr	r2, [pc, #120]	; (8013c28 <TIM_OC2_SetConfig+0x100>)
 8013bb0:	4293      	cmp	r3, r2
 8013bb2:	d00f      	beq.n	8013bd4 <TIM_OC2_SetConfig+0xac>
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	4a1d      	ldr	r2, [pc, #116]	; (8013c2c <TIM_OC2_SetConfig+0x104>)
 8013bb8:	4293      	cmp	r3, r2
 8013bba:	d00b      	beq.n	8013bd4 <TIM_OC2_SetConfig+0xac>
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	4a1c      	ldr	r2, [pc, #112]	; (8013c30 <TIM_OC2_SetConfig+0x108>)
 8013bc0:	4293      	cmp	r3, r2
 8013bc2:	d007      	beq.n	8013bd4 <TIM_OC2_SetConfig+0xac>
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	4a1b      	ldr	r2, [pc, #108]	; (8013c34 <TIM_OC2_SetConfig+0x10c>)
 8013bc8:	4293      	cmp	r3, r2
 8013bca:	d003      	beq.n	8013bd4 <TIM_OC2_SetConfig+0xac>
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	4a1a      	ldr	r2, [pc, #104]	; (8013c38 <TIM_OC2_SetConfig+0x110>)
 8013bd0:	4293      	cmp	r3, r2
 8013bd2:	d113      	bne.n	8013bfc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013bd4:	693b      	ldr	r3, [r7, #16]
 8013bd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013bda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013bdc:	693b      	ldr	r3, [r7, #16]
 8013bde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013be2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013be4:	683b      	ldr	r3, [r7, #0]
 8013be6:	695b      	ldr	r3, [r3, #20]
 8013be8:	009b      	lsls	r3, r3, #2
 8013bea:	693a      	ldr	r2, [r7, #16]
 8013bec:	4313      	orrs	r3, r2
 8013bee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013bf0:	683b      	ldr	r3, [r7, #0]
 8013bf2:	699b      	ldr	r3, [r3, #24]
 8013bf4:	009b      	lsls	r3, r3, #2
 8013bf6:	693a      	ldr	r2, [r7, #16]
 8013bf8:	4313      	orrs	r3, r2
 8013bfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	693a      	ldr	r2, [r7, #16]
 8013c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	68fa      	ldr	r2, [r7, #12]
 8013c06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013c08:	683b      	ldr	r3, [r7, #0]
 8013c0a:	685a      	ldr	r2, [r3, #4]
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	697a      	ldr	r2, [r7, #20]
 8013c14:	621a      	str	r2, [r3, #32]
}
 8013c16:	bf00      	nop
 8013c18:	371c      	adds	r7, #28
 8013c1a:	46bd      	mov	sp, r7
 8013c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c20:	4770      	bx	lr
 8013c22:	bf00      	nop
 8013c24:	feff8fff 	.word	0xfeff8fff
 8013c28:	40010000 	.word	0x40010000
 8013c2c:	40010400 	.word	0x40010400
 8013c30:	40014000 	.word	0x40014000
 8013c34:	40014400 	.word	0x40014400
 8013c38:	40014800 	.word	0x40014800

08013c3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013c3c:	b480      	push	{r7}
 8013c3e:	b087      	sub	sp, #28
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
 8013c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	6a1b      	ldr	r3, [r3, #32]
 8013c4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	6a1b      	ldr	r3, [r3, #32]
 8013c50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	685b      	ldr	r3, [r3, #4]
 8013c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	69db      	ldr	r3, [r3, #28]
 8013c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013c64:	68fa      	ldr	r2, [r7, #12]
 8013c66:	4b33      	ldr	r3, [pc, #204]	; (8013d34 <TIM_OC3_SetConfig+0xf8>)
 8013c68:	4013      	ands	r3, r2
 8013c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	f023 0303 	bic.w	r3, r3, #3
 8013c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013c74:	683b      	ldr	r3, [r7, #0]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	68fa      	ldr	r2, [r7, #12]
 8013c7a:	4313      	orrs	r3, r2
 8013c7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013c7e:	697b      	ldr	r3, [r7, #20]
 8013c80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013c84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013c86:	683b      	ldr	r3, [r7, #0]
 8013c88:	689b      	ldr	r3, [r3, #8]
 8013c8a:	021b      	lsls	r3, r3, #8
 8013c8c:	697a      	ldr	r2, [r7, #20]
 8013c8e:	4313      	orrs	r3, r2
 8013c90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	4a28      	ldr	r2, [pc, #160]	; (8013d38 <TIM_OC3_SetConfig+0xfc>)
 8013c96:	4293      	cmp	r3, r2
 8013c98:	d003      	beq.n	8013ca2 <TIM_OC3_SetConfig+0x66>
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	4a27      	ldr	r2, [pc, #156]	; (8013d3c <TIM_OC3_SetConfig+0x100>)
 8013c9e:	4293      	cmp	r3, r2
 8013ca0:	d10d      	bne.n	8013cbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013ca2:	697b      	ldr	r3, [r7, #20]
 8013ca4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013ca8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013caa:	683b      	ldr	r3, [r7, #0]
 8013cac:	68db      	ldr	r3, [r3, #12]
 8013cae:	021b      	lsls	r3, r3, #8
 8013cb0:	697a      	ldr	r2, [r7, #20]
 8013cb2:	4313      	orrs	r3, r2
 8013cb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013cb6:	697b      	ldr	r3, [r7, #20]
 8013cb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013cbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	4a1d      	ldr	r2, [pc, #116]	; (8013d38 <TIM_OC3_SetConfig+0xfc>)
 8013cc2:	4293      	cmp	r3, r2
 8013cc4:	d00f      	beq.n	8013ce6 <TIM_OC3_SetConfig+0xaa>
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	4a1c      	ldr	r2, [pc, #112]	; (8013d3c <TIM_OC3_SetConfig+0x100>)
 8013cca:	4293      	cmp	r3, r2
 8013ccc:	d00b      	beq.n	8013ce6 <TIM_OC3_SetConfig+0xaa>
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	4a1b      	ldr	r2, [pc, #108]	; (8013d40 <TIM_OC3_SetConfig+0x104>)
 8013cd2:	4293      	cmp	r3, r2
 8013cd4:	d007      	beq.n	8013ce6 <TIM_OC3_SetConfig+0xaa>
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	4a1a      	ldr	r2, [pc, #104]	; (8013d44 <TIM_OC3_SetConfig+0x108>)
 8013cda:	4293      	cmp	r3, r2
 8013cdc:	d003      	beq.n	8013ce6 <TIM_OC3_SetConfig+0xaa>
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	4a19      	ldr	r2, [pc, #100]	; (8013d48 <TIM_OC3_SetConfig+0x10c>)
 8013ce2:	4293      	cmp	r3, r2
 8013ce4:	d113      	bne.n	8013d0e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013ce6:	693b      	ldr	r3, [r7, #16]
 8013ce8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013cee:	693b      	ldr	r3, [r7, #16]
 8013cf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013cf6:	683b      	ldr	r3, [r7, #0]
 8013cf8:	695b      	ldr	r3, [r3, #20]
 8013cfa:	011b      	lsls	r3, r3, #4
 8013cfc:	693a      	ldr	r2, [r7, #16]
 8013cfe:	4313      	orrs	r3, r2
 8013d00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013d02:	683b      	ldr	r3, [r7, #0]
 8013d04:	699b      	ldr	r3, [r3, #24]
 8013d06:	011b      	lsls	r3, r3, #4
 8013d08:	693a      	ldr	r2, [r7, #16]
 8013d0a:	4313      	orrs	r3, r2
 8013d0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	693a      	ldr	r2, [r7, #16]
 8013d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	68fa      	ldr	r2, [r7, #12]
 8013d18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013d1a:	683b      	ldr	r3, [r7, #0]
 8013d1c:	685a      	ldr	r2, [r3, #4]
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	697a      	ldr	r2, [r7, #20]
 8013d26:	621a      	str	r2, [r3, #32]
}
 8013d28:	bf00      	nop
 8013d2a:	371c      	adds	r7, #28
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d32:	4770      	bx	lr
 8013d34:	fffeff8f 	.word	0xfffeff8f
 8013d38:	40010000 	.word	0x40010000
 8013d3c:	40010400 	.word	0x40010400
 8013d40:	40014000 	.word	0x40014000
 8013d44:	40014400 	.word	0x40014400
 8013d48:	40014800 	.word	0x40014800

08013d4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013d4c:	b480      	push	{r7}
 8013d4e:	b087      	sub	sp, #28
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
 8013d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	6a1b      	ldr	r3, [r3, #32]
 8013d5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	6a1b      	ldr	r3, [r3, #32]
 8013d60:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	685b      	ldr	r3, [r3, #4]
 8013d6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	69db      	ldr	r3, [r3, #28]
 8013d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013d74:	68fa      	ldr	r2, [r7, #12]
 8013d76:	4b24      	ldr	r3, [pc, #144]	; (8013e08 <TIM_OC4_SetConfig+0xbc>)
 8013d78:	4013      	ands	r3, r2
 8013d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013d82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013d84:	683b      	ldr	r3, [r7, #0]
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	021b      	lsls	r3, r3, #8
 8013d8a:	68fa      	ldr	r2, [r7, #12]
 8013d8c:	4313      	orrs	r3, r2
 8013d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013d90:	693b      	ldr	r3, [r7, #16]
 8013d92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013d96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013d98:	683b      	ldr	r3, [r7, #0]
 8013d9a:	689b      	ldr	r3, [r3, #8]
 8013d9c:	031b      	lsls	r3, r3, #12
 8013d9e:	693a      	ldr	r2, [r7, #16]
 8013da0:	4313      	orrs	r3, r2
 8013da2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	4a19      	ldr	r2, [pc, #100]	; (8013e0c <TIM_OC4_SetConfig+0xc0>)
 8013da8:	4293      	cmp	r3, r2
 8013daa:	d00f      	beq.n	8013dcc <TIM_OC4_SetConfig+0x80>
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	4a18      	ldr	r2, [pc, #96]	; (8013e10 <TIM_OC4_SetConfig+0xc4>)
 8013db0:	4293      	cmp	r3, r2
 8013db2:	d00b      	beq.n	8013dcc <TIM_OC4_SetConfig+0x80>
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	4a17      	ldr	r2, [pc, #92]	; (8013e14 <TIM_OC4_SetConfig+0xc8>)
 8013db8:	4293      	cmp	r3, r2
 8013dba:	d007      	beq.n	8013dcc <TIM_OC4_SetConfig+0x80>
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	4a16      	ldr	r2, [pc, #88]	; (8013e18 <TIM_OC4_SetConfig+0xcc>)
 8013dc0:	4293      	cmp	r3, r2
 8013dc2:	d003      	beq.n	8013dcc <TIM_OC4_SetConfig+0x80>
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	4a15      	ldr	r2, [pc, #84]	; (8013e1c <TIM_OC4_SetConfig+0xd0>)
 8013dc8:	4293      	cmp	r3, r2
 8013dca:	d109      	bne.n	8013de0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013dcc:	697b      	ldr	r3, [r7, #20]
 8013dce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013dd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013dd4:	683b      	ldr	r3, [r7, #0]
 8013dd6:	695b      	ldr	r3, [r3, #20]
 8013dd8:	019b      	lsls	r3, r3, #6
 8013dda:	697a      	ldr	r2, [r7, #20]
 8013ddc:	4313      	orrs	r3, r2
 8013dde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	697a      	ldr	r2, [r7, #20]
 8013de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	68fa      	ldr	r2, [r7, #12]
 8013dea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013dec:	683b      	ldr	r3, [r7, #0]
 8013dee:	685a      	ldr	r2, [r3, #4]
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	693a      	ldr	r2, [r7, #16]
 8013df8:	621a      	str	r2, [r3, #32]
}
 8013dfa:	bf00      	nop
 8013dfc:	371c      	adds	r7, #28
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e04:	4770      	bx	lr
 8013e06:	bf00      	nop
 8013e08:	feff8fff 	.word	0xfeff8fff
 8013e0c:	40010000 	.word	0x40010000
 8013e10:	40010400 	.word	0x40010400
 8013e14:	40014000 	.word	0x40014000
 8013e18:	40014400 	.word	0x40014400
 8013e1c:	40014800 	.word	0x40014800

08013e20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013e20:	b480      	push	{r7}
 8013e22:	b087      	sub	sp, #28
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]
 8013e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	6a1b      	ldr	r3, [r3, #32]
 8013e2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	6a1b      	ldr	r3, [r3, #32]
 8013e34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	685b      	ldr	r3, [r3, #4]
 8013e40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013e48:	68fa      	ldr	r2, [r7, #12]
 8013e4a:	4b21      	ldr	r3, [pc, #132]	; (8013ed0 <TIM_OC5_SetConfig+0xb0>)
 8013e4c:	4013      	ands	r3, r2
 8013e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013e50:	683b      	ldr	r3, [r7, #0]
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	68fa      	ldr	r2, [r7, #12]
 8013e56:	4313      	orrs	r3, r2
 8013e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013e5a:	693b      	ldr	r3, [r7, #16]
 8013e5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8013e60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8013e62:	683b      	ldr	r3, [r7, #0]
 8013e64:	689b      	ldr	r3, [r3, #8]
 8013e66:	041b      	lsls	r3, r3, #16
 8013e68:	693a      	ldr	r2, [r7, #16]
 8013e6a:	4313      	orrs	r3, r2
 8013e6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	4a18      	ldr	r2, [pc, #96]	; (8013ed4 <TIM_OC5_SetConfig+0xb4>)
 8013e72:	4293      	cmp	r3, r2
 8013e74:	d00f      	beq.n	8013e96 <TIM_OC5_SetConfig+0x76>
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	4a17      	ldr	r2, [pc, #92]	; (8013ed8 <TIM_OC5_SetConfig+0xb8>)
 8013e7a:	4293      	cmp	r3, r2
 8013e7c:	d00b      	beq.n	8013e96 <TIM_OC5_SetConfig+0x76>
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	4a16      	ldr	r2, [pc, #88]	; (8013edc <TIM_OC5_SetConfig+0xbc>)
 8013e82:	4293      	cmp	r3, r2
 8013e84:	d007      	beq.n	8013e96 <TIM_OC5_SetConfig+0x76>
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	4a15      	ldr	r2, [pc, #84]	; (8013ee0 <TIM_OC5_SetConfig+0xc0>)
 8013e8a:	4293      	cmp	r3, r2
 8013e8c:	d003      	beq.n	8013e96 <TIM_OC5_SetConfig+0x76>
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	4a14      	ldr	r2, [pc, #80]	; (8013ee4 <TIM_OC5_SetConfig+0xc4>)
 8013e92:	4293      	cmp	r3, r2
 8013e94:	d109      	bne.n	8013eaa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8013e96:	697b      	ldr	r3, [r7, #20]
 8013e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013e9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8013e9e:	683b      	ldr	r3, [r7, #0]
 8013ea0:	695b      	ldr	r3, [r3, #20]
 8013ea2:	021b      	lsls	r3, r3, #8
 8013ea4:	697a      	ldr	r2, [r7, #20]
 8013ea6:	4313      	orrs	r3, r2
 8013ea8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	697a      	ldr	r2, [r7, #20]
 8013eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	68fa      	ldr	r2, [r7, #12]
 8013eb4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8013eb6:	683b      	ldr	r3, [r7, #0]
 8013eb8:	685a      	ldr	r2, [r3, #4]
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	693a      	ldr	r2, [r7, #16]
 8013ec2:	621a      	str	r2, [r3, #32]
}
 8013ec4:	bf00      	nop
 8013ec6:	371c      	adds	r7, #28
 8013ec8:	46bd      	mov	sp, r7
 8013eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ece:	4770      	bx	lr
 8013ed0:	fffeff8f 	.word	0xfffeff8f
 8013ed4:	40010000 	.word	0x40010000
 8013ed8:	40010400 	.word	0x40010400
 8013edc:	40014000 	.word	0x40014000
 8013ee0:	40014400 	.word	0x40014400
 8013ee4:	40014800 	.word	0x40014800

08013ee8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013ee8:	b480      	push	{r7}
 8013eea:	b087      	sub	sp, #28
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	6078      	str	r0, [r7, #4]
 8013ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	6a1b      	ldr	r3, [r3, #32]
 8013ef6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	6a1b      	ldr	r3, [r3, #32]
 8013efc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	685b      	ldr	r3, [r3, #4]
 8013f08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013f10:	68fa      	ldr	r2, [r7, #12]
 8013f12:	4b22      	ldr	r3, [pc, #136]	; (8013f9c <TIM_OC6_SetConfig+0xb4>)
 8013f14:	4013      	ands	r3, r2
 8013f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013f18:	683b      	ldr	r3, [r7, #0]
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	021b      	lsls	r3, r3, #8
 8013f1e:	68fa      	ldr	r2, [r7, #12]
 8013f20:	4313      	orrs	r3, r2
 8013f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013f24:	693b      	ldr	r3, [r7, #16]
 8013f26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013f2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013f2c:	683b      	ldr	r3, [r7, #0]
 8013f2e:	689b      	ldr	r3, [r3, #8]
 8013f30:	051b      	lsls	r3, r3, #20
 8013f32:	693a      	ldr	r2, [r7, #16]
 8013f34:	4313      	orrs	r3, r2
 8013f36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	4a19      	ldr	r2, [pc, #100]	; (8013fa0 <TIM_OC6_SetConfig+0xb8>)
 8013f3c:	4293      	cmp	r3, r2
 8013f3e:	d00f      	beq.n	8013f60 <TIM_OC6_SetConfig+0x78>
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	4a18      	ldr	r2, [pc, #96]	; (8013fa4 <TIM_OC6_SetConfig+0xbc>)
 8013f44:	4293      	cmp	r3, r2
 8013f46:	d00b      	beq.n	8013f60 <TIM_OC6_SetConfig+0x78>
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	4a17      	ldr	r2, [pc, #92]	; (8013fa8 <TIM_OC6_SetConfig+0xc0>)
 8013f4c:	4293      	cmp	r3, r2
 8013f4e:	d007      	beq.n	8013f60 <TIM_OC6_SetConfig+0x78>
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	4a16      	ldr	r2, [pc, #88]	; (8013fac <TIM_OC6_SetConfig+0xc4>)
 8013f54:	4293      	cmp	r3, r2
 8013f56:	d003      	beq.n	8013f60 <TIM_OC6_SetConfig+0x78>
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	4a15      	ldr	r2, [pc, #84]	; (8013fb0 <TIM_OC6_SetConfig+0xc8>)
 8013f5c:	4293      	cmp	r3, r2
 8013f5e:	d109      	bne.n	8013f74 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013f60:	697b      	ldr	r3, [r7, #20]
 8013f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013f66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013f68:	683b      	ldr	r3, [r7, #0]
 8013f6a:	695b      	ldr	r3, [r3, #20]
 8013f6c:	029b      	lsls	r3, r3, #10
 8013f6e:	697a      	ldr	r2, [r7, #20]
 8013f70:	4313      	orrs	r3, r2
 8013f72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	697a      	ldr	r2, [r7, #20]
 8013f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	68fa      	ldr	r2, [r7, #12]
 8013f7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013f80:	683b      	ldr	r3, [r7, #0]
 8013f82:	685a      	ldr	r2, [r3, #4]
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	693a      	ldr	r2, [r7, #16]
 8013f8c:	621a      	str	r2, [r3, #32]
}
 8013f8e:	bf00      	nop
 8013f90:	371c      	adds	r7, #28
 8013f92:	46bd      	mov	sp, r7
 8013f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f98:	4770      	bx	lr
 8013f9a:	bf00      	nop
 8013f9c:	feff8fff 	.word	0xfeff8fff
 8013fa0:	40010000 	.word	0x40010000
 8013fa4:	40010400 	.word	0x40010400
 8013fa8:	40014000 	.word	0x40014000
 8013fac:	40014400 	.word	0x40014400
 8013fb0:	40014800 	.word	0x40014800

08013fb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013fb4:	b480      	push	{r7}
 8013fb6:	b087      	sub	sp, #28
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	60f8      	str	r0, [r7, #12]
 8013fbc:	60b9      	str	r1, [r7, #8]
 8013fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	6a1b      	ldr	r3, [r3, #32]
 8013fc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	6a1b      	ldr	r3, [r3, #32]
 8013fca:	f023 0201 	bic.w	r2, r3, #1
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	699b      	ldr	r3, [r3, #24]
 8013fd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013fd8:	693b      	ldr	r3, [r7, #16]
 8013fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	011b      	lsls	r3, r3, #4
 8013fe4:	693a      	ldr	r2, [r7, #16]
 8013fe6:	4313      	orrs	r3, r2
 8013fe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013fea:	697b      	ldr	r3, [r7, #20]
 8013fec:	f023 030a 	bic.w	r3, r3, #10
 8013ff0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013ff2:	697a      	ldr	r2, [r7, #20]
 8013ff4:	68bb      	ldr	r3, [r7, #8]
 8013ff6:	4313      	orrs	r3, r2
 8013ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	693a      	ldr	r2, [r7, #16]
 8013ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	697a      	ldr	r2, [r7, #20]
 8014004:	621a      	str	r2, [r3, #32]
}
 8014006:	bf00      	nop
 8014008:	371c      	adds	r7, #28
 801400a:	46bd      	mov	sp, r7
 801400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014010:	4770      	bx	lr

08014012 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014012:	b480      	push	{r7}
 8014014:	b087      	sub	sp, #28
 8014016:	af00      	add	r7, sp, #0
 8014018:	60f8      	str	r0, [r7, #12]
 801401a:	60b9      	str	r1, [r7, #8]
 801401c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	6a1b      	ldr	r3, [r3, #32]
 8014022:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	6a1b      	ldr	r3, [r3, #32]
 8014028:	f023 0210 	bic.w	r2, r3, #16
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	699b      	ldr	r3, [r3, #24]
 8014034:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8014036:	693b      	ldr	r3, [r7, #16]
 8014038:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801403c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	031b      	lsls	r3, r3, #12
 8014042:	693a      	ldr	r2, [r7, #16]
 8014044:	4313      	orrs	r3, r2
 8014046:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014048:	697b      	ldr	r3, [r7, #20]
 801404a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801404e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8014050:	68bb      	ldr	r3, [r7, #8]
 8014052:	011b      	lsls	r3, r3, #4
 8014054:	697a      	ldr	r2, [r7, #20]
 8014056:	4313      	orrs	r3, r2
 8014058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	693a      	ldr	r2, [r7, #16]
 801405e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	697a      	ldr	r2, [r7, #20]
 8014064:	621a      	str	r2, [r3, #32]
}
 8014066:	bf00      	nop
 8014068:	371c      	adds	r7, #28
 801406a:	46bd      	mov	sp, r7
 801406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014070:	4770      	bx	lr
	...

08014074 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8014074:	b480      	push	{r7}
 8014076:	b085      	sub	sp, #20
 8014078:	af00      	add	r7, sp, #0
 801407a:	6078      	str	r0, [r7, #4]
 801407c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	689b      	ldr	r3, [r3, #8]
 8014082:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8014084:	68fa      	ldr	r2, [r7, #12]
 8014086:	4b09      	ldr	r3, [pc, #36]	; (80140ac <TIM_ITRx_SetConfig+0x38>)
 8014088:	4013      	ands	r3, r2
 801408a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801408c:	683a      	ldr	r2, [r7, #0]
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	4313      	orrs	r3, r2
 8014092:	f043 0307 	orr.w	r3, r3, #7
 8014096:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	68fa      	ldr	r2, [r7, #12]
 801409c:	609a      	str	r2, [r3, #8]
}
 801409e:	bf00      	nop
 80140a0:	3714      	adds	r7, #20
 80140a2:	46bd      	mov	sp, r7
 80140a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a8:	4770      	bx	lr
 80140aa:	bf00      	nop
 80140ac:	ffcfff8f 	.word	0xffcfff8f

080140b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80140b0:	b480      	push	{r7}
 80140b2:	b087      	sub	sp, #28
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	60f8      	str	r0, [r7, #12]
 80140b8:	60b9      	str	r1, [r7, #8]
 80140ba:	607a      	str	r2, [r7, #4]
 80140bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	689b      	ldr	r3, [r3, #8]
 80140c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80140c4:	697b      	ldr	r3, [r7, #20]
 80140c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80140ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80140cc:	683b      	ldr	r3, [r7, #0]
 80140ce:	021a      	lsls	r2, r3, #8
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	431a      	orrs	r2, r3
 80140d4:	68bb      	ldr	r3, [r7, #8]
 80140d6:	4313      	orrs	r3, r2
 80140d8:	697a      	ldr	r2, [r7, #20]
 80140da:	4313      	orrs	r3, r2
 80140dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	697a      	ldr	r2, [r7, #20]
 80140e2:	609a      	str	r2, [r3, #8]
}
 80140e4:	bf00      	nop
 80140e6:	371c      	adds	r7, #28
 80140e8:	46bd      	mov	sp, r7
 80140ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ee:	4770      	bx	lr

080140f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80140f0:	b480      	push	{r7}
 80140f2:	b087      	sub	sp, #28
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	60f8      	str	r0, [r7, #12]
 80140f8:	60b9      	str	r1, [r7, #8]
 80140fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80140fc:	68bb      	ldr	r3, [r7, #8]
 80140fe:	f003 031f 	and.w	r3, r3, #31
 8014102:	2201      	movs	r2, #1
 8014104:	fa02 f303 	lsl.w	r3, r2, r3
 8014108:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	6a1a      	ldr	r2, [r3, #32]
 801410e:	697b      	ldr	r3, [r7, #20]
 8014110:	43db      	mvns	r3, r3
 8014112:	401a      	ands	r2, r3
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	6a1a      	ldr	r2, [r3, #32]
 801411c:	68bb      	ldr	r3, [r7, #8]
 801411e:	f003 031f 	and.w	r3, r3, #31
 8014122:	6879      	ldr	r1, [r7, #4]
 8014124:	fa01 f303 	lsl.w	r3, r1, r3
 8014128:	431a      	orrs	r2, r3
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	621a      	str	r2, [r3, #32]
}
 801412e:	bf00      	nop
 8014130:	371c      	adds	r7, #28
 8014132:	46bd      	mov	sp, r7
 8014134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014138:	4770      	bx	lr
	...

0801413c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801413c:	b480      	push	{r7}
 801413e:	b085      	sub	sp, #20
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
 8014144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801414c:	2b01      	cmp	r3, #1
 801414e:	d101      	bne.n	8014154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014150:	2302      	movs	r3, #2
 8014152:	e06d      	b.n	8014230 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	2201      	movs	r2, #1
 8014158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	2202      	movs	r2, #2
 8014160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	685b      	ldr	r3, [r3, #4]
 801416a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	689b      	ldr	r3, [r3, #8]
 8014172:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	4a30      	ldr	r2, [pc, #192]	; (801423c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801417a:	4293      	cmp	r3, r2
 801417c:	d004      	beq.n	8014188 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	4a2f      	ldr	r2, [pc, #188]	; (8014240 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8014184:	4293      	cmp	r3, r2
 8014186:	d108      	bne.n	801419a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801418e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8014190:	683b      	ldr	r3, [r7, #0]
 8014192:	685b      	ldr	r3, [r3, #4]
 8014194:	68fa      	ldr	r2, [r7, #12]
 8014196:	4313      	orrs	r3, r2
 8014198:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80141a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80141a2:	683b      	ldr	r3, [r7, #0]
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	68fa      	ldr	r2, [r7, #12]
 80141a8:	4313      	orrs	r3, r2
 80141aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	68fa      	ldr	r2, [r7, #12]
 80141b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	4a20      	ldr	r2, [pc, #128]	; (801423c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80141ba:	4293      	cmp	r3, r2
 80141bc:	d022      	beq.n	8014204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80141c6:	d01d      	beq.n	8014204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	4a1d      	ldr	r2, [pc, #116]	; (8014244 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80141ce:	4293      	cmp	r3, r2
 80141d0:	d018      	beq.n	8014204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	4a1c      	ldr	r2, [pc, #112]	; (8014248 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80141d8:	4293      	cmp	r3, r2
 80141da:	d013      	beq.n	8014204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	4a1a      	ldr	r2, [pc, #104]	; (801424c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80141e2:	4293      	cmp	r3, r2
 80141e4:	d00e      	beq.n	8014204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	4a15      	ldr	r2, [pc, #84]	; (8014240 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80141ec:	4293      	cmp	r3, r2
 80141ee:	d009      	beq.n	8014204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	4a16      	ldr	r2, [pc, #88]	; (8014250 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80141f6:	4293      	cmp	r3, r2
 80141f8:	d004      	beq.n	8014204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	4a15      	ldr	r2, [pc, #84]	; (8014254 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8014200:	4293      	cmp	r3, r2
 8014202:	d10c      	bne.n	801421e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8014204:	68bb      	ldr	r3, [r7, #8]
 8014206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801420a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801420c:	683b      	ldr	r3, [r7, #0]
 801420e:	689b      	ldr	r3, [r3, #8]
 8014210:	68ba      	ldr	r2, [r7, #8]
 8014212:	4313      	orrs	r3, r2
 8014214:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	68ba      	ldr	r2, [r7, #8]
 801421c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	2201      	movs	r2, #1
 8014222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	2200      	movs	r2, #0
 801422a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801422e:	2300      	movs	r3, #0
}
 8014230:	4618      	mov	r0, r3
 8014232:	3714      	adds	r7, #20
 8014234:	46bd      	mov	sp, r7
 8014236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801423a:	4770      	bx	lr
 801423c:	40010000 	.word	0x40010000
 8014240:	40010400 	.word	0x40010400
 8014244:	40000400 	.word	0x40000400
 8014248:	40000800 	.word	0x40000800
 801424c:	40000c00 	.word	0x40000c00
 8014250:	40001800 	.word	0x40001800
 8014254:	40014000 	.word	0x40014000

08014258 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8014258:	b480      	push	{r7}
 801425a:	b085      	sub	sp, #20
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
 8014260:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8014262:	2300      	movs	r3, #0
 8014264:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801426c:	2b01      	cmp	r3, #1
 801426e:	d101      	bne.n	8014274 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8014270:	2302      	movs	r3, #2
 8014272:	e065      	b.n	8014340 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	2201      	movs	r2, #1
 8014278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8014282:	683b      	ldr	r3, [r7, #0]
 8014284:	68db      	ldr	r3, [r3, #12]
 8014286:	4313      	orrs	r3, r2
 8014288:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8014290:	683b      	ldr	r3, [r7, #0]
 8014292:	689b      	ldr	r3, [r3, #8]
 8014294:	4313      	orrs	r3, r2
 8014296:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801429e:	683b      	ldr	r3, [r7, #0]
 80142a0:	685b      	ldr	r3, [r3, #4]
 80142a2:	4313      	orrs	r3, r2
 80142a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80142ac:	683b      	ldr	r3, [r7, #0]
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	4313      	orrs	r3, r2
 80142b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80142ba:	683b      	ldr	r3, [r7, #0]
 80142bc:	691b      	ldr	r3, [r3, #16]
 80142be:	4313      	orrs	r3, r2
 80142c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80142c8:	683b      	ldr	r3, [r7, #0]
 80142ca:	695b      	ldr	r3, [r3, #20]
 80142cc:	4313      	orrs	r3, r2
 80142ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80142d6:	683b      	ldr	r3, [r7, #0]
 80142d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142da:	4313      	orrs	r3, r2
 80142dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80142e4:	683b      	ldr	r3, [r7, #0]
 80142e6:	699b      	ldr	r3, [r3, #24]
 80142e8:	041b      	lsls	r3, r3, #16
 80142ea:	4313      	orrs	r3, r2
 80142ec:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	4a16      	ldr	r2, [pc, #88]	; (801434c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80142f4:	4293      	cmp	r3, r2
 80142f6:	d004      	beq.n	8014302 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	4a14      	ldr	r2, [pc, #80]	; (8014350 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80142fe:	4293      	cmp	r3, r2
 8014300:	d115      	bne.n	801432e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8014308:	683b      	ldr	r3, [r7, #0]
 801430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801430c:	051b      	lsls	r3, r3, #20
 801430e:	4313      	orrs	r3, r2
 8014310:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8014318:	683b      	ldr	r3, [r7, #0]
 801431a:	69db      	ldr	r3, [r3, #28]
 801431c:	4313      	orrs	r3, r2
 801431e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8014326:	683b      	ldr	r3, [r7, #0]
 8014328:	6a1b      	ldr	r3, [r3, #32]
 801432a:	4313      	orrs	r3, r2
 801432c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	68fa      	ldr	r2, [r7, #12]
 8014334:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	2200      	movs	r2, #0
 801433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801433e:	2300      	movs	r3, #0
}
 8014340:	4618      	mov	r0, r3
 8014342:	3714      	adds	r7, #20
 8014344:	46bd      	mov	sp, r7
 8014346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801434a:	4770      	bx	lr
 801434c:	40010000 	.word	0x40010000
 8014350:	40010400 	.word	0x40010400

08014354 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014354:	b480      	push	{r7}
 8014356:	b083      	sub	sp, #12
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801435c:	bf00      	nop
 801435e:	370c      	adds	r7, #12
 8014360:	46bd      	mov	sp, r7
 8014362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014366:	4770      	bx	lr

08014368 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014368:	b480      	push	{r7}
 801436a:	b083      	sub	sp, #12
 801436c:	af00      	add	r7, sp, #0
 801436e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014370:	bf00      	nop
 8014372:	370c      	adds	r7, #12
 8014374:	46bd      	mov	sp, r7
 8014376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437a:	4770      	bx	lr

0801437c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801437c:	b480      	push	{r7}
 801437e:	b083      	sub	sp, #12
 8014380:	af00      	add	r7, sp, #0
 8014382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8014384:	bf00      	nop
 8014386:	370c      	adds	r7, #12
 8014388:	46bd      	mov	sp, r7
 801438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438e:	4770      	bx	lr

08014390 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b082      	sub	sp, #8
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d101      	bne.n	80143a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801439e:	2301      	movs	r3, #1
 80143a0:	e042      	b.n	8014428 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d106      	bne.n	80143ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	2200      	movs	r2, #0
 80143b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80143b4:	6878      	ldr	r0, [r7, #4]
 80143b6:	f7f1 f925 	bl	8005604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	2224      	movs	r2, #36	; 0x24
 80143be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	681a      	ldr	r2, [r3, #0]
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	f022 0201 	bic.w	r2, r2, #1
 80143d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d002      	beq.n	80143e0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80143da:	6878      	ldr	r0, [r7, #4]
 80143dc:	f001 fbc2 	bl	8015b64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80143e0:	6878      	ldr	r0, [r7, #4]
 80143e2:	f000 fe57 	bl	8015094 <UART_SetConfig>
 80143e6:	4603      	mov	r3, r0
 80143e8:	2b01      	cmp	r3, #1
 80143ea:	d101      	bne.n	80143f0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80143ec:	2301      	movs	r3, #1
 80143ee:	e01b      	b.n	8014428 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	685a      	ldr	r2, [r3, #4]
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80143fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	689a      	ldr	r2, [r3, #8]
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801440e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	681a      	ldr	r2, [r3, #0]
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	f042 0201 	orr.w	r2, r2, #1
 801441e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8014420:	6878      	ldr	r0, [r7, #4]
 8014422:	f001 fc41 	bl	8015ca8 <UART_CheckIdleState>
 8014426:	4603      	mov	r3, r0
}
 8014428:	4618      	mov	r0, r3
 801442a:	3708      	adds	r7, #8
 801442c:	46bd      	mov	sp, r7
 801442e:	bd80      	pop	{r7, pc}

08014430 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014430:	b580      	push	{r7, lr}
 8014432:	b08a      	sub	sp, #40	; 0x28
 8014434:	af02      	add	r7, sp, #8
 8014436:	60f8      	str	r0, [r7, #12]
 8014438:	60b9      	str	r1, [r7, #8]
 801443a:	603b      	str	r3, [r7, #0]
 801443c:	4613      	mov	r3, r2
 801443e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014446:	2b20      	cmp	r3, #32
 8014448:	d17b      	bne.n	8014542 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801444a:	68bb      	ldr	r3, [r7, #8]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d002      	beq.n	8014456 <HAL_UART_Transmit+0x26>
 8014450:	88fb      	ldrh	r3, [r7, #6]
 8014452:	2b00      	cmp	r3, #0
 8014454:	d101      	bne.n	801445a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8014456:	2301      	movs	r3, #1
 8014458:	e074      	b.n	8014544 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	2200      	movs	r2, #0
 801445e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	2221      	movs	r2, #33	; 0x21
 8014466:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801446a:	f7f1 fd7d 	bl	8005f68 <HAL_GetTick>
 801446e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	88fa      	ldrh	r2, [r7, #6]
 8014474:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	88fa      	ldrh	r2, [r7, #6]
 801447c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	689b      	ldr	r3, [r3, #8]
 8014484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014488:	d108      	bne.n	801449c <HAL_UART_Transmit+0x6c>
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	691b      	ldr	r3, [r3, #16]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d104      	bne.n	801449c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8014492:	2300      	movs	r3, #0
 8014494:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8014496:	68bb      	ldr	r3, [r7, #8]
 8014498:	61bb      	str	r3, [r7, #24]
 801449a:	e003      	b.n	80144a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801449c:	68bb      	ldr	r3, [r7, #8]
 801449e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80144a0:	2300      	movs	r3, #0
 80144a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80144a4:	e030      	b.n	8014508 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80144a6:	683b      	ldr	r3, [r7, #0]
 80144a8:	9300      	str	r3, [sp, #0]
 80144aa:	697b      	ldr	r3, [r7, #20]
 80144ac:	2200      	movs	r2, #0
 80144ae:	2180      	movs	r1, #128	; 0x80
 80144b0:	68f8      	ldr	r0, [r7, #12]
 80144b2:	f001 fca3 	bl	8015dfc <UART_WaitOnFlagUntilTimeout>
 80144b6:	4603      	mov	r3, r0
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d005      	beq.n	80144c8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	2220      	movs	r2, #32
 80144c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80144c4:	2303      	movs	r3, #3
 80144c6:	e03d      	b.n	8014544 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80144c8:	69fb      	ldr	r3, [r7, #28]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d10b      	bne.n	80144e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80144ce:	69bb      	ldr	r3, [r7, #24]
 80144d0:	881b      	ldrh	r3, [r3, #0]
 80144d2:	461a      	mov	r2, r3
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80144dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80144de:	69bb      	ldr	r3, [r7, #24]
 80144e0:	3302      	adds	r3, #2
 80144e2:	61bb      	str	r3, [r7, #24]
 80144e4:	e007      	b.n	80144f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80144e6:	69fb      	ldr	r3, [r7, #28]
 80144e8:	781a      	ldrb	r2, [r3, #0]
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80144f0:	69fb      	ldr	r3, [r7, #28]
 80144f2:	3301      	adds	r3, #1
 80144f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80144fc:	b29b      	uxth	r3, r3
 80144fe:	3b01      	subs	r3, #1
 8014500:	b29a      	uxth	r2, r3
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801450e:	b29b      	uxth	r3, r3
 8014510:	2b00      	cmp	r3, #0
 8014512:	d1c8      	bne.n	80144a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014514:	683b      	ldr	r3, [r7, #0]
 8014516:	9300      	str	r3, [sp, #0]
 8014518:	697b      	ldr	r3, [r7, #20]
 801451a:	2200      	movs	r2, #0
 801451c:	2140      	movs	r1, #64	; 0x40
 801451e:	68f8      	ldr	r0, [r7, #12]
 8014520:	f001 fc6c 	bl	8015dfc <UART_WaitOnFlagUntilTimeout>
 8014524:	4603      	mov	r3, r0
 8014526:	2b00      	cmp	r3, #0
 8014528:	d005      	beq.n	8014536 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	2220      	movs	r2, #32
 801452e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8014532:	2303      	movs	r3, #3
 8014534:	e006      	b.n	8014544 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	2220      	movs	r2, #32
 801453a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801453e:	2300      	movs	r3, #0
 8014540:	e000      	b.n	8014544 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8014542:	2302      	movs	r3, #2
  }
}
 8014544:	4618      	mov	r0, r3
 8014546:	3720      	adds	r7, #32
 8014548:	46bd      	mov	sp, r7
 801454a:	bd80      	pop	{r7, pc}

0801454c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b08a      	sub	sp, #40	; 0x28
 8014550:	af02      	add	r7, sp, #8
 8014552:	60f8      	str	r0, [r7, #12]
 8014554:	60b9      	str	r1, [r7, #8]
 8014556:	603b      	str	r3, [r7, #0]
 8014558:	4613      	mov	r3, r2
 801455a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014562:	2b20      	cmp	r3, #32
 8014564:	f040 80b5 	bne.w	80146d2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8014568:	68bb      	ldr	r3, [r7, #8]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d002      	beq.n	8014574 <HAL_UART_Receive+0x28>
 801456e:	88fb      	ldrh	r3, [r7, #6]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d101      	bne.n	8014578 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8014574:	2301      	movs	r3, #1
 8014576:	e0ad      	b.n	80146d4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	2200      	movs	r2, #0
 801457c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	2222      	movs	r2, #34	; 0x22
 8014584:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	2200      	movs	r2, #0
 801458c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801458e:	f7f1 fceb 	bl	8005f68 <HAL_GetTick>
 8014592:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	88fa      	ldrh	r2, [r7, #6]
 8014598:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	88fa      	ldrh	r2, [r7, #6]
 80145a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	689b      	ldr	r3, [r3, #8]
 80145a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80145ac:	d10e      	bne.n	80145cc <HAL_UART_Receive+0x80>
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	691b      	ldr	r3, [r3, #16]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d105      	bne.n	80145c2 <HAL_UART_Receive+0x76>
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80145bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80145c0:	e02d      	b.n	801461e <HAL_UART_Receive+0xd2>
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	22ff      	movs	r2, #255	; 0xff
 80145c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80145ca:	e028      	b.n	801461e <HAL_UART_Receive+0xd2>
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	689b      	ldr	r3, [r3, #8]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d10d      	bne.n	80145f0 <HAL_UART_Receive+0xa4>
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	691b      	ldr	r3, [r3, #16]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d104      	bne.n	80145e6 <HAL_UART_Receive+0x9a>
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	22ff      	movs	r2, #255	; 0xff
 80145e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80145e4:	e01b      	b.n	801461e <HAL_UART_Receive+0xd2>
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	227f      	movs	r2, #127	; 0x7f
 80145ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80145ee:	e016      	b.n	801461e <HAL_UART_Receive+0xd2>
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	689b      	ldr	r3, [r3, #8]
 80145f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80145f8:	d10d      	bne.n	8014616 <HAL_UART_Receive+0xca>
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	691b      	ldr	r3, [r3, #16]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d104      	bne.n	801460c <HAL_UART_Receive+0xc0>
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	227f      	movs	r2, #127	; 0x7f
 8014606:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801460a:	e008      	b.n	801461e <HAL_UART_Receive+0xd2>
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	223f      	movs	r2, #63	; 0x3f
 8014610:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014614:	e003      	b.n	801461e <HAL_UART_Receive+0xd2>
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	2200      	movs	r2, #0
 801461a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014624:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	689b      	ldr	r3, [r3, #8]
 801462a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801462e:	d108      	bne.n	8014642 <HAL_UART_Receive+0xf6>
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	691b      	ldr	r3, [r3, #16]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d104      	bne.n	8014642 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8014638:	2300      	movs	r3, #0
 801463a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801463c:	68bb      	ldr	r3, [r7, #8]
 801463e:	61bb      	str	r3, [r7, #24]
 8014640:	e003      	b.n	801464a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8014642:	68bb      	ldr	r3, [r7, #8]
 8014644:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014646:	2300      	movs	r3, #0
 8014648:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 801464a:	e036      	b.n	80146ba <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801464c:	683b      	ldr	r3, [r7, #0]
 801464e:	9300      	str	r3, [sp, #0]
 8014650:	697b      	ldr	r3, [r7, #20]
 8014652:	2200      	movs	r2, #0
 8014654:	2120      	movs	r1, #32
 8014656:	68f8      	ldr	r0, [r7, #12]
 8014658:	f001 fbd0 	bl	8015dfc <UART_WaitOnFlagUntilTimeout>
 801465c:	4603      	mov	r3, r0
 801465e:	2b00      	cmp	r3, #0
 8014660:	d005      	beq.n	801466e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	2220      	movs	r2, #32
 8014666:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 801466a:	2303      	movs	r3, #3
 801466c:	e032      	b.n	80146d4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 801466e:	69fb      	ldr	r3, [r7, #28]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d10c      	bne.n	801468e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801467a:	b29a      	uxth	r2, r3
 801467c:	8a7b      	ldrh	r3, [r7, #18]
 801467e:	4013      	ands	r3, r2
 8014680:	b29a      	uxth	r2, r3
 8014682:	69bb      	ldr	r3, [r7, #24]
 8014684:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8014686:	69bb      	ldr	r3, [r7, #24]
 8014688:	3302      	adds	r3, #2
 801468a:	61bb      	str	r3, [r7, #24]
 801468c:	e00c      	b.n	80146a8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014694:	b2da      	uxtb	r2, r3
 8014696:	8a7b      	ldrh	r3, [r7, #18]
 8014698:	b2db      	uxtb	r3, r3
 801469a:	4013      	ands	r3, r2
 801469c:	b2da      	uxtb	r2, r3
 801469e:	69fb      	ldr	r3, [r7, #28]
 80146a0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80146a2:	69fb      	ldr	r3, [r7, #28]
 80146a4:	3301      	adds	r3, #1
 80146a6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80146ae:	b29b      	uxth	r3, r3
 80146b0:	3b01      	subs	r3, #1
 80146b2:	b29a      	uxth	r2, r3
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80146c0:	b29b      	uxth	r3, r3
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d1c2      	bne.n	801464c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	2220      	movs	r2, #32
 80146ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80146ce:	2300      	movs	r3, #0
 80146d0:	e000      	b.n	80146d4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80146d2:	2302      	movs	r3, #2
  }
}
 80146d4:	4618      	mov	r0, r3
 80146d6:	3720      	adds	r7, #32
 80146d8:	46bd      	mov	sp, r7
 80146da:	bd80      	pop	{r7, pc}

080146dc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80146dc:	b580      	push	{r7, lr}
 80146de:	b08a      	sub	sp, #40	; 0x28
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	60f8      	str	r0, [r7, #12]
 80146e4:	60b9      	str	r1, [r7, #8]
 80146e6:	4613      	mov	r3, r2
 80146e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80146f0:	2b20      	cmp	r3, #32
 80146f2:	d137      	bne.n	8014764 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80146f4:	68bb      	ldr	r3, [r7, #8]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d002      	beq.n	8014700 <HAL_UART_Receive_IT+0x24>
 80146fa:	88fb      	ldrh	r3, [r7, #6]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d101      	bne.n	8014704 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8014700:	2301      	movs	r3, #1
 8014702:	e030      	b.n	8014766 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	2200      	movs	r2, #0
 8014708:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	4a18      	ldr	r2, [pc, #96]	; (8014770 <HAL_UART_Receive_IT+0x94>)
 8014710:	4293      	cmp	r3, r2
 8014712:	d01f      	beq.n	8014754 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	685b      	ldr	r3, [r3, #4]
 801471a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801471e:	2b00      	cmp	r3, #0
 8014720:	d018      	beq.n	8014754 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014728:	697b      	ldr	r3, [r7, #20]
 801472a:	e853 3f00 	ldrex	r3, [r3]
 801472e:	613b      	str	r3, [r7, #16]
   return(result);
 8014730:	693b      	ldr	r3, [r7, #16]
 8014732:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8014736:	627b      	str	r3, [r7, #36]	; 0x24
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	461a      	mov	r2, r3
 801473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014740:	623b      	str	r3, [r7, #32]
 8014742:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014744:	69f9      	ldr	r1, [r7, #28]
 8014746:	6a3a      	ldr	r2, [r7, #32]
 8014748:	e841 2300 	strex	r3, r2, [r1]
 801474c:	61bb      	str	r3, [r7, #24]
   return(result);
 801474e:	69bb      	ldr	r3, [r7, #24]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d1e6      	bne.n	8014722 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8014754:	88fb      	ldrh	r3, [r7, #6]
 8014756:	461a      	mov	r2, r3
 8014758:	68b9      	ldr	r1, [r7, #8]
 801475a:	68f8      	ldr	r0, [r7, #12]
 801475c:	f001 fbbc 	bl	8015ed8 <UART_Start_Receive_IT>
 8014760:	4603      	mov	r3, r0
 8014762:	e000      	b.n	8014766 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8014764:	2302      	movs	r3, #2
  }
}
 8014766:	4618      	mov	r0, r3
 8014768:	3728      	adds	r7, #40	; 0x28
 801476a:	46bd      	mov	sp, r7
 801476c:	bd80      	pop	{r7, pc}
 801476e:	bf00      	nop
 8014770:	58000c00 	.word	0x58000c00

08014774 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8014774:	b580      	push	{r7, lr}
 8014776:	b09a      	sub	sp, #104	; 0x68
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014784:	e853 3f00 	ldrex	r3, [r3]
 8014788:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801478a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801478c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014790:	667b      	str	r3, [r7, #100]	; 0x64
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	461a      	mov	r2, r3
 8014798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801479a:	657b      	str	r3, [r7, #84]	; 0x54
 801479c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801479e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80147a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80147a2:	e841 2300 	strex	r3, r2, [r1]
 80147a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80147a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d1e6      	bne.n	801477c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	3308      	adds	r3, #8
 80147b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147b8:	e853 3f00 	ldrex	r3, [r3]
 80147bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80147be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80147c0:	4b46      	ldr	r3, [pc, #280]	; (80148dc <HAL_UART_AbortReceive+0x168>)
 80147c2:	4013      	ands	r3, r2
 80147c4:	663b      	str	r3, [r7, #96]	; 0x60
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	3308      	adds	r3, #8
 80147cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80147ce:	643a      	str	r2, [r7, #64]	; 0x40
 80147d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80147d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80147d6:	e841 2300 	strex	r3, r2, [r1]
 80147da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80147dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d1e5      	bne.n	80147ae <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147e6:	2b01      	cmp	r3, #1
 80147e8:	d118      	bne.n	801481c <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147f0:	6a3b      	ldr	r3, [r7, #32]
 80147f2:	e853 3f00 	ldrex	r3, [r3]
 80147f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80147f8:	69fb      	ldr	r3, [r7, #28]
 80147fa:	f023 0310 	bic.w	r3, r3, #16
 80147fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	461a      	mov	r2, r3
 8014806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014808:	62fb      	str	r3, [r7, #44]	; 0x2c
 801480a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801480c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801480e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014810:	e841 2300 	strex	r3, r2, [r1]
 8014814:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014818:	2b00      	cmp	r3, #0
 801481a:	d1e6      	bne.n	80147ea <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	689b      	ldr	r3, [r3, #8]
 8014822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014826:	2b40      	cmp	r3, #64	; 0x40
 8014828:	d13b      	bne.n	80148a2 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	3308      	adds	r3, #8
 8014830:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	e853 3f00 	ldrex	r3, [r3]
 8014838:	60bb      	str	r3, [r7, #8]
   return(result);
 801483a:	68bb      	ldr	r3, [r7, #8]
 801483c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014840:	65bb      	str	r3, [r7, #88]	; 0x58
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	3308      	adds	r3, #8
 8014848:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801484a:	61ba      	str	r2, [r7, #24]
 801484c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801484e:	6979      	ldr	r1, [r7, #20]
 8014850:	69ba      	ldr	r2, [r7, #24]
 8014852:	e841 2300 	strex	r3, r2, [r1]
 8014856:	613b      	str	r3, [r7, #16]
   return(result);
 8014858:	693b      	ldr	r3, [r7, #16]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d1e5      	bne.n	801482a <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014864:	2b00      	cmp	r3, #0
 8014866:	d01c      	beq.n	80148a2 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801486e:	2200      	movs	r2, #0
 8014870:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014878:	4618      	mov	r0, r3
 801487a:	f7f4 fa63 	bl	8008d44 <HAL_DMA_Abort>
 801487e:	4603      	mov	r3, r0
 8014880:	2b00      	cmp	r3, #0
 8014882:	d00e      	beq.n	80148a2 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801488a:	4618      	mov	r0, r3
 801488c:	f7f5 fef6 	bl	800a67c <HAL_DMA_GetError>
 8014890:	4603      	mov	r3, r0
 8014892:	2b20      	cmp	r3, #32
 8014894:	d105      	bne.n	80148a2 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	2210      	movs	r2, #16
 801489a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 801489e:	2303      	movs	r3, #3
 80148a0:	e017      	b.n	80148d2 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	2200      	movs	r2, #0
 80148a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	220f      	movs	r2, #15
 80148b0:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	699a      	ldr	r2, [r3, #24]
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	f042 0208 	orr.w	r2, r2, #8
 80148c0:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	2220      	movs	r2, #32
 80148c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	2200      	movs	r2, #0
 80148ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80148d0:	2300      	movs	r3, #0
}
 80148d2:	4618      	mov	r0, r3
 80148d4:	3768      	adds	r7, #104	; 0x68
 80148d6:	46bd      	mov	sp, r7
 80148d8:	bd80      	pop	{r7, pc}
 80148da:	bf00      	nop
 80148dc:	effffffe 	.word	0xeffffffe

080148e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b0ba      	sub	sp, #232	; 0xe8
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	69db      	ldr	r3, [r3, #28]
 80148ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	689b      	ldr	r3, [r3, #8]
 8014902:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8014906:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801490a:	f640 030f 	movw	r3, #2063	; 0x80f
 801490e:	4013      	ands	r3, r2
 8014910:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8014914:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014918:	2b00      	cmp	r3, #0
 801491a:	d11b      	bne.n	8014954 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801491c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014920:	f003 0320 	and.w	r3, r3, #32
 8014924:	2b00      	cmp	r3, #0
 8014926:	d015      	beq.n	8014954 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801492c:	f003 0320 	and.w	r3, r3, #32
 8014930:	2b00      	cmp	r3, #0
 8014932:	d105      	bne.n	8014940 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8014934:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801493c:	2b00      	cmp	r3, #0
 801493e:	d009      	beq.n	8014954 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014944:	2b00      	cmp	r3, #0
 8014946:	f000 8377 	beq.w	8015038 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801494e:	6878      	ldr	r0, [r7, #4]
 8014950:	4798      	blx	r3
      }
      return;
 8014952:	e371      	b.n	8015038 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8014954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014958:	2b00      	cmp	r3, #0
 801495a:	f000 8123 	beq.w	8014ba4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801495e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014962:	4b8d      	ldr	r3, [pc, #564]	; (8014b98 <HAL_UART_IRQHandler+0x2b8>)
 8014964:	4013      	ands	r3, r2
 8014966:	2b00      	cmp	r3, #0
 8014968:	d106      	bne.n	8014978 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801496a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801496e:	4b8b      	ldr	r3, [pc, #556]	; (8014b9c <HAL_UART_IRQHandler+0x2bc>)
 8014970:	4013      	ands	r3, r2
 8014972:	2b00      	cmp	r3, #0
 8014974:	f000 8116 	beq.w	8014ba4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801497c:	f003 0301 	and.w	r3, r3, #1
 8014980:	2b00      	cmp	r3, #0
 8014982:	d011      	beq.n	80149a8 <HAL_UART_IRQHandler+0xc8>
 8014984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801498c:	2b00      	cmp	r3, #0
 801498e:	d00b      	beq.n	80149a8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	2201      	movs	r2, #1
 8014996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801499e:	f043 0201 	orr.w	r2, r3, #1
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80149a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80149ac:	f003 0302 	and.w	r3, r3, #2
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d011      	beq.n	80149d8 <HAL_UART_IRQHandler+0xf8>
 80149b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80149b8:	f003 0301 	and.w	r3, r3, #1
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d00b      	beq.n	80149d8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	2202      	movs	r2, #2
 80149c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80149ce:	f043 0204 	orr.w	r2, r3, #4
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80149d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80149dc:	f003 0304 	and.w	r3, r3, #4
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d011      	beq.n	8014a08 <HAL_UART_IRQHandler+0x128>
 80149e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80149e8:	f003 0301 	and.w	r3, r3, #1
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d00b      	beq.n	8014a08 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	2204      	movs	r2, #4
 80149f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80149fe:	f043 0202 	orr.w	r2, r3, #2
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8014a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014a0c:	f003 0308 	and.w	r3, r3, #8
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d017      	beq.n	8014a44 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014a18:	f003 0320 	and.w	r3, r3, #32
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d105      	bne.n	8014a2c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8014a20:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014a24:	4b5c      	ldr	r3, [pc, #368]	; (8014b98 <HAL_UART_IRQHandler+0x2b8>)
 8014a26:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d00b      	beq.n	8014a44 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	2208      	movs	r2, #8
 8014a32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014a3a:	f043 0208 	orr.w	r2, r3, #8
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8014a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d012      	beq.n	8014a76 <HAL_UART_IRQHandler+0x196>
 8014a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014a54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d00c      	beq.n	8014a76 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014a64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014a6c:	f043 0220 	orr.w	r2, r3, #32
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	f000 82dd 	beq.w	801503c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8014a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014a86:	f003 0320 	and.w	r3, r3, #32
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d013      	beq.n	8014ab6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014a92:	f003 0320 	and.w	r3, r3, #32
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d105      	bne.n	8014aa6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8014a9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d007      	beq.n	8014ab6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d003      	beq.n	8014ab6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ab2:	6878      	ldr	r0, [r7, #4]
 8014ab4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014abc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	689b      	ldr	r3, [r3, #8]
 8014ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014aca:	2b40      	cmp	r3, #64	; 0x40
 8014acc:	d005      	beq.n	8014ada <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8014ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014ad2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d054      	beq.n	8014b84 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8014ada:	6878      	ldr	r0, [r7, #4]
 8014adc:	f001 fb1e 	bl	801611c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	689b      	ldr	r3, [r3, #8]
 8014ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014aea:	2b40      	cmp	r3, #64	; 0x40
 8014aec:	d146      	bne.n	8014b7c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	3308      	adds	r3, #8
 8014af4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014afc:	e853 3f00 	ldrex	r3, [r3]
 8014b00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8014b04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	3308      	adds	r3, #8
 8014b16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8014b1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8014b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8014b26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014b2a:	e841 2300 	strex	r3, r2, [r1]
 8014b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8014b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d1d9      	bne.n	8014aee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d017      	beq.n	8014b74 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b4a:	4a15      	ldr	r2, [pc, #84]	; (8014ba0 <HAL_UART_IRQHandler+0x2c0>)
 8014b4c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b54:	4618      	mov	r0, r3
 8014b56:	f7f4 fc13 	bl	8009380 <HAL_DMA_Abort_IT>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d019      	beq.n	8014b94 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014b68:	687a      	ldr	r2, [r7, #4]
 8014b6a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8014b6e:	4610      	mov	r0, r2
 8014b70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014b72:	e00f      	b.n	8014b94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8014b74:	6878      	ldr	r0, [r7, #4]
 8014b76:	f000 fa77 	bl	8015068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014b7a:	e00b      	b.n	8014b94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014b7c:	6878      	ldr	r0, [r7, #4]
 8014b7e:	f000 fa73 	bl	8015068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014b82:	e007      	b.n	8014b94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8014b84:	6878      	ldr	r0, [r7, #4]
 8014b86:	f000 fa6f 	bl	8015068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	2200      	movs	r2, #0
 8014b8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8014b92:	e253      	b.n	801503c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014b94:	bf00      	nop
    return;
 8014b96:	e251      	b.n	801503c <HAL_UART_IRQHandler+0x75c>
 8014b98:	10000001 	.word	0x10000001
 8014b9c:	04000120 	.word	0x04000120
 8014ba0:	080161e9 	.word	0x080161e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ba8:	2b01      	cmp	r3, #1
 8014baa:	f040 81e7 	bne.w	8014f7c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8014bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014bb2:	f003 0310 	and.w	r3, r3, #16
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	f000 81e0 	beq.w	8014f7c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8014bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014bc0:	f003 0310 	and.w	r3, r3, #16
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	f000 81d9 	beq.w	8014f7c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	2210      	movs	r2, #16
 8014bd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	689b      	ldr	r3, [r3, #8]
 8014bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014bdc:	2b40      	cmp	r3, #64	; 0x40
 8014bde:	f040 8151 	bne.w	8014e84 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	4a96      	ldr	r2, [pc, #600]	; (8014e44 <HAL_UART_IRQHandler+0x564>)
 8014bec:	4293      	cmp	r3, r2
 8014bee:	d068      	beq.n	8014cc2 <HAL_UART_IRQHandler+0x3e2>
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	4a93      	ldr	r2, [pc, #588]	; (8014e48 <HAL_UART_IRQHandler+0x568>)
 8014bfa:	4293      	cmp	r3, r2
 8014bfc:	d061      	beq.n	8014cc2 <HAL_UART_IRQHandler+0x3e2>
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	4a91      	ldr	r2, [pc, #580]	; (8014e4c <HAL_UART_IRQHandler+0x56c>)
 8014c08:	4293      	cmp	r3, r2
 8014c0a:	d05a      	beq.n	8014cc2 <HAL_UART_IRQHandler+0x3e2>
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	4a8e      	ldr	r2, [pc, #568]	; (8014e50 <HAL_UART_IRQHandler+0x570>)
 8014c16:	4293      	cmp	r3, r2
 8014c18:	d053      	beq.n	8014cc2 <HAL_UART_IRQHandler+0x3e2>
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	4a8c      	ldr	r2, [pc, #560]	; (8014e54 <HAL_UART_IRQHandler+0x574>)
 8014c24:	4293      	cmp	r3, r2
 8014c26:	d04c      	beq.n	8014cc2 <HAL_UART_IRQHandler+0x3e2>
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	4a89      	ldr	r2, [pc, #548]	; (8014e58 <HAL_UART_IRQHandler+0x578>)
 8014c32:	4293      	cmp	r3, r2
 8014c34:	d045      	beq.n	8014cc2 <HAL_UART_IRQHandler+0x3e2>
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	4a87      	ldr	r2, [pc, #540]	; (8014e5c <HAL_UART_IRQHandler+0x57c>)
 8014c40:	4293      	cmp	r3, r2
 8014c42:	d03e      	beq.n	8014cc2 <HAL_UART_IRQHandler+0x3e2>
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	4a84      	ldr	r2, [pc, #528]	; (8014e60 <HAL_UART_IRQHandler+0x580>)
 8014c4e:	4293      	cmp	r3, r2
 8014c50:	d037      	beq.n	8014cc2 <HAL_UART_IRQHandler+0x3e2>
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	4a82      	ldr	r2, [pc, #520]	; (8014e64 <HAL_UART_IRQHandler+0x584>)
 8014c5c:	4293      	cmp	r3, r2
 8014c5e:	d030      	beq.n	8014cc2 <HAL_UART_IRQHandler+0x3e2>
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	4a7f      	ldr	r2, [pc, #508]	; (8014e68 <HAL_UART_IRQHandler+0x588>)
 8014c6a:	4293      	cmp	r3, r2
 8014c6c:	d029      	beq.n	8014cc2 <HAL_UART_IRQHandler+0x3e2>
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	4a7d      	ldr	r2, [pc, #500]	; (8014e6c <HAL_UART_IRQHandler+0x58c>)
 8014c78:	4293      	cmp	r3, r2
 8014c7a:	d022      	beq.n	8014cc2 <HAL_UART_IRQHandler+0x3e2>
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	4a7a      	ldr	r2, [pc, #488]	; (8014e70 <HAL_UART_IRQHandler+0x590>)
 8014c86:	4293      	cmp	r3, r2
 8014c88:	d01b      	beq.n	8014cc2 <HAL_UART_IRQHandler+0x3e2>
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	4a78      	ldr	r2, [pc, #480]	; (8014e74 <HAL_UART_IRQHandler+0x594>)
 8014c94:	4293      	cmp	r3, r2
 8014c96:	d014      	beq.n	8014cc2 <HAL_UART_IRQHandler+0x3e2>
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	4a75      	ldr	r2, [pc, #468]	; (8014e78 <HAL_UART_IRQHandler+0x598>)
 8014ca2:	4293      	cmp	r3, r2
 8014ca4:	d00d      	beq.n	8014cc2 <HAL_UART_IRQHandler+0x3e2>
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	4a73      	ldr	r2, [pc, #460]	; (8014e7c <HAL_UART_IRQHandler+0x59c>)
 8014cb0:	4293      	cmp	r3, r2
 8014cb2:	d006      	beq.n	8014cc2 <HAL_UART_IRQHandler+0x3e2>
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	4a70      	ldr	r2, [pc, #448]	; (8014e80 <HAL_UART_IRQHandler+0x5a0>)
 8014cbe:	4293      	cmp	r3, r2
 8014cc0:	d106      	bne.n	8014cd0 <HAL_UART_IRQHandler+0x3f0>
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	685b      	ldr	r3, [r3, #4]
 8014ccc:	b29b      	uxth	r3, r3
 8014cce:	e005      	b.n	8014cdc <HAL_UART_IRQHandler+0x3fc>
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	685b      	ldr	r3, [r3, #4]
 8014cda:	b29b      	uxth	r3, r3
 8014cdc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8014ce0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	f000 81ab 	beq.w	8015040 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014cf0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014cf4:	429a      	cmp	r2, r3
 8014cf6:	f080 81a3 	bcs.w	8015040 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014d00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014d0a:	69db      	ldr	r3, [r3, #28]
 8014d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014d10:	f000 8087 	beq.w	8014e22 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014d20:	e853 3f00 	ldrex	r3, [r3]
 8014d24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8014d28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014d30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	461a      	mov	r2, r3
 8014d3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014d3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014d42:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8014d4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014d4e:	e841 2300 	strex	r3, r2, [r1]
 8014d52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8014d56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d1da      	bne.n	8014d14 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	3308      	adds	r3, #8
 8014d64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014d68:	e853 3f00 	ldrex	r3, [r3]
 8014d6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8014d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014d70:	f023 0301 	bic.w	r3, r3, #1
 8014d74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	3308      	adds	r3, #8
 8014d7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8014d82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8014d86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8014d8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014d8e:	e841 2300 	strex	r3, r2, [r1]
 8014d92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8014d94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d1e1      	bne.n	8014d5e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	3308      	adds	r3, #8
 8014da0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014da2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014da4:	e853 3f00 	ldrex	r3, [r3]
 8014da8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8014daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014db0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	3308      	adds	r3, #8
 8014dba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014dbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8014dc0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014dc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8014dc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014dc6:	e841 2300 	strex	r3, r2, [r1]
 8014dca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8014dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d1e3      	bne.n	8014d9a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	2220      	movs	r2, #32
 8014dd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	2200      	movs	r2, #0
 8014dde:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014de8:	e853 3f00 	ldrex	r3, [r3]
 8014dec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014df0:	f023 0310 	bic.w	r3, r3, #16
 8014df4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	461a      	mov	r2, r3
 8014dfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014e02:	65bb      	str	r3, [r7, #88]	; 0x58
 8014e04:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014e08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014e0a:	e841 2300 	strex	r3, r2, [r1]
 8014e0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8014e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d1e4      	bne.n	8014de0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	f7f3 ff91 	bl	8008d44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	2202      	movs	r2, #2
 8014e26:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014e34:	b29b      	uxth	r3, r3
 8014e36:	1ad3      	subs	r3, r2, r3
 8014e38:	b29b      	uxth	r3, r3
 8014e3a:	4619      	mov	r1, r3
 8014e3c:	6878      	ldr	r0, [r7, #4]
 8014e3e:	f000 f91d 	bl	801507c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014e42:	e0fd      	b.n	8015040 <HAL_UART_IRQHandler+0x760>
 8014e44:	40020010 	.word	0x40020010
 8014e48:	40020028 	.word	0x40020028
 8014e4c:	40020040 	.word	0x40020040
 8014e50:	40020058 	.word	0x40020058
 8014e54:	40020070 	.word	0x40020070
 8014e58:	40020088 	.word	0x40020088
 8014e5c:	400200a0 	.word	0x400200a0
 8014e60:	400200b8 	.word	0x400200b8
 8014e64:	40020410 	.word	0x40020410
 8014e68:	40020428 	.word	0x40020428
 8014e6c:	40020440 	.word	0x40020440
 8014e70:	40020458 	.word	0x40020458
 8014e74:	40020470 	.word	0x40020470
 8014e78:	40020488 	.word	0x40020488
 8014e7c:	400204a0 	.word	0x400204a0
 8014e80:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014e90:	b29b      	uxth	r3, r3
 8014e92:	1ad3      	subs	r3, r2, r3
 8014e94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014e9e:	b29b      	uxth	r3, r3
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	f000 80cf 	beq.w	8015044 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8014ea6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	f000 80ca 	beq.w	8015044 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014eb8:	e853 3f00 	ldrex	r3, [r3]
 8014ebc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ec0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014ec4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	461a      	mov	r2, r3
 8014ece:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8014ed4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ed6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014ed8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014eda:	e841 2300 	strex	r3, r2, [r1]
 8014ede:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d1e4      	bne.n	8014eb0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	3308      	adds	r3, #8
 8014eec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ef0:	e853 3f00 	ldrex	r3, [r3]
 8014ef4:	623b      	str	r3, [r7, #32]
   return(result);
 8014ef6:	6a3a      	ldr	r2, [r7, #32]
 8014ef8:	4b55      	ldr	r3, [pc, #340]	; (8015050 <HAL_UART_IRQHandler+0x770>)
 8014efa:	4013      	ands	r3, r2
 8014efc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	3308      	adds	r3, #8
 8014f06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8014f0a:	633a      	str	r2, [r7, #48]	; 0x30
 8014f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014f12:	e841 2300 	strex	r3, r2, [r1]
 8014f16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d1e3      	bne.n	8014ee6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	2220      	movs	r2, #32
 8014f22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	2200      	movs	r2, #0
 8014f2a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	2200      	movs	r2, #0
 8014f30:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f38:	693b      	ldr	r3, [r7, #16]
 8014f3a:	e853 3f00 	ldrex	r3, [r3]
 8014f3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	f023 0310 	bic.w	r3, r3, #16
 8014f46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	461a      	mov	r2, r3
 8014f50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014f54:	61fb      	str	r3, [r7, #28]
 8014f56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f58:	69b9      	ldr	r1, [r7, #24]
 8014f5a:	69fa      	ldr	r2, [r7, #28]
 8014f5c:	e841 2300 	strex	r3, r2, [r1]
 8014f60:	617b      	str	r3, [r7, #20]
   return(result);
 8014f62:	697b      	ldr	r3, [r7, #20]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d1e4      	bne.n	8014f32 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	2202      	movs	r2, #2
 8014f6c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8014f6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014f72:	4619      	mov	r1, r3
 8014f74:	6878      	ldr	r0, [r7, #4]
 8014f76:	f000 f881 	bl	801507c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014f7a:	e063      	b.n	8015044 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014f80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d00e      	beq.n	8014fa6 <HAL_UART_IRQHandler+0x6c6>
 8014f88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014f8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d008      	beq.n	8014fa6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8014f9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8014f9e:	6878      	ldr	r0, [r7, #4]
 8014fa0:	f001 fe80 	bl	8016ca4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014fa4:	e051      	b.n	801504a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8014fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d014      	beq.n	8014fdc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8014fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d105      	bne.n	8014fca <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8014fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014fc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d008      	beq.n	8014fdc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d03a      	beq.n	8015048 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014fd6:	6878      	ldr	r0, [r7, #4]
 8014fd8:	4798      	blx	r3
    }
    return;
 8014fda:	e035      	b.n	8015048 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8014fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d009      	beq.n	8014ffc <HAL_UART_IRQHandler+0x71c>
 8014fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d003      	beq.n	8014ffc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8014ff4:	6878      	ldr	r0, [r7, #4]
 8014ff6:	f001 f90d 	bl	8016214 <UART_EndTransmit_IT>
    return;
 8014ffa:	e026      	b.n	801504a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8014ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015000:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015004:	2b00      	cmp	r3, #0
 8015006:	d009      	beq.n	801501c <HAL_UART_IRQHandler+0x73c>
 8015008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801500c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8015010:	2b00      	cmp	r3, #0
 8015012:	d003      	beq.n	801501c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8015014:	6878      	ldr	r0, [r7, #4]
 8015016:	f001 fe59 	bl	8016ccc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801501a:	e016      	b.n	801504a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801501c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015020:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015024:	2b00      	cmp	r3, #0
 8015026:	d010      	beq.n	801504a <HAL_UART_IRQHandler+0x76a>
 8015028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801502c:	2b00      	cmp	r3, #0
 801502e:	da0c      	bge.n	801504a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8015030:	6878      	ldr	r0, [r7, #4]
 8015032:	f001 fe41 	bl	8016cb8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8015036:	e008      	b.n	801504a <HAL_UART_IRQHandler+0x76a>
      return;
 8015038:	bf00      	nop
 801503a:	e006      	b.n	801504a <HAL_UART_IRQHandler+0x76a>
    return;
 801503c:	bf00      	nop
 801503e:	e004      	b.n	801504a <HAL_UART_IRQHandler+0x76a>
      return;
 8015040:	bf00      	nop
 8015042:	e002      	b.n	801504a <HAL_UART_IRQHandler+0x76a>
      return;
 8015044:	bf00      	nop
 8015046:	e000      	b.n	801504a <HAL_UART_IRQHandler+0x76a>
    return;
 8015048:	bf00      	nop
  }
}
 801504a:	37e8      	adds	r7, #232	; 0xe8
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}
 8015050:	effffffe 	.word	0xeffffffe

08015054 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8015054:	b480      	push	{r7}
 8015056:	b083      	sub	sp, #12
 8015058:	af00      	add	r7, sp, #0
 801505a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801505c:	bf00      	nop
 801505e:	370c      	adds	r7, #12
 8015060:	46bd      	mov	sp, r7
 8015062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015066:	4770      	bx	lr

08015068 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8015068:	b480      	push	{r7}
 801506a:	b083      	sub	sp, #12
 801506c:	af00      	add	r7, sp, #0
 801506e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8015070:	bf00      	nop
 8015072:	370c      	adds	r7, #12
 8015074:	46bd      	mov	sp, r7
 8015076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801507a:	4770      	bx	lr

0801507c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801507c:	b480      	push	{r7}
 801507e:	b083      	sub	sp, #12
 8015080:	af00      	add	r7, sp, #0
 8015082:	6078      	str	r0, [r7, #4]
 8015084:	460b      	mov	r3, r1
 8015086:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8015088:	bf00      	nop
 801508a:	370c      	adds	r7, #12
 801508c:	46bd      	mov	sp, r7
 801508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015092:	4770      	bx	lr

08015094 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015098:	b092      	sub	sp, #72	; 0x48
 801509a:	af00      	add	r7, sp, #0
 801509c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801509e:	2300      	movs	r3, #0
 80150a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80150a4:	697b      	ldr	r3, [r7, #20]
 80150a6:	689a      	ldr	r2, [r3, #8]
 80150a8:	697b      	ldr	r3, [r7, #20]
 80150aa:	691b      	ldr	r3, [r3, #16]
 80150ac:	431a      	orrs	r2, r3
 80150ae:	697b      	ldr	r3, [r7, #20]
 80150b0:	695b      	ldr	r3, [r3, #20]
 80150b2:	431a      	orrs	r2, r3
 80150b4:	697b      	ldr	r3, [r7, #20]
 80150b6:	69db      	ldr	r3, [r3, #28]
 80150b8:	4313      	orrs	r3, r2
 80150ba:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80150bc:	697b      	ldr	r3, [r7, #20]
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	681a      	ldr	r2, [r3, #0]
 80150c2:	4bbe      	ldr	r3, [pc, #760]	; (80153bc <UART_SetConfig+0x328>)
 80150c4:	4013      	ands	r3, r2
 80150c6:	697a      	ldr	r2, [r7, #20]
 80150c8:	6812      	ldr	r2, [r2, #0]
 80150ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80150cc:	430b      	orrs	r3, r1
 80150ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80150d0:	697b      	ldr	r3, [r7, #20]
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	685b      	ldr	r3, [r3, #4]
 80150d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80150da:	697b      	ldr	r3, [r7, #20]
 80150dc:	68da      	ldr	r2, [r3, #12]
 80150de:	697b      	ldr	r3, [r7, #20]
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	430a      	orrs	r2, r1
 80150e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80150e6:	697b      	ldr	r3, [r7, #20]
 80150e8:	699b      	ldr	r3, [r3, #24]
 80150ea:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80150ec:	697b      	ldr	r3, [r7, #20]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	4ab3      	ldr	r2, [pc, #716]	; (80153c0 <UART_SetConfig+0x32c>)
 80150f2:	4293      	cmp	r3, r2
 80150f4:	d004      	beq.n	8015100 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80150f6:	697b      	ldr	r3, [r7, #20]
 80150f8:	6a1b      	ldr	r3, [r3, #32]
 80150fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80150fc:	4313      	orrs	r3, r2
 80150fe:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015100:	697b      	ldr	r3, [r7, #20]
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	689a      	ldr	r2, [r3, #8]
 8015106:	4baf      	ldr	r3, [pc, #700]	; (80153c4 <UART_SetConfig+0x330>)
 8015108:	4013      	ands	r3, r2
 801510a:	697a      	ldr	r2, [r7, #20]
 801510c:	6812      	ldr	r2, [r2, #0]
 801510e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015110:	430b      	orrs	r3, r1
 8015112:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8015114:	697b      	ldr	r3, [r7, #20]
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801511a:	f023 010f 	bic.w	r1, r3, #15
 801511e:	697b      	ldr	r3, [r7, #20]
 8015120:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015122:	697b      	ldr	r3, [r7, #20]
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	430a      	orrs	r2, r1
 8015128:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801512a:	697b      	ldr	r3, [r7, #20]
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	4aa6      	ldr	r2, [pc, #664]	; (80153c8 <UART_SetConfig+0x334>)
 8015130:	4293      	cmp	r3, r2
 8015132:	d177      	bne.n	8015224 <UART_SetConfig+0x190>
 8015134:	4ba5      	ldr	r3, [pc, #660]	; (80153cc <UART_SetConfig+0x338>)
 8015136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015138:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801513c:	2b28      	cmp	r3, #40	; 0x28
 801513e:	d86d      	bhi.n	801521c <UART_SetConfig+0x188>
 8015140:	a201      	add	r2, pc, #4	; (adr r2, 8015148 <UART_SetConfig+0xb4>)
 8015142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015146:	bf00      	nop
 8015148:	080151ed 	.word	0x080151ed
 801514c:	0801521d 	.word	0x0801521d
 8015150:	0801521d 	.word	0x0801521d
 8015154:	0801521d 	.word	0x0801521d
 8015158:	0801521d 	.word	0x0801521d
 801515c:	0801521d 	.word	0x0801521d
 8015160:	0801521d 	.word	0x0801521d
 8015164:	0801521d 	.word	0x0801521d
 8015168:	080151f5 	.word	0x080151f5
 801516c:	0801521d 	.word	0x0801521d
 8015170:	0801521d 	.word	0x0801521d
 8015174:	0801521d 	.word	0x0801521d
 8015178:	0801521d 	.word	0x0801521d
 801517c:	0801521d 	.word	0x0801521d
 8015180:	0801521d 	.word	0x0801521d
 8015184:	0801521d 	.word	0x0801521d
 8015188:	080151fd 	.word	0x080151fd
 801518c:	0801521d 	.word	0x0801521d
 8015190:	0801521d 	.word	0x0801521d
 8015194:	0801521d 	.word	0x0801521d
 8015198:	0801521d 	.word	0x0801521d
 801519c:	0801521d 	.word	0x0801521d
 80151a0:	0801521d 	.word	0x0801521d
 80151a4:	0801521d 	.word	0x0801521d
 80151a8:	08015205 	.word	0x08015205
 80151ac:	0801521d 	.word	0x0801521d
 80151b0:	0801521d 	.word	0x0801521d
 80151b4:	0801521d 	.word	0x0801521d
 80151b8:	0801521d 	.word	0x0801521d
 80151bc:	0801521d 	.word	0x0801521d
 80151c0:	0801521d 	.word	0x0801521d
 80151c4:	0801521d 	.word	0x0801521d
 80151c8:	0801520d 	.word	0x0801520d
 80151cc:	0801521d 	.word	0x0801521d
 80151d0:	0801521d 	.word	0x0801521d
 80151d4:	0801521d 	.word	0x0801521d
 80151d8:	0801521d 	.word	0x0801521d
 80151dc:	0801521d 	.word	0x0801521d
 80151e0:	0801521d 	.word	0x0801521d
 80151e4:	0801521d 	.word	0x0801521d
 80151e8:	08015215 	.word	0x08015215
 80151ec:	2301      	movs	r3, #1
 80151ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151f2:	e222      	b.n	801563a <UART_SetConfig+0x5a6>
 80151f4:	2304      	movs	r3, #4
 80151f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151fa:	e21e      	b.n	801563a <UART_SetConfig+0x5a6>
 80151fc:	2308      	movs	r3, #8
 80151fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015202:	e21a      	b.n	801563a <UART_SetConfig+0x5a6>
 8015204:	2310      	movs	r3, #16
 8015206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801520a:	e216      	b.n	801563a <UART_SetConfig+0x5a6>
 801520c:	2320      	movs	r3, #32
 801520e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015212:	e212      	b.n	801563a <UART_SetConfig+0x5a6>
 8015214:	2340      	movs	r3, #64	; 0x40
 8015216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801521a:	e20e      	b.n	801563a <UART_SetConfig+0x5a6>
 801521c:	2380      	movs	r3, #128	; 0x80
 801521e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015222:	e20a      	b.n	801563a <UART_SetConfig+0x5a6>
 8015224:	697b      	ldr	r3, [r7, #20]
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	4a69      	ldr	r2, [pc, #420]	; (80153d0 <UART_SetConfig+0x33c>)
 801522a:	4293      	cmp	r3, r2
 801522c:	d130      	bne.n	8015290 <UART_SetConfig+0x1fc>
 801522e:	4b67      	ldr	r3, [pc, #412]	; (80153cc <UART_SetConfig+0x338>)
 8015230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015232:	f003 0307 	and.w	r3, r3, #7
 8015236:	2b05      	cmp	r3, #5
 8015238:	d826      	bhi.n	8015288 <UART_SetConfig+0x1f4>
 801523a:	a201      	add	r2, pc, #4	; (adr r2, 8015240 <UART_SetConfig+0x1ac>)
 801523c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015240:	08015259 	.word	0x08015259
 8015244:	08015261 	.word	0x08015261
 8015248:	08015269 	.word	0x08015269
 801524c:	08015271 	.word	0x08015271
 8015250:	08015279 	.word	0x08015279
 8015254:	08015281 	.word	0x08015281
 8015258:	2300      	movs	r3, #0
 801525a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801525e:	e1ec      	b.n	801563a <UART_SetConfig+0x5a6>
 8015260:	2304      	movs	r3, #4
 8015262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015266:	e1e8      	b.n	801563a <UART_SetConfig+0x5a6>
 8015268:	2308      	movs	r3, #8
 801526a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801526e:	e1e4      	b.n	801563a <UART_SetConfig+0x5a6>
 8015270:	2310      	movs	r3, #16
 8015272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015276:	e1e0      	b.n	801563a <UART_SetConfig+0x5a6>
 8015278:	2320      	movs	r3, #32
 801527a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801527e:	e1dc      	b.n	801563a <UART_SetConfig+0x5a6>
 8015280:	2340      	movs	r3, #64	; 0x40
 8015282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015286:	e1d8      	b.n	801563a <UART_SetConfig+0x5a6>
 8015288:	2380      	movs	r3, #128	; 0x80
 801528a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801528e:	e1d4      	b.n	801563a <UART_SetConfig+0x5a6>
 8015290:	697b      	ldr	r3, [r7, #20]
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	4a4f      	ldr	r2, [pc, #316]	; (80153d4 <UART_SetConfig+0x340>)
 8015296:	4293      	cmp	r3, r2
 8015298:	d130      	bne.n	80152fc <UART_SetConfig+0x268>
 801529a:	4b4c      	ldr	r3, [pc, #304]	; (80153cc <UART_SetConfig+0x338>)
 801529c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801529e:	f003 0307 	and.w	r3, r3, #7
 80152a2:	2b05      	cmp	r3, #5
 80152a4:	d826      	bhi.n	80152f4 <UART_SetConfig+0x260>
 80152a6:	a201      	add	r2, pc, #4	; (adr r2, 80152ac <UART_SetConfig+0x218>)
 80152a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152ac:	080152c5 	.word	0x080152c5
 80152b0:	080152cd 	.word	0x080152cd
 80152b4:	080152d5 	.word	0x080152d5
 80152b8:	080152dd 	.word	0x080152dd
 80152bc:	080152e5 	.word	0x080152e5
 80152c0:	080152ed 	.word	0x080152ed
 80152c4:	2300      	movs	r3, #0
 80152c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152ca:	e1b6      	b.n	801563a <UART_SetConfig+0x5a6>
 80152cc:	2304      	movs	r3, #4
 80152ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152d2:	e1b2      	b.n	801563a <UART_SetConfig+0x5a6>
 80152d4:	2308      	movs	r3, #8
 80152d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152da:	e1ae      	b.n	801563a <UART_SetConfig+0x5a6>
 80152dc:	2310      	movs	r3, #16
 80152de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152e2:	e1aa      	b.n	801563a <UART_SetConfig+0x5a6>
 80152e4:	2320      	movs	r3, #32
 80152e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152ea:	e1a6      	b.n	801563a <UART_SetConfig+0x5a6>
 80152ec:	2340      	movs	r3, #64	; 0x40
 80152ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152f2:	e1a2      	b.n	801563a <UART_SetConfig+0x5a6>
 80152f4:	2380      	movs	r3, #128	; 0x80
 80152f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152fa:	e19e      	b.n	801563a <UART_SetConfig+0x5a6>
 80152fc:	697b      	ldr	r3, [r7, #20]
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	4a35      	ldr	r2, [pc, #212]	; (80153d8 <UART_SetConfig+0x344>)
 8015302:	4293      	cmp	r3, r2
 8015304:	d130      	bne.n	8015368 <UART_SetConfig+0x2d4>
 8015306:	4b31      	ldr	r3, [pc, #196]	; (80153cc <UART_SetConfig+0x338>)
 8015308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801530a:	f003 0307 	and.w	r3, r3, #7
 801530e:	2b05      	cmp	r3, #5
 8015310:	d826      	bhi.n	8015360 <UART_SetConfig+0x2cc>
 8015312:	a201      	add	r2, pc, #4	; (adr r2, 8015318 <UART_SetConfig+0x284>)
 8015314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015318:	08015331 	.word	0x08015331
 801531c:	08015339 	.word	0x08015339
 8015320:	08015341 	.word	0x08015341
 8015324:	08015349 	.word	0x08015349
 8015328:	08015351 	.word	0x08015351
 801532c:	08015359 	.word	0x08015359
 8015330:	2300      	movs	r3, #0
 8015332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015336:	e180      	b.n	801563a <UART_SetConfig+0x5a6>
 8015338:	2304      	movs	r3, #4
 801533a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801533e:	e17c      	b.n	801563a <UART_SetConfig+0x5a6>
 8015340:	2308      	movs	r3, #8
 8015342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015346:	e178      	b.n	801563a <UART_SetConfig+0x5a6>
 8015348:	2310      	movs	r3, #16
 801534a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801534e:	e174      	b.n	801563a <UART_SetConfig+0x5a6>
 8015350:	2320      	movs	r3, #32
 8015352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015356:	e170      	b.n	801563a <UART_SetConfig+0x5a6>
 8015358:	2340      	movs	r3, #64	; 0x40
 801535a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801535e:	e16c      	b.n	801563a <UART_SetConfig+0x5a6>
 8015360:	2380      	movs	r3, #128	; 0x80
 8015362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015366:	e168      	b.n	801563a <UART_SetConfig+0x5a6>
 8015368:	697b      	ldr	r3, [r7, #20]
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	4a1b      	ldr	r2, [pc, #108]	; (80153dc <UART_SetConfig+0x348>)
 801536e:	4293      	cmp	r3, r2
 8015370:	d142      	bne.n	80153f8 <UART_SetConfig+0x364>
 8015372:	4b16      	ldr	r3, [pc, #88]	; (80153cc <UART_SetConfig+0x338>)
 8015374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015376:	f003 0307 	and.w	r3, r3, #7
 801537a:	2b05      	cmp	r3, #5
 801537c:	d838      	bhi.n	80153f0 <UART_SetConfig+0x35c>
 801537e:	a201      	add	r2, pc, #4	; (adr r2, 8015384 <UART_SetConfig+0x2f0>)
 8015380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015384:	0801539d 	.word	0x0801539d
 8015388:	080153a5 	.word	0x080153a5
 801538c:	080153ad 	.word	0x080153ad
 8015390:	080153b5 	.word	0x080153b5
 8015394:	080153e1 	.word	0x080153e1
 8015398:	080153e9 	.word	0x080153e9
 801539c:	2300      	movs	r3, #0
 801539e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153a2:	e14a      	b.n	801563a <UART_SetConfig+0x5a6>
 80153a4:	2304      	movs	r3, #4
 80153a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153aa:	e146      	b.n	801563a <UART_SetConfig+0x5a6>
 80153ac:	2308      	movs	r3, #8
 80153ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153b2:	e142      	b.n	801563a <UART_SetConfig+0x5a6>
 80153b4:	2310      	movs	r3, #16
 80153b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153ba:	e13e      	b.n	801563a <UART_SetConfig+0x5a6>
 80153bc:	cfff69f3 	.word	0xcfff69f3
 80153c0:	58000c00 	.word	0x58000c00
 80153c4:	11fff4ff 	.word	0x11fff4ff
 80153c8:	40011000 	.word	0x40011000
 80153cc:	58024400 	.word	0x58024400
 80153d0:	40004400 	.word	0x40004400
 80153d4:	40004800 	.word	0x40004800
 80153d8:	40004c00 	.word	0x40004c00
 80153dc:	40005000 	.word	0x40005000
 80153e0:	2320      	movs	r3, #32
 80153e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153e6:	e128      	b.n	801563a <UART_SetConfig+0x5a6>
 80153e8:	2340      	movs	r3, #64	; 0x40
 80153ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153ee:	e124      	b.n	801563a <UART_SetConfig+0x5a6>
 80153f0:	2380      	movs	r3, #128	; 0x80
 80153f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153f6:	e120      	b.n	801563a <UART_SetConfig+0x5a6>
 80153f8:	697b      	ldr	r3, [r7, #20]
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	4acb      	ldr	r2, [pc, #812]	; (801572c <UART_SetConfig+0x698>)
 80153fe:	4293      	cmp	r3, r2
 8015400:	d176      	bne.n	80154f0 <UART_SetConfig+0x45c>
 8015402:	4bcb      	ldr	r3, [pc, #812]	; (8015730 <UART_SetConfig+0x69c>)
 8015404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015406:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801540a:	2b28      	cmp	r3, #40	; 0x28
 801540c:	d86c      	bhi.n	80154e8 <UART_SetConfig+0x454>
 801540e:	a201      	add	r2, pc, #4	; (adr r2, 8015414 <UART_SetConfig+0x380>)
 8015410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015414:	080154b9 	.word	0x080154b9
 8015418:	080154e9 	.word	0x080154e9
 801541c:	080154e9 	.word	0x080154e9
 8015420:	080154e9 	.word	0x080154e9
 8015424:	080154e9 	.word	0x080154e9
 8015428:	080154e9 	.word	0x080154e9
 801542c:	080154e9 	.word	0x080154e9
 8015430:	080154e9 	.word	0x080154e9
 8015434:	080154c1 	.word	0x080154c1
 8015438:	080154e9 	.word	0x080154e9
 801543c:	080154e9 	.word	0x080154e9
 8015440:	080154e9 	.word	0x080154e9
 8015444:	080154e9 	.word	0x080154e9
 8015448:	080154e9 	.word	0x080154e9
 801544c:	080154e9 	.word	0x080154e9
 8015450:	080154e9 	.word	0x080154e9
 8015454:	080154c9 	.word	0x080154c9
 8015458:	080154e9 	.word	0x080154e9
 801545c:	080154e9 	.word	0x080154e9
 8015460:	080154e9 	.word	0x080154e9
 8015464:	080154e9 	.word	0x080154e9
 8015468:	080154e9 	.word	0x080154e9
 801546c:	080154e9 	.word	0x080154e9
 8015470:	080154e9 	.word	0x080154e9
 8015474:	080154d1 	.word	0x080154d1
 8015478:	080154e9 	.word	0x080154e9
 801547c:	080154e9 	.word	0x080154e9
 8015480:	080154e9 	.word	0x080154e9
 8015484:	080154e9 	.word	0x080154e9
 8015488:	080154e9 	.word	0x080154e9
 801548c:	080154e9 	.word	0x080154e9
 8015490:	080154e9 	.word	0x080154e9
 8015494:	080154d9 	.word	0x080154d9
 8015498:	080154e9 	.word	0x080154e9
 801549c:	080154e9 	.word	0x080154e9
 80154a0:	080154e9 	.word	0x080154e9
 80154a4:	080154e9 	.word	0x080154e9
 80154a8:	080154e9 	.word	0x080154e9
 80154ac:	080154e9 	.word	0x080154e9
 80154b0:	080154e9 	.word	0x080154e9
 80154b4:	080154e1 	.word	0x080154e1
 80154b8:	2301      	movs	r3, #1
 80154ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154be:	e0bc      	b.n	801563a <UART_SetConfig+0x5a6>
 80154c0:	2304      	movs	r3, #4
 80154c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154c6:	e0b8      	b.n	801563a <UART_SetConfig+0x5a6>
 80154c8:	2308      	movs	r3, #8
 80154ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154ce:	e0b4      	b.n	801563a <UART_SetConfig+0x5a6>
 80154d0:	2310      	movs	r3, #16
 80154d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154d6:	e0b0      	b.n	801563a <UART_SetConfig+0x5a6>
 80154d8:	2320      	movs	r3, #32
 80154da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154de:	e0ac      	b.n	801563a <UART_SetConfig+0x5a6>
 80154e0:	2340      	movs	r3, #64	; 0x40
 80154e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154e6:	e0a8      	b.n	801563a <UART_SetConfig+0x5a6>
 80154e8:	2380      	movs	r3, #128	; 0x80
 80154ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154ee:	e0a4      	b.n	801563a <UART_SetConfig+0x5a6>
 80154f0:	697b      	ldr	r3, [r7, #20]
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	4a8f      	ldr	r2, [pc, #572]	; (8015734 <UART_SetConfig+0x6a0>)
 80154f6:	4293      	cmp	r3, r2
 80154f8:	d130      	bne.n	801555c <UART_SetConfig+0x4c8>
 80154fa:	4b8d      	ldr	r3, [pc, #564]	; (8015730 <UART_SetConfig+0x69c>)
 80154fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80154fe:	f003 0307 	and.w	r3, r3, #7
 8015502:	2b05      	cmp	r3, #5
 8015504:	d826      	bhi.n	8015554 <UART_SetConfig+0x4c0>
 8015506:	a201      	add	r2, pc, #4	; (adr r2, 801550c <UART_SetConfig+0x478>)
 8015508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801550c:	08015525 	.word	0x08015525
 8015510:	0801552d 	.word	0x0801552d
 8015514:	08015535 	.word	0x08015535
 8015518:	0801553d 	.word	0x0801553d
 801551c:	08015545 	.word	0x08015545
 8015520:	0801554d 	.word	0x0801554d
 8015524:	2300      	movs	r3, #0
 8015526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801552a:	e086      	b.n	801563a <UART_SetConfig+0x5a6>
 801552c:	2304      	movs	r3, #4
 801552e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015532:	e082      	b.n	801563a <UART_SetConfig+0x5a6>
 8015534:	2308      	movs	r3, #8
 8015536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801553a:	e07e      	b.n	801563a <UART_SetConfig+0x5a6>
 801553c:	2310      	movs	r3, #16
 801553e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015542:	e07a      	b.n	801563a <UART_SetConfig+0x5a6>
 8015544:	2320      	movs	r3, #32
 8015546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801554a:	e076      	b.n	801563a <UART_SetConfig+0x5a6>
 801554c:	2340      	movs	r3, #64	; 0x40
 801554e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015552:	e072      	b.n	801563a <UART_SetConfig+0x5a6>
 8015554:	2380      	movs	r3, #128	; 0x80
 8015556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801555a:	e06e      	b.n	801563a <UART_SetConfig+0x5a6>
 801555c:	697b      	ldr	r3, [r7, #20]
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	4a75      	ldr	r2, [pc, #468]	; (8015738 <UART_SetConfig+0x6a4>)
 8015562:	4293      	cmp	r3, r2
 8015564:	d130      	bne.n	80155c8 <UART_SetConfig+0x534>
 8015566:	4b72      	ldr	r3, [pc, #456]	; (8015730 <UART_SetConfig+0x69c>)
 8015568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801556a:	f003 0307 	and.w	r3, r3, #7
 801556e:	2b05      	cmp	r3, #5
 8015570:	d826      	bhi.n	80155c0 <UART_SetConfig+0x52c>
 8015572:	a201      	add	r2, pc, #4	; (adr r2, 8015578 <UART_SetConfig+0x4e4>)
 8015574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015578:	08015591 	.word	0x08015591
 801557c:	08015599 	.word	0x08015599
 8015580:	080155a1 	.word	0x080155a1
 8015584:	080155a9 	.word	0x080155a9
 8015588:	080155b1 	.word	0x080155b1
 801558c:	080155b9 	.word	0x080155b9
 8015590:	2300      	movs	r3, #0
 8015592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015596:	e050      	b.n	801563a <UART_SetConfig+0x5a6>
 8015598:	2304      	movs	r3, #4
 801559a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801559e:	e04c      	b.n	801563a <UART_SetConfig+0x5a6>
 80155a0:	2308      	movs	r3, #8
 80155a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155a6:	e048      	b.n	801563a <UART_SetConfig+0x5a6>
 80155a8:	2310      	movs	r3, #16
 80155aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155ae:	e044      	b.n	801563a <UART_SetConfig+0x5a6>
 80155b0:	2320      	movs	r3, #32
 80155b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155b6:	e040      	b.n	801563a <UART_SetConfig+0x5a6>
 80155b8:	2340      	movs	r3, #64	; 0x40
 80155ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155be:	e03c      	b.n	801563a <UART_SetConfig+0x5a6>
 80155c0:	2380      	movs	r3, #128	; 0x80
 80155c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155c6:	e038      	b.n	801563a <UART_SetConfig+0x5a6>
 80155c8:	697b      	ldr	r3, [r7, #20]
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	4a5b      	ldr	r2, [pc, #364]	; (801573c <UART_SetConfig+0x6a8>)
 80155ce:	4293      	cmp	r3, r2
 80155d0:	d130      	bne.n	8015634 <UART_SetConfig+0x5a0>
 80155d2:	4b57      	ldr	r3, [pc, #348]	; (8015730 <UART_SetConfig+0x69c>)
 80155d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80155d6:	f003 0307 	and.w	r3, r3, #7
 80155da:	2b05      	cmp	r3, #5
 80155dc:	d826      	bhi.n	801562c <UART_SetConfig+0x598>
 80155de:	a201      	add	r2, pc, #4	; (adr r2, 80155e4 <UART_SetConfig+0x550>)
 80155e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155e4:	080155fd 	.word	0x080155fd
 80155e8:	08015605 	.word	0x08015605
 80155ec:	0801560d 	.word	0x0801560d
 80155f0:	08015615 	.word	0x08015615
 80155f4:	0801561d 	.word	0x0801561d
 80155f8:	08015625 	.word	0x08015625
 80155fc:	2302      	movs	r3, #2
 80155fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015602:	e01a      	b.n	801563a <UART_SetConfig+0x5a6>
 8015604:	2304      	movs	r3, #4
 8015606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801560a:	e016      	b.n	801563a <UART_SetConfig+0x5a6>
 801560c:	2308      	movs	r3, #8
 801560e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015612:	e012      	b.n	801563a <UART_SetConfig+0x5a6>
 8015614:	2310      	movs	r3, #16
 8015616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801561a:	e00e      	b.n	801563a <UART_SetConfig+0x5a6>
 801561c:	2320      	movs	r3, #32
 801561e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015622:	e00a      	b.n	801563a <UART_SetConfig+0x5a6>
 8015624:	2340      	movs	r3, #64	; 0x40
 8015626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801562a:	e006      	b.n	801563a <UART_SetConfig+0x5a6>
 801562c:	2380      	movs	r3, #128	; 0x80
 801562e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015632:	e002      	b.n	801563a <UART_SetConfig+0x5a6>
 8015634:	2380      	movs	r3, #128	; 0x80
 8015636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801563a:	697b      	ldr	r3, [r7, #20]
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	4a3f      	ldr	r2, [pc, #252]	; (801573c <UART_SetConfig+0x6a8>)
 8015640:	4293      	cmp	r3, r2
 8015642:	f040 80f8 	bne.w	8015836 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8015646:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801564a:	2b20      	cmp	r3, #32
 801564c:	dc46      	bgt.n	80156dc <UART_SetConfig+0x648>
 801564e:	2b02      	cmp	r3, #2
 8015650:	f2c0 8082 	blt.w	8015758 <UART_SetConfig+0x6c4>
 8015654:	3b02      	subs	r3, #2
 8015656:	2b1e      	cmp	r3, #30
 8015658:	d87e      	bhi.n	8015758 <UART_SetConfig+0x6c4>
 801565a:	a201      	add	r2, pc, #4	; (adr r2, 8015660 <UART_SetConfig+0x5cc>)
 801565c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015660:	080156e3 	.word	0x080156e3
 8015664:	08015759 	.word	0x08015759
 8015668:	080156eb 	.word	0x080156eb
 801566c:	08015759 	.word	0x08015759
 8015670:	08015759 	.word	0x08015759
 8015674:	08015759 	.word	0x08015759
 8015678:	080156fb 	.word	0x080156fb
 801567c:	08015759 	.word	0x08015759
 8015680:	08015759 	.word	0x08015759
 8015684:	08015759 	.word	0x08015759
 8015688:	08015759 	.word	0x08015759
 801568c:	08015759 	.word	0x08015759
 8015690:	08015759 	.word	0x08015759
 8015694:	08015759 	.word	0x08015759
 8015698:	0801570b 	.word	0x0801570b
 801569c:	08015759 	.word	0x08015759
 80156a0:	08015759 	.word	0x08015759
 80156a4:	08015759 	.word	0x08015759
 80156a8:	08015759 	.word	0x08015759
 80156ac:	08015759 	.word	0x08015759
 80156b0:	08015759 	.word	0x08015759
 80156b4:	08015759 	.word	0x08015759
 80156b8:	08015759 	.word	0x08015759
 80156bc:	08015759 	.word	0x08015759
 80156c0:	08015759 	.word	0x08015759
 80156c4:	08015759 	.word	0x08015759
 80156c8:	08015759 	.word	0x08015759
 80156cc:	08015759 	.word	0x08015759
 80156d0:	08015759 	.word	0x08015759
 80156d4:	08015759 	.word	0x08015759
 80156d8:	0801574b 	.word	0x0801574b
 80156dc:	2b40      	cmp	r3, #64	; 0x40
 80156de:	d037      	beq.n	8015750 <UART_SetConfig+0x6bc>
 80156e0:	e03a      	b.n	8015758 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80156e2:	f7fb fc17 	bl	8010f14 <HAL_RCCEx_GetD3PCLK1Freq>
 80156e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80156e8:	e03c      	b.n	8015764 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80156ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80156ee:	4618      	mov	r0, r3
 80156f0:	f7fb fc26 	bl	8010f40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80156f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80156f8:	e034      	b.n	8015764 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80156fa:	f107 0318 	add.w	r3, r7, #24
 80156fe:	4618      	mov	r0, r3
 8015700:	f7fb fd72 	bl	80111e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015704:	69fb      	ldr	r3, [r7, #28]
 8015706:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015708:	e02c      	b.n	8015764 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801570a:	4b09      	ldr	r3, [pc, #36]	; (8015730 <UART_SetConfig+0x69c>)
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	f003 0320 	and.w	r3, r3, #32
 8015712:	2b00      	cmp	r3, #0
 8015714:	d016      	beq.n	8015744 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015716:	4b06      	ldr	r3, [pc, #24]	; (8015730 <UART_SetConfig+0x69c>)
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	08db      	lsrs	r3, r3, #3
 801571c:	f003 0303 	and.w	r3, r3, #3
 8015720:	4a07      	ldr	r2, [pc, #28]	; (8015740 <UART_SetConfig+0x6ac>)
 8015722:	fa22 f303 	lsr.w	r3, r2, r3
 8015726:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015728:	e01c      	b.n	8015764 <UART_SetConfig+0x6d0>
 801572a:	bf00      	nop
 801572c:	40011400 	.word	0x40011400
 8015730:	58024400 	.word	0x58024400
 8015734:	40007800 	.word	0x40007800
 8015738:	40007c00 	.word	0x40007c00
 801573c:	58000c00 	.word	0x58000c00
 8015740:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8015744:	4b9d      	ldr	r3, [pc, #628]	; (80159bc <UART_SetConfig+0x928>)
 8015746:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015748:	e00c      	b.n	8015764 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801574a:	4b9d      	ldr	r3, [pc, #628]	; (80159c0 <UART_SetConfig+0x92c>)
 801574c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801574e:	e009      	b.n	8015764 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015750:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015754:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015756:	e005      	b.n	8015764 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8015758:	2300      	movs	r3, #0
 801575a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801575c:	2301      	movs	r3, #1
 801575e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015762:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8015764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015766:	2b00      	cmp	r3, #0
 8015768:	f000 81de 	beq.w	8015b28 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801576c:	697b      	ldr	r3, [r7, #20]
 801576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015770:	4a94      	ldr	r2, [pc, #592]	; (80159c4 <UART_SetConfig+0x930>)
 8015772:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015776:	461a      	mov	r2, r3
 8015778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801577a:	fbb3 f3f2 	udiv	r3, r3, r2
 801577e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015780:	697b      	ldr	r3, [r7, #20]
 8015782:	685a      	ldr	r2, [r3, #4]
 8015784:	4613      	mov	r3, r2
 8015786:	005b      	lsls	r3, r3, #1
 8015788:	4413      	add	r3, r2
 801578a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801578c:	429a      	cmp	r2, r3
 801578e:	d305      	bcc.n	801579c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8015790:	697b      	ldr	r3, [r7, #20]
 8015792:	685b      	ldr	r3, [r3, #4]
 8015794:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015798:	429a      	cmp	r2, r3
 801579a:	d903      	bls.n	80157a4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 801579c:	2301      	movs	r3, #1
 801579e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80157a2:	e1c1      	b.n	8015b28 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80157a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157a6:	2200      	movs	r2, #0
 80157a8:	60bb      	str	r3, [r7, #8]
 80157aa:	60fa      	str	r2, [r7, #12]
 80157ac:	697b      	ldr	r3, [r7, #20]
 80157ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157b0:	4a84      	ldr	r2, [pc, #528]	; (80159c4 <UART_SetConfig+0x930>)
 80157b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80157b6:	b29b      	uxth	r3, r3
 80157b8:	2200      	movs	r2, #0
 80157ba:	603b      	str	r3, [r7, #0]
 80157bc:	607a      	str	r2, [r7, #4]
 80157be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80157c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80157c6:	f7ea fd8b 	bl	80002e0 <__aeabi_uldivmod>
 80157ca:	4602      	mov	r2, r0
 80157cc:	460b      	mov	r3, r1
 80157ce:	4610      	mov	r0, r2
 80157d0:	4619      	mov	r1, r3
 80157d2:	f04f 0200 	mov.w	r2, #0
 80157d6:	f04f 0300 	mov.w	r3, #0
 80157da:	020b      	lsls	r3, r1, #8
 80157dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80157e0:	0202      	lsls	r2, r0, #8
 80157e2:	6979      	ldr	r1, [r7, #20]
 80157e4:	6849      	ldr	r1, [r1, #4]
 80157e6:	0849      	lsrs	r1, r1, #1
 80157e8:	2000      	movs	r0, #0
 80157ea:	460c      	mov	r4, r1
 80157ec:	4605      	mov	r5, r0
 80157ee:	eb12 0804 	adds.w	r8, r2, r4
 80157f2:	eb43 0905 	adc.w	r9, r3, r5
 80157f6:	697b      	ldr	r3, [r7, #20]
 80157f8:	685b      	ldr	r3, [r3, #4]
 80157fa:	2200      	movs	r2, #0
 80157fc:	469a      	mov	sl, r3
 80157fe:	4693      	mov	fp, r2
 8015800:	4652      	mov	r2, sl
 8015802:	465b      	mov	r3, fp
 8015804:	4640      	mov	r0, r8
 8015806:	4649      	mov	r1, r9
 8015808:	f7ea fd6a 	bl	80002e0 <__aeabi_uldivmod>
 801580c:	4602      	mov	r2, r0
 801580e:	460b      	mov	r3, r1
 8015810:	4613      	mov	r3, r2
 8015812:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015816:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801581a:	d308      	bcc.n	801582e <UART_SetConfig+0x79a>
 801581c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801581e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015822:	d204      	bcs.n	801582e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8015824:	697b      	ldr	r3, [r7, #20]
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801582a:	60da      	str	r2, [r3, #12]
 801582c:	e17c      	b.n	8015b28 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801582e:	2301      	movs	r3, #1
 8015830:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015834:	e178      	b.n	8015b28 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015836:	697b      	ldr	r3, [r7, #20]
 8015838:	69db      	ldr	r3, [r3, #28]
 801583a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801583e:	f040 80c5 	bne.w	80159cc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8015842:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015846:	2b20      	cmp	r3, #32
 8015848:	dc48      	bgt.n	80158dc <UART_SetConfig+0x848>
 801584a:	2b00      	cmp	r3, #0
 801584c:	db7b      	blt.n	8015946 <UART_SetConfig+0x8b2>
 801584e:	2b20      	cmp	r3, #32
 8015850:	d879      	bhi.n	8015946 <UART_SetConfig+0x8b2>
 8015852:	a201      	add	r2, pc, #4	; (adr r2, 8015858 <UART_SetConfig+0x7c4>)
 8015854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015858:	080158e3 	.word	0x080158e3
 801585c:	080158eb 	.word	0x080158eb
 8015860:	08015947 	.word	0x08015947
 8015864:	08015947 	.word	0x08015947
 8015868:	080158f3 	.word	0x080158f3
 801586c:	08015947 	.word	0x08015947
 8015870:	08015947 	.word	0x08015947
 8015874:	08015947 	.word	0x08015947
 8015878:	08015903 	.word	0x08015903
 801587c:	08015947 	.word	0x08015947
 8015880:	08015947 	.word	0x08015947
 8015884:	08015947 	.word	0x08015947
 8015888:	08015947 	.word	0x08015947
 801588c:	08015947 	.word	0x08015947
 8015890:	08015947 	.word	0x08015947
 8015894:	08015947 	.word	0x08015947
 8015898:	08015913 	.word	0x08015913
 801589c:	08015947 	.word	0x08015947
 80158a0:	08015947 	.word	0x08015947
 80158a4:	08015947 	.word	0x08015947
 80158a8:	08015947 	.word	0x08015947
 80158ac:	08015947 	.word	0x08015947
 80158b0:	08015947 	.word	0x08015947
 80158b4:	08015947 	.word	0x08015947
 80158b8:	08015947 	.word	0x08015947
 80158bc:	08015947 	.word	0x08015947
 80158c0:	08015947 	.word	0x08015947
 80158c4:	08015947 	.word	0x08015947
 80158c8:	08015947 	.word	0x08015947
 80158cc:	08015947 	.word	0x08015947
 80158d0:	08015947 	.word	0x08015947
 80158d4:	08015947 	.word	0x08015947
 80158d8:	08015939 	.word	0x08015939
 80158dc:	2b40      	cmp	r3, #64	; 0x40
 80158de:	d02e      	beq.n	801593e <UART_SetConfig+0x8aa>
 80158e0:	e031      	b.n	8015946 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80158e2:	f7f9 fb1f 	bl	800ef24 <HAL_RCC_GetPCLK1Freq>
 80158e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80158e8:	e033      	b.n	8015952 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80158ea:	f7f9 fb31 	bl	800ef50 <HAL_RCC_GetPCLK2Freq>
 80158ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80158f0:	e02f      	b.n	8015952 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80158f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80158f6:	4618      	mov	r0, r3
 80158f8:	f7fb fb22 	bl	8010f40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80158fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015900:	e027      	b.n	8015952 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015902:	f107 0318 	add.w	r3, r7, #24
 8015906:	4618      	mov	r0, r3
 8015908:	f7fb fc6e 	bl	80111e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801590c:	69fb      	ldr	r3, [r7, #28]
 801590e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015910:	e01f      	b.n	8015952 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015912:	4b2d      	ldr	r3, [pc, #180]	; (80159c8 <UART_SetConfig+0x934>)
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	f003 0320 	and.w	r3, r3, #32
 801591a:	2b00      	cmp	r3, #0
 801591c:	d009      	beq.n	8015932 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801591e:	4b2a      	ldr	r3, [pc, #168]	; (80159c8 <UART_SetConfig+0x934>)
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	08db      	lsrs	r3, r3, #3
 8015924:	f003 0303 	and.w	r3, r3, #3
 8015928:	4a24      	ldr	r2, [pc, #144]	; (80159bc <UART_SetConfig+0x928>)
 801592a:	fa22 f303 	lsr.w	r3, r2, r3
 801592e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015930:	e00f      	b.n	8015952 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8015932:	4b22      	ldr	r3, [pc, #136]	; (80159bc <UART_SetConfig+0x928>)
 8015934:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015936:	e00c      	b.n	8015952 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015938:	4b21      	ldr	r3, [pc, #132]	; (80159c0 <UART_SetConfig+0x92c>)
 801593a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801593c:	e009      	b.n	8015952 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801593e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015942:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015944:	e005      	b.n	8015952 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8015946:	2300      	movs	r3, #0
 8015948:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801594a:	2301      	movs	r3, #1
 801594c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015950:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8015952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015954:	2b00      	cmp	r3, #0
 8015956:	f000 80e7 	beq.w	8015b28 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801595a:	697b      	ldr	r3, [r7, #20]
 801595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801595e:	4a19      	ldr	r2, [pc, #100]	; (80159c4 <UART_SetConfig+0x930>)
 8015960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015964:	461a      	mov	r2, r3
 8015966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015968:	fbb3 f3f2 	udiv	r3, r3, r2
 801596c:	005a      	lsls	r2, r3, #1
 801596e:	697b      	ldr	r3, [r7, #20]
 8015970:	685b      	ldr	r3, [r3, #4]
 8015972:	085b      	lsrs	r3, r3, #1
 8015974:	441a      	add	r2, r3
 8015976:	697b      	ldr	r3, [r7, #20]
 8015978:	685b      	ldr	r3, [r3, #4]
 801597a:	fbb2 f3f3 	udiv	r3, r2, r3
 801597e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015982:	2b0f      	cmp	r3, #15
 8015984:	d916      	bls.n	80159b4 <UART_SetConfig+0x920>
 8015986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801598c:	d212      	bcs.n	80159b4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801598e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015990:	b29b      	uxth	r3, r3
 8015992:	f023 030f 	bic.w	r3, r3, #15
 8015996:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801599a:	085b      	lsrs	r3, r3, #1
 801599c:	b29b      	uxth	r3, r3
 801599e:	f003 0307 	and.w	r3, r3, #7
 80159a2:	b29a      	uxth	r2, r3
 80159a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80159a6:	4313      	orrs	r3, r2
 80159a8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80159aa:	697b      	ldr	r3, [r7, #20]
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80159b0:	60da      	str	r2, [r3, #12]
 80159b2:	e0b9      	b.n	8015b28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80159b4:	2301      	movs	r3, #1
 80159b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80159ba:	e0b5      	b.n	8015b28 <UART_SetConfig+0xa94>
 80159bc:	03d09000 	.word	0x03d09000
 80159c0:	003d0900 	.word	0x003d0900
 80159c4:	0801b53c 	.word	0x0801b53c
 80159c8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80159cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80159d0:	2b20      	cmp	r3, #32
 80159d2:	dc49      	bgt.n	8015a68 <UART_SetConfig+0x9d4>
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	db7c      	blt.n	8015ad2 <UART_SetConfig+0xa3e>
 80159d8:	2b20      	cmp	r3, #32
 80159da:	d87a      	bhi.n	8015ad2 <UART_SetConfig+0xa3e>
 80159dc:	a201      	add	r2, pc, #4	; (adr r2, 80159e4 <UART_SetConfig+0x950>)
 80159de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159e2:	bf00      	nop
 80159e4:	08015a6f 	.word	0x08015a6f
 80159e8:	08015a77 	.word	0x08015a77
 80159ec:	08015ad3 	.word	0x08015ad3
 80159f0:	08015ad3 	.word	0x08015ad3
 80159f4:	08015a7f 	.word	0x08015a7f
 80159f8:	08015ad3 	.word	0x08015ad3
 80159fc:	08015ad3 	.word	0x08015ad3
 8015a00:	08015ad3 	.word	0x08015ad3
 8015a04:	08015a8f 	.word	0x08015a8f
 8015a08:	08015ad3 	.word	0x08015ad3
 8015a0c:	08015ad3 	.word	0x08015ad3
 8015a10:	08015ad3 	.word	0x08015ad3
 8015a14:	08015ad3 	.word	0x08015ad3
 8015a18:	08015ad3 	.word	0x08015ad3
 8015a1c:	08015ad3 	.word	0x08015ad3
 8015a20:	08015ad3 	.word	0x08015ad3
 8015a24:	08015a9f 	.word	0x08015a9f
 8015a28:	08015ad3 	.word	0x08015ad3
 8015a2c:	08015ad3 	.word	0x08015ad3
 8015a30:	08015ad3 	.word	0x08015ad3
 8015a34:	08015ad3 	.word	0x08015ad3
 8015a38:	08015ad3 	.word	0x08015ad3
 8015a3c:	08015ad3 	.word	0x08015ad3
 8015a40:	08015ad3 	.word	0x08015ad3
 8015a44:	08015ad3 	.word	0x08015ad3
 8015a48:	08015ad3 	.word	0x08015ad3
 8015a4c:	08015ad3 	.word	0x08015ad3
 8015a50:	08015ad3 	.word	0x08015ad3
 8015a54:	08015ad3 	.word	0x08015ad3
 8015a58:	08015ad3 	.word	0x08015ad3
 8015a5c:	08015ad3 	.word	0x08015ad3
 8015a60:	08015ad3 	.word	0x08015ad3
 8015a64:	08015ac5 	.word	0x08015ac5
 8015a68:	2b40      	cmp	r3, #64	; 0x40
 8015a6a:	d02e      	beq.n	8015aca <UART_SetConfig+0xa36>
 8015a6c:	e031      	b.n	8015ad2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015a6e:	f7f9 fa59 	bl	800ef24 <HAL_RCC_GetPCLK1Freq>
 8015a72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015a74:	e033      	b.n	8015ade <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015a76:	f7f9 fa6b 	bl	800ef50 <HAL_RCC_GetPCLK2Freq>
 8015a7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015a7c:	e02f      	b.n	8015ade <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015a82:	4618      	mov	r0, r3
 8015a84:	f7fb fa5c 	bl	8010f40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015a8c:	e027      	b.n	8015ade <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015a8e:	f107 0318 	add.w	r3, r7, #24
 8015a92:	4618      	mov	r0, r3
 8015a94:	f7fb fba8 	bl	80111e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015a98:	69fb      	ldr	r3, [r7, #28]
 8015a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015a9c:	e01f      	b.n	8015ade <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015a9e:	4b2d      	ldr	r3, [pc, #180]	; (8015b54 <UART_SetConfig+0xac0>)
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	f003 0320 	and.w	r3, r3, #32
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d009      	beq.n	8015abe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015aaa:	4b2a      	ldr	r3, [pc, #168]	; (8015b54 <UART_SetConfig+0xac0>)
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	08db      	lsrs	r3, r3, #3
 8015ab0:	f003 0303 	and.w	r3, r3, #3
 8015ab4:	4a28      	ldr	r2, [pc, #160]	; (8015b58 <UART_SetConfig+0xac4>)
 8015ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8015aba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015abc:	e00f      	b.n	8015ade <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8015abe:	4b26      	ldr	r3, [pc, #152]	; (8015b58 <UART_SetConfig+0xac4>)
 8015ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015ac2:	e00c      	b.n	8015ade <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015ac4:	4b25      	ldr	r3, [pc, #148]	; (8015b5c <UART_SetConfig+0xac8>)
 8015ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015ac8:	e009      	b.n	8015ade <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015ace:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015ad0:	e005      	b.n	8015ade <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8015ad2:	2300      	movs	r3, #0
 8015ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015ad6:	2301      	movs	r3, #1
 8015ad8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015adc:	bf00      	nop
    }

    if (pclk != 0U)
 8015ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d021      	beq.n	8015b28 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015ae4:	697b      	ldr	r3, [r7, #20]
 8015ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ae8:	4a1d      	ldr	r2, [pc, #116]	; (8015b60 <UART_SetConfig+0xacc>)
 8015aea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015aee:	461a      	mov	r2, r3
 8015af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015af2:	fbb3 f2f2 	udiv	r2, r3, r2
 8015af6:	697b      	ldr	r3, [r7, #20]
 8015af8:	685b      	ldr	r3, [r3, #4]
 8015afa:	085b      	lsrs	r3, r3, #1
 8015afc:	441a      	add	r2, r3
 8015afe:	697b      	ldr	r3, [r7, #20]
 8015b00:	685b      	ldr	r3, [r3, #4]
 8015b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8015b06:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b0a:	2b0f      	cmp	r3, #15
 8015b0c:	d909      	bls.n	8015b22 <UART_SetConfig+0xa8e>
 8015b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015b14:	d205      	bcs.n	8015b22 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8015b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b18:	b29a      	uxth	r2, r3
 8015b1a:	697b      	ldr	r3, [r7, #20]
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	60da      	str	r2, [r3, #12]
 8015b20:	e002      	b.n	8015b28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8015b22:	2301      	movs	r3, #1
 8015b24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8015b28:	697b      	ldr	r3, [r7, #20]
 8015b2a:	2201      	movs	r2, #1
 8015b2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8015b30:	697b      	ldr	r3, [r7, #20]
 8015b32:	2201      	movs	r2, #1
 8015b34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015b38:	697b      	ldr	r3, [r7, #20]
 8015b3a:	2200      	movs	r2, #0
 8015b3c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8015b3e:	697b      	ldr	r3, [r7, #20]
 8015b40:	2200      	movs	r2, #0
 8015b42:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8015b44:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8015b48:	4618      	mov	r0, r3
 8015b4a:	3748      	adds	r7, #72	; 0x48
 8015b4c:	46bd      	mov	sp, r7
 8015b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015b52:	bf00      	nop
 8015b54:	58024400 	.word	0x58024400
 8015b58:	03d09000 	.word	0x03d09000
 8015b5c:	003d0900 	.word	0x003d0900
 8015b60:	0801b53c 	.word	0x0801b53c

08015b64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015b64:	b480      	push	{r7}
 8015b66:	b083      	sub	sp, #12
 8015b68:	af00      	add	r7, sp, #0
 8015b6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b70:	f003 0308 	and.w	r3, r3, #8
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d00a      	beq.n	8015b8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	685b      	ldr	r3, [r3, #4]
 8015b7e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	430a      	orrs	r2, r1
 8015b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b92:	f003 0301 	and.w	r3, r3, #1
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d00a      	beq.n	8015bb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	685b      	ldr	r3, [r3, #4]
 8015ba0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	430a      	orrs	r2, r1
 8015bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bb4:	f003 0302 	and.w	r3, r3, #2
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d00a      	beq.n	8015bd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	685b      	ldr	r3, [r3, #4]
 8015bc2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	430a      	orrs	r2, r1
 8015bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bd6:	f003 0304 	and.w	r3, r3, #4
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d00a      	beq.n	8015bf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	685b      	ldr	r3, [r3, #4]
 8015be4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	430a      	orrs	r2, r1
 8015bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bf8:	f003 0310 	and.w	r3, r3, #16
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d00a      	beq.n	8015c16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	689b      	ldr	r3, [r3, #8]
 8015c06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	430a      	orrs	r2, r1
 8015c14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c1a:	f003 0320 	and.w	r3, r3, #32
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d00a      	beq.n	8015c38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	689b      	ldr	r3, [r3, #8]
 8015c28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	430a      	orrs	r2, r1
 8015c36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d01a      	beq.n	8015c7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	685b      	ldr	r3, [r3, #4]
 8015c4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	430a      	orrs	r2, r1
 8015c58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015c62:	d10a      	bne.n	8015c7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	685b      	ldr	r3, [r3, #4]
 8015c6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	430a      	orrs	r2, r1
 8015c78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d00a      	beq.n	8015c9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	685b      	ldr	r3, [r3, #4]
 8015c8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	430a      	orrs	r2, r1
 8015c9a:	605a      	str	r2, [r3, #4]
  }
}
 8015c9c:	bf00      	nop
 8015c9e:	370c      	adds	r7, #12
 8015ca0:	46bd      	mov	sp, r7
 8015ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca6:	4770      	bx	lr

08015ca8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015ca8:	b580      	push	{r7, lr}
 8015caa:	b098      	sub	sp, #96	; 0x60
 8015cac:	af02      	add	r7, sp, #8
 8015cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	2200      	movs	r2, #0
 8015cb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015cb8:	f7f0 f956 	bl	8005f68 <HAL_GetTick>
 8015cbc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	681b      	ldr	r3, [r3, #0]
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	f003 0308 	and.w	r3, r3, #8
 8015cc8:	2b08      	cmp	r3, #8
 8015cca:	d12f      	bne.n	8015d2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015ccc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015cd0:	9300      	str	r3, [sp, #0]
 8015cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015cd4:	2200      	movs	r2, #0
 8015cd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015cda:	6878      	ldr	r0, [r7, #4]
 8015cdc:	f000 f88e 	bl	8015dfc <UART_WaitOnFlagUntilTimeout>
 8015ce0:	4603      	mov	r3, r0
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d022      	beq.n	8015d2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cee:	e853 3f00 	ldrex	r3, [r3]
 8015cf2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015cf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015cfa:	653b      	str	r3, [r7, #80]	; 0x50
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	461a      	mov	r2, r3
 8015d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d04:	647b      	str	r3, [r7, #68]	; 0x44
 8015d06:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015d0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015d0c:	e841 2300 	strex	r3, r2, [r1]
 8015d10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d1e6      	bne.n	8015ce6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	2220      	movs	r2, #32
 8015d1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	2200      	movs	r2, #0
 8015d24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015d28:	2303      	movs	r3, #3
 8015d2a:	e063      	b.n	8015df4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	f003 0304 	and.w	r3, r3, #4
 8015d36:	2b04      	cmp	r3, #4
 8015d38:	d149      	bne.n	8015dce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015d3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015d3e:	9300      	str	r3, [sp, #0]
 8015d40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015d42:	2200      	movs	r2, #0
 8015d44:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8015d48:	6878      	ldr	r0, [r7, #4]
 8015d4a:	f000 f857 	bl	8015dfc <UART_WaitOnFlagUntilTimeout>
 8015d4e:	4603      	mov	r3, r0
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d03c      	beq.n	8015dce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d5c:	e853 3f00 	ldrex	r3, [r3]
 8015d60:	623b      	str	r3, [r7, #32]
   return(result);
 8015d62:	6a3b      	ldr	r3, [r7, #32]
 8015d64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015d68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	461a      	mov	r2, r3
 8015d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d72:	633b      	str	r3, [r7, #48]	; 0x30
 8015d74:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d7a:	e841 2300 	strex	r3, r2, [r1]
 8015d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d1e6      	bne.n	8015d54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	3308      	adds	r3, #8
 8015d8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d8e:	693b      	ldr	r3, [r7, #16]
 8015d90:	e853 3f00 	ldrex	r3, [r3]
 8015d94:	60fb      	str	r3, [r7, #12]
   return(result);
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	f023 0301 	bic.w	r3, r3, #1
 8015d9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	3308      	adds	r3, #8
 8015da4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015da6:	61fa      	str	r2, [r7, #28]
 8015da8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015daa:	69b9      	ldr	r1, [r7, #24]
 8015dac:	69fa      	ldr	r2, [r7, #28]
 8015dae:	e841 2300 	strex	r3, r2, [r1]
 8015db2:	617b      	str	r3, [r7, #20]
   return(result);
 8015db4:	697b      	ldr	r3, [r7, #20]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d1e5      	bne.n	8015d86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	2220      	movs	r2, #32
 8015dbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	2200      	movs	r2, #0
 8015dc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015dca:	2303      	movs	r3, #3
 8015dcc:	e012      	b.n	8015df4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	2220      	movs	r2, #32
 8015dd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	2220      	movs	r2, #32
 8015dda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	2200      	movs	r2, #0
 8015de2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	2200      	movs	r2, #0
 8015de8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	2200      	movs	r2, #0
 8015dee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015df2:	2300      	movs	r3, #0
}
 8015df4:	4618      	mov	r0, r3
 8015df6:	3758      	adds	r7, #88	; 0x58
 8015df8:	46bd      	mov	sp, r7
 8015dfa:	bd80      	pop	{r7, pc}

08015dfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015dfc:	b580      	push	{r7, lr}
 8015dfe:	b084      	sub	sp, #16
 8015e00:	af00      	add	r7, sp, #0
 8015e02:	60f8      	str	r0, [r7, #12]
 8015e04:	60b9      	str	r1, [r7, #8]
 8015e06:	603b      	str	r3, [r7, #0]
 8015e08:	4613      	mov	r3, r2
 8015e0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015e0c:	e04f      	b.n	8015eae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015e0e:	69bb      	ldr	r3, [r7, #24]
 8015e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015e14:	d04b      	beq.n	8015eae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015e16:	f7f0 f8a7 	bl	8005f68 <HAL_GetTick>
 8015e1a:	4602      	mov	r2, r0
 8015e1c:	683b      	ldr	r3, [r7, #0]
 8015e1e:	1ad3      	subs	r3, r2, r3
 8015e20:	69ba      	ldr	r2, [r7, #24]
 8015e22:	429a      	cmp	r2, r3
 8015e24:	d302      	bcc.n	8015e2c <UART_WaitOnFlagUntilTimeout+0x30>
 8015e26:	69bb      	ldr	r3, [r7, #24]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d101      	bne.n	8015e30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015e2c:	2303      	movs	r3, #3
 8015e2e:	e04e      	b.n	8015ece <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	f003 0304 	and.w	r3, r3, #4
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d037      	beq.n	8015eae <UART_WaitOnFlagUntilTimeout+0xb2>
 8015e3e:	68bb      	ldr	r3, [r7, #8]
 8015e40:	2b80      	cmp	r3, #128	; 0x80
 8015e42:	d034      	beq.n	8015eae <UART_WaitOnFlagUntilTimeout+0xb2>
 8015e44:	68bb      	ldr	r3, [r7, #8]
 8015e46:	2b40      	cmp	r3, #64	; 0x40
 8015e48:	d031      	beq.n	8015eae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	69db      	ldr	r3, [r3, #28]
 8015e50:	f003 0308 	and.w	r3, r3, #8
 8015e54:	2b08      	cmp	r3, #8
 8015e56:	d110      	bne.n	8015e7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	2208      	movs	r2, #8
 8015e5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015e60:	68f8      	ldr	r0, [r7, #12]
 8015e62:	f000 f95b 	bl	801611c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	2208      	movs	r2, #8
 8015e6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	2200      	movs	r2, #0
 8015e72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8015e76:	2301      	movs	r3, #1
 8015e78:	e029      	b.n	8015ece <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	69db      	ldr	r3, [r3, #28]
 8015e80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015e88:	d111      	bne.n	8015eae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015e92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015e94:	68f8      	ldr	r0, [r7, #12]
 8015e96:	f000 f941 	bl	801611c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	2220      	movs	r2, #32
 8015e9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	2200      	movs	r2, #0
 8015ea6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8015eaa:	2303      	movs	r3, #3
 8015eac:	e00f      	b.n	8015ece <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	69da      	ldr	r2, [r3, #28]
 8015eb4:	68bb      	ldr	r3, [r7, #8]
 8015eb6:	4013      	ands	r3, r2
 8015eb8:	68ba      	ldr	r2, [r7, #8]
 8015eba:	429a      	cmp	r2, r3
 8015ebc:	bf0c      	ite	eq
 8015ebe:	2301      	moveq	r3, #1
 8015ec0:	2300      	movne	r3, #0
 8015ec2:	b2db      	uxtb	r3, r3
 8015ec4:	461a      	mov	r2, r3
 8015ec6:	79fb      	ldrb	r3, [r7, #7]
 8015ec8:	429a      	cmp	r2, r3
 8015eca:	d0a0      	beq.n	8015e0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015ecc:	2300      	movs	r3, #0
}
 8015ece:	4618      	mov	r0, r3
 8015ed0:	3710      	adds	r7, #16
 8015ed2:	46bd      	mov	sp, r7
 8015ed4:	bd80      	pop	{r7, pc}
	...

08015ed8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015ed8:	b480      	push	{r7}
 8015eda:	b0a3      	sub	sp, #140	; 0x8c
 8015edc:	af00      	add	r7, sp, #0
 8015ede:	60f8      	str	r0, [r7, #12]
 8015ee0:	60b9      	str	r1, [r7, #8]
 8015ee2:	4613      	mov	r3, r2
 8015ee4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	68ba      	ldr	r2, [r7, #8]
 8015eea:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	88fa      	ldrh	r2, [r7, #6]
 8015ef0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	88fa      	ldrh	r2, [r7, #6]
 8015ef8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	2200      	movs	r2, #0
 8015f00:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	689b      	ldr	r3, [r3, #8]
 8015f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015f0a:	d10e      	bne.n	8015f2a <UART_Start_Receive_IT+0x52>
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	691b      	ldr	r3, [r3, #16]
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d105      	bne.n	8015f20 <UART_Start_Receive_IT+0x48>
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	f240 12ff 	movw	r2, #511	; 0x1ff
 8015f1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015f1e:	e02d      	b.n	8015f7c <UART_Start_Receive_IT+0xa4>
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	22ff      	movs	r2, #255	; 0xff
 8015f24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015f28:	e028      	b.n	8015f7c <UART_Start_Receive_IT+0xa4>
 8015f2a:	68fb      	ldr	r3, [r7, #12]
 8015f2c:	689b      	ldr	r3, [r3, #8]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d10d      	bne.n	8015f4e <UART_Start_Receive_IT+0x76>
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	691b      	ldr	r3, [r3, #16]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d104      	bne.n	8015f44 <UART_Start_Receive_IT+0x6c>
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	22ff      	movs	r2, #255	; 0xff
 8015f3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015f42:	e01b      	b.n	8015f7c <UART_Start_Receive_IT+0xa4>
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	227f      	movs	r2, #127	; 0x7f
 8015f48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015f4c:	e016      	b.n	8015f7c <UART_Start_Receive_IT+0xa4>
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	689b      	ldr	r3, [r3, #8]
 8015f52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015f56:	d10d      	bne.n	8015f74 <UART_Start_Receive_IT+0x9c>
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	691b      	ldr	r3, [r3, #16]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d104      	bne.n	8015f6a <UART_Start_Receive_IT+0x92>
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	227f      	movs	r2, #127	; 0x7f
 8015f64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015f68:	e008      	b.n	8015f7c <UART_Start_Receive_IT+0xa4>
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	223f      	movs	r2, #63	; 0x3f
 8015f6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015f72:	e003      	b.n	8015f7c <UART_Start_Receive_IT+0xa4>
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	2200      	movs	r2, #0
 8015f78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	2200      	movs	r2, #0
 8015f80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	2222      	movs	r2, #34	; 0x22
 8015f88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	3308      	adds	r3, #8
 8015f92:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015f96:	e853 3f00 	ldrex	r3, [r3]
 8015f9a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8015f9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015f9e:	f043 0301 	orr.w	r3, r3, #1
 8015fa2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	3308      	adds	r3, #8
 8015fac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015fb0:	673a      	str	r2, [r7, #112]	; 0x70
 8015fb2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fb4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8015fb6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015fb8:	e841 2300 	strex	r3, r2, [r1]
 8015fbc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8015fbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d1e3      	bne.n	8015f8c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015fcc:	d14f      	bne.n	801606e <UART_Start_Receive_IT+0x196>
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015fd4:	88fa      	ldrh	r2, [r7, #6]
 8015fd6:	429a      	cmp	r2, r3
 8015fd8:	d349      	bcc.n	801606e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	689b      	ldr	r3, [r3, #8]
 8015fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015fe2:	d107      	bne.n	8015ff4 <UART_Start_Receive_IT+0x11c>
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	691b      	ldr	r3, [r3, #16]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d103      	bne.n	8015ff4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	4a47      	ldr	r2, [pc, #284]	; (801610c <UART_Start_Receive_IT+0x234>)
 8015ff0:	675a      	str	r2, [r3, #116]	; 0x74
 8015ff2:	e002      	b.n	8015ffa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	4a46      	ldr	r2, [pc, #280]	; (8016110 <UART_Start_Receive_IT+0x238>)
 8015ff8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	691b      	ldr	r3, [r3, #16]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d01a      	beq.n	8016038 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801600a:	e853 3f00 	ldrex	r3, [r3]
 801600e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016016:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	461a      	mov	r2, r3
 8016020:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016024:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016026:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016028:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801602a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801602c:	e841 2300 	strex	r3, r2, [r1]
 8016030:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8016032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016034:	2b00      	cmp	r3, #0
 8016036:	d1e4      	bne.n	8016002 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016038:	68fb      	ldr	r3, [r7, #12]
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	3308      	adds	r3, #8
 801603e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016042:	e853 3f00 	ldrex	r3, [r3]
 8016046:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801604a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801604e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	3308      	adds	r3, #8
 8016056:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016058:	64ba      	str	r2, [r7, #72]	; 0x48
 801605a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801605c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801605e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016060:	e841 2300 	strex	r3, r2, [r1]
 8016064:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8016066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016068:	2b00      	cmp	r3, #0
 801606a:	d1e5      	bne.n	8016038 <UART_Start_Receive_IT+0x160>
 801606c:	e046      	b.n	80160fc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	689b      	ldr	r3, [r3, #8]
 8016072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016076:	d107      	bne.n	8016088 <UART_Start_Receive_IT+0x1b0>
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	691b      	ldr	r3, [r3, #16]
 801607c:	2b00      	cmp	r3, #0
 801607e:	d103      	bne.n	8016088 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	4a24      	ldr	r2, [pc, #144]	; (8016114 <UART_Start_Receive_IT+0x23c>)
 8016084:	675a      	str	r2, [r3, #116]	; 0x74
 8016086:	e002      	b.n	801608e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	4a23      	ldr	r2, [pc, #140]	; (8016118 <UART_Start_Receive_IT+0x240>)
 801608c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	691b      	ldr	r3, [r3, #16]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d019      	beq.n	80160ca <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801609c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801609e:	e853 3f00 	ldrex	r3, [r3]
 80160a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80160a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160a6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80160aa:	677b      	str	r3, [r7, #116]	; 0x74
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	461a      	mov	r2, r3
 80160b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80160b4:	637b      	str	r3, [r7, #52]	; 0x34
 80160b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80160ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80160bc:	e841 2300 	strex	r3, r2, [r1]
 80160c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80160c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d1e6      	bne.n	8016096 <UART_Start_Receive_IT+0x1be>
 80160c8:	e018      	b.n	80160fc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160d0:	697b      	ldr	r3, [r7, #20]
 80160d2:	e853 3f00 	ldrex	r3, [r3]
 80160d6:	613b      	str	r3, [r7, #16]
   return(result);
 80160d8:	693b      	ldr	r3, [r7, #16]
 80160da:	f043 0320 	orr.w	r3, r3, #32
 80160de:	67bb      	str	r3, [r7, #120]	; 0x78
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	461a      	mov	r2, r3
 80160e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80160e8:	623b      	str	r3, [r7, #32]
 80160ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160ec:	69f9      	ldr	r1, [r7, #28]
 80160ee:	6a3a      	ldr	r2, [r7, #32]
 80160f0:	e841 2300 	strex	r3, r2, [r1]
 80160f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80160f6:	69bb      	ldr	r3, [r7, #24]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d1e6      	bne.n	80160ca <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80160fc:	2300      	movs	r3, #0
}
 80160fe:	4618      	mov	r0, r3
 8016100:	378c      	adds	r7, #140	; 0x8c
 8016102:	46bd      	mov	sp, r7
 8016104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016108:	4770      	bx	lr
 801610a:	bf00      	nop
 801610c:	0801693d 	.word	0x0801693d
 8016110:	080165dd 	.word	0x080165dd
 8016114:	08016425 	.word	0x08016425
 8016118:	0801626d 	.word	0x0801626d

0801611c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801611c:	b480      	push	{r7}
 801611e:	b095      	sub	sp, #84	; 0x54
 8016120:	af00      	add	r7, sp, #0
 8016122:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801612a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801612c:	e853 3f00 	ldrex	r3, [r3]
 8016130:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016134:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016138:	64fb      	str	r3, [r7, #76]	; 0x4c
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	461a      	mov	r2, r3
 8016140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016142:	643b      	str	r3, [r7, #64]	; 0x40
 8016144:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016146:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016148:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801614a:	e841 2300 	strex	r3, r2, [r1]
 801614e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016152:	2b00      	cmp	r3, #0
 8016154:	d1e6      	bne.n	8016124 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	3308      	adds	r3, #8
 801615c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801615e:	6a3b      	ldr	r3, [r7, #32]
 8016160:	e853 3f00 	ldrex	r3, [r3]
 8016164:	61fb      	str	r3, [r7, #28]
   return(result);
 8016166:	69fa      	ldr	r2, [r7, #28]
 8016168:	4b1e      	ldr	r3, [pc, #120]	; (80161e4 <UART_EndRxTransfer+0xc8>)
 801616a:	4013      	ands	r3, r2
 801616c:	64bb      	str	r3, [r7, #72]	; 0x48
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	3308      	adds	r3, #8
 8016174:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016176:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016178:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801617a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801617c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801617e:	e841 2300 	strex	r3, r2, [r1]
 8016182:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016186:	2b00      	cmp	r3, #0
 8016188:	d1e5      	bne.n	8016156 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801618e:	2b01      	cmp	r3, #1
 8016190:	d118      	bne.n	80161c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	e853 3f00 	ldrex	r3, [r3]
 801619e:	60bb      	str	r3, [r7, #8]
   return(result);
 80161a0:	68bb      	ldr	r3, [r7, #8]
 80161a2:	f023 0310 	bic.w	r3, r3, #16
 80161a6:	647b      	str	r3, [r7, #68]	; 0x44
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	681b      	ldr	r3, [r3, #0]
 80161ac:	461a      	mov	r2, r3
 80161ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80161b0:	61bb      	str	r3, [r7, #24]
 80161b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161b4:	6979      	ldr	r1, [r7, #20]
 80161b6:	69ba      	ldr	r2, [r7, #24]
 80161b8:	e841 2300 	strex	r3, r2, [r1]
 80161bc:	613b      	str	r3, [r7, #16]
   return(result);
 80161be:	693b      	ldr	r3, [r7, #16]
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d1e6      	bne.n	8016192 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	2220      	movs	r2, #32
 80161c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	2200      	movs	r2, #0
 80161d0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	2200      	movs	r2, #0
 80161d6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80161d8:	bf00      	nop
 80161da:	3754      	adds	r7, #84	; 0x54
 80161dc:	46bd      	mov	sp, r7
 80161de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e2:	4770      	bx	lr
 80161e4:	effffffe 	.word	0xeffffffe

080161e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80161e8:	b580      	push	{r7, lr}
 80161ea:	b084      	sub	sp, #16
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80161f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	2200      	movs	r2, #0
 80161fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	2200      	movs	r2, #0
 8016202:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8016206:	68f8      	ldr	r0, [r7, #12]
 8016208:	f7fe ff2e 	bl	8015068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801620c:	bf00      	nop
 801620e:	3710      	adds	r7, #16
 8016210:	46bd      	mov	sp, r7
 8016212:	bd80      	pop	{r7, pc}

08016214 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8016214:	b580      	push	{r7, lr}
 8016216:	b088      	sub	sp, #32
 8016218:	af00      	add	r7, sp, #0
 801621a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	e853 3f00 	ldrex	r3, [r3]
 8016228:	60bb      	str	r3, [r7, #8]
   return(result);
 801622a:	68bb      	ldr	r3, [r7, #8]
 801622c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016230:	61fb      	str	r3, [r7, #28]
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	461a      	mov	r2, r3
 8016238:	69fb      	ldr	r3, [r7, #28]
 801623a:	61bb      	str	r3, [r7, #24]
 801623c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801623e:	6979      	ldr	r1, [r7, #20]
 8016240:	69ba      	ldr	r2, [r7, #24]
 8016242:	e841 2300 	strex	r3, r2, [r1]
 8016246:	613b      	str	r3, [r7, #16]
   return(result);
 8016248:	693b      	ldr	r3, [r7, #16]
 801624a:	2b00      	cmp	r3, #0
 801624c:	d1e6      	bne.n	801621c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	2220      	movs	r2, #32
 8016252:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	2200      	movs	r2, #0
 801625a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801625c:	6878      	ldr	r0, [r7, #4]
 801625e:	f7fe fef9 	bl	8015054 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016262:	bf00      	nop
 8016264:	3720      	adds	r7, #32
 8016266:	46bd      	mov	sp, r7
 8016268:	bd80      	pop	{r7, pc}
	...

0801626c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801626c:	b580      	push	{r7, lr}
 801626e:	b09c      	sub	sp, #112	; 0x70
 8016270:	af00      	add	r7, sp, #0
 8016272:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801627a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016284:	2b22      	cmp	r3, #34	; 0x22
 8016286:	f040 80be 	bne.w	8016406 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	681b      	ldr	r3, [r3, #0]
 801628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016290:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8016294:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8016298:	b2d9      	uxtb	r1, r3
 801629a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801629e:	b2da      	uxtb	r2, r3
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80162a4:	400a      	ands	r2, r1
 80162a6:	b2d2      	uxtb	r2, r2
 80162a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80162ae:	1c5a      	adds	r2, r3, #1
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80162ba:	b29b      	uxth	r3, r3
 80162bc:	3b01      	subs	r3, #1
 80162be:	b29a      	uxth	r2, r3
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80162cc:	b29b      	uxth	r3, r3
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	f040 80a1 	bne.w	8016416 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80162dc:	e853 3f00 	ldrex	r3, [r3]
 80162e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80162e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80162e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80162e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	461a      	mov	r2, r3
 80162f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80162f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80162f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80162f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80162fa:	e841 2300 	strex	r3, r2, [r1]
 80162fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016302:	2b00      	cmp	r3, #0
 8016304:	d1e6      	bne.n	80162d4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	3308      	adds	r3, #8
 801630c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801630e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016310:	e853 3f00 	ldrex	r3, [r3]
 8016314:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016318:	f023 0301 	bic.w	r3, r3, #1
 801631c:	667b      	str	r3, [r7, #100]	; 0x64
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	3308      	adds	r3, #8
 8016324:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016326:	647a      	str	r2, [r7, #68]	; 0x44
 8016328:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801632a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801632c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801632e:	e841 2300 	strex	r3, r2, [r1]
 8016332:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016336:	2b00      	cmp	r3, #0
 8016338:	d1e5      	bne.n	8016306 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	2220      	movs	r2, #32
 801633e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	2200      	movs	r2, #0
 8016346:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	2200      	movs	r2, #0
 801634c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	4a33      	ldr	r2, [pc, #204]	; (8016420 <UART_RxISR_8BIT+0x1b4>)
 8016354:	4293      	cmp	r3, r2
 8016356:	d01f      	beq.n	8016398 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	685b      	ldr	r3, [r3, #4]
 801635e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016362:	2b00      	cmp	r3, #0
 8016364:	d018      	beq.n	8016398 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801636e:	e853 3f00 	ldrex	r3, [r3]
 8016372:	623b      	str	r3, [r7, #32]
   return(result);
 8016374:	6a3b      	ldr	r3, [r7, #32]
 8016376:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801637a:	663b      	str	r3, [r7, #96]	; 0x60
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	461a      	mov	r2, r3
 8016382:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016384:	633b      	str	r3, [r7, #48]	; 0x30
 8016386:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016388:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801638a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801638c:	e841 2300 	strex	r3, r2, [r1]
 8016390:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016394:	2b00      	cmp	r3, #0
 8016396:	d1e6      	bne.n	8016366 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801639c:	2b01      	cmp	r3, #1
 801639e:	d12e      	bne.n	80163fe <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	2200      	movs	r2, #0
 80163a4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163ac:	693b      	ldr	r3, [r7, #16]
 80163ae:	e853 3f00 	ldrex	r3, [r3]
 80163b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	f023 0310 	bic.w	r3, r3, #16
 80163ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	461a      	mov	r2, r3
 80163c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80163c4:	61fb      	str	r3, [r7, #28]
 80163c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163c8:	69b9      	ldr	r1, [r7, #24]
 80163ca:	69fa      	ldr	r2, [r7, #28]
 80163cc:	e841 2300 	strex	r3, r2, [r1]
 80163d0:	617b      	str	r3, [r7, #20]
   return(result);
 80163d2:	697b      	ldr	r3, [r7, #20]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d1e6      	bne.n	80163a6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	69db      	ldr	r3, [r3, #28]
 80163de:	f003 0310 	and.w	r3, r3, #16
 80163e2:	2b10      	cmp	r3, #16
 80163e4:	d103      	bne.n	80163ee <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	2210      	movs	r2, #16
 80163ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80163f4:	4619      	mov	r1, r3
 80163f6:	6878      	ldr	r0, [r7, #4]
 80163f8:	f7fe fe40 	bl	801507c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80163fc:	e00b      	b.n	8016416 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80163fe:	6878      	ldr	r0, [r7, #4]
 8016400:	f7ec fcb4 	bl	8002d6c <HAL_UART_RxCpltCallback>
}
 8016404:	e007      	b.n	8016416 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	699a      	ldr	r2, [r3, #24]
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	f042 0208 	orr.w	r2, r2, #8
 8016414:	619a      	str	r2, [r3, #24]
}
 8016416:	bf00      	nop
 8016418:	3770      	adds	r7, #112	; 0x70
 801641a:	46bd      	mov	sp, r7
 801641c:	bd80      	pop	{r7, pc}
 801641e:	bf00      	nop
 8016420:	58000c00 	.word	0x58000c00

08016424 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8016424:	b580      	push	{r7, lr}
 8016426:	b09c      	sub	sp, #112	; 0x70
 8016428:	af00      	add	r7, sp, #0
 801642a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016432:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801643c:	2b22      	cmp	r3, #34	; 0x22
 801643e:	f040 80be 	bne.w	80165be <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016448:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016450:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8016452:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8016456:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801645a:	4013      	ands	r3, r2
 801645c:	b29a      	uxth	r2, r3
 801645e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016460:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016466:	1c9a      	adds	r2, r3, #2
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016472:	b29b      	uxth	r3, r3
 8016474:	3b01      	subs	r3, #1
 8016476:	b29a      	uxth	r2, r3
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016484:	b29b      	uxth	r3, r3
 8016486:	2b00      	cmp	r3, #0
 8016488:	f040 80a1 	bne.w	80165ce <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016494:	e853 3f00 	ldrex	r3, [r3]
 8016498:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801649a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801649c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80164a0:	667b      	str	r3, [r7, #100]	; 0x64
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	461a      	mov	r2, r3
 80164a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80164aa:	657b      	str	r3, [r7, #84]	; 0x54
 80164ac:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80164b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80164b2:	e841 2300 	strex	r3, r2, [r1]
 80164b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80164b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d1e6      	bne.n	801648c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	3308      	adds	r3, #8
 80164c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164c8:	e853 3f00 	ldrex	r3, [r3]
 80164cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80164ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164d0:	f023 0301 	bic.w	r3, r3, #1
 80164d4:	663b      	str	r3, [r7, #96]	; 0x60
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	3308      	adds	r3, #8
 80164dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80164de:	643a      	str	r2, [r7, #64]	; 0x40
 80164e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80164e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80164e6:	e841 2300 	strex	r3, r2, [r1]
 80164ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80164ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d1e5      	bne.n	80164be <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	2220      	movs	r2, #32
 80164f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	2200      	movs	r2, #0
 80164fe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	2200      	movs	r2, #0
 8016504:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	4a33      	ldr	r2, [pc, #204]	; (80165d8 <UART_RxISR_16BIT+0x1b4>)
 801650c:	4293      	cmp	r3, r2
 801650e:	d01f      	beq.n	8016550 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	685b      	ldr	r3, [r3, #4]
 8016516:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801651a:	2b00      	cmp	r3, #0
 801651c:	d018      	beq.n	8016550 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016524:	6a3b      	ldr	r3, [r7, #32]
 8016526:	e853 3f00 	ldrex	r3, [r3]
 801652a:	61fb      	str	r3, [r7, #28]
   return(result);
 801652c:	69fb      	ldr	r3, [r7, #28]
 801652e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016532:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	681b      	ldr	r3, [r3, #0]
 8016538:	461a      	mov	r2, r3
 801653a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801653c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801653e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016540:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016544:	e841 2300 	strex	r3, r2, [r1]
 8016548:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801654c:	2b00      	cmp	r3, #0
 801654e:	d1e6      	bne.n	801651e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016554:	2b01      	cmp	r3, #1
 8016556:	d12e      	bne.n	80165b6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	2200      	movs	r2, #0
 801655c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	e853 3f00 	ldrex	r3, [r3]
 801656a:	60bb      	str	r3, [r7, #8]
   return(result);
 801656c:	68bb      	ldr	r3, [r7, #8]
 801656e:	f023 0310 	bic.w	r3, r3, #16
 8016572:	65bb      	str	r3, [r7, #88]	; 0x58
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	461a      	mov	r2, r3
 801657a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801657c:	61bb      	str	r3, [r7, #24]
 801657e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016580:	6979      	ldr	r1, [r7, #20]
 8016582:	69ba      	ldr	r2, [r7, #24]
 8016584:	e841 2300 	strex	r3, r2, [r1]
 8016588:	613b      	str	r3, [r7, #16]
   return(result);
 801658a:	693b      	ldr	r3, [r7, #16]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d1e6      	bne.n	801655e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	69db      	ldr	r3, [r3, #28]
 8016596:	f003 0310 	and.w	r3, r3, #16
 801659a:	2b10      	cmp	r3, #16
 801659c:	d103      	bne.n	80165a6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	2210      	movs	r2, #16
 80165a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80165ac:	4619      	mov	r1, r3
 80165ae:	6878      	ldr	r0, [r7, #4]
 80165b0:	f7fe fd64 	bl	801507c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80165b4:	e00b      	b.n	80165ce <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80165b6:	6878      	ldr	r0, [r7, #4]
 80165b8:	f7ec fbd8 	bl	8002d6c <HAL_UART_RxCpltCallback>
}
 80165bc:	e007      	b.n	80165ce <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	699a      	ldr	r2, [r3, #24]
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	f042 0208 	orr.w	r2, r2, #8
 80165cc:	619a      	str	r2, [r3, #24]
}
 80165ce:	bf00      	nop
 80165d0:	3770      	adds	r7, #112	; 0x70
 80165d2:	46bd      	mov	sp, r7
 80165d4:	bd80      	pop	{r7, pc}
 80165d6:	bf00      	nop
 80165d8:	58000c00 	.word	0x58000c00

080165dc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80165dc:	b580      	push	{r7, lr}
 80165de:	b0ac      	sub	sp, #176	; 0xb0
 80165e0:	af00      	add	r7, sp, #0
 80165e2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80165ea:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	69db      	ldr	r3, [r3, #28]
 80165f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	681b      	ldr	r3, [r3, #0]
 80165fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	689b      	ldr	r3, [r3, #8]
 8016608:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016612:	2b22      	cmp	r3, #34	; 0x22
 8016614:	f040 8180 	bne.w	8016918 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801661e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016622:	e123      	b.n	801686c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801662a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801662e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8016632:	b2d9      	uxtb	r1, r3
 8016634:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8016638:	b2da      	uxtb	r2, r3
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801663e:	400a      	ands	r2, r1
 8016640:	b2d2      	uxtb	r2, r2
 8016642:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016648:	1c5a      	adds	r2, r3, #1
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016654:	b29b      	uxth	r3, r3
 8016656:	3b01      	subs	r3, #1
 8016658:	b29a      	uxth	r2, r3
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	69db      	ldr	r3, [r3, #28]
 8016666:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801666a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801666e:	f003 0307 	and.w	r3, r3, #7
 8016672:	2b00      	cmp	r3, #0
 8016674:	d053      	beq.n	801671e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801667a:	f003 0301 	and.w	r3, r3, #1
 801667e:	2b00      	cmp	r3, #0
 8016680:	d011      	beq.n	80166a6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8016682:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801668a:	2b00      	cmp	r3, #0
 801668c:	d00b      	beq.n	80166a6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	2201      	movs	r2, #1
 8016694:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801669c:	f043 0201 	orr.w	r2, r3, #1
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80166a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80166aa:	f003 0302 	and.w	r3, r3, #2
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d011      	beq.n	80166d6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80166b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80166b6:	f003 0301 	and.w	r3, r3, #1
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d00b      	beq.n	80166d6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	681b      	ldr	r3, [r3, #0]
 80166c2:	2202      	movs	r2, #2
 80166c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80166cc:	f043 0204 	orr.w	r2, r3, #4
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80166d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80166da:	f003 0304 	and.w	r3, r3, #4
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d011      	beq.n	8016706 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80166e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80166e6:	f003 0301 	and.w	r3, r3, #1
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d00b      	beq.n	8016706 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	681b      	ldr	r3, [r3, #0]
 80166f2:	2204      	movs	r2, #4
 80166f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80166fc:	f043 0202 	orr.w	r2, r3, #2
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801670c:	2b00      	cmp	r3, #0
 801670e:	d006      	beq.n	801671e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016710:	6878      	ldr	r0, [r7, #4]
 8016712:	f7fe fca9 	bl	8015068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	2200      	movs	r2, #0
 801671a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016724:	b29b      	uxth	r3, r3
 8016726:	2b00      	cmp	r3, #0
 8016728:	f040 80a0 	bne.w	801686c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016732:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016734:	e853 3f00 	ldrex	r3, [r3]
 8016738:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801673a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801673c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016740:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	461a      	mov	r2, r3
 801674a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801674e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016750:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016752:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8016754:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016756:	e841 2300 	strex	r3, r2, [r1]
 801675a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 801675c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801675e:	2b00      	cmp	r3, #0
 8016760:	d1e4      	bne.n	801672c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	3308      	adds	r3, #8
 8016768:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801676a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801676c:	e853 3f00 	ldrex	r3, [r3]
 8016770:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8016772:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016774:	4b6e      	ldr	r3, [pc, #440]	; (8016930 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8016776:	4013      	ands	r3, r2
 8016778:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	3308      	adds	r3, #8
 8016782:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016786:	66ba      	str	r2, [r7, #104]	; 0x68
 8016788:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801678a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801678c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801678e:	e841 2300 	strex	r3, r2, [r1]
 8016792:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8016794:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016796:	2b00      	cmp	r3, #0
 8016798:	d1e3      	bne.n	8016762 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	2220      	movs	r2, #32
 801679e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	2200      	movs	r2, #0
 80167a6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	2200      	movs	r2, #0
 80167ac:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	4a60      	ldr	r2, [pc, #384]	; (8016934 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80167b4:	4293      	cmp	r3, r2
 80167b6:	d021      	beq.n	80167fc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	685b      	ldr	r3, [r3, #4]
 80167be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d01a      	beq.n	80167fc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80167cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80167ce:	e853 3f00 	ldrex	r3, [r3]
 80167d2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80167d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80167d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80167da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	461a      	mov	r2, r3
 80167e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80167e8:	657b      	str	r3, [r7, #84]	; 0x54
 80167ea:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80167ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80167f0:	e841 2300 	strex	r3, r2, [r1]
 80167f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80167f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d1e4      	bne.n	80167c6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016800:	2b01      	cmp	r3, #1
 8016802:	d130      	bne.n	8016866 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	2200      	movs	r2, #0
 8016808:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016812:	e853 3f00 	ldrex	r3, [r3]
 8016816:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801681a:	f023 0310 	bic.w	r3, r3, #16
 801681e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	461a      	mov	r2, r3
 8016828:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801682c:	643b      	str	r3, [r7, #64]	; 0x40
 801682e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016830:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016832:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016834:	e841 2300 	strex	r3, r2, [r1]
 8016838:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801683a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801683c:	2b00      	cmp	r3, #0
 801683e:	d1e4      	bne.n	801680a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	69db      	ldr	r3, [r3, #28]
 8016846:	f003 0310 	and.w	r3, r3, #16
 801684a:	2b10      	cmp	r3, #16
 801684c:	d103      	bne.n	8016856 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	2210      	movs	r2, #16
 8016854:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801685c:	4619      	mov	r1, r3
 801685e:	6878      	ldr	r0, [r7, #4]
 8016860:	f7fe fc0c 	bl	801507c <HAL_UARTEx_RxEventCallback>
 8016864:	e002      	b.n	801686c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8016866:	6878      	ldr	r0, [r7, #4]
 8016868:	f7ec fa80 	bl	8002d6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801686c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8016870:	2b00      	cmp	r3, #0
 8016872:	d006      	beq.n	8016882 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8016874:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016878:	f003 0320 	and.w	r3, r3, #32
 801687c:	2b00      	cmp	r3, #0
 801687e:	f47f aed1 	bne.w	8016624 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016888:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801688c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8016890:	2b00      	cmp	r3, #0
 8016892:	d049      	beq.n	8016928 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801689a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801689e:	429a      	cmp	r2, r3
 80168a0:	d242      	bcs.n	8016928 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	3308      	adds	r3, #8
 80168a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80168aa:	6a3b      	ldr	r3, [r7, #32]
 80168ac:	e853 3f00 	ldrex	r3, [r3]
 80168b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80168b2:	69fb      	ldr	r3, [r7, #28]
 80168b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80168b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	3308      	adds	r3, #8
 80168c2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80168c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80168c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80168ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80168cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80168ce:	e841 2300 	strex	r3, r2, [r1]
 80168d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80168d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d1e3      	bne.n	80168a2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	4a16      	ldr	r2, [pc, #88]	; (8016938 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80168de:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	e853 3f00 	ldrex	r3, [r3]
 80168ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80168ee:	68bb      	ldr	r3, [r7, #8]
 80168f0:	f043 0320 	orr.w	r3, r3, #32
 80168f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	461a      	mov	r2, r3
 80168fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016902:	61bb      	str	r3, [r7, #24]
 8016904:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016906:	6979      	ldr	r1, [r7, #20]
 8016908:	69ba      	ldr	r2, [r7, #24]
 801690a:	e841 2300 	strex	r3, r2, [r1]
 801690e:	613b      	str	r3, [r7, #16]
   return(result);
 8016910:	693b      	ldr	r3, [r7, #16]
 8016912:	2b00      	cmp	r3, #0
 8016914:	d1e4      	bne.n	80168e0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016916:	e007      	b.n	8016928 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	699a      	ldr	r2, [r3, #24]
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	f042 0208 	orr.w	r2, r2, #8
 8016926:	619a      	str	r2, [r3, #24]
}
 8016928:	bf00      	nop
 801692a:	37b0      	adds	r7, #176	; 0xb0
 801692c:	46bd      	mov	sp, r7
 801692e:	bd80      	pop	{r7, pc}
 8016930:	effffffe 	.word	0xeffffffe
 8016934:	58000c00 	.word	0x58000c00
 8016938:	0801626d 	.word	0x0801626d

0801693c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801693c:	b580      	push	{r7, lr}
 801693e:	b0ae      	sub	sp, #184	; 0xb8
 8016940:	af00      	add	r7, sp, #0
 8016942:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801694a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	69db      	ldr	r3, [r3, #28]
 8016954:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	689b      	ldr	r3, [r3, #8]
 8016968:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016972:	2b22      	cmp	r3, #34	; 0x22
 8016974:	f040 8184 	bne.w	8016c80 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801697e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016982:	e127      	b.n	8016bd4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801698a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016992:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8016996:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801699a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801699e:	4013      	ands	r3, r2
 80169a0:	b29a      	uxth	r2, r3
 80169a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80169a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80169ac:	1c9a      	adds	r2, r3, #2
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80169b8:	b29b      	uxth	r3, r3
 80169ba:	3b01      	subs	r3, #1
 80169bc:	b29a      	uxth	r2, r3
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	69db      	ldr	r3, [r3, #28]
 80169ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80169ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80169d2:	f003 0307 	and.w	r3, r3, #7
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d053      	beq.n	8016a82 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80169da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80169de:	f003 0301 	and.w	r3, r3, #1
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d011      	beq.n	8016a0a <UART_RxISR_16BIT_FIFOEN+0xce>
 80169e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80169ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d00b      	beq.n	8016a0a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	2201      	movs	r2, #1
 80169f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016a00:	f043 0201 	orr.w	r2, r3, #1
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016a0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016a0e:	f003 0302 	and.w	r3, r3, #2
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d011      	beq.n	8016a3a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8016a16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016a1a:	f003 0301 	and.w	r3, r3, #1
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d00b      	beq.n	8016a3a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	2202      	movs	r2, #2
 8016a28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016a30:	f043 0204 	orr.w	r2, r3, #4
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016a3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016a3e:	f003 0304 	and.w	r3, r3, #4
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d011      	beq.n	8016a6a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8016a46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016a4a:	f003 0301 	and.w	r3, r3, #1
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d00b      	beq.n	8016a6a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	2204      	movs	r2, #4
 8016a58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016a60:	f043 0202 	orr.w	r2, r3, #2
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d006      	beq.n	8016a82 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016a74:	6878      	ldr	r0, [r7, #4]
 8016a76:	f7fe faf7 	bl	8015068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	2200      	movs	r2, #0
 8016a7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016a88:	b29b      	uxth	r3, r3
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	f040 80a2 	bne.w	8016bd4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016a98:	e853 3f00 	ldrex	r3, [r3]
 8016a9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8016a9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016aa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	461a      	mov	r2, r3
 8016aae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016ab2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016ab6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ab8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8016aba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016abe:	e841 2300 	strex	r3, r2, [r1]
 8016ac2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8016ac4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d1e2      	bne.n	8016a90 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	681b      	ldr	r3, [r3, #0]
 8016ace:	3308      	adds	r3, #8
 8016ad0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016ad4:	e853 3f00 	ldrex	r3, [r3]
 8016ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016ada:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016adc:	4b6e      	ldr	r3, [pc, #440]	; (8016c98 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8016ade:	4013      	ands	r3, r2
 8016ae0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	3308      	adds	r3, #8
 8016aea:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8016aee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016af0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016af2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016af4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016af6:	e841 2300 	strex	r3, r2, [r1]
 8016afa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016afc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d1e3      	bne.n	8016aca <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	2220      	movs	r2, #32
 8016b06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	2200      	movs	r2, #0
 8016b0e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	2200      	movs	r2, #0
 8016b14:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	4a60      	ldr	r2, [pc, #384]	; (8016c9c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8016b1c:	4293      	cmp	r3, r2
 8016b1e:	d021      	beq.n	8016b64 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	685b      	ldr	r3, [r3, #4]
 8016b26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d01a      	beq.n	8016b64 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016b36:	e853 3f00 	ldrex	r3, [r3]
 8016b3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016b3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016b42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	461a      	mov	r2, r3
 8016b4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016b50:	65bb      	str	r3, [r7, #88]	; 0x58
 8016b52:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016b56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016b58:	e841 2300 	strex	r3, r2, [r1]
 8016b5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d1e4      	bne.n	8016b2e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b68:	2b01      	cmp	r3, #1
 8016b6a:	d130      	bne.n	8016bce <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	2200      	movs	r2, #0
 8016b70:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b7a:	e853 3f00 	ldrex	r3, [r3]
 8016b7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b82:	f023 0310 	bic.w	r3, r3, #16
 8016b86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	461a      	mov	r2, r3
 8016b90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016b94:	647b      	str	r3, [r7, #68]	; 0x44
 8016b96:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016b9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016b9c:	e841 2300 	strex	r3, r2, [r1]
 8016ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d1e4      	bne.n	8016b72 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	69db      	ldr	r3, [r3, #28]
 8016bae:	f003 0310 	and.w	r3, r3, #16
 8016bb2:	2b10      	cmp	r3, #16
 8016bb4:	d103      	bne.n	8016bbe <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	2210      	movs	r2, #16
 8016bbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016bc4:	4619      	mov	r1, r3
 8016bc6:	6878      	ldr	r0, [r7, #4]
 8016bc8:	f7fe fa58 	bl	801507c <HAL_UARTEx_RxEventCallback>
 8016bcc:	e002      	b.n	8016bd4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8016bce:	6878      	ldr	r0, [r7, #4]
 8016bd0:	f7ec f8cc 	bl	8002d6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016bd4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d006      	beq.n	8016bea <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8016bdc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016be0:	f003 0320 	and.w	r3, r3, #32
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	f47f aecd 	bne.w	8016984 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016bf0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016bf4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d049      	beq.n	8016c90 <UART_RxISR_16BIT_FIFOEN+0x354>
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016c02:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8016c06:	429a      	cmp	r2, r3
 8016c08:	d242      	bcs.n	8016c90 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	3308      	adds	r3, #8
 8016c10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c14:	e853 3f00 	ldrex	r3, [r3]
 8016c18:	623b      	str	r3, [r7, #32]
   return(result);
 8016c1a:	6a3b      	ldr	r3, [r7, #32]
 8016c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016c20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	3308      	adds	r3, #8
 8016c2a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016c2e:	633a      	str	r2, [r7, #48]	; 0x30
 8016c30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c36:	e841 2300 	strex	r3, r2, [r1]
 8016c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d1e3      	bne.n	8016c0a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	4a16      	ldr	r2, [pc, #88]	; (8016ca0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8016c46:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c4e:	693b      	ldr	r3, [r7, #16]
 8016c50:	e853 3f00 	ldrex	r3, [r3]
 8016c54:	60fb      	str	r3, [r7, #12]
   return(result);
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	f043 0320 	orr.w	r3, r3, #32
 8016c5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	681b      	ldr	r3, [r3, #0]
 8016c64:	461a      	mov	r2, r3
 8016c66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016c6a:	61fb      	str	r3, [r7, #28]
 8016c6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c6e:	69b9      	ldr	r1, [r7, #24]
 8016c70:	69fa      	ldr	r2, [r7, #28]
 8016c72:	e841 2300 	strex	r3, r2, [r1]
 8016c76:	617b      	str	r3, [r7, #20]
   return(result);
 8016c78:	697b      	ldr	r3, [r7, #20]
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d1e4      	bne.n	8016c48 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016c7e:	e007      	b.n	8016c90 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	681b      	ldr	r3, [r3, #0]
 8016c84:	699a      	ldr	r2, [r3, #24]
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	f042 0208 	orr.w	r2, r2, #8
 8016c8e:	619a      	str	r2, [r3, #24]
}
 8016c90:	bf00      	nop
 8016c92:	37b8      	adds	r7, #184	; 0xb8
 8016c94:	46bd      	mov	sp, r7
 8016c96:	bd80      	pop	{r7, pc}
 8016c98:	effffffe 	.word	0xeffffffe
 8016c9c:	58000c00 	.word	0x58000c00
 8016ca0:	08016425 	.word	0x08016425

08016ca4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8016ca4:	b480      	push	{r7}
 8016ca6:	b083      	sub	sp, #12
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8016cac:	bf00      	nop
 8016cae:	370c      	adds	r7, #12
 8016cb0:	46bd      	mov	sp, r7
 8016cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb6:	4770      	bx	lr

08016cb8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8016cb8:	b480      	push	{r7}
 8016cba:	b083      	sub	sp, #12
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8016cc0:	bf00      	nop
 8016cc2:	370c      	adds	r7, #12
 8016cc4:	46bd      	mov	sp, r7
 8016cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cca:	4770      	bx	lr

08016ccc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8016ccc:	b480      	push	{r7}
 8016cce:	b083      	sub	sp, #12
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8016cd4:	bf00      	nop
 8016cd6:	370c      	adds	r7, #12
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cde:	4770      	bx	lr

08016ce0 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8016ce0:	b480      	push	{r7}
 8016ce2:	b089      	sub	sp, #36	; 0x24
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016cee:	2b01      	cmp	r3, #1
 8016cf0:	d101      	bne.n	8016cf6 <HAL_UARTEx_EnableStopMode+0x16>
 8016cf2:	2302      	movs	r3, #2
 8016cf4:	e021      	b.n	8016d3a <HAL_UARTEx_EnableStopMode+0x5a>
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	2201      	movs	r2, #1
 8016cfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	681b      	ldr	r3, [r3, #0]
 8016d02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	e853 3f00 	ldrex	r3, [r3]
 8016d0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8016d0c:	68bb      	ldr	r3, [r7, #8]
 8016d0e:	f043 0302 	orr.w	r3, r3, #2
 8016d12:	61fb      	str	r3, [r7, #28]
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	461a      	mov	r2, r3
 8016d1a:	69fb      	ldr	r3, [r7, #28]
 8016d1c:	61bb      	str	r3, [r7, #24]
 8016d1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d20:	6979      	ldr	r1, [r7, #20]
 8016d22:	69ba      	ldr	r2, [r7, #24]
 8016d24:	e841 2300 	strex	r3, r2, [r1]
 8016d28:	613b      	str	r3, [r7, #16]
   return(result);
 8016d2a:	693b      	ldr	r3, [r7, #16]
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d1e6      	bne.n	8016cfe <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	2200      	movs	r2, #0
 8016d34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016d38:	2300      	movs	r3, #0
}
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	3724      	adds	r7, #36	; 0x24
 8016d3e:	46bd      	mov	sp, r7
 8016d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d44:	4770      	bx	lr

08016d46 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8016d46:	b580      	push	{r7, lr}
 8016d48:	b084      	sub	sp, #16
 8016d4a:	af00      	add	r7, sp, #0
 8016d4c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016d54:	2b01      	cmp	r3, #1
 8016d56:	d101      	bne.n	8016d5c <HAL_UARTEx_EnableFifoMode+0x16>
 8016d58:	2302      	movs	r3, #2
 8016d5a:	e02b      	b.n	8016db4 <HAL_UARTEx_EnableFifoMode+0x6e>
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	2201      	movs	r2, #1
 8016d60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	2224      	movs	r2, #36	; 0x24
 8016d68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	681b      	ldr	r3, [r3, #0]
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	681a      	ldr	r2, [r3, #0]
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	f022 0201 	bic.w	r2, r2, #1
 8016d82:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8016d8a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8016d92:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	68fa      	ldr	r2, [r7, #12]
 8016d9a:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016d9c:	6878      	ldr	r0, [r7, #4]
 8016d9e:	f000 f8c3 	bl	8016f28 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	2220      	movs	r2, #32
 8016da6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	2200      	movs	r2, #0
 8016dae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016db2:	2300      	movs	r3, #0
}
 8016db4:	4618      	mov	r0, r3
 8016db6:	3710      	adds	r7, #16
 8016db8:	46bd      	mov	sp, r7
 8016dba:	bd80      	pop	{r7, pc}

08016dbc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8016dbc:	b480      	push	{r7}
 8016dbe:	b085      	sub	sp, #20
 8016dc0:	af00      	add	r7, sp, #0
 8016dc2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016dca:	2b01      	cmp	r3, #1
 8016dcc:	d101      	bne.n	8016dd2 <HAL_UARTEx_DisableFifoMode+0x16>
 8016dce:	2302      	movs	r3, #2
 8016dd0:	e027      	b.n	8016e22 <HAL_UARTEx_DisableFifoMode+0x66>
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	2201      	movs	r2, #1
 8016dd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	2224      	movs	r2, #36	; 0x24
 8016dde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	681a      	ldr	r2, [r3, #0]
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	f022 0201 	bic.w	r2, r2, #1
 8016df8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8016e00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	2200      	movs	r2, #0
 8016e06:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	68fa      	ldr	r2, [r7, #12]
 8016e0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	2220      	movs	r2, #32
 8016e14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	2200      	movs	r2, #0
 8016e1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016e20:	2300      	movs	r3, #0
}
 8016e22:	4618      	mov	r0, r3
 8016e24:	3714      	adds	r7, #20
 8016e26:	46bd      	mov	sp, r7
 8016e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e2c:	4770      	bx	lr

08016e2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016e2e:	b580      	push	{r7, lr}
 8016e30:	b084      	sub	sp, #16
 8016e32:	af00      	add	r7, sp, #0
 8016e34:	6078      	str	r0, [r7, #4]
 8016e36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016e3e:	2b01      	cmp	r3, #1
 8016e40:	d101      	bne.n	8016e46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8016e42:	2302      	movs	r3, #2
 8016e44:	e02d      	b.n	8016ea2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	2201      	movs	r2, #1
 8016e4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	2224      	movs	r2, #36	; 0x24
 8016e52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	681a      	ldr	r2, [r3, #0]
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	f022 0201 	bic.w	r2, r2, #1
 8016e6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	689b      	ldr	r3, [r3, #8]
 8016e74:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	683a      	ldr	r2, [r7, #0]
 8016e7e:	430a      	orrs	r2, r1
 8016e80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016e82:	6878      	ldr	r0, [r7, #4]
 8016e84:	f000 f850 	bl	8016f28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	68fa      	ldr	r2, [r7, #12]
 8016e8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	2220      	movs	r2, #32
 8016e94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016ea0:	2300      	movs	r3, #0
}
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	3710      	adds	r7, #16
 8016ea6:	46bd      	mov	sp, r7
 8016ea8:	bd80      	pop	{r7, pc}

08016eaa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016eaa:	b580      	push	{r7, lr}
 8016eac:	b084      	sub	sp, #16
 8016eae:	af00      	add	r7, sp, #0
 8016eb0:	6078      	str	r0, [r7, #4]
 8016eb2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016eba:	2b01      	cmp	r3, #1
 8016ebc:	d101      	bne.n	8016ec2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8016ebe:	2302      	movs	r3, #2
 8016ec0:	e02d      	b.n	8016f1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	2201      	movs	r2, #1
 8016ec6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	2224      	movs	r2, #36	; 0x24
 8016ece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	681a      	ldr	r2, [r3, #0]
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	f022 0201 	bic.w	r2, r2, #1
 8016ee8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	681b      	ldr	r3, [r3, #0]
 8016eee:	689b      	ldr	r3, [r3, #8]
 8016ef0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	683a      	ldr	r2, [r7, #0]
 8016efa:	430a      	orrs	r2, r1
 8016efc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016efe:	6878      	ldr	r0, [r7, #4]
 8016f00:	f000 f812 	bl	8016f28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	68fa      	ldr	r2, [r7, #12]
 8016f0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	2220      	movs	r2, #32
 8016f10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	2200      	movs	r2, #0
 8016f18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016f1c:	2300      	movs	r3, #0
}
 8016f1e:	4618      	mov	r0, r3
 8016f20:	3710      	adds	r7, #16
 8016f22:	46bd      	mov	sp, r7
 8016f24:	bd80      	pop	{r7, pc}
	...

08016f28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8016f28:	b480      	push	{r7}
 8016f2a:	b085      	sub	sp, #20
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d108      	bne.n	8016f4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	2201      	movs	r2, #1
 8016f3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	2201      	movs	r2, #1
 8016f44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8016f48:	e031      	b.n	8016fae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8016f4a:	2310      	movs	r3, #16
 8016f4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8016f4e:	2310      	movs	r3, #16
 8016f50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	689b      	ldr	r3, [r3, #8]
 8016f58:	0e5b      	lsrs	r3, r3, #25
 8016f5a:	b2db      	uxtb	r3, r3
 8016f5c:	f003 0307 	and.w	r3, r3, #7
 8016f60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	689b      	ldr	r3, [r3, #8]
 8016f68:	0f5b      	lsrs	r3, r3, #29
 8016f6a:	b2db      	uxtb	r3, r3
 8016f6c:	f003 0307 	and.w	r3, r3, #7
 8016f70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016f72:	7bbb      	ldrb	r3, [r7, #14]
 8016f74:	7b3a      	ldrb	r2, [r7, #12]
 8016f76:	4911      	ldr	r1, [pc, #68]	; (8016fbc <UARTEx_SetNbDataToProcess+0x94>)
 8016f78:	5c8a      	ldrb	r2, [r1, r2]
 8016f7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8016f7e:	7b3a      	ldrb	r2, [r7, #12]
 8016f80:	490f      	ldr	r1, [pc, #60]	; (8016fc0 <UARTEx_SetNbDataToProcess+0x98>)
 8016f82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016f84:	fb93 f3f2 	sdiv	r3, r3, r2
 8016f88:	b29a      	uxth	r2, r3
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016f90:	7bfb      	ldrb	r3, [r7, #15]
 8016f92:	7b7a      	ldrb	r2, [r7, #13]
 8016f94:	4909      	ldr	r1, [pc, #36]	; (8016fbc <UARTEx_SetNbDataToProcess+0x94>)
 8016f96:	5c8a      	ldrb	r2, [r1, r2]
 8016f98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8016f9c:	7b7a      	ldrb	r2, [r7, #13]
 8016f9e:	4908      	ldr	r1, [pc, #32]	; (8016fc0 <UARTEx_SetNbDataToProcess+0x98>)
 8016fa0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016fa2:	fb93 f3f2 	sdiv	r3, r3, r2
 8016fa6:	b29a      	uxth	r2, r3
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8016fae:	bf00      	nop
 8016fb0:	3714      	adds	r7, #20
 8016fb2:	46bd      	mov	sp, r7
 8016fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb8:	4770      	bx	lr
 8016fba:	bf00      	nop
 8016fbc:	0801b554 	.word	0x0801b554
 8016fc0:	0801b55c 	.word	0x0801b55c

08016fc4 <__NVIC_SetPriority>:
{
 8016fc4:	b480      	push	{r7}
 8016fc6:	b083      	sub	sp, #12
 8016fc8:	af00      	add	r7, sp, #0
 8016fca:	4603      	mov	r3, r0
 8016fcc:	6039      	str	r1, [r7, #0]
 8016fce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8016fd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	db0a      	blt.n	8016fee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016fd8:	683b      	ldr	r3, [r7, #0]
 8016fda:	b2da      	uxtb	r2, r3
 8016fdc:	490c      	ldr	r1, [pc, #48]	; (8017010 <__NVIC_SetPriority+0x4c>)
 8016fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016fe2:	0112      	lsls	r2, r2, #4
 8016fe4:	b2d2      	uxtb	r2, r2
 8016fe6:	440b      	add	r3, r1
 8016fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016fec:	e00a      	b.n	8017004 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016fee:	683b      	ldr	r3, [r7, #0]
 8016ff0:	b2da      	uxtb	r2, r3
 8016ff2:	4908      	ldr	r1, [pc, #32]	; (8017014 <__NVIC_SetPriority+0x50>)
 8016ff4:	88fb      	ldrh	r3, [r7, #6]
 8016ff6:	f003 030f 	and.w	r3, r3, #15
 8016ffa:	3b04      	subs	r3, #4
 8016ffc:	0112      	lsls	r2, r2, #4
 8016ffe:	b2d2      	uxtb	r2, r2
 8017000:	440b      	add	r3, r1
 8017002:	761a      	strb	r2, [r3, #24]
}
 8017004:	bf00      	nop
 8017006:	370c      	adds	r7, #12
 8017008:	46bd      	mov	sp, r7
 801700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801700e:	4770      	bx	lr
 8017010:	e000e100 	.word	0xe000e100
 8017014:	e000ed00 	.word	0xe000ed00

08017018 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8017018:	b580      	push	{r7, lr}
 801701a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801701c:	4b05      	ldr	r3, [pc, #20]	; (8017034 <SysTick_Handler+0x1c>)
 801701e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8017020:	f002 faa0 	bl	8019564 <xTaskGetSchedulerState>
 8017024:	4603      	mov	r3, r0
 8017026:	2b01      	cmp	r3, #1
 8017028:	d001      	beq.n	801702e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801702a:	f003 f8bd 	bl	801a1a8 <xPortSysTickHandler>
  }
}
 801702e:	bf00      	nop
 8017030:	bd80      	pop	{r7, pc}
 8017032:	bf00      	nop
 8017034:	e000e010 	.word	0xe000e010

08017038 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8017038:	b580      	push	{r7, lr}
 801703a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801703c:	2100      	movs	r1, #0
 801703e:	f06f 0004 	mvn.w	r0, #4
 8017042:	f7ff ffbf 	bl	8016fc4 <__NVIC_SetPriority>
#endif
}
 8017046:	bf00      	nop
 8017048:	bd80      	pop	{r7, pc}
	...

0801704c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801704c:	b480      	push	{r7}
 801704e:	b083      	sub	sp, #12
 8017050:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017052:	f3ef 8305 	mrs	r3, IPSR
 8017056:	603b      	str	r3, [r7, #0]
  return(result);
 8017058:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801705a:	2b00      	cmp	r3, #0
 801705c:	d003      	beq.n	8017066 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801705e:	f06f 0305 	mvn.w	r3, #5
 8017062:	607b      	str	r3, [r7, #4]
 8017064:	e00c      	b.n	8017080 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8017066:	4b0a      	ldr	r3, [pc, #40]	; (8017090 <osKernelInitialize+0x44>)
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	2b00      	cmp	r3, #0
 801706c:	d105      	bne.n	801707a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801706e:	4b08      	ldr	r3, [pc, #32]	; (8017090 <osKernelInitialize+0x44>)
 8017070:	2201      	movs	r2, #1
 8017072:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8017074:	2300      	movs	r3, #0
 8017076:	607b      	str	r3, [r7, #4]
 8017078:	e002      	b.n	8017080 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801707a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801707e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8017080:	687b      	ldr	r3, [r7, #4]
}
 8017082:	4618      	mov	r0, r3
 8017084:	370c      	adds	r7, #12
 8017086:	46bd      	mov	sp, r7
 8017088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801708c:	4770      	bx	lr
 801708e:	bf00      	nop
 8017090:	2400201c 	.word	0x2400201c

08017094 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8017094:	b580      	push	{r7, lr}
 8017096:	b082      	sub	sp, #8
 8017098:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801709a:	f3ef 8305 	mrs	r3, IPSR
 801709e:	603b      	str	r3, [r7, #0]
  return(result);
 80170a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d003      	beq.n	80170ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80170a6:	f06f 0305 	mvn.w	r3, #5
 80170aa:	607b      	str	r3, [r7, #4]
 80170ac:	e010      	b.n	80170d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80170ae:	4b0b      	ldr	r3, [pc, #44]	; (80170dc <osKernelStart+0x48>)
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	2b01      	cmp	r3, #1
 80170b4:	d109      	bne.n	80170ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80170b6:	f7ff ffbf 	bl	8017038 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80170ba:	4b08      	ldr	r3, [pc, #32]	; (80170dc <osKernelStart+0x48>)
 80170bc:	2202      	movs	r2, #2
 80170be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80170c0:	f001 fd54 	bl	8018b6c <vTaskStartScheduler>
      stat = osOK;
 80170c4:	2300      	movs	r3, #0
 80170c6:	607b      	str	r3, [r7, #4]
 80170c8:	e002      	b.n	80170d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80170ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80170ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80170d0:	687b      	ldr	r3, [r7, #4]
}
 80170d2:	4618      	mov	r0, r3
 80170d4:	3708      	adds	r7, #8
 80170d6:	46bd      	mov	sp, r7
 80170d8:	bd80      	pop	{r7, pc}
 80170da:	bf00      	nop
 80170dc:	2400201c 	.word	0x2400201c

080170e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80170e0:	b580      	push	{r7, lr}
 80170e2:	b08e      	sub	sp, #56	; 0x38
 80170e4:	af04      	add	r7, sp, #16
 80170e6:	60f8      	str	r0, [r7, #12]
 80170e8:	60b9      	str	r1, [r7, #8]
 80170ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80170ec:	2300      	movs	r3, #0
 80170ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80170f0:	f3ef 8305 	mrs	r3, IPSR
 80170f4:	617b      	str	r3, [r7, #20]
  return(result);
 80170f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d17e      	bne.n	80171fa <osThreadNew+0x11a>
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d07b      	beq.n	80171fa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8017102:	2380      	movs	r3, #128	; 0x80
 8017104:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8017106:	2318      	movs	r3, #24
 8017108:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801710a:	2300      	movs	r3, #0
 801710c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801710e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017112:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d045      	beq.n	80171a6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	681b      	ldr	r3, [r3, #0]
 801711e:	2b00      	cmp	r3, #0
 8017120:	d002      	beq.n	8017128 <osThreadNew+0x48>
        name = attr->name;
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	699b      	ldr	r3, [r3, #24]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d002      	beq.n	8017136 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	699b      	ldr	r3, [r3, #24]
 8017134:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8017136:	69fb      	ldr	r3, [r7, #28]
 8017138:	2b00      	cmp	r3, #0
 801713a:	d008      	beq.n	801714e <osThreadNew+0x6e>
 801713c:	69fb      	ldr	r3, [r7, #28]
 801713e:	2b38      	cmp	r3, #56	; 0x38
 8017140:	d805      	bhi.n	801714e <osThreadNew+0x6e>
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	685b      	ldr	r3, [r3, #4]
 8017146:	f003 0301 	and.w	r3, r3, #1
 801714a:	2b00      	cmp	r3, #0
 801714c:	d001      	beq.n	8017152 <osThreadNew+0x72>
        return (NULL);
 801714e:	2300      	movs	r3, #0
 8017150:	e054      	b.n	80171fc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	695b      	ldr	r3, [r3, #20]
 8017156:	2b00      	cmp	r3, #0
 8017158:	d003      	beq.n	8017162 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	695b      	ldr	r3, [r3, #20]
 801715e:	089b      	lsrs	r3, r3, #2
 8017160:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	689b      	ldr	r3, [r3, #8]
 8017166:	2b00      	cmp	r3, #0
 8017168:	d00e      	beq.n	8017188 <osThreadNew+0xa8>
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	68db      	ldr	r3, [r3, #12]
 801716e:	2b5b      	cmp	r3, #91	; 0x5b
 8017170:	d90a      	bls.n	8017188 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017176:	2b00      	cmp	r3, #0
 8017178:	d006      	beq.n	8017188 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	695b      	ldr	r3, [r3, #20]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d002      	beq.n	8017188 <osThreadNew+0xa8>
        mem = 1;
 8017182:	2301      	movs	r3, #1
 8017184:	61bb      	str	r3, [r7, #24]
 8017186:	e010      	b.n	80171aa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	689b      	ldr	r3, [r3, #8]
 801718c:	2b00      	cmp	r3, #0
 801718e:	d10c      	bne.n	80171aa <osThreadNew+0xca>
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	68db      	ldr	r3, [r3, #12]
 8017194:	2b00      	cmp	r3, #0
 8017196:	d108      	bne.n	80171aa <osThreadNew+0xca>
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	691b      	ldr	r3, [r3, #16]
 801719c:	2b00      	cmp	r3, #0
 801719e:	d104      	bne.n	80171aa <osThreadNew+0xca>
          mem = 0;
 80171a0:	2300      	movs	r3, #0
 80171a2:	61bb      	str	r3, [r7, #24]
 80171a4:	e001      	b.n	80171aa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80171a6:	2300      	movs	r3, #0
 80171a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80171aa:	69bb      	ldr	r3, [r7, #24]
 80171ac:	2b01      	cmp	r3, #1
 80171ae:	d110      	bne.n	80171d2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80171b4:	687a      	ldr	r2, [r7, #4]
 80171b6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80171b8:	9202      	str	r2, [sp, #8]
 80171ba:	9301      	str	r3, [sp, #4]
 80171bc:	69fb      	ldr	r3, [r7, #28]
 80171be:	9300      	str	r3, [sp, #0]
 80171c0:	68bb      	ldr	r3, [r7, #8]
 80171c2:	6a3a      	ldr	r2, [r7, #32]
 80171c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80171c6:	68f8      	ldr	r0, [r7, #12]
 80171c8:	f001 f9f4 	bl	80185b4 <xTaskCreateStatic>
 80171cc:	4603      	mov	r3, r0
 80171ce:	613b      	str	r3, [r7, #16]
 80171d0:	e013      	b.n	80171fa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80171d2:	69bb      	ldr	r3, [r7, #24]
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d110      	bne.n	80171fa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80171d8:	6a3b      	ldr	r3, [r7, #32]
 80171da:	b29a      	uxth	r2, r3
 80171dc:	f107 0310 	add.w	r3, r7, #16
 80171e0:	9301      	str	r3, [sp, #4]
 80171e2:	69fb      	ldr	r3, [r7, #28]
 80171e4:	9300      	str	r3, [sp, #0]
 80171e6:	68bb      	ldr	r3, [r7, #8]
 80171e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80171ea:	68f8      	ldr	r0, [r7, #12]
 80171ec:	f001 fa3f 	bl	801866e <xTaskCreate>
 80171f0:	4603      	mov	r3, r0
 80171f2:	2b01      	cmp	r3, #1
 80171f4:	d001      	beq.n	80171fa <osThreadNew+0x11a>
            hTask = NULL;
 80171f6:	2300      	movs	r3, #0
 80171f8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80171fa:	693b      	ldr	r3, [r7, #16]
}
 80171fc:	4618      	mov	r0, r3
 80171fe:	3728      	adds	r7, #40	; 0x28
 8017200:	46bd      	mov	sp, r7
 8017202:	bd80      	pop	{r7, pc}

08017204 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8017204:	b480      	push	{r7}
 8017206:	b083      	sub	sp, #12
 8017208:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801720a:	f3ef 8305 	mrs	r3, IPSR
 801720e:	603b      	str	r3, [r7, #0]
  return(result);
 8017210:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017212:	2b00      	cmp	r3, #0
 8017214:	d003      	beq.n	801721e <osThreadYield+0x1a>
    stat = osErrorISR;
 8017216:	f06f 0305 	mvn.w	r3, #5
 801721a:	607b      	str	r3, [r7, #4]
 801721c:	e009      	b.n	8017232 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 801721e:	2300      	movs	r3, #0
 8017220:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8017222:	4b07      	ldr	r3, [pc, #28]	; (8017240 <osThreadYield+0x3c>)
 8017224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017228:	601a      	str	r2, [r3, #0]
 801722a:	f3bf 8f4f 	dsb	sy
 801722e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8017232:	687b      	ldr	r3, [r7, #4]
}
 8017234:	4618      	mov	r0, r3
 8017236:	370c      	adds	r7, #12
 8017238:	46bd      	mov	sp, r7
 801723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801723e:	4770      	bx	lr
 8017240:	e000ed04 	.word	0xe000ed04

08017244 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8017244:	b580      	push	{r7, lr}
 8017246:	b086      	sub	sp, #24
 8017248:	af00      	add	r7, sp, #0
 801724a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017250:	f3ef 8305 	mrs	r3, IPSR
 8017254:	60fb      	str	r3, [r7, #12]
  return(result);
 8017256:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017258:	2b00      	cmp	r3, #0
 801725a:	d003      	beq.n	8017264 <osThreadSuspend+0x20>
    stat = osErrorISR;
 801725c:	f06f 0305 	mvn.w	r3, #5
 8017260:	617b      	str	r3, [r7, #20]
 8017262:	e00b      	b.n	801727c <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8017264:	693b      	ldr	r3, [r7, #16]
 8017266:	2b00      	cmp	r3, #0
 8017268:	d103      	bne.n	8017272 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 801726a:	f06f 0303 	mvn.w	r3, #3
 801726e:	617b      	str	r3, [r7, #20]
 8017270:	e004      	b.n	801727c <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8017272:	2300      	movs	r3, #0
 8017274:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8017276:	6938      	ldr	r0, [r7, #16]
 8017278:	f001 fb72 	bl	8018960 <vTaskSuspend>
  }

  return (stat);
 801727c:	697b      	ldr	r3, [r7, #20]
}
 801727e:	4618      	mov	r0, r3
 8017280:	3718      	adds	r7, #24
 8017282:	46bd      	mov	sp, r7
 8017284:	bd80      	pop	{r7, pc}

08017286 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8017286:	b580      	push	{r7, lr}
 8017288:	b086      	sub	sp, #24
 801728a:	af00      	add	r7, sp, #0
 801728c:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017292:	f3ef 8305 	mrs	r3, IPSR
 8017296:	60fb      	str	r3, [r7, #12]
  return(result);
 8017298:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 801729a:	2b00      	cmp	r3, #0
 801729c:	d003      	beq.n	80172a6 <osThreadResume+0x20>
    stat = osErrorISR;
 801729e:	f06f 0305 	mvn.w	r3, #5
 80172a2:	617b      	str	r3, [r7, #20]
 80172a4:	e00b      	b.n	80172be <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 80172a6:	693b      	ldr	r3, [r7, #16]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d103      	bne.n	80172b4 <osThreadResume+0x2e>
    stat = osErrorParameter;
 80172ac:	f06f 0303 	mvn.w	r3, #3
 80172b0:	617b      	str	r3, [r7, #20]
 80172b2:	e004      	b.n	80172be <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 80172b4:	2300      	movs	r3, #0
 80172b6:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 80172b8:	6938      	ldr	r0, [r7, #16]
 80172ba:	f001 fbf9 	bl	8018ab0 <vTaskResume>
  }

  return (stat);
 80172be:	697b      	ldr	r3, [r7, #20]
}
 80172c0:	4618      	mov	r0, r3
 80172c2:	3718      	adds	r7, #24
 80172c4:	46bd      	mov	sp, r7
 80172c6:	bd80      	pop	{r7, pc}

080172c8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80172c8:	b580      	push	{r7, lr}
 80172ca:	b084      	sub	sp, #16
 80172cc:	af00      	add	r7, sp, #0
 80172ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80172d0:	f3ef 8305 	mrs	r3, IPSR
 80172d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80172d6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d003      	beq.n	80172e4 <osDelay+0x1c>
    stat = osErrorISR;
 80172dc:	f06f 0305 	mvn.w	r3, #5
 80172e0:	60fb      	str	r3, [r7, #12]
 80172e2:	e007      	b.n	80172f4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80172e4:	2300      	movs	r3, #0
 80172e6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d002      	beq.n	80172f4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80172ee:	6878      	ldr	r0, [r7, #4]
 80172f0:	f001 fb02 	bl	80188f8 <vTaskDelay>
    }
  }

  return (stat);
 80172f4:	68fb      	ldr	r3, [r7, #12]
}
 80172f6:	4618      	mov	r0, r3
 80172f8:	3710      	adds	r7, #16
 80172fa:	46bd      	mov	sp, r7
 80172fc:	bd80      	pop	{r7, pc}

080172fe <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80172fe:	b580      	push	{r7, lr}
 8017300:	b086      	sub	sp, #24
 8017302:	af00      	add	r7, sp, #0
 8017304:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8017306:	2300      	movs	r3, #0
 8017308:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801730a:	f3ef 8305 	mrs	r3, IPSR
 801730e:	60fb      	str	r3, [r7, #12]
  return(result);
 8017310:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8017312:	2b00      	cmp	r3, #0
 8017314:	d12d      	bne.n	8017372 <osEventFlagsNew+0x74>
    mem = -1;
 8017316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801731a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	2b00      	cmp	r3, #0
 8017320:	d015      	beq.n	801734e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	689b      	ldr	r3, [r3, #8]
 8017326:	2b00      	cmp	r3, #0
 8017328:	d006      	beq.n	8017338 <osEventFlagsNew+0x3a>
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	68db      	ldr	r3, [r3, #12]
 801732e:	2b1f      	cmp	r3, #31
 8017330:	d902      	bls.n	8017338 <osEventFlagsNew+0x3a>
        mem = 1;
 8017332:	2301      	movs	r3, #1
 8017334:	613b      	str	r3, [r7, #16]
 8017336:	e00c      	b.n	8017352 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	689b      	ldr	r3, [r3, #8]
 801733c:	2b00      	cmp	r3, #0
 801733e:	d108      	bne.n	8017352 <osEventFlagsNew+0x54>
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	68db      	ldr	r3, [r3, #12]
 8017344:	2b00      	cmp	r3, #0
 8017346:	d104      	bne.n	8017352 <osEventFlagsNew+0x54>
          mem = 0;
 8017348:	2300      	movs	r3, #0
 801734a:	613b      	str	r3, [r7, #16]
 801734c:	e001      	b.n	8017352 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 801734e:	2300      	movs	r3, #0
 8017350:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8017352:	693b      	ldr	r3, [r7, #16]
 8017354:	2b01      	cmp	r3, #1
 8017356:	d106      	bne.n	8017366 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	689b      	ldr	r3, [r3, #8]
 801735c:	4618      	mov	r0, r3
 801735e:	f000 f91d 	bl	801759c <xEventGroupCreateStatic>
 8017362:	6178      	str	r0, [r7, #20]
 8017364:	e005      	b.n	8017372 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8017366:	693b      	ldr	r3, [r7, #16]
 8017368:	2b00      	cmp	r3, #0
 801736a:	d102      	bne.n	8017372 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 801736c:	f000 f94d 	bl	801760a <xEventGroupCreate>
 8017370:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8017372:	697b      	ldr	r3, [r7, #20]
}
 8017374:	4618      	mov	r0, r3
 8017376:	3718      	adds	r7, #24
 8017378:	46bd      	mov	sp, r7
 801737a:	bd80      	pop	{r7, pc}

0801737c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 801737c:	b580      	push	{r7, lr}
 801737e:	b086      	sub	sp, #24
 8017380:	af00      	add	r7, sp, #0
 8017382:	6078      	str	r0, [r7, #4]
 8017384:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801738a:	693b      	ldr	r3, [r7, #16]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d004      	beq.n	801739a <osEventFlagsSet+0x1e>
 8017390:	683b      	ldr	r3, [r7, #0]
 8017392:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017396:	2b00      	cmp	r3, #0
 8017398:	d003      	beq.n	80173a2 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 801739a:	f06f 0303 	mvn.w	r3, #3
 801739e:	617b      	str	r3, [r7, #20]
 80173a0:	e028      	b.n	80173f4 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80173a2:	f3ef 8305 	mrs	r3, IPSR
 80173a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80173a8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d01d      	beq.n	80173ea <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80173ae:	2300      	movs	r3, #0
 80173b0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80173b2:	f107 0308 	add.w	r3, r7, #8
 80173b6:	461a      	mov	r2, r3
 80173b8:	6839      	ldr	r1, [r7, #0]
 80173ba:	6938      	ldr	r0, [r7, #16]
 80173bc:	f000 fb46 	bl	8017a4c <xEventGroupSetBitsFromISR>
 80173c0:	4603      	mov	r3, r0
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d103      	bne.n	80173ce <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80173c6:	f06f 0302 	mvn.w	r3, #2
 80173ca:	617b      	str	r3, [r7, #20]
 80173cc:	e012      	b.n	80173f4 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80173ce:	683b      	ldr	r3, [r7, #0]
 80173d0:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80173d2:	68bb      	ldr	r3, [r7, #8]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d00d      	beq.n	80173f4 <osEventFlagsSet+0x78>
 80173d8:	4b09      	ldr	r3, [pc, #36]	; (8017400 <osEventFlagsSet+0x84>)
 80173da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80173de:	601a      	str	r2, [r3, #0]
 80173e0:	f3bf 8f4f 	dsb	sy
 80173e4:	f3bf 8f6f 	isb	sy
 80173e8:	e004      	b.n	80173f4 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80173ea:	6839      	ldr	r1, [r7, #0]
 80173ec:	6938      	ldr	r0, [r7, #16]
 80173ee:	f000 fa65 	bl	80178bc <xEventGroupSetBits>
 80173f2:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80173f4:	697b      	ldr	r3, [r7, #20]
}
 80173f6:	4618      	mov	r0, r3
 80173f8:	3718      	adds	r7, #24
 80173fa:	46bd      	mov	sp, r7
 80173fc:	bd80      	pop	{r7, pc}
 80173fe:	bf00      	nop
 8017400:	e000ed04 	.word	0xe000ed04

08017404 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8017404:	b580      	push	{r7, lr}
 8017406:	b086      	sub	sp, #24
 8017408:	af00      	add	r7, sp, #0
 801740a:	6078      	str	r0, [r7, #4]
 801740c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8017412:	693b      	ldr	r3, [r7, #16]
 8017414:	2b00      	cmp	r3, #0
 8017416:	d004      	beq.n	8017422 <osEventFlagsClear+0x1e>
 8017418:	683b      	ldr	r3, [r7, #0]
 801741a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801741e:	2b00      	cmp	r3, #0
 8017420:	d003      	beq.n	801742a <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8017422:	f06f 0303 	mvn.w	r3, #3
 8017426:	617b      	str	r3, [r7, #20]
 8017428:	e019      	b.n	801745e <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801742a:	f3ef 8305 	mrs	r3, IPSR
 801742e:	60fb      	str	r3, [r7, #12]
  return(result);
 8017430:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8017432:	2b00      	cmp	r3, #0
 8017434:	d00e      	beq.n	8017454 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8017436:	6938      	ldr	r0, [r7, #16]
 8017438:	f000 fa1c 	bl	8017874 <xEventGroupGetBitsFromISR>
 801743c:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 801743e:	6839      	ldr	r1, [r7, #0]
 8017440:	6938      	ldr	r0, [r7, #16]
 8017442:	f000 fa03 	bl	801784c <xEventGroupClearBitsFromISR>
 8017446:	4603      	mov	r3, r0
 8017448:	2b00      	cmp	r3, #0
 801744a:	d108      	bne.n	801745e <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 801744c:	f06f 0302 	mvn.w	r3, #2
 8017450:	617b      	str	r3, [r7, #20]
 8017452:	e004      	b.n	801745e <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8017454:	6839      	ldr	r1, [r7, #0]
 8017456:	6938      	ldr	r0, [r7, #16]
 8017458:	f000 f9c0 	bl	80177dc <xEventGroupClearBits>
 801745c:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 801745e:	697b      	ldr	r3, [r7, #20]
}
 8017460:	4618      	mov	r0, r3
 8017462:	3718      	adds	r7, #24
 8017464:	46bd      	mov	sp, r7
 8017466:	bd80      	pop	{r7, pc}

08017468 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8017468:	b580      	push	{r7, lr}
 801746a:	b08c      	sub	sp, #48	; 0x30
 801746c:	af02      	add	r7, sp, #8
 801746e:	60f8      	str	r0, [r7, #12]
 8017470:	60b9      	str	r1, [r7, #8]
 8017472:	607a      	str	r2, [r7, #4]
 8017474:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8017476:	68fb      	ldr	r3, [r7, #12]
 8017478:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801747a:	69bb      	ldr	r3, [r7, #24]
 801747c:	2b00      	cmp	r3, #0
 801747e:	d004      	beq.n	801748a <osEventFlagsWait+0x22>
 8017480:	68bb      	ldr	r3, [r7, #8]
 8017482:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017486:	2b00      	cmp	r3, #0
 8017488:	d003      	beq.n	8017492 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 801748a:	f06f 0303 	mvn.w	r3, #3
 801748e:	61fb      	str	r3, [r7, #28]
 8017490:	e04b      	b.n	801752a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017492:	f3ef 8305 	mrs	r3, IPSR
 8017496:	617b      	str	r3, [r7, #20]
  return(result);
 8017498:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801749a:	2b00      	cmp	r3, #0
 801749c:	d003      	beq.n	80174a6 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 801749e:	f06f 0305 	mvn.w	r3, #5
 80174a2:	61fb      	str	r3, [r7, #28]
 80174a4:	e041      	b.n	801752a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	f003 0301 	and.w	r3, r3, #1
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d002      	beq.n	80174b6 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80174b0:	2301      	movs	r3, #1
 80174b2:	627b      	str	r3, [r7, #36]	; 0x24
 80174b4:	e001      	b.n	80174ba <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80174b6:	2300      	movs	r3, #0
 80174b8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	f003 0302 	and.w	r3, r3, #2
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d002      	beq.n	80174ca <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80174c4:	2300      	movs	r3, #0
 80174c6:	623b      	str	r3, [r7, #32]
 80174c8:	e001      	b.n	80174ce <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80174ca:	2301      	movs	r3, #1
 80174cc:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80174ce:	683b      	ldr	r3, [r7, #0]
 80174d0:	9300      	str	r3, [sp, #0]
 80174d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174d4:	6a3a      	ldr	r2, [r7, #32]
 80174d6:	68b9      	ldr	r1, [r7, #8]
 80174d8:	69b8      	ldr	r0, [r7, #24]
 80174da:	f000 f8b1 	bl	8017640 <xEventGroupWaitBits>
 80174de:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	f003 0301 	and.w	r3, r3, #1
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d010      	beq.n	801750c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80174ea:	68ba      	ldr	r2, [r7, #8]
 80174ec:	69fb      	ldr	r3, [r7, #28]
 80174ee:	4013      	ands	r3, r2
 80174f0:	68ba      	ldr	r2, [r7, #8]
 80174f2:	429a      	cmp	r2, r3
 80174f4:	d019      	beq.n	801752a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80174f6:	683b      	ldr	r3, [r7, #0]
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d003      	beq.n	8017504 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80174fc:	f06f 0301 	mvn.w	r3, #1
 8017500:	61fb      	str	r3, [r7, #28]
 8017502:	e012      	b.n	801752a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8017504:	f06f 0302 	mvn.w	r3, #2
 8017508:	61fb      	str	r3, [r7, #28]
 801750a:	e00e      	b.n	801752a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 801750c:	68ba      	ldr	r2, [r7, #8]
 801750e:	69fb      	ldr	r3, [r7, #28]
 8017510:	4013      	ands	r3, r2
 8017512:	2b00      	cmp	r3, #0
 8017514:	d109      	bne.n	801752a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8017516:	683b      	ldr	r3, [r7, #0]
 8017518:	2b00      	cmp	r3, #0
 801751a:	d003      	beq.n	8017524 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 801751c:	f06f 0301 	mvn.w	r3, #1
 8017520:	61fb      	str	r3, [r7, #28]
 8017522:	e002      	b.n	801752a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8017524:	f06f 0302 	mvn.w	r3, #2
 8017528:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 801752a:	69fb      	ldr	r3, [r7, #28]
}
 801752c:	4618      	mov	r0, r3
 801752e:	3728      	adds	r7, #40	; 0x28
 8017530:	46bd      	mov	sp, r7
 8017532:	bd80      	pop	{r7, pc}

08017534 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8017534:	b480      	push	{r7}
 8017536:	b085      	sub	sp, #20
 8017538:	af00      	add	r7, sp, #0
 801753a:	60f8      	str	r0, [r7, #12]
 801753c:	60b9      	str	r1, [r7, #8]
 801753e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	4a07      	ldr	r2, [pc, #28]	; (8017560 <vApplicationGetIdleTaskMemory+0x2c>)
 8017544:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8017546:	68bb      	ldr	r3, [r7, #8]
 8017548:	4a06      	ldr	r2, [pc, #24]	; (8017564 <vApplicationGetIdleTaskMemory+0x30>)
 801754a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	2280      	movs	r2, #128	; 0x80
 8017550:	601a      	str	r2, [r3, #0]
}
 8017552:	bf00      	nop
 8017554:	3714      	adds	r7, #20
 8017556:	46bd      	mov	sp, r7
 8017558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801755c:	4770      	bx	lr
 801755e:	bf00      	nop
 8017560:	24002020 	.word	0x24002020
 8017564:	2400207c 	.word	0x2400207c

08017568 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8017568:	b480      	push	{r7}
 801756a:	b085      	sub	sp, #20
 801756c:	af00      	add	r7, sp, #0
 801756e:	60f8      	str	r0, [r7, #12]
 8017570:	60b9      	str	r1, [r7, #8]
 8017572:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8017574:	68fb      	ldr	r3, [r7, #12]
 8017576:	4a07      	ldr	r2, [pc, #28]	; (8017594 <vApplicationGetTimerTaskMemory+0x2c>)
 8017578:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801757a:	68bb      	ldr	r3, [r7, #8]
 801757c:	4a06      	ldr	r2, [pc, #24]	; (8017598 <vApplicationGetTimerTaskMemory+0x30>)
 801757e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017586:	601a      	str	r2, [r3, #0]
}
 8017588:	bf00      	nop
 801758a:	3714      	adds	r7, #20
 801758c:	46bd      	mov	sp, r7
 801758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017592:	4770      	bx	lr
 8017594:	2400227c 	.word	0x2400227c
 8017598:	240022d8 	.word	0x240022d8

0801759c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 801759c:	b580      	push	{r7, lr}
 801759e:	b086      	sub	sp, #24
 80175a0:	af00      	add	r7, sp, #0
 80175a2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d10a      	bne.n	80175c0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80175aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175ae:	f383 8811 	msr	BASEPRI, r3
 80175b2:	f3bf 8f6f 	isb	sy
 80175b6:	f3bf 8f4f 	dsb	sy
 80175ba:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80175bc:	bf00      	nop
 80175be:	e7fe      	b.n	80175be <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80175c0:	2320      	movs	r3, #32
 80175c2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80175c4:	68bb      	ldr	r3, [r7, #8]
 80175c6:	2b20      	cmp	r3, #32
 80175c8:	d00a      	beq.n	80175e0 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80175ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175ce:	f383 8811 	msr	BASEPRI, r3
 80175d2:	f3bf 8f6f 	isb	sy
 80175d6:	f3bf 8f4f 	dsb	sy
 80175da:	60fb      	str	r3, [r7, #12]
}
 80175dc:	bf00      	nop
 80175de:	e7fe      	b.n	80175de <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80175e4:	697b      	ldr	r3, [r7, #20]
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d00a      	beq.n	8017600 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80175ea:	697b      	ldr	r3, [r7, #20]
 80175ec:	2200      	movs	r2, #0
 80175ee:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80175f0:	697b      	ldr	r3, [r7, #20]
 80175f2:	3304      	adds	r3, #4
 80175f4:	4618      	mov	r0, r3
 80175f6:	f000 fa3d 	bl	8017a74 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80175fa:	697b      	ldr	r3, [r7, #20]
 80175fc:	2201      	movs	r2, #1
 80175fe:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8017600:	697b      	ldr	r3, [r7, #20]
	}
 8017602:	4618      	mov	r0, r3
 8017604:	3718      	adds	r7, #24
 8017606:	46bd      	mov	sp, r7
 8017608:	bd80      	pop	{r7, pc}

0801760a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801760a:	b580      	push	{r7, lr}
 801760c:	b082      	sub	sp, #8
 801760e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8017610:	2020      	movs	r0, #32
 8017612:	f002 fe59 	bl	801a2c8 <pvPortMalloc>
 8017616:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	2b00      	cmp	r3, #0
 801761c:	d00a      	beq.n	8017634 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	2200      	movs	r2, #0
 8017622:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	3304      	adds	r3, #4
 8017628:	4618      	mov	r0, r3
 801762a:	f000 fa23 	bl	8017a74 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	2200      	movs	r2, #0
 8017632:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8017634:	687b      	ldr	r3, [r7, #4]
	}
 8017636:	4618      	mov	r0, r3
 8017638:	3708      	adds	r7, #8
 801763a:	46bd      	mov	sp, r7
 801763c:	bd80      	pop	{r7, pc}
	...

08017640 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8017640:	b580      	push	{r7, lr}
 8017642:	b090      	sub	sp, #64	; 0x40
 8017644:	af00      	add	r7, sp, #0
 8017646:	60f8      	str	r0, [r7, #12]
 8017648:	60b9      	str	r1, [r7, #8]
 801764a:	607a      	str	r2, [r7, #4]
 801764c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801764e:	68fb      	ldr	r3, [r7, #12]
 8017650:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8017652:	2300      	movs	r3, #0
 8017654:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8017656:	2300      	movs	r3, #0
 8017658:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801765a:	68fb      	ldr	r3, [r7, #12]
 801765c:	2b00      	cmp	r3, #0
 801765e:	d10a      	bne.n	8017676 <xEventGroupWaitBits+0x36>
	__asm volatile
 8017660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017664:	f383 8811 	msr	BASEPRI, r3
 8017668:	f3bf 8f6f 	isb	sy
 801766c:	f3bf 8f4f 	dsb	sy
 8017670:	623b      	str	r3, [r7, #32]
}
 8017672:	bf00      	nop
 8017674:	e7fe      	b.n	8017674 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8017676:	68bb      	ldr	r3, [r7, #8]
 8017678:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801767c:	2b00      	cmp	r3, #0
 801767e:	d00a      	beq.n	8017696 <xEventGroupWaitBits+0x56>
	__asm volatile
 8017680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017684:	f383 8811 	msr	BASEPRI, r3
 8017688:	f3bf 8f6f 	isb	sy
 801768c:	f3bf 8f4f 	dsb	sy
 8017690:	61fb      	str	r3, [r7, #28]
}
 8017692:	bf00      	nop
 8017694:	e7fe      	b.n	8017694 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8017696:	68bb      	ldr	r3, [r7, #8]
 8017698:	2b00      	cmp	r3, #0
 801769a:	d10a      	bne.n	80176b2 <xEventGroupWaitBits+0x72>
	__asm volatile
 801769c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176a0:	f383 8811 	msr	BASEPRI, r3
 80176a4:	f3bf 8f6f 	isb	sy
 80176a8:	f3bf 8f4f 	dsb	sy
 80176ac:	61bb      	str	r3, [r7, #24]
}
 80176ae:	bf00      	nop
 80176b0:	e7fe      	b.n	80176b0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80176b2:	f001 ff57 	bl	8019564 <xTaskGetSchedulerState>
 80176b6:	4603      	mov	r3, r0
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d102      	bne.n	80176c2 <xEventGroupWaitBits+0x82>
 80176bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d101      	bne.n	80176c6 <xEventGroupWaitBits+0x86>
 80176c2:	2301      	movs	r3, #1
 80176c4:	e000      	b.n	80176c8 <xEventGroupWaitBits+0x88>
 80176c6:	2300      	movs	r3, #0
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d10a      	bne.n	80176e2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80176cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176d0:	f383 8811 	msr	BASEPRI, r3
 80176d4:	f3bf 8f6f 	isb	sy
 80176d8:	f3bf 8f4f 	dsb	sy
 80176dc:	617b      	str	r3, [r7, #20]
}
 80176de:	bf00      	nop
 80176e0:	e7fe      	b.n	80176e0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80176e2:	f001 faa9 	bl	8018c38 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80176e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80176ec:	683a      	ldr	r2, [r7, #0]
 80176ee:	68b9      	ldr	r1, [r7, #8]
 80176f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80176f2:	f000 f988 	bl	8017a06 <prvTestWaitCondition>
 80176f6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80176f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d00e      	beq.n	801771c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80176fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017700:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8017702:	2300      	movs	r3, #0
 8017704:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d028      	beq.n	801775e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801770c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801770e:	681a      	ldr	r2, [r3, #0]
 8017710:	68bb      	ldr	r3, [r7, #8]
 8017712:	43db      	mvns	r3, r3
 8017714:	401a      	ands	r2, r3
 8017716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017718:	601a      	str	r2, [r3, #0]
 801771a:	e020      	b.n	801775e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 801771c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801771e:	2b00      	cmp	r3, #0
 8017720:	d104      	bne.n	801772c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8017722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017724:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8017726:	2301      	movs	r3, #1
 8017728:	633b      	str	r3, [r7, #48]	; 0x30
 801772a:	e018      	b.n	801775e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	2b00      	cmp	r3, #0
 8017730:	d003      	beq.n	801773a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8017732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017734:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017738:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 801773a:	683b      	ldr	r3, [r7, #0]
 801773c:	2b00      	cmp	r3, #0
 801773e:	d003      	beq.n	8017748 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8017740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017742:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8017746:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8017748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801774a:	1d18      	adds	r0, r3, #4
 801774c:	68ba      	ldr	r2, [r7, #8]
 801774e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017750:	4313      	orrs	r3, r2
 8017752:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017754:	4619      	mov	r1, r3
 8017756:	f001 fc7d 	bl	8019054 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801775a:	2300      	movs	r3, #0
 801775c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 801775e:	f001 fa79 	bl	8018c54 <xTaskResumeAll>
 8017762:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8017764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017766:	2b00      	cmp	r3, #0
 8017768:	d031      	beq.n	80177ce <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 801776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801776c:	2b00      	cmp	r3, #0
 801776e:	d107      	bne.n	8017780 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8017770:	4b19      	ldr	r3, [pc, #100]	; (80177d8 <xEventGroupWaitBits+0x198>)
 8017772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017776:	601a      	str	r2, [r3, #0]
 8017778:	f3bf 8f4f 	dsb	sy
 801777c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8017780:	f001 ff7c 	bl	801967c <uxTaskResetEventItemValue>
 8017784:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8017786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801778c:	2b00      	cmp	r3, #0
 801778e:	d11a      	bne.n	80177c6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8017790:	f002 fc78 	bl	801a084 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8017794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801779a:	683a      	ldr	r2, [r7, #0]
 801779c:	68b9      	ldr	r1, [r7, #8]
 801779e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80177a0:	f000 f931 	bl	8017a06 <prvTestWaitCondition>
 80177a4:	4603      	mov	r3, r0
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d009      	beq.n	80177be <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d006      	beq.n	80177be <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80177b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177b2:	681a      	ldr	r2, [r3, #0]
 80177b4:	68bb      	ldr	r3, [r7, #8]
 80177b6:	43db      	mvns	r3, r3
 80177b8:	401a      	ands	r2, r3
 80177ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177bc:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80177be:	2301      	movs	r3, #1
 80177c0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80177c2:	f002 fc8f 	bl	801a0e4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80177c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80177c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80177cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80177ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80177d0:	4618      	mov	r0, r3
 80177d2:	3740      	adds	r7, #64	; 0x40
 80177d4:	46bd      	mov	sp, r7
 80177d6:	bd80      	pop	{r7, pc}
 80177d8:	e000ed04 	.word	0xe000ed04

080177dc <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80177dc:	b580      	push	{r7, lr}
 80177de:	b086      	sub	sp, #24
 80177e0:	af00      	add	r7, sp, #0
 80177e2:	6078      	str	r0, [r7, #4]
 80177e4:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d10a      	bne.n	8017806 <xEventGroupClearBits+0x2a>
	__asm volatile
 80177f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177f4:	f383 8811 	msr	BASEPRI, r3
 80177f8:	f3bf 8f6f 	isb	sy
 80177fc:	f3bf 8f4f 	dsb	sy
 8017800:	60fb      	str	r3, [r7, #12]
}
 8017802:	bf00      	nop
 8017804:	e7fe      	b.n	8017804 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8017806:	683b      	ldr	r3, [r7, #0]
 8017808:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801780c:	2b00      	cmp	r3, #0
 801780e:	d00a      	beq.n	8017826 <xEventGroupClearBits+0x4a>
	__asm volatile
 8017810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017814:	f383 8811 	msr	BASEPRI, r3
 8017818:	f3bf 8f6f 	isb	sy
 801781c:	f3bf 8f4f 	dsb	sy
 8017820:	60bb      	str	r3, [r7, #8]
}
 8017822:	bf00      	nop
 8017824:	e7fe      	b.n	8017824 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8017826:	f002 fc2d 	bl	801a084 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 801782a:	697b      	ldr	r3, [r7, #20]
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8017830:	697b      	ldr	r3, [r7, #20]
 8017832:	681a      	ldr	r2, [r3, #0]
 8017834:	683b      	ldr	r3, [r7, #0]
 8017836:	43db      	mvns	r3, r3
 8017838:	401a      	ands	r2, r3
 801783a:	697b      	ldr	r3, [r7, #20]
 801783c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 801783e:	f002 fc51 	bl	801a0e4 <vPortExitCritical>

	return uxReturn;
 8017842:	693b      	ldr	r3, [r7, #16]
}
 8017844:	4618      	mov	r0, r3
 8017846:	3718      	adds	r7, #24
 8017848:	46bd      	mov	sp, r7
 801784a:	bd80      	pop	{r7, pc}

0801784c <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 801784c:	b580      	push	{r7, lr}
 801784e:	b084      	sub	sp, #16
 8017850:	af00      	add	r7, sp, #0
 8017852:	6078      	str	r0, [r7, #4]
 8017854:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8017856:	2300      	movs	r3, #0
 8017858:	683a      	ldr	r2, [r7, #0]
 801785a:	6879      	ldr	r1, [r7, #4]
 801785c:	4804      	ldr	r0, [pc, #16]	; (8017870 <xEventGroupClearBitsFromISR+0x24>)
 801785e:	f002 fac7 	bl	8019df0 <xTimerPendFunctionCallFromISR>
 8017862:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8017864:	68fb      	ldr	r3, [r7, #12]
	}
 8017866:	4618      	mov	r0, r3
 8017868:	3710      	adds	r7, #16
 801786a:	46bd      	mov	sp, r7
 801786c:	bd80      	pop	{r7, pc}
 801786e:	bf00      	nop
 8017870:	080179ed 	.word	0x080179ed

08017874 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8017874:	b480      	push	{r7}
 8017876:	b089      	sub	sp, #36	; 0x24
 8017878:	af00      	add	r7, sp, #0
 801787a:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8017880:	f3ef 8211 	mrs	r2, BASEPRI
 8017884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017888:	f383 8811 	msr	BASEPRI, r3
 801788c:	f3bf 8f6f 	isb	sy
 8017890:	f3bf 8f4f 	dsb	sy
 8017894:	60fa      	str	r2, [r7, #12]
 8017896:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017898:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801789a:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 801789c:	69fb      	ldr	r3, [r7, #28]
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	617b      	str	r3, [r7, #20]
 80178a2:	69bb      	ldr	r3, [r7, #24]
 80178a4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80178a6:	693b      	ldr	r3, [r7, #16]
 80178a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80178ac:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80178ae:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80178b0:	4618      	mov	r0, r3
 80178b2:	3724      	adds	r7, #36	; 0x24
 80178b4:	46bd      	mov	sp, r7
 80178b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ba:	4770      	bx	lr

080178bc <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80178bc:	b580      	push	{r7, lr}
 80178be:	b08e      	sub	sp, #56	; 0x38
 80178c0:	af00      	add	r7, sp, #0
 80178c2:	6078      	str	r0, [r7, #4]
 80178c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80178c6:	2300      	movs	r3, #0
 80178c8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80178ce:	2300      	movs	r3, #0
 80178d0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d10a      	bne.n	80178ee <xEventGroupSetBits+0x32>
	__asm volatile
 80178d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178dc:	f383 8811 	msr	BASEPRI, r3
 80178e0:	f3bf 8f6f 	isb	sy
 80178e4:	f3bf 8f4f 	dsb	sy
 80178e8:	613b      	str	r3, [r7, #16]
}
 80178ea:	bf00      	nop
 80178ec:	e7fe      	b.n	80178ec <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80178ee:	683b      	ldr	r3, [r7, #0]
 80178f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d00a      	beq.n	801790e <xEventGroupSetBits+0x52>
	__asm volatile
 80178f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178fc:	f383 8811 	msr	BASEPRI, r3
 8017900:	f3bf 8f6f 	isb	sy
 8017904:	f3bf 8f4f 	dsb	sy
 8017908:	60fb      	str	r3, [r7, #12]
}
 801790a:	bf00      	nop
 801790c:	e7fe      	b.n	801790c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 801790e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017910:	3304      	adds	r3, #4
 8017912:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017916:	3308      	adds	r3, #8
 8017918:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801791a:	f001 f98d 	bl	8018c38 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 801791e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017920:	68db      	ldr	r3, [r3, #12]
 8017922:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8017924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017926:	681a      	ldr	r2, [r3, #0]
 8017928:	683b      	ldr	r3, [r7, #0]
 801792a:	431a      	orrs	r2, r3
 801792c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801792e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8017930:	e03c      	b.n	80179ac <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8017932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017934:	685b      	ldr	r3, [r3, #4]
 8017936:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8017938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 801793e:	2300      	movs	r3, #0
 8017940:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8017942:	69bb      	ldr	r3, [r7, #24]
 8017944:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017948:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801794a:	69bb      	ldr	r3, [r7, #24]
 801794c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017950:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8017952:	697b      	ldr	r3, [r7, #20]
 8017954:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8017958:	2b00      	cmp	r3, #0
 801795a:	d108      	bne.n	801796e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 801795c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801795e:	681a      	ldr	r2, [r3, #0]
 8017960:	69bb      	ldr	r3, [r7, #24]
 8017962:	4013      	ands	r3, r2
 8017964:	2b00      	cmp	r3, #0
 8017966:	d00b      	beq.n	8017980 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8017968:	2301      	movs	r3, #1
 801796a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801796c:	e008      	b.n	8017980 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801796e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017970:	681a      	ldr	r2, [r3, #0]
 8017972:	69bb      	ldr	r3, [r7, #24]
 8017974:	4013      	ands	r3, r2
 8017976:	69ba      	ldr	r2, [r7, #24]
 8017978:	429a      	cmp	r2, r3
 801797a:	d101      	bne.n	8017980 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 801797c:	2301      	movs	r3, #1
 801797e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8017980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017982:	2b00      	cmp	r3, #0
 8017984:	d010      	beq.n	80179a8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8017986:	697b      	ldr	r3, [r7, #20]
 8017988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801798c:	2b00      	cmp	r3, #0
 801798e:	d003      	beq.n	8017998 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8017990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017992:	69bb      	ldr	r3, [r7, #24]
 8017994:	4313      	orrs	r3, r2
 8017996:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8017998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80179a0:	4619      	mov	r1, r3
 80179a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80179a4:	f001 fc22 	bl	80191ec <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80179a8:	69fb      	ldr	r3, [r7, #28]
 80179aa:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80179ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80179ae:	6a3b      	ldr	r3, [r7, #32]
 80179b0:	429a      	cmp	r2, r3
 80179b2:	d1be      	bne.n	8017932 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80179b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179b6:	681a      	ldr	r2, [r3, #0]
 80179b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179ba:	43db      	mvns	r3, r3
 80179bc:	401a      	ands	r2, r3
 80179be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179c0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80179c2:	f001 f947 	bl	8018c54 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80179c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179c8:	681b      	ldr	r3, [r3, #0]
}
 80179ca:	4618      	mov	r0, r3
 80179cc:	3738      	adds	r7, #56	; 0x38
 80179ce:	46bd      	mov	sp, r7
 80179d0:	bd80      	pop	{r7, pc}

080179d2 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80179d2:	b580      	push	{r7, lr}
 80179d4:	b082      	sub	sp, #8
 80179d6:	af00      	add	r7, sp, #0
 80179d8:	6078      	str	r0, [r7, #4]
 80179da:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80179dc:	6839      	ldr	r1, [r7, #0]
 80179de:	6878      	ldr	r0, [r7, #4]
 80179e0:	f7ff ff6c 	bl	80178bc <xEventGroupSetBits>
}
 80179e4:	bf00      	nop
 80179e6:	3708      	adds	r7, #8
 80179e8:	46bd      	mov	sp, r7
 80179ea:	bd80      	pop	{r7, pc}

080179ec <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80179ec:	b580      	push	{r7, lr}
 80179ee:	b082      	sub	sp, #8
 80179f0:	af00      	add	r7, sp, #0
 80179f2:	6078      	str	r0, [r7, #4]
 80179f4:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80179f6:	6839      	ldr	r1, [r7, #0]
 80179f8:	6878      	ldr	r0, [r7, #4]
 80179fa:	f7ff feef 	bl	80177dc <xEventGroupClearBits>
}
 80179fe:	bf00      	nop
 8017a00:	3708      	adds	r7, #8
 8017a02:	46bd      	mov	sp, r7
 8017a04:	bd80      	pop	{r7, pc}

08017a06 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8017a06:	b480      	push	{r7}
 8017a08:	b087      	sub	sp, #28
 8017a0a:	af00      	add	r7, sp, #0
 8017a0c:	60f8      	str	r0, [r7, #12]
 8017a0e:	60b9      	str	r1, [r7, #8]
 8017a10:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8017a12:	2300      	movs	r3, #0
 8017a14:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d107      	bne.n	8017a2c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8017a1c:	68fa      	ldr	r2, [r7, #12]
 8017a1e:	68bb      	ldr	r3, [r7, #8]
 8017a20:	4013      	ands	r3, r2
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	d00a      	beq.n	8017a3c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8017a26:	2301      	movs	r3, #1
 8017a28:	617b      	str	r3, [r7, #20]
 8017a2a:	e007      	b.n	8017a3c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8017a2c:	68fa      	ldr	r2, [r7, #12]
 8017a2e:	68bb      	ldr	r3, [r7, #8]
 8017a30:	4013      	ands	r3, r2
 8017a32:	68ba      	ldr	r2, [r7, #8]
 8017a34:	429a      	cmp	r2, r3
 8017a36:	d101      	bne.n	8017a3c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8017a38:	2301      	movs	r3, #1
 8017a3a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8017a3c:	697b      	ldr	r3, [r7, #20]
}
 8017a3e:	4618      	mov	r0, r3
 8017a40:	371c      	adds	r7, #28
 8017a42:	46bd      	mov	sp, r7
 8017a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a48:	4770      	bx	lr
	...

08017a4c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8017a4c:	b580      	push	{r7, lr}
 8017a4e:	b086      	sub	sp, #24
 8017a50:	af00      	add	r7, sp, #0
 8017a52:	60f8      	str	r0, [r7, #12]
 8017a54:	60b9      	str	r1, [r7, #8]
 8017a56:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	68ba      	ldr	r2, [r7, #8]
 8017a5c:	68f9      	ldr	r1, [r7, #12]
 8017a5e:	4804      	ldr	r0, [pc, #16]	; (8017a70 <xEventGroupSetBitsFromISR+0x24>)
 8017a60:	f002 f9c6 	bl	8019df0 <xTimerPendFunctionCallFromISR>
 8017a64:	6178      	str	r0, [r7, #20]

		return xReturn;
 8017a66:	697b      	ldr	r3, [r7, #20]
	}
 8017a68:	4618      	mov	r0, r3
 8017a6a:	3718      	adds	r7, #24
 8017a6c:	46bd      	mov	sp, r7
 8017a6e:	bd80      	pop	{r7, pc}
 8017a70:	080179d3 	.word	0x080179d3

08017a74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8017a74:	b480      	push	{r7}
 8017a76:	b083      	sub	sp, #12
 8017a78:	af00      	add	r7, sp, #0
 8017a7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	f103 0208 	add.w	r2, r3, #8
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017a8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	f103 0208 	add.w	r2, r3, #8
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	f103 0208 	add.w	r2, r3, #8
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	2200      	movs	r2, #0
 8017aa6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8017aa8:	bf00      	nop
 8017aaa:	370c      	adds	r7, #12
 8017aac:	46bd      	mov	sp, r7
 8017aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ab2:	4770      	bx	lr

08017ab4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8017ab4:	b480      	push	{r7}
 8017ab6:	b083      	sub	sp, #12
 8017ab8:	af00      	add	r7, sp, #0
 8017aba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	2200      	movs	r2, #0
 8017ac0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017ac2:	bf00      	nop
 8017ac4:	370c      	adds	r7, #12
 8017ac6:	46bd      	mov	sp, r7
 8017ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017acc:	4770      	bx	lr

08017ace <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017ace:	b480      	push	{r7}
 8017ad0:	b085      	sub	sp, #20
 8017ad2:	af00      	add	r7, sp, #0
 8017ad4:	6078      	str	r0, [r7, #4]
 8017ad6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	685b      	ldr	r3, [r3, #4]
 8017adc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017ade:	683b      	ldr	r3, [r7, #0]
 8017ae0:	68fa      	ldr	r2, [r7, #12]
 8017ae2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017ae4:	68fb      	ldr	r3, [r7, #12]
 8017ae6:	689a      	ldr	r2, [r3, #8]
 8017ae8:	683b      	ldr	r3, [r7, #0]
 8017aea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	689b      	ldr	r3, [r3, #8]
 8017af0:	683a      	ldr	r2, [r7, #0]
 8017af2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	683a      	ldr	r2, [r7, #0]
 8017af8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8017afa:	683b      	ldr	r3, [r7, #0]
 8017afc:	687a      	ldr	r2, [r7, #4]
 8017afe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	1c5a      	adds	r2, r3, #1
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	601a      	str	r2, [r3, #0]
}
 8017b0a:	bf00      	nop
 8017b0c:	3714      	adds	r7, #20
 8017b0e:	46bd      	mov	sp, r7
 8017b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b14:	4770      	bx	lr

08017b16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017b16:	b480      	push	{r7}
 8017b18:	b085      	sub	sp, #20
 8017b1a:	af00      	add	r7, sp, #0
 8017b1c:	6078      	str	r0, [r7, #4]
 8017b1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017b20:	683b      	ldr	r3, [r7, #0]
 8017b22:	681b      	ldr	r3, [r3, #0]
 8017b24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8017b26:	68bb      	ldr	r3, [r7, #8]
 8017b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017b2c:	d103      	bne.n	8017b36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	691b      	ldr	r3, [r3, #16]
 8017b32:	60fb      	str	r3, [r7, #12]
 8017b34:	e00c      	b.n	8017b50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	3308      	adds	r3, #8
 8017b3a:	60fb      	str	r3, [r7, #12]
 8017b3c:	e002      	b.n	8017b44 <vListInsert+0x2e>
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	685b      	ldr	r3, [r3, #4]
 8017b42:	60fb      	str	r3, [r7, #12]
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	685b      	ldr	r3, [r3, #4]
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	68ba      	ldr	r2, [r7, #8]
 8017b4c:	429a      	cmp	r2, r3
 8017b4e:	d2f6      	bcs.n	8017b3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017b50:	68fb      	ldr	r3, [r7, #12]
 8017b52:	685a      	ldr	r2, [r3, #4]
 8017b54:	683b      	ldr	r3, [r7, #0]
 8017b56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017b58:	683b      	ldr	r3, [r7, #0]
 8017b5a:	685b      	ldr	r3, [r3, #4]
 8017b5c:	683a      	ldr	r2, [r7, #0]
 8017b5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017b60:	683b      	ldr	r3, [r7, #0]
 8017b62:	68fa      	ldr	r2, [r7, #12]
 8017b64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8017b66:	68fb      	ldr	r3, [r7, #12]
 8017b68:	683a      	ldr	r2, [r7, #0]
 8017b6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8017b6c:	683b      	ldr	r3, [r7, #0]
 8017b6e:	687a      	ldr	r2, [r7, #4]
 8017b70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	1c5a      	adds	r2, r3, #1
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	601a      	str	r2, [r3, #0]
}
 8017b7c:	bf00      	nop
 8017b7e:	3714      	adds	r7, #20
 8017b80:	46bd      	mov	sp, r7
 8017b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b86:	4770      	bx	lr

08017b88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8017b88:	b480      	push	{r7}
 8017b8a:	b085      	sub	sp, #20
 8017b8c:	af00      	add	r7, sp, #0
 8017b8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	691b      	ldr	r3, [r3, #16]
 8017b94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	685b      	ldr	r3, [r3, #4]
 8017b9a:	687a      	ldr	r2, [r7, #4]
 8017b9c:	6892      	ldr	r2, [r2, #8]
 8017b9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	689b      	ldr	r3, [r3, #8]
 8017ba4:	687a      	ldr	r2, [r7, #4]
 8017ba6:	6852      	ldr	r2, [r2, #4]
 8017ba8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8017baa:	68fb      	ldr	r3, [r7, #12]
 8017bac:	685b      	ldr	r3, [r3, #4]
 8017bae:	687a      	ldr	r2, [r7, #4]
 8017bb0:	429a      	cmp	r2, r3
 8017bb2:	d103      	bne.n	8017bbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	689a      	ldr	r2, [r3, #8]
 8017bb8:	68fb      	ldr	r3, [r7, #12]
 8017bba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	2200      	movs	r2, #0
 8017bc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017bc2:	68fb      	ldr	r3, [r7, #12]
 8017bc4:	681b      	ldr	r3, [r3, #0]
 8017bc6:	1e5a      	subs	r2, r3, #1
 8017bc8:	68fb      	ldr	r3, [r7, #12]
 8017bca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	681b      	ldr	r3, [r3, #0]
}
 8017bd0:	4618      	mov	r0, r3
 8017bd2:	3714      	adds	r7, #20
 8017bd4:	46bd      	mov	sp, r7
 8017bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bda:	4770      	bx	lr

08017bdc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017bdc:	b580      	push	{r7, lr}
 8017bde:	b084      	sub	sp, #16
 8017be0:	af00      	add	r7, sp, #0
 8017be2:	6078      	str	r0, [r7, #4]
 8017be4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017bea:	68fb      	ldr	r3, [r7, #12]
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d10a      	bne.n	8017c06 <xQueueGenericReset+0x2a>
	__asm volatile
 8017bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bf4:	f383 8811 	msr	BASEPRI, r3
 8017bf8:	f3bf 8f6f 	isb	sy
 8017bfc:	f3bf 8f4f 	dsb	sy
 8017c00:	60bb      	str	r3, [r7, #8]
}
 8017c02:	bf00      	nop
 8017c04:	e7fe      	b.n	8017c04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8017c06:	f002 fa3d 	bl	801a084 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	681a      	ldr	r2, [r3, #0]
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c12:	68f9      	ldr	r1, [r7, #12]
 8017c14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017c16:	fb01 f303 	mul.w	r3, r1, r3
 8017c1a:	441a      	add	r2, r3
 8017c1c:	68fb      	ldr	r3, [r7, #12]
 8017c1e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	2200      	movs	r2, #0
 8017c24:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8017c26:	68fb      	ldr	r3, [r7, #12]
 8017c28:	681a      	ldr	r2, [r3, #0]
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017c2e:	68fb      	ldr	r3, [r7, #12]
 8017c30:	681a      	ldr	r2, [r3, #0]
 8017c32:	68fb      	ldr	r3, [r7, #12]
 8017c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c36:	3b01      	subs	r3, #1
 8017c38:	68f9      	ldr	r1, [r7, #12]
 8017c3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017c3c:	fb01 f303 	mul.w	r3, r1, r3
 8017c40:	441a      	add	r2, r3
 8017c42:	68fb      	ldr	r3, [r7, #12]
 8017c44:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	22ff      	movs	r2, #255	; 0xff
 8017c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8017c4e:	68fb      	ldr	r3, [r7, #12]
 8017c50:	22ff      	movs	r2, #255	; 0xff
 8017c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8017c56:	683b      	ldr	r3, [r7, #0]
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d114      	bne.n	8017c86 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017c5c:	68fb      	ldr	r3, [r7, #12]
 8017c5e:	691b      	ldr	r3, [r3, #16]
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d01a      	beq.n	8017c9a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	3310      	adds	r3, #16
 8017c68:	4618      	mov	r0, r3
 8017c6a:	f001 fa5b 	bl	8019124 <xTaskRemoveFromEventList>
 8017c6e:	4603      	mov	r3, r0
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d012      	beq.n	8017c9a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8017c74:	4b0c      	ldr	r3, [pc, #48]	; (8017ca8 <xQueueGenericReset+0xcc>)
 8017c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017c7a:	601a      	str	r2, [r3, #0]
 8017c7c:	f3bf 8f4f 	dsb	sy
 8017c80:	f3bf 8f6f 	isb	sy
 8017c84:	e009      	b.n	8017c9a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	3310      	adds	r3, #16
 8017c8a:	4618      	mov	r0, r3
 8017c8c:	f7ff fef2 	bl	8017a74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	3324      	adds	r3, #36	; 0x24
 8017c94:	4618      	mov	r0, r3
 8017c96:	f7ff feed 	bl	8017a74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8017c9a:	f002 fa23 	bl	801a0e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8017c9e:	2301      	movs	r3, #1
}
 8017ca0:	4618      	mov	r0, r3
 8017ca2:	3710      	adds	r7, #16
 8017ca4:	46bd      	mov	sp, r7
 8017ca6:	bd80      	pop	{r7, pc}
 8017ca8:	e000ed04 	.word	0xe000ed04

08017cac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8017cac:	b580      	push	{r7, lr}
 8017cae:	b08e      	sub	sp, #56	; 0x38
 8017cb0:	af02      	add	r7, sp, #8
 8017cb2:	60f8      	str	r0, [r7, #12]
 8017cb4:	60b9      	str	r1, [r7, #8]
 8017cb6:	607a      	str	r2, [r7, #4]
 8017cb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017cba:	68fb      	ldr	r3, [r7, #12]
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d10a      	bne.n	8017cd6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8017cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cc4:	f383 8811 	msr	BASEPRI, r3
 8017cc8:	f3bf 8f6f 	isb	sy
 8017ccc:	f3bf 8f4f 	dsb	sy
 8017cd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017cd2:	bf00      	nop
 8017cd4:	e7fe      	b.n	8017cd4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8017cd6:	683b      	ldr	r3, [r7, #0]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d10a      	bne.n	8017cf2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8017cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ce0:	f383 8811 	msr	BASEPRI, r3
 8017ce4:	f3bf 8f6f 	isb	sy
 8017ce8:	f3bf 8f4f 	dsb	sy
 8017cec:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017cee:	bf00      	nop
 8017cf0:	e7fe      	b.n	8017cf0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d002      	beq.n	8017cfe <xQueueGenericCreateStatic+0x52>
 8017cf8:	68bb      	ldr	r3, [r7, #8]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d001      	beq.n	8017d02 <xQueueGenericCreateStatic+0x56>
 8017cfe:	2301      	movs	r3, #1
 8017d00:	e000      	b.n	8017d04 <xQueueGenericCreateStatic+0x58>
 8017d02:	2300      	movs	r3, #0
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d10a      	bne.n	8017d1e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8017d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d0c:	f383 8811 	msr	BASEPRI, r3
 8017d10:	f3bf 8f6f 	isb	sy
 8017d14:	f3bf 8f4f 	dsb	sy
 8017d18:	623b      	str	r3, [r7, #32]
}
 8017d1a:	bf00      	nop
 8017d1c:	e7fe      	b.n	8017d1c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d102      	bne.n	8017d2a <xQueueGenericCreateStatic+0x7e>
 8017d24:	68bb      	ldr	r3, [r7, #8]
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d101      	bne.n	8017d2e <xQueueGenericCreateStatic+0x82>
 8017d2a:	2301      	movs	r3, #1
 8017d2c:	e000      	b.n	8017d30 <xQueueGenericCreateStatic+0x84>
 8017d2e:	2300      	movs	r3, #0
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d10a      	bne.n	8017d4a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8017d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d38:	f383 8811 	msr	BASEPRI, r3
 8017d3c:	f3bf 8f6f 	isb	sy
 8017d40:	f3bf 8f4f 	dsb	sy
 8017d44:	61fb      	str	r3, [r7, #28]
}
 8017d46:	bf00      	nop
 8017d48:	e7fe      	b.n	8017d48 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8017d4a:	2350      	movs	r3, #80	; 0x50
 8017d4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8017d4e:	697b      	ldr	r3, [r7, #20]
 8017d50:	2b50      	cmp	r3, #80	; 0x50
 8017d52:	d00a      	beq.n	8017d6a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8017d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d58:	f383 8811 	msr	BASEPRI, r3
 8017d5c:	f3bf 8f6f 	isb	sy
 8017d60:	f3bf 8f4f 	dsb	sy
 8017d64:	61bb      	str	r3, [r7, #24]
}
 8017d66:	bf00      	nop
 8017d68:	e7fe      	b.n	8017d68 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8017d6a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017d6c:	683b      	ldr	r3, [r7, #0]
 8017d6e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8017d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d00d      	beq.n	8017d92 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8017d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d78:	2201      	movs	r2, #1
 8017d7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017d7e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d84:	9300      	str	r3, [sp, #0]
 8017d86:	4613      	mov	r3, r2
 8017d88:	687a      	ldr	r2, [r7, #4]
 8017d8a:	68b9      	ldr	r1, [r7, #8]
 8017d8c:	68f8      	ldr	r0, [r7, #12]
 8017d8e:	f000 f805 	bl	8017d9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8017d94:	4618      	mov	r0, r3
 8017d96:	3730      	adds	r7, #48	; 0x30
 8017d98:	46bd      	mov	sp, r7
 8017d9a:	bd80      	pop	{r7, pc}

08017d9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8017d9c:	b580      	push	{r7, lr}
 8017d9e:	b084      	sub	sp, #16
 8017da0:	af00      	add	r7, sp, #0
 8017da2:	60f8      	str	r0, [r7, #12]
 8017da4:	60b9      	str	r1, [r7, #8]
 8017da6:	607a      	str	r2, [r7, #4]
 8017da8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8017daa:	68bb      	ldr	r3, [r7, #8]
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d103      	bne.n	8017db8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017db0:	69bb      	ldr	r3, [r7, #24]
 8017db2:	69ba      	ldr	r2, [r7, #24]
 8017db4:	601a      	str	r2, [r3, #0]
 8017db6:	e002      	b.n	8017dbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8017db8:	69bb      	ldr	r3, [r7, #24]
 8017dba:	687a      	ldr	r2, [r7, #4]
 8017dbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8017dbe:	69bb      	ldr	r3, [r7, #24]
 8017dc0:	68fa      	ldr	r2, [r7, #12]
 8017dc2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017dc4:	69bb      	ldr	r3, [r7, #24]
 8017dc6:	68ba      	ldr	r2, [r7, #8]
 8017dc8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8017dca:	2101      	movs	r1, #1
 8017dcc:	69b8      	ldr	r0, [r7, #24]
 8017dce:	f7ff ff05 	bl	8017bdc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8017dd2:	69bb      	ldr	r3, [r7, #24]
 8017dd4:	78fa      	ldrb	r2, [r7, #3]
 8017dd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8017dda:	bf00      	nop
 8017ddc:	3710      	adds	r7, #16
 8017dde:	46bd      	mov	sp, r7
 8017de0:	bd80      	pop	{r7, pc}
	...

08017de4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017de4:	b580      	push	{r7, lr}
 8017de6:	b08e      	sub	sp, #56	; 0x38
 8017de8:	af00      	add	r7, sp, #0
 8017dea:	60f8      	str	r0, [r7, #12]
 8017dec:	60b9      	str	r1, [r7, #8]
 8017dee:	607a      	str	r2, [r7, #4]
 8017df0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8017df2:	2300      	movs	r3, #0
 8017df4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d10a      	bne.n	8017e16 <xQueueGenericSend+0x32>
	__asm volatile
 8017e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e04:	f383 8811 	msr	BASEPRI, r3
 8017e08:	f3bf 8f6f 	isb	sy
 8017e0c:	f3bf 8f4f 	dsb	sy
 8017e10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017e12:	bf00      	nop
 8017e14:	e7fe      	b.n	8017e14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017e16:	68bb      	ldr	r3, [r7, #8]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d103      	bne.n	8017e24 <xQueueGenericSend+0x40>
 8017e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d101      	bne.n	8017e28 <xQueueGenericSend+0x44>
 8017e24:	2301      	movs	r3, #1
 8017e26:	e000      	b.n	8017e2a <xQueueGenericSend+0x46>
 8017e28:	2300      	movs	r3, #0
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d10a      	bne.n	8017e44 <xQueueGenericSend+0x60>
	__asm volatile
 8017e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e32:	f383 8811 	msr	BASEPRI, r3
 8017e36:	f3bf 8f6f 	isb	sy
 8017e3a:	f3bf 8f4f 	dsb	sy
 8017e3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017e40:	bf00      	nop
 8017e42:	e7fe      	b.n	8017e42 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017e44:	683b      	ldr	r3, [r7, #0]
 8017e46:	2b02      	cmp	r3, #2
 8017e48:	d103      	bne.n	8017e52 <xQueueGenericSend+0x6e>
 8017e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017e4e:	2b01      	cmp	r3, #1
 8017e50:	d101      	bne.n	8017e56 <xQueueGenericSend+0x72>
 8017e52:	2301      	movs	r3, #1
 8017e54:	e000      	b.n	8017e58 <xQueueGenericSend+0x74>
 8017e56:	2300      	movs	r3, #0
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	d10a      	bne.n	8017e72 <xQueueGenericSend+0x8e>
	__asm volatile
 8017e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e60:	f383 8811 	msr	BASEPRI, r3
 8017e64:	f3bf 8f6f 	isb	sy
 8017e68:	f3bf 8f4f 	dsb	sy
 8017e6c:	623b      	str	r3, [r7, #32]
}
 8017e6e:	bf00      	nop
 8017e70:	e7fe      	b.n	8017e70 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017e72:	f001 fb77 	bl	8019564 <xTaskGetSchedulerState>
 8017e76:	4603      	mov	r3, r0
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d102      	bne.n	8017e82 <xQueueGenericSend+0x9e>
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d101      	bne.n	8017e86 <xQueueGenericSend+0xa2>
 8017e82:	2301      	movs	r3, #1
 8017e84:	e000      	b.n	8017e88 <xQueueGenericSend+0xa4>
 8017e86:	2300      	movs	r3, #0
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d10a      	bne.n	8017ea2 <xQueueGenericSend+0xbe>
	__asm volatile
 8017e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e90:	f383 8811 	msr	BASEPRI, r3
 8017e94:	f3bf 8f6f 	isb	sy
 8017e98:	f3bf 8f4f 	dsb	sy
 8017e9c:	61fb      	str	r3, [r7, #28]
}
 8017e9e:	bf00      	nop
 8017ea0:	e7fe      	b.n	8017ea0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017ea2:	f002 f8ef 	bl	801a084 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017eae:	429a      	cmp	r2, r3
 8017eb0:	d302      	bcc.n	8017eb8 <xQueueGenericSend+0xd4>
 8017eb2:	683b      	ldr	r3, [r7, #0]
 8017eb4:	2b02      	cmp	r3, #2
 8017eb6:	d129      	bne.n	8017f0c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017eb8:	683a      	ldr	r2, [r7, #0]
 8017eba:	68b9      	ldr	r1, [r7, #8]
 8017ebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017ebe:	f000 fa0b 	bl	80182d8 <prvCopyDataToQueue>
 8017ec2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d010      	beq.n	8017eee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ece:	3324      	adds	r3, #36	; 0x24
 8017ed0:	4618      	mov	r0, r3
 8017ed2:	f001 f927 	bl	8019124 <xTaskRemoveFromEventList>
 8017ed6:	4603      	mov	r3, r0
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d013      	beq.n	8017f04 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017edc:	4b3f      	ldr	r3, [pc, #252]	; (8017fdc <xQueueGenericSend+0x1f8>)
 8017ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017ee2:	601a      	str	r2, [r3, #0]
 8017ee4:	f3bf 8f4f 	dsb	sy
 8017ee8:	f3bf 8f6f 	isb	sy
 8017eec:	e00a      	b.n	8017f04 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8017eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	d007      	beq.n	8017f04 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017ef4:	4b39      	ldr	r3, [pc, #228]	; (8017fdc <xQueueGenericSend+0x1f8>)
 8017ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017efa:	601a      	str	r2, [r3, #0]
 8017efc:	f3bf 8f4f 	dsb	sy
 8017f00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017f04:	f002 f8ee 	bl	801a0e4 <vPortExitCritical>
				return pdPASS;
 8017f08:	2301      	movs	r3, #1
 8017f0a:	e063      	b.n	8017fd4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d103      	bne.n	8017f1a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017f12:	f002 f8e7 	bl	801a0e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017f16:	2300      	movs	r3, #0
 8017f18:	e05c      	b.n	8017fd4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d106      	bne.n	8017f2e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017f20:	f107 0314 	add.w	r3, r7, #20
 8017f24:	4618      	mov	r0, r3
 8017f26:	f001 f9c3 	bl	80192b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017f2a:	2301      	movs	r3, #1
 8017f2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017f2e:	f002 f8d9 	bl	801a0e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017f32:	f000 fe81 	bl	8018c38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017f36:	f002 f8a5 	bl	801a084 <vPortEnterCritical>
 8017f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017f40:	b25b      	sxtb	r3, r3
 8017f42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017f46:	d103      	bne.n	8017f50 <xQueueGenericSend+0x16c>
 8017f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f4a:	2200      	movs	r2, #0
 8017f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017f56:	b25b      	sxtb	r3, r3
 8017f58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017f5c:	d103      	bne.n	8017f66 <xQueueGenericSend+0x182>
 8017f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f60:	2200      	movs	r2, #0
 8017f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017f66:	f002 f8bd 	bl	801a0e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017f6a:	1d3a      	adds	r2, r7, #4
 8017f6c:	f107 0314 	add.w	r3, r7, #20
 8017f70:	4611      	mov	r1, r2
 8017f72:	4618      	mov	r0, r3
 8017f74:	f001 f9b2 	bl	80192dc <xTaskCheckForTimeOut>
 8017f78:	4603      	mov	r3, r0
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d124      	bne.n	8017fc8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017f7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017f80:	f000 faa2 	bl	80184c8 <prvIsQueueFull>
 8017f84:	4603      	mov	r3, r0
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d018      	beq.n	8017fbc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f8c:	3310      	adds	r3, #16
 8017f8e:	687a      	ldr	r2, [r7, #4]
 8017f90:	4611      	mov	r1, r2
 8017f92:	4618      	mov	r0, r3
 8017f94:	f001 f83a 	bl	801900c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017f9a:	f000 fa2d 	bl	80183f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017f9e:	f000 fe59 	bl	8018c54 <xTaskResumeAll>
 8017fa2:	4603      	mov	r3, r0
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	f47f af7c 	bne.w	8017ea2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8017faa:	4b0c      	ldr	r3, [pc, #48]	; (8017fdc <xQueueGenericSend+0x1f8>)
 8017fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017fb0:	601a      	str	r2, [r3, #0]
 8017fb2:	f3bf 8f4f 	dsb	sy
 8017fb6:	f3bf 8f6f 	isb	sy
 8017fba:	e772      	b.n	8017ea2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017fbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017fbe:	f000 fa1b 	bl	80183f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017fc2:	f000 fe47 	bl	8018c54 <xTaskResumeAll>
 8017fc6:	e76c      	b.n	8017ea2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017fc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017fca:	f000 fa15 	bl	80183f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017fce:	f000 fe41 	bl	8018c54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8017fd2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017fd4:	4618      	mov	r0, r3
 8017fd6:	3738      	adds	r7, #56	; 0x38
 8017fd8:	46bd      	mov	sp, r7
 8017fda:	bd80      	pop	{r7, pc}
 8017fdc:	e000ed04 	.word	0xe000ed04

08017fe0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b090      	sub	sp, #64	; 0x40
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	60f8      	str	r0, [r7, #12]
 8017fe8:	60b9      	str	r1, [r7, #8]
 8017fea:	607a      	str	r2, [r7, #4]
 8017fec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017fee:	68fb      	ldr	r3, [r7, #12]
 8017ff0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8017ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d10a      	bne.n	801800e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8017ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ffc:	f383 8811 	msr	BASEPRI, r3
 8018000:	f3bf 8f6f 	isb	sy
 8018004:	f3bf 8f4f 	dsb	sy
 8018008:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801800a:	bf00      	nop
 801800c:	e7fe      	b.n	801800c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801800e:	68bb      	ldr	r3, [r7, #8]
 8018010:	2b00      	cmp	r3, #0
 8018012:	d103      	bne.n	801801c <xQueueGenericSendFromISR+0x3c>
 8018014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018018:	2b00      	cmp	r3, #0
 801801a:	d101      	bne.n	8018020 <xQueueGenericSendFromISR+0x40>
 801801c:	2301      	movs	r3, #1
 801801e:	e000      	b.n	8018022 <xQueueGenericSendFromISR+0x42>
 8018020:	2300      	movs	r3, #0
 8018022:	2b00      	cmp	r3, #0
 8018024:	d10a      	bne.n	801803c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8018026:	f04f 0350 	mov.w	r3, #80	; 0x50
 801802a:	f383 8811 	msr	BASEPRI, r3
 801802e:	f3bf 8f6f 	isb	sy
 8018032:	f3bf 8f4f 	dsb	sy
 8018036:	627b      	str	r3, [r7, #36]	; 0x24
}
 8018038:	bf00      	nop
 801803a:	e7fe      	b.n	801803a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801803c:	683b      	ldr	r3, [r7, #0]
 801803e:	2b02      	cmp	r3, #2
 8018040:	d103      	bne.n	801804a <xQueueGenericSendFromISR+0x6a>
 8018042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018046:	2b01      	cmp	r3, #1
 8018048:	d101      	bne.n	801804e <xQueueGenericSendFromISR+0x6e>
 801804a:	2301      	movs	r3, #1
 801804c:	e000      	b.n	8018050 <xQueueGenericSendFromISR+0x70>
 801804e:	2300      	movs	r3, #0
 8018050:	2b00      	cmp	r3, #0
 8018052:	d10a      	bne.n	801806a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8018054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018058:	f383 8811 	msr	BASEPRI, r3
 801805c:	f3bf 8f6f 	isb	sy
 8018060:	f3bf 8f4f 	dsb	sy
 8018064:	623b      	str	r3, [r7, #32]
}
 8018066:	bf00      	nop
 8018068:	e7fe      	b.n	8018068 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801806a:	f002 f8ed 	bl	801a248 <vPortValidateInterruptPriority>
	__asm volatile
 801806e:	f3ef 8211 	mrs	r2, BASEPRI
 8018072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018076:	f383 8811 	msr	BASEPRI, r3
 801807a:	f3bf 8f6f 	isb	sy
 801807e:	f3bf 8f4f 	dsb	sy
 8018082:	61fa      	str	r2, [r7, #28]
 8018084:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8018086:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018088:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801808a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801808c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801808e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018092:	429a      	cmp	r2, r3
 8018094:	d302      	bcc.n	801809c <xQueueGenericSendFromISR+0xbc>
 8018096:	683b      	ldr	r3, [r7, #0]
 8018098:	2b02      	cmp	r3, #2
 801809a:	d12f      	bne.n	80180fc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801809c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801809e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80180a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80180a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80180aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80180ac:	683a      	ldr	r2, [r7, #0]
 80180ae:	68b9      	ldr	r1, [r7, #8]
 80180b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80180b2:	f000 f911 	bl	80182d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80180b6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80180ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80180be:	d112      	bne.n	80180e6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80180c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d016      	beq.n	80180f6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80180c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180ca:	3324      	adds	r3, #36	; 0x24
 80180cc:	4618      	mov	r0, r3
 80180ce:	f001 f829 	bl	8019124 <xTaskRemoveFromEventList>
 80180d2:	4603      	mov	r3, r0
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d00e      	beq.n	80180f6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d00b      	beq.n	80180f6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	2201      	movs	r2, #1
 80180e2:	601a      	str	r2, [r3, #0]
 80180e4:	e007      	b.n	80180f6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80180e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80180ea:	3301      	adds	r3, #1
 80180ec:	b2db      	uxtb	r3, r3
 80180ee:	b25a      	sxtb	r2, r3
 80180f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80180f6:	2301      	movs	r3, #1
 80180f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80180fa:	e001      	b.n	8018100 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80180fc:	2300      	movs	r3, #0
 80180fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018102:	617b      	str	r3, [r7, #20]
	__asm volatile
 8018104:	697b      	ldr	r3, [r7, #20]
 8018106:	f383 8811 	msr	BASEPRI, r3
}
 801810a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801810c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801810e:	4618      	mov	r0, r3
 8018110:	3740      	adds	r7, #64	; 0x40
 8018112:	46bd      	mov	sp, r7
 8018114:	bd80      	pop	{r7, pc}
	...

08018118 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8018118:	b580      	push	{r7, lr}
 801811a:	b08c      	sub	sp, #48	; 0x30
 801811c:	af00      	add	r7, sp, #0
 801811e:	60f8      	str	r0, [r7, #12]
 8018120:	60b9      	str	r1, [r7, #8]
 8018122:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8018124:	2300      	movs	r3, #0
 8018126:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018128:	68fb      	ldr	r3, [r7, #12]
 801812a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801812c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801812e:	2b00      	cmp	r3, #0
 8018130:	d10a      	bne.n	8018148 <xQueueReceive+0x30>
	__asm volatile
 8018132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018136:	f383 8811 	msr	BASEPRI, r3
 801813a:	f3bf 8f6f 	isb	sy
 801813e:	f3bf 8f4f 	dsb	sy
 8018142:	623b      	str	r3, [r7, #32]
}
 8018144:	bf00      	nop
 8018146:	e7fe      	b.n	8018146 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018148:	68bb      	ldr	r3, [r7, #8]
 801814a:	2b00      	cmp	r3, #0
 801814c:	d103      	bne.n	8018156 <xQueueReceive+0x3e>
 801814e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018152:	2b00      	cmp	r3, #0
 8018154:	d101      	bne.n	801815a <xQueueReceive+0x42>
 8018156:	2301      	movs	r3, #1
 8018158:	e000      	b.n	801815c <xQueueReceive+0x44>
 801815a:	2300      	movs	r3, #0
 801815c:	2b00      	cmp	r3, #0
 801815e:	d10a      	bne.n	8018176 <xQueueReceive+0x5e>
	__asm volatile
 8018160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018164:	f383 8811 	msr	BASEPRI, r3
 8018168:	f3bf 8f6f 	isb	sy
 801816c:	f3bf 8f4f 	dsb	sy
 8018170:	61fb      	str	r3, [r7, #28]
}
 8018172:	bf00      	nop
 8018174:	e7fe      	b.n	8018174 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018176:	f001 f9f5 	bl	8019564 <xTaskGetSchedulerState>
 801817a:	4603      	mov	r3, r0
 801817c:	2b00      	cmp	r3, #0
 801817e:	d102      	bne.n	8018186 <xQueueReceive+0x6e>
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	2b00      	cmp	r3, #0
 8018184:	d101      	bne.n	801818a <xQueueReceive+0x72>
 8018186:	2301      	movs	r3, #1
 8018188:	e000      	b.n	801818c <xQueueReceive+0x74>
 801818a:	2300      	movs	r3, #0
 801818c:	2b00      	cmp	r3, #0
 801818e:	d10a      	bne.n	80181a6 <xQueueReceive+0x8e>
	__asm volatile
 8018190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018194:	f383 8811 	msr	BASEPRI, r3
 8018198:	f3bf 8f6f 	isb	sy
 801819c:	f3bf 8f4f 	dsb	sy
 80181a0:	61bb      	str	r3, [r7, #24]
}
 80181a2:	bf00      	nop
 80181a4:	e7fe      	b.n	80181a4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80181a6:	f001 ff6d 	bl	801a084 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80181aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80181ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80181b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d01f      	beq.n	80181f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80181b6:	68b9      	ldr	r1, [r7, #8]
 80181b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80181ba:	f000 f8f7 	bl	80183ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80181be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181c0:	1e5a      	subs	r2, r3, #1
 80181c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80181c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181c8:	691b      	ldr	r3, [r3, #16]
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	d00f      	beq.n	80181ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80181ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181d0:	3310      	adds	r3, #16
 80181d2:	4618      	mov	r0, r3
 80181d4:	f000 ffa6 	bl	8019124 <xTaskRemoveFromEventList>
 80181d8:	4603      	mov	r3, r0
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d007      	beq.n	80181ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80181de:	4b3d      	ldr	r3, [pc, #244]	; (80182d4 <xQueueReceive+0x1bc>)
 80181e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80181e4:	601a      	str	r2, [r3, #0]
 80181e6:	f3bf 8f4f 	dsb	sy
 80181ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80181ee:	f001 ff79 	bl	801a0e4 <vPortExitCritical>
				return pdPASS;
 80181f2:	2301      	movs	r3, #1
 80181f4:	e069      	b.n	80182ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d103      	bne.n	8018204 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80181fc:	f001 ff72 	bl	801a0e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018200:	2300      	movs	r3, #0
 8018202:	e062      	b.n	80182ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018206:	2b00      	cmp	r3, #0
 8018208:	d106      	bne.n	8018218 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801820a:	f107 0310 	add.w	r3, r7, #16
 801820e:	4618      	mov	r0, r3
 8018210:	f001 f84e 	bl	80192b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018214:	2301      	movs	r3, #1
 8018216:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018218:	f001 ff64 	bl	801a0e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801821c:	f000 fd0c 	bl	8018c38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018220:	f001 ff30 	bl	801a084 <vPortEnterCritical>
 8018224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018226:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801822a:	b25b      	sxtb	r3, r3
 801822c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018230:	d103      	bne.n	801823a <xQueueReceive+0x122>
 8018232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018234:	2200      	movs	r2, #0
 8018236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801823a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801823c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018240:	b25b      	sxtb	r3, r3
 8018242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018246:	d103      	bne.n	8018250 <xQueueReceive+0x138>
 8018248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801824a:	2200      	movs	r2, #0
 801824c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018250:	f001 ff48 	bl	801a0e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018254:	1d3a      	adds	r2, r7, #4
 8018256:	f107 0310 	add.w	r3, r7, #16
 801825a:	4611      	mov	r1, r2
 801825c:	4618      	mov	r0, r3
 801825e:	f001 f83d 	bl	80192dc <xTaskCheckForTimeOut>
 8018262:	4603      	mov	r3, r0
 8018264:	2b00      	cmp	r3, #0
 8018266:	d123      	bne.n	80182b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801826a:	f000 f917 	bl	801849c <prvIsQueueEmpty>
 801826e:	4603      	mov	r3, r0
 8018270:	2b00      	cmp	r3, #0
 8018272:	d017      	beq.n	80182a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018276:	3324      	adds	r3, #36	; 0x24
 8018278:	687a      	ldr	r2, [r7, #4]
 801827a:	4611      	mov	r1, r2
 801827c:	4618      	mov	r0, r3
 801827e:	f000 fec5 	bl	801900c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018284:	f000 f8b8 	bl	80183f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018288:	f000 fce4 	bl	8018c54 <xTaskResumeAll>
 801828c:	4603      	mov	r3, r0
 801828e:	2b00      	cmp	r3, #0
 8018290:	d189      	bne.n	80181a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8018292:	4b10      	ldr	r3, [pc, #64]	; (80182d4 <xQueueReceive+0x1bc>)
 8018294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018298:	601a      	str	r2, [r3, #0]
 801829a:	f3bf 8f4f 	dsb	sy
 801829e:	f3bf 8f6f 	isb	sy
 80182a2:	e780      	b.n	80181a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80182a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80182a6:	f000 f8a7 	bl	80183f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80182aa:	f000 fcd3 	bl	8018c54 <xTaskResumeAll>
 80182ae:	e77a      	b.n	80181a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80182b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80182b2:	f000 f8a1 	bl	80183f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80182b6:	f000 fccd 	bl	8018c54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80182ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80182bc:	f000 f8ee 	bl	801849c <prvIsQueueEmpty>
 80182c0:	4603      	mov	r3, r0
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	f43f af6f 	beq.w	80181a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80182c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80182ca:	4618      	mov	r0, r3
 80182cc:	3730      	adds	r7, #48	; 0x30
 80182ce:	46bd      	mov	sp, r7
 80182d0:	bd80      	pop	{r7, pc}
 80182d2:	bf00      	nop
 80182d4:	e000ed04 	.word	0xe000ed04

080182d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80182d8:	b580      	push	{r7, lr}
 80182da:	b086      	sub	sp, #24
 80182dc:	af00      	add	r7, sp, #0
 80182de:	60f8      	str	r0, [r7, #12]
 80182e0:	60b9      	str	r1, [r7, #8]
 80182e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80182e4:	2300      	movs	r3, #0
 80182e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80182e8:	68fb      	ldr	r3, [r7, #12]
 80182ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80182ee:	68fb      	ldr	r3, [r7, #12]
 80182f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d10d      	bne.n	8018312 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80182f6:	68fb      	ldr	r3, [r7, #12]
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d14d      	bne.n	801839a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80182fe:	68fb      	ldr	r3, [r7, #12]
 8018300:	689b      	ldr	r3, [r3, #8]
 8018302:	4618      	mov	r0, r3
 8018304:	f001 f94c 	bl	80195a0 <xTaskPriorityDisinherit>
 8018308:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	2200      	movs	r2, #0
 801830e:	609a      	str	r2, [r3, #8]
 8018310:	e043      	b.n	801839a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	2b00      	cmp	r3, #0
 8018316:	d119      	bne.n	801834c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018318:	68fb      	ldr	r3, [r7, #12]
 801831a:	6858      	ldr	r0, [r3, #4]
 801831c:	68fb      	ldr	r3, [r7, #12]
 801831e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018320:	461a      	mov	r2, r3
 8018322:	68b9      	ldr	r1, [r7, #8]
 8018324:	f002 f9e4 	bl	801a6f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018328:	68fb      	ldr	r3, [r7, #12]
 801832a:	685a      	ldr	r2, [r3, #4]
 801832c:	68fb      	ldr	r3, [r7, #12]
 801832e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018330:	441a      	add	r2, r3
 8018332:	68fb      	ldr	r3, [r7, #12]
 8018334:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018336:	68fb      	ldr	r3, [r7, #12]
 8018338:	685a      	ldr	r2, [r3, #4]
 801833a:	68fb      	ldr	r3, [r7, #12]
 801833c:	689b      	ldr	r3, [r3, #8]
 801833e:	429a      	cmp	r2, r3
 8018340:	d32b      	bcc.n	801839a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8018342:	68fb      	ldr	r3, [r7, #12]
 8018344:	681a      	ldr	r2, [r3, #0]
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	605a      	str	r2, [r3, #4]
 801834a:	e026      	b.n	801839a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	68d8      	ldr	r0, [r3, #12]
 8018350:	68fb      	ldr	r3, [r7, #12]
 8018352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018354:	461a      	mov	r2, r3
 8018356:	68b9      	ldr	r1, [r7, #8]
 8018358:	f002 f9ca 	bl	801a6f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801835c:	68fb      	ldr	r3, [r7, #12]
 801835e:	68da      	ldr	r2, [r3, #12]
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018364:	425b      	negs	r3, r3
 8018366:	441a      	add	r2, r3
 8018368:	68fb      	ldr	r3, [r7, #12]
 801836a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	68da      	ldr	r2, [r3, #12]
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	681b      	ldr	r3, [r3, #0]
 8018374:	429a      	cmp	r2, r3
 8018376:	d207      	bcs.n	8018388 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8018378:	68fb      	ldr	r3, [r7, #12]
 801837a:	689a      	ldr	r2, [r3, #8]
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018380:	425b      	negs	r3, r3
 8018382:	441a      	add	r2, r3
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	2b02      	cmp	r3, #2
 801838c:	d105      	bne.n	801839a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801838e:	693b      	ldr	r3, [r7, #16]
 8018390:	2b00      	cmp	r3, #0
 8018392:	d002      	beq.n	801839a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8018394:	693b      	ldr	r3, [r7, #16]
 8018396:	3b01      	subs	r3, #1
 8018398:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801839a:	693b      	ldr	r3, [r7, #16]
 801839c:	1c5a      	adds	r2, r3, #1
 801839e:	68fb      	ldr	r3, [r7, #12]
 80183a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80183a2:	697b      	ldr	r3, [r7, #20]
}
 80183a4:	4618      	mov	r0, r3
 80183a6:	3718      	adds	r7, #24
 80183a8:	46bd      	mov	sp, r7
 80183aa:	bd80      	pop	{r7, pc}

080183ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80183ac:	b580      	push	{r7, lr}
 80183ae:	b082      	sub	sp, #8
 80183b0:	af00      	add	r7, sp, #0
 80183b2:	6078      	str	r0, [r7, #4]
 80183b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d018      	beq.n	80183f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	68da      	ldr	r2, [r3, #12]
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183c6:	441a      	add	r2, r3
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	68da      	ldr	r2, [r3, #12]
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	689b      	ldr	r3, [r3, #8]
 80183d4:	429a      	cmp	r2, r3
 80183d6:	d303      	bcc.n	80183e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	681a      	ldr	r2, [r3, #0]
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	68d9      	ldr	r1, [r3, #12]
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183e8:	461a      	mov	r2, r3
 80183ea:	6838      	ldr	r0, [r7, #0]
 80183ec:	f002 f980 	bl	801a6f0 <memcpy>
	}
}
 80183f0:	bf00      	nop
 80183f2:	3708      	adds	r7, #8
 80183f4:	46bd      	mov	sp, r7
 80183f6:	bd80      	pop	{r7, pc}

080183f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80183f8:	b580      	push	{r7, lr}
 80183fa:	b084      	sub	sp, #16
 80183fc:	af00      	add	r7, sp, #0
 80183fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8018400:	f001 fe40 	bl	801a084 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801840a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801840c:	e011      	b.n	8018432 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018412:	2b00      	cmp	r3, #0
 8018414:	d012      	beq.n	801843c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	3324      	adds	r3, #36	; 0x24
 801841a:	4618      	mov	r0, r3
 801841c:	f000 fe82 	bl	8019124 <xTaskRemoveFromEventList>
 8018420:	4603      	mov	r3, r0
 8018422:	2b00      	cmp	r3, #0
 8018424:	d001      	beq.n	801842a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8018426:	f000 ffbb 	bl	80193a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801842a:	7bfb      	ldrb	r3, [r7, #15]
 801842c:	3b01      	subs	r3, #1
 801842e:	b2db      	uxtb	r3, r3
 8018430:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018436:	2b00      	cmp	r3, #0
 8018438:	dce9      	bgt.n	801840e <prvUnlockQueue+0x16>
 801843a:	e000      	b.n	801843e <prvUnlockQueue+0x46>
					break;
 801843c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	22ff      	movs	r2, #255	; 0xff
 8018442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8018446:	f001 fe4d 	bl	801a0e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801844a:	f001 fe1b 	bl	801a084 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018454:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018456:	e011      	b.n	801847c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	691b      	ldr	r3, [r3, #16]
 801845c:	2b00      	cmp	r3, #0
 801845e:	d012      	beq.n	8018486 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	3310      	adds	r3, #16
 8018464:	4618      	mov	r0, r3
 8018466:	f000 fe5d 	bl	8019124 <xTaskRemoveFromEventList>
 801846a:	4603      	mov	r3, r0
 801846c:	2b00      	cmp	r3, #0
 801846e:	d001      	beq.n	8018474 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8018470:	f000 ff96 	bl	80193a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8018474:	7bbb      	ldrb	r3, [r7, #14]
 8018476:	3b01      	subs	r3, #1
 8018478:	b2db      	uxtb	r3, r3
 801847a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801847c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018480:	2b00      	cmp	r3, #0
 8018482:	dce9      	bgt.n	8018458 <prvUnlockQueue+0x60>
 8018484:	e000      	b.n	8018488 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8018486:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	22ff      	movs	r2, #255	; 0xff
 801848c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8018490:	f001 fe28 	bl	801a0e4 <vPortExitCritical>
}
 8018494:	bf00      	nop
 8018496:	3710      	adds	r7, #16
 8018498:	46bd      	mov	sp, r7
 801849a:	bd80      	pop	{r7, pc}

0801849c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801849c:	b580      	push	{r7, lr}
 801849e:	b084      	sub	sp, #16
 80184a0:	af00      	add	r7, sp, #0
 80184a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80184a4:	f001 fdee 	bl	801a084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d102      	bne.n	80184b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80184b0:	2301      	movs	r3, #1
 80184b2:	60fb      	str	r3, [r7, #12]
 80184b4:	e001      	b.n	80184ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80184b6:	2300      	movs	r3, #0
 80184b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80184ba:	f001 fe13 	bl	801a0e4 <vPortExitCritical>

	return xReturn;
 80184be:	68fb      	ldr	r3, [r7, #12]
}
 80184c0:	4618      	mov	r0, r3
 80184c2:	3710      	adds	r7, #16
 80184c4:	46bd      	mov	sp, r7
 80184c6:	bd80      	pop	{r7, pc}

080184c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80184c8:	b580      	push	{r7, lr}
 80184ca:	b084      	sub	sp, #16
 80184cc:	af00      	add	r7, sp, #0
 80184ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80184d0:	f001 fdd8 	bl	801a084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80184dc:	429a      	cmp	r2, r3
 80184de:	d102      	bne.n	80184e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80184e0:	2301      	movs	r3, #1
 80184e2:	60fb      	str	r3, [r7, #12]
 80184e4:	e001      	b.n	80184ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80184e6:	2300      	movs	r3, #0
 80184e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80184ea:	f001 fdfb 	bl	801a0e4 <vPortExitCritical>

	return xReturn;
 80184ee:	68fb      	ldr	r3, [r7, #12]
}
 80184f0:	4618      	mov	r0, r3
 80184f2:	3710      	adds	r7, #16
 80184f4:	46bd      	mov	sp, r7
 80184f6:	bd80      	pop	{r7, pc}

080184f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80184f8:	b480      	push	{r7}
 80184fa:	b085      	sub	sp, #20
 80184fc:	af00      	add	r7, sp, #0
 80184fe:	6078      	str	r0, [r7, #4]
 8018500:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018502:	2300      	movs	r3, #0
 8018504:	60fb      	str	r3, [r7, #12]
 8018506:	e014      	b.n	8018532 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8018508:	4a0f      	ldr	r2, [pc, #60]	; (8018548 <vQueueAddToRegistry+0x50>)
 801850a:	68fb      	ldr	r3, [r7, #12]
 801850c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018510:	2b00      	cmp	r3, #0
 8018512:	d10b      	bne.n	801852c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8018514:	490c      	ldr	r1, [pc, #48]	; (8018548 <vQueueAddToRegistry+0x50>)
 8018516:	68fb      	ldr	r3, [r7, #12]
 8018518:	683a      	ldr	r2, [r7, #0]
 801851a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801851e:	4a0a      	ldr	r2, [pc, #40]	; (8018548 <vQueueAddToRegistry+0x50>)
 8018520:	68fb      	ldr	r3, [r7, #12]
 8018522:	00db      	lsls	r3, r3, #3
 8018524:	4413      	add	r3, r2
 8018526:	687a      	ldr	r2, [r7, #4]
 8018528:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801852a:	e006      	b.n	801853a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801852c:	68fb      	ldr	r3, [r7, #12]
 801852e:	3301      	adds	r3, #1
 8018530:	60fb      	str	r3, [r7, #12]
 8018532:	68fb      	ldr	r3, [r7, #12]
 8018534:	2b07      	cmp	r3, #7
 8018536:	d9e7      	bls.n	8018508 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8018538:	bf00      	nop
 801853a:	bf00      	nop
 801853c:	3714      	adds	r7, #20
 801853e:	46bd      	mov	sp, r7
 8018540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018544:	4770      	bx	lr
 8018546:	bf00      	nop
 8018548:	240026d8 	.word	0x240026d8

0801854c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801854c:	b580      	push	{r7, lr}
 801854e:	b086      	sub	sp, #24
 8018550:	af00      	add	r7, sp, #0
 8018552:	60f8      	str	r0, [r7, #12]
 8018554:	60b9      	str	r1, [r7, #8]
 8018556:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8018558:	68fb      	ldr	r3, [r7, #12]
 801855a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801855c:	f001 fd92 	bl	801a084 <vPortEnterCritical>
 8018560:	697b      	ldr	r3, [r7, #20]
 8018562:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018566:	b25b      	sxtb	r3, r3
 8018568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801856c:	d103      	bne.n	8018576 <vQueueWaitForMessageRestricted+0x2a>
 801856e:	697b      	ldr	r3, [r7, #20]
 8018570:	2200      	movs	r2, #0
 8018572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018576:	697b      	ldr	r3, [r7, #20]
 8018578:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801857c:	b25b      	sxtb	r3, r3
 801857e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018582:	d103      	bne.n	801858c <vQueueWaitForMessageRestricted+0x40>
 8018584:	697b      	ldr	r3, [r7, #20]
 8018586:	2200      	movs	r2, #0
 8018588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801858c:	f001 fdaa 	bl	801a0e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8018590:	697b      	ldr	r3, [r7, #20]
 8018592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018594:	2b00      	cmp	r3, #0
 8018596:	d106      	bne.n	80185a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8018598:	697b      	ldr	r3, [r7, #20]
 801859a:	3324      	adds	r3, #36	; 0x24
 801859c:	687a      	ldr	r2, [r7, #4]
 801859e:	68b9      	ldr	r1, [r7, #8]
 80185a0:	4618      	mov	r0, r3
 80185a2:	f000 fd93 	bl	80190cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80185a6:	6978      	ldr	r0, [r7, #20]
 80185a8:	f7ff ff26 	bl	80183f8 <prvUnlockQueue>
	}
 80185ac:	bf00      	nop
 80185ae:	3718      	adds	r7, #24
 80185b0:	46bd      	mov	sp, r7
 80185b2:	bd80      	pop	{r7, pc}

080185b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80185b4:	b580      	push	{r7, lr}
 80185b6:	b08e      	sub	sp, #56	; 0x38
 80185b8:	af04      	add	r7, sp, #16
 80185ba:	60f8      	str	r0, [r7, #12]
 80185bc:	60b9      	str	r1, [r7, #8]
 80185be:	607a      	str	r2, [r7, #4]
 80185c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80185c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d10a      	bne.n	80185de <xTaskCreateStatic+0x2a>
	__asm volatile
 80185c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185cc:	f383 8811 	msr	BASEPRI, r3
 80185d0:	f3bf 8f6f 	isb	sy
 80185d4:	f3bf 8f4f 	dsb	sy
 80185d8:	623b      	str	r3, [r7, #32]
}
 80185da:	bf00      	nop
 80185dc:	e7fe      	b.n	80185dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80185de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d10a      	bne.n	80185fa <xTaskCreateStatic+0x46>
	__asm volatile
 80185e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185e8:	f383 8811 	msr	BASEPRI, r3
 80185ec:	f3bf 8f6f 	isb	sy
 80185f0:	f3bf 8f4f 	dsb	sy
 80185f4:	61fb      	str	r3, [r7, #28]
}
 80185f6:	bf00      	nop
 80185f8:	e7fe      	b.n	80185f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80185fa:	235c      	movs	r3, #92	; 0x5c
 80185fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80185fe:	693b      	ldr	r3, [r7, #16]
 8018600:	2b5c      	cmp	r3, #92	; 0x5c
 8018602:	d00a      	beq.n	801861a <xTaskCreateStatic+0x66>
	__asm volatile
 8018604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018608:	f383 8811 	msr	BASEPRI, r3
 801860c:	f3bf 8f6f 	isb	sy
 8018610:	f3bf 8f4f 	dsb	sy
 8018614:	61bb      	str	r3, [r7, #24]
}
 8018616:	bf00      	nop
 8018618:	e7fe      	b.n	8018618 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801861a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801861c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801861e:	2b00      	cmp	r3, #0
 8018620:	d01e      	beq.n	8018660 <xTaskCreateStatic+0xac>
 8018622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018624:	2b00      	cmp	r3, #0
 8018626:	d01b      	beq.n	8018660 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801862a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801862c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801862e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018630:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8018632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018634:	2202      	movs	r2, #2
 8018636:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801863a:	2300      	movs	r3, #0
 801863c:	9303      	str	r3, [sp, #12]
 801863e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018640:	9302      	str	r3, [sp, #8]
 8018642:	f107 0314 	add.w	r3, r7, #20
 8018646:	9301      	str	r3, [sp, #4]
 8018648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801864a:	9300      	str	r3, [sp, #0]
 801864c:	683b      	ldr	r3, [r7, #0]
 801864e:	687a      	ldr	r2, [r7, #4]
 8018650:	68b9      	ldr	r1, [r7, #8]
 8018652:	68f8      	ldr	r0, [r7, #12]
 8018654:	f000 f850 	bl	80186f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018658:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801865a:	f000 f8dd 	bl	8018818 <prvAddNewTaskToReadyList>
 801865e:	e001      	b.n	8018664 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8018660:	2300      	movs	r3, #0
 8018662:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8018664:	697b      	ldr	r3, [r7, #20]
	}
 8018666:	4618      	mov	r0, r3
 8018668:	3728      	adds	r7, #40	; 0x28
 801866a:	46bd      	mov	sp, r7
 801866c:	bd80      	pop	{r7, pc}

0801866e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801866e:	b580      	push	{r7, lr}
 8018670:	b08c      	sub	sp, #48	; 0x30
 8018672:	af04      	add	r7, sp, #16
 8018674:	60f8      	str	r0, [r7, #12]
 8018676:	60b9      	str	r1, [r7, #8]
 8018678:	603b      	str	r3, [r7, #0]
 801867a:	4613      	mov	r3, r2
 801867c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801867e:	88fb      	ldrh	r3, [r7, #6]
 8018680:	009b      	lsls	r3, r3, #2
 8018682:	4618      	mov	r0, r3
 8018684:	f001 fe20 	bl	801a2c8 <pvPortMalloc>
 8018688:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801868a:	697b      	ldr	r3, [r7, #20]
 801868c:	2b00      	cmp	r3, #0
 801868e:	d00e      	beq.n	80186ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8018690:	205c      	movs	r0, #92	; 0x5c
 8018692:	f001 fe19 	bl	801a2c8 <pvPortMalloc>
 8018696:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8018698:	69fb      	ldr	r3, [r7, #28]
 801869a:	2b00      	cmp	r3, #0
 801869c:	d003      	beq.n	80186a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801869e:	69fb      	ldr	r3, [r7, #28]
 80186a0:	697a      	ldr	r2, [r7, #20]
 80186a2:	631a      	str	r2, [r3, #48]	; 0x30
 80186a4:	e005      	b.n	80186b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80186a6:	6978      	ldr	r0, [r7, #20]
 80186a8:	f001 feda 	bl	801a460 <vPortFree>
 80186ac:	e001      	b.n	80186b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80186ae:	2300      	movs	r3, #0
 80186b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80186b2:	69fb      	ldr	r3, [r7, #28]
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	d017      	beq.n	80186e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80186b8:	69fb      	ldr	r3, [r7, #28]
 80186ba:	2200      	movs	r2, #0
 80186bc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80186c0:	88fa      	ldrh	r2, [r7, #6]
 80186c2:	2300      	movs	r3, #0
 80186c4:	9303      	str	r3, [sp, #12]
 80186c6:	69fb      	ldr	r3, [r7, #28]
 80186c8:	9302      	str	r3, [sp, #8]
 80186ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186cc:	9301      	str	r3, [sp, #4]
 80186ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186d0:	9300      	str	r3, [sp, #0]
 80186d2:	683b      	ldr	r3, [r7, #0]
 80186d4:	68b9      	ldr	r1, [r7, #8]
 80186d6:	68f8      	ldr	r0, [r7, #12]
 80186d8:	f000 f80e 	bl	80186f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80186dc:	69f8      	ldr	r0, [r7, #28]
 80186de:	f000 f89b 	bl	8018818 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80186e2:	2301      	movs	r3, #1
 80186e4:	61bb      	str	r3, [r7, #24]
 80186e6:	e002      	b.n	80186ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80186e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80186ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80186ee:	69bb      	ldr	r3, [r7, #24]
	}
 80186f0:	4618      	mov	r0, r3
 80186f2:	3720      	adds	r7, #32
 80186f4:	46bd      	mov	sp, r7
 80186f6:	bd80      	pop	{r7, pc}

080186f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80186f8:	b580      	push	{r7, lr}
 80186fa:	b088      	sub	sp, #32
 80186fc:	af00      	add	r7, sp, #0
 80186fe:	60f8      	str	r0, [r7, #12]
 8018700:	60b9      	str	r1, [r7, #8]
 8018702:	607a      	str	r2, [r7, #4]
 8018704:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8018706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018708:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	009b      	lsls	r3, r3, #2
 801870e:	461a      	mov	r2, r3
 8018710:	21a5      	movs	r1, #165	; 0xa5
 8018712:	f001 fffb 	bl	801a70c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8018716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801871a:	6879      	ldr	r1, [r7, #4]
 801871c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8018720:	440b      	add	r3, r1
 8018722:	009b      	lsls	r3, r3, #2
 8018724:	4413      	add	r3, r2
 8018726:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8018728:	69bb      	ldr	r3, [r7, #24]
 801872a:	f023 0307 	bic.w	r3, r3, #7
 801872e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8018730:	69bb      	ldr	r3, [r7, #24]
 8018732:	f003 0307 	and.w	r3, r3, #7
 8018736:	2b00      	cmp	r3, #0
 8018738:	d00a      	beq.n	8018750 <prvInitialiseNewTask+0x58>
	__asm volatile
 801873a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801873e:	f383 8811 	msr	BASEPRI, r3
 8018742:	f3bf 8f6f 	isb	sy
 8018746:	f3bf 8f4f 	dsb	sy
 801874a:	617b      	str	r3, [r7, #20]
}
 801874c:	bf00      	nop
 801874e:	e7fe      	b.n	801874e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8018750:	68bb      	ldr	r3, [r7, #8]
 8018752:	2b00      	cmp	r3, #0
 8018754:	d01f      	beq.n	8018796 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018756:	2300      	movs	r3, #0
 8018758:	61fb      	str	r3, [r7, #28]
 801875a:	e012      	b.n	8018782 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801875c:	68ba      	ldr	r2, [r7, #8]
 801875e:	69fb      	ldr	r3, [r7, #28]
 8018760:	4413      	add	r3, r2
 8018762:	7819      	ldrb	r1, [r3, #0]
 8018764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018766:	69fb      	ldr	r3, [r7, #28]
 8018768:	4413      	add	r3, r2
 801876a:	3334      	adds	r3, #52	; 0x34
 801876c:	460a      	mov	r2, r1
 801876e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8018770:	68ba      	ldr	r2, [r7, #8]
 8018772:	69fb      	ldr	r3, [r7, #28]
 8018774:	4413      	add	r3, r2
 8018776:	781b      	ldrb	r3, [r3, #0]
 8018778:	2b00      	cmp	r3, #0
 801877a:	d006      	beq.n	801878a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801877c:	69fb      	ldr	r3, [r7, #28]
 801877e:	3301      	adds	r3, #1
 8018780:	61fb      	str	r3, [r7, #28]
 8018782:	69fb      	ldr	r3, [r7, #28]
 8018784:	2b0f      	cmp	r3, #15
 8018786:	d9e9      	bls.n	801875c <prvInitialiseNewTask+0x64>
 8018788:	e000      	b.n	801878c <prvInitialiseNewTask+0x94>
			{
				break;
 801878a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801878c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801878e:	2200      	movs	r2, #0
 8018790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018794:	e003      	b.n	801879e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8018796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018798:	2200      	movs	r2, #0
 801879a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801879e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187a0:	2b37      	cmp	r3, #55	; 0x37
 80187a2:	d901      	bls.n	80187a8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80187a4:	2337      	movs	r3, #55	; 0x37
 80187a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80187a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80187ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80187ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80187b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80187b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187b6:	2200      	movs	r2, #0
 80187b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80187ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187bc:	3304      	adds	r3, #4
 80187be:	4618      	mov	r0, r3
 80187c0:	f7ff f978 	bl	8017ab4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80187c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187c6:	3318      	adds	r3, #24
 80187c8:	4618      	mov	r0, r3
 80187ca:	f7ff f973 	bl	8017ab4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80187ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80187d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80187d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80187da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80187de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80187e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80187e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187e6:	2200      	movs	r2, #0
 80187e8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80187ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187ec:	2200      	movs	r2, #0
 80187ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80187f2:	683a      	ldr	r2, [r7, #0]
 80187f4:	68f9      	ldr	r1, [r7, #12]
 80187f6:	69b8      	ldr	r0, [r7, #24]
 80187f8:	f001 fb1a 	bl	8019e30 <pxPortInitialiseStack>
 80187fc:	4602      	mov	r2, r0
 80187fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018800:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8018802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018804:	2b00      	cmp	r3, #0
 8018806:	d002      	beq.n	801880e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8018808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801880a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801880c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801880e:	bf00      	nop
 8018810:	3720      	adds	r7, #32
 8018812:	46bd      	mov	sp, r7
 8018814:	bd80      	pop	{r7, pc}
	...

08018818 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8018818:	b580      	push	{r7, lr}
 801881a:	b082      	sub	sp, #8
 801881c:	af00      	add	r7, sp, #0
 801881e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018820:	f001 fc30 	bl	801a084 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8018824:	4b2d      	ldr	r3, [pc, #180]	; (80188dc <prvAddNewTaskToReadyList+0xc4>)
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	3301      	adds	r3, #1
 801882a:	4a2c      	ldr	r2, [pc, #176]	; (80188dc <prvAddNewTaskToReadyList+0xc4>)
 801882c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801882e:	4b2c      	ldr	r3, [pc, #176]	; (80188e0 <prvAddNewTaskToReadyList+0xc8>)
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	2b00      	cmp	r3, #0
 8018834:	d109      	bne.n	801884a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8018836:	4a2a      	ldr	r2, [pc, #168]	; (80188e0 <prvAddNewTaskToReadyList+0xc8>)
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801883c:	4b27      	ldr	r3, [pc, #156]	; (80188dc <prvAddNewTaskToReadyList+0xc4>)
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	2b01      	cmp	r3, #1
 8018842:	d110      	bne.n	8018866 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018844:	f000 fdd0 	bl	80193e8 <prvInitialiseTaskLists>
 8018848:	e00d      	b.n	8018866 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801884a:	4b26      	ldr	r3, [pc, #152]	; (80188e4 <prvAddNewTaskToReadyList+0xcc>)
 801884c:	681b      	ldr	r3, [r3, #0]
 801884e:	2b00      	cmp	r3, #0
 8018850:	d109      	bne.n	8018866 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8018852:	4b23      	ldr	r3, [pc, #140]	; (80188e0 <prvAddNewTaskToReadyList+0xc8>)
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801885c:	429a      	cmp	r2, r3
 801885e:	d802      	bhi.n	8018866 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018860:	4a1f      	ldr	r2, [pc, #124]	; (80188e0 <prvAddNewTaskToReadyList+0xc8>)
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8018866:	4b20      	ldr	r3, [pc, #128]	; (80188e8 <prvAddNewTaskToReadyList+0xd0>)
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	3301      	adds	r3, #1
 801886c:	4a1e      	ldr	r2, [pc, #120]	; (80188e8 <prvAddNewTaskToReadyList+0xd0>)
 801886e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018870:	4b1d      	ldr	r3, [pc, #116]	; (80188e8 <prvAddNewTaskToReadyList+0xd0>)
 8018872:	681a      	ldr	r2, [r3, #0]
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801887c:	4b1b      	ldr	r3, [pc, #108]	; (80188ec <prvAddNewTaskToReadyList+0xd4>)
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	429a      	cmp	r2, r3
 8018882:	d903      	bls.n	801888c <prvAddNewTaskToReadyList+0x74>
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018888:	4a18      	ldr	r2, [pc, #96]	; (80188ec <prvAddNewTaskToReadyList+0xd4>)
 801888a:	6013      	str	r3, [r2, #0]
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018890:	4613      	mov	r3, r2
 8018892:	009b      	lsls	r3, r3, #2
 8018894:	4413      	add	r3, r2
 8018896:	009b      	lsls	r3, r3, #2
 8018898:	4a15      	ldr	r2, [pc, #84]	; (80188f0 <prvAddNewTaskToReadyList+0xd8>)
 801889a:	441a      	add	r2, r3
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	3304      	adds	r3, #4
 80188a0:	4619      	mov	r1, r3
 80188a2:	4610      	mov	r0, r2
 80188a4:	f7ff f913 	bl	8017ace <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80188a8:	f001 fc1c 	bl	801a0e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80188ac:	4b0d      	ldr	r3, [pc, #52]	; (80188e4 <prvAddNewTaskToReadyList+0xcc>)
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	d00e      	beq.n	80188d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80188b4:	4b0a      	ldr	r3, [pc, #40]	; (80188e0 <prvAddNewTaskToReadyList+0xc8>)
 80188b6:	681b      	ldr	r3, [r3, #0]
 80188b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188be:	429a      	cmp	r2, r3
 80188c0:	d207      	bcs.n	80188d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80188c2:	4b0c      	ldr	r3, [pc, #48]	; (80188f4 <prvAddNewTaskToReadyList+0xdc>)
 80188c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80188c8:	601a      	str	r2, [r3, #0]
 80188ca:	f3bf 8f4f 	dsb	sy
 80188ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80188d2:	bf00      	nop
 80188d4:	3708      	adds	r7, #8
 80188d6:	46bd      	mov	sp, r7
 80188d8:	bd80      	pop	{r7, pc}
 80188da:	bf00      	nop
 80188dc:	24002bec 	.word	0x24002bec
 80188e0:	24002718 	.word	0x24002718
 80188e4:	24002bf8 	.word	0x24002bf8
 80188e8:	24002c08 	.word	0x24002c08
 80188ec:	24002bf4 	.word	0x24002bf4
 80188f0:	2400271c 	.word	0x2400271c
 80188f4:	e000ed04 	.word	0xe000ed04

080188f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80188f8:	b580      	push	{r7, lr}
 80188fa:	b084      	sub	sp, #16
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018900:	2300      	movs	r3, #0
 8018902:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	2b00      	cmp	r3, #0
 8018908:	d017      	beq.n	801893a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801890a:	4b13      	ldr	r3, [pc, #76]	; (8018958 <vTaskDelay+0x60>)
 801890c:	681b      	ldr	r3, [r3, #0]
 801890e:	2b00      	cmp	r3, #0
 8018910:	d00a      	beq.n	8018928 <vTaskDelay+0x30>
	__asm volatile
 8018912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018916:	f383 8811 	msr	BASEPRI, r3
 801891a:	f3bf 8f6f 	isb	sy
 801891e:	f3bf 8f4f 	dsb	sy
 8018922:	60bb      	str	r3, [r7, #8]
}
 8018924:	bf00      	nop
 8018926:	e7fe      	b.n	8018926 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8018928:	f000 f986 	bl	8018c38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801892c:	2100      	movs	r1, #0
 801892e:	6878      	ldr	r0, [r7, #4]
 8018930:	f000 febc 	bl	80196ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8018934:	f000 f98e 	bl	8018c54 <xTaskResumeAll>
 8018938:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801893a:	68fb      	ldr	r3, [r7, #12]
 801893c:	2b00      	cmp	r3, #0
 801893e:	d107      	bne.n	8018950 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8018940:	4b06      	ldr	r3, [pc, #24]	; (801895c <vTaskDelay+0x64>)
 8018942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018946:	601a      	str	r2, [r3, #0]
 8018948:	f3bf 8f4f 	dsb	sy
 801894c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018950:	bf00      	nop
 8018952:	3710      	adds	r7, #16
 8018954:	46bd      	mov	sp, r7
 8018956:	bd80      	pop	{r7, pc}
 8018958:	24002c14 	.word	0x24002c14
 801895c:	e000ed04 	.word	0xe000ed04

08018960 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8018960:	b580      	push	{r7, lr}
 8018962:	b084      	sub	sp, #16
 8018964:	af00      	add	r7, sp, #0
 8018966:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8018968:	f001 fb8c 	bl	801a084 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	2b00      	cmp	r3, #0
 8018970:	d102      	bne.n	8018978 <vTaskSuspend+0x18>
 8018972:	4b30      	ldr	r3, [pc, #192]	; (8018a34 <vTaskSuspend+0xd4>)
 8018974:	681b      	ldr	r3, [r3, #0]
 8018976:	e000      	b.n	801897a <vTaskSuspend+0x1a>
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801897c:	68fb      	ldr	r3, [r7, #12]
 801897e:	3304      	adds	r3, #4
 8018980:	4618      	mov	r0, r3
 8018982:	f7ff f901 	bl	8017b88 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801898a:	2b00      	cmp	r3, #0
 801898c:	d004      	beq.n	8018998 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	3318      	adds	r3, #24
 8018992:	4618      	mov	r0, r3
 8018994:	f7ff f8f8 	bl	8017b88 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8018998:	68fb      	ldr	r3, [r7, #12]
 801899a:	3304      	adds	r3, #4
 801899c:	4619      	mov	r1, r3
 801899e:	4826      	ldr	r0, [pc, #152]	; (8018a38 <vTaskSuspend+0xd8>)
 80189a0:	f7ff f895 	bl	8017ace <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80189aa:	b2db      	uxtb	r3, r3
 80189ac:	2b01      	cmp	r3, #1
 80189ae:	d103      	bne.n	80189b8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80189b0:	68fb      	ldr	r3, [r7, #12]
 80189b2:	2200      	movs	r2, #0
 80189b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80189b8:	f001 fb94 	bl	801a0e4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80189bc:	4b1f      	ldr	r3, [pc, #124]	; (8018a3c <vTaskSuspend+0xdc>)
 80189be:	681b      	ldr	r3, [r3, #0]
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d005      	beq.n	80189d0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80189c4:	f001 fb5e 	bl	801a084 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80189c8:	f000 fdac 	bl	8019524 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80189cc:	f001 fb8a 	bl	801a0e4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80189d0:	4b18      	ldr	r3, [pc, #96]	; (8018a34 <vTaskSuspend+0xd4>)
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	68fa      	ldr	r2, [r7, #12]
 80189d6:	429a      	cmp	r2, r3
 80189d8:	d127      	bne.n	8018a2a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80189da:	4b18      	ldr	r3, [pc, #96]	; (8018a3c <vTaskSuspend+0xdc>)
 80189dc:	681b      	ldr	r3, [r3, #0]
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d017      	beq.n	8018a12 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80189e2:	4b17      	ldr	r3, [pc, #92]	; (8018a40 <vTaskSuspend+0xe0>)
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d00a      	beq.n	8018a00 <vTaskSuspend+0xa0>
	__asm volatile
 80189ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189ee:	f383 8811 	msr	BASEPRI, r3
 80189f2:	f3bf 8f6f 	isb	sy
 80189f6:	f3bf 8f4f 	dsb	sy
 80189fa:	60bb      	str	r3, [r7, #8]
}
 80189fc:	bf00      	nop
 80189fe:	e7fe      	b.n	80189fe <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8018a00:	4b10      	ldr	r3, [pc, #64]	; (8018a44 <vTaskSuspend+0xe4>)
 8018a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018a06:	601a      	str	r2, [r3, #0]
 8018a08:	f3bf 8f4f 	dsb	sy
 8018a0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018a10:	e00b      	b.n	8018a2a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8018a12:	4b09      	ldr	r3, [pc, #36]	; (8018a38 <vTaskSuspend+0xd8>)
 8018a14:	681a      	ldr	r2, [r3, #0]
 8018a16:	4b0c      	ldr	r3, [pc, #48]	; (8018a48 <vTaskSuspend+0xe8>)
 8018a18:	681b      	ldr	r3, [r3, #0]
 8018a1a:	429a      	cmp	r2, r3
 8018a1c:	d103      	bne.n	8018a26 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8018a1e:	4b05      	ldr	r3, [pc, #20]	; (8018a34 <vTaskSuspend+0xd4>)
 8018a20:	2200      	movs	r2, #0
 8018a22:	601a      	str	r2, [r3, #0]
	}
 8018a24:	e001      	b.n	8018a2a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8018a26:	f000 fa85 	bl	8018f34 <vTaskSwitchContext>
	}
 8018a2a:	bf00      	nop
 8018a2c:	3710      	adds	r7, #16
 8018a2e:	46bd      	mov	sp, r7
 8018a30:	bd80      	pop	{r7, pc}
 8018a32:	bf00      	nop
 8018a34:	24002718 	.word	0x24002718
 8018a38:	24002bd8 	.word	0x24002bd8
 8018a3c:	24002bf8 	.word	0x24002bf8
 8018a40:	24002c14 	.word	0x24002c14
 8018a44:	e000ed04 	.word	0xe000ed04
 8018a48:	24002bec 	.word	0x24002bec

08018a4c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8018a4c:	b480      	push	{r7}
 8018a4e:	b087      	sub	sp, #28
 8018a50:	af00      	add	r7, sp, #0
 8018a52:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8018a54:	2300      	movs	r3, #0
 8018a56:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d10a      	bne.n	8018a78 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8018a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a66:	f383 8811 	msr	BASEPRI, r3
 8018a6a:	f3bf 8f6f 	isb	sy
 8018a6e:	f3bf 8f4f 	dsb	sy
 8018a72:	60fb      	str	r3, [r7, #12]
}
 8018a74:	bf00      	nop
 8018a76:	e7fe      	b.n	8018a76 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018a78:	693b      	ldr	r3, [r7, #16]
 8018a7a:	695b      	ldr	r3, [r3, #20]
 8018a7c:	4a0a      	ldr	r2, [pc, #40]	; (8018aa8 <prvTaskIsTaskSuspended+0x5c>)
 8018a7e:	4293      	cmp	r3, r2
 8018a80:	d10a      	bne.n	8018a98 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8018a82:	693b      	ldr	r3, [r7, #16]
 8018a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a86:	4a09      	ldr	r2, [pc, #36]	; (8018aac <prvTaskIsTaskSuspended+0x60>)
 8018a88:	4293      	cmp	r3, r2
 8018a8a:	d005      	beq.n	8018a98 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8018a8c:	693b      	ldr	r3, [r7, #16]
 8018a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a90:	2b00      	cmp	r3, #0
 8018a92:	d101      	bne.n	8018a98 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8018a94:	2301      	movs	r3, #1
 8018a96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018a98:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	371c      	adds	r7, #28
 8018a9e:	46bd      	mov	sp, r7
 8018aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aa4:	4770      	bx	lr
 8018aa6:	bf00      	nop
 8018aa8:	24002bd8 	.word	0x24002bd8
 8018aac:	24002bac 	.word	0x24002bac

08018ab0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8018ab0:	b580      	push	{r7, lr}
 8018ab2:	b084      	sub	sp, #16
 8018ab4:	af00      	add	r7, sp, #0
 8018ab6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d10a      	bne.n	8018ad8 <vTaskResume+0x28>
	__asm volatile
 8018ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ac6:	f383 8811 	msr	BASEPRI, r3
 8018aca:	f3bf 8f6f 	isb	sy
 8018ace:	f3bf 8f4f 	dsb	sy
 8018ad2:	60bb      	str	r3, [r7, #8]
}
 8018ad4:	bf00      	nop
 8018ad6:	e7fe      	b.n	8018ad6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8018ad8:	4b20      	ldr	r3, [pc, #128]	; (8018b5c <vTaskResume+0xac>)
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	68fa      	ldr	r2, [r7, #12]
 8018ade:	429a      	cmp	r2, r3
 8018ae0:	d038      	beq.n	8018b54 <vTaskResume+0xa4>
 8018ae2:	68fb      	ldr	r3, [r7, #12]
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	d035      	beq.n	8018b54 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8018ae8:	f001 facc 	bl	801a084 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8018aec:	68f8      	ldr	r0, [r7, #12]
 8018aee:	f7ff ffad 	bl	8018a4c <prvTaskIsTaskSuspended>
 8018af2:	4603      	mov	r3, r0
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	d02b      	beq.n	8018b50 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8018af8:	68fb      	ldr	r3, [r7, #12]
 8018afa:	3304      	adds	r3, #4
 8018afc:	4618      	mov	r0, r3
 8018afe:	f7ff f843 	bl	8017b88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018b02:	68fb      	ldr	r3, [r7, #12]
 8018b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b06:	4b16      	ldr	r3, [pc, #88]	; (8018b60 <vTaskResume+0xb0>)
 8018b08:	681b      	ldr	r3, [r3, #0]
 8018b0a:	429a      	cmp	r2, r3
 8018b0c:	d903      	bls.n	8018b16 <vTaskResume+0x66>
 8018b0e:	68fb      	ldr	r3, [r7, #12]
 8018b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b12:	4a13      	ldr	r2, [pc, #76]	; (8018b60 <vTaskResume+0xb0>)
 8018b14:	6013      	str	r3, [r2, #0]
 8018b16:	68fb      	ldr	r3, [r7, #12]
 8018b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b1a:	4613      	mov	r3, r2
 8018b1c:	009b      	lsls	r3, r3, #2
 8018b1e:	4413      	add	r3, r2
 8018b20:	009b      	lsls	r3, r3, #2
 8018b22:	4a10      	ldr	r2, [pc, #64]	; (8018b64 <vTaskResume+0xb4>)
 8018b24:	441a      	add	r2, r3
 8018b26:	68fb      	ldr	r3, [r7, #12]
 8018b28:	3304      	adds	r3, #4
 8018b2a:	4619      	mov	r1, r3
 8018b2c:	4610      	mov	r0, r2
 8018b2e:	f7fe ffce 	bl	8017ace <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018b32:	68fb      	ldr	r3, [r7, #12]
 8018b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b36:	4b09      	ldr	r3, [pc, #36]	; (8018b5c <vTaskResume+0xac>)
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b3c:	429a      	cmp	r2, r3
 8018b3e:	d307      	bcc.n	8018b50 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8018b40:	4b09      	ldr	r3, [pc, #36]	; (8018b68 <vTaskResume+0xb8>)
 8018b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018b46:	601a      	str	r2, [r3, #0]
 8018b48:	f3bf 8f4f 	dsb	sy
 8018b4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8018b50:	f001 fac8 	bl	801a0e4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018b54:	bf00      	nop
 8018b56:	3710      	adds	r7, #16
 8018b58:	46bd      	mov	sp, r7
 8018b5a:	bd80      	pop	{r7, pc}
 8018b5c:	24002718 	.word	0x24002718
 8018b60:	24002bf4 	.word	0x24002bf4
 8018b64:	2400271c 	.word	0x2400271c
 8018b68:	e000ed04 	.word	0xe000ed04

08018b6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018b6c:	b580      	push	{r7, lr}
 8018b6e:	b08a      	sub	sp, #40	; 0x28
 8018b70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8018b72:	2300      	movs	r3, #0
 8018b74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8018b76:	2300      	movs	r3, #0
 8018b78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8018b7a:	463a      	mov	r2, r7
 8018b7c:	1d39      	adds	r1, r7, #4
 8018b7e:	f107 0308 	add.w	r3, r7, #8
 8018b82:	4618      	mov	r0, r3
 8018b84:	f7fe fcd6 	bl	8017534 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8018b88:	6839      	ldr	r1, [r7, #0]
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	68ba      	ldr	r2, [r7, #8]
 8018b8e:	9202      	str	r2, [sp, #8]
 8018b90:	9301      	str	r3, [sp, #4]
 8018b92:	2300      	movs	r3, #0
 8018b94:	9300      	str	r3, [sp, #0]
 8018b96:	2300      	movs	r3, #0
 8018b98:	460a      	mov	r2, r1
 8018b9a:	4921      	ldr	r1, [pc, #132]	; (8018c20 <vTaskStartScheduler+0xb4>)
 8018b9c:	4821      	ldr	r0, [pc, #132]	; (8018c24 <vTaskStartScheduler+0xb8>)
 8018b9e:	f7ff fd09 	bl	80185b4 <xTaskCreateStatic>
 8018ba2:	4603      	mov	r3, r0
 8018ba4:	4a20      	ldr	r2, [pc, #128]	; (8018c28 <vTaskStartScheduler+0xbc>)
 8018ba6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8018ba8:	4b1f      	ldr	r3, [pc, #124]	; (8018c28 <vTaskStartScheduler+0xbc>)
 8018baa:	681b      	ldr	r3, [r3, #0]
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d002      	beq.n	8018bb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8018bb0:	2301      	movs	r3, #1
 8018bb2:	617b      	str	r3, [r7, #20]
 8018bb4:	e001      	b.n	8018bba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8018bb6:	2300      	movs	r3, #0
 8018bb8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8018bba:	697b      	ldr	r3, [r7, #20]
 8018bbc:	2b01      	cmp	r3, #1
 8018bbe:	d102      	bne.n	8018bc6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8018bc0:	f000 fdc8 	bl	8019754 <xTimerCreateTimerTask>
 8018bc4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8018bc6:	697b      	ldr	r3, [r7, #20]
 8018bc8:	2b01      	cmp	r3, #1
 8018bca:	d116      	bne.n	8018bfa <vTaskStartScheduler+0x8e>
	__asm volatile
 8018bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bd0:	f383 8811 	msr	BASEPRI, r3
 8018bd4:	f3bf 8f6f 	isb	sy
 8018bd8:	f3bf 8f4f 	dsb	sy
 8018bdc:	613b      	str	r3, [r7, #16]
}
 8018bde:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018be0:	4b12      	ldr	r3, [pc, #72]	; (8018c2c <vTaskStartScheduler+0xc0>)
 8018be2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018be6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018be8:	4b11      	ldr	r3, [pc, #68]	; (8018c30 <vTaskStartScheduler+0xc4>)
 8018bea:	2201      	movs	r2, #1
 8018bec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018bee:	4b11      	ldr	r3, [pc, #68]	; (8018c34 <vTaskStartScheduler+0xc8>)
 8018bf0:	2200      	movs	r2, #0
 8018bf2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018bf4:	f001 f9a4 	bl	8019f40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018bf8:	e00e      	b.n	8018c18 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018bfa:	697b      	ldr	r3, [r7, #20]
 8018bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018c00:	d10a      	bne.n	8018c18 <vTaskStartScheduler+0xac>
	__asm volatile
 8018c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c06:	f383 8811 	msr	BASEPRI, r3
 8018c0a:	f3bf 8f6f 	isb	sy
 8018c0e:	f3bf 8f4f 	dsb	sy
 8018c12:	60fb      	str	r3, [r7, #12]
}
 8018c14:	bf00      	nop
 8018c16:	e7fe      	b.n	8018c16 <vTaskStartScheduler+0xaa>
}
 8018c18:	bf00      	nop
 8018c1a:	3718      	adds	r7, #24
 8018c1c:	46bd      	mov	sp, r7
 8018c1e:	bd80      	pop	{r7, pc}
 8018c20:	0801b380 	.word	0x0801b380
 8018c24:	080193b9 	.word	0x080193b9
 8018c28:	24002c10 	.word	0x24002c10
 8018c2c:	24002c0c 	.word	0x24002c0c
 8018c30:	24002bf8 	.word	0x24002bf8
 8018c34:	24002bf0 	.word	0x24002bf0

08018c38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018c38:	b480      	push	{r7}
 8018c3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8018c3c:	4b04      	ldr	r3, [pc, #16]	; (8018c50 <vTaskSuspendAll+0x18>)
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	3301      	adds	r3, #1
 8018c42:	4a03      	ldr	r2, [pc, #12]	; (8018c50 <vTaskSuspendAll+0x18>)
 8018c44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8018c46:	bf00      	nop
 8018c48:	46bd      	mov	sp, r7
 8018c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c4e:	4770      	bx	lr
 8018c50:	24002c14 	.word	0x24002c14

08018c54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018c54:	b580      	push	{r7, lr}
 8018c56:	b084      	sub	sp, #16
 8018c58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8018c5a:	2300      	movs	r3, #0
 8018c5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8018c5e:	2300      	movs	r3, #0
 8018c60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8018c62:	4b42      	ldr	r3, [pc, #264]	; (8018d6c <xTaskResumeAll+0x118>)
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d10a      	bne.n	8018c80 <xTaskResumeAll+0x2c>
	__asm volatile
 8018c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c6e:	f383 8811 	msr	BASEPRI, r3
 8018c72:	f3bf 8f6f 	isb	sy
 8018c76:	f3bf 8f4f 	dsb	sy
 8018c7a:	603b      	str	r3, [r7, #0]
}
 8018c7c:	bf00      	nop
 8018c7e:	e7fe      	b.n	8018c7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8018c80:	f001 fa00 	bl	801a084 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018c84:	4b39      	ldr	r3, [pc, #228]	; (8018d6c <xTaskResumeAll+0x118>)
 8018c86:	681b      	ldr	r3, [r3, #0]
 8018c88:	3b01      	subs	r3, #1
 8018c8a:	4a38      	ldr	r2, [pc, #224]	; (8018d6c <xTaskResumeAll+0x118>)
 8018c8c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018c8e:	4b37      	ldr	r3, [pc, #220]	; (8018d6c <xTaskResumeAll+0x118>)
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d162      	bne.n	8018d5c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8018c96:	4b36      	ldr	r3, [pc, #216]	; (8018d70 <xTaskResumeAll+0x11c>)
 8018c98:	681b      	ldr	r3, [r3, #0]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d05e      	beq.n	8018d5c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018c9e:	e02f      	b.n	8018d00 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018ca0:	4b34      	ldr	r3, [pc, #208]	; (8018d74 <xTaskResumeAll+0x120>)
 8018ca2:	68db      	ldr	r3, [r3, #12]
 8018ca4:	68db      	ldr	r3, [r3, #12]
 8018ca6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018ca8:	68fb      	ldr	r3, [r7, #12]
 8018caa:	3318      	adds	r3, #24
 8018cac:	4618      	mov	r0, r3
 8018cae:	f7fe ff6b 	bl	8017b88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018cb2:	68fb      	ldr	r3, [r7, #12]
 8018cb4:	3304      	adds	r3, #4
 8018cb6:	4618      	mov	r0, r3
 8018cb8:	f7fe ff66 	bl	8017b88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018cbc:	68fb      	ldr	r3, [r7, #12]
 8018cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018cc0:	4b2d      	ldr	r3, [pc, #180]	; (8018d78 <xTaskResumeAll+0x124>)
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	429a      	cmp	r2, r3
 8018cc6:	d903      	bls.n	8018cd0 <xTaskResumeAll+0x7c>
 8018cc8:	68fb      	ldr	r3, [r7, #12]
 8018cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ccc:	4a2a      	ldr	r2, [pc, #168]	; (8018d78 <xTaskResumeAll+0x124>)
 8018cce:	6013      	str	r3, [r2, #0]
 8018cd0:	68fb      	ldr	r3, [r7, #12]
 8018cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018cd4:	4613      	mov	r3, r2
 8018cd6:	009b      	lsls	r3, r3, #2
 8018cd8:	4413      	add	r3, r2
 8018cda:	009b      	lsls	r3, r3, #2
 8018cdc:	4a27      	ldr	r2, [pc, #156]	; (8018d7c <xTaskResumeAll+0x128>)
 8018cde:	441a      	add	r2, r3
 8018ce0:	68fb      	ldr	r3, [r7, #12]
 8018ce2:	3304      	adds	r3, #4
 8018ce4:	4619      	mov	r1, r3
 8018ce6:	4610      	mov	r0, r2
 8018ce8:	f7fe fef1 	bl	8017ace <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018cec:	68fb      	ldr	r3, [r7, #12]
 8018cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018cf0:	4b23      	ldr	r3, [pc, #140]	; (8018d80 <xTaskResumeAll+0x12c>)
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018cf6:	429a      	cmp	r2, r3
 8018cf8:	d302      	bcc.n	8018d00 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8018cfa:	4b22      	ldr	r3, [pc, #136]	; (8018d84 <xTaskResumeAll+0x130>)
 8018cfc:	2201      	movs	r2, #1
 8018cfe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018d00:	4b1c      	ldr	r3, [pc, #112]	; (8018d74 <xTaskResumeAll+0x120>)
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d1cb      	bne.n	8018ca0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018d08:	68fb      	ldr	r3, [r7, #12]
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d001      	beq.n	8018d12 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018d0e:	f000 fc09 	bl	8019524 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8018d12:	4b1d      	ldr	r3, [pc, #116]	; (8018d88 <xTaskResumeAll+0x134>)
 8018d14:	681b      	ldr	r3, [r3, #0]
 8018d16:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d010      	beq.n	8018d40 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018d1e:	f000 f847 	bl	8018db0 <xTaskIncrementTick>
 8018d22:	4603      	mov	r3, r0
 8018d24:	2b00      	cmp	r3, #0
 8018d26:	d002      	beq.n	8018d2e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8018d28:	4b16      	ldr	r3, [pc, #88]	; (8018d84 <xTaskResumeAll+0x130>)
 8018d2a:	2201      	movs	r2, #1
 8018d2c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	3b01      	subs	r3, #1
 8018d32:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	d1f1      	bne.n	8018d1e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8018d3a:	4b13      	ldr	r3, [pc, #76]	; (8018d88 <xTaskResumeAll+0x134>)
 8018d3c:	2200      	movs	r2, #0
 8018d3e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018d40:	4b10      	ldr	r3, [pc, #64]	; (8018d84 <xTaskResumeAll+0x130>)
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d009      	beq.n	8018d5c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018d48:	2301      	movs	r3, #1
 8018d4a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018d4c:	4b0f      	ldr	r3, [pc, #60]	; (8018d8c <xTaskResumeAll+0x138>)
 8018d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018d52:	601a      	str	r2, [r3, #0]
 8018d54:	f3bf 8f4f 	dsb	sy
 8018d58:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018d5c:	f001 f9c2 	bl	801a0e4 <vPortExitCritical>

	return xAlreadyYielded;
 8018d60:	68bb      	ldr	r3, [r7, #8]
}
 8018d62:	4618      	mov	r0, r3
 8018d64:	3710      	adds	r7, #16
 8018d66:	46bd      	mov	sp, r7
 8018d68:	bd80      	pop	{r7, pc}
 8018d6a:	bf00      	nop
 8018d6c:	24002c14 	.word	0x24002c14
 8018d70:	24002bec 	.word	0x24002bec
 8018d74:	24002bac 	.word	0x24002bac
 8018d78:	24002bf4 	.word	0x24002bf4
 8018d7c:	2400271c 	.word	0x2400271c
 8018d80:	24002718 	.word	0x24002718
 8018d84:	24002c00 	.word	0x24002c00
 8018d88:	24002bfc 	.word	0x24002bfc
 8018d8c:	e000ed04 	.word	0xe000ed04

08018d90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018d90:	b480      	push	{r7}
 8018d92:	b083      	sub	sp, #12
 8018d94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8018d96:	4b05      	ldr	r3, [pc, #20]	; (8018dac <xTaskGetTickCount+0x1c>)
 8018d98:	681b      	ldr	r3, [r3, #0]
 8018d9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018d9c:	687b      	ldr	r3, [r7, #4]
}
 8018d9e:	4618      	mov	r0, r3
 8018da0:	370c      	adds	r7, #12
 8018da2:	46bd      	mov	sp, r7
 8018da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da8:	4770      	bx	lr
 8018daa:	bf00      	nop
 8018dac:	24002bf0 	.word	0x24002bf0

08018db0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018db0:	b580      	push	{r7, lr}
 8018db2:	b086      	sub	sp, #24
 8018db4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8018db6:	2300      	movs	r3, #0
 8018db8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018dba:	4b53      	ldr	r3, [pc, #332]	; (8018f08 <xTaskIncrementTick+0x158>)
 8018dbc:	681b      	ldr	r3, [r3, #0]
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	f040 8095 	bne.w	8018eee <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018dc4:	4b51      	ldr	r3, [pc, #324]	; (8018f0c <xTaskIncrementTick+0x15c>)
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	3301      	adds	r3, #1
 8018dca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018dcc:	4a4f      	ldr	r2, [pc, #316]	; (8018f0c <xTaskIncrementTick+0x15c>)
 8018dce:	693b      	ldr	r3, [r7, #16]
 8018dd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018dd2:	693b      	ldr	r3, [r7, #16]
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d120      	bne.n	8018e1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8018dd8:	4b4d      	ldr	r3, [pc, #308]	; (8018f10 <xTaskIncrementTick+0x160>)
 8018dda:	681b      	ldr	r3, [r3, #0]
 8018ddc:	681b      	ldr	r3, [r3, #0]
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	d00a      	beq.n	8018df8 <xTaskIncrementTick+0x48>
	__asm volatile
 8018de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018de6:	f383 8811 	msr	BASEPRI, r3
 8018dea:	f3bf 8f6f 	isb	sy
 8018dee:	f3bf 8f4f 	dsb	sy
 8018df2:	603b      	str	r3, [r7, #0]
}
 8018df4:	bf00      	nop
 8018df6:	e7fe      	b.n	8018df6 <xTaskIncrementTick+0x46>
 8018df8:	4b45      	ldr	r3, [pc, #276]	; (8018f10 <xTaskIncrementTick+0x160>)
 8018dfa:	681b      	ldr	r3, [r3, #0]
 8018dfc:	60fb      	str	r3, [r7, #12]
 8018dfe:	4b45      	ldr	r3, [pc, #276]	; (8018f14 <xTaskIncrementTick+0x164>)
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	4a43      	ldr	r2, [pc, #268]	; (8018f10 <xTaskIncrementTick+0x160>)
 8018e04:	6013      	str	r3, [r2, #0]
 8018e06:	4a43      	ldr	r2, [pc, #268]	; (8018f14 <xTaskIncrementTick+0x164>)
 8018e08:	68fb      	ldr	r3, [r7, #12]
 8018e0a:	6013      	str	r3, [r2, #0]
 8018e0c:	4b42      	ldr	r3, [pc, #264]	; (8018f18 <xTaskIncrementTick+0x168>)
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	3301      	adds	r3, #1
 8018e12:	4a41      	ldr	r2, [pc, #260]	; (8018f18 <xTaskIncrementTick+0x168>)
 8018e14:	6013      	str	r3, [r2, #0]
 8018e16:	f000 fb85 	bl	8019524 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018e1a:	4b40      	ldr	r3, [pc, #256]	; (8018f1c <xTaskIncrementTick+0x16c>)
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	693a      	ldr	r2, [r7, #16]
 8018e20:	429a      	cmp	r2, r3
 8018e22:	d349      	bcc.n	8018eb8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018e24:	4b3a      	ldr	r3, [pc, #232]	; (8018f10 <xTaskIncrementTick+0x160>)
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	d104      	bne.n	8018e38 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018e2e:	4b3b      	ldr	r3, [pc, #236]	; (8018f1c <xTaskIncrementTick+0x16c>)
 8018e30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018e34:	601a      	str	r2, [r3, #0]
					break;
 8018e36:	e03f      	b.n	8018eb8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018e38:	4b35      	ldr	r3, [pc, #212]	; (8018f10 <xTaskIncrementTick+0x160>)
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	68db      	ldr	r3, [r3, #12]
 8018e3e:	68db      	ldr	r3, [r3, #12]
 8018e40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018e42:	68bb      	ldr	r3, [r7, #8]
 8018e44:	685b      	ldr	r3, [r3, #4]
 8018e46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018e48:	693a      	ldr	r2, [r7, #16]
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	429a      	cmp	r2, r3
 8018e4e:	d203      	bcs.n	8018e58 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018e50:	4a32      	ldr	r2, [pc, #200]	; (8018f1c <xTaskIncrementTick+0x16c>)
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018e56:	e02f      	b.n	8018eb8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018e58:	68bb      	ldr	r3, [r7, #8]
 8018e5a:	3304      	adds	r3, #4
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	f7fe fe93 	bl	8017b88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018e62:	68bb      	ldr	r3, [r7, #8]
 8018e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d004      	beq.n	8018e74 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018e6a:	68bb      	ldr	r3, [r7, #8]
 8018e6c:	3318      	adds	r3, #24
 8018e6e:	4618      	mov	r0, r3
 8018e70:	f7fe fe8a 	bl	8017b88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018e74:	68bb      	ldr	r3, [r7, #8]
 8018e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e78:	4b29      	ldr	r3, [pc, #164]	; (8018f20 <xTaskIncrementTick+0x170>)
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	429a      	cmp	r2, r3
 8018e7e:	d903      	bls.n	8018e88 <xTaskIncrementTick+0xd8>
 8018e80:	68bb      	ldr	r3, [r7, #8]
 8018e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e84:	4a26      	ldr	r2, [pc, #152]	; (8018f20 <xTaskIncrementTick+0x170>)
 8018e86:	6013      	str	r3, [r2, #0]
 8018e88:	68bb      	ldr	r3, [r7, #8]
 8018e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e8c:	4613      	mov	r3, r2
 8018e8e:	009b      	lsls	r3, r3, #2
 8018e90:	4413      	add	r3, r2
 8018e92:	009b      	lsls	r3, r3, #2
 8018e94:	4a23      	ldr	r2, [pc, #140]	; (8018f24 <xTaskIncrementTick+0x174>)
 8018e96:	441a      	add	r2, r3
 8018e98:	68bb      	ldr	r3, [r7, #8]
 8018e9a:	3304      	adds	r3, #4
 8018e9c:	4619      	mov	r1, r3
 8018e9e:	4610      	mov	r0, r2
 8018ea0:	f7fe fe15 	bl	8017ace <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018ea4:	68bb      	ldr	r3, [r7, #8]
 8018ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ea8:	4b1f      	ldr	r3, [pc, #124]	; (8018f28 <xTaskIncrementTick+0x178>)
 8018eaa:	681b      	ldr	r3, [r3, #0]
 8018eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018eae:	429a      	cmp	r2, r3
 8018eb0:	d3b8      	bcc.n	8018e24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8018eb2:	2301      	movs	r3, #1
 8018eb4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018eb6:	e7b5      	b.n	8018e24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018eb8:	4b1b      	ldr	r3, [pc, #108]	; (8018f28 <xTaskIncrementTick+0x178>)
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ebe:	4919      	ldr	r1, [pc, #100]	; (8018f24 <xTaskIncrementTick+0x174>)
 8018ec0:	4613      	mov	r3, r2
 8018ec2:	009b      	lsls	r3, r3, #2
 8018ec4:	4413      	add	r3, r2
 8018ec6:	009b      	lsls	r3, r3, #2
 8018ec8:	440b      	add	r3, r1
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	2b01      	cmp	r3, #1
 8018ece:	d901      	bls.n	8018ed4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8018ed0:	2301      	movs	r3, #1
 8018ed2:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8018ed4:	4b15      	ldr	r3, [pc, #84]	; (8018f2c <xTaskIncrementTick+0x17c>)
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d101      	bne.n	8018ee0 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8018edc:	f7e9 faee 	bl	80024bc <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018ee0:	4b13      	ldr	r3, [pc, #76]	; (8018f30 <xTaskIncrementTick+0x180>)
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	2b00      	cmp	r3, #0
 8018ee6:	d009      	beq.n	8018efc <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8018ee8:	2301      	movs	r3, #1
 8018eea:	617b      	str	r3, [r7, #20]
 8018eec:	e006      	b.n	8018efc <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018eee:	4b0f      	ldr	r3, [pc, #60]	; (8018f2c <xTaskIncrementTick+0x17c>)
 8018ef0:	681b      	ldr	r3, [r3, #0]
 8018ef2:	3301      	adds	r3, #1
 8018ef4:	4a0d      	ldr	r2, [pc, #52]	; (8018f2c <xTaskIncrementTick+0x17c>)
 8018ef6:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8018ef8:	f7e9 fae0 	bl	80024bc <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8018efc:	697b      	ldr	r3, [r7, #20]
}
 8018efe:	4618      	mov	r0, r3
 8018f00:	3718      	adds	r7, #24
 8018f02:	46bd      	mov	sp, r7
 8018f04:	bd80      	pop	{r7, pc}
 8018f06:	bf00      	nop
 8018f08:	24002c14 	.word	0x24002c14
 8018f0c:	24002bf0 	.word	0x24002bf0
 8018f10:	24002ba4 	.word	0x24002ba4
 8018f14:	24002ba8 	.word	0x24002ba8
 8018f18:	24002c04 	.word	0x24002c04
 8018f1c:	24002c0c 	.word	0x24002c0c
 8018f20:	24002bf4 	.word	0x24002bf4
 8018f24:	2400271c 	.word	0x2400271c
 8018f28:	24002718 	.word	0x24002718
 8018f2c:	24002bfc 	.word	0x24002bfc
 8018f30:	24002c00 	.word	0x24002c00

08018f34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018f34:	b580      	push	{r7, lr}
 8018f36:	b084      	sub	sp, #16
 8018f38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018f3a:	4b2f      	ldr	r3, [pc, #188]	; (8018ff8 <vTaskSwitchContext+0xc4>)
 8018f3c:	681b      	ldr	r3, [r3, #0]
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d003      	beq.n	8018f4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018f42:	4b2e      	ldr	r3, [pc, #184]	; (8018ffc <vTaskSwitchContext+0xc8>)
 8018f44:	2201      	movs	r2, #1
 8018f46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018f48:	e052      	b.n	8018ff0 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 8018f4a:	4b2c      	ldr	r3, [pc, #176]	; (8018ffc <vTaskSwitchContext+0xc8>)
 8018f4c:	2200      	movs	r2, #0
 8018f4e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8018f50:	4b2b      	ldr	r3, [pc, #172]	; (8019000 <vTaskSwitchContext+0xcc>)
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	681a      	ldr	r2, [r3, #0]
 8018f56:	4b2a      	ldr	r3, [pc, #168]	; (8019000 <vTaskSwitchContext+0xcc>)
 8018f58:	681b      	ldr	r3, [r3, #0]
 8018f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f5c:	429a      	cmp	r2, r3
 8018f5e:	d808      	bhi.n	8018f72 <vTaskSwitchContext+0x3e>
 8018f60:	4b27      	ldr	r3, [pc, #156]	; (8019000 <vTaskSwitchContext+0xcc>)
 8018f62:	681a      	ldr	r2, [r3, #0]
 8018f64:	4b26      	ldr	r3, [pc, #152]	; (8019000 <vTaskSwitchContext+0xcc>)
 8018f66:	681b      	ldr	r3, [r3, #0]
 8018f68:	3334      	adds	r3, #52	; 0x34
 8018f6a:	4619      	mov	r1, r3
 8018f6c:	4610      	mov	r0, r2
 8018f6e:	f7e9 fab3 	bl	80024d8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018f72:	4b24      	ldr	r3, [pc, #144]	; (8019004 <vTaskSwitchContext+0xd0>)
 8018f74:	681b      	ldr	r3, [r3, #0]
 8018f76:	60fb      	str	r3, [r7, #12]
 8018f78:	e010      	b.n	8018f9c <vTaskSwitchContext+0x68>
 8018f7a:	68fb      	ldr	r3, [r7, #12]
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d10a      	bne.n	8018f96 <vTaskSwitchContext+0x62>
	__asm volatile
 8018f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f84:	f383 8811 	msr	BASEPRI, r3
 8018f88:	f3bf 8f6f 	isb	sy
 8018f8c:	f3bf 8f4f 	dsb	sy
 8018f90:	607b      	str	r3, [r7, #4]
}
 8018f92:	bf00      	nop
 8018f94:	e7fe      	b.n	8018f94 <vTaskSwitchContext+0x60>
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	3b01      	subs	r3, #1
 8018f9a:	60fb      	str	r3, [r7, #12]
 8018f9c:	491a      	ldr	r1, [pc, #104]	; (8019008 <vTaskSwitchContext+0xd4>)
 8018f9e:	68fa      	ldr	r2, [r7, #12]
 8018fa0:	4613      	mov	r3, r2
 8018fa2:	009b      	lsls	r3, r3, #2
 8018fa4:	4413      	add	r3, r2
 8018fa6:	009b      	lsls	r3, r3, #2
 8018fa8:	440b      	add	r3, r1
 8018faa:	681b      	ldr	r3, [r3, #0]
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	d0e4      	beq.n	8018f7a <vTaskSwitchContext+0x46>
 8018fb0:	68fa      	ldr	r2, [r7, #12]
 8018fb2:	4613      	mov	r3, r2
 8018fb4:	009b      	lsls	r3, r3, #2
 8018fb6:	4413      	add	r3, r2
 8018fb8:	009b      	lsls	r3, r3, #2
 8018fba:	4a13      	ldr	r2, [pc, #76]	; (8019008 <vTaskSwitchContext+0xd4>)
 8018fbc:	4413      	add	r3, r2
 8018fbe:	60bb      	str	r3, [r7, #8]
 8018fc0:	68bb      	ldr	r3, [r7, #8]
 8018fc2:	685b      	ldr	r3, [r3, #4]
 8018fc4:	685a      	ldr	r2, [r3, #4]
 8018fc6:	68bb      	ldr	r3, [r7, #8]
 8018fc8:	605a      	str	r2, [r3, #4]
 8018fca:	68bb      	ldr	r3, [r7, #8]
 8018fcc:	685a      	ldr	r2, [r3, #4]
 8018fce:	68bb      	ldr	r3, [r7, #8]
 8018fd0:	3308      	adds	r3, #8
 8018fd2:	429a      	cmp	r2, r3
 8018fd4:	d104      	bne.n	8018fe0 <vTaskSwitchContext+0xac>
 8018fd6:	68bb      	ldr	r3, [r7, #8]
 8018fd8:	685b      	ldr	r3, [r3, #4]
 8018fda:	685a      	ldr	r2, [r3, #4]
 8018fdc:	68bb      	ldr	r3, [r7, #8]
 8018fde:	605a      	str	r2, [r3, #4]
 8018fe0:	68bb      	ldr	r3, [r7, #8]
 8018fe2:	685b      	ldr	r3, [r3, #4]
 8018fe4:	68db      	ldr	r3, [r3, #12]
 8018fe6:	4a06      	ldr	r2, [pc, #24]	; (8019000 <vTaskSwitchContext+0xcc>)
 8018fe8:	6013      	str	r3, [r2, #0]
 8018fea:	4a06      	ldr	r2, [pc, #24]	; (8019004 <vTaskSwitchContext+0xd0>)
 8018fec:	68fb      	ldr	r3, [r7, #12]
 8018fee:	6013      	str	r3, [r2, #0]
}
 8018ff0:	bf00      	nop
 8018ff2:	3710      	adds	r7, #16
 8018ff4:	46bd      	mov	sp, r7
 8018ff6:	bd80      	pop	{r7, pc}
 8018ff8:	24002c14 	.word	0x24002c14
 8018ffc:	24002c00 	.word	0x24002c00
 8019000:	24002718 	.word	0x24002718
 8019004:	24002bf4 	.word	0x24002bf4
 8019008:	2400271c 	.word	0x2400271c

0801900c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801900c:	b580      	push	{r7, lr}
 801900e:	b084      	sub	sp, #16
 8019010:	af00      	add	r7, sp, #0
 8019012:	6078      	str	r0, [r7, #4]
 8019014:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	2b00      	cmp	r3, #0
 801901a:	d10a      	bne.n	8019032 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801901c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019020:	f383 8811 	msr	BASEPRI, r3
 8019024:	f3bf 8f6f 	isb	sy
 8019028:	f3bf 8f4f 	dsb	sy
 801902c:	60fb      	str	r3, [r7, #12]
}
 801902e:	bf00      	nop
 8019030:	e7fe      	b.n	8019030 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019032:	4b07      	ldr	r3, [pc, #28]	; (8019050 <vTaskPlaceOnEventList+0x44>)
 8019034:	681b      	ldr	r3, [r3, #0]
 8019036:	3318      	adds	r3, #24
 8019038:	4619      	mov	r1, r3
 801903a:	6878      	ldr	r0, [r7, #4]
 801903c:	f7fe fd6b 	bl	8017b16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8019040:	2101      	movs	r1, #1
 8019042:	6838      	ldr	r0, [r7, #0]
 8019044:	f000 fb32 	bl	80196ac <prvAddCurrentTaskToDelayedList>
}
 8019048:	bf00      	nop
 801904a:	3710      	adds	r7, #16
 801904c:	46bd      	mov	sp, r7
 801904e:	bd80      	pop	{r7, pc}
 8019050:	24002718 	.word	0x24002718

08019054 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8019054:	b580      	push	{r7, lr}
 8019056:	b086      	sub	sp, #24
 8019058:	af00      	add	r7, sp, #0
 801905a:	60f8      	str	r0, [r7, #12]
 801905c:	60b9      	str	r1, [r7, #8]
 801905e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8019060:	68fb      	ldr	r3, [r7, #12]
 8019062:	2b00      	cmp	r3, #0
 8019064:	d10a      	bne.n	801907c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8019066:	f04f 0350 	mov.w	r3, #80	; 0x50
 801906a:	f383 8811 	msr	BASEPRI, r3
 801906e:	f3bf 8f6f 	isb	sy
 8019072:	f3bf 8f4f 	dsb	sy
 8019076:	617b      	str	r3, [r7, #20]
}
 8019078:	bf00      	nop
 801907a:	e7fe      	b.n	801907a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801907c:	4b11      	ldr	r3, [pc, #68]	; (80190c4 <vTaskPlaceOnUnorderedEventList+0x70>)
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	2b00      	cmp	r3, #0
 8019082:	d10a      	bne.n	801909a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8019084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019088:	f383 8811 	msr	BASEPRI, r3
 801908c:	f3bf 8f6f 	isb	sy
 8019090:	f3bf 8f4f 	dsb	sy
 8019094:	613b      	str	r3, [r7, #16]
}
 8019096:	bf00      	nop
 8019098:	e7fe      	b.n	8019098 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801909a:	4b0b      	ldr	r3, [pc, #44]	; (80190c8 <vTaskPlaceOnUnorderedEventList+0x74>)
 801909c:	681b      	ldr	r3, [r3, #0]
 801909e:	68ba      	ldr	r2, [r7, #8]
 80190a0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80190a4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80190a6:	4b08      	ldr	r3, [pc, #32]	; (80190c8 <vTaskPlaceOnUnorderedEventList+0x74>)
 80190a8:	681b      	ldr	r3, [r3, #0]
 80190aa:	3318      	adds	r3, #24
 80190ac:	4619      	mov	r1, r3
 80190ae:	68f8      	ldr	r0, [r7, #12]
 80190b0:	f7fe fd0d 	bl	8017ace <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80190b4:	2101      	movs	r1, #1
 80190b6:	6878      	ldr	r0, [r7, #4]
 80190b8:	f000 faf8 	bl	80196ac <prvAddCurrentTaskToDelayedList>
}
 80190bc:	bf00      	nop
 80190be:	3718      	adds	r7, #24
 80190c0:	46bd      	mov	sp, r7
 80190c2:	bd80      	pop	{r7, pc}
 80190c4:	24002c14 	.word	0x24002c14
 80190c8:	24002718 	.word	0x24002718

080190cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80190cc:	b580      	push	{r7, lr}
 80190ce:	b086      	sub	sp, #24
 80190d0:	af00      	add	r7, sp, #0
 80190d2:	60f8      	str	r0, [r7, #12]
 80190d4:	60b9      	str	r1, [r7, #8]
 80190d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80190d8:	68fb      	ldr	r3, [r7, #12]
 80190da:	2b00      	cmp	r3, #0
 80190dc:	d10a      	bne.n	80190f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80190de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190e2:	f383 8811 	msr	BASEPRI, r3
 80190e6:	f3bf 8f6f 	isb	sy
 80190ea:	f3bf 8f4f 	dsb	sy
 80190ee:	617b      	str	r3, [r7, #20]
}
 80190f0:	bf00      	nop
 80190f2:	e7fe      	b.n	80190f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80190f4:	4b0a      	ldr	r3, [pc, #40]	; (8019120 <vTaskPlaceOnEventListRestricted+0x54>)
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	3318      	adds	r3, #24
 80190fa:	4619      	mov	r1, r3
 80190fc:	68f8      	ldr	r0, [r7, #12]
 80190fe:	f7fe fce6 	bl	8017ace <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	2b00      	cmp	r3, #0
 8019106:	d002      	beq.n	801910e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8019108:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801910c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801910e:	6879      	ldr	r1, [r7, #4]
 8019110:	68b8      	ldr	r0, [r7, #8]
 8019112:	f000 facb 	bl	80196ac <prvAddCurrentTaskToDelayedList>
	}
 8019116:	bf00      	nop
 8019118:	3718      	adds	r7, #24
 801911a:	46bd      	mov	sp, r7
 801911c:	bd80      	pop	{r7, pc}
 801911e:	bf00      	nop
 8019120:	24002718 	.word	0x24002718

08019124 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8019124:	b580      	push	{r7, lr}
 8019126:	b086      	sub	sp, #24
 8019128:	af00      	add	r7, sp, #0
 801912a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	68db      	ldr	r3, [r3, #12]
 8019130:	68db      	ldr	r3, [r3, #12]
 8019132:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8019134:	693b      	ldr	r3, [r7, #16]
 8019136:	2b00      	cmp	r3, #0
 8019138:	d10a      	bne.n	8019150 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801913a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801913e:	f383 8811 	msr	BASEPRI, r3
 8019142:	f3bf 8f6f 	isb	sy
 8019146:	f3bf 8f4f 	dsb	sy
 801914a:	60fb      	str	r3, [r7, #12]
}
 801914c:	bf00      	nop
 801914e:	e7fe      	b.n	801914e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8019150:	693b      	ldr	r3, [r7, #16]
 8019152:	3318      	adds	r3, #24
 8019154:	4618      	mov	r0, r3
 8019156:	f7fe fd17 	bl	8017b88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801915a:	4b1e      	ldr	r3, [pc, #120]	; (80191d4 <xTaskRemoveFromEventList+0xb0>)
 801915c:	681b      	ldr	r3, [r3, #0]
 801915e:	2b00      	cmp	r3, #0
 8019160:	d11d      	bne.n	801919e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8019162:	693b      	ldr	r3, [r7, #16]
 8019164:	3304      	adds	r3, #4
 8019166:	4618      	mov	r0, r3
 8019168:	f7fe fd0e 	bl	8017b88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801916c:	693b      	ldr	r3, [r7, #16]
 801916e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019170:	4b19      	ldr	r3, [pc, #100]	; (80191d8 <xTaskRemoveFromEventList+0xb4>)
 8019172:	681b      	ldr	r3, [r3, #0]
 8019174:	429a      	cmp	r2, r3
 8019176:	d903      	bls.n	8019180 <xTaskRemoveFromEventList+0x5c>
 8019178:	693b      	ldr	r3, [r7, #16]
 801917a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801917c:	4a16      	ldr	r2, [pc, #88]	; (80191d8 <xTaskRemoveFromEventList+0xb4>)
 801917e:	6013      	str	r3, [r2, #0]
 8019180:	693b      	ldr	r3, [r7, #16]
 8019182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019184:	4613      	mov	r3, r2
 8019186:	009b      	lsls	r3, r3, #2
 8019188:	4413      	add	r3, r2
 801918a:	009b      	lsls	r3, r3, #2
 801918c:	4a13      	ldr	r2, [pc, #76]	; (80191dc <xTaskRemoveFromEventList+0xb8>)
 801918e:	441a      	add	r2, r3
 8019190:	693b      	ldr	r3, [r7, #16]
 8019192:	3304      	adds	r3, #4
 8019194:	4619      	mov	r1, r3
 8019196:	4610      	mov	r0, r2
 8019198:	f7fe fc99 	bl	8017ace <vListInsertEnd>
 801919c:	e005      	b.n	80191aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801919e:	693b      	ldr	r3, [r7, #16]
 80191a0:	3318      	adds	r3, #24
 80191a2:	4619      	mov	r1, r3
 80191a4:	480e      	ldr	r0, [pc, #56]	; (80191e0 <xTaskRemoveFromEventList+0xbc>)
 80191a6:	f7fe fc92 	bl	8017ace <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80191aa:	693b      	ldr	r3, [r7, #16]
 80191ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80191ae:	4b0d      	ldr	r3, [pc, #52]	; (80191e4 <xTaskRemoveFromEventList+0xc0>)
 80191b0:	681b      	ldr	r3, [r3, #0]
 80191b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191b4:	429a      	cmp	r2, r3
 80191b6:	d905      	bls.n	80191c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80191b8:	2301      	movs	r3, #1
 80191ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80191bc:	4b0a      	ldr	r3, [pc, #40]	; (80191e8 <xTaskRemoveFromEventList+0xc4>)
 80191be:	2201      	movs	r2, #1
 80191c0:	601a      	str	r2, [r3, #0]
 80191c2:	e001      	b.n	80191c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80191c4:	2300      	movs	r3, #0
 80191c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80191c8:	697b      	ldr	r3, [r7, #20]
}
 80191ca:	4618      	mov	r0, r3
 80191cc:	3718      	adds	r7, #24
 80191ce:	46bd      	mov	sp, r7
 80191d0:	bd80      	pop	{r7, pc}
 80191d2:	bf00      	nop
 80191d4:	24002c14 	.word	0x24002c14
 80191d8:	24002bf4 	.word	0x24002bf4
 80191dc:	2400271c 	.word	0x2400271c
 80191e0:	24002bac 	.word	0x24002bac
 80191e4:	24002718 	.word	0x24002718
 80191e8:	24002c00 	.word	0x24002c00

080191ec <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80191ec:	b580      	push	{r7, lr}
 80191ee:	b086      	sub	sp, #24
 80191f0:	af00      	add	r7, sp, #0
 80191f2:	6078      	str	r0, [r7, #4]
 80191f4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80191f6:	4b29      	ldr	r3, [pc, #164]	; (801929c <vTaskRemoveFromUnorderedEventList+0xb0>)
 80191f8:	681b      	ldr	r3, [r3, #0]
 80191fa:	2b00      	cmp	r3, #0
 80191fc:	d10a      	bne.n	8019214 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80191fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019202:	f383 8811 	msr	BASEPRI, r3
 8019206:	f3bf 8f6f 	isb	sy
 801920a:	f3bf 8f4f 	dsb	sy
 801920e:	613b      	str	r3, [r7, #16]
}
 8019210:	bf00      	nop
 8019212:	e7fe      	b.n	8019212 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8019214:	683b      	ldr	r3, [r7, #0]
 8019216:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	68db      	ldr	r3, [r3, #12]
 8019222:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8019224:	697b      	ldr	r3, [r7, #20]
 8019226:	2b00      	cmp	r3, #0
 8019228:	d10a      	bne.n	8019240 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801922a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801922e:	f383 8811 	msr	BASEPRI, r3
 8019232:	f3bf 8f6f 	isb	sy
 8019236:	f3bf 8f4f 	dsb	sy
 801923a:	60fb      	str	r3, [r7, #12]
}
 801923c:	bf00      	nop
 801923e:	e7fe      	b.n	801923e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8019240:	6878      	ldr	r0, [r7, #4]
 8019242:	f7fe fca1 	bl	8017b88 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8019246:	697b      	ldr	r3, [r7, #20]
 8019248:	3304      	adds	r3, #4
 801924a:	4618      	mov	r0, r3
 801924c:	f7fe fc9c 	bl	8017b88 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8019250:	697b      	ldr	r3, [r7, #20]
 8019252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019254:	4b12      	ldr	r3, [pc, #72]	; (80192a0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	429a      	cmp	r2, r3
 801925a:	d903      	bls.n	8019264 <vTaskRemoveFromUnorderedEventList+0x78>
 801925c:	697b      	ldr	r3, [r7, #20]
 801925e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019260:	4a0f      	ldr	r2, [pc, #60]	; (80192a0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8019262:	6013      	str	r3, [r2, #0]
 8019264:	697b      	ldr	r3, [r7, #20]
 8019266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019268:	4613      	mov	r3, r2
 801926a:	009b      	lsls	r3, r3, #2
 801926c:	4413      	add	r3, r2
 801926e:	009b      	lsls	r3, r3, #2
 8019270:	4a0c      	ldr	r2, [pc, #48]	; (80192a4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8019272:	441a      	add	r2, r3
 8019274:	697b      	ldr	r3, [r7, #20]
 8019276:	3304      	adds	r3, #4
 8019278:	4619      	mov	r1, r3
 801927a:	4610      	mov	r0, r2
 801927c:	f7fe fc27 	bl	8017ace <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8019280:	697b      	ldr	r3, [r7, #20]
 8019282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019284:	4b08      	ldr	r3, [pc, #32]	; (80192a8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8019286:	681b      	ldr	r3, [r3, #0]
 8019288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801928a:	429a      	cmp	r2, r3
 801928c:	d902      	bls.n	8019294 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801928e:	4b07      	ldr	r3, [pc, #28]	; (80192ac <vTaskRemoveFromUnorderedEventList+0xc0>)
 8019290:	2201      	movs	r2, #1
 8019292:	601a      	str	r2, [r3, #0]
	}
}
 8019294:	bf00      	nop
 8019296:	3718      	adds	r7, #24
 8019298:	46bd      	mov	sp, r7
 801929a:	bd80      	pop	{r7, pc}
 801929c:	24002c14 	.word	0x24002c14
 80192a0:	24002bf4 	.word	0x24002bf4
 80192a4:	2400271c 	.word	0x2400271c
 80192a8:	24002718 	.word	0x24002718
 80192ac:	24002c00 	.word	0x24002c00

080192b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80192b0:	b480      	push	{r7}
 80192b2:	b083      	sub	sp, #12
 80192b4:	af00      	add	r7, sp, #0
 80192b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80192b8:	4b06      	ldr	r3, [pc, #24]	; (80192d4 <vTaskInternalSetTimeOutState+0x24>)
 80192ba:	681a      	ldr	r2, [r3, #0]
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80192c0:	4b05      	ldr	r3, [pc, #20]	; (80192d8 <vTaskInternalSetTimeOutState+0x28>)
 80192c2:	681a      	ldr	r2, [r3, #0]
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	605a      	str	r2, [r3, #4]
}
 80192c8:	bf00      	nop
 80192ca:	370c      	adds	r7, #12
 80192cc:	46bd      	mov	sp, r7
 80192ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192d2:	4770      	bx	lr
 80192d4:	24002c04 	.word	0x24002c04
 80192d8:	24002bf0 	.word	0x24002bf0

080192dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80192dc:	b580      	push	{r7, lr}
 80192de:	b088      	sub	sp, #32
 80192e0:	af00      	add	r7, sp, #0
 80192e2:	6078      	str	r0, [r7, #4]
 80192e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	d10a      	bne.n	8019302 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80192ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192f0:	f383 8811 	msr	BASEPRI, r3
 80192f4:	f3bf 8f6f 	isb	sy
 80192f8:	f3bf 8f4f 	dsb	sy
 80192fc:	613b      	str	r3, [r7, #16]
}
 80192fe:	bf00      	nop
 8019300:	e7fe      	b.n	8019300 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8019302:	683b      	ldr	r3, [r7, #0]
 8019304:	2b00      	cmp	r3, #0
 8019306:	d10a      	bne.n	801931e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8019308:	f04f 0350 	mov.w	r3, #80	; 0x50
 801930c:	f383 8811 	msr	BASEPRI, r3
 8019310:	f3bf 8f6f 	isb	sy
 8019314:	f3bf 8f4f 	dsb	sy
 8019318:	60fb      	str	r3, [r7, #12]
}
 801931a:	bf00      	nop
 801931c:	e7fe      	b.n	801931c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801931e:	f000 feb1 	bl	801a084 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8019322:	4b1d      	ldr	r3, [pc, #116]	; (8019398 <xTaskCheckForTimeOut+0xbc>)
 8019324:	681b      	ldr	r3, [r3, #0]
 8019326:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	685b      	ldr	r3, [r3, #4]
 801932c:	69ba      	ldr	r2, [r7, #24]
 801932e:	1ad3      	subs	r3, r2, r3
 8019330:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8019332:	683b      	ldr	r3, [r7, #0]
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801933a:	d102      	bne.n	8019342 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801933c:	2300      	movs	r3, #0
 801933e:	61fb      	str	r3, [r7, #28]
 8019340:	e023      	b.n	801938a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	681a      	ldr	r2, [r3, #0]
 8019346:	4b15      	ldr	r3, [pc, #84]	; (801939c <xTaskCheckForTimeOut+0xc0>)
 8019348:	681b      	ldr	r3, [r3, #0]
 801934a:	429a      	cmp	r2, r3
 801934c:	d007      	beq.n	801935e <xTaskCheckForTimeOut+0x82>
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	685b      	ldr	r3, [r3, #4]
 8019352:	69ba      	ldr	r2, [r7, #24]
 8019354:	429a      	cmp	r2, r3
 8019356:	d302      	bcc.n	801935e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8019358:	2301      	movs	r3, #1
 801935a:	61fb      	str	r3, [r7, #28]
 801935c:	e015      	b.n	801938a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801935e:	683b      	ldr	r3, [r7, #0]
 8019360:	681b      	ldr	r3, [r3, #0]
 8019362:	697a      	ldr	r2, [r7, #20]
 8019364:	429a      	cmp	r2, r3
 8019366:	d20b      	bcs.n	8019380 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8019368:	683b      	ldr	r3, [r7, #0]
 801936a:	681a      	ldr	r2, [r3, #0]
 801936c:	697b      	ldr	r3, [r7, #20]
 801936e:	1ad2      	subs	r2, r2, r3
 8019370:	683b      	ldr	r3, [r7, #0]
 8019372:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8019374:	6878      	ldr	r0, [r7, #4]
 8019376:	f7ff ff9b 	bl	80192b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801937a:	2300      	movs	r3, #0
 801937c:	61fb      	str	r3, [r7, #28]
 801937e:	e004      	b.n	801938a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8019380:	683b      	ldr	r3, [r7, #0]
 8019382:	2200      	movs	r2, #0
 8019384:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8019386:	2301      	movs	r3, #1
 8019388:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801938a:	f000 feab 	bl	801a0e4 <vPortExitCritical>

	return xReturn;
 801938e:	69fb      	ldr	r3, [r7, #28]
}
 8019390:	4618      	mov	r0, r3
 8019392:	3720      	adds	r7, #32
 8019394:	46bd      	mov	sp, r7
 8019396:	bd80      	pop	{r7, pc}
 8019398:	24002bf0 	.word	0x24002bf0
 801939c:	24002c04 	.word	0x24002c04

080193a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80193a0:	b480      	push	{r7}
 80193a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80193a4:	4b03      	ldr	r3, [pc, #12]	; (80193b4 <vTaskMissedYield+0x14>)
 80193a6:	2201      	movs	r2, #1
 80193a8:	601a      	str	r2, [r3, #0]
}
 80193aa:	bf00      	nop
 80193ac:	46bd      	mov	sp, r7
 80193ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193b2:	4770      	bx	lr
 80193b4:	24002c00 	.word	0x24002c00

080193b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80193b8:	b580      	push	{r7, lr}
 80193ba:	b082      	sub	sp, #8
 80193bc:	af00      	add	r7, sp, #0
 80193be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80193c0:	f000 f852 	bl	8019468 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80193c4:	4b06      	ldr	r3, [pc, #24]	; (80193e0 <prvIdleTask+0x28>)
 80193c6:	681b      	ldr	r3, [r3, #0]
 80193c8:	2b01      	cmp	r3, #1
 80193ca:	d9f9      	bls.n	80193c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80193cc:	4b05      	ldr	r3, [pc, #20]	; (80193e4 <prvIdleTask+0x2c>)
 80193ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80193d2:	601a      	str	r2, [r3, #0]
 80193d4:	f3bf 8f4f 	dsb	sy
 80193d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80193dc:	e7f0      	b.n	80193c0 <prvIdleTask+0x8>
 80193de:	bf00      	nop
 80193e0:	2400271c 	.word	0x2400271c
 80193e4:	e000ed04 	.word	0xe000ed04

080193e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80193e8:	b580      	push	{r7, lr}
 80193ea:	b082      	sub	sp, #8
 80193ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80193ee:	2300      	movs	r3, #0
 80193f0:	607b      	str	r3, [r7, #4]
 80193f2:	e00c      	b.n	801940e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80193f4:	687a      	ldr	r2, [r7, #4]
 80193f6:	4613      	mov	r3, r2
 80193f8:	009b      	lsls	r3, r3, #2
 80193fa:	4413      	add	r3, r2
 80193fc:	009b      	lsls	r3, r3, #2
 80193fe:	4a12      	ldr	r2, [pc, #72]	; (8019448 <prvInitialiseTaskLists+0x60>)
 8019400:	4413      	add	r3, r2
 8019402:	4618      	mov	r0, r3
 8019404:	f7fe fb36 	bl	8017a74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	3301      	adds	r3, #1
 801940c:	607b      	str	r3, [r7, #4]
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	2b37      	cmp	r3, #55	; 0x37
 8019412:	d9ef      	bls.n	80193f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8019414:	480d      	ldr	r0, [pc, #52]	; (801944c <prvInitialiseTaskLists+0x64>)
 8019416:	f7fe fb2d 	bl	8017a74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801941a:	480d      	ldr	r0, [pc, #52]	; (8019450 <prvInitialiseTaskLists+0x68>)
 801941c:	f7fe fb2a 	bl	8017a74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8019420:	480c      	ldr	r0, [pc, #48]	; (8019454 <prvInitialiseTaskLists+0x6c>)
 8019422:	f7fe fb27 	bl	8017a74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8019426:	480c      	ldr	r0, [pc, #48]	; (8019458 <prvInitialiseTaskLists+0x70>)
 8019428:	f7fe fb24 	bl	8017a74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801942c:	480b      	ldr	r0, [pc, #44]	; (801945c <prvInitialiseTaskLists+0x74>)
 801942e:	f7fe fb21 	bl	8017a74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8019432:	4b0b      	ldr	r3, [pc, #44]	; (8019460 <prvInitialiseTaskLists+0x78>)
 8019434:	4a05      	ldr	r2, [pc, #20]	; (801944c <prvInitialiseTaskLists+0x64>)
 8019436:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8019438:	4b0a      	ldr	r3, [pc, #40]	; (8019464 <prvInitialiseTaskLists+0x7c>)
 801943a:	4a05      	ldr	r2, [pc, #20]	; (8019450 <prvInitialiseTaskLists+0x68>)
 801943c:	601a      	str	r2, [r3, #0]
}
 801943e:	bf00      	nop
 8019440:	3708      	adds	r7, #8
 8019442:	46bd      	mov	sp, r7
 8019444:	bd80      	pop	{r7, pc}
 8019446:	bf00      	nop
 8019448:	2400271c 	.word	0x2400271c
 801944c:	24002b7c 	.word	0x24002b7c
 8019450:	24002b90 	.word	0x24002b90
 8019454:	24002bac 	.word	0x24002bac
 8019458:	24002bc0 	.word	0x24002bc0
 801945c:	24002bd8 	.word	0x24002bd8
 8019460:	24002ba4 	.word	0x24002ba4
 8019464:	24002ba8 	.word	0x24002ba8

08019468 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8019468:	b580      	push	{r7, lr}
 801946a:	b082      	sub	sp, #8
 801946c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801946e:	e019      	b.n	80194a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8019470:	f000 fe08 	bl	801a084 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019474:	4b10      	ldr	r3, [pc, #64]	; (80194b8 <prvCheckTasksWaitingTermination+0x50>)
 8019476:	68db      	ldr	r3, [r3, #12]
 8019478:	68db      	ldr	r3, [r3, #12]
 801947a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	3304      	adds	r3, #4
 8019480:	4618      	mov	r0, r3
 8019482:	f7fe fb81 	bl	8017b88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8019486:	4b0d      	ldr	r3, [pc, #52]	; (80194bc <prvCheckTasksWaitingTermination+0x54>)
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	3b01      	subs	r3, #1
 801948c:	4a0b      	ldr	r2, [pc, #44]	; (80194bc <prvCheckTasksWaitingTermination+0x54>)
 801948e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8019490:	4b0b      	ldr	r3, [pc, #44]	; (80194c0 <prvCheckTasksWaitingTermination+0x58>)
 8019492:	681b      	ldr	r3, [r3, #0]
 8019494:	3b01      	subs	r3, #1
 8019496:	4a0a      	ldr	r2, [pc, #40]	; (80194c0 <prvCheckTasksWaitingTermination+0x58>)
 8019498:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801949a:	f000 fe23 	bl	801a0e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801949e:	6878      	ldr	r0, [r7, #4]
 80194a0:	f000 f810 	bl	80194c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80194a4:	4b06      	ldr	r3, [pc, #24]	; (80194c0 <prvCheckTasksWaitingTermination+0x58>)
 80194a6:	681b      	ldr	r3, [r3, #0]
 80194a8:	2b00      	cmp	r3, #0
 80194aa:	d1e1      	bne.n	8019470 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80194ac:	bf00      	nop
 80194ae:	bf00      	nop
 80194b0:	3708      	adds	r7, #8
 80194b2:	46bd      	mov	sp, r7
 80194b4:	bd80      	pop	{r7, pc}
 80194b6:	bf00      	nop
 80194b8:	24002bc0 	.word	0x24002bc0
 80194bc:	24002bec 	.word	0x24002bec
 80194c0:	24002bd4 	.word	0x24002bd4

080194c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80194c4:	b580      	push	{r7, lr}
 80194c6:	b084      	sub	sp, #16
 80194c8:	af00      	add	r7, sp, #0
 80194ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d108      	bne.n	80194e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80194da:	4618      	mov	r0, r3
 80194dc:	f000 ffc0 	bl	801a460 <vPortFree>
				vPortFree( pxTCB );
 80194e0:	6878      	ldr	r0, [r7, #4]
 80194e2:	f000 ffbd 	bl	801a460 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80194e6:	e018      	b.n	801951a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80194ee:	2b01      	cmp	r3, #1
 80194f0:	d103      	bne.n	80194fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80194f2:	6878      	ldr	r0, [r7, #4]
 80194f4:	f000 ffb4 	bl	801a460 <vPortFree>
	}
 80194f8:	e00f      	b.n	801951a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8019500:	2b02      	cmp	r3, #2
 8019502:	d00a      	beq.n	801951a <prvDeleteTCB+0x56>
	__asm volatile
 8019504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019508:	f383 8811 	msr	BASEPRI, r3
 801950c:	f3bf 8f6f 	isb	sy
 8019510:	f3bf 8f4f 	dsb	sy
 8019514:	60fb      	str	r3, [r7, #12]
}
 8019516:	bf00      	nop
 8019518:	e7fe      	b.n	8019518 <prvDeleteTCB+0x54>
	}
 801951a:	bf00      	nop
 801951c:	3710      	adds	r7, #16
 801951e:	46bd      	mov	sp, r7
 8019520:	bd80      	pop	{r7, pc}
	...

08019524 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8019524:	b480      	push	{r7}
 8019526:	b083      	sub	sp, #12
 8019528:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801952a:	4b0c      	ldr	r3, [pc, #48]	; (801955c <prvResetNextTaskUnblockTime+0x38>)
 801952c:	681b      	ldr	r3, [r3, #0]
 801952e:	681b      	ldr	r3, [r3, #0]
 8019530:	2b00      	cmp	r3, #0
 8019532:	d104      	bne.n	801953e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8019534:	4b0a      	ldr	r3, [pc, #40]	; (8019560 <prvResetNextTaskUnblockTime+0x3c>)
 8019536:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801953a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801953c:	e008      	b.n	8019550 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801953e:	4b07      	ldr	r3, [pc, #28]	; (801955c <prvResetNextTaskUnblockTime+0x38>)
 8019540:	681b      	ldr	r3, [r3, #0]
 8019542:	68db      	ldr	r3, [r3, #12]
 8019544:	68db      	ldr	r3, [r3, #12]
 8019546:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	685b      	ldr	r3, [r3, #4]
 801954c:	4a04      	ldr	r2, [pc, #16]	; (8019560 <prvResetNextTaskUnblockTime+0x3c>)
 801954e:	6013      	str	r3, [r2, #0]
}
 8019550:	bf00      	nop
 8019552:	370c      	adds	r7, #12
 8019554:	46bd      	mov	sp, r7
 8019556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801955a:	4770      	bx	lr
 801955c:	24002ba4 	.word	0x24002ba4
 8019560:	24002c0c 	.word	0x24002c0c

08019564 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8019564:	b480      	push	{r7}
 8019566:	b083      	sub	sp, #12
 8019568:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801956a:	4b0b      	ldr	r3, [pc, #44]	; (8019598 <xTaskGetSchedulerState+0x34>)
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	2b00      	cmp	r3, #0
 8019570:	d102      	bne.n	8019578 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8019572:	2301      	movs	r3, #1
 8019574:	607b      	str	r3, [r7, #4]
 8019576:	e008      	b.n	801958a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019578:	4b08      	ldr	r3, [pc, #32]	; (801959c <xTaskGetSchedulerState+0x38>)
 801957a:	681b      	ldr	r3, [r3, #0]
 801957c:	2b00      	cmp	r3, #0
 801957e:	d102      	bne.n	8019586 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8019580:	2302      	movs	r3, #2
 8019582:	607b      	str	r3, [r7, #4]
 8019584:	e001      	b.n	801958a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8019586:	2300      	movs	r3, #0
 8019588:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801958a:	687b      	ldr	r3, [r7, #4]
	}
 801958c:	4618      	mov	r0, r3
 801958e:	370c      	adds	r7, #12
 8019590:	46bd      	mov	sp, r7
 8019592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019596:	4770      	bx	lr
 8019598:	24002bf8 	.word	0x24002bf8
 801959c:	24002c14 	.word	0x24002c14

080195a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80195a0:	b580      	push	{r7, lr}
 80195a2:	b086      	sub	sp, #24
 80195a4:	af00      	add	r7, sp, #0
 80195a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80195ac:	2300      	movs	r3, #0
 80195ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	d056      	beq.n	8019664 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80195b6:	4b2e      	ldr	r3, [pc, #184]	; (8019670 <xTaskPriorityDisinherit+0xd0>)
 80195b8:	681b      	ldr	r3, [r3, #0]
 80195ba:	693a      	ldr	r2, [r7, #16]
 80195bc:	429a      	cmp	r2, r3
 80195be:	d00a      	beq.n	80195d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80195c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195c4:	f383 8811 	msr	BASEPRI, r3
 80195c8:	f3bf 8f6f 	isb	sy
 80195cc:	f3bf 8f4f 	dsb	sy
 80195d0:	60fb      	str	r3, [r7, #12]
}
 80195d2:	bf00      	nop
 80195d4:	e7fe      	b.n	80195d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80195d6:	693b      	ldr	r3, [r7, #16]
 80195d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80195da:	2b00      	cmp	r3, #0
 80195dc:	d10a      	bne.n	80195f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80195de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195e2:	f383 8811 	msr	BASEPRI, r3
 80195e6:	f3bf 8f6f 	isb	sy
 80195ea:	f3bf 8f4f 	dsb	sy
 80195ee:	60bb      	str	r3, [r7, #8]
}
 80195f0:	bf00      	nop
 80195f2:	e7fe      	b.n	80195f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80195f4:	693b      	ldr	r3, [r7, #16]
 80195f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80195f8:	1e5a      	subs	r2, r3, #1
 80195fa:	693b      	ldr	r3, [r7, #16]
 80195fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80195fe:	693b      	ldr	r3, [r7, #16]
 8019600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019602:	693b      	ldr	r3, [r7, #16]
 8019604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019606:	429a      	cmp	r2, r3
 8019608:	d02c      	beq.n	8019664 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801960a:	693b      	ldr	r3, [r7, #16]
 801960c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801960e:	2b00      	cmp	r3, #0
 8019610:	d128      	bne.n	8019664 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019612:	693b      	ldr	r3, [r7, #16]
 8019614:	3304      	adds	r3, #4
 8019616:	4618      	mov	r0, r3
 8019618:	f7fe fab6 	bl	8017b88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801961c:	693b      	ldr	r3, [r7, #16]
 801961e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019620:	693b      	ldr	r3, [r7, #16]
 8019622:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019624:	693b      	ldr	r3, [r7, #16]
 8019626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019628:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801962c:	693b      	ldr	r3, [r7, #16]
 801962e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8019630:	693b      	ldr	r3, [r7, #16]
 8019632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019634:	4b0f      	ldr	r3, [pc, #60]	; (8019674 <xTaskPriorityDisinherit+0xd4>)
 8019636:	681b      	ldr	r3, [r3, #0]
 8019638:	429a      	cmp	r2, r3
 801963a:	d903      	bls.n	8019644 <xTaskPriorityDisinherit+0xa4>
 801963c:	693b      	ldr	r3, [r7, #16]
 801963e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019640:	4a0c      	ldr	r2, [pc, #48]	; (8019674 <xTaskPriorityDisinherit+0xd4>)
 8019642:	6013      	str	r3, [r2, #0]
 8019644:	693b      	ldr	r3, [r7, #16]
 8019646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019648:	4613      	mov	r3, r2
 801964a:	009b      	lsls	r3, r3, #2
 801964c:	4413      	add	r3, r2
 801964e:	009b      	lsls	r3, r3, #2
 8019650:	4a09      	ldr	r2, [pc, #36]	; (8019678 <xTaskPriorityDisinherit+0xd8>)
 8019652:	441a      	add	r2, r3
 8019654:	693b      	ldr	r3, [r7, #16]
 8019656:	3304      	adds	r3, #4
 8019658:	4619      	mov	r1, r3
 801965a:	4610      	mov	r0, r2
 801965c:	f7fe fa37 	bl	8017ace <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8019660:	2301      	movs	r3, #1
 8019662:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019664:	697b      	ldr	r3, [r7, #20]
	}
 8019666:	4618      	mov	r0, r3
 8019668:	3718      	adds	r7, #24
 801966a:	46bd      	mov	sp, r7
 801966c:	bd80      	pop	{r7, pc}
 801966e:	bf00      	nop
 8019670:	24002718 	.word	0x24002718
 8019674:	24002bf4 	.word	0x24002bf4
 8019678:	2400271c 	.word	0x2400271c

0801967c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 801967c:	b480      	push	{r7}
 801967e:	b083      	sub	sp, #12
 8019680:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8019682:	4b09      	ldr	r3, [pc, #36]	; (80196a8 <uxTaskResetEventItemValue+0x2c>)
 8019684:	681b      	ldr	r3, [r3, #0]
 8019686:	699b      	ldr	r3, [r3, #24]
 8019688:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801968a:	4b07      	ldr	r3, [pc, #28]	; (80196a8 <uxTaskResetEventItemValue+0x2c>)
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019690:	4b05      	ldr	r3, [pc, #20]	; (80196a8 <uxTaskResetEventItemValue+0x2c>)
 8019692:	681b      	ldr	r3, [r3, #0]
 8019694:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8019698:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801969a:	687b      	ldr	r3, [r7, #4]
}
 801969c:	4618      	mov	r0, r3
 801969e:	370c      	adds	r7, #12
 80196a0:	46bd      	mov	sp, r7
 80196a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196a6:	4770      	bx	lr
 80196a8:	24002718 	.word	0x24002718

080196ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80196ac:	b580      	push	{r7, lr}
 80196ae:	b084      	sub	sp, #16
 80196b0:	af00      	add	r7, sp, #0
 80196b2:	6078      	str	r0, [r7, #4]
 80196b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80196b6:	4b21      	ldr	r3, [pc, #132]	; (801973c <prvAddCurrentTaskToDelayedList+0x90>)
 80196b8:	681b      	ldr	r3, [r3, #0]
 80196ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80196bc:	4b20      	ldr	r3, [pc, #128]	; (8019740 <prvAddCurrentTaskToDelayedList+0x94>)
 80196be:	681b      	ldr	r3, [r3, #0]
 80196c0:	3304      	adds	r3, #4
 80196c2:	4618      	mov	r0, r3
 80196c4:	f7fe fa60 	bl	8017b88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80196ce:	d10a      	bne.n	80196e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80196d0:	683b      	ldr	r3, [r7, #0]
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	d007      	beq.n	80196e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80196d6:	4b1a      	ldr	r3, [pc, #104]	; (8019740 <prvAddCurrentTaskToDelayedList+0x94>)
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	3304      	adds	r3, #4
 80196dc:	4619      	mov	r1, r3
 80196de:	4819      	ldr	r0, [pc, #100]	; (8019744 <prvAddCurrentTaskToDelayedList+0x98>)
 80196e0:	f7fe f9f5 	bl	8017ace <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80196e4:	e026      	b.n	8019734 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80196e6:	68fa      	ldr	r2, [r7, #12]
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	4413      	add	r3, r2
 80196ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80196ee:	4b14      	ldr	r3, [pc, #80]	; (8019740 <prvAddCurrentTaskToDelayedList+0x94>)
 80196f0:	681b      	ldr	r3, [r3, #0]
 80196f2:	68ba      	ldr	r2, [r7, #8]
 80196f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80196f6:	68ba      	ldr	r2, [r7, #8]
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	429a      	cmp	r2, r3
 80196fc:	d209      	bcs.n	8019712 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80196fe:	4b12      	ldr	r3, [pc, #72]	; (8019748 <prvAddCurrentTaskToDelayedList+0x9c>)
 8019700:	681a      	ldr	r2, [r3, #0]
 8019702:	4b0f      	ldr	r3, [pc, #60]	; (8019740 <prvAddCurrentTaskToDelayedList+0x94>)
 8019704:	681b      	ldr	r3, [r3, #0]
 8019706:	3304      	adds	r3, #4
 8019708:	4619      	mov	r1, r3
 801970a:	4610      	mov	r0, r2
 801970c:	f7fe fa03 	bl	8017b16 <vListInsert>
}
 8019710:	e010      	b.n	8019734 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019712:	4b0e      	ldr	r3, [pc, #56]	; (801974c <prvAddCurrentTaskToDelayedList+0xa0>)
 8019714:	681a      	ldr	r2, [r3, #0]
 8019716:	4b0a      	ldr	r3, [pc, #40]	; (8019740 <prvAddCurrentTaskToDelayedList+0x94>)
 8019718:	681b      	ldr	r3, [r3, #0]
 801971a:	3304      	adds	r3, #4
 801971c:	4619      	mov	r1, r3
 801971e:	4610      	mov	r0, r2
 8019720:	f7fe f9f9 	bl	8017b16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8019724:	4b0a      	ldr	r3, [pc, #40]	; (8019750 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019726:	681b      	ldr	r3, [r3, #0]
 8019728:	68ba      	ldr	r2, [r7, #8]
 801972a:	429a      	cmp	r2, r3
 801972c:	d202      	bcs.n	8019734 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801972e:	4a08      	ldr	r2, [pc, #32]	; (8019750 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019730:	68bb      	ldr	r3, [r7, #8]
 8019732:	6013      	str	r3, [r2, #0]
}
 8019734:	bf00      	nop
 8019736:	3710      	adds	r7, #16
 8019738:	46bd      	mov	sp, r7
 801973a:	bd80      	pop	{r7, pc}
 801973c:	24002bf0 	.word	0x24002bf0
 8019740:	24002718 	.word	0x24002718
 8019744:	24002bd8 	.word	0x24002bd8
 8019748:	24002ba8 	.word	0x24002ba8
 801974c:	24002ba4 	.word	0x24002ba4
 8019750:	24002c0c 	.word	0x24002c0c

08019754 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8019754:	b580      	push	{r7, lr}
 8019756:	b08a      	sub	sp, #40	; 0x28
 8019758:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801975a:	2300      	movs	r3, #0
 801975c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801975e:	f000 fb07 	bl	8019d70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8019762:	4b1c      	ldr	r3, [pc, #112]	; (80197d4 <xTimerCreateTimerTask+0x80>)
 8019764:	681b      	ldr	r3, [r3, #0]
 8019766:	2b00      	cmp	r3, #0
 8019768:	d021      	beq.n	80197ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801976a:	2300      	movs	r3, #0
 801976c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801976e:	2300      	movs	r3, #0
 8019770:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8019772:	1d3a      	adds	r2, r7, #4
 8019774:	f107 0108 	add.w	r1, r7, #8
 8019778:	f107 030c 	add.w	r3, r7, #12
 801977c:	4618      	mov	r0, r3
 801977e:	f7fd fef3 	bl	8017568 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8019782:	6879      	ldr	r1, [r7, #4]
 8019784:	68bb      	ldr	r3, [r7, #8]
 8019786:	68fa      	ldr	r2, [r7, #12]
 8019788:	9202      	str	r2, [sp, #8]
 801978a:	9301      	str	r3, [sp, #4]
 801978c:	2302      	movs	r3, #2
 801978e:	9300      	str	r3, [sp, #0]
 8019790:	2300      	movs	r3, #0
 8019792:	460a      	mov	r2, r1
 8019794:	4910      	ldr	r1, [pc, #64]	; (80197d8 <xTimerCreateTimerTask+0x84>)
 8019796:	4811      	ldr	r0, [pc, #68]	; (80197dc <xTimerCreateTimerTask+0x88>)
 8019798:	f7fe ff0c 	bl	80185b4 <xTaskCreateStatic>
 801979c:	4603      	mov	r3, r0
 801979e:	4a10      	ldr	r2, [pc, #64]	; (80197e0 <xTimerCreateTimerTask+0x8c>)
 80197a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80197a2:	4b0f      	ldr	r3, [pc, #60]	; (80197e0 <xTimerCreateTimerTask+0x8c>)
 80197a4:	681b      	ldr	r3, [r3, #0]
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d001      	beq.n	80197ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80197aa:	2301      	movs	r3, #1
 80197ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80197ae:	697b      	ldr	r3, [r7, #20]
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	d10a      	bne.n	80197ca <xTimerCreateTimerTask+0x76>
	__asm volatile
 80197b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197b8:	f383 8811 	msr	BASEPRI, r3
 80197bc:	f3bf 8f6f 	isb	sy
 80197c0:	f3bf 8f4f 	dsb	sy
 80197c4:	613b      	str	r3, [r7, #16]
}
 80197c6:	bf00      	nop
 80197c8:	e7fe      	b.n	80197c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80197ca:	697b      	ldr	r3, [r7, #20]
}
 80197cc:	4618      	mov	r0, r3
 80197ce:	3718      	adds	r7, #24
 80197d0:	46bd      	mov	sp, r7
 80197d2:	bd80      	pop	{r7, pc}
 80197d4:	24002c48 	.word	0x24002c48
 80197d8:	0801b388 	.word	0x0801b388
 80197dc:	08019919 	.word	0x08019919
 80197e0:	24002c4c 	.word	0x24002c4c

080197e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80197e4:	b580      	push	{r7, lr}
 80197e6:	b08a      	sub	sp, #40	; 0x28
 80197e8:	af00      	add	r7, sp, #0
 80197ea:	60f8      	str	r0, [r7, #12]
 80197ec:	60b9      	str	r1, [r7, #8]
 80197ee:	607a      	str	r2, [r7, #4]
 80197f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80197f2:	2300      	movs	r3, #0
 80197f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80197f6:	68fb      	ldr	r3, [r7, #12]
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	d10a      	bne.n	8019812 <xTimerGenericCommand+0x2e>
	__asm volatile
 80197fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019800:	f383 8811 	msr	BASEPRI, r3
 8019804:	f3bf 8f6f 	isb	sy
 8019808:	f3bf 8f4f 	dsb	sy
 801980c:	623b      	str	r3, [r7, #32]
}
 801980e:	bf00      	nop
 8019810:	e7fe      	b.n	8019810 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8019812:	4b1a      	ldr	r3, [pc, #104]	; (801987c <xTimerGenericCommand+0x98>)
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	2b00      	cmp	r3, #0
 8019818:	d02a      	beq.n	8019870 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801981a:	68bb      	ldr	r3, [r7, #8]
 801981c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8019822:	68fb      	ldr	r3, [r7, #12]
 8019824:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8019826:	68bb      	ldr	r3, [r7, #8]
 8019828:	2b05      	cmp	r3, #5
 801982a:	dc18      	bgt.n	801985e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801982c:	f7ff fe9a 	bl	8019564 <xTaskGetSchedulerState>
 8019830:	4603      	mov	r3, r0
 8019832:	2b02      	cmp	r3, #2
 8019834:	d109      	bne.n	801984a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8019836:	4b11      	ldr	r3, [pc, #68]	; (801987c <xTimerGenericCommand+0x98>)
 8019838:	6818      	ldr	r0, [r3, #0]
 801983a:	f107 0110 	add.w	r1, r7, #16
 801983e:	2300      	movs	r3, #0
 8019840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019842:	f7fe facf 	bl	8017de4 <xQueueGenericSend>
 8019846:	6278      	str	r0, [r7, #36]	; 0x24
 8019848:	e012      	b.n	8019870 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801984a:	4b0c      	ldr	r3, [pc, #48]	; (801987c <xTimerGenericCommand+0x98>)
 801984c:	6818      	ldr	r0, [r3, #0]
 801984e:	f107 0110 	add.w	r1, r7, #16
 8019852:	2300      	movs	r3, #0
 8019854:	2200      	movs	r2, #0
 8019856:	f7fe fac5 	bl	8017de4 <xQueueGenericSend>
 801985a:	6278      	str	r0, [r7, #36]	; 0x24
 801985c:	e008      	b.n	8019870 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801985e:	4b07      	ldr	r3, [pc, #28]	; (801987c <xTimerGenericCommand+0x98>)
 8019860:	6818      	ldr	r0, [r3, #0]
 8019862:	f107 0110 	add.w	r1, r7, #16
 8019866:	2300      	movs	r3, #0
 8019868:	683a      	ldr	r2, [r7, #0]
 801986a:	f7fe fbb9 	bl	8017fe0 <xQueueGenericSendFromISR>
 801986e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8019870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019872:	4618      	mov	r0, r3
 8019874:	3728      	adds	r7, #40	; 0x28
 8019876:	46bd      	mov	sp, r7
 8019878:	bd80      	pop	{r7, pc}
 801987a:	bf00      	nop
 801987c:	24002c48 	.word	0x24002c48

08019880 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8019880:	b580      	push	{r7, lr}
 8019882:	b088      	sub	sp, #32
 8019884:	af02      	add	r7, sp, #8
 8019886:	6078      	str	r0, [r7, #4]
 8019888:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801988a:	4b22      	ldr	r3, [pc, #136]	; (8019914 <prvProcessExpiredTimer+0x94>)
 801988c:	681b      	ldr	r3, [r3, #0]
 801988e:	68db      	ldr	r3, [r3, #12]
 8019890:	68db      	ldr	r3, [r3, #12]
 8019892:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019894:	697b      	ldr	r3, [r7, #20]
 8019896:	3304      	adds	r3, #4
 8019898:	4618      	mov	r0, r3
 801989a:	f7fe f975 	bl	8017b88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801989e:	697b      	ldr	r3, [r7, #20]
 80198a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80198a4:	f003 0304 	and.w	r3, r3, #4
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	d022      	beq.n	80198f2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80198ac:	697b      	ldr	r3, [r7, #20]
 80198ae:	699a      	ldr	r2, [r3, #24]
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	18d1      	adds	r1, r2, r3
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	683a      	ldr	r2, [r7, #0]
 80198b8:	6978      	ldr	r0, [r7, #20]
 80198ba:	f000 f8d1 	bl	8019a60 <prvInsertTimerInActiveList>
 80198be:	4603      	mov	r3, r0
 80198c0:	2b00      	cmp	r3, #0
 80198c2:	d01f      	beq.n	8019904 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80198c4:	2300      	movs	r3, #0
 80198c6:	9300      	str	r3, [sp, #0]
 80198c8:	2300      	movs	r3, #0
 80198ca:	687a      	ldr	r2, [r7, #4]
 80198cc:	2100      	movs	r1, #0
 80198ce:	6978      	ldr	r0, [r7, #20]
 80198d0:	f7ff ff88 	bl	80197e4 <xTimerGenericCommand>
 80198d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80198d6:	693b      	ldr	r3, [r7, #16]
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d113      	bne.n	8019904 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80198dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198e0:	f383 8811 	msr	BASEPRI, r3
 80198e4:	f3bf 8f6f 	isb	sy
 80198e8:	f3bf 8f4f 	dsb	sy
 80198ec:	60fb      	str	r3, [r7, #12]
}
 80198ee:	bf00      	nop
 80198f0:	e7fe      	b.n	80198f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80198f2:	697b      	ldr	r3, [r7, #20]
 80198f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80198f8:	f023 0301 	bic.w	r3, r3, #1
 80198fc:	b2da      	uxtb	r2, r3
 80198fe:	697b      	ldr	r3, [r7, #20]
 8019900:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019904:	697b      	ldr	r3, [r7, #20]
 8019906:	6a1b      	ldr	r3, [r3, #32]
 8019908:	6978      	ldr	r0, [r7, #20]
 801990a:	4798      	blx	r3
}
 801990c:	bf00      	nop
 801990e:	3718      	adds	r7, #24
 8019910:	46bd      	mov	sp, r7
 8019912:	bd80      	pop	{r7, pc}
 8019914:	24002c40 	.word	0x24002c40

08019918 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8019918:	b580      	push	{r7, lr}
 801991a:	b084      	sub	sp, #16
 801991c:	af00      	add	r7, sp, #0
 801991e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019920:	f107 0308 	add.w	r3, r7, #8
 8019924:	4618      	mov	r0, r3
 8019926:	f000 f857 	bl	80199d8 <prvGetNextExpireTime>
 801992a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801992c:	68bb      	ldr	r3, [r7, #8]
 801992e:	4619      	mov	r1, r3
 8019930:	68f8      	ldr	r0, [r7, #12]
 8019932:	f000 f803 	bl	801993c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8019936:	f000 f8d5 	bl	8019ae4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801993a:	e7f1      	b.n	8019920 <prvTimerTask+0x8>

0801993c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801993c:	b580      	push	{r7, lr}
 801993e:	b084      	sub	sp, #16
 8019940:	af00      	add	r7, sp, #0
 8019942:	6078      	str	r0, [r7, #4]
 8019944:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8019946:	f7ff f977 	bl	8018c38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801994a:	f107 0308 	add.w	r3, r7, #8
 801994e:	4618      	mov	r0, r3
 8019950:	f000 f866 	bl	8019a20 <prvSampleTimeNow>
 8019954:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8019956:	68bb      	ldr	r3, [r7, #8]
 8019958:	2b00      	cmp	r3, #0
 801995a:	d130      	bne.n	80199be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801995c:	683b      	ldr	r3, [r7, #0]
 801995e:	2b00      	cmp	r3, #0
 8019960:	d10a      	bne.n	8019978 <prvProcessTimerOrBlockTask+0x3c>
 8019962:	687a      	ldr	r2, [r7, #4]
 8019964:	68fb      	ldr	r3, [r7, #12]
 8019966:	429a      	cmp	r2, r3
 8019968:	d806      	bhi.n	8019978 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801996a:	f7ff f973 	bl	8018c54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801996e:	68f9      	ldr	r1, [r7, #12]
 8019970:	6878      	ldr	r0, [r7, #4]
 8019972:	f7ff ff85 	bl	8019880 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8019976:	e024      	b.n	80199c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8019978:	683b      	ldr	r3, [r7, #0]
 801997a:	2b00      	cmp	r3, #0
 801997c:	d008      	beq.n	8019990 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801997e:	4b13      	ldr	r3, [pc, #76]	; (80199cc <prvProcessTimerOrBlockTask+0x90>)
 8019980:	681b      	ldr	r3, [r3, #0]
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	2b00      	cmp	r3, #0
 8019986:	d101      	bne.n	801998c <prvProcessTimerOrBlockTask+0x50>
 8019988:	2301      	movs	r3, #1
 801998a:	e000      	b.n	801998e <prvProcessTimerOrBlockTask+0x52>
 801998c:	2300      	movs	r3, #0
 801998e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8019990:	4b0f      	ldr	r3, [pc, #60]	; (80199d0 <prvProcessTimerOrBlockTask+0x94>)
 8019992:	6818      	ldr	r0, [r3, #0]
 8019994:	687a      	ldr	r2, [r7, #4]
 8019996:	68fb      	ldr	r3, [r7, #12]
 8019998:	1ad3      	subs	r3, r2, r3
 801999a:	683a      	ldr	r2, [r7, #0]
 801999c:	4619      	mov	r1, r3
 801999e:	f7fe fdd5 	bl	801854c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80199a2:	f7ff f957 	bl	8018c54 <xTaskResumeAll>
 80199a6:	4603      	mov	r3, r0
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	d10a      	bne.n	80199c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80199ac:	4b09      	ldr	r3, [pc, #36]	; (80199d4 <prvProcessTimerOrBlockTask+0x98>)
 80199ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80199b2:	601a      	str	r2, [r3, #0]
 80199b4:	f3bf 8f4f 	dsb	sy
 80199b8:	f3bf 8f6f 	isb	sy
}
 80199bc:	e001      	b.n	80199c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80199be:	f7ff f949 	bl	8018c54 <xTaskResumeAll>
}
 80199c2:	bf00      	nop
 80199c4:	3710      	adds	r7, #16
 80199c6:	46bd      	mov	sp, r7
 80199c8:	bd80      	pop	{r7, pc}
 80199ca:	bf00      	nop
 80199cc:	24002c44 	.word	0x24002c44
 80199d0:	24002c48 	.word	0x24002c48
 80199d4:	e000ed04 	.word	0xe000ed04

080199d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80199d8:	b480      	push	{r7}
 80199da:	b085      	sub	sp, #20
 80199dc:	af00      	add	r7, sp, #0
 80199de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80199e0:	4b0e      	ldr	r3, [pc, #56]	; (8019a1c <prvGetNextExpireTime+0x44>)
 80199e2:	681b      	ldr	r3, [r3, #0]
 80199e4:	681b      	ldr	r3, [r3, #0]
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	d101      	bne.n	80199ee <prvGetNextExpireTime+0x16>
 80199ea:	2201      	movs	r2, #1
 80199ec:	e000      	b.n	80199f0 <prvGetNextExpireTime+0x18>
 80199ee:	2200      	movs	r2, #0
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	681b      	ldr	r3, [r3, #0]
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d105      	bne.n	8019a08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80199fc:	4b07      	ldr	r3, [pc, #28]	; (8019a1c <prvGetNextExpireTime+0x44>)
 80199fe:	681b      	ldr	r3, [r3, #0]
 8019a00:	68db      	ldr	r3, [r3, #12]
 8019a02:	681b      	ldr	r3, [r3, #0]
 8019a04:	60fb      	str	r3, [r7, #12]
 8019a06:	e001      	b.n	8019a0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019a08:	2300      	movs	r3, #0
 8019a0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8019a0c:	68fb      	ldr	r3, [r7, #12]
}
 8019a0e:	4618      	mov	r0, r3
 8019a10:	3714      	adds	r7, #20
 8019a12:	46bd      	mov	sp, r7
 8019a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a18:	4770      	bx	lr
 8019a1a:	bf00      	nop
 8019a1c:	24002c40 	.word	0x24002c40

08019a20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8019a20:	b580      	push	{r7, lr}
 8019a22:	b084      	sub	sp, #16
 8019a24:	af00      	add	r7, sp, #0
 8019a26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8019a28:	f7ff f9b2 	bl	8018d90 <xTaskGetTickCount>
 8019a2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8019a2e:	4b0b      	ldr	r3, [pc, #44]	; (8019a5c <prvSampleTimeNow+0x3c>)
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	68fa      	ldr	r2, [r7, #12]
 8019a34:	429a      	cmp	r2, r3
 8019a36:	d205      	bcs.n	8019a44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8019a38:	f000 f936 	bl	8019ca8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	2201      	movs	r2, #1
 8019a40:	601a      	str	r2, [r3, #0]
 8019a42:	e002      	b.n	8019a4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	2200      	movs	r2, #0
 8019a48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8019a4a:	4a04      	ldr	r2, [pc, #16]	; (8019a5c <prvSampleTimeNow+0x3c>)
 8019a4c:	68fb      	ldr	r3, [r7, #12]
 8019a4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8019a50:	68fb      	ldr	r3, [r7, #12]
}
 8019a52:	4618      	mov	r0, r3
 8019a54:	3710      	adds	r7, #16
 8019a56:	46bd      	mov	sp, r7
 8019a58:	bd80      	pop	{r7, pc}
 8019a5a:	bf00      	nop
 8019a5c:	24002c50 	.word	0x24002c50

08019a60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019a60:	b580      	push	{r7, lr}
 8019a62:	b086      	sub	sp, #24
 8019a64:	af00      	add	r7, sp, #0
 8019a66:	60f8      	str	r0, [r7, #12]
 8019a68:	60b9      	str	r1, [r7, #8]
 8019a6a:	607a      	str	r2, [r7, #4]
 8019a6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8019a6e:	2300      	movs	r3, #0
 8019a70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8019a72:	68fb      	ldr	r3, [r7, #12]
 8019a74:	68ba      	ldr	r2, [r7, #8]
 8019a76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019a78:	68fb      	ldr	r3, [r7, #12]
 8019a7a:	68fa      	ldr	r2, [r7, #12]
 8019a7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8019a7e:	68ba      	ldr	r2, [r7, #8]
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	429a      	cmp	r2, r3
 8019a84:	d812      	bhi.n	8019aac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019a86:	687a      	ldr	r2, [r7, #4]
 8019a88:	683b      	ldr	r3, [r7, #0]
 8019a8a:	1ad2      	subs	r2, r2, r3
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	699b      	ldr	r3, [r3, #24]
 8019a90:	429a      	cmp	r2, r3
 8019a92:	d302      	bcc.n	8019a9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019a94:	2301      	movs	r3, #1
 8019a96:	617b      	str	r3, [r7, #20]
 8019a98:	e01b      	b.n	8019ad2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8019a9a:	4b10      	ldr	r3, [pc, #64]	; (8019adc <prvInsertTimerInActiveList+0x7c>)
 8019a9c:	681a      	ldr	r2, [r3, #0]
 8019a9e:	68fb      	ldr	r3, [r7, #12]
 8019aa0:	3304      	adds	r3, #4
 8019aa2:	4619      	mov	r1, r3
 8019aa4:	4610      	mov	r0, r2
 8019aa6:	f7fe f836 	bl	8017b16 <vListInsert>
 8019aaa:	e012      	b.n	8019ad2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019aac:	687a      	ldr	r2, [r7, #4]
 8019aae:	683b      	ldr	r3, [r7, #0]
 8019ab0:	429a      	cmp	r2, r3
 8019ab2:	d206      	bcs.n	8019ac2 <prvInsertTimerInActiveList+0x62>
 8019ab4:	68ba      	ldr	r2, [r7, #8]
 8019ab6:	683b      	ldr	r3, [r7, #0]
 8019ab8:	429a      	cmp	r2, r3
 8019aba:	d302      	bcc.n	8019ac2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019abc:	2301      	movs	r3, #1
 8019abe:	617b      	str	r3, [r7, #20]
 8019ac0:	e007      	b.n	8019ad2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019ac2:	4b07      	ldr	r3, [pc, #28]	; (8019ae0 <prvInsertTimerInActiveList+0x80>)
 8019ac4:	681a      	ldr	r2, [r3, #0]
 8019ac6:	68fb      	ldr	r3, [r7, #12]
 8019ac8:	3304      	adds	r3, #4
 8019aca:	4619      	mov	r1, r3
 8019acc:	4610      	mov	r0, r2
 8019ace:	f7fe f822 	bl	8017b16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8019ad2:	697b      	ldr	r3, [r7, #20]
}
 8019ad4:	4618      	mov	r0, r3
 8019ad6:	3718      	adds	r7, #24
 8019ad8:	46bd      	mov	sp, r7
 8019ada:	bd80      	pop	{r7, pc}
 8019adc:	24002c44 	.word	0x24002c44
 8019ae0:	24002c40 	.word	0x24002c40

08019ae4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019ae4:	b580      	push	{r7, lr}
 8019ae6:	b08e      	sub	sp, #56	; 0x38
 8019ae8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019aea:	e0ca      	b.n	8019c82 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	da18      	bge.n	8019b24 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8019af2:	1d3b      	adds	r3, r7, #4
 8019af4:	3304      	adds	r3, #4
 8019af6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8019af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d10a      	bne.n	8019b14 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8019afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b02:	f383 8811 	msr	BASEPRI, r3
 8019b06:	f3bf 8f6f 	isb	sy
 8019b0a:	f3bf 8f4f 	dsb	sy
 8019b0e:	61fb      	str	r3, [r7, #28]
}
 8019b10:	bf00      	nop
 8019b12:	e7fe      	b.n	8019b12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8019b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b16:	681b      	ldr	r3, [r3, #0]
 8019b18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019b1a:	6850      	ldr	r0, [r2, #4]
 8019b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019b1e:	6892      	ldr	r2, [r2, #8]
 8019b20:	4611      	mov	r1, r2
 8019b22:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	f2c0 80aa 	blt.w	8019c80 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019b2c:	68fb      	ldr	r3, [r7, #12]
 8019b2e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8019b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b32:	695b      	ldr	r3, [r3, #20]
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	d004      	beq.n	8019b42 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b3a:	3304      	adds	r3, #4
 8019b3c:	4618      	mov	r0, r3
 8019b3e:	f7fe f823 	bl	8017b88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019b42:	463b      	mov	r3, r7
 8019b44:	4618      	mov	r0, r3
 8019b46:	f7ff ff6b 	bl	8019a20 <prvSampleTimeNow>
 8019b4a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	2b09      	cmp	r3, #9
 8019b50:	f200 8097 	bhi.w	8019c82 <prvProcessReceivedCommands+0x19e>
 8019b54:	a201      	add	r2, pc, #4	; (adr r2, 8019b5c <prvProcessReceivedCommands+0x78>)
 8019b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b5a:	bf00      	nop
 8019b5c:	08019b85 	.word	0x08019b85
 8019b60:	08019b85 	.word	0x08019b85
 8019b64:	08019b85 	.word	0x08019b85
 8019b68:	08019bf9 	.word	0x08019bf9
 8019b6c:	08019c0d 	.word	0x08019c0d
 8019b70:	08019c57 	.word	0x08019c57
 8019b74:	08019b85 	.word	0x08019b85
 8019b78:	08019b85 	.word	0x08019b85
 8019b7c:	08019bf9 	.word	0x08019bf9
 8019b80:	08019c0d 	.word	0x08019c0d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019b8a:	f043 0301 	orr.w	r3, r3, #1
 8019b8e:	b2da      	uxtb	r2, r3
 8019b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8019b96:	68ba      	ldr	r2, [r7, #8]
 8019b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b9a:	699b      	ldr	r3, [r3, #24]
 8019b9c:	18d1      	adds	r1, r2, r3
 8019b9e:	68bb      	ldr	r3, [r7, #8]
 8019ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ba2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019ba4:	f7ff ff5c 	bl	8019a60 <prvInsertTimerInActiveList>
 8019ba8:	4603      	mov	r3, r0
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	d069      	beq.n	8019c82 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bb0:	6a1b      	ldr	r3, [r3, #32]
 8019bb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019bb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019bbc:	f003 0304 	and.w	r3, r3, #4
 8019bc0:	2b00      	cmp	r3, #0
 8019bc2:	d05e      	beq.n	8019c82 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019bc4:	68ba      	ldr	r2, [r7, #8]
 8019bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bc8:	699b      	ldr	r3, [r3, #24]
 8019bca:	441a      	add	r2, r3
 8019bcc:	2300      	movs	r3, #0
 8019bce:	9300      	str	r3, [sp, #0]
 8019bd0:	2300      	movs	r3, #0
 8019bd2:	2100      	movs	r1, #0
 8019bd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019bd6:	f7ff fe05 	bl	80197e4 <xTimerGenericCommand>
 8019bda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019bdc:	6a3b      	ldr	r3, [r7, #32]
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	d14f      	bne.n	8019c82 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8019be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019be6:	f383 8811 	msr	BASEPRI, r3
 8019bea:	f3bf 8f6f 	isb	sy
 8019bee:	f3bf 8f4f 	dsb	sy
 8019bf2:	61bb      	str	r3, [r7, #24]
}
 8019bf4:	bf00      	nop
 8019bf6:	e7fe      	b.n	8019bf6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019bfe:	f023 0301 	bic.w	r3, r3, #1
 8019c02:	b2da      	uxtb	r2, r3
 8019c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8019c0a:	e03a      	b.n	8019c82 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019c12:	f043 0301 	orr.w	r3, r3, #1
 8019c16:	b2da      	uxtb	r2, r3
 8019c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019c1e:	68ba      	ldr	r2, [r7, #8]
 8019c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c22:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c26:	699b      	ldr	r3, [r3, #24]
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	d10a      	bne.n	8019c42 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8019c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c30:	f383 8811 	msr	BASEPRI, r3
 8019c34:	f3bf 8f6f 	isb	sy
 8019c38:	f3bf 8f4f 	dsb	sy
 8019c3c:	617b      	str	r3, [r7, #20]
}
 8019c3e:	bf00      	nop
 8019c40:	e7fe      	b.n	8019c40 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8019c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c44:	699a      	ldr	r2, [r3, #24]
 8019c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c48:	18d1      	adds	r1, r2, r3
 8019c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019c50:	f7ff ff06 	bl	8019a60 <prvInsertTimerInActiveList>
					break;
 8019c54:	e015      	b.n	8019c82 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8019c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019c5c:	f003 0302 	and.w	r3, r3, #2
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	d103      	bne.n	8019c6c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8019c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019c66:	f000 fbfb 	bl	801a460 <vPortFree>
 8019c6a:	e00a      	b.n	8019c82 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019c72:	f023 0301 	bic.w	r3, r3, #1
 8019c76:	b2da      	uxtb	r2, r3
 8019c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8019c7e:	e000      	b.n	8019c82 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8019c80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019c82:	4b08      	ldr	r3, [pc, #32]	; (8019ca4 <prvProcessReceivedCommands+0x1c0>)
 8019c84:	681b      	ldr	r3, [r3, #0]
 8019c86:	1d39      	adds	r1, r7, #4
 8019c88:	2200      	movs	r2, #0
 8019c8a:	4618      	mov	r0, r3
 8019c8c:	f7fe fa44 	bl	8018118 <xQueueReceive>
 8019c90:	4603      	mov	r3, r0
 8019c92:	2b00      	cmp	r3, #0
 8019c94:	f47f af2a 	bne.w	8019aec <prvProcessReceivedCommands+0x8>
	}
}
 8019c98:	bf00      	nop
 8019c9a:	bf00      	nop
 8019c9c:	3730      	adds	r7, #48	; 0x30
 8019c9e:	46bd      	mov	sp, r7
 8019ca0:	bd80      	pop	{r7, pc}
 8019ca2:	bf00      	nop
 8019ca4:	24002c48 	.word	0x24002c48

08019ca8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019ca8:	b580      	push	{r7, lr}
 8019caa:	b088      	sub	sp, #32
 8019cac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019cae:	e048      	b.n	8019d42 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019cb0:	4b2d      	ldr	r3, [pc, #180]	; (8019d68 <prvSwitchTimerLists+0xc0>)
 8019cb2:	681b      	ldr	r3, [r3, #0]
 8019cb4:	68db      	ldr	r3, [r3, #12]
 8019cb6:	681b      	ldr	r3, [r3, #0]
 8019cb8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019cba:	4b2b      	ldr	r3, [pc, #172]	; (8019d68 <prvSwitchTimerLists+0xc0>)
 8019cbc:	681b      	ldr	r3, [r3, #0]
 8019cbe:	68db      	ldr	r3, [r3, #12]
 8019cc0:	68db      	ldr	r3, [r3, #12]
 8019cc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019cc4:	68fb      	ldr	r3, [r7, #12]
 8019cc6:	3304      	adds	r3, #4
 8019cc8:	4618      	mov	r0, r3
 8019cca:	f7fd ff5d 	bl	8017b88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019cce:	68fb      	ldr	r3, [r7, #12]
 8019cd0:	6a1b      	ldr	r3, [r3, #32]
 8019cd2:	68f8      	ldr	r0, [r7, #12]
 8019cd4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019cd6:	68fb      	ldr	r3, [r7, #12]
 8019cd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019cdc:	f003 0304 	and.w	r3, r3, #4
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	d02e      	beq.n	8019d42 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019ce4:	68fb      	ldr	r3, [r7, #12]
 8019ce6:	699b      	ldr	r3, [r3, #24]
 8019ce8:	693a      	ldr	r2, [r7, #16]
 8019cea:	4413      	add	r3, r2
 8019cec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019cee:	68ba      	ldr	r2, [r7, #8]
 8019cf0:	693b      	ldr	r3, [r7, #16]
 8019cf2:	429a      	cmp	r2, r3
 8019cf4:	d90e      	bls.n	8019d14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019cf6:	68fb      	ldr	r3, [r7, #12]
 8019cf8:	68ba      	ldr	r2, [r7, #8]
 8019cfa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019cfc:	68fb      	ldr	r3, [r7, #12]
 8019cfe:	68fa      	ldr	r2, [r7, #12]
 8019d00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019d02:	4b19      	ldr	r3, [pc, #100]	; (8019d68 <prvSwitchTimerLists+0xc0>)
 8019d04:	681a      	ldr	r2, [r3, #0]
 8019d06:	68fb      	ldr	r3, [r7, #12]
 8019d08:	3304      	adds	r3, #4
 8019d0a:	4619      	mov	r1, r3
 8019d0c:	4610      	mov	r0, r2
 8019d0e:	f7fd ff02 	bl	8017b16 <vListInsert>
 8019d12:	e016      	b.n	8019d42 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019d14:	2300      	movs	r3, #0
 8019d16:	9300      	str	r3, [sp, #0]
 8019d18:	2300      	movs	r3, #0
 8019d1a:	693a      	ldr	r2, [r7, #16]
 8019d1c:	2100      	movs	r1, #0
 8019d1e:	68f8      	ldr	r0, [r7, #12]
 8019d20:	f7ff fd60 	bl	80197e4 <xTimerGenericCommand>
 8019d24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d10a      	bne.n	8019d42 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8019d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d30:	f383 8811 	msr	BASEPRI, r3
 8019d34:	f3bf 8f6f 	isb	sy
 8019d38:	f3bf 8f4f 	dsb	sy
 8019d3c:	603b      	str	r3, [r7, #0]
}
 8019d3e:	bf00      	nop
 8019d40:	e7fe      	b.n	8019d40 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019d42:	4b09      	ldr	r3, [pc, #36]	; (8019d68 <prvSwitchTimerLists+0xc0>)
 8019d44:	681b      	ldr	r3, [r3, #0]
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d1b1      	bne.n	8019cb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019d4c:	4b06      	ldr	r3, [pc, #24]	; (8019d68 <prvSwitchTimerLists+0xc0>)
 8019d4e:	681b      	ldr	r3, [r3, #0]
 8019d50:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8019d52:	4b06      	ldr	r3, [pc, #24]	; (8019d6c <prvSwitchTimerLists+0xc4>)
 8019d54:	681b      	ldr	r3, [r3, #0]
 8019d56:	4a04      	ldr	r2, [pc, #16]	; (8019d68 <prvSwitchTimerLists+0xc0>)
 8019d58:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019d5a:	4a04      	ldr	r2, [pc, #16]	; (8019d6c <prvSwitchTimerLists+0xc4>)
 8019d5c:	697b      	ldr	r3, [r7, #20]
 8019d5e:	6013      	str	r3, [r2, #0]
}
 8019d60:	bf00      	nop
 8019d62:	3718      	adds	r7, #24
 8019d64:	46bd      	mov	sp, r7
 8019d66:	bd80      	pop	{r7, pc}
 8019d68:	24002c40 	.word	0x24002c40
 8019d6c:	24002c44 	.word	0x24002c44

08019d70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019d70:	b580      	push	{r7, lr}
 8019d72:	b082      	sub	sp, #8
 8019d74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8019d76:	f000 f985 	bl	801a084 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019d7a:	4b15      	ldr	r3, [pc, #84]	; (8019dd0 <prvCheckForValidListAndQueue+0x60>)
 8019d7c:	681b      	ldr	r3, [r3, #0]
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d120      	bne.n	8019dc4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8019d82:	4814      	ldr	r0, [pc, #80]	; (8019dd4 <prvCheckForValidListAndQueue+0x64>)
 8019d84:	f7fd fe76 	bl	8017a74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019d88:	4813      	ldr	r0, [pc, #76]	; (8019dd8 <prvCheckForValidListAndQueue+0x68>)
 8019d8a:	f7fd fe73 	bl	8017a74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8019d8e:	4b13      	ldr	r3, [pc, #76]	; (8019ddc <prvCheckForValidListAndQueue+0x6c>)
 8019d90:	4a10      	ldr	r2, [pc, #64]	; (8019dd4 <prvCheckForValidListAndQueue+0x64>)
 8019d92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019d94:	4b12      	ldr	r3, [pc, #72]	; (8019de0 <prvCheckForValidListAndQueue+0x70>)
 8019d96:	4a10      	ldr	r2, [pc, #64]	; (8019dd8 <prvCheckForValidListAndQueue+0x68>)
 8019d98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8019d9a:	2300      	movs	r3, #0
 8019d9c:	9300      	str	r3, [sp, #0]
 8019d9e:	4b11      	ldr	r3, [pc, #68]	; (8019de4 <prvCheckForValidListAndQueue+0x74>)
 8019da0:	4a11      	ldr	r2, [pc, #68]	; (8019de8 <prvCheckForValidListAndQueue+0x78>)
 8019da2:	2110      	movs	r1, #16
 8019da4:	200a      	movs	r0, #10
 8019da6:	f7fd ff81 	bl	8017cac <xQueueGenericCreateStatic>
 8019daa:	4603      	mov	r3, r0
 8019dac:	4a08      	ldr	r2, [pc, #32]	; (8019dd0 <prvCheckForValidListAndQueue+0x60>)
 8019dae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8019db0:	4b07      	ldr	r3, [pc, #28]	; (8019dd0 <prvCheckForValidListAndQueue+0x60>)
 8019db2:	681b      	ldr	r3, [r3, #0]
 8019db4:	2b00      	cmp	r3, #0
 8019db6:	d005      	beq.n	8019dc4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019db8:	4b05      	ldr	r3, [pc, #20]	; (8019dd0 <prvCheckForValidListAndQueue+0x60>)
 8019dba:	681b      	ldr	r3, [r3, #0]
 8019dbc:	490b      	ldr	r1, [pc, #44]	; (8019dec <prvCheckForValidListAndQueue+0x7c>)
 8019dbe:	4618      	mov	r0, r3
 8019dc0:	f7fe fb9a 	bl	80184f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019dc4:	f000 f98e 	bl	801a0e4 <vPortExitCritical>
}
 8019dc8:	bf00      	nop
 8019dca:	46bd      	mov	sp, r7
 8019dcc:	bd80      	pop	{r7, pc}
 8019dce:	bf00      	nop
 8019dd0:	24002c48 	.word	0x24002c48
 8019dd4:	24002c18 	.word	0x24002c18
 8019dd8:	24002c2c 	.word	0x24002c2c
 8019ddc:	24002c40 	.word	0x24002c40
 8019de0:	24002c44 	.word	0x24002c44
 8019de4:	24002cf4 	.word	0x24002cf4
 8019de8:	24002c54 	.word	0x24002c54
 8019dec:	0801b390 	.word	0x0801b390

08019df0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8019df0:	b580      	push	{r7, lr}
 8019df2:	b08a      	sub	sp, #40	; 0x28
 8019df4:	af00      	add	r7, sp, #0
 8019df6:	60f8      	str	r0, [r7, #12]
 8019df8:	60b9      	str	r1, [r7, #8]
 8019dfa:	607a      	str	r2, [r7, #4]
 8019dfc:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8019dfe:	f06f 0301 	mvn.w	r3, #1
 8019e02:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8019e04:	68fb      	ldr	r3, [r7, #12]
 8019e06:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8019e08:	68bb      	ldr	r3, [r7, #8]
 8019e0a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019e10:	4b06      	ldr	r3, [pc, #24]	; (8019e2c <xTimerPendFunctionCallFromISR+0x3c>)
 8019e12:	6818      	ldr	r0, [r3, #0]
 8019e14:	f107 0114 	add.w	r1, r7, #20
 8019e18:	2300      	movs	r3, #0
 8019e1a:	683a      	ldr	r2, [r7, #0]
 8019e1c:	f7fe f8e0 	bl	8017fe0 <xQueueGenericSendFromISR>
 8019e20:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8019e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8019e24:	4618      	mov	r0, r3
 8019e26:	3728      	adds	r7, #40	; 0x28
 8019e28:	46bd      	mov	sp, r7
 8019e2a:	bd80      	pop	{r7, pc}
 8019e2c:	24002c48 	.word	0x24002c48

08019e30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8019e30:	b480      	push	{r7}
 8019e32:	b085      	sub	sp, #20
 8019e34:	af00      	add	r7, sp, #0
 8019e36:	60f8      	str	r0, [r7, #12]
 8019e38:	60b9      	str	r1, [r7, #8]
 8019e3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019e3c:	68fb      	ldr	r3, [r7, #12]
 8019e3e:	3b04      	subs	r3, #4
 8019e40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8019e42:	68fb      	ldr	r3, [r7, #12]
 8019e44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8019e48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019e4a:	68fb      	ldr	r3, [r7, #12]
 8019e4c:	3b04      	subs	r3, #4
 8019e4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019e50:	68bb      	ldr	r3, [r7, #8]
 8019e52:	f023 0201 	bic.w	r2, r3, #1
 8019e56:	68fb      	ldr	r3, [r7, #12]
 8019e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019e5a:	68fb      	ldr	r3, [r7, #12]
 8019e5c:	3b04      	subs	r3, #4
 8019e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019e60:	4a0c      	ldr	r2, [pc, #48]	; (8019e94 <pxPortInitialiseStack+0x64>)
 8019e62:	68fb      	ldr	r3, [r7, #12]
 8019e64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8019e66:	68fb      	ldr	r3, [r7, #12]
 8019e68:	3b14      	subs	r3, #20
 8019e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019e6c:	687a      	ldr	r2, [r7, #4]
 8019e6e:	68fb      	ldr	r3, [r7, #12]
 8019e70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8019e72:	68fb      	ldr	r3, [r7, #12]
 8019e74:	3b04      	subs	r3, #4
 8019e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019e78:	68fb      	ldr	r3, [r7, #12]
 8019e7a:	f06f 0202 	mvn.w	r2, #2
 8019e7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019e80:	68fb      	ldr	r3, [r7, #12]
 8019e82:	3b20      	subs	r3, #32
 8019e84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8019e86:	68fb      	ldr	r3, [r7, #12]
}
 8019e88:	4618      	mov	r0, r3
 8019e8a:	3714      	adds	r7, #20
 8019e8c:	46bd      	mov	sp, r7
 8019e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e92:	4770      	bx	lr
 8019e94:	08019e99 	.word	0x08019e99

08019e98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019e98:	b480      	push	{r7}
 8019e9a:	b085      	sub	sp, #20
 8019e9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019e9e:	2300      	movs	r3, #0
 8019ea0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019ea2:	4b12      	ldr	r3, [pc, #72]	; (8019eec <prvTaskExitError+0x54>)
 8019ea4:	681b      	ldr	r3, [r3, #0]
 8019ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019eaa:	d00a      	beq.n	8019ec2 <prvTaskExitError+0x2a>
	__asm volatile
 8019eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019eb0:	f383 8811 	msr	BASEPRI, r3
 8019eb4:	f3bf 8f6f 	isb	sy
 8019eb8:	f3bf 8f4f 	dsb	sy
 8019ebc:	60fb      	str	r3, [r7, #12]
}
 8019ebe:	bf00      	nop
 8019ec0:	e7fe      	b.n	8019ec0 <prvTaskExitError+0x28>
	__asm volatile
 8019ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ec6:	f383 8811 	msr	BASEPRI, r3
 8019eca:	f3bf 8f6f 	isb	sy
 8019ece:	f3bf 8f4f 	dsb	sy
 8019ed2:	60bb      	str	r3, [r7, #8]
}
 8019ed4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8019ed6:	bf00      	nop
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d0fc      	beq.n	8019ed8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019ede:	bf00      	nop
 8019ee0:	bf00      	nop
 8019ee2:	3714      	adds	r7, #20
 8019ee4:	46bd      	mov	sp, r7
 8019ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eea:	4770      	bx	lr
 8019eec:	240000d0 	.word	0x240000d0

08019ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019ef0:	4b07      	ldr	r3, [pc, #28]	; (8019f10 <pxCurrentTCBConst2>)
 8019ef2:	6819      	ldr	r1, [r3, #0]
 8019ef4:	6808      	ldr	r0, [r1, #0]
 8019ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019efa:	f380 8809 	msr	PSP, r0
 8019efe:	f3bf 8f6f 	isb	sy
 8019f02:	f04f 0000 	mov.w	r0, #0
 8019f06:	f380 8811 	msr	BASEPRI, r0
 8019f0a:	4770      	bx	lr
 8019f0c:	f3af 8000 	nop.w

08019f10 <pxCurrentTCBConst2>:
 8019f10:	24002718 	.word	0x24002718
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019f14:	bf00      	nop
 8019f16:	bf00      	nop

08019f18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019f18:	4808      	ldr	r0, [pc, #32]	; (8019f3c <prvPortStartFirstTask+0x24>)
 8019f1a:	6800      	ldr	r0, [r0, #0]
 8019f1c:	6800      	ldr	r0, [r0, #0]
 8019f1e:	f380 8808 	msr	MSP, r0
 8019f22:	f04f 0000 	mov.w	r0, #0
 8019f26:	f380 8814 	msr	CONTROL, r0
 8019f2a:	b662      	cpsie	i
 8019f2c:	b661      	cpsie	f
 8019f2e:	f3bf 8f4f 	dsb	sy
 8019f32:	f3bf 8f6f 	isb	sy
 8019f36:	df00      	svc	0
 8019f38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8019f3a:	bf00      	nop
 8019f3c:	e000ed08 	.word	0xe000ed08

08019f40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019f40:	b580      	push	{r7, lr}
 8019f42:	b086      	sub	sp, #24
 8019f44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019f46:	4b46      	ldr	r3, [pc, #280]	; (801a060 <xPortStartScheduler+0x120>)
 8019f48:	681b      	ldr	r3, [r3, #0]
 8019f4a:	4a46      	ldr	r2, [pc, #280]	; (801a064 <xPortStartScheduler+0x124>)
 8019f4c:	4293      	cmp	r3, r2
 8019f4e:	d10a      	bne.n	8019f66 <xPortStartScheduler+0x26>
	__asm volatile
 8019f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f54:	f383 8811 	msr	BASEPRI, r3
 8019f58:	f3bf 8f6f 	isb	sy
 8019f5c:	f3bf 8f4f 	dsb	sy
 8019f60:	613b      	str	r3, [r7, #16]
}
 8019f62:	bf00      	nop
 8019f64:	e7fe      	b.n	8019f64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019f66:	4b3e      	ldr	r3, [pc, #248]	; (801a060 <xPortStartScheduler+0x120>)
 8019f68:	681b      	ldr	r3, [r3, #0]
 8019f6a:	4a3f      	ldr	r2, [pc, #252]	; (801a068 <xPortStartScheduler+0x128>)
 8019f6c:	4293      	cmp	r3, r2
 8019f6e:	d10a      	bne.n	8019f86 <xPortStartScheduler+0x46>
	__asm volatile
 8019f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f74:	f383 8811 	msr	BASEPRI, r3
 8019f78:	f3bf 8f6f 	isb	sy
 8019f7c:	f3bf 8f4f 	dsb	sy
 8019f80:	60fb      	str	r3, [r7, #12]
}
 8019f82:	bf00      	nop
 8019f84:	e7fe      	b.n	8019f84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019f86:	4b39      	ldr	r3, [pc, #228]	; (801a06c <xPortStartScheduler+0x12c>)
 8019f88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8019f8a:	697b      	ldr	r3, [r7, #20]
 8019f8c:	781b      	ldrb	r3, [r3, #0]
 8019f8e:	b2db      	uxtb	r3, r3
 8019f90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019f92:	697b      	ldr	r3, [r7, #20]
 8019f94:	22ff      	movs	r2, #255	; 0xff
 8019f96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019f98:	697b      	ldr	r3, [r7, #20]
 8019f9a:	781b      	ldrb	r3, [r3, #0]
 8019f9c:	b2db      	uxtb	r3, r3
 8019f9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019fa0:	78fb      	ldrb	r3, [r7, #3]
 8019fa2:	b2db      	uxtb	r3, r3
 8019fa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019fa8:	b2da      	uxtb	r2, r3
 8019faa:	4b31      	ldr	r3, [pc, #196]	; (801a070 <xPortStartScheduler+0x130>)
 8019fac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8019fae:	4b31      	ldr	r3, [pc, #196]	; (801a074 <xPortStartScheduler+0x134>)
 8019fb0:	2207      	movs	r2, #7
 8019fb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019fb4:	e009      	b.n	8019fca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019fb6:	4b2f      	ldr	r3, [pc, #188]	; (801a074 <xPortStartScheduler+0x134>)
 8019fb8:	681b      	ldr	r3, [r3, #0]
 8019fba:	3b01      	subs	r3, #1
 8019fbc:	4a2d      	ldr	r2, [pc, #180]	; (801a074 <xPortStartScheduler+0x134>)
 8019fbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019fc0:	78fb      	ldrb	r3, [r7, #3]
 8019fc2:	b2db      	uxtb	r3, r3
 8019fc4:	005b      	lsls	r3, r3, #1
 8019fc6:	b2db      	uxtb	r3, r3
 8019fc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019fca:	78fb      	ldrb	r3, [r7, #3]
 8019fcc:	b2db      	uxtb	r3, r3
 8019fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019fd2:	2b80      	cmp	r3, #128	; 0x80
 8019fd4:	d0ef      	beq.n	8019fb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019fd6:	4b27      	ldr	r3, [pc, #156]	; (801a074 <xPortStartScheduler+0x134>)
 8019fd8:	681b      	ldr	r3, [r3, #0]
 8019fda:	f1c3 0307 	rsb	r3, r3, #7
 8019fde:	2b04      	cmp	r3, #4
 8019fe0:	d00a      	beq.n	8019ff8 <xPortStartScheduler+0xb8>
	__asm volatile
 8019fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019fe6:	f383 8811 	msr	BASEPRI, r3
 8019fea:	f3bf 8f6f 	isb	sy
 8019fee:	f3bf 8f4f 	dsb	sy
 8019ff2:	60bb      	str	r3, [r7, #8]
}
 8019ff4:	bf00      	nop
 8019ff6:	e7fe      	b.n	8019ff6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8019ff8:	4b1e      	ldr	r3, [pc, #120]	; (801a074 <xPortStartScheduler+0x134>)
 8019ffa:	681b      	ldr	r3, [r3, #0]
 8019ffc:	021b      	lsls	r3, r3, #8
 8019ffe:	4a1d      	ldr	r2, [pc, #116]	; (801a074 <xPortStartScheduler+0x134>)
 801a000:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801a002:	4b1c      	ldr	r3, [pc, #112]	; (801a074 <xPortStartScheduler+0x134>)
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801a00a:	4a1a      	ldr	r2, [pc, #104]	; (801a074 <xPortStartScheduler+0x134>)
 801a00c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	b2da      	uxtb	r2, r3
 801a012:	697b      	ldr	r3, [r7, #20]
 801a014:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801a016:	4b18      	ldr	r3, [pc, #96]	; (801a078 <xPortStartScheduler+0x138>)
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	4a17      	ldr	r2, [pc, #92]	; (801a078 <xPortStartScheduler+0x138>)
 801a01c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801a020:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801a022:	4b15      	ldr	r3, [pc, #84]	; (801a078 <xPortStartScheduler+0x138>)
 801a024:	681b      	ldr	r3, [r3, #0]
 801a026:	4a14      	ldr	r2, [pc, #80]	; (801a078 <xPortStartScheduler+0x138>)
 801a028:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801a02c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801a02e:	f000 f8dd 	bl	801a1ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801a032:	4b12      	ldr	r3, [pc, #72]	; (801a07c <xPortStartScheduler+0x13c>)
 801a034:	2200      	movs	r2, #0
 801a036:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801a038:	f000 f8fc 	bl	801a234 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801a03c:	4b10      	ldr	r3, [pc, #64]	; (801a080 <xPortStartScheduler+0x140>)
 801a03e:	681b      	ldr	r3, [r3, #0]
 801a040:	4a0f      	ldr	r2, [pc, #60]	; (801a080 <xPortStartScheduler+0x140>)
 801a042:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801a046:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801a048:	f7ff ff66 	bl	8019f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801a04c:	f7fe ff72 	bl	8018f34 <vTaskSwitchContext>
	prvTaskExitError();
 801a050:	f7ff ff22 	bl	8019e98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801a054:	2300      	movs	r3, #0
}
 801a056:	4618      	mov	r0, r3
 801a058:	3718      	adds	r7, #24
 801a05a:	46bd      	mov	sp, r7
 801a05c:	bd80      	pop	{r7, pc}
 801a05e:	bf00      	nop
 801a060:	e000ed00 	.word	0xe000ed00
 801a064:	410fc271 	.word	0x410fc271
 801a068:	410fc270 	.word	0x410fc270
 801a06c:	e000e400 	.word	0xe000e400
 801a070:	24002d44 	.word	0x24002d44
 801a074:	24002d48 	.word	0x24002d48
 801a078:	e000ed20 	.word	0xe000ed20
 801a07c:	240000d0 	.word	0x240000d0
 801a080:	e000ef34 	.word	0xe000ef34

0801a084 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801a084:	b480      	push	{r7}
 801a086:	b083      	sub	sp, #12
 801a088:	af00      	add	r7, sp, #0
	__asm volatile
 801a08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a08e:	f383 8811 	msr	BASEPRI, r3
 801a092:	f3bf 8f6f 	isb	sy
 801a096:	f3bf 8f4f 	dsb	sy
 801a09a:	607b      	str	r3, [r7, #4]
}
 801a09c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801a09e:	4b0f      	ldr	r3, [pc, #60]	; (801a0dc <vPortEnterCritical+0x58>)
 801a0a0:	681b      	ldr	r3, [r3, #0]
 801a0a2:	3301      	adds	r3, #1
 801a0a4:	4a0d      	ldr	r2, [pc, #52]	; (801a0dc <vPortEnterCritical+0x58>)
 801a0a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801a0a8:	4b0c      	ldr	r3, [pc, #48]	; (801a0dc <vPortEnterCritical+0x58>)
 801a0aa:	681b      	ldr	r3, [r3, #0]
 801a0ac:	2b01      	cmp	r3, #1
 801a0ae:	d10f      	bne.n	801a0d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801a0b0:	4b0b      	ldr	r3, [pc, #44]	; (801a0e0 <vPortEnterCritical+0x5c>)
 801a0b2:	681b      	ldr	r3, [r3, #0]
 801a0b4:	b2db      	uxtb	r3, r3
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	d00a      	beq.n	801a0d0 <vPortEnterCritical+0x4c>
	__asm volatile
 801a0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0be:	f383 8811 	msr	BASEPRI, r3
 801a0c2:	f3bf 8f6f 	isb	sy
 801a0c6:	f3bf 8f4f 	dsb	sy
 801a0ca:	603b      	str	r3, [r7, #0]
}
 801a0cc:	bf00      	nop
 801a0ce:	e7fe      	b.n	801a0ce <vPortEnterCritical+0x4a>
	}
}
 801a0d0:	bf00      	nop
 801a0d2:	370c      	adds	r7, #12
 801a0d4:	46bd      	mov	sp, r7
 801a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0da:	4770      	bx	lr
 801a0dc:	240000d0 	.word	0x240000d0
 801a0e0:	e000ed04 	.word	0xe000ed04

0801a0e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801a0e4:	b480      	push	{r7}
 801a0e6:	b083      	sub	sp, #12
 801a0e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801a0ea:	4b12      	ldr	r3, [pc, #72]	; (801a134 <vPortExitCritical+0x50>)
 801a0ec:	681b      	ldr	r3, [r3, #0]
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	d10a      	bne.n	801a108 <vPortExitCritical+0x24>
	__asm volatile
 801a0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0f6:	f383 8811 	msr	BASEPRI, r3
 801a0fa:	f3bf 8f6f 	isb	sy
 801a0fe:	f3bf 8f4f 	dsb	sy
 801a102:	607b      	str	r3, [r7, #4]
}
 801a104:	bf00      	nop
 801a106:	e7fe      	b.n	801a106 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801a108:	4b0a      	ldr	r3, [pc, #40]	; (801a134 <vPortExitCritical+0x50>)
 801a10a:	681b      	ldr	r3, [r3, #0]
 801a10c:	3b01      	subs	r3, #1
 801a10e:	4a09      	ldr	r2, [pc, #36]	; (801a134 <vPortExitCritical+0x50>)
 801a110:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801a112:	4b08      	ldr	r3, [pc, #32]	; (801a134 <vPortExitCritical+0x50>)
 801a114:	681b      	ldr	r3, [r3, #0]
 801a116:	2b00      	cmp	r3, #0
 801a118:	d105      	bne.n	801a126 <vPortExitCritical+0x42>
 801a11a:	2300      	movs	r3, #0
 801a11c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a11e:	683b      	ldr	r3, [r7, #0]
 801a120:	f383 8811 	msr	BASEPRI, r3
}
 801a124:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801a126:	bf00      	nop
 801a128:	370c      	adds	r7, #12
 801a12a:	46bd      	mov	sp, r7
 801a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a130:	4770      	bx	lr
 801a132:	bf00      	nop
 801a134:	240000d0 	.word	0x240000d0
	...

0801a140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801a140:	f3ef 8009 	mrs	r0, PSP
 801a144:	f3bf 8f6f 	isb	sy
 801a148:	4b15      	ldr	r3, [pc, #84]	; (801a1a0 <pxCurrentTCBConst>)
 801a14a:	681a      	ldr	r2, [r3, #0]
 801a14c:	f01e 0f10 	tst.w	lr, #16
 801a150:	bf08      	it	eq
 801a152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801a156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a15a:	6010      	str	r0, [r2, #0]
 801a15c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801a160:	f04f 0050 	mov.w	r0, #80	; 0x50
 801a164:	f380 8811 	msr	BASEPRI, r0
 801a168:	f3bf 8f4f 	dsb	sy
 801a16c:	f3bf 8f6f 	isb	sy
 801a170:	f7fe fee0 	bl	8018f34 <vTaskSwitchContext>
 801a174:	f04f 0000 	mov.w	r0, #0
 801a178:	f380 8811 	msr	BASEPRI, r0
 801a17c:	bc09      	pop	{r0, r3}
 801a17e:	6819      	ldr	r1, [r3, #0]
 801a180:	6808      	ldr	r0, [r1, #0]
 801a182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a186:	f01e 0f10 	tst.w	lr, #16
 801a18a:	bf08      	it	eq
 801a18c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801a190:	f380 8809 	msr	PSP, r0
 801a194:	f3bf 8f6f 	isb	sy
 801a198:	4770      	bx	lr
 801a19a:	bf00      	nop
 801a19c:	f3af 8000 	nop.w

0801a1a0 <pxCurrentTCBConst>:
 801a1a0:	24002718 	.word	0x24002718
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801a1a4:	bf00      	nop
 801a1a6:	bf00      	nop

0801a1a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801a1a8:	b580      	push	{r7, lr}
 801a1aa:	b082      	sub	sp, #8
 801a1ac:	af00      	add	r7, sp, #0
	__asm volatile
 801a1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1b2:	f383 8811 	msr	BASEPRI, r3
 801a1b6:	f3bf 8f6f 	isb	sy
 801a1ba:	f3bf 8f4f 	dsb	sy
 801a1be:	607b      	str	r3, [r7, #4]
}
 801a1c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801a1c2:	f7fe fdf5 	bl	8018db0 <xTaskIncrementTick>
 801a1c6:	4603      	mov	r3, r0
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	d003      	beq.n	801a1d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a1cc:	4b06      	ldr	r3, [pc, #24]	; (801a1e8 <xPortSysTickHandler+0x40>)
 801a1ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a1d2:	601a      	str	r2, [r3, #0]
 801a1d4:	2300      	movs	r3, #0
 801a1d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a1d8:	683b      	ldr	r3, [r7, #0]
 801a1da:	f383 8811 	msr	BASEPRI, r3
}
 801a1de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801a1e0:	bf00      	nop
 801a1e2:	3708      	adds	r7, #8
 801a1e4:	46bd      	mov	sp, r7
 801a1e6:	bd80      	pop	{r7, pc}
 801a1e8:	e000ed04 	.word	0xe000ed04

0801a1ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801a1ec:	b480      	push	{r7}
 801a1ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801a1f0:	4b0b      	ldr	r3, [pc, #44]	; (801a220 <vPortSetupTimerInterrupt+0x34>)
 801a1f2:	2200      	movs	r2, #0
 801a1f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801a1f6:	4b0b      	ldr	r3, [pc, #44]	; (801a224 <vPortSetupTimerInterrupt+0x38>)
 801a1f8:	2200      	movs	r2, #0
 801a1fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801a1fc:	4b0a      	ldr	r3, [pc, #40]	; (801a228 <vPortSetupTimerInterrupt+0x3c>)
 801a1fe:	681b      	ldr	r3, [r3, #0]
 801a200:	4a0a      	ldr	r2, [pc, #40]	; (801a22c <vPortSetupTimerInterrupt+0x40>)
 801a202:	fba2 2303 	umull	r2, r3, r2, r3
 801a206:	099b      	lsrs	r3, r3, #6
 801a208:	4a09      	ldr	r2, [pc, #36]	; (801a230 <vPortSetupTimerInterrupt+0x44>)
 801a20a:	3b01      	subs	r3, #1
 801a20c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801a20e:	4b04      	ldr	r3, [pc, #16]	; (801a220 <vPortSetupTimerInterrupt+0x34>)
 801a210:	2207      	movs	r2, #7
 801a212:	601a      	str	r2, [r3, #0]
}
 801a214:	bf00      	nop
 801a216:	46bd      	mov	sp, r7
 801a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a21c:	4770      	bx	lr
 801a21e:	bf00      	nop
 801a220:	e000e010 	.word	0xe000e010
 801a224:	e000e018 	.word	0xe000e018
 801a228:	240000c0 	.word	0x240000c0
 801a22c:	10624dd3 	.word	0x10624dd3
 801a230:	e000e014 	.word	0xe000e014

0801a234 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801a234:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801a244 <vPortEnableVFP+0x10>
 801a238:	6801      	ldr	r1, [r0, #0]
 801a23a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801a23e:	6001      	str	r1, [r0, #0]
 801a240:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801a242:	bf00      	nop
 801a244:	e000ed88 	.word	0xe000ed88

0801a248 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801a248:	b480      	push	{r7}
 801a24a:	b085      	sub	sp, #20
 801a24c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801a24e:	f3ef 8305 	mrs	r3, IPSR
 801a252:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801a254:	68fb      	ldr	r3, [r7, #12]
 801a256:	2b0f      	cmp	r3, #15
 801a258:	d914      	bls.n	801a284 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801a25a:	4a17      	ldr	r2, [pc, #92]	; (801a2b8 <vPortValidateInterruptPriority+0x70>)
 801a25c:	68fb      	ldr	r3, [r7, #12]
 801a25e:	4413      	add	r3, r2
 801a260:	781b      	ldrb	r3, [r3, #0]
 801a262:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801a264:	4b15      	ldr	r3, [pc, #84]	; (801a2bc <vPortValidateInterruptPriority+0x74>)
 801a266:	781b      	ldrb	r3, [r3, #0]
 801a268:	7afa      	ldrb	r2, [r7, #11]
 801a26a:	429a      	cmp	r2, r3
 801a26c:	d20a      	bcs.n	801a284 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801a26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a272:	f383 8811 	msr	BASEPRI, r3
 801a276:	f3bf 8f6f 	isb	sy
 801a27a:	f3bf 8f4f 	dsb	sy
 801a27e:	607b      	str	r3, [r7, #4]
}
 801a280:	bf00      	nop
 801a282:	e7fe      	b.n	801a282 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801a284:	4b0e      	ldr	r3, [pc, #56]	; (801a2c0 <vPortValidateInterruptPriority+0x78>)
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801a28c:	4b0d      	ldr	r3, [pc, #52]	; (801a2c4 <vPortValidateInterruptPriority+0x7c>)
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	429a      	cmp	r2, r3
 801a292:	d90a      	bls.n	801a2aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801a294:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a298:	f383 8811 	msr	BASEPRI, r3
 801a29c:	f3bf 8f6f 	isb	sy
 801a2a0:	f3bf 8f4f 	dsb	sy
 801a2a4:	603b      	str	r3, [r7, #0]
}
 801a2a6:	bf00      	nop
 801a2a8:	e7fe      	b.n	801a2a8 <vPortValidateInterruptPriority+0x60>
	}
 801a2aa:	bf00      	nop
 801a2ac:	3714      	adds	r7, #20
 801a2ae:	46bd      	mov	sp, r7
 801a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2b4:	4770      	bx	lr
 801a2b6:	bf00      	nop
 801a2b8:	e000e3f0 	.word	0xe000e3f0
 801a2bc:	24002d44 	.word	0x24002d44
 801a2c0:	e000ed0c 	.word	0xe000ed0c
 801a2c4:	24002d48 	.word	0x24002d48

0801a2c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801a2c8:	b580      	push	{r7, lr}
 801a2ca:	b08a      	sub	sp, #40	; 0x28
 801a2cc:	af00      	add	r7, sp, #0
 801a2ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801a2d0:	2300      	movs	r3, #0
 801a2d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801a2d4:	f7fe fcb0 	bl	8018c38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801a2d8:	4b5b      	ldr	r3, [pc, #364]	; (801a448 <pvPortMalloc+0x180>)
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	2b00      	cmp	r3, #0
 801a2de:	d101      	bne.n	801a2e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801a2e0:	f000 f920 	bl	801a524 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a2e4:	4b59      	ldr	r3, [pc, #356]	; (801a44c <pvPortMalloc+0x184>)
 801a2e6:	681a      	ldr	r2, [r3, #0]
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	4013      	ands	r3, r2
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	f040 8093 	bne.w	801a418 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	2b00      	cmp	r3, #0
 801a2f6:	d01d      	beq.n	801a334 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801a2f8:	2208      	movs	r2, #8
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	4413      	add	r3, r2
 801a2fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	f003 0307 	and.w	r3, r3, #7
 801a306:	2b00      	cmp	r3, #0
 801a308:	d014      	beq.n	801a334 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	f023 0307 	bic.w	r3, r3, #7
 801a310:	3308      	adds	r3, #8
 801a312:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	f003 0307 	and.w	r3, r3, #7
 801a31a:	2b00      	cmp	r3, #0
 801a31c:	d00a      	beq.n	801a334 <pvPortMalloc+0x6c>
	__asm volatile
 801a31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a322:	f383 8811 	msr	BASEPRI, r3
 801a326:	f3bf 8f6f 	isb	sy
 801a32a:	f3bf 8f4f 	dsb	sy
 801a32e:	617b      	str	r3, [r7, #20]
}
 801a330:	bf00      	nop
 801a332:	e7fe      	b.n	801a332 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	2b00      	cmp	r3, #0
 801a338:	d06e      	beq.n	801a418 <pvPortMalloc+0x150>
 801a33a:	4b45      	ldr	r3, [pc, #276]	; (801a450 <pvPortMalloc+0x188>)
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	687a      	ldr	r2, [r7, #4]
 801a340:	429a      	cmp	r2, r3
 801a342:	d869      	bhi.n	801a418 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801a344:	4b43      	ldr	r3, [pc, #268]	; (801a454 <pvPortMalloc+0x18c>)
 801a346:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801a348:	4b42      	ldr	r3, [pc, #264]	; (801a454 <pvPortMalloc+0x18c>)
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a34e:	e004      	b.n	801a35a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a352:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801a354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a356:	681b      	ldr	r3, [r3, #0]
 801a358:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a35c:	685b      	ldr	r3, [r3, #4]
 801a35e:	687a      	ldr	r2, [r7, #4]
 801a360:	429a      	cmp	r2, r3
 801a362:	d903      	bls.n	801a36c <pvPortMalloc+0xa4>
 801a364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a366:	681b      	ldr	r3, [r3, #0]
 801a368:	2b00      	cmp	r3, #0
 801a36a:	d1f1      	bne.n	801a350 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801a36c:	4b36      	ldr	r3, [pc, #216]	; (801a448 <pvPortMalloc+0x180>)
 801a36e:	681b      	ldr	r3, [r3, #0]
 801a370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a372:	429a      	cmp	r2, r3
 801a374:	d050      	beq.n	801a418 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801a376:	6a3b      	ldr	r3, [r7, #32]
 801a378:	681b      	ldr	r3, [r3, #0]
 801a37a:	2208      	movs	r2, #8
 801a37c:	4413      	add	r3, r2
 801a37e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801a380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a382:	681a      	ldr	r2, [r3, #0]
 801a384:	6a3b      	ldr	r3, [r7, #32]
 801a386:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801a388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a38a:	685a      	ldr	r2, [r3, #4]
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	1ad2      	subs	r2, r2, r3
 801a390:	2308      	movs	r3, #8
 801a392:	005b      	lsls	r3, r3, #1
 801a394:	429a      	cmp	r2, r3
 801a396:	d91f      	bls.n	801a3d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801a398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	4413      	add	r3, r2
 801a39e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a3a0:	69bb      	ldr	r3, [r7, #24]
 801a3a2:	f003 0307 	and.w	r3, r3, #7
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	d00a      	beq.n	801a3c0 <pvPortMalloc+0xf8>
	__asm volatile
 801a3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3ae:	f383 8811 	msr	BASEPRI, r3
 801a3b2:	f3bf 8f6f 	isb	sy
 801a3b6:	f3bf 8f4f 	dsb	sy
 801a3ba:	613b      	str	r3, [r7, #16]
}
 801a3bc:	bf00      	nop
 801a3be:	e7fe      	b.n	801a3be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3c2:	685a      	ldr	r2, [r3, #4]
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	1ad2      	subs	r2, r2, r3
 801a3c8:	69bb      	ldr	r3, [r7, #24]
 801a3ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3ce:	687a      	ldr	r2, [r7, #4]
 801a3d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a3d2:	69b8      	ldr	r0, [r7, #24]
 801a3d4:	f000 f908 	bl	801a5e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a3d8:	4b1d      	ldr	r3, [pc, #116]	; (801a450 <pvPortMalloc+0x188>)
 801a3da:	681a      	ldr	r2, [r3, #0]
 801a3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3de:	685b      	ldr	r3, [r3, #4]
 801a3e0:	1ad3      	subs	r3, r2, r3
 801a3e2:	4a1b      	ldr	r2, [pc, #108]	; (801a450 <pvPortMalloc+0x188>)
 801a3e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a3e6:	4b1a      	ldr	r3, [pc, #104]	; (801a450 <pvPortMalloc+0x188>)
 801a3e8:	681a      	ldr	r2, [r3, #0]
 801a3ea:	4b1b      	ldr	r3, [pc, #108]	; (801a458 <pvPortMalloc+0x190>)
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	429a      	cmp	r2, r3
 801a3f0:	d203      	bcs.n	801a3fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801a3f2:	4b17      	ldr	r3, [pc, #92]	; (801a450 <pvPortMalloc+0x188>)
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	4a18      	ldr	r2, [pc, #96]	; (801a458 <pvPortMalloc+0x190>)
 801a3f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801a3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3fc:	685a      	ldr	r2, [r3, #4]
 801a3fe:	4b13      	ldr	r3, [pc, #76]	; (801a44c <pvPortMalloc+0x184>)
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	431a      	orrs	r2, r3
 801a404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a406:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801a408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a40a:	2200      	movs	r2, #0
 801a40c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801a40e:	4b13      	ldr	r3, [pc, #76]	; (801a45c <pvPortMalloc+0x194>)
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	3301      	adds	r3, #1
 801a414:	4a11      	ldr	r2, [pc, #68]	; (801a45c <pvPortMalloc+0x194>)
 801a416:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801a418:	f7fe fc1c 	bl	8018c54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a41c:	69fb      	ldr	r3, [r7, #28]
 801a41e:	f003 0307 	and.w	r3, r3, #7
 801a422:	2b00      	cmp	r3, #0
 801a424:	d00a      	beq.n	801a43c <pvPortMalloc+0x174>
	__asm volatile
 801a426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a42a:	f383 8811 	msr	BASEPRI, r3
 801a42e:	f3bf 8f6f 	isb	sy
 801a432:	f3bf 8f4f 	dsb	sy
 801a436:	60fb      	str	r3, [r7, #12]
}
 801a438:	bf00      	nop
 801a43a:	e7fe      	b.n	801a43a <pvPortMalloc+0x172>
	return pvReturn;
 801a43c:	69fb      	ldr	r3, [r7, #28]
}
 801a43e:	4618      	mov	r0, r3
 801a440:	3728      	adds	r7, #40	; 0x28
 801a442:	46bd      	mov	sp, r7
 801a444:	bd80      	pop	{r7, pc}
 801a446:	bf00      	nop
 801a448:	24006954 	.word	0x24006954
 801a44c:	24006968 	.word	0x24006968
 801a450:	24006958 	.word	0x24006958
 801a454:	2400694c 	.word	0x2400694c
 801a458:	2400695c 	.word	0x2400695c
 801a45c:	24006960 	.word	0x24006960

0801a460 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801a460:	b580      	push	{r7, lr}
 801a462:	b086      	sub	sp, #24
 801a464:	af00      	add	r7, sp, #0
 801a466:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	2b00      	cmp	r3, #0
 801a470:	d04d      	beq.n	801a50e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801a472:	2308      	movs	r3, #8
 801a474:	425b      	negs	r3, r3
 801a476:	697a      	ldr	r2, [r7, #20]
 801a478:	4413      	add	r3, r2
 801a47a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801a47c:	697b      	ldr	r3, [r7, #20]
 801a47e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a480:	693b      	ldr	r3, [r7, #16]
 801a482:	685a      	ldr	r2, [r3, #4]
 801a484:	4b24      	ldr	r3, [pc, #144]	; (801a518 <vPortFree+0xb8>)
 801a486:	681b      	ldr	r3, [r3, #0]
 801a488:	4013      	ands	r3, r2
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d10a      	bne.n	801a4a4 <vPortFree+0x44>
	__asm volatile
 801a48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a492:	f383 8811 	msr	BASEPRI, r3
 801a496:	f3bf 8f6f 	isb	sy
 801a49a:	f3bf 8f4f 	dsb	sy
 801a49e:	60fb      	str	r3, [r7, #12]
}
 801a4a0:	bf00      	nop
 801a4a2:	e7fe      	b.n	801a4a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a4a4:	693b      	ldr	r3, [r7, #16]
 801a4a6:	681b      	ldr	r3, [r3, #0]
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	d00a      	beq.n	801a4c2 <vPortFree+0x62>
	__asm volatile
 801a4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4b0:	f383 8811 	msr	BASEPRI, r3
 801a4b4:	f3bf 8f6f 	isb	sy
 801a4b8:	f3bf 8f4f 	dsb	sy
 801a4bc:	60bb      	str	r3, [r7, #8]
}
 801a4be:	bf00      	nop
 801a4c0:	e7fe      	b.n	801a4c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801a4c2:	693b      	ldr	r3, [r7, #16]
 801a4c4:	685a      	ldr	r2, [r3, #4]
 801a4c6:	4b14      	ldr	r3, [pc, #80]	; (801a518 <vPortFree+0xb8>)
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	4013      	ands	r3, r2
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	d01e      	beq.n	801a50e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801a4d0:	693b      	ldr	r3, [r7, #16]
 801a4d2:	681b      	ldr	r3, [r3, #0]
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d11a      	bne.n	801a50e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a4d8:	693b      	ldr	r3, [r7, #16]
 801a4da:	685a      	ldr	r2, [r3, #4]
 801a4dc:	4b0e      	ldr	r3, [pc, #56]	; (801a518 <vPortFree+0xb8>)
 801a4de:	681b      	ldr	r3, [r3, #0]
 801a4e0:	43db      	mvns	r3, r3
 801a4e2:	401a      	ands	r2, r3
 801a4e4:	693b      	ldr	r3, [r7, #16]
 801a4e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801a4e8:	f7fe fba6 	bl	8018c38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a4ec:	693b      	ldr	r3, [r7, #16]
 801a4ee:	685a      	ldr	r2, [r3, #4]
 801a4f0:	4b0a      	ldr	r3, [pc, #40]	; (801a51c <vPortFree+0xbc>)
 801a4f2:	681b      	ldr	r3, [r3, #0]
 801a4f4:	4413      	add	r3, r2
 801a4f6:	4a09      	ldr	r2, [pc, #36]	; (801a51c <vPortFree+0xbc>)
 801a4f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a4fa:	6938      	ldr	r0, [r7, #16]
 801a4fc:	f000 f874 	bl	801a5e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801a500:	4b07      	ldr	r3, [pc, #28]	; (801a520 <vPortFree+0xc0>)
 801a502:	681b      	ldr	r3, [r3, #0]
 801a504:	3301      	adds	r3, #1
 801a506:	4a06      	ldr	r2, [pc, #24]	; (801a520 <vPortFree+0xc0>)
 801a508:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801a50a:	f7fe fba3 	bl	8018c54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801a50e:	bf00      	nop
 801a510:	3718      	adds	r7, #24
 801a512:	46bd      	mov	sp, r7
 801a514:	bd80      	pop	{r7, pc}
 801a516:	bf00      	nop
 801a518:	24006968 	.word	0x24006968
 801a51c:	24006958 	.word	0x24006958
 801a520:	24006964 	.word	0x24006964

0801a524 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801a524:	b480      	push	{r7}
 801a526:	b085      	sub	sp, #20
 801a528:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a52a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801a52e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a530:	4b27      	ldr	r3, [pc, #156]	; (801a5d0 <prvHeapInit+0xac>)
 801a532:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a534:	68fb      	ldr	r3, [r7, #12]
 801a536:	f003 0307 	and.w	r3, r3, #7
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	d00c      	beq.n	801a558 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a53e:	68fb      	ldr	r3, [r7, #12]
 801a540:	3307      	adds	r3, #7
 801a542:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a544:	68fb      	ldr	r3, [r7, #12]
 801a546:	f023 0307 	bic.w	r3, r3, #7
 801a54a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a54c:	68ba      	ldr	r2, [r7, #8]
 801a54e:	68fb      	ldr	r3, [r7, #12]
 801a550:	1ad3      	subs	r3, r2, r3
 801a552:	4a1f      	ldr	r2, [pc, #124]	; (801a5d0 <prvHeapInit+0xac>)
 801a554:	4413      	add	r3, r2
 801a556:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801a558:	68fb      	ldr	r3, [r7, #12]
 801a55a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a55c:	4a1d      	ldr	r2, [pc, #116]	; (801a5d4 <prvHeapInit+0xb0>)
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a562:	4b1c      	ldr	r3, [pc, #112]	; (801a5d4 <prvHeapInit+0xb0>)
 801a564:	2200      	movs	r2, #0
 801a566:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	68ba      	ldr	r2, [r7, #8]
 801a56c:	4413      	add	r3, r2
 801a56e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801a570:	2208      	movs	r2, #8
 801a572:	68fb      	ldr	r3, [r7, #12]
 801a574:	1a9b      	subs	r3, r3, r2
 801a576:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a578:	68fb      	ldr	r3, [r7, #12]
 801a57a:	f023 0307 	bic.w	r3, r3, #7
 801a57e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801a580:	68fb      	ldr	r3, [r7, #12]
 801a582:	4a15      	ldr	r2, [pc, #84]	; (801a5d8 <prvHeapInit+0xb4>)
 801a584:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801a586:	4b14      	ldr	r3, [pc, #80]	; (801a5d8 <prvHeapInit+0xb4>)
 801a588:	681b      	ldr	r3, [r3, #0]
 801a58a:	2200      	movs	r2, #0
 801a58c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a58e:	4b12      	ldr	r3, [pc, #72]	; (801a5d8 <prvHeapInit+0xb4>)
 801a590:	681b      	ldr	r3, [r3, #0]
 801a592:	2200      	movs	r2, #0
 801a594:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a59a:	683b      	ldr	r3, [r7, #0]
 801a59c:	68fa      	ldr	r2, [r7, #12]
 801a59e:	1ad2      	subs	r2, r2, r3
 801a5a0:	683b      	ldr	r3, [r7, #0]
 801a5a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a5a4:	4b0c      	ldr	r3, [pc, #48]	; (801a5d8 <prvHeapInit+0xb4>)
 801a5a6:	681a      	ldr	r2, [r3, #0]
 801a5a8:	683b      	ldr	r3, [r7, #0]
 801a5aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a5ac:	683b      	ldr	r3, [r7, #0]
 801a5ae:	685b      	ldr	r3, [r3, #4]
 801a5b0:	4a0a      	ldr	r2, [pc, #40]	; (801a5dc <prvHeapInit+0xb8>)
 801a5b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a5b4:	683b      	ldr	r3, [r7, #0]
 801a5b6:	685b      	ldr	r3, [r3, #4]
 801a5b8:	4a09      	ldr	r2, [pc, #36]	; (801a5e0 <prvHeapInit+0xbc>)
 801a5ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a5bc:	4b09      	ldr	r3, [pc, #36]	; (801a5e4 <prvHeapInit+0xc0>)
 801a5be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801a5c2:	601a      	str	r2, [r3, #0]
}
 801a5c4:	bf00      	nop
 801a5c6:	3714      	adds	r7, #20
 801a5c8:	46bd      	mov	sp, r7
 801a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5ce:	4770      	bx	lr
 801a5d0:	24002d4c 	.word	0x24002d4c
 801a5d4:	2400694c 	.word	0x2400694c
 801a5d8:	24006954 	.word	0x24006954
 801a5dc:	2400695c 	.word	0x2400695c
 801a5e0:	24006958 	.word	0x24006958
 801a5e4:	24006968 	.word	0x24006968

0801a5e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801a5e8:	b480      	push	{r7}
 801a5ea:	b085      	sub	sp, #20
 801a5ec:	af00      	add	r7, sp, #0
 801a5ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a5f0:	4b28      	ldr	r3, [pc, #160]	; (801a694 <prvInsertBlockIntoFreeList+0xac>)
 801a5f2:	60fb      	str	r3, [r7, #12]
 801a5f4:	e002      	b.n	801a5fc <prvInsertBlockIntoFreeList+0x14>
 801a5f6:	68fb      	ldr	r3, [r7, #12]
 801a5f8:	681b      	ldr	r3, [r3, #0]
 801a5fa:	60fb      	str	r3, [r7, #12]
 801a5fc:	68fb      	ldr	r3, [r7, #12]
 801a5fe:	681b      	ldr	r3, [r3, #0]
 801a600:	687a      	ldr	r2, [r7, #4]
 801a602:	429a      	cmp	r2, r3
 801a604:	d8f7      	bhi.n	801a5f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801a606:	68fb      	ldr	r3, [r7, #12]
 801a608:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a60a:	68fb      	ldr	r3, [r7, #12]
 801a60c:	685b      	ldr	r3, [r3, #4]
 801a60e:	68ba      	ldr	r2, [r7, #8]
 801a610:	4413      	add	r3, r2
 801a612:	687a      	ldr	r2, [r7, #4]
 801a614:	429a      	cmp	r2, r3
 801a616:	d108      	bne.n	801a62a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a618:	68fb      	ldr	r3, [r7, #12]
 801a61a:	685a      	ldr	r2, [r3, #4]
 801a61c:	687b      	ldr	r3, [r7, #4]
 801a61e:	685b      	ldr	r3, [r3, #4]
 801a620:	441a      	add	r2, r3
 801a622:	68fb      	ldr	r3, [r7, #12]
 801a624:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801a626:	68fb      	ldr	r3, [r7, #12]
 801a628:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801a62a:	687b      	ldr	r3, [r7, #4]
 801a62c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	685b      	ldr	r3, [r3, #4]
 801a632:	68ba      	ldr	r2, [r7, #8]
 801a634:	441a      	add	r2, r3
 801a636:	68fb      	ldr	r3, [r7, #12]
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	429a      	cmp	r2, r3
 801a63c:	d118      	bne.n	801a670 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a63e:	68fb      	ldr	r3, [r7, #12]
 801a640:	681a      	ldr	r2, [r3, #0]
 801a642:	4b15      	ldr	r3, [pc, #84]	; (801a698 <prvInsertBlockIntoFreeList+0xb0>)
 801a644:	681b      	ldr	r3, [r3, #0]
 801a646:	429a      	cmp	r2, r3
 801a648:	d00d      	beq.n	801a666 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a64a:	687b      	ldr	r3, [r7, #4]
 801a64c:	685a      	ldr	r2, [r3, #4]
 801a64e:	68fb      	ldr	r3, [r7, #12]
 801a650:	681b      	ldr	r3, [r3, #0]
 801a652:	685b      	ldr	r3, [r3, #4]
 801a654:	441a      	add	r2, r3
 801a656:	687b      	ldr	r3, [r7, #4]
 801a658:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a65a:	68fb      	ldr	r3, [r7, #12]
 801a65c:	681b      	ldr	r3, [r3, #0]
 801a65e:	681a      	ldr	r2, [r3, #0]
 801a660:	687b      	ldr	r3, [r7, #4]
 801a662:	601a      	str	r2, [r3, #0]
 801a664:	e008      	b.n	801a678 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a666:	4b0c      	ldr	r3, [pc, #48]	; (801a698 <prvInsertBlockIntoFreeList+0xb0>)
 801a668:	681a      	ldr	r2, [r3, #0]
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	601a      	str	r2, [r3, #0]
 801a66e:	e003      	b.n	801a678 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a670:	68fb      	ldr	r3, [r7, #12]
 801a672:	681a      	ldr	r2, [r3, #0]
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a678:	68fa      	ldr	r2, [r7, #12]
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	429a      	cmp	r2, r3
 801a67e:	d002      	beq.n	801a686 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a680:	68fb      	ldr	r3, [r7, #12]
 801a682:	687a      	ldr	r2, [r7, #4]
 801a684:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a686:	bf00      	nop
 801a688:	3714      	adds	r7, #20
 801a68a:	46bd      	mov	sp, r7
 801a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a690:	4770      	bx	lr
 801a692:	bf00      	nop
 801a694:	2400694c 	.word	0x2400694c
 801a698:	24006954 	.word	0x24006954

0801a69c <__errno>:
 801a69c:	4b01      	ldr	r3, [pc, #4]	; (801a6a4 <__errno+0x8>)
 801a69e:	6818      	ldr	r0, [r3, #0]
 801a6a0:	4770      	bx	lr
 801a6a2:	bf00      	nop
 801a6a4:	240000d4 	.word	0x240000d4

0801a6a8 <__libc_init_array>:
 801a6a8:	b570      	push	{r4, r5, r6, lr}
 801a6aa:	4d0d      	ldr	r5, [pc, #52]	; (801a6e0 <__libc_init_array+0x38>)
 801a6ac:	4c0d      	ldr	r4, [pc, #52]	; (801a6e4 <__libc_init_array+0x3c>)
 801a6ae:	1b64      	subs	r4, r4, r5
 801a6b0:	10a4      	asrs	r4, r4, #2
 801a6b2:	2600      	movs	r6, #0
 801a6b4:	42a6      	cmp	r6, r4
 801a6b6:	d109      	bne.n	801a6cc <__libc_init_array+0x24>
 801a6b8:	4d0b      	ldr	r5, [pc, #44]	; (801a6e8 <__libc_init_array+0x40>)
 801a6ba:	4c0c      	ldr	r4, [pc, #48]	; (801a6ec <__libc_init_array+0x44>)
 801a6bc:	f000 fd2c 	bl	801b118 <_init>
 801a6c0:	1b64      	subs	r4, r4, r5
 801a6c2:	10a4      	asrs	r4, r4, #2
 801a6c4:	2600      	movs	r6, #0
 801a6c6:	42a6      	cmp	r6, r4
 801a6c8:	d105      	bne.n	801a6d6 <__libc_init_array+0x2e>
 801a6ca:	bd70      	pop	{r4, r5, r6, pc}
 801a6cc:	f855 3b04 	ldr.w	r3, [r5], #4
 801a6d0:	4798      	blx	r3
 801a6d2:	3601      	adds	r6, #1
 801a6d4:	e7ee      	b.n	801a6b4 <__libc_init_array+0xc>
 801a6d6:	f855 3b04 	ldr.w	r3, [r5], #4
 801a6da:	4798      	blx	r3
 801a6dc:	3601      	adds	r6, #1
 801a6de:	e7f2      	b.n	801a6c6 <__libc_init_array+0x1e>
 801a6e0:	0801b5d0 	.word	0x0801b5d0
 801a6e4:	0801b5d0 	.word	0x0801b5d0
 801a6e8:	0801b5d0 	.word	0x0801b5d0
 801a6ec:	0801b5d4 	.word	0x0801b5d4

0801a6f0 <memcpy>:
 801a6f0:	440a      	add	r2, r1
 801a6f2:	4291      	cmp	r1, r2
 801a6f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a6f8:	d100      	bne.n	801a6fc <memcpy+0xc>
 801a6fa:	4770      	bx	lr
 801a6fc:	b510      	push	{r4, lr}
 801a6fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a702:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a706:	4291      	cmp	r1, r2
 801a708:	d1f9      	bne.n	801a6fe <memcpy+0xe>
 801a70a:	bd10      	pop	{r4, pc}

0801a70c <memset>:
 801a70c:	4402      	add	r2, r0
 801a70e:	4603      	mov	r3, r0
 801a710:	4293      	cmp	r3, r2
 801a712:	d100      	bne.n	801a716 <memset+0xa>
 801a714:	4770      	bx	lr
 801a716:	f803 1b01 	strb.w	r1, [r3], #1
 801a71a:	e7f9      	b.n	801a710 <memset+0x4>

0801a71c <_puts_r>:
 801a71c:	b570      	push	{r4, r5, r6, lr}
 801a71e:	460e      	mov	r6, r1
 801a720:	4605      	mov	r5, r0
 801a722:	b118      	cbz	r0, 801a72c <_puts_r+0x10>
 801a724:	6983      	ldr	r3, [r0, #24]
 801a726:	b90b      	cbnz	r3, 801a72c <_puts_r+0x10>
 801a728:	f000 fa48 	bl	801abbc <__sinit>
 801a72c:	69ab      	ldr	r3, [r5, #24]
 801a72e:	68ac      	ldr	r4, [r5, #8]
 801a730:	b913      	cbnz	r3, 801a738 <_puts_r+0x1c>
 801a732:	4628      	mov	r0, r5
 801a734:	f000 fa42 	bl	801abbc <__sinit>
 801a738:	4b2c      	ldr	r3, [pc, #176]	; (801a7ec <_puts_r+0xd0>)
 801a73a:	429c      	cmp	r4, r3
 801a73c:	d120      	bne.n	801a780 <_puts_r+0x64>
 801a73e:	686c      	ldr	r4, [r5, #4]
 801a740:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a742:	07db      	lsls	r3, r3, #31
 801a744:	d405      	bmi.n	801a752 <_puts_r+0x36>
 801a746:	89a3      	ldrh	r3, [r4, #12]
 801a748:	0598      	lsls	r0, r3, #22
 801a74a:	d402      	bmi.n	801a752 <_puts_r+0x36>
 801a74c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a74e:	f000 fad3 	bl	801acf8 <__retarget_lock_acquire_recursive>
 801a752:	89a3      	ldrh	r3, [r4, #12]
 801a754:	0719      	lsls	r1, r3, #28
 801a756:	d51d      	bpl.n	801a794 <_puts_r+0x78>
 801a758:	6923      	ldr	r3, [r4, #16]
 801a75a:	b1db      	cbz	r3, 801a794 <_puts_r+0x78>
 801a75c:	3e01      	subs	r6, #1
 801a75e:	68a3      	ldr	r3, [r4, #8]
 801a760:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a764:	3b01      	subs	r3, #1
 801a766:	60a3      	str	r3, [r4, #8]
 801a768:	bb39      	cbnz	r1, 801a7ba <_puts_r+0x9e>
 801a76a:	2b00      	cmp	r3, #0
 801a76c:	da38      	bge.n	801a7e0 <_puts_r+0xc4>
 801a76e:	4622      	mov	r2, r4
 801a770:	210a      	movs	r1, #10
 801a772:	4628      	mov	r0, r5
 801a774:	f000 f848 	bl	801a808 <__swbuf_r>
 801a778:	3001      	adds	r0, #1
 801a77a:	d011      	beq.n	801a7a0 <_puts_r+0x84>
 801a77c:	250a      	movs	r5, #10
 801a77e:	e011      	b.n	801a7a4 <_puts_r+0x88>
 801a780:	4b1b      	ldr	r3, [pc, #108]	; (801a7f0 <_puts_r+0xd4>)
 801a782:	429c      	cmp	r4, r3
 801a784:	d101      	bne.n	801a78a <_puts_r+0x6e>
 801a786:	68ac      	ldr	r4, [r5, #8]
 801a788:	e7da      	b.n	801a740 <_puts_r+0x24>
 801a78a:	4b1a      	ldr	r3, [pc, #104]	; (801a7f4 <_puts_r+0xd8>)
 801a78c:	429c      	cmp	r4, r3
 801a78e:	bf08      	it	eq
 801a790:	68ec      	ldreq	r4, [r5, #12]
 801a792:	e7d5      	b.n	801a740 <_puts_r+0x24>
 801a794:	4621      	mov	r1, r4
 801a796:	4628      	mov	r0, r5
 801a798:	f000 f888 	bl	801a8ac <__swsetup_r>
 801a79c:	2800      	cmp	r0, #0
 801a79e:	d0dd      	beq.n	801a75c <_puts_r+0x40>
 801a7a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801a7a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a7a6:	07da      	lsls	r2, r3, #31
 801a7a8:	d405      	bmi.n	801a7b6 <_puts_r+0x9a>
 801a7aa:	89a3      	ldrh	r3, [r4, #12]
 801a7ac:	059b      	lsls	r3, r3, #22
 801a7ae:	d402      	bmi.n	801a7b6 <_puts_r+0x9a>
 801a7b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a7b2:	f000 faa2 	bl	801acfa <__retarget_lock_release_recursive>
 801a7b6:	4628      	mov	r0, r5
 801a7b8:	bd70      	pop	{r4, r5, r6, pc}
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	da04      	bge.n	801a7c8 <_puts_r+0xac>
 801a7be:	69a2      	ldr	r2, [r4, #24]
 801a7c0:	429a      	cmp	r2, r3
 801a7c2:	dc06      	bgt.n	801a7d2 <_puts_r+0xb6>
 801a7c4:	290a      	cmp	r1, #10
 801a7c6:	d004      	beq.n	801a7d2 <_puts_r+0xb6>
 801a7c8:	6823      	ldr	r3, [r4, #0]
 801a7ca:	1c5a      	adds	r2, r3, #1
 801a7cc:	6022      	str	r2, [r4, #0]
 801a7ce:	7019      	strb	r1, [r3, #0]
 801a7d0:	e7c5      	b.n	801a75e <_puts_r+0x42>
 801a7d2:	4622      	mov	r2, r4
 801a7d4:	4628      	mov	r0, r5
 801a7d6:	f000 f817 	bl	801a808 <__swbuf_r>
 801a7da:	3001      	adds	r0, #1
 801a7dc:	d1bf      	bne.n	801a75e <_puts_r+0x42>
 801a7de:	e7df      	b.n	801a7a0 <_puts_r+0x84>
 801a7e0:	6823      	ldr	r3, [r4, #0]
 801a7e2:	250a      	movs	r5, #10
 801a7e4:	1c5a      	adds	r2, r3, #1
 801a7e6:	6022      	str	r2, [r4, #0]
 801a7e8:	701d      	strb	r5, [r3, #0]
 801a7ea:	e7db      	b.n	801a7a4 <_puts_r+0x88>
 801a7ec:	0801b588 	.word	0x0801b588
 801a7f0:	0801b5a8 	.word	0x0801b5a8
 801a7f4:	0801b568 	.word	0x0801b568

0801a7f8 <puts>:
 801a7f8:	4b02      	ldr	r3, [pc, #8]	; (801a804 <puts+0xc>)
 801a7fa:	4601      	mov	r1, r0
 801a7fc:	6818      	ldr	r0, [r3, #0]
 801a7fe:	f7ff bf8d 	b.w	801a71c <_puts_r>
 801a802:	bf00      	nop
 801a804:	240000d4 	.word	0x240000d4

0801a808 <__swbuf_r>:
 801a808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a80a:	460e      	mov	r6, r1
 801a80c:	4614      	mov	r4, r2
 801a80e:	4605      	mov	r5, r0
 801a810:	b118      	cbz	r0, 801a81a <__swbuf_r+0x12>
 801a812:	6983      	ldr	r3, [r0, #24]
 801a814:	b90b      	cbnz	r3, 801a81a <__swbuf_r+0x12>
 801a816:	f000 f9d1 	bl	801abbc <__sinit>
 801a81a:	4b21      	ldr	r3, [pc, #132]	; (801a8a0 <__swbuf_r+0x98>)
 801a81c:	429c      	cmp	r4, r3
 801a81e:	d12b      	bne.n	801a878 <__swbuf_r+0x70>
 801a820:	686c      	ldr	r4, [r5, #4]
 801a822:	69a3      	ldr	r3, [r4, #24]
 801a824:	60a3      	str	r3, [r4, #8]
 801a826:	89a3      	ldrh	r3, [r4, #12]
 801a828:	071a      	lsls	r2, r3, #28
 801a82a:	d52f      	bpl.n	801a88c <__swbuf_r+0x84>
 801a82c:	6923      	ldr	r3, [r4, #16]
 801a82e:	b36b      	cbz	r3, 801a88c <__swbuf_r+0x84>
 801a830:	6923      	ldr	r3, [r4, #16]
 801a832:	6820      	ldr	r0, [r4, #0]
 801a834:	1ac0      	subs	r0, r0, r3
 801a836:	6963      	ldr	r3, [r4, #20]
 801a838:	b2f6      	uxtb	r6, r6
 801a83a:	4283      	cmp	r3, r0
 801a83c:	4637      	mov	r7, r6
 801a83e:	dc04      	bgt.n	801a84a <__swbuf_r+0x42>
 801a840:	4621      	mov	r1, r4
 801a842:	4628      	mov	r0, r5
 801a844:	f000 f926 	bl	801aa94 <_fflush_r>
 801a848:	bb30      	cbnz	r0, 801a898 <__swbuf_r+0x90>
 801a84a:	68a3      	ldr	r3, [r4, #8]
 801a84c:	3b01      	subs	r3, #1
 801a84e:	60a3      	str	r3, [r4, #8]
 801a850:	6823      	ldr	r3, [r4, #0]
 801a852:	1c5a      	adds	r2, r3, #1
 801a854:	6022      	str	r2, [r4, #0]
 801a856:	701e      	strb	r6, [r3, #0]
 801a858:	6963      	ldr	r3, [r4, #20]
 801a85a:	3001      	adds	r0, #1
 801a85c:	4283      	cmp	r3, r0
 801a85e:	d004      	beq.n	801a86a <__swbuf_r+0x62>
 801a860:	89a3      	ldrh	r3, [r4, #12]
 801a862:	07db      	lsls	r3, r3, #31
 801a864:	d506      	bpl.n	801a874 <__swbuf_r+0x6c>
 801a866:	2e0a      	cmp	r6, #10
 801a868:	d104      	bne.n	801a874 <__swbuf_r+0x6c>
 801a86a:	4621      	mov	r1, r4
 801a86c:	4628      	mov	r0, r5
 801a86e:	f000 f911 	bl	801aa94 <_fflush_r>
 801a872:	b988      	cbnz	r0, 801a898 <__swbuf_r+0x90>
 801a874:	4638      	mov	r0, r7
 801a876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a878:	4b0a      	ldr	r3, [pc, #40]	; (801a8a4 <__swbuf_r+0x9c>)
 801a87a:	429c      	cmp	r4, r3
 801a87c:	d101      	bne.n	801a882 <__swbuf_r+0x7a>
 801a87e:	68ac      	ldr	r4, [r5, #8]
 801a880:	e7cf      	b.n	801a822 <__swbuf_r+0x1a>
 801a882:	4b09      	ldr	r3, [pc, #36]	; (801a8a8 <__swbuf_r+0xa0>)
 801a884:	429c      	cmp	r4, r3
 801a886:	bf08      	it	eq
 801a888:	68ec      	ldreq	r4, [r5, #12]
 801a88a:	e7ca      	b.n	801a822 <__swbuf_r+0x1a>
 801a88c:	4621      	mov	r1, r4
 801a88e:	4628      	mov	r0, r5
 801a890:	f000 f80c 	bl	801a8ac <__swsetup_r>
 801a894:	2800      	cmp	r0, #0
 801a896:	d0cb      	beq.n	801a830 <__swbuf_r+0x28>
 801a898:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a89c:	e7ea      	b.n	801a874 <__swbuf_r+0x6c>
 801a89e:	bf00      	nop
 801a8a0:	0801b588 	.word	0x0801b588
 801a8a4:	0801b5a8 	.word	0x0801b5a8
 801a8a8:	0801b568 	.word	0x0801b568

0801a8ac <__swsetup_r>:
 801a8ac:	4b32      	ldr	r3, [pc, #200]	; (801a978 <__swsetup_r+0xcc>)
 801a8ae:	b570      	push	{r4, r5, r6, lr}
 801a8b0:	681d      	ldr	r5, [r3, #0]
 801a8b2:	4606      	mov	r6, r0
 801a8b4:	460c      	mov	r4, r1
 801a8b6:	b125      	cbz	r5, 801a8c2 <__swsetup_r+0x16>
 801a8b8:	69ab      	ldr	r3, [r5, #24]
 801a8ba:	b913      	cbnz	r3, 801a8c2 <__swsetup_r+0x16>
 801a8bc:	4628      	mov	r0, r5
 801a8be:	f000 f97d 	bl	801abbc <__sinit>
 801a8c2:	4b2e      	ldr	r3, [pc, #184]	; (801a97c <__swsetup_r+0xd0>)
 801a8c4:	429c      	cmp	r4, r3
 801a8c6:	d10f      	bne.n	801a8e8 <__swsetup_r+0x3c>
 801a8c8:	686c      	ldr	r4, [r5, #4]
 801a8ca:	89a3      	ldrh	r3, [r4, #12]
 801a8cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a8d0:	0719      	lsls	r1, r3, #28
 801a8d2:	d42c      	bmi.n	801a92e <__swsetup_r+0x82>
 801a8d4:	06dd      	lsls	r5, r3, #27
 801a8d6:	d411      	bmi.n	801a8fc <__swsetup_r+0x50>
 801a8d8:	2309      	movs	r3, #9
 801a8da:	6033      	str	r3, [r6, #0]
 801a8dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a8e0:	81a3      	strh	r3, [r4, #12]
 801a8e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a8e6:	e03e      	b.n	801a966 <__swsetup_r+0xba>
 801a8e8:	4b25      	ldr	r3, [pc, #148]	; (801a980 <__swsetup_r+0xd4>)
 801a8ea:	429c      	cmp	r4, r3
 801a8ec:	d101      	bne.n	801a8f2 <__swsetup_r+0x46>
 801a8ee:	68ac      	ldr	r4, [r5, #8]
 801a8f0:	e7eb      	b.n	801a8ca <__swsetup_r+0x1e>
 801a8f2:	4b24      	ldr	r3, [pc, #144]	; (801a984 <__swsetup_r+0xd8>)
 801a8f4:	429c      	cmp	r4, r3
 801a8f6:	bf08      	it	eq
 801a8f8:	68ec      	ldreq	r4, [r5, #12]
 801a8fa:	e7e6      	b.n	801a8ca <__swsetup_r+0x1e>
 801a8fc:	0758      	lsls	r0, r3, #29
 801a8fe:	d512      	bpl.n	801a926 <__swsetup_r+0x7a>
 801a900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a902:	b141      	cbz	r1, 801a916 <__swsetup_r+0x6a>
 801a904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a908:	4299      	cmp	r1, r3
 801a90a:	d002      	beq.n	801a912 <__swsetup_r+0x66>
 801a90c:	4630      	mov	r0, r6
 801a90e:	f000 fa5b 	bl	801adc8 <_free_r>
 801a912:	2300      	movs	r3, #0
 801a914:	6363      	str	r3, [r4, #52]	; 0x34
 801a916:	89a3      	ldrh	r3, [r4, #12]
 801a918:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a91c:	81a3      	strh	r3, [r4, #12]
 801a91e:	2300      	movs	r3, #0
 801a920:	6063      	str	r3, [r4, #4]
 801a922:	6923      	ldr	r3, [r4, #16]
 801a924:	6023      	str	r3, [r4, #0]
 801a926:	89a3      	ldrh	r3, [r4, #12]
 801a928:	f043 0308 	orr.w	r3, r3, #8
 801a92c:	81a3      	strh	r3, [r4, #12]
 801a92e:	6923      	ldr	r3, [r4, #16]
 801a930:	b94b      	cbnz	r3, 801a946 <__swsetup_r+0x9a>
 801a932:	89a3      	ldrh	r3, [r4, #12]
 801a934:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a93c:	d003      	beq.n	801a946 <__swsetup_r+0x9a>
 801a93e:	4621      	mov	r1, r4
 801a940:	4630      	mov	r0, r6
 801a942:	f000 fa01 	bl	801ad48 <__smakebuf_r>
 801a946:	89a0      	ldrh	r0, [r4, #12]
 801a948:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a94c:	f010 0301 	ands.w	r3, r0, #1
 801a950:	d00a      	beq.n	801a968 <__swsetup_r+0xbc>
 801a952:	2300      	movs	r3, #0
 801a954:	60a3      	str	r3, [r4, #8]
 801a956:	6963      	ldr	r3, [r4, #20]
 801a958:	425b      	negs	r3, r3
 801a95a:	61a3      	str	r3, [r4, #24]
 801a95c:	6923      	ldr	r3, [r4, #16]
 801a95e:	b943      	cbnz	r3, 801a972 <__swsetup_r+0xc6>
 801a960:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a964:	d1ba      	bne.n	801a8dc <__swsetup_r+0x30>
 801a966:	bd70      	pop	{r4, r5, r6, pc}
 801a968:	0781      	lsls	r1, r0, #30
 801a96a:	bf58      	it	pl
 801a96c:	6963      	ldrpl	r3, [r4, #20]
 801a96e:	60a3      	str	r3, [r4, #8]
 801a970:	e7f4      	b.n	801a95c <__swsetup_r+0xb0>
 801a972:	2000      	movs	r0, #0
 801a974:	e7f7      	b.n	801a966 <__swsetup_r+0xba>
 801a976:	bf00      	nop
 801a978:	240000d4 	.word	0x240000d4
 801a97c:	0801b588 	.word	0x0801b588
 801a980:	0801b5a8 	.word	0x0801b5a8
 801a984:	0801b568 	.word	0x0801b568

0801a988 <__sflush_r>:
 801a988:	898a      	ldrh	r2, [r1, #12]
 801a98a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a98e:	4605      	mov	r5, r0
 801a990:	0710      	lsls	r0, r2, #28
 801a992:	460c      	mov	r4, r1
 801a994:	d458      	bmi.n	801aa48 <__sflush_r+0xc0>
 801a996:	684b      	ldr	r3, [r1, #4]
 801a998:	2b00      	cmp	r3, #0
 801a99a:	dc05      	bgt.n	801a9a8 <__sflush_r+0x20>
 801a99c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a99e:	2b00      	cmp	r3, #0
 801a9a0:	dc02      	bgt.n	801a9a8 <__sflush_r+0x20>
 801a9a2:	2000      	movs	r0, #0
 801a9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a9aa:	2e00      	cmp	r6, #0
 801a9ac:	d0f9      	beq.n	801a9a2 <__sflush_r+0x1a>
 801a9ae:	2300      	movs	r3, #0
 801a9b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a9b4:	682f      	ldr	r7, [r5, #0]
 801a9b6:	602b      	str	r3, [r5, #0]
 801a9b8:	d032      	beq.n	801aa20 <__sflush_r+0x98>
 801a9ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a9bc:	89a3      	ldrh	r3, [r4, #12]
 801a9be:	075a      	lsls	r2, r3, #29
 801a9c0:	d505      	bpl.n	801a9ce <__sflush_r+0x46>
 801a9c2:	6863      	ldr	r3, [r4, #4]
 801a9c4:	1ac0      	subs	r0, r0, r3
 801a9c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a9c8:	b10b      	cbz	r3, 801a9ce <__sflush_r+0x46>
 801a9ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a9cc:	1ac0      	subs	r0, r0, r3
 801a9ce:	2300      	movs	r3, #0
 801a9d0:	4602      	mov	r2, r0
 801a9d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a9d4:	6a21      	ldr	r1, [r4, #32]
 801a9d6:	4628      	mov	r0, r5
 801a9d8:	47b0      	blx	r6
 801a9da:	1c43      	adds	r3, r0, #1
 801a9dc:	89a3      	ldrh	r3, [r4, #12]
 801a9de:	d106      	bne.n	801a9ee <__sflush_r+0x66>
 801a9e0:	6829      	ldr	r1, [r5, #0]
 801a9e2:	291d      	cmp	r1, #29
 801a9e4:	d82c      	bhi.n	801aa40 <__sflush_r+0xb8>
 801a9e6:	4a2a      	ldr	r2, [pc, #168]	; (801aa90 <__sflush_r+0x108>)
 801a9e8:	40ca      	lsrs	r2, r1
 801a9ea:	07d6      	lsls	r6, r2, #31
 801a9ec:	d528      	bpl.n	801aa40 <__sflush_r+0xb8>
 801a9ee:	2200      	movs	r2, #0
 801a9f0:	6062      	str	r2, [r4, #4]
 801a9f2:	04d9      	lsls	r1, r3, #19
 801a9f4:	6922      	ldr	r2, [r4, #16]
 801a9f6:	6022      	str	r2, [r4, #0]
 801a9f8:	d504      	bpl.n	801aa04 <__sflush_r+0x7c>
 801a9fa:	1c42      	adds	r2, r0, #1
 801a9fc:	d101      	bne.n	801aa02 <__sflush_r+0x7a>
 801a9fe:	682b      	ldr	r3, [r5, #0]
 801aa00:	b903      	cbnz	r3, 801aa04 <__sflush_r+0x7c>
 801aa02:	6560      	str	r0, [r4, #84]	; 0x54
 801aa04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801aa06:	602f      	str	r7, [r5, #0]
 801aa08:	2900      	cmp	r1, #0
 801aa0a:	d0ca      	beq.n	801a9a2 <__sflush_r+0x1a>
 801aa0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801aa10:	4299      	cmp	r1, r3
 801aa12:	d002      	beq.n	801aa1a <__sflush_r+0x92>
 801aa14:	4628      	mov	r0, r5
 801aa16:	f000 f9d7 	bl	801adc8 <_free_r>
 801aa1a:	2000      	movs	r0, #0
 801aa1c:	6360      	str	r0, [r4, #52]	; 0x34
 801aa1e:	e7c1      	b.n	801a9a4 <__sflush_r+0x1c>
 801aa20:	6a21      	ldr	r1, [r4, #32]
 801aa22:	2301      	movs	r3, #1
 801aa24:	4628      	mov	r0, r5
 801aa26:	47b0      	blx	r6
 801aa28:	1c41      	adds	r1, r0, #1
 801aa2a:	d1c7      	bne.n	801a9bc <__sflush_r+0x34>
 801aa2c:	682b      	ldr	r3, [r5, #0]
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	d0c4      	beq.n	801a9bc <__sflush_r+0x34>
 801aa32:	2b1d      	cmp	r3, #29
 801aa34:	d001      	beq.n	801aa3a <__sflush_r+0xb2>
 801aa36:	2b16      	cmp	r3, #22
 801aa38:	d101      	bne.n	801aa3e <__sflush_r+0xb6>
 801aa3a:	602f      	str	r7, [r5, #0]
 801aa3c:	e7b1      	b.n	801a9a2 <__sflush_r+0x1a>
 801aa3e:	89a3      	ldrh	r3, [r4, #12]
 801aa40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aa44:	81a3      	strh	r3, [r4, #12]
 801aa46:	e7ad      	b.n	801a9a4 <__sflush_r+0x1c>
 801aa48:	690f      	ldr	r7, [r1, #16]
 801aa4a:	2f00      	cmp	r7, #0
 801aa4c:	d0a9      	beq.n	801a9a2 <__sflush_r+0x1a>
 801aa4e:	0793      	lsls	r3, r2, #30
 801aa50:	680e      	ldr	r6, [r1, #0]
 801aa52:	bf08      	it	eq
 801aa54:	694b      	ldreq	r3, [r1, #20]
 801aa56:	600f      	str	r7, [r1, #0]
 801aa58:	bf18      	it	ne
 801aa5a:	2300      	movne	r3, #0
 801aa5c:	eba6 0807 	sub.w	r8, r6, r7
 801aa60:	608b      	str	r3, [r1, #8]
 801aa62:	f1b8 0f00 	cmp.w	r8, #0
 801aa66:	dd9c      	ble.n	801a9a2 <__sflush_r+0x1a>
 801aa68:	6a21      	ldr	r1, [r4, #32]
 801aa6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801aa6c:	4643      	mov	r3, r8
 801aa6e:	463a      	mov	r2, r7
 801aa70:	4628      	mov	r0, r5
 801aa72:	47b0      	blx	r6
 801aa74:	2800      	cmp	r0, #0
 801aa76:	dc06      	bgt.n	801aa86 <__sflush_r+0xfe>
 801aa78:	89a3      	ldrh	r3, [r4, #12]
 801aa7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aa7e:	81a3      	strh	r3, [r4, #12]
 801aa80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aa84:	e78e      	b.n	801a9a4 <__sflush_r+0x1c>
 801aa86:	4407      	add	r7, r0
 801aa88:	eba8 0800 	sub.w	r8, r8, r0
 801aa8c:	e7e9      	b.n	801aa62 <__sflush_r+0xda>
 801aa8e:	bf00      	nop
 801aa90:	20400001 	.word	0x20400001

0801aa94 <_fflush_r>:
 801aa94:	b538      	push	{r3, r4, r5, lr}
 801aa96:	690b      	ldr	r3, [r1, #16]
 801aa98:	4605      	mov	r5, r0
 801aa9a:	460c      	mov	r4, r1
 801aa9c:	b913      	cbnz	r3, 801aaa4 <_fflush_r+0x10>
 801aa9e:	2500      	movs	r5, #0
 801aaa0:	4628      	mov	r0, r5
 801aaa2:	bd38      	pop	{r3, r4, r5, pc}
 801aaa4:	b118      	cbz	r0, 801aaae <_fflush_r+0x1a>
 801aaa6:	6983      	ldr	r3, [r0, #24]
 801aaa8:	b90b      	cbnz	r3, 801aaae <_fflush_r+0x1a>
 801aaaa:	f000 f887 	bl	801abbc <__sinit>
 801aaae:	4b14      	ldr	r3, [pc, #80]	; (801ab00 <_fflush_r+0x6c>)
 801aab0:	429c      	cmp	r4, r3
 801aab2:	d11b      	bne.n	801aaec <_fflush_r+0x58>
 801aab4:	686c      	ldr	r4, [r5, #4]
 801aab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	d0ef      	beq.n	801aa9e <_fflush_r+0xa>
 801aabe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801aac0:	07d0      	lsls	r0, r2, #31
 801aac2:	d404      	bmi.n	801aace <_fflush_r+0x3a>
 801aac4:	0599      	lsls	r1, r3, #22
 801aac6:	d402      	bmi.n	801aace <_fflush_r+0x3a>
 801aac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aaca:	f000 f915 	bl	801acf8 <__retarget_lock_acquire_recursive>
 801aace:	4628      	mov	r0, r5
 801aad0:	4621      	mov	r1, r4
 801aad2:	f7ff ff59 	bl	801a988 <__sflush_r>
 801aad6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801aad8:	07da      	lsls	r2, r3, #31
 801aada:	4605      	mov	r5, r0
 801aadc:	d4e0      	bmi.n	801aaa0 <_fflush_r+0xc>
 801aade:	89a3      	ldrh	r3, [r4, #12]
 801aae0:	059b      	lsls	r3, r3, #22
 801aae2:	d4dd      	bmi.n	801aaa0 <_fflush_r+0xc>
 801aae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aae6:	f000 f908 	bl	801acfa <__retarget_lock_release_recursive>
 801aaea:	e7d9      	b.n	801aaa0 <_fflush_r+0xc>
 801aaec:	4b05      	ldr	r3, [pc, #20]	; (801ab04 <_fflush_r+0x70>)
 801aaee:	429c      	cmp	r4, r3
 801aaf0:	d101      	bne.n	801aaf6 <_fflush_r+0x62>
 801aaf2:	68ac      	ldr	r4, [r5, #8]
 801aaf4:	e7df      	b.n	801aab6 <_fflush_r+0x22>
 801aaf6:	4b04      	ldr	r3, [pc, #16]	; (801ab08 <_fflush_r+0x74>)
 801aaf8:	429c      	cmp	r4, r3
 801aafa:	bf08      	it	eq
 801aafc:	68ec      	ldreq	r4, [r5, #12]
 801aafe:	e7da      	b.n	801aab6 <_fflush_r+0x22>
 801ab00:	0801b588 	.word	0x0801b588
 801ab04:	0801b5a8 	.word	0x0801b5a8
 801ab08:	0801b568 	.word	0x0801b568

0801ab0c <std>:
 801ab0c:	2300      	movs	r3, #0
 801ab0e:	b510      	push	{r4, lr}
 801ab10:	4604      	mov	r4, r0
 801ab12:	e9c0 3300 	strd	r3, r3, [r0]
 801ab16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ab1a:	6083      	str	r3, [r0, #8]
 801ab1c:	8181      	strh	r1, [r0, #12]
 801ab1e:	6643      	str	r3, [r0, #100]	; 0x64
 801ab20:	81c2      	strh	r2, [r0, #14]
 801ab22:	6183      	str	r3, [r0, #24]
 801ab24:	4619      	mov	r1, r3
 801ab26:	2208      	movs	r2, #8
 801ab28:	305c      	adds	r0, #92	; 0x5c
 801ab2a:	f7ff fdef 	bl	801a70c <memset>
 801ab2e:	4b05      	ldr	r3, [pc, #20]	; (801ab44 <std+0x38>)
 801ab30:	6263      	str	r3, [r4, #36]	; 0x24
 801ab32:	4b05      	ldr	r3, [pc, #20]	; (801ab48 <std+0x3c>)
 801ab34:	62a3      	str	r3, [r4, #40]	; 0x28
 801ab36:	4b05      	ldr	r3, [pc, #20]	; (801ab4c <std+0x40>)
 801ab38:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ab3a:	4b05      	ldr	r3, [pc, #20]	; (801ab50 <std+0x44>)
 801ab3c:	6224      	str	r4, [r4, #32]
 801ab3e:	6323      	str	r3, [r4, #48]	; 0x30
 801ab40:	bd10      	pop	{r4, pc}
 801ab42:	bf00      	nop
 801ab44:	0801afa9 	.word	0x0801afa9
 801ab48:	0801afcb 	.word	0x0801afcb
 801ab4c:	0801b003 	.word	0x0801b003
 801ab50:	0801b027 	.word	0x0801b027

0801ab54 <_cleanup_r>:
 801ab54:	4901      	ldr	r1, [pc, #4]	; (801ab5c <_cleanup_r+0x8>)
 801ab56:	f000 b8af 	b.w	801acb8 <_fwalk_reent>
 801ab5a:	bf00      	nop
 801ab5c:	0801aa95 	.word	0x0801aa95

0801ab60 <__sfmoreglue>:
 801ab60:	b570      	push	{r4, r5, r6, lr}
 801ab62:	2268      	movs	r2, #104	; 0x68
 801ab64:	1e4d      	subs	r5, r1, #1
 801ab66:	4355      	muls	r5, r2
 801ab68:	460e      	mov	r6, r1
 801ab6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ab6e:	f000 f997 	bl	801aea0 <_malloc_r>
 801ab72:	4604      	mov	r4, r0
 801ab74:	b140      	cbz	r0, 801ab88 <__sfmoreglue+0x28>
 801ab76:	2100      	movs	r1, #0
 801ab78:	e9c0 1600 	strd	r1, r6, [r0]
 801ab7c:	300c      	adds	r0, #12
 801ab7e:	60a0      	str	r0, [r4, #8]
 801ab80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ab84:	f7ff fdc2 	bl	801a70c <memset>
 801ab88:	4620      	mov	r0, r4
 801ab8a:	bd70      	pop	{r4, r5, r6, pc}

0801ab8c <__sfp_lock_acquire>:
 801ab8c:	4801      	ldr	r0, [pc, #4]	; (801ab94 <__sfp_lock_acquire+0x8>)
 801ab8e:	f000 b8b3 	b.w	801acf8 <__retarget_lock_acquire_recursive>
 801ab92:	bf00      	nop
 801ab94:	2400696d 	.word	0x2400696d

0801ab98 <__sfp_lock_release>:
 801ab98:	4801      	ldr	r0, [pc, #4]	; (801aba0 <__sfp_lock_release+0x8>)
 801ab9a:	f000 b8ae 	b.w	801acfa <__retarget_lock_release_recursive>
 801ab9e:	bf00      	nop
 801aba0:	2400696d 	.word	0x2400696d

0801aba4 <__sinit_lock_acquire>:
 801aba4:	4801      	ldr	r0, [pc, #4]	; (801abac <__sinit_lock_acquire+0x8>)
 801aba6:	f000 b8a7 	b.w	801acf8 <__retarget_lock_acquire_recursive>
 801abaa:	bf00      	nop
 801abac:	2400696e 	.word	0x2400696e

0801abb0 <__sinit_lock_release>:
 801abb0:	4801      	ldr	r0, [pc, #4]	; (801abb8 <__sinit_lock_release+0x8>)
 801abb2:	f000 b8a2 	b.w	801acfa <__retarget_lock_release_recursive>
 801abb6:	bf00      	nop
 801abb8:	2400696e 	.word	0x2400696e

0801abbc <__sinit>:
 801abbc:	b510      	push	{r4, lr}
 801abbe:	4604      	mov	r4, r0
 801abc0:	f7ff fff0 	bl	801aba4 <__sinit_lock_acquire>
 801abc4:	69a3      	ldr	r3, [r4, #24]
 801abc6:	b11b      	cbz	r3, 801abd0 <__sinit+0x14>
 801abc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801abcc:	f7ff bff0 	b.w	801abb0 <__sinit_lock_release>
 801abd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801abd4:	6523      	str	r3, [r4, #80]	; 0x50
 801abd6:	4b13      	ldr	r3, [pc, #76]	; (801ac24 <__sinit+0x68>)
 801abd8:	4a13      	ldr	r2, [pc, #76]	; (801ac28 <__sinit+0x6c>)
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	62a2      	str	r2, [r4, #40]	; 0x28
 801abde:	42a3      	cmp	r3, r4
 801abe0:	bf04      	itt	eq
 801abe2:	2301      	moveq	r3, #1
 801abe4:	61a3      	streq	r3, [r4, #24]
 801abe6:	4620      	mov	r0, r4
 801abe8:	f000 f820 	bl	801ac2c <__sfp>
 801abec:	6060      	str	r0, [r4, #4]
 801abee:	4620      	mov	r0, r4
 801abf0:	f000 f81c 	bl	801ac2c <__sfp>
 801abf4:	60a0      	str	r0, [r4, #8]
 801abf6:	4620      	mov	r0, r4
 801abf8:	f000 f818 	bl	801ac2c <__sfp>
 801abfc:	2200      	movs	r2, #0
 801abfe:	60e0      	str	r0, [r4, #12]
 801ac00:	2104      	movs	r1, #4
 801ac02:	6860      	ldr	r0, [r4, #4]
 801ac04:	f7ff ff82 	bl	801ab0c <std>
 801ac08:	68a0      	ldr	r0, [r4, #8]
 801ac0a:	2201      	movs	r2, #1
 801ac0c:	2109      	movs	r1, #9
 801ac0e:	f7ff ff7d 	bl	801ab0c <std>
 801ac12:	68e0      	ldr	r0, [r4, #12]
 801ac14:	2202      	movs	r2, #2
 801ac16:	2112      	movs	r1, #18
 801ac18:	f7ff ff78 	bl	801ab0c <std>
 801ac1c:	2301      	movs	r3, #1
 801ac1e:	61a3      	str	r3, [r4, #24]
 801ac20:	e7d2      	b.n	801abc8 <__sinit+0xc>
 801ac22:	bf00      	nop
 801ac24:	0801b564 	.word	0x0801b564
 801ac28:	0801ab55 	.word	0x0801ab55

0801ac2c <__sfp>:
 801ac2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac2e:	4607      	mov	r7, r0
 801ac30:	f7ff ffac 	bl	801ab8c <__sfp_lock_acquire>
 801ac34:	4b1e      	ldr	r3, [pc, #120]	; (801acb0 <__sfp+0x84>)
 801ac36:	681e      	ldr	r6, [r3, #0]
 801ac38:	69b3      	ldr	r3, [r6, #24]
 801ac3a:	b913      	cbnz	r3, 801ac42 <__sfp+0x16>
 801ac3c:	4630      	mov	r0, r6
 801ac3e:	f7ff ffbd 	bl	801abbc <__sinit>
 801ac42:	3648      	adds	r6, #72	; 0x48
 801ac44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ac48:	3b01      	subs	r3, #1
 801ac4a:	d503      	bpl.n	801ac54 <__sfp+0x28>
 801ac4c:	6833      	ldr	r3, [r6, #0]
 801ac4e:	b30b      	cbz	r3, 801ac94 <__sfp+0x68>
 801ac50:	6836      	ldr	r6, [r6, #0]
 801ac52:	e7f7      	b.n	801ac44 <__sfp+0x18>
 801ac54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ac58:	b9d5      	cbnz	r5, 801ac90 <__sfp+0x64>
 801ac5a:	4b16      	ldr	r3, [pc, #88]	; (801acb4 <__sfp+0x88>)
 801ac5c:	60e3      	str	r3, [r4, #12]
 801ac5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ac62:	6665      	str	r5, [r4, #100]	; 0x64
 801ac64:	f000 f847 	bl	801acf6 <__retarget_lock_init_recursive>
 801ac68:	f7ff ff96 	bl	801ab98 <__sfp_lock_release>
 801ac6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ac70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ac74:	6025      	str	r5, [r4, #0]
 801ac76:	61a5      	str	r5, [r4, #24]
 801ac78:	2208      	movs	r2, #8
 801ac7a:	4629      	mov	r1, r5
 801ac7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ac80:	f7ff fd44 	bl	801a70c <memset>
 801ac84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ac88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ac8c:	4620      	mov	r0, r4
 801ac8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac90:	3468      	adds	r4, #104	; 0x68
 801ac92:	e7d9      	b.n	801ac48 <__sfp+0x1c>
 801ac94:	2104      	movs	r1, #4
 801ac96:	4638      	mov	r0, r7
 801ac98:	f7ff ff62 	bl	801ab60 <__sfmoreglue>
 801ac9c:	4604      	mov	r4, r0
 801ac9e:	6030      	str	r0, [r6, #0]
 801aca0:	2800      	cmp	r0, #0
 801aca2:	d1d5      	bne.n	801ac50 <__sfp+0x24>
 801aca4:	f7ff ff78 	bl	801ab98 <__sfp_lock_release>
 801aca8:	230c      	movs	r3, #12
 801acaa:	603b      	str	r3, [r7, #0]
 801acac:	e7ee      	b.n	801ac8c <__sfp+0x60>
 801acae:	bf00      	nop
 801acb0:	0801b564 	.word	0x0801b564
 801acb4:	ffff0001 	.word	0xffff0001

0801acb8 <_fwalk_reent>:
 801acb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801acbc:	4606      	mov	r6, r0
 801acbe:	4688      	mov	r8, r1
 801acc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801acc4:	2700      	movs	r7, #0
 801acc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801acca:	f1b9 0901 	subs.w	r9, r9, #1
 801acce:	d505      	bpl.n	801acdc <_fwalk_reent+0x24>
 801acd0:	6824      	ldr	r4, [r4, #0]
 801acd2:	2c00      	cmp	r4, #0
 801acd4:	d1f7      	bne.n	801acc6 <_fwalk_reent+0xe>
 801acd6:	4638      	mov	r0, r7
 801acd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801acdc:	89ab      	ldrh	r3, [r5, #12]
 801acde:	2b01      	cmp	r3, #1
 801ace0:	d907      	bls.n	801acf2 <_fwalk_reent+0x3a>
 801ace2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ace6:	3301      	adds	r3, #1
 801ace8:	d003      	beq.n	801acf2 <_fwalk_reent+0x3a>
 801acea:	4629      	mov	r1, r5
 801acec:	4630      	mov	r0, r6
 801acee:	47c0      	blx	r8
 801acf0:	4307      	orrs	r7, r0
 801acf2:	3568      	adds	r5, #104	; 0x68
 801acf4:	e7e9      	b.n	801acca <_fwalk_reent+0x12>

0801acf6 <__retarget_lock_init_recursive>:
 801acf6:	4770      	bx	lr

0801acf8 <__retarget_lock_acquire_recursive>:
 801acf8:	4770      	bx	lr

0801acfa <__retarget_lock_release_recursive>:
 801acfa:	4770      	bx	lr

0801acfc <__swhatbuf_r>:
 801acfc:	b570      	push	{r4, r5, r6, lr}
 801acfe:	460e      	mov	r6, r1
 801ad00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad04:	2900      	cmp	r1, #0
 801ad06:	b096      	sub	sp, #88	; 0x58
 801ad08:	4614      	mov	r4, r2
 801ad0a:	461d      	mov	r5, r3
 801ad0c:	da08      	bge.n	801ad20 <__swhatbuf_r+0x24>
 801ad0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801ad12:	2200      	movs	r2, #0
 801ad14:	602a      	str	r2, [r5, #0]
 801ad16:	061a      	lsls	r2, r3, #24
 801ad18:	d410      	bmi.n	801ad3c <__swhatbuf_r+0x40>
 801ad1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ad1e:	e00e      	b.n	801ad3e <__swhatbuf_r+0x42>
 801ad20:	466a      	mov	r2, sp
 801ad22:	f000 f9a7 	bl	801b074 <_fstat_r>
 801ad26:	2800      	cmp	r0, #0
 801ad28:	dbf1      	blt.n	801ad0e <__swhatbuf_r+0x12>
 801ad2a:	9a01      	ldr	r2, [sp, #4]
 801ad2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ad30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ad34:	425a      	negs	r2, r3
 801ad36:	415a      	adcs	r2, r3
 801ad38:	602a      	str	r2, [r5, #0]
 801ad3a:	e7ee      	b.n	801ad1a <__swhatbuf_r+0x1e>
 801ad3c:	2340      	movs	r3, #64	; 0x40
 801ad3e:	2000      	movs	r0, #0
 801ad40:	6023      	str	r3, [r4, #0]
 801ad42:	b016      	add	sp, #88	; 0x58
 801ad44:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ad48 <__smakebuf_r>:
 801ad48:	898b      	ldrh	r3, [r1, #12]
 801ad4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ad4c:	079d      	lsls	r5, r3, #30
 801ad4e:	4606      	mov	r6, r0
 801ad50:	460c      	mov	r4, r1
 801ad52:	d507      	bpl.n	801ad64 <__smakebuf_r+0x1c>
 801ad54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ad58:	6023      	str	r3, [r4, #0]
 801ad5a:	6123      	str	r3, [r4, #16]
 801ad5c:	2301      	movs	r3, #1
 801ad5e:	6163      	str	r3, [r4, #20]
 801ad60:	b002      	add	sp, #8
 801ad62:	bd70      	pop	{r4, r5, r6, pc}
 801ad64:	ab01      	add	r3, sp, #4
 801ad66:	466a      	mov	r2, sp
 801ad68:	f7ff ffc8 	bl	801acfc <__swhatbuf_r>
 801ad6c:	9900      	ldr	r1, [sp, #0]
 801ad6e:	4605      	mov	r5, r0
 801ad70:	4630      	mov	r0, r6
 801ad72:	f000 f895 	bl	801aea0 <_malloc_r>
 801ad76:	b948      	cbnz	r0, 801ad8c <__smakebuf_r+0x44>
 801ad78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ad7c:	059a      	lsls	r2, r3, #22
 801ad7e:	d4ef      	bmi.n	801ad60 <__smakebuf_r+0x18>
 801ad80:	f023 0303 	bic.w	r3, r3, #3
 801ad84:	f043 0302 	orr.w	r3, r3, #2
 801ad88:	81a3      	strh	r3, [r4, #12]
 801ad8a:	e7e3      	b.n	801ad54 <__smakebuf_r+0xc>
 801ad8c:	4b0d      	ldr	r3, [pc, #52]	; (801adc4 <__smakebuf_r+0x7c>)
 801ad8e:	62b3      	str	r3, [r6, #40]	; 0x28
 801ad90:	89a3      	ldrh	r3, [r4, #12]
 801ad92:	6020      	str	r0, [r4, #0]
 801ad94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ad98:	81a3      	strh	r3, [r4, #12]
 801ad9a:	9b00      	ldr	r3, [sp, #0]
 801ad9c:	6163      	str	r3, [r4, #20]
 801ad9e:	9b01      	ldr	r3, [sp, #4]
 801ada0:	6120      	str	r0, [r4, #16]
 801ada2:	b15b      	cbz	r3, 801adbc <__smakebuf_r+0x74>
 801ada4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ada8:	4630      	mov	r0, r6
 801adaa:	f000 f975 	bl	801b098 <_isatty_r>
 801adae:	b128      	cbz	r0, 801adbc <__smakebuf_r+0x74>
 801adb0:	89a3      	ldrh	r3, [r4, #12]
 801adb2:	f023 0303 	bic.w	r3, r3, #3
 801adb6:	f043 0301 	orr.w	r3, r3, #1
 801adba:	81a3      	strh	r3, [r4, #12]
 801adbc:	89a0      	ldrh	r0, [r4, #12]
 801adbe:	4305      	orrs	r5, r0
 801adc0:	81a5      	strh	r5, [r4, #12]
 801adc2:	e7cd      	b.n	801ad60 <__smakebuf_r+0x18>
 801adc4:	0801ab55 	.word	0x0801ab55

0801adc8 <_free_r>:
 801adc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801adca:	2900      	cmp	r1, #0
 801adcc:	d044      	beq.n	801ae58 <_free_r+0x90>
 801adce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801add2:	9001      	str	r0, [sp, #4]
 801add4:	2b00      	cmp	r3, #0
 801add6:	f1a1 0404 	sub.w	r4, r1, #4
 801adda:	bfb8      	it	lt
 801addc:	18e4      	addlt	r4, r4, r3
 801adde:	f000 f97d 	bl	801b0dc <__malloc_lock>
 801ade2:	4a1e      	ldr	r2, [pc, #120]	; (801ae5c <_free_r+0x94>)
 801ade4:	9801      	ldr	r0, [sp, #4]
 801ade6:	6813      	ldr	r3, [r2, #0]
 801ade8:	b933      	cbnz	r3, 801adf8 <_free_r+0x30>
 801adea:	6063      	str	r3, [r4, #4]
 801adec:	6014      	str	r4, [r2, #0]
 801adee:	b003      	add	sp, #12
 801adf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801adf4:	f000 b978 	b.w	801b0e8 <__malloc_unlock>
 801adf8:	42a3      	cmp	r3, r4
 801adfa:	d908      	bls.n	801ae0e <_free_r+0x46>
 801adfc:	6825      	ldr	r5, [r4, #0]
 801adfe:	1961      	adds	r1, r4, r5
 801ae00:	428b      	cmp	r3, r1
 801ae02:	bf01      	itttt	eq
 801ae04:	6819      	ldreq	r1, [r3, #0]
 801ae06:	685b      	ldreq	r3, [r3, #4]
 801ae08:	1949      	addeq	r1, r1, r5
 801ae0a:	6021      	streq	r1, [r4, #0]
 801ae0c:	e7ed      	b.n	801adea <_free_r+0x22>
 801ae0e:	461a      	mov	r2, r3
 801ae10:	685b      	ldr	r3, [r3, #4]
 801ae12:	b10b      	cbz	r3, 801ae18 <_free_r+0x50>
 801ae14:	42a3      	cmp	r3, r4
 801ae16:	d9fa      	bls.n	801ae0e <_free_r+0x46>
 801ae18:	6811      	ldr	r1, [r2, #0]
 801ae1a:	1855      	adds	r5, r2, r1
 801ae1c:	42a5      	cmp	r5, r4
 801ae1e:	d10b      	bne.n	801ae38 <_free_r+0x70>
 801ae20:	6824      	ldr	r4, [r4, #0]
 801ae22:	4421      	add	r1, r4
 801ae24:	1854      	adds	r4, r2, r1
 801ae26:	42a3      	cmp	r3, r4
 801ae28:	6011      	str	r1, [r2, #0]
 801ae2a:	d1e0      	bne.n	801adee <_free_r+0x26>
 801ae2c:	681c      	ldr	r4, [r3, #0]
 801ae2e:	685b      	ldr	r3, [r3, #4]
 801ae30:	6053      	str	r3, [r2, #4]
 801ae32:	4421      	add	r1, r4
 801ae34:	6011      	str	r1, [r2, #0]
 801ae36:	e7da      	b.n	801adee <_free_r+0x26>
 801ae38:	d902      	bls.n	801ae40 <_free_r+0x78>
 801ae3a:	230c      	movs	r3, #12
 801ae3c:	6003      	str	r3, [r0, #0]
 801ae3e:	e7d6      	b.n	801adee <_free_r+0x26>
 801ae40:	6825      	ldr	r5, [r4, #0]
 801ae42:	1961      	adds	r1, r4, r5
 801ae44:	428b      	cmp	r3, r1
 801ae46:	bf04      	itt	eq
 801ae48:	6819      	ldreq	r1, [r3, #0]
 801ae4a:	685b      	ldreq	r3, [r3, #4]
 801ae4c:	6063      	str	r3, [r4, #4]
 801ae4e:	bf04      	itt	eq
 801ae50:	1949      	addeq	r1, r1, r5
 801ae52:	6021      	streq	r1, [r4, #0]
 801ae54:	6054      	str	r4, [r2, #4]
 801ae56:	e7ca      	b.n	801adee <_free_r+0x26>
 801ae58:	b003      	add	sp, #12
 801ae5a:	bd30      	pop	{r4, r5, pc}
 801ae5c:	24006970 	.word	0x24006970

0801ae60 <sbrk_aligned>:
 801ae60:	b570      	push	{r4, r5, r6, lr}
 801ae62:	4e0e      	ldr	r6, [pc, #56]	; (801ae9c <sbrk_aligned+0x3c>)
 801ae64:	460c      	mov	r4, r1
 801ae66:	6831      	ldr	r1, [r6, #0]
 801ae68:	4605      	mov	r5, r0
 801ae6a:	b911      	cbnz	r1, 801ae72 <sbrk_aligned+0x12>
 801ae6c:	f000 f88c 	bl	801af88 <_sbrk_r>
 801ae70:	6030      	str	r0, [r6, #0]
 801ae72:	4621      	mov	r1, r4
 801ae74:	4628      	mov	r0, r5
 801ae76:	f000 f887 	bl	801af88 <_sbrk_r>
 801ae7a:	1c43      	adds	r3, r0, #1
 801ae7c:	d00a      	beq.n	801ae94 <sbrk_aligned+0x34>
 801ae7e:	1cc4      	adds	r4, r0, #3
 801ae80:	f024 0403 	bic.w	r4, r4, #3
 801ae84:	42a0      	cmp	r0, r4
 801ae86:	d007      	beq.n	801ae98 <sbrk_aligned+0x38>
 801ae88:	1a21      	subs	r1, r4, r0
 801ae8a:	4628      	mov	r0, r5
 801ae8c:	f000 f87c 	bl	801af88 <_sbrk_r>
 801ae90:	3001      	adds	r0, #1
 801ae92:	d101      	bne.n	801ae98 <sbrk_aligned+0x38>
 801ae94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801ae98:	4620      	mov	r0, r4
 801ae9a:	bd70      	pop	{r4, r5, r6, pc}
 801ae9c:	24006974 	.word	0x24006974

0801aea0 <_malloc_r>:
 801aea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aea4:	1ccd      	adds	r5, r1, #3
 801aea6:	f025 0503 	bic.w	r5, r5, #3
 801aeaa:	3508      	adds	r5, #8
 801aeac:	2d0c      	cmp	r5, #12
 801aeae:	bf38      	it	cc
 801aeb0:	250c      	movcc	r5, #12
 801aeb2:	2d00      	cmp	r5, #0
 801aeb4:	4607      	mov	r7, r0
 801aeb6:	db01      	blt.n	801aebc <_malloc_r+0x1c>
 801aeb8:	42a9      	cmp	r1, r5
 801aeba:	d905      	bls.n	801aec8 <_malloc_r+0x28>
 801aebc:	230c      	movs	r3, #12
 801aebe:	603b      	str	r3, [r7, #0]
 801aec0:	2600      	movs	r6, #0
 801aec2:	4630      	mov	r0, r6
 801aec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aec8:	4e2e      	ldr	r6, [pc, #184]	; (801af84 <_malloc_r+0xe4>)
 801aeca:	f000 f907 	bl	801b0dc <__malloc_lock>
 801aece:	6833      	ldr	r3, [r6, #0]
 801aed0:	461c      	mov	r4, r3
 801aed2:	bb34      	cbnz	r4, 801af22 <_malloc_r+0x82>
 801aed4:	4629      	mov	r1, r5
 801aed6:	4638      	mov	r0, r7
 801aed8:	f7ff ffc2 	bl	801ae60 <sbrk_aligned>
 801aedc:	1c43      	adds	r3, r0, #1
 801aede:	4604      	mov	r4, r0
 801aee0:	d14d      	bne.n	801af7e <_malloc_r+0xde>
 801aee2:	6834      	ldr	r4, [r6, #0]
 801aee4:	4626      	mov	r6, r4
 801aee6:	2e00      	cmp	r6, #0
 801aee8:	d140      	bne.n	801af6c <_malloc_r+0xcc>
 801aeea:	6823      	ldr	r3, [r4, #0]
 801aeec:	4631      	mov	r1, r6
 801aeee:	4638      	mov	r0, r7
 801aef0:	eb04 0803 	add.w	r8, r4, r3
 801aef4:	f000 f848 	bl	801af88 <_sbrk_r>
 801aef8:	4580      	cmp	r8, r0
 801aefa:	d13a      	bne.n	801af72 <_malloc_r+0xd2>
 801aefc:	6821      	ldr	r1, [r4, #0]
 801aefe:	3503      	adds	r5, #3
 801af00:	1a6d      	subs	r5, r5, r1
 801af02:	f025 0503 	bic.w	r5, r5, #3
 801af06:	3508      	adds	r5, #8
 801af08:	2d0c      	cmp	r5, #12
 801af0a:	bf38      	it	cc
 801af0c:	250c      	movcc	r5, #12
 801af0e:	4629      	mov	r1, r5
 801af10:	4638      	mov	r0, r7
 801af12:	f7ff ffa5 	bl	801ae60 <sbrk_aligned>
 801af16:	3001      	adds	r0, #1
 801af18:	d02b      	beq.n	801af72 <_malloc_r+0xd2>
 801af1a:	6823      	ldr	r3, [r4, #0]
 801af1c:	442b      	add	r3, r5
 801af1e:	6023      	str	r3, [r4, #0]
 801af20:	e00e      	b.n	801af40 <_malloc_r+0xa0>
 801af22:	6822      	ldr	r2, [r4, #0]
 801af24:	1b52      	subs	r2, r2, r5
 801af26:	d41e      	bmi.n	801af66 <_malloc_r+0xc6>
 801af28:	2a0b      	cmp	r2, #11
 801af2a:	d916      	bls.n	801af5a <_malloc_r+0xba>
 801af2c:	1961      	adds	r1, r4, r5
 801af2e:	42a3      	cmp	r3, r4
 801af30:	6025      	str	r5, [r4, #0]
 801af32:	bf18      	it	ne
 801af34:	6059      	strne	r1, [r3, #4]
 801af36:	6863      	ldr	r3, [r4, #4]
 801af38:	bf08      	it	eq
 801af3a:	6031      	streq	r1, [r6, #0]
 801af3c:	5162      	str	r2, [r4, r5]
 801af3e:	604b      	str	r3, [r1, #4]
 801af40:	4638      	mov	r0, r7
 801af42:	f104 060b 	add.w	r6, r4, #11
 801af46:	f000 f8cf 	bl	801b0e8 <__malloc_unlock>
 801af4a:	f026 0607 	bic.w	r6, r6, #7
 801af4e:	1d23      	adds	r3, r4, #4
 801af50:	1af2      	subs	r2, r6, r3
 801af52:	d0b6      	beq.n	801aec2 <_malloc_r+0x22>
 801af54:	1b9b      	subs	r3, r3, r6
 801af56:	50a3      	str	r3, [r4, r2]
 801af58:	e7b3      	b.n	801aec2 <_malloc_r+0x22>
 801af5a:	6862      	ldr	r2, [r4, #4]
 801af5c:	42a3      	cmp	r3, r4
 801af5e:	bf0c      	ite	eq
 801af60:	6032      	streq	r2, [r6, #0]
 801af62:	605a      	strne	r2, [r3, #4]
 801af64:	e7ec      	b.n	801af40 <_malloc_r+0xa0>
 801af66:	4623      	mov	r3, r4
 801af68:	6864      	ldr	r4, [r4, #4]
 801af6a:	e7b2      	b.n	801aed2 <_malloc_r+0x32>
 801af6c:	4634      	mov	r4, r6
 801af6e:	6876      	ldr	r6, [r6, #4]
 801af70:	e7b9      	b.n	801aee6 <_malloc_r+0x46>
 801af72:	230c      	movs	r3, #12
 801af74:	603b      	str	r3, [r7, #0]
 801af76:	4638      	mov	r0, r7
 801af78:	f000 f8b6 	bl	801b0e8 <__malloc_unlock>
 801af7c:	e7a1      	b.n	801aec2 <_malloc_r+0x22>
 801af7e:	6025      	str	r5, [r4, #0]
 801af80:	e7de      	b.n	801af40 <_malloc_r+0xa0>
 801af82:	bf00      	nop
 801af84:	24006970 	.word	0x24006970

0801af88 <_sbrk_r>:
 801af88:	b538      	push	{r3, r4, r5, lr}
 801af8a:	4d06      	ldr	r5, [pc, #24]	; (801afa4 <_sbrk_r+0x1c>)
 801af8c:	2300      	movs	r3, #0
 801af8e:	4604      	mov	r4, r0
 801af90:	4608      	mov	r0, r1
 801af92:	602b      	str	r3, [r5, #0]
 801af94:	f7e9 fd86 	bl	8004aa4 <_sbrk>
 801af98:	1c43      	adds	r3, r0, #1
 801af9a:	d102      	bne.n	801afa2 <_sbrk_r+0x1a>
 801af9c:	682b      	ldr	r3, [r5, #0]
 801af9e:	b103      	cbz	r3, 801afa2 <_sbrk_r+0x1a>
 801afa0:	6023      	str	r3, [r4, #0]
 801afa2:	bd38      	pop	{r3, r4, r5, pc}
 801afa4:	24006978 	.word	0x24006978

0801afa8 <__sread>:
 801afa8:	b510      	push	{r4, lr}
 801afaa:	460c      	mov	r4, r1
 801afac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801afb0:	f000 f8a0 	bl	801b0f4 <_read_r>
 801afb4:	2800      	cmp	r0, #0
 801afb6:	bfab      	itete	ge
 801afb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801afba:	89a3      	ldrhlt	r3, [r4, #12]
 801afbc:	181b      	addge	r3, r3, r0
 801afbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801afc2:	bfac      	ite	ge
 801afc4:	6563      	strge	r3, [r4, #84]	; 0x54
 801afc6:	81a3      	strhlt	r3, [r4, #12]
 801afc8:	bd10      	pop	{r4, pc}

0801afca <__swrite>:
 801afca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801afce:	461f      	mov	r7, r3
 801afd0:	898b      	ldrh	r3, [r1, #12]
 801afd2:	05db      	lsls	r3, r3, #23
 801afd4:	4605      	mov	r5, r0
 801afd6:	460c      	mov	r4, r1
 801afd8:	4616      	mov	r6, r2
 801afda:	d505      	bpl.n	801afe8 <__swrite+0x1e>
 801afdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801afe0:	2302      	movs	r3, #2
 801afe2:	2200      	movs	r2, #0
 801afe4:	f000 f868 	bl	801b0b8 <_lseek_r>
 801afe8:	89a3      	ldrh	r3, [r4, #12]
 801afea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801afee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801aff2:	81a3      	strh	r3, [r4, #12]
 801aff4:	4632      	mov	r2, r6
 801aff6:	463b      	mov	r3, r7
 801aff8:	4628      	mov	r0, r5
 801affa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801affe:	f000 b817 	b.w	801b030 <_write_r>

0801b002 <__sseek>:
 801b002:	b510      	push	{r4, lr}
 801b004:	460c      	mov	r4, r1
 801b006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b00a:	f000 f855 	bl	801b0b8 <_lseek_r>
 801b00e:	1c43      	adds	r3, r0, #1
 801b010:	89a3      	ldrh	r3, [r4, #12]
 801b012:	bf15      	itete	ne
 801b014:	6560      	strne	r0, [r4, #84]	; 0x54
 801b016:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b01a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b01e:	81a3      	strheq	r3, [r4, #12]
 801b020:	bf18      	it	ne
 801b022:	81a3      	strhne	r3, [r4, #12]
 801b024:	bd10      	pop	{r4, pc}

0801b026 <__sclose>:
 801b026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b02a:	f000 b813 	b.w	801b054 <_close_r>
	...

0801b030 <_write_r>:
 801b030:	b538      	push	{r3, r4, r5, lr}
 801b032:	4d07      	ldr	r5, [pc, #28]	; (801b050 <_write_r+0x20>)
 801b034:	4604      	mov	r4, r0
 801b036:	4608      	mov	r0, r1
 801b038:	4611      	mov	r1, r2
 801b03a:	2200      	movs	r2, #0
 801b03c:	602a      	str	r2, [r5, #0]
 801b03e:	461a      	mov	r2, r3
 801b040:	f7e9 fcdf 	bl	8004a02 <_write>
 801b044:	1c43      	adds	r3, r0, #1
 801b046:	d102      	bne.n	801b04e <_write_r+0x1e>
 801b048:	682b      	ldr	r3, [r5, #0]
 801b04a:	b103      	cbz	r3, 801b04e <_write_r+0x1e>
 801b04c:	6023      	str	r3, [r4, #0]
 801b04e:	bd38      	pop	{r3, r4, r5, pc}
 801b050:	24006978 	.word	0x24006978

0801b054 <_close_r>:
 801b054:	b538      	push	{r3, r4, r5, lr}
 801b056:	4d06      	ldr	r5, [pc, #24]	; (801b070 <_close_r+0x1c>)
 801b058:	2300      	movs	r3, #0
 801b05a:	4604      	mov	r4, r0
 801b05c:	4608      	mov	r0, r1
 801b05e:	602b      	str	r3, [r5, #0]
 801b060:	f7e9 fceb 	bl	8004a3a <_close>
 801b064:	1c43      	adds	r3, r0, #1
 801b066:	d102      	bne.n	801b06e <_close_r+0x1a>
 801b068:	682b      	ldr	r3, [r5, #0]
 801b06a:	b103      	cbz	r3, 801b06e <_close_r+0x1a>
 801b06c:	6023      	str	r3, [r4, #0]
 801b06e:	bd38      	pop	{r3, r4, r5, pc}
 801b070:	24006978 	.word	0x24006978

0801b074 <_fstat_r>:
 801b074:	b538      	push	{r3, r4, r5, lr}
 801b076:	4d07      	ldr	r5, [pc, #28]	; (801b094 <_fstat_r+0x20>)
 801b078:	2300      	movs	r3, #0
 801b07a:	4604      	mov	r4, r0
 801b07c:	4608      	mov	r0, r1
 801b07e:	4611      	mov	r1, r2
 801b080:	602b      	str	r3, [r5, #0]
 801b082:	f7e9 fce6 	bl	8004a52 <_fstat>
 801b086:	1c43      	adds	r3, r0, #1
 801b088:	d102      	bne.n	801b090 <_fstat_r+0x1c>
 801b08a:	682b      	ldr	r3, [r5, #0]
 801b08c:	b103      	cbz	r3, 801b090 <_fstat_r+0x1c>
 801b08e:	6023      	str	r3, [r4, #0]
 801b090:	bd38      	pop	{r3, r4, r5, pc}
 801b092:	bf00      	nop
 801b094:	24006978 	.word	0x24006978

0801b098 <_isatty_r>:
 801b098:	b538      	push	{r3, r4, r5, lr}
 801b09a:	4d06      	ldr	r5, [pc, #24]	; (801b0b4 <_isatty_r+0x1c>)
 801b09c:	2300      	movs	r3, #0
 801b09e:	4604      	mov	r4, r0
 801b0a0:	4608      	mov	r0, r1
 801b0a2:	602b      	str	r3, [r5, #0]
 801b0a4:	f7e9 fce5 	bl	8004a72 <_isatty>
 801b0a8:	1c43      	adds	r3, r0, #1
 801b0aa:	d102      	bne.n	801b0b2 <_isatty_r+0x1a>
 801b0ac:	682b      	ldr	r3, [r5, #0]
 801b0ae:	b103      	cbz	r3, 801b0b2 <_isatty_r+0x1a>
 801b0b0:	6023      	str	r3, [r4, #0]
 801b0b2:	bd38      	pop	{r3, r4, r5, pc}
 801b0b4:	24006978 	.word	0x24006978

0801b0b8 <_lseek_r>:
 801b0b8:	b538      	push	{r3, r4, r5, lr}
 801b0ba:	4d07      	ldr	r5, [pc, #28]	; (801b0d8 <_lseek_r+0x20>)
 801b0bc:	4604      	mov	r4, r0
 801b0be:	4608      	mov	r0, r1
 801b0c0:	4611      	mov	r1, r2
 801b0c2:	2200      	movs	r2, #0
 801b0c4:	602a      	str	r2, [r5, #0]
 801b0c6:	461a      	mov	r2, r3
 801b0c8:	f7e9 fcde 	bl	8004a88 <_lseek>
 801b0cc:	1c43      	adds	r3, r0, #1
 801b0ce:	d102      	bne.n	801b0d6 <_lseek_r+0x1e>
 801b0d0:	682b      	ldr	r3, [r5, #0]
 801b0d2:	b103      	cbz	r3, 801b0d6 <_lseek_r+0x1e>
 801b0d4:	6023      	str	r3, [r4, #0]
 801b0d6:	bd38      	pop	{r3, r4, r5, pc}
 801b0d8:	24006978 	.word	0x24006978

0801b0dc <__malloc_lock>:
 801b0dc:	4801      	ldr	r0, [pc, #4]	; (801b0e4 <__malloc_lock+0x8>)
 801b0de:	f7ff be0b 	b.w	801acf8 <__retarget_lock_acquire_recursive>
 801b0e2:	bf00      	nop
 801b0e4:	2400696c 	.word	0x2400696c

0801b0e8 <__malloc_unlock>:
 801b0e8:	4801      	ldr	r0, [pc, #4]	; (801b0f0 <__malloc_unlock+0x8>)
 801b0ea:	f7ff be06 	b.w	801acfa <__retarget_lock_release_recursive>
 801b0ee:	bf00      	nop
 801b0f0:	2400696c 	.word	0x2400696c

0801b0f4 <_read_r>:
 801b0f4:	b538      	push	{r3, r4, r5, lr}
 801b0f6:	4d07      	ldr	r5, [pc, #28]	; (801b114 <_read_r+0x20>)
 801b0f8:	4604      	mov	r4, r0
 801b0fa:	4608      	mov	r0, r1
 801b0fc:	4611      	mov	r1, r2
 801b0fe:	2200      	movs	r2, #0
 801b100:	602a      	str	r2, [r5, #0]
 801b102:	461a      	mov	r2, r3
 801b104:	f7e9 fc60 	bl	80049c8 <_read>
 801b108:	1c43      	adds	r3, r0, #1
 801b10a:	d102      	bne.n	801b112 <_read_r+0x1e>
 801b10c:	682b      	ldr	r3, [r5, #0]
 801b10e:	b103      	cbz	r3, 801b112 <_read_r+0x1e>
 801b110:	6023      	str	r3, [r4, #0]
 801b112:	bd38      	pop	{r3, r4, r5, pc}
 801b114:	24006978 	.word	0x24006978

0801b118 <_init>:
 801b118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b11a:	bf00      	nop
 801b11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b11e:	bc08      	pop	{r3}
 801b120:	469e      	mov	lr, r3
 801b122:	4770      	bx	lr

0801b124 <_fini>:
 801b124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b126:	bf00      	nop
 801b128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b12a:	bc08      	pop	{r3}
 801b12c:	469e      	mov	lr, r3
 801b12e:	4770      	bx	lr
